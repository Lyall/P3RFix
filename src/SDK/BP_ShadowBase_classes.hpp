#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ShadowBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CharacterBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ShadowBase.BP_ShadowBase_C
// 0x0050 (0x02D8 - 0x0288)
class ABP_ShadowBase_C final : public AShadowBaseCore
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	float                                         StartPosition_VG;                                  // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         EndPosition_VG;                                    // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstanceDynamic*>       DynamicMIs;                                        // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         BoundsScale;                                       // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAllPointLightsMode;                               // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_CharaPointLight_C*>          AllPointLights;                                    // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_CharaPointLight_C*>          ClosestPointLights;                                // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         LastRenderTimeOnScreen;                            // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_ShadowBase(int32 EntryPoint);
	void Event_ResetAllPointLightsMode();
	void Event_GetAllCharaPointLights();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();
	void CreateDMI(class UMeshComponent* MeshComponent);
	void SetPointLightParameter(class UMaterialInstanceDynamic* MIDObjectReference);
	void SetDMIParameter_Tick();
	void SetScalarParameterValueEx(class UMaterialInstanceDynamic* Material, class FName ParameterName, float ParameterValue);
	void Get_All_Chara_Point_Lights();
	void ResetAllPointLightsMode();
	void GetClosestPointLights(TArray<class ABP_CharaPointLight_C*>& PointLights, int32 NumOfLights);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ShadowBase_C">();
	}
	static class ABP_ShadowBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ShadowBase_C>();
	}
};
static_assert(alignof(ABP_ShadowBase_C) == 0x000008, "Wrong alignment on ABP_ShadowBase_C");
static_assert(sizeof(ABP_ShadowBase_C) == 0x0002D8, "Wrong size on ABP_ShadowBase_C");
static_assert(offsetof(ABP_ShadowBase_C, UberGraphFrame) == 0x000288, "Member 'ABP_ShadowBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ShadowBase_C, StartPosition_VG) == 0x000290, "Member 'ABP_ShadowBase_C::StartPosition_VG' has a wrong offset!");
static_assert(offsetof(ABP_ShadowBase_C, EndPosition_VG) == 0x000294, "Member 'ABP_ShadowBase_C::EndPosition_VG' has a wrong offset!");
static_assert(offsetof(ABP_ShadowBase_C, DynamicMIs) == 0x000298, "Member 'ABP_ShadowBase_C::DynamicMIs' has a wrong offset!");
static_assert(offsetof(ABP_ShadowBase_C, BoundsScale) == 0x0002A8, "Member 'ABP_ShadowBase_C::BoundsScale' has a wrong offset!");
static_assert(offsetof(ABP_ShadowBase_C, bAllPointLightsMode) == 0x0002AC, "Member 'ABP_ShadowBase_C::bAllPointLightsMode' has a wrong offset!");
static_assert(offsetof(ABP_ShadowBase_C, AllPointLights) == 0x0002B0, "Member 'ABP_ShadowBase_C::AllPointLights' has a wrong offset!");
static_assert(offsetof(ABP_ShadowBase_C, ClosestPointLights) == 0x0002C0, "Member 'ABP_ShadowBase_C::ClosestPointLights' has a wrong offset!");
static_assert(offsetof(ABP_ShadowBase_C, LastRenderTimeOnScreen) == 0x0002D0, "Member 'ABP_ShadowBase_C::LastRenderTimeOnScreen' has a wrong offset!");

}

