#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlPhaseFighting

#include "Basic.hpp"

#include "BP_BtlPhaseFighting_classes.hpp"
#include "BP_BtlPhaseFighting_parameters.hpp"


namespace SDK
{

// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.ExecuteUbergraph_BP_BtlPhaseFighting
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPhaseFighting_C::ExecuteUbergraph_BP_BtlPhaseFighting(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "ExecuteUbergraph_BP_BtlPhaseFighting");

	Params::BP_BtlPhaseFighting_C_ExecuteUbergraph_BP_BtlPhaseFighting Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Progress Next Turn From Retry
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Progress_Next_Turn_From_Retry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Progress Next Turn From Retry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Retry
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Retry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Retry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.HasFinishedWipePerformance
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::HasFinishedWipePerformance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "HasFinishedWipePerformance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.Has Finished Turn End Event
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::Has_Finished_Turn_End_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "Has Finished Turn End Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.Has Finished AI Start
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::Has_Finished_AI_Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "Has Finished AI Start");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Process Select Command
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Process_Select_Command()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Process Select Command");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.FinalizePhaseInBP
// (Event, Protected, BlueprintEvent)

void ABP_BtlPhaseFighting_C::FinalizePhaseInBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "FinalizePhaseInBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.StartPhaseInBP
// (Event, Protected, BlueprintEvent)

void ABP_BtlPhaseFighting_C::StartPhaseInBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "StartPhaseInBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Progress Next Turn
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Progress_Next_Turn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Progress Next Turn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Start Action Turn
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Start_Action_Turn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Start Action Turn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Process Pre Act
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Process_Pre_Act()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Process Pre Act");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Process Act Bad Status
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Process_Act_Bad_Status()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Process Act Bad Status");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Process Recover Bad Status
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Process_Recover_Bad_Status()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Process Recover Bad Status");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Process Expire Support
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Process_Expire_Support()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Process Expire Support");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.Has Finished Shuffle Time
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::Has_Finished_Shuffle_Time()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "Has Finished Shuffle Time");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Shift Result
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Shift_Result()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Shift Result");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Switch Allout cut 3
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Switch_Allout_cut_3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Switch Allout cut 3");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Switch Shuffle
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Switch_Shuffle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Switch Shuffle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Switch Allout Cut 2
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Switch_Allout_Cut_2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Switch Allout Cut 2");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Play General Attack
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Play_General_Attack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Play General Attack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Cancel Holdup
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Cancel_Holdup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Cancel Holdup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Shift General Attack
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Shift_General_Attack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Shift General Attack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Start Holdup
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Start_Holdup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Start Holdup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.On Allout Shuffle BGM Switch
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::On_Allout_Shuffle_BGM_Switch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "On Allout Shuffle BGM Switch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.OnLoaded_BEF8F5C44FEAA533FABD21BFFF755582
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPhaseFighting_C::OnLoaded_BEF8F5C44FEAA533FABD21BFFF755582(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "OnLoaded_BEF8F5C44FEAA533FABD21BFFF755582");

	Params::BP_BtlPhaseFighting_C_OnLoaded_BEF8F5C44FEAA533FABD21BFFF755582 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.OnLoaded_89C338DF41743B3A060FCBAB8ED6F29A
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPhaseFighting_C::OnLoaded_89C338DF41743B3A060FCBAB8ED6F29A(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "OnLoaded_89C338DF41743B3A060FCBAB8ED6F29A");

	Params::BP_BtlPhaseFighting_C_OnLoaded_89C338DF41743B3A060FCBAB8ED6F29A Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.GetNextPhaseInBP
// (Event, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABtlPhase*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class ABtlPhase* ABP_BtlPhaseFighting_C::GetNextPhaseInBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "GetNextPhaseInBP");

	Params::BP_BtlPhaseFighting_C_GetNextPhaseInBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.GetMainAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           MainCharacter                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPhaseFighting_C::GetMainAction(class ABP_BtlCharacterBase_C** MainCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "GetMainAction");

	Params::BP_BtlPhaseFighting_C_GetMainAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MainCharacter != nullptr)
		*MainCharacter = Parms.MainCharacter;
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.GetEventMainAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           EventMainChara                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_BtlPhaseFighting_C::GetEventMainAction(class ABP_BtlCharacterBase_C** EventMainChara)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "GetEventMainAction");

	Params::BP_BtlPhaseFighting_C_GetEventMainAction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EventMainChara != nullptr)
		*EventMainChara = Parms.EventMainChara;
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.PrepareTurnStart
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPhaseFighting_C::PrepareTurnStart(class ABP_BtlCharacterBase_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "PrepareTurnStart");

	Params::BP_BtlPhaseFighting_C_PrepareTurnStart Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.Setup
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBtlAIManagerComponent*           AIManager_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_BtlActionManager_C*           ActionManager_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_BtlGuiComponent_C*            BtlGui_0                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBtlCoreComponent*                BtlCore_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_BtlTargetManager_C*           TargetManager_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_BtlCameraManagerComponent_C*  CameraManager_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBtlInputComponent*               BtlInput_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_BtlEnvironment_C*             BtlEnvironment_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_BtlUICameraComponent_C*       UICamera_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_BtlEvent_C*                   BtlEvent_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPhaseFighting_C::Setup(class UBtlAIManagerComponent* AIManager_0, class UBP_BtlActionManager_C* ActionManager_0, class UBP_BtlGuiComponent_C* BtlGui_0, class UBtlCoreComponent* BtlCore_0, class UBP_BtlTargetManager_C* TargetManager_0, class UBP_BtlCameraManagerComponent_C* CameraManager_0, class UBtlInputComponent* BtlInput_0, class UBP_BtlEnvironment_C* BtlEnvironment_0, class UBP_BtlUICameraComponent_C* UICamera_0, class UBP_BtlEvent_C* BtlEvent_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "Setup");

	Params::BP_BtlPhaseFighting_C_Setup Parms{};

	Parms.AIManager_0 = AIManager_0;
	Parms.ActionManager_0 = ActionManager_0;
	Parms.BtlGui_0 = BtlGui_0;
	Parms.BtlCore_0 = BtlCore_0;
	Parms.TargetManager_0 = TargetManager_0;
	Parms.CameraManager_0 = CameraManager_0;
	Parms.BtlInput_0 = BtlInput_0;
	Parms.BtlEnvironment_0 = BtlEnvironment_0;
	Parms.UICamera_0 = UICamera_0;
	Parms.BtlEvent_0 = BtlEvent_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.SetExitReady
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::SetExitReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "SetExitReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.SetupFormation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           NextCharacter                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPhaseFighting_C::SetupFormation(class ABP_BtlCharacterBase_C* NextCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "SetupFormation");

	Params::BP_BtlPhaseFighting_C_SetupFormation Parms{};

	Parms.NextCharacter = NextCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.WaitAnimAllPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NoBlend                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPhaseFighting_C::WaitAnimAllPlayer(bool NoBlend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "WaitAnimAllPlayer");

	Params::BP_BtlPhaseFighting_C_WaitAnimAllPlayer Parms{};

	Parms.NoBlend = NoBlend;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.WaitAnimAllEnemies
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::WaitAnimAllEnemies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "WaitAnimAllEnemies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.Wait Dying Anim Alive Enemies For Allout Damage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::Wait_Dying_Anim_Alive_Enemies_For_Allout_Damage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "Wait Dying Anim Alive Enemies For Allout Damage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.SetupParyPanel
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABtlActor*                        MainChara_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPhaseFighting_C::SetupParyPanel(class ABtlActor* MainChara_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "SetupParyPanel");

	Params::BP_BtlPhaseFighting_C_SetupParyPanel Parms{};

	Parms.MainChara_0 = MainChara_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.SwitchEachInitiateProc
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::SwitchEachInitiateProc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "SwitchEachInitiateProc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.SetupAllCharacter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::SetupAllCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "SetupAllCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.CreateNextPhase
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBtlPhaseType                           Phase                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABtlPhase*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class ABtlPhase* ABP_BtlPhaseFighting_C::CreateNextPhase(EBtlPhaseType Phase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "CreateNextPhase");

	Params::BP_BtlPhaseFighting_C_CreateNextPhase Parms{};

	Parms.Phase = Phase;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.ProcPreAct
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::ProcPreAct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "ProcPreAct");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.PreActRelocation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::PreActRelocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "PreActRelocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.PlayPreActCamera
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::PlayPreActCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "PlayPreActCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.MakeOtherAlloutMember
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_BtlCharacterBase_C*>   OtherMembers                                           (Parm, OutParm)

void ABP_BtlPhaseFighting_C::MakeOtherAlloutMember(TArray<class ABP_BtlCharacterBase_C*>* OtherMembers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "MakeOtherAlloutMember");

	Params::BP_BtlPhaseFighting_C_MakeOtherAlloutMember Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OtherMembers != nullptr)
		*OtherMembers = std::move(Parms.OtherMembers);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.SetupAlloutAttack
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           MainCharacter                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_BtlCharacterBase_C*           HERO                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPhaseFighting_C::SetupAlloutAttack(class ABP_BtlCharacterBase_C* MainCharacter, class ABP_BtlCharacterBase_C* HERO)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "SetupAlloutAttack");

	Params::BP_BtlPhaseFighting_C_SetupAlloutAttack Parms{};

	Parms.MainCharacter = MainCharacter;
	Parms.HERO = HERO;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.RotateEnemyAnchorForAllout
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::RotateEnemyAnchorForAllout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "RotateEnemyAnchorForAllout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.SetupTargetsForAllout
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::SetupTargetsForAllout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "SetupTargetsForAllout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.SetAllCharacterVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPhaseFighting_C::SetAllCharacterVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "SetAllCharacterVisible");

	Params::BP_BtlPhaseFighting_C_SetAllCharacterVisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.HideExceptAlloutParticipants
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::HideExceptAlloutParticipants()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "HideExceptAlloutParticipants");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.RotateHeroToCenter
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::RotateHeroToCenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "RotateHeroToCenter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.HideDeadPlayer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::HideDeadPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "HideDeadPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.ProcAutoSkillRecovery
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::ProcAutoSkillRecovery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "ProcAutoSkillRecovery");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.Proc Before Command Select
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::Proc_Before_Command_Select()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "Proc Before Command Select");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.Proc Switch to Rush
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::Proc_Switch_to_Rush()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "Proc Switch to Rush");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.DoAttackByRush
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           MainCharacter                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPhaseFighting_C::DoAttackByRush(class ABP_BtlCharacterBase_C* MainCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "DoAttackByRush");

	Params::BP_BtlPhaseFighting_C_DoAttackByRush Parms{};

	Parms.MainCharacter = MainCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.SyncProgressTimingInBP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BtlPhaseFighting_C::SyncProgressTimingInBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "SyncProgressTimingInBP");

	Params::BP_BtlPhaseFighting_C_SyncProgressTimingInBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.RestoreSpecificModelsFromAllout
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::RestoreSpecificModelsFromAllout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "RestoreSpecificModelsFromAllout");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.FinalizeAlloutAnnihilation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlPhaseFighting_C::FinalizeAlloutAnnihilation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "FinalizeAlloutAnnihilation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPhaseFighting.BP_BtlPhaseFighting_C.CheckProgressNextPhaseInBP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_BtlPhaseFighting_C::CheckProgressNextPhaseInBP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPhaseFighting_C", "CheckProgressNextPhaseInBP");

	Params::BP_BtlPhaseFighting_C_CheckProgressNextPhaseInBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

