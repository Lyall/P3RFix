#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SequencerScripting

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SequencerScripting.ESequenceTimeUnit
// NumValues: 0x0003
enum class ESequenceTimeUnit : uint8
{
	DisplayRate                              = 0,
	TickResolution                           = 1,
	ESequenceTimeUnit_MAX                    = 2,
};

// ScriptStruct SequencerScripting.SequencerBindingProxy
// 0x0018 (0x0018 - 0x0000)
struct FSequencerBindingProxy final
{
public:
	struct FGuid                                  BindingID;                                         // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneSequence*                    Sequence;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSequencerBindingProxy) == 0x000008, "Wrong alignment on FSequencerBindingProxy");
static_assert(sizeof(FSequencerBindingProxy) == 0x000018, "Wrong size on FSequencerBindingProxy");
static_assert(offsetof(FSequencerBindingProxy, BindingID) == 0x000000, "Member 'FSequencerBindingProxy::BindingID' has a wrong offset!");
static_assert(offsetof(FSequencerBindingProxy, Sequence) == 0x000010, "Member 'FSequencerBindingProxy::Sequence' has a wrong offset!");

// ScriptStruct SequencerScripting.SequencerScriptingRange
// 0x0014 (0x0014 - 0x0000)
struct FSequencerScriptingRange final
{
public:
	uint8                                         bHasStart : 1;                                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasEnd : 1;                                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InclusiveStart;                                    // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExclusiveEnd;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             InternalRate;                                      // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSequencerScriptingRange) == 0x000004, "Wrong alignment on FSequencerScriptingRange");
static_assert(sizeof(FSequencerScriptingRange) == 0x000014, "Wrong size on FSequencerScriptingRange");
static_assert(offsetof(FSequencerScriptingRange, InclusiveStart) == 0x000004, "Member 'FSequencerScriptingRange::InclusiveStart' has a wrong offset!");
static_assert(offsetof(FSequencerScriptingRange, ExclusiveEnd) == 0x000008, "Member 'FSequencerScriptingRange::ExclusiveEnd' has a wrong offset!");
static_assert(offsetof(FSequencerScriptingRange, InternalRate) == 0x00000C, "Member 'FSequencerScriptingRange::InternalRate' has a wrong offset!");

}

