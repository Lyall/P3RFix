#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Paper2D

#include "Basic.hpp"

#include "Paper2D_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function Paper2D.PaperFlipbook.GetKeyFrameIndexAtTime
// 0x000C (0x000C - 0x0000)
struct PaperFlipbook_GetKeyFrameIndexAtTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampToEnds;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbook_GetKeyFrameIndexAtTime) == 0x000004, "Wrong alignment on PaperFlipbook_GetKeyFrameIndexAtTime");
static_assert(sizeof(PaperFlipbook_GetKeyFrameIndexAtTime) == 0x00000C, "Wrong size on PaperFlipbook_GetKeyFrameIndexAtTime");
static_assert(offsetof(PaperFlipbook_GetKeyFrameIndexAtTime, Time) == 0x000000, "Member 'PaperFlipbook_GetKeyFrameIndexAtTime::Time' has a wrong offset!");
static_assert(offsetof(PaperFlipbook_GetKeyFrameIndexAtTime, bClampToEnds) == 0x000004, "Member 'PaperFlipbook_GetKeyFrameIndexAtTime::bClampToEnds' has a wrong offset!");
static_assert(offsetof(PaperFlipbook_GetKeyFrameIndexAtTime, ReturnValue) == 0x000008, "Member 'PaperFlipbook_GetKeyFrameIndexAtTime::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbook.GetNumFrames
// 0x0004 (0x0004 - 0x0000)
struct PaperFlipbook_GetNumFrames final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbook_GetNumFrames) == 0x000004, "Wrong alignment on PaperFlipbook_GetNumFrames");
static_assert(sizeof(PaperFlipbook_GetNumFrames) == 0x000004, "Wrong size on PaperFlipbook_GetNumFrames");
static_assert(offsetof(PaperFlipbook_GetNumFrames, ReturnValue) == 0x000000, "Member 'PaperFlipbook_GetNumFrames::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbook.GetNumKeyFrames
// 0x0004 (0x0004 - 0x0000)
struct PaperFlipbook_GetNumKeyFrames final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbook_GetNumKeyFrames) == 0x000004, "Wrong alignment on PaperFlipbook_GetNumKeyFrames");
static_assert(sizeof(PaperFlipbook_GetNumKeyFrames) == 0x000004, "Wrong size on PaperFlipbook_GetNumKeyFrames");
static_assert(offsetof(PaperFlipbook_GetNumKeyFrames, ReturnValue) == 0x000000, "Member 'PaperFlipbook_GetNumKeyFrames::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbook.GetSpriteAtFrame
// 0x0010 (0x0010 - 0x0000)
struct PaperFlipbook_GetSpriteAtFrame final
{
public:
	int32                                         FrameIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbook_GetSpriteAtFrame) == 0x000008, "Wrong alignment on PaperFlipbook_GetSpriteAtFrame");
static_assert(sizeof(PaperFlipbook_GetSpriteAtFrame) == 0x000010, "Wrong size on PaperFlipbook_GetSpriteAtFrame");
static_assert(offsetof(PaperFlipbook_GetSpriteAtFrame, FrameIndex) == 0x000000, "Member 'PaperFlipbook_GetSpriteAtFrame::FrameIndex' has a wrong offset!");
static_assert(offsetof(PaperFlipbook_GetSpriteAtFrame, ReturnValue) == 0x000008, "Member 'PaperFlipbook_GetSpriteAtFrame::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbook.GetSpriteAtTime
// 0x0010 (0x0010 - 0x0000)
struct PaperFlipbook_GetSpriteAtTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClampToEnds;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperSprite*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbook_GetSpriteAtTime) == 0x000008, "Wrong alignment on PaperFlipbook_GetSpriteAtTime");
static_assert(sizeof(PaperFlipbook_GetSpriteAtTime) == 0x000010, "Wrong size on PaperFlipbook_GetSpriteAtTime");
static_assert(offsetof(PaperFlipbook_GetSpriteAtTime, Time) == 0x000000, "Member 'PaperFlipbook_GetSpriteAtTime::Time' has a wrong offset!");
static_assert(offsetof(PaperFlipbook_GetSpriteAtTime, bClampToEnds) == 0x000004, "Member 'PaperFlipbook_GetSpriteAtTime::bClampToEnds' has a wrong offset!");
static_assert(offsetof(PaperFlipbook_GetSpriteAtTime, ReturnValue) == 0x000008, "Member 'PaperFlipbook_GetSpriteAtTime::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbook.GetTotalDuration
// 0x0004 (0x0004 - 0x0000)
struct PaperFlipbook_GetTotalDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbook_GetTotalDuration) == 0x000004, "Wrong alignment on PaperFlipbook_GetTotalDuration");
static_assert(sizeof(PaperFlipbook_GetTotalDuration) == 0x000004, "Wrong size on PaperFlipbook_GetTotalDuration");
static_assert(offsetof(PaperFlipbook_GetTotalDuration, ReturnValue) == 0x000000, "Member 'PaperFlipbook_GetTotalDuration::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbook.IsValidKeyFrameIndex
// 0x0008 (0x0008 - 0x0000)
struct PaperFlipbook_IsValidKeyFrameIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperFlipbook_IsValidKeyFrameIndex) == 0x000004, "Wrong alignment on PaperFlipbook_IsValidKeyFrameIndex");
static_assert(sizeof(PaperFlipbook_IsValidKeyFrameIndex) == 0x000008, "Wrong size on PaperFlipbook_IsValidKeyFrameIndex");
static_assert(offsetof(PaperFlipbook_IsValidKeyFrameIndex, Index_0) == 0x000000, "Member 'PaperFlipbook_IsValidKeyFrameIndex::Index_0' has a wrong offset!");
static_assert(offsetof(PaperFlipbook_IsValidKeyFrameIndex, ReturnValue) == 0x000004, "Member 'PaperFlipbook_IsValidKeyFrameIndex::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.GetFlipbook
// 0x0008 (0x0008 - 0x0000)
struct PaperFlipbookComponent_GetFlipbook final
{
public:
	class UPaperFlipbook*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_GetFlipbook) == 0x000008, "Wrong alignment on PaperFlipbookComponent_GetFlipbook");
static_assert(sizeof(PaperFlipbookComponent_GetFlipbook) == 0x000008, "Wrong size on PaperFlipbookComponent_GetFlipbook");
static_assert(offsetof(PaperFlipbookComponent_GetFlipbook, ReturnValue) == 0x000000, "Member 'PaperFlipbookComponent_GetFlipbook::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.OnRep_SourceFlipbook
// 0x0008 (0x0008 - 0x0000)
struct PaperFlipbookComponent_OnRep_SourceFlipbook final
{
public:
	class UPaperFlipbook*                         OldFlipbook;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_OnRep_SourceFlipbook) == 0x000008, "Wrong alignment on PaperFlipbookComponent_OnRep_SourceFlipbook");
static_assert(sizeof(PaperFlipbookComponent_OnRep_SourceFlipbook) == 0x000008, "Wrong size on PaperFlipbookComponent_OnRep_SourceFlipbook");
static_assert(offsetof(PaperFlipbookComponent_OnRep_SourceFlipbook, OldFlipbook) == 0x000000, "Member 'PaperFlipbookComponent_OnRep_SourceFlipbook::OldFlipbook' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.SetFlipbook
// 0x0010 (0x0010 - 0x0000)
struct PaperFlipbookComponent_SetFlipbook final
{
public:
	class UPaperFlipbook*                         NewFlipbook;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperFlipbookComponent_SetFlipbook) == 0x000008, "Wrong alignment on PaperFlipbookComponent_SetFlipbook");
static_assert(sizeof(PaperFlipbookComponent_SetFlipbook) == 0x000010, "Wrong size on PaperFlipbookComponent_SetFlipbook");
static_assert(offsetof(PaperFlipbookComponent_SetFlipbook, NewFlipbook) == 0x000000, "Member 'PaperFlipbookComponent_SetFlipbook::NewFlipbook' has a wrong offset!");
static_assert(offsetof(PaperFlipbookComponent_SetFlipbook, ReturnValue) == 0x000008, "Member 'PaperFlipbookComponent_SetFlipbook::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.SetLooping
// 0x0001 (0x0001 - 0x0000)
struct PaperFlipbookComponent_SetLooping final
{
public:
	bool                                          bNewLooping;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_SetLooping) == 0x000001, "Wrong alignment on PaperFlipbookComponent_SetLooping");
static_assert(sizeof(PaperFlipbookComponent_SetLooping) == 0x000001, "Wrong size on PaperFlipbookComponent_SetLooping");
static_assert(offsetof(PaperFlipbookComponent_SetLooping, bNewLooping) == 0x000000, "Member 'PaperFlipbookComponent_SetLooping::bNewLooping' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.SetNewTime
// 0x0004 (0x0004 - 0x0000)
struct PaperFlipbookComponent_SetNewTime final
{
public:
	float                                         NewTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_SetNewTime) == 0x000004, "Wrong alignment on PaperFlipbookComponent_SetNewTime");
static_assert(sizeof(PaperFlipbookComponent_SetNewTime) == 0x000004, "Wrong size on PaperFlipbookComponent_SetNewTime");
static_assert(offsetof(PaperFlipbookComponent_SetNewTime, NewTime) == 0x000000, "Member 'PaperFlipbookComponent_SetNewTime::NewTime' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.SetPlaybackPosition
// 0x0008 (0x0008 - 0x0000)
struct PaperFlipbookComponent_SetPlaybackPosition final
{
public:
	float                                         NewPosition;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireEvents;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperFlipbookComponent_SetPlaybackPosition) == 0x000004, "Wrong alignment on PaperFlipbookComponent_SetPlaybackPosition");
static_assert(sizeof(PaperFlipbookComponent_SetPlaybackPosition) == 0x000008, "Wrong size on PaperFlipbookComponent_SetPlaybackPosition");
static_assert(offsetof(PaperFlipbookComponent_SetPlaybackPosition, NewPosition) == 0x000000, "Member 'PaperFlipbookComponent_SetPlaybackPosition::NewPosition' has a wrong offset!");
static_assert(offsetof(PaperFlipbookComponent_SetPlaybackPosition, bFireEvents) == 0x000004, "Member 'PaperFlipbookComponent_SetPlaybackPosition::bFireEvents' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.SetPlaybackPositionInFrames
// 0x0008 (0x0008 - 0x0000)
struct PaperFlipbookComponent_SetPlaybackPositionInFrames final
{
public:
	int32                                         NewFramePosition;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFireEvents;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperFlipbookComponent_SetPlaybackPositionInFrames) == 0x000004, "Wrong alignment on PaperFlipbookComponent_SetPlaybackPositionInFrames");
static_assert(sizeof(PaperFlipbookComponent_SetPlaybackPositionInFrames) == 0x000008, "Wrong size on PaperFlipbookComponent_SetPlaybackPositionInFrames");
static_assert(offsetof(PaperFlipbookComponent_SetPlaybackPositionInFrames, NewFramePosition) == 0x000000, "Member 'PaperFlipbookComponent_SetPlaybackPositionInFrames::NewFramePosition' has a wrong offset!");
static_assert(offsetof(PaperFlipbookComponent_SetPlaybackPositionInFrames, bFireEvents) == 0x000004, "Member 'PaperFlipbookComponent_SetPlaybackPositionInFrames::bFireEvents' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.SetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct PaperFlipbookComponent_SetPlayRate final
{
public:
	float                                         NewRate;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_SetPlayRate) == 0x000004, "Wrong alignment on PaperFlipbookComponent_SetPlayRate");
static_assert(sizeof(PaperFlipbookComponent_SetPlayRate) == 0x000004, "Wrong size on PaperFlipbookComponent_SetPlayRate");
static_assert(offsetof(PaperFlipbookComponent_SetPlayRate, NewRate) == 0x000000, "Member 'PaperFlipbookComponent_SetPlayRate::NewRate' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.SetSpriteColor
// 0x0010 (0x0010 - 0x0000)
struct PaperFlipbookComponent_SetSpriteColor final
{
public:
	struct FLinearColor                           NewColor;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_SetSpriteColor) == 0x000004, "Wrong alignment on PaperFlipbookComponent_SetSpriteColor");
static_assert(sizeof(PaperFlipbookComponent_SetSpriteColor) == 0x000010, "Wrong size on PaperFlipbookComponent_SetSpriteColor");
static_assert(offsetof(PaperFlipbookComponent_SetSpriteColor, NewColor) == 0x000000, "Member 'PaperFlipbookComponent_SetSpriteColor::NewColor' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.GetFlipbookFramerate
// 0x0004 (0x0004 - 0x0000)
struct PaperFlipbookComponent_GetFlipbookFramerate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_GetFlipbookFramerate) == 0x000004, "Wrong alignment on PaperFlipbookComponent_GetFlipbookFramerate");
static_assert(sizeof(PaperFlipbookComponent_GetFlipbookFramerate) == 0x000004, "Wrong size on PaperFlipbookComponent_GetFlipbookFramerate");
static_assert(offsetof(PaperFlipbookComponent_GetFlipbookFramerate, ReturnValue) == 0x000000, "Member 'PaperFlipbookComponent_GetFlipbookFramerate::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.GetFlipbookLength
// 0x0004 (0x0004 - 0x0000)
struct PaperFlipbookComponent_GetFlipbookLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_GetFlipbookLength) == 0x000004, "Wrong alignment on PaperFlipbookComponent_GetFlipbookLength");
static_assert(sizeof(PaperFlipbookComponent_GetFlipbookLength) == 0x000004, "Wrong size on PaperFlipbookComponent_GetFlipbookLength");
static_assert(offsetof(PaperFlipbookComponent_GetFlipbookLength, ReturnValue) == 0x000000, "Member 'PaperFlipbookComponent_GetFlipbookLength::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.GetFlipbookLengthInFrames
// 0x0004 (0x0004 - 0x0000)
struct PaperFlipbookComponent_GetFlipbookLengthInFrames final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_GetFlipbookLengthInFrames) == 0x000004, "Wrong alignment on PaperFlipbookComponent_GetFlipbookLengthInFrames");
static_assert(sizeof(PaperFlipbookComponent_GetFlipbookLengthInFrames) == 0x000004, "Wrong size on PaperFlipbookComponent_GetFlipbookLengthInFrames");
static_assert(offsetof(PaperFlipbookComponent_GetFlipbookLengthInFrames, ReturnValue) == 0x000000, "Member 'PaperFlipbookComponent_GetFlipbookLengthInFrames::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.GetPlaybackPosition
// 0x0004 (0x0004 - 0x0000)
struct PaperFlipbookComponent_GetPlaybackPosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_GetPlaybackPosition) == 0x000004, "Wrong alignment on PaperFlipbookComponent_GetPlaybackPosition");
static_assert(sizeof(PaperFlipbookComponent_GetPlaybackPosition) == 0x000004, "Wrong size on PaperFlipbookComponent_GetPlaybackPosition");
static_assert(offsetof(PaperFlipbookComponent_GetPlaybackPosition, ReturnValue) == 0x000000, "Member 'PaperFlipbookComponent_GetPlaybackPosition::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.GetPlaybackPositionInFrames
// 0x0004 (0x0004 - 0x0000)
struct PaperFlipbookComponent_GetPlaybackPositionInFrames final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_GetPlaybackPositionInFrames) == 0x000004, "Wrong alignment on PaperFlipbookComponent_GetPlaybackPositionInFrames");
static_assert(sizeof(PaperFlipbookComponent_GetPlaybackPositionInFrames) == 0x000004, "Wrong size on PaperFlipbookComponent_GetPlaybackPositionInFrames");
static_assert(offsetof(PaperFlipbookComponent_GetPlaybackPositionInFrames, ReturnValue) == 0x000000, "Member 'PaperFlipbookComponent_GetPlaybackPositionInFrames::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.GetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct PaperFlipbookComponent_GetPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_GetPlayRate) == 0x000004, "Wrong alignment on PaperFlipbookComponent_GetPlayRate");
static_assert(sizeof(PaperFlipbookComponent_GetPlayRate) == 0x000004, "Wrong size on PaperFlipbookComponent_GetPlayRate");
static_assert(offsetof(PaperFlipbookComponent_GetPlayRate, ReturnValue) == 0x000000, "Member 'PaperFlipbookComponent_GetPlayRate::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.GetSpriteColor
// 0x0010 (0x0010 - 0x0000)
struct PaperFlipbookComponent_GetSpriteColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_GetSpriteColor) == 0x000004, "Wrong alignment on PaperFlipbookComponent_GetSpriteColor");
static_assert(sizeof(PaperFlipbookComponent_GetSpriteColor) == 0x000010, "Wrong size on PaperFlipbookComponent_GetSpriteColor");
static_assert(offsetof(PaperFlipbookComponent_GetSpriteColor, ReturnValue) == 0x000000, "Member 'PaperFlipbookComponent_GetSpriteColor::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.IsLooping
// 0x0001 (0x0001 - 0x0000)
struct PaperFlipbookComponent_IsLooping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_IsLooping) == 0x000001, "Wrong alignment on PaperFlipbookComponent_IsLooping");
static_assert(sizeof(PaperFlipbookComponent_IsLooping) == 0x000001, "Wrong size on PaperFlipbookComponent_IsLooping");
static_assert(offsetof(PaperFlipbookComponent_IsLooping, ReturnValue) == 0x000000, "Member 'PaperFlipbookComponent_IsLooping::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct PaperFlipbookComponent_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_IsPlaying) == 0x000001, "Wrong alignment on PaperFlipbookComponent_IsPlaying");
static_assert(sizeof(PaperFlipbookComponent_IsPlaying) == 0x000001, "Wrong size on PaperFlipbookComponent_IsPlaying");
static_assert(offsetof(PaperFlipbookComponent_IsPlaying, ReturnValue) == 0x000000, "Member 'PaperFlipbookComponent_IsPlaying::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperFlipbookComponent.IsReversing
// 0x0001 (0x0001 - 0x0000)
struct PaperFlipbookComponent_IsReversing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperFlipbookComponent_IsReversing) == 0x000001, "Wrong alignment on PaperFlipbookComponent_IsReversing");
static_assert(sizeof(PaperFlipbookComponent_IsReversing) == 0x000001, "Wrong size on PaperFlipbookComponent_IsReversing");
static_assert(offsetof(PaperFlipbookComponent_IsReversing, ReturnValue) == 0x000000, "Member 'PaperFlipbookComponent_IsReversing::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperGroupedSpriteComponent.AddInstance
// 0x0050 (0x0050 - 0x0000)
struct PaperGroupedSpriteComponent_AddInstance final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UPaperSprite*                           Sprite;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWorldSpace;                                       // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Color;                                             // 0x003C(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x004C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGroupedSpriteComponent_AddInstance) == 0x000010, "Wrong alignment on PaperGroupedSpriteComponent_AddInstance");
static_assert(sizeof(PaperGroupedSpriteComponent_AddInstance) == 0x000050, "Wrong size on PaperGroupedSpriteComponent_AddInstance");
static_assert(offsetof(PaperGroupedSpriteComponent_AddInstance, Transform) == 0x000000, "Member 'PaperGroupedSpriteComponent_AddInstance::Transform' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_AddInstance, Sprite) == 0x000030, "Member 'PaperGroupedSpriteComponent_AddInstance::Sprite' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_AddInstance, bWorldSpace) == 0x000038, "Member 'PaperGroupedSpriteComponent_AddInstance::bWorldSpace' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_AddInstance, Color) == 0x00003C, "Member 'PaperGroupedSpriteComponent_AddInstance::Color' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_AddInstance, ReturnValue) == 0x00004C, "Member 'PaperGroupedSpriteComponent_AddInstance::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperGroupedSpriteComponent.RemoveInstance
// 0x0008 (0x0008 - 0x0000)
struct PaperGroupedSpriteComponent_RemoveInstance final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperGroupedSpriteComponent_RemoveInstance) == 0x000004, "Wrong alignment on PaperGroupedSpriteComponent_RemoveInstance");
static_assert(sizeof(PaperGroupedSpriteComponent_RemoveInstance) == 0x000008, "Wrong size on PaperGroupedSpriteComponent_RemoveInstance");
static_assert(offsetof(PaperGroupedSpriteComponent_RemoveInstance, InstanceIndex) == 0x000000, "Member 'PaperGroupedSpriteComponent_RemoveInstance::InstanceIndex' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_RemoveInstance, ReturnValue) == 0x000004, "Member 'PaperGroupedSpriteComponent_RemoveInstance::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperGroupedSpriteComponent.SortInstancesAlongAxis
// 0x000C (0x000C - 0x0000)
struct PaperGroupedSpriteComponent_SortInstancesAlongAxis final
{
public:
	struct FVector                                WorldSpaceSortAxis;                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGroupedSpriteComponent_SortInstancesAlongAxis) == 0x000004, "Wrong alignment on PaperGroupedSpriteComponent_SortInstancesAlongAxis");
static_assert(sizeof(PaperGroupedSpriteComponent_SortInstancesAlongAxis) == 0x00000C, "Wrong size on PaperGroupedSpriteComponent_SortInstancesAlongAxis");
static_assert(offsetof(PaperGroupedSpriteComponent_SortInstancesAlongAxis, WorldSpaceSortAxis) == 0x000000, "Member 'PaperGroupedSpriteComponent_SortInstancesAlongAxis::WorldSpaceSortAxis' has a wrong offset!");

// Function Paper2D.PaperGroupedSpriteComponent.UpdateInstanceColor
// 0x0018 (0x0018 - 0x0000)
struct PaperGroupedSpriteComponent_UpdateInstanceColor final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NewInstanceColor;                                  // 0x0004(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMarkRenderStateDirty;                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperGroupedSpriteComponent_UpdateInstanceColor) == 0x000004, "Wrong alignment on PaperGroupedSpriteComponent_UpdateInstanceColor");
static_assert(sizeof(PaperGroupedSpriteComponent_UpdateInstanceColor) == 0x000018, "Wrong size on PaperGroupedSpriteComponent_UpdateInstanceColor");
static_assert(offsetof(PaperGroupedSpriteComponent_UpdateInstanceColor, InstanceIndex) == 0x000000, "Member 'PaperGroupedSpriteComponent_UpdateInstanceColor::InstanceIndex' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_UpdateInstanceColor, NewInstanceColor) == 0x000004, "Member 'PaperGroupedSpriteComponent_UpdateInstanceColor::NewInstanceColor' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_UpdateInstanceColor, bMarkRenderStateDirty) == 0x000014, "Member 'PaperGroupedSpriteComponent_UpdateInstanceColor::bMarkRenderStateDirty' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_UpdateInstanceColor, ReturnValue) == 0x000015, "Member 'PaperGroupedSpriteComponent_UpdateInstanceColor::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperGroupedSpriteComponent.UpdateInstanceTransform
// 0x0050 (0x0050 - 0x0000)
struct PaperGroupedSpriteComponent_UpdateInstanceTransform final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             NewInstanceTransform;                              // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWorldSpace;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMarkRenderStateDirty;                             // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTeleport;                                         // 0x0042(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0043(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperGroupedSpriteComponent_UpdateInstanceTransform) == 0x000010, "Wrong alignment on PaperGroupedSpriteComponent_UpdateInstanceTransform");
static_assert(sizeof(PaperGroupedSpriteComponent_UpdateInstanceTransform) == 0x000050, "Wrong size on PaperGroupedSpriteComponent_UpdateInstanceTransform");
static_assert(offsetof(PaperGroupedSpriteComponent_UpdateInstanceTransform, InstanceIndex) == 0x000000, "Member 'PaperGroupedSpriteComponent_UpdateInstanceTransform::InstanceIndex' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_UpdateInstanceTransform, NewInstanceTransform) == 0x000010, "Member 'PaperGroupedSpriteComponent_UpdateInstanceTransform::NewInstanceTransform' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_UpdateInstanceTransform, bWorldSpace) == 0x000040, "Member 'PaperGroupedSpriteComponent_UpdateInstanceTransform::bWorldSpace' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_UpdateInstanceTransform, bMarkRenderStateDirty) == 0x000041, "Member 'PaperGroupedSpriteComponent_UpdateInstanceTransform::bMarkRenderStateDirty' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_UpdateInstanceTransform, bTeleport) == 0x000042, "Member 'PaperGroupedSpriteComponent_UpdateInstanceTransform::bTeleport' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_UpdateInstanceTransform, ReturnValue) == 0x000043, "Member 'PaperGroupedSpriteComponent_UpdateInstanceTransform::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperGroupedSpriteComponent.GetInstanceCount
// 0x0004 (0x0004 - 0x0000)
struct PaperGroupedSpriteComponent_GetInstanceCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperGroupedSpriteComponent_GetInstanceCount) == 0x000004, "Wrong alignment on PaperGroupedSpriteComponent_GetInstanceCount");
static_assert(sizeof(PaperGroupedSpriteComponent_GetInstanceCount) == 0x000004, "Wrong size on PaperGroupedSpriteComponent_GetInstanceCount");
static_assert(offsetof(PaperGroupedSpriteComponent_GetInstanceCount, ReturnValue) == 0x000000, "Member 'PaperGroupedSpriteComponent_GetInstanceCount::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperGroupedSpriteComponent.GetInstanceTransform
// 0x0050 (0x0050 - 0x0000)
struct PaperGroupedSpriteComponent_GetInstanceTransform final
{
public:
	int32                                         InstanceIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutInstanceTransform;                              // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bWorldSpace;                                       // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0041(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0xE];                                       // 0x0042(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperGroupedSpriteComponent_GetInstanceTransform) == 0x000010, "Wrong alignment on PaperGroupedSpriteComponent_GetInstanceTransform");
static_assert(sizeof(PaperGroupedSpriteComponent_GetInstanceTransform) == 0x000050, "Wrong size on PaperGroupedSpriteComponent_GetInstanceTransform");
static_assert(offsetof(PaperGroupedSpriteComponent_GetInstanceTransform, InstanceIndex) == 0x000000, "Member 'PaperGroupedSpriteComponent_GetInstanceTransform::InstanceIndex' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_GetInstanceTransform, OutInstanceTransform) == 0x000010, "Member 'PaperGroupedSpriteComponent_GetInstanceTransform::OutInstanceTransform' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_GetInstanceTransform, bWorldSpace) == 0x000040, "Member 'PaperGroupedSpriteComponent_GetInstanceTransform::bWorldSpace' has a wrong offset!");
static_assert(offsetof(PaperGroupedSpriteComponent_GetInstanceTransform, ReturnValue) == 0x000041, "Member 'PaperGroupedSpriteComponent_GetInstanceTransform::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperSpriteBlueprintLibrary.MakeBrushFromSprite
// 0x0098 (0x0098 - 0x0000)
struct PaperSpriteBlueprintLibrary_MakeBrushFromSprite final
{
public:
	class UPaperSprite*                           Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0010(0x0088)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperSpriteBlueprintLibrary_MakeBrushFromSprite) == 0x000008, "Wrong alignment on PaperSpriteBlueprintLibrary_MakeBrushFromSprite");
static_assert(sizeof(PaperSpriteBlueprintLibrary_MakeBrushFromSprite) == 0x000098, "Wrong size on PaperSpriteBlueprintLibrary_MakeBrushFromSprite");
static_assert(offsetof(PaperSpriteBlueprintLibrary_MakeBrushFromSprite, Sprite) == 0x000000, "Member 'PaperSpriteBlueprintLibrary_MakeBrushFromSprite::Sprite' has a wrong offset!");
static_assert(offsetof(PaperSpriteBlueprintLibrary_MakeBrushFromSprite, Width) == 0x000008, "Member 'PaperSpriteBlueprintLibrary_MakeBrushFromSprite::Width' has a wrong offset!");
static_assert(offsetof(PaperSpriteBlueprintLibrary_MakeBrushFromSprite, Height) == 0x00000C, "Member 'PaperSpriteBlueprintLibrary_MakeBrushFromSprite::Height' has a wrong offset!");
static_assert(offsetof(PaperSpriteBlueprintLibrary_MakeBrushFromSprite, ReturnValue) == 0x000010, "Member 'PaperSpriteBlueprintLibrary_MakeBrushFromSprite::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperSpriteComponent.GetSprite
// 0x0008 (0x0008 - 0x0000)
struct PaperSpriteComponent_GetSprite final
{
public:
	class UPaperSprite*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperSpriteComponent_GetSprite) == 0x000008, "Wrong alignment on PaperSpriteComponent_GetSprite");
static_assert(sizeof(PaperSpriteComponent_GetSprite) == 0x000008, "Wrong size on PaperSpriteComponent_GetSprite");
static_assert(offsetof(PaperSpriteComponent_GetSprite, ReturnValue) == 0x000000, "Member 'PaperSpriteComponent_GetSprite::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperSpriteComponent.SetSprite
// 0x0010 (0x0010 - 0x0000)
struct PaperSpriteComponent_SetSprite final
{
public:
	class UPaperSprite*                           NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperSpriteComponent_SetSprite) == 0x000008, "Wrong alignment on PaperSpriteComponent_SetSprite");
static_assert(sizeof(PaperSpriteComponent_SetSprite) == 0x000010, "Wrong size on PaperSpriteComponent_SetSprite");
static_assert(offsetof(PaperSpriteComponent_SetSprite, NewSprite) == 0x000000, "Member 'PaperSpriteComponent_SetSprite::NewSprite' has a wrong offset!");
static_assert(offsetof(PaperSpriteComponent_SetSprite, ReturnValue) == 0x000008, "Member 'PaperSpriteComponent_SetSprite::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperSpriteComponent.SetSpriteColor
// 0x0010 (0x0010 - 0x0000)
struct PaperSpriteComponent_SetSpriteColor final
{
public:
	struct FLinearColor                           NewColor;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperSpriteComponent_SetSpriteColor) == 0x000004, "Wrong alignment on PaperSpriteComponent_SetSpriteColor");
static_assert(sizeof(PaperSpriteComponent_SetSpriteColor) == 0x000010, "Wrong size on PaperSpriteComponent_SetSpriteColor");
static_assert(offsetof(PaperSpriteComponent_SetSpriteColor, NewColor) == 0x000000, "Member 'PaperSpriteComponent_SetSpriteColor::NewColor' has a wrong offset!");

// Function Paper2D.PaperTerrainComponent.SetTerrainColor
// 0x0010 (0x0010 - 0x0000)
struct PaperTerrainComponent_SetTerrainColor final
{
public:
	struct FLinearColor                           NewColor;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTerrainComponent_SetTerrainColor) == 0x000004, "Wrong alignment on PaperTerrainComponent_SetTerrainColor");
static_assert(sizeof(PaperTerrainComponent_SetTerrainColor) == 0x000010, "Wrong size on PaperTerrainComponent_SetTerrainColor");
static_assert(offsetof(PaperTerrainComponent_SetTerrainColor, NewColor) == 0x000000, "Member 'PaperTerrainComponent_SetTerrainColor::NewColor' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.AddNewLayer
// 0x0008 (0x0008 - 0x0000)
struct PaperTileMapComponent_AddNewLayer final
{
public:
	class UPaperTileLayer*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTileMapComponent_AddNewLayer) == 0x000008, "Wrong alignment on PaperTileMapComponent_AddNewLayer");
static_assert(sizeof(PaperTileMapComponent_AddNewLayer) == 0x000008, "Wrong size on PaperTileMapComponent_AddNewLayer");
static_assert(offsetof(PaperTileMapComponent_AddNewLayer, ReturnValue) == 0x000000, "Member 'PaperTileMapComponent_AddNewLayer::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.CreateNewTileMap
// 0x0018 (0x0018 - 0x0000)
struct PaperTileMapComponent_CreateNewTileMap final
{
public:
	int32                                         MapWidth_0;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapHeight_0;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileWidth_0;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileHeight_0;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PixelsPerUnrealUnit;                               // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateLayer;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperTileMapComponent_CreateNewTileMap) == 0x000004, "Wrong alignment on PaperTileMapComponent_CreateNewTileMap");
static_assert(sizeof(PaperTileMapComponent_CreateNewTileMap) == 0x000018, "Wrong size on PaperTileMapComponent_CreateNewTileMap");
static_assert(offsetof(PaperTileMapComponent_CreateNewTileMap, MapWidth_0) == 0x000000, "Member 'PaperTileMapComponent_CreateNewTileMap::MapWidth_0' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_CreateNewTileMap, MapHeight_0) == 0x000004, "Member 'PaperTileMapComponent_CreateNewTileMap::MapHeight_0' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_CreateNewTileMap, TileWidth_0) == 0x000008, "Member 'PaperTileMapComponent_CreateNewTileMap::TileWidth_0' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_CreateNewTileMap, TileHeight_0) == 0x00000C, "Member 'PaperTileMapComponent_CreateNewTileMap::TileHeight_0' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_CreateNewTileMap, PixelsPerUnrealUnit) == 0x000010, "Member 'PaperTileMapComponent_CreateNewTileMap::PixelsPerUnrealUnit' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_CreateNewTileMap, bCreateLayer) == 0x000014, "Member 'PaperTileMapComponent_CreateNewTileMap::bCreateLayer' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.GetMapSize
// 0x000C (0x000C - 0x0000)
struct PaperTileMapComponent_GetMapSize final
{
public:
	int32                                         MapWidth_0;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapHeight_0;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumLayers;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTileMapComponent_GetMapSize) == 0x000004, "Wrong alignment on PaperTileMapComponent_GetMapSize");
static_assert(sizeof(PaperTileMapComponent_GetMapSize) == 0x00000C, "Wrong size on PaperTileMapComponent_GetMapSize");
static_assert(offsetof(PaperTileMapComponent_GetMapSize, MapWidth_0) == 0x000000, "Member 'PaperTileMapComponent_GetMapSize::MapWidth_0' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetMapSize, MapHeight_0) == 0x000004, "Member 'PaperTileMapComponent_GetMapSize::MapHeight_0' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetMapSize, NumLayers) == 0x000008, "Member 'PaperTileMapComponent_GetMapSize::NumLayers' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.ResizeMap
// 0x0008 (0x0008 - 0x0000)
struct PaperTileMapComponent_ResizeMap final
{
public:
	int32                                         NewWidthInTiles;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewHeightInTiles;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTileMapComponent_ResizeMap) == 0x000004, "Wrong alignment on PaperTileMapComponent_ResizeMap");
static_assert(sizeof(PaperTileMapComponent_ResizeMap) == 0x000008, "Wrong size on PaperTileMapComponent_ResizeMap");
static_assert(offsetof(PaperTileMapComponent_ResizeMap, NewWidthInTiles) == 0x000000, "Member 'PaperTileMapComponent_ResizeMap::NewWidthInTiles' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_ResizeMap, NewHeightInTiles) == 0x000004, "Member 'PaperTileMapComponent_ResizeMap::NewHeightInTiles' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.SetDefaultCollisionThickness
// 0x0008 (0x0008 - 0x0000)
struct PaperTileMapComponent_SetDefaultCollisionThickness final
{
public:
	float                                         Thickness;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebuildCollision;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperTileMapComponent_SetDefaultCollisionThickness) == 0x000004, "Wrong alignment on PaperTileMapComponent_SetDefaultCollisionThickness");
static_assert(sizeof(PaperTileMapComponent_SetDefaultCollisionThickness) == 0x000008, "Wrong size on PaperTileMapComponent_SetDefaultCollisionThickness");
static_assert(offsetof(PaperTileMapComponent_SetDefaultCollisionThickness, Thickness) == 0x000000, "Member 'PaperTileMapComponent_SetDefaultCollisionThickness::Thickness' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_SetDefaultCollisionThickness, bRebuildCollision) == 0x000004, "Member 'PaperTileMapComponent_SetDefaultCollisionThickness::bRebuildCollision' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.SetLayerCollision
// 0x0018 (0x0018 - 0x0000)
struct PaperTileMapComponent_SetLayerCollision final
{
public:
	int32                                         Layer;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasCollision;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideThickness;                                // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomThickness;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideOffset;                                   // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomOffset;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebuildCollision;                                 // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperTileMapComponent_SetLayerCollision) == 0x000004, "Wrong alignment on PaperTileMapComponent_SetLayerCollision");
static_assert(sizeof(PaperTileMapComponent_SetLayerCollision) == 0x000018, "Wrong size on PaperTileMapComponent_SetLayerCollision");
static_assert(offsetof(PaperTileMapComponent_SetLayerCollision, Layer) == 0x000000, "Member 'PaperTileMapComponent_SetLayerCollision::Layer' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_SetLayerCollision, bHasCollision) == 0x000004, "Member 'PaperTileMapComponent_SetLayerCollision::bHasCollision' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_SetLayerCollision, bOverrideThickness) == 0x000005, "Member 'PaperTileMapComponent_SetLayerCollision::bOverrideThickness' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_SetLayerCollision, CustomThickness) == 0x000008, "Member 'PaperTileMapComponent_SetLayerCollision::CustomThickness' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_SetLayerCollision, bOverrideOffset) == 0x00000C, "Member 'PaperTileMapComponent_SetLayerCollision::bOverrideOffset' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_SetLayerCollision, CustomOffset) == 0x000010, "Member 'PaperTileMapComponent_SetLayerCollision::CustomOffset' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_SetLayerCollision, bRebuildCollision) == 0x000014, "Member 'PaperTileMapComponent_SetLayerCollision::bRebuildCollision' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.SetLayerColor
// 0x0014 (0x0014 - 0x0000)
struct PaperTileMapComponent_SetLayerColor final
{
public:
	struct FLinearColor                           NewColor;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTileMapComponent_SetLayerColor) == 0x000004, "Wrong alignment on PaperTileMapComponent_SetLayerColor");
static_assert(sizeof(PaperTileMapComponent_SetLayerColor) == 0x000014, "Wrong size on PaperTileMapComponent_SetLayerColor");
static_assert(offsetof(PaperTileMapComponent_SetLayerColor, NewColor) == 0x000000, "Member 'PaperTileMapComponent_SetLayerColor::NewColor' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_SetLayerColor, Layer) == 0x000010, "Member 'PaperTileMapComponent_SetLayerColor::Layer' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.SetTile
// 0x0020 (0x0020 - 0x0000)
struct PaperTileMapComponent_SetTile final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperTileInfo                         NewValue;                                          // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTileMapComponent_SetTile) == 0x000008, "Wrong alignment on PaperTileMapComponent_SetTile");
static_assert(sizeof(PaperTileMapComponent_SetTile) == 0x000020, "Wrong size on PaperTileMapComponent_SetTile");
static_assert(offsetof(PaperTileMapComponent_SetTile, X) == 0x000000, "Member 'PaperTileMapComponent_SetTile::X' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_SetTile, Y) == 0x000004, "Member 'PaperTileMapComponent_SetTile::Y' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_SetTile, Layer) == 0x000008, "Member 'PaperTileMapComponent_SetTile::Layer' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_SetTile, NewValue) == 0x000010, "Member 'PaperTileMapComponent_SetTile::NewValue' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.SetTileMap
// 0x0010 (0x0010 - 0x0000)
struct PaperTileMapComponent_SetTileMap final
{
public:
	class UPaperTileMap*                          NewTileMap;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperTileMapComponent_SetTileMap) == 0x000008, "Wrong alignment on PaperTileMapComponent_SetTileMap");
static_assert(sizeof(PaperTileMapComponent_SetTileMap) == 0x000010, "Wrong size on PaperTileMapComponent_SetTileMap");
static_assert(offsetof(PaperTileMapComponent_SetTileMap, NewTileMap) == 0x000000, "Member 'PaperTileMapComponent_SetTileMap::NewTileMap' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_SetTileMap, ReturnValue) == 0x000008, "Member 'PaperTileMapComponent_SetTileMap::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.SetTileMapColor
// 0x0010 (0x0010 - 0x0000)
struct PaperTileMapComponent_SetTileMapColor final
{
public:
	struct FLinearColor                           NewColor;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTileMapComponent_SetTileMapColor) == 0x000004, "Wrong alignment on PaperTileMapComponent_SetTileMapColor");
static_assert(sizeof(PaperTileMapComponent_SetTileMapColor) == 0x000010, "Wrong size on PaperTileMapComponent_SetTileMapColor");
static_assert(offsetof(PaperTileMapComponent_SetTileMapColor, NewColor) == 0x000000, "Member 'PaperTileMapComponent_SetTileMapColor::NewColor' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.GetLayerColor
// 0x0014 (0x0014 - 0x0000)
struct PaperTileMapComponent_GetLayerColor final
{
public:
	int32                                         Layer;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ReturnValue;                                       // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTileMapComponent_GetLayerColor) == 0x000004, "Wrong alignment on PaperTileMapComponent_GetLayerColor");
static_assert(sizeof(PaperTileMapComponent_GetLayerColor) == 0x000014, "Wrong size on PaperTileMapComponent_GetLayerColor");
static_assert(offsetof(PaperTileMapComponent_GetLayerColor, Layer) == 0x000000, "Member 'PaperTileMapComponent_GetLayerColor::Layer' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetLayerColor, ReturnValue) == 0x000004, "Member 'PaperTileMapComponent_GetLayerColor::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.GetTile
// 0x0020 (0x0020 - 0x0000)
struct PaperTileMapComponent_GetTile final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Layer;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperTileInfo                         ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTileMapComponent_GetTile) == 0x000008, "Wrong alignment on PaperTileMapComponent_GetTile");
static_assert(sizeof(PaperTileMapComponent_GetTile) == 0x000020, "Wrong size on PaperTileMapComponent_GetTile");
static_assert(offsetof(PaperTileMapComponent_GetTile, X) == 0x000000, "Member 'PaperTileMapComponent_GetTile::X' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTile, Y) == 0x000004, "Member 'PaperTileMapComponent_GetTile::Y' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTile, Layer) == 0x000008, "Member 'PaperTileMapComponent_GetTile::Layer' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTile, ReturnValue) == 0x000010, "Member 'PaperTileMapComponent_GetTile::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.GetTileCenterPosition
// 0x001C (0x001C - 0x0000)
struct PaperTileMapComponent_GetTileCenterPosition final
{
public:
	int32                                         TileX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileY;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWorldSpace;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTileMapComponent_GetTileCenterPosition) == 0x000004, "Wrong alignment on PaperTileMapComponent_GetTileCenterPosition");
static_assert(sizeof(PaperTileMapComponent_GetTileCenterPosition) == 0x00001C, "Wrong size on PaperTileMapComponent_GetTileCenterPosition");
static_assert(offsetof(PaperTileMapComponent_GetTileCenterPosition, TileX) == 0x000000, "Member 'PaperTileMapComponent_GetTileCenterPosition::TileX' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTileCenterPosition, TileY) == 0x000004, "Member 'PaperTileMapComponent_GetTileCenterPosition::TileY' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTileCenterPosition, LayerIndex) == 0x000008, "Member 'PaperTileMapComponent_GetTileCenterPosition::LayerIndex' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTileCenterPosition, bWorldSpace) == 0x00000C, "Member 'PaperTileMapComponent_GetTileCenterPosition::bWorldSpace' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTileCenterPosition, ReturnValue) == 0x000010, "Member 'PaperTileMapComponent_GetTileCenterPosition::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.GetTileCornerPosition
// 0x001C (0x001C - 0x0000)
struct PaperTileMapComponent_GetTileCornerPosition final
{
public:
	int32                                         TileX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileY;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LayerIndex;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWorldSpace;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTileMapComponent_GetTileCornerPosition) == 0x000004, "Wrong alignment on PaperTileMapComponent_GetTileCornerPosition");
static_assert(sizeof(PaperTileMapComponent_GetTileCornerPosition) == 0x00001C, "Wrong size on PaperTileMapComponent_GetTileCornerPosition");
static_assert(offsetof(PaperTileMapComponent_GetTileCornerPosition, TileX) == 0x000000, "Member 'PaperTileMapComponent_GetTileCornerPosition::TileX' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTileCornerPosition, TileY) == 0x000004, "Member 'PaperTileMapComponent_GetTileCornerPosition::TileY' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTileCornerPosition, LayerIndex) == 0x000008, "Member 'PaperTileMapComponent_GetTileCornerPosition::LayerIndex' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTileCornerPosition, bWorldSpace) == 0x00000C, "Member 'PaperTileMapComponent_GetTileCornerPosition::bWorldSpace' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTileCornerPosition, ReturnValue) == 0x000010, "Member 'PaperTileMapComponent_GetTileCornerPosition::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.GetTileMapColor
// 0x0010 (0x0010 - 0x0000)
struct PaperTileMapComponent_GetTileMapColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTileMapComponent_GetTileMapColor) == 0x000004, "Wrong alignment on PaperTileMapComponent_GetTileMapColor");
static_assert(sizeof(PaperTileMapComponent_GetTileMapColor) == 0x000010, "Wrong size on PaperTileMapComponent_GetTileMapColor");
static_assert(offsetof(PaperTileMapComponent_GetTileMapColor, ReturnValue) == 0x000000, "Member 'PaperTileMapComponent_GetTileMapColor::ReturnValue' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.GetTilePolygon
// 0x0020 (0x0020 - 0x0000)
struct PaperTileMapComponent_GetTilePolygon final
{
public:
	int32                                         TileX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileY;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Points;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         LayerIndex;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWorldSpace;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PaperTileMapComponent_GetTilePolygon) == 0x000008, "Wrong alignment on PaperTileMapComponent_GetTilePolygon");
static_assert(sizeof(PaperTileMapComponent_GetTilePolygon) == 0x000020, "Wrong size on PaperTileMapComponent_GetTilePolygon");
static_assert(offsetof(PaperTileMapComponent_GetTilePolygon, TileX) == 0x000000, "Member 'PaperTileMapComponent_GetTilePolygon::TileX' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTilePolygon, TileY) == 0x000004, "Member 'PaperTileMapComponent_GetTilePolygon::TileY' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTilePolygon, Points) == 0x000008, "Member 'PaperTileMapComponent_GetTilePolygon::Points' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTilePolygon, LayerIndex) == 0x000018, "Member 'PaperTileMapComponent_GetTilePolygon::LayerIndex' has a wrong offset!");
static_assert(offsetof(PaperTileMapComponent_GetTilePolygon, bWorldSpace) == 0x00001C, "Member 'PaperTileMapComponent_GetTilePolygon::bWorldSpace' has a wrong offset!");

// Function Paper2D.PaperTileMapComponent.OwnsTileMap
// 0x0001 (0x0001 - 0x0000)
struct PaperTileMapComponent_OwnsTileMap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PaperTileMapComponent_OwnsTileMap) == 0x000001, "Wrong alignment on PaperTileMapComponent_OwnsTileMap");
static_assert(sizeof(PaperTileMapComponent_OwnsTileMap) == 0x000001, "Wrong size on PaperTileMapComponent_OwnsTileMap");
static_assert(offsetof(PaperTileMapComponent_OwnsTileMap, ReturnValue) == 0x000000, "Member 'PaperTileMapComponent_OwnsTileMap::ReturnValue' has a wrong offset!");

// Function Paper2D.TileMapBlueprintLibrary.BreakTile
// 0x0028 (0x0028 - 0x0000)
struct TileMapBlueprintLibrary_BreakTile final
{
public:
	struct FPaperTileInfo                         Tile;                                              // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         TileIndex;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperTileSet*                          TileSet;                                           // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipH;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipV;                                            // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipD;                                            // 0x0022(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TileMapBlueprintLibrary_BreakTile) == 0x000008, "Wrong alignment on TileMapBlueprintLibrary_BreakTile");
static_assert(sizeof(TileMapBlueprintLibrary_BreakTile) == 0x000028, "Wrong size on TileMapBlueprintLibrary_BreakTile");
static_assert(offsetof(TileMapBlueprintLibrary_BreakTile, Tile) == 0x000000, "Member 'TileMapBlueprintLibrary_BreakTile::Tile' has a wrong offset!");
static_assert(offsetof(TileMapBlueprintLibrary_BreakTile, TileIndex) == 0x000010, "Member 'TileMapBlueprintLibrary_BreakTile::TileIndex' has a wrong offset!");
static_assert(offsetof(TileMapBlueprintLibrary_BreakTile, TileSet) == 0x000018, "Member 'TileMapBlueprintLibrary_BreakTile::TileSet' has a wrong offset!");
static_assert(offsetof(TileMapBlueprintLibrary_BreakTile, bFlipH) == 0x000020, "Member 'TileMapBlueprintLibrary_BreakTile::bFlipH' has a wrong offset!");
static_assert(offsetof(TileMapBlueprintLibrary_BreakTile, bFlipV) == 0x000021, "Member 'TileMapBlueprintLibrary_BreakTile::bFlipV' has a wrong offset!");
static_assert(offsetof(TileMapBlueprintLibrary_BreakTile, bFlipD) == 0x000022, "Member 'TileMapBlueprintLibrary_BreakTile::bFlipD' has a wrong offset!");

// Function Paper2D.TileMapBlueprintLibrary.GetTileTransform
// 0x0040 (0x0040 - 0x0000)
struct TileMapBlueprintLibrary_GetTileTransform final
{
public:
	struct FPaperTileInfo                         Tile;                                              // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TileMapBlueprintLibrary_GetTileTransform) == 0x000010, "Wrong alignment on TileMapBlueprintLibrary_GetTileTransform");
static_assert(sizeof(TileMapBlueprintLibrary_GetTileTransform) == 0x000040, "Wrong size on TileMapBlueprintLibrary_GetTileTransform");
static_assert(offsetof(TileMapBlueprintLibrary_GetTileTransform, Tile) == 0x000000, "Member 'TileMapBlueprintLibrary_GetTileTransform::Tile' has a wrong offset!");
static_assert(offsetof(TileMapBlueprintLibrary_GetTileTransform, ReturnValue) == 0x000010, "Member 'TileMapBlueprintLibrary_GetTileTransform::ReturnValue' has a wrong offset!");

// Function Paper2D.TileMapBlueprintLibrary.GetTileUserData
// 0x0018 (0x0018 - 0x0000)
struct TileMapBlueprintLibrary_GetTileUserData final
{
public:
	struct FPaperTileInfo                         Tile;                                              // 0x0000(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TileMapBlueprintLibrary_GetTileUserData) == 0x000008, "Wrong alignment on TileMapBlueprintLibrary_GetTileUserData");
static_assert(sizeof(TileMapBlueprintLibrary_GetTileUserData) == 0x000018, "Wrong size on TileMapBlueprintLibrary_GetTileUserData");
static_assert(offsetof(TileMapBlueprintLibrary_GetTileUserData, Tile) == 0x000000, "Member 'TileMapBlueprintLibrary_GetTileUserData::Tile' has a wrong offset!");
static_assert(offsetof(TileMapBlueprintLibrary_GetTileUserData, ReturnValue) == 0x000010, "Member 'TileMapBlueprintLibrary_GetTileUserData::ReturnValue' has a wrong offset!");

// Function Paper2D.TileMapBlueprintLibrary.MakeTile
// 0x0028 (0x0028 - 0x0000)
struct TileMapBlueprintLibrary_MakeTile final
{
public:
	int32                                         TileIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperTileSet*                          TileSet;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipH;                                            // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipV;                                            // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipD;                                            // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPaperTileInfo                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TileMapBlueprintLibrary_MakeTile) == 0x000008, "Wrong alignment on TileMapBlueprintLibrary_MakeTile");
static_assert(sizeof(TileMapBlueprintLibrary_MakeTile) == 0x000028, "Wrong size on TileMapBlueprintLibrary_MakeTile");
static_assert(offsetof(TileMapBlueprintLibrary_MakeTile, TileIndex) == 0x000000, "Member 'TileMapBlueprintLibrary_MakeTile::TileIndex' has a wrong offset!");
static_assert(offsetof(TileMapBlueprintLibrary_MakeTile, TileSet) == 0x000008, "Member 'TileMapBlueprintLibrary_MakeTile::TileSet' has a wrong offset!");
static_assert(offsetof(TileMapBlueprintLibrary_MakeTile, bFlipH) == 0x000010, "Member 'TileMapBlueprintLibrary_MakeTile::bFlipH' has a wrong offset!");
static_assert(offsetof(TileMapBlueprintLibrary_MakeTile, bFlipV) == 0x000011, "Member 'TileMapBlueprintLibrary_MakeTile::bFlipV' has a wrong offset!");
static_assert(offsetof(TileMapBlueprintLibrary_MakeTile, bFlipD) == 0x000012, "Member 'TileMapBlueprintLibrary_MakeTile::bFlipD' has a wrong offset!");
static_assert(offsetof(TileMapBlueprintLibrary_MakeTile, ReturnValue) == 0x000018, "Member 'TileMapBlueprintLibrary_MakeTile::ReturnValue' has a wrong offset!");

}

