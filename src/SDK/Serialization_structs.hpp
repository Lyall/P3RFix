#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Serialization

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct Serialization.StructSerializerNumericTestStruct
// 0x0030 (0x0030 - 0x0000)
struct FStructSerializerNumericTestStruct final
{
public:
	int8                                          Int8;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         Int16;                                             // 0x0002(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Int32;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Int64;                                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UInt8;                                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x1];                                       // 0x0011(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        UInt16;                                            // 0x0012(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        UInt32;                                            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        UInt64;                                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Float;                                             // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Double;                                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerNumericTestStruct) == 0x000008, "Wrong alignment on FStructSerializerNumericTestStruct");
static_assert(sizeof(FStructSerializerNumericTestStruct) == 0x000030, "Wrong size on FStructSerializerNumericTestStruct");
static_assert(offsetof(FStructSerializerNumericTestStruct, Int8) == 0x000000, "Member 'FStructSerializerNumericTestStruct::Int8' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Int16) == 0x000002, "Member 'FStructSerializerNumericTestStruct::Int16' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Int32) == 0x000004, "Member 'FStructSerializerNumericTestStruct::Int32' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Int64) == 0x000008, "Member 'FStructSerializerNumericTestStruct::Int64' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, UInt8) == 0x000010, "Member 'FStructSerializerNumericTestStruct::UInt8' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, UInt16) == 0x000012, "Member 'FStructSerializerNumericTestStruct::UInt16' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, UInt32) == 0x000014, "Member 'FStructSerializerNumericTestStruct::UInt32' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, UInt64) == 0x000018, "Member 'FStructSerializerNumericTestStruct::UInt64' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Float) == 0x000020, "Member 'FStructSerializerNumericTestStruct::Float' has a wrong offset!");
static_assert(offsetof(FStructSerializerNumericTestStruct, Double) == 0x000028, "Member 'FStructSerializerNumericTestStruct::Double' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerBooleanTestStruct
// 0x0003 (0x0003 - 0x0000)
struct FStructSerializerBooleanTestStruct final
{
public:
	bool                                          BoolFalse;                                         // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BoolTrue;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Bitfield0 : 1;                                     // 0x0002(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield1 : 1;                                     // 0x0002(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield2Set : 1;                                  // 0x0002(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield3 : 1;                                     // 0x0002(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield4Set : 1;                                  // 0x0002(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield5Set : 1;                                  // 0x0002(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield6 : 1;                                     // 0x0002(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Bitfield7Set : 1;                                  // 0x0002(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FStructSerializerBooleanTestStruct) == 0x000001, "Wrong alignment on FStructSerializerBooleanTestStruct");
static_assert(sizeof(FStructSerializerBooleanTestStruct) == 0x000003, "Wrong size on FStructSerializerBooleanTestStruct");
static_assert(offsetof(FStructSerializerBooleanTestStruct, BoolFalse) == 0x000000, "Member 'FStructSerializerBooleanTestStruct::BoolFalse' has a wrong offset!");
static_assert(offsetof(FStructSerializerBooleanTestStruct, BoolTrue) == 0x000001, "Member 'FStructSerializerBooleanTestStruct::BoolTrue' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerObjectTestStruct
// 0x00A0 (0x00A0 - 0x0000)
struct FStructSerializerObjectTestStruct final
{
public:
	class UClass*                                 Class;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMetaData>                  SubClass;                                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   SoftClass;                                         // 0x0010(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMetaData>               WeakObject;                                        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMetaData>               SoftObject;                                        // 0x0048(0x0028)(UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         ClassPath;                                         // 0x0070(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ObjectPath;                                        // 0x0088(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerObjectTestStruct) == 0x000008, "Wrong alignment on FStructSerializerObjectTestStruct");
static_assert(sizeof(FStructSerializerObjectTestStruct) == 0x0000A0, "Wrong size on FStructSerializerObjectTestStruct");
static_assert(offsetof(FStructSerializerObjectTestStruct, Class) == 0x000000, "Member 'FStructSerializerObjectTestStruct::Class' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, SubClass) == 0x000008, "Member 'FStructSerializerObjectTestStruct::SubClass' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, SoftClass) == 0x000010, "Member 'FStructSerializerObjectTestStruct::SoftClass' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, Object) == 0x000038, "Member 'FStructSerializerObjectTestStruct::Object' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, WeakObject) == 0x000040, "Member 'FStructSerializerObjectTestStruct::WeakObject' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, SoftObject) == 0x000048, "Member 'FStructSerializerObjectTestStruct::SoftObject' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, ClassPath) == 0x000070, "Member 'FStructSerializerObjectTestStruct::ClassPath' has a wrong offset!");
static_assert(offsetof(FStructSerializerObjectTestStruct, ObjectPath) == 0x000088, "Member 'FStructSerializerObjectTestStruct::ObjectPath' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerBuiltinTestStruct
// 0x0090 (0x0090 - 0x0000)
struct FStructSerializerBuiltinTestStruct final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0028(0x0018)(NativeAccessSpecifierPublic)
	struct FVector                                Vector;                                            // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Vector4;                                           // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotator;                                           // 0x0060(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Quat;                                              // 0x0070(0x0010)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0xC];                                       // 0x0084(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStructSerializerBuiltinTestStruct) == 0x000010, "Wrong alignment on FStructSerializerBuiltinTestStruct");
static_assert(sizeof(FStructSerializerBuiltinTestStruct) == 0x000090, "Wrong size on FStructSerializerBuiltinTestStruct");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Guid) == 0x000000, "Member 'FStructSerializerBuiltinTestStruct::Guid' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Name) == 0x000010, "Member 'FStructSerializerBuiltinTestStruct::Name' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, String) == 0x000018, "Member 'FStructSerializerBuiltinTestStruct::String' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Text) == 0x000028, "Member 'FStructSerializerBuiltinTestStruct::Text' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Vector) == 0x000040, "Member 'FStructSerializerBuiltinTestStruct::Vector' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Vector4) == 0x000050, "Member 'FStructSerializerBuiltinTestStruct::Vector4' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Rotator) == 0x000060, "Member 'FStructSerializerBuiltinTestStruct::Rotator' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Quat) == 0x000070, "Member 'FStructSerializerBuiltinTestStruct::Quat' has a wrong offset!");
static_assert(offsetof(FStructSerializerBuiltinTestStruct, Color) == 0x000080, "Member 'FStructSerializerBuiltinTestStruct::Color' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerArrayTestStruct
// 0x0060 (0x0060 - 0x0000)
struct FStructSerializerArrayTestStruct final
{
public:
	TArray<int32>                                 Int32Array;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 ByteArray;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StaticSingleElement;                               // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StaticInt32Array[0x3];                             // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticFloatArray[0x3];                             // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        VectorArray;                                       // 0x0040(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FStructSerializerBuiltinTestStruct> StructArray;                                       // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerArrayTestStruct) == 0x000008, "Wrong alignment on FStructSerializerArrayTestStruct");
static_assert(sizeof(FStructSerializerArrayTestStruct) == 0x000060, "Wrong size on FStructSerializerArrayTestStruct");
static_assert(offsetof(FStructSerializerArrayTestStruct, Int32Array) == 0x000000, "Member 'FStructSerializerArrayTestStruct::Int32Array' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, ByteArray) == 0x000010, "Member 'FStructSerializerArrayTestStruct::ByteArray' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, StaticSingleElement) == 0x000020, "Member 'FStructSerializerArrayTestStruct::StaticSingleElement' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, StaticInt32Array) == 0x000024, "Member 'FStructSerializerArrayTestStruct::StaticInt32Array' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, StaticFloatArray) == 0x000030, "Member 'FStructSerializerArrayTestStruct::StaticFloatArray' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, VectorArray) == 0x000040, "Member 'FStructSerializerArrayTestStruct::VectorArray' has a wrong offset!");
static_assert(offsetof(FStructSerializerArrayTestStruct, StructArray) == 0x000050, "Member 'FStructSerializerArrayTestStruct::StructArray' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerMapTestStruct
// 0x0140 (0x0140 - 0x0000)
struct FStructSerializerMapTestStruct final
{
public:
	TMap<int32, class FString>                    IntToStr;                                          // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            StrToStr;                                          // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FVector>           StrToVec;                                          // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FStructSerializerBuiltinTestStruct> StrToStruct;                                       // 0x00F0(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerMapTestStruct) == 0x000008, "Wrong alignment on FStructSerializerMapTestStruct");
static_assert(sizeof(FStructSerializerMapTestStruct) == 0x000140, "Wrong size on FStructSerializerMapTestStruct");
static_assert(offsetof(FStructSerializerMapTestStruct, IntToStr) == 0x000000, "Member 'FStructSerializerMapTestStruct::IntToStr' has a wrong offset!");
static_assert(offsetof(FStructSerializerMapTestStruct, StrToStr) == 0x000050, "Member 'FStructSerializerMapTestStruct::StrToStr' has a wrong offset!");
static_assert(offsetof(FStructSerializerMapTestStruct, StrToVec) == 0x0000A0, "Member 'FStructSerializerMapTestStruct::StrToVec' has a wrong offset!");
static_assert(offsetof(FStructSerializerMapTestStruct, StrToStruct) == 0x0000F0, "Member 'FStructSerializerMapTestStruct::StrToStruct' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerSetTestStruct
// 0x0140 (0x0140 - 0x0000)
struct FStructSerializerSetTestStruct final
{
public:
	TSet<class FString>                           StrSet;                                            // 0x0000(0x0050)(NativeAccessSpecifierPublic)
	TSet<int32>                                   IntSet;                                            // 0x0050(0x0050)(NativeAccessSpecifierPublic)
	TSet<class FName>                             NameSet;                                           // 0x00A0(0x0050)(NativeAccessSpecifierPublic)
	TSet<struct FStructSerializerBuiltinTestStruct> StructSet;                                         // 0x00F0(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerSetTestStruct) == 0x000008, "Wrong alignment on FStructSerializerSetTestStruct");
static_assert(sizeof(FStructSerializerSetTestStruct) == 0x000140, "Wrong size on FStructSerializerSetTestStruct");
static_assert(offsetof(FStructSerializerSetTestStruct, StrSet) == 0x000000, "Member 'FStructSerializerSetTestStruct::StrSet' has a wrong offset!");
static_assert(offsetof(FStructSerializerSetTestStruct, IntSet) == 0x000050, "Member 'FStructSerializerSetTestStruct::IntSet' has a wrong offset!");
static_assert(offsetof(FStructSerializerSetTestStruct, NameSet) == 0x0000A0, "Member 'FStructSerializerSetTestStruct::NameSet' has a wrong offset!");
static_assert(offsetof(FStructSerializerSetTestStruct, StructSet) == 0x0000F0, "Member 'FStructSerializerSetTestStruct::StructSet' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerTestStruct
// 0x0450 (0x0450 - 0x0000)
struct FStructSerializerTestStruct final
{
public:
	struct FStructSerializerNumericTestStruct     Numerics;                                          // 0x0000(0x0030)(NoDestructor, NativeAccessSpecifierPublic)
	struct FStructSerializerBooleanTestStruct     Booleans;                                          // 0x0030(0x0003)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStructSerializerObjectTestStruct      Objects;                                           // 0x0038(0x00A0)(NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x8];                                       // 0x00D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStructSerializerBuiltinTestStruct     Builtins;                                          // 0x00E0(0x0090)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStructSerializerArrayTestStruct       Arrays;                                            // 0x0170(0x0060)(NativeAccessSpecifierPublic)
	struct FStructSerializerMapTestStruct         Maps;                                              // 0x01D0(0x0140)(NativeAccessSpecifierPublic)
	struct FStructSerializerSetTestStruct         Sets;                                              // 0x0310(0x0140)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FStructSerializerTestStruct) == 0x000010, "Wrong alignment on FStructSerializerTestStruct");
static_assert(sizeof(FStructSerializerTestStruct) == 0x000450, "Wrong size on FStructSerializerTestStruct");
static_assert(offsetof(FStructSerializerTestStruct, Numerics) == 0x000000, "Member 'FStructSerializerTestStruct::Numerics' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Booleans) == 0x000030, "Member 'FStructSerializerTestStruct::Booleans' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Objects) == 0x000038, "Member 'FStructSerializerTestStruct::Objects' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Builtins) == 0x0000E0, "Member 'FStructSerializerTestStruct::Builtins' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Arrays) == 0x000170, "Member 'FStructSerializerTestStruct::Arrays' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Maps) == 0x0001D0, "Member 'FStructSerializerTestStruct::Maps' has a wrong offset!");
static_assert(offsetof(FStructSerializerTestStruct, Sets) == 0x000310, "Member 'FStructSerializerTestStruct::Sets' has a wrong offset!");

// ScriptStruct Serialization.StructSerializerByteArray
// 0x0038 (0x0038 - 0x0000)
struct FStructSerializerByteArray final
{
public:
	int32                                         Dummy1;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ByteArray;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Dummy2;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int8>                                  Int8Array;                                         // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Dummy3;                                            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStructSerializerByteArray) == 0x000008, "Wrong alignment on FStructSerializerByteArray");
static_assert(sizeof(FStructSerializerByteArray) == 0x000038, "Wrong size on FStructSerializerByteArray");
static_assert(offsetof(FStructSerializerByteArray, Dummy1) == 0x000000, "Member 'FStructSerializerByteArray::Dummy1' has a wrong offset!");
static_assert(offsetof(FStructSerializerByteArray, ByteArray) == 0x000008, "Member 'FStructSerializerByteArray::ByteArray' has a wrong offset!");
static_assert(offsetof(FStructSerializerByteArray, Dummy2) == 0x000018, "Member 'FStructSerializerByteArray::Dummy2' has a wrong offset!");
static_assert(offsetof(FStructSerializerByteArray, Int8Array) == 0x000020, "Member 'FStructSerializerByteArray::Int8Array' has a wrong offset!");
static_assert(offsetof(FStructSerializerByteArray, Dummy3) == 0x000030, "Member 'FStructSerializerByteArray::Dummy3' has a wrong offset!");

}

