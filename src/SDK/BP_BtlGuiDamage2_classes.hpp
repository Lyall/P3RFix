#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlGuiDamage2

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_BtlGuiBaseActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlGuiDamage2.BP_BtlGuiDamage2_C
// 0x0258 (0x05A8 - 0x0350)
class ABP_BtlGuiDamage2_C final : public ABP_BtlGuiBaseActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BtlGuiDamage2_C;                 // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBtlGuiResources*                       BtlGuiResources;                                   // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawComponent*                   BtlGuiDraw;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           AllAddTimeline_Color_2E67B61C41FE8C64368FEBB0B169BDB9; // 0x0368(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllAddTimeline_Slide_2E67B61C41FE8C64368FEBB0B169BDB9; // 0x0378(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AllAddTimeline_Alpha_2E67B61C41FE8C64368FEBB0B169BDB9; // 0x037C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AllAddTimeline__Direction_2E67B61C41FE8C64368FEBB0B169BDB9; // 0x0380(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AllAddTimeline;                                    // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CriticalTimeline_param1_6DD4B9614DB3A225600EBEADFD1FC032; // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            CriticalTimeline__Direction_6DD4B9614DB3A225600EBEADFD1FC032; // 0x0394(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     CriticalTimeline;                                  // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlockTimeline_ShakeRate_F039E0AD4A47CA05A39CD48B04FB2DFC; // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BlockTimeline__Direction_F039E0AD4A47CA05A39CD48B04FB2DFC; // 0x03A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A5[0x3];                                      // 0x03A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BlockTimeline;                                     // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MissTimeline_MissPos_D6A7DB784878763C9084208482FC6C01; // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MissTimeline_MissAlpha_D6A7DB784878763C9084208482FC6C01; // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            MissTimeline__Direction_D6A7DB784878763C9084208482FC6C01; // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     MissTimeline;                                      // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ResistTimeline___Track_0_1ED1856F45E693F3E011BC87084421AC; // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ResistTimeline__Direction_1ED1856F45E693F3E011BC87084421AC; // 0x03CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CD[0x3];                                      // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ResistTimeline;                                    // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeakTimeline_param1_2D89FECD4644D67F453CD592F982E50D; // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            WeakTimeline__Direction_2D89FECD4644D67F453CD592F982E50D; // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DD[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     WeakTimeline;                                      // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RootTimeline___Track_0_02EAFDA642C79101A916D89D5D19B443; // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RootTimeline__Direction_02EAFDA642C79101A916D89D5D19B443; // 0x03EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3ED[0x3];                                      // 0x03ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RootTimeline;                                      // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlCharacterBase_C*                 Chara;                                             // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 DamageNumList;                                     // 0x0400(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Damage;                                            // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Type;                                              // 0x0414(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Pos;                                               // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Width;                                             // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height;                                            // 0x0424(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Item_Color;                                        // 0x042C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Shadow_Color;                                      // 0x0430(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBtlGuiDrawObjectSprite*>        Our_ItemList;                                      // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBtlGuiDrawObjectSprite*>        Shadow_ItemList;                                   // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Array_Index;                                       // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnEndDamageAnim;                                   // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsLockY;                                           // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_471[0x3];                                      // 0x0471(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Array_Element;                                     // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SprOffset;                                         // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShadowSprOffset;                                   // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ShadorPosOffset;                                   // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOne;                                             // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_489[0x3];                                      // 0x0489(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CenterPosWork;                                     // 0x048C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      ShadorPosList;                                     // 0x0498(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      PosList;                                           // 0x04A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector2D                              VectorOffset;                                      // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 TimerList;                                         // 0x04C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         WorkTime;                                          // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TypeWork;                                          // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBtlGuiDrawObjectCore*>          TextItemList;                                      // 0x04E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TextAlpha;                                         // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      TextPosList;                                       // 0x0500(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         TextParam1;                                        // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextParam2;                                        // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TextParam3;                                        // 0x0518(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51C[0x4];                                      // 0x051C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 WeakTimeRate;                                      // 0x0520(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 WeakLineTimeRate;                                  // 0x0530(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          BoolParam;                                         // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_541[0x3];                                      // 0x0541(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CursorPosWork;                                     // 0x0544(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54C[0x4];                                      // 0x054C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      TextPosList2;                                      // 0x0550(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      TextPosList3;                                      // 0x0560(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          WorldToScreenFlag;                                 // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEnemy;                                           // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_572[0x2];                                      // 0x0572(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              PosWork;                                           // 0x0574(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 ColorWork;                                         // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FripFlopFlag;                                      // 0x0580(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_581[0x7];                                      // 0x0581(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBtlGuiDrawObjectCore*>          DebugTextItemList;                                 // 0x0588(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         DebugTextType;                                     // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              DebugTextPos;                                      // 0x059C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnEndDamageAnim__DelegateSignature(class ABP_BtlCharacterBase_C* NewParam);
	void ExecuteUbergraph_BP_BtlGuiDamage2(int32 EntryPoint);
	void Remove();
	void GuiActorBeginDestroy();
	void GuiActorUpdate(float DeltaTime);
	void Start(class ABP_BtlCharacterBase_C* Chara_0, int32 Damage_0, int32 Type_0, const struct FVector2D& Pos_0, bool FripFlop);
	void StartAllTimeline();
	void TimelineEnd();
	void AllAddTimeline__UpdateFunc();
	void AllAddTimeline__FinishedFunc();
	void CriticalTimeline__OutAnim__EventFunc();
	void CriticalTimeline__UpdateFunc();
	void CriticalTimeline__FinishedFunc();
	void BlockTimeline__UpdateFunc();
	void BlockTimeline__FinishedFunc();
	void MissTimeline__UpdateFunc();
	void MissTimeline__FinishedFunc();
	void ResistTimeline__UpdateFunc();
	void ResistTimeline__FinishedFunc();
	void WeakTimeline__OutAnim__EventFunc();
	void WeakTimeline__UpdateFunc();
	void WeakTimeline__FinishedFunc();
	void RootTimeline__UpdateFunc();
	void RootTimeline__FinishedFunc();
	void UpdateVisible(int32 Index_0, bool Visible);
	void Update_Add_PositionAlpha(int32 Index_0, const struct FVector2D& AddPos, float Alpha_0);
	void GetNumberHalfWidth(bool UseTempParam, int32 Damage_0, int32 Type_0, float* HalfWidth, float* Scale_0, bool* FlipFlopFlag);
	void SetWeakTime(bool OutAnim);
	void SetWeakLineTime(bool OutAnim);
	void SetCriticalTime(bool OutAnim);
	void SetCriticalLineTime(bool OutAnim);
	void CreateDebugText(int32 Type_0);
	void UpdateDebugText(int32 Type_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlGuiDamage2_C">();
	}
	static class ABP_BtlGuiDamage2_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlGuiDamage2_C>();
	}
};
static_assert(alignof(ABP_BtlGuiDamage2_C) == 0x000008, "Wrong alignment on ABP_BtlGuiDamage2_C");
static_assert(sizeof(ABP_BtlGuiDamage2_C) == 0x0005A8, "Wrong size on ABP_BtlGuiDamage2_C");
static_assert(offsetof(ABP_BtlGuiDamage2_C, UberGraphFrame_BP_BtlGuiDamage2_C) == 0x000350, "Member 'ABP_BtlGuiDamage2_C::UberGraphFrame_BP_BtlGuiDamage2_C' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, BtlGuiResources) == 0x000358, "Member 'ABP_BtlGuiDamage2_C::BtlGuiResources' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, BtlGuiDraw) == 0x000360, "Member 'ABP_BtlGuiDamage2_C::BtlGuiDraw' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, AllAddTimeline_Color_2E67B61C41FE8C64368FEBB0B169BDB9) == 0x000368, "Member 'ABP_BtlGuiDamage2_C::AllAddTimeline_Color_2E67B61C41FE8C64368FEBB0B169BDB9' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, AllAddTimeline_Slide_2E67B61C41FE8C64368FEBB0B169BDB9) == 0x000378, "Member 'ABP_BtlGuiDamage2_C::AllAddTimeline_Slide_2E67B61C41FE8C64368FEBB0B169BDB9' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, AllAddTimeline_Alpha_2E67B61C41FE8C64368FEBB0B169BDB9) == 0x00037C, "Member 'ABP_BtlGuiDamage2_C::AllAddTimeline_Alpha_2E67B61C41FE8C64368FEBB0B169BDB9' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, AllAddTimeline__Direction_2E67B61C41FE8C64368FEBB0B169BDB9) == 0x000380, "Member 'ABP_BtlGuiDamage2_C::AllAddTimeline__Direction_2E67B61C41FE8C64368FEBB0B169BDB9' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, AllAddTimeline) == 0x000388, "Member 'ABP_BtlGuiDamage2_C::AllAddTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, CriticalTimeline_param1_6DD4B9614DB3A225600EBEADFD1FC032) == 0x000390, "Member 'ABP_BtlGuiDamage2_C::CriticalTimeline_param1_6DD4B9614DB3A225600EBEADFD1FC032' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, CriticalTimeline__Direction_6DD4B9614DB3A225600EBEADFD1FC032) == 0x000394, "Member 'ABP_BtlGuiDamage2_C::CriticalTimeline__Direction_6DD4B9614DB3A225600EBEADFD1FC032' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, CriticalTimeline) == 0x000398, "Member 'ABP_BtlGuiDamage2_C::CriticalTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, BlockTimeline_ShakeRate_F039E0AD4A47CA05A39CD48B04FB2DFC) == 0x0003A0, "Member 'ABP_BtlGuiDamage2_C::BlockTimeline_ShakeRate_F039E0AD4A47CA05A39CD48B04FB2DFC' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, BlockTimeline__Direction_F039E0AD4A47CA05A39CD48B04FB2DFC) == 0x0003A4, "Member 'ABP_BtlGuiDamage2_C::BlockTimeline__Direction_F039E0AD4A47CA05A39CD48B04FB2DFC' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, BlockTimeline) == 0x0003A8, "Member 'ABP_BtlGuiDamage2_C::BlockTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, MissTimeline_MissPos_D6A7DB784878763C9084208482FC6C01) == 0x0003B0, "Member 'ABP_BtlGuiDamage2_C::MissTimeline_MissPos_D6A7DB784878763C9084208482FC6C01' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, MissTimeline_MissAlpha_D6A7DB784878763C9084208482FC6C01) == 0x0003B4, "Member 'ABP_BtlGuiDamage2_C::MissTimeline_MissAlpha_D6A7DB784878763C9084208482FC6C01' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, MissTimeline__Direction_D6A7DB784878763C9084208482FC6C01) == 0x0003B8, "Member 'ABP_BtlGuiDamage2_C::MissTimeline__Direction_D6A7DB784878763C9084208482FC6C01' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, MissTimeline) == 0x0003C0, "Member 'ABP_BtlGuiDamage2_C::MissTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, ResistTimeline___Track_0_1ED1856F45E693F3E011BC87084421AC) == 0x0003C8, "Member 'ABP_BtlGuiDamage2_C::ResistTimeline___Track_0_1ED1856F45E693F3E011BC87084421AC' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, ResistTimeline__Direction_1ED1856F45E693F3E011BC87084421AC) == 0x0003CC, "Member 'ABP_BtlGuiDamage2_C::ResistTimeline__Direction_1ED1856F45E693F3E011BC87084421AC' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, ResistTimeline) == 0x0003D0, "Member 'ABP_BtlGuiDamage2_C::ResistTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, WeakTimeline_param1_2D89FECD4644D67F453CD592F982E50D) == 0x0003D8, "Member 'ABP_BtlGuiDamage2_C::WeakTimeline_param1_2D89FECD4644D67F453CD592F982E50D' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, WeakTimeline__Direction_2D89FECD4644D67F453CD592F982E50D) == 0x0003DC, "Member 'ABP_BtlGuiDamage2_C::WeakTimeline__Direction_2D89FECD4644D67F453CD592F982E50D' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, WeakTimeline) == 0x0003E0, "Member 'ABP_BtlGuiDamage2_C::WeakTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, RootTimeline___Track_0_02EAFDA642C79101A916D89D5D19B443) == 0x0003E8, "Member 'ABP_BtlGuiDamage2_C::RootTimeline___Track_0_02EAFDA642C79101A916D89D5D19B443' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, RootTimeline__Direction_02EAFDA642C79101A916D89D5D19B443) == 0x0003EC, "Member 'ABP_BtlGuiDamage2_C::RootTimeline__Direction_02EAFDA642C79101A916D89D5D19B443' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, RootTimeline) == 0x0003F0, "Member 'ABP_BtlGuiDamage2_C::RootTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Chara) == 0x0003F8, "Member 'ABP_BtlGuiDamage2_C::Chara' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, DamageNumList) == 0x000400, "Member 'ABP_BtlGuiDamage2_C::DamageNumList' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Damage) == 0x000410, "Member 'ABP_BtlGuiDamage2_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Type) == 0x000414, "Member 'ABP_BtlGuiDamage2_C::Type' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Pos) == 0x000418, "Member 'ABP_BtlGuiDamage2_C::Pos' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Width) == 0x000420, "Member 'ABP_BtlGuiDamage2_C::Width' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Height) == 0x000424, "Member 'ABP_BtlGuiDamage2_C::Height' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Scale) == 0x000428, "Member 'ABP_BtlGuiDamage2_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Item_Color) == 0x00042C, "Member 'ABP_BtlGuiDamage2_C::Item_Color' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Shadow_Color) == 0x000430, "Member 'ABP_BtlGuiDamage2_C::Shadow_Color' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Our_ItemList) == 0x000438, "Member 'ABP_BtlGuiDamage2_C::Our_ItemList' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Shadow_ItemList) == 0x000448, "Member 'ABP_BtlGuiDamage2_C::Shadow_ItemList' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Array_Index) == 0x000458, "Member 'ABP_BtlGuiDamage2_C::Array_Index' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, OnEndDamageAnim) == 0x000460, "Member 'ABP_BtlGuiDamage2_C::OnEndDamageAnim' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, IsLockY) == 0x000470, "Member 'ABP_BtlGuiDamage2_C::IsLockY' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Array_Element) == 0x000474, "Member 'ABP_BtlGuiDamage2_C::Array_Element' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, SprOffset) == 0x000478, "Member 'ABP_BtlGuiDamage2_C::SprOffset' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, ShadowSprOffset) == 0x00047C, "Member 'ABP_BtlGuiDamage2_C::ShadowSprOffset' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, ShadorPosOffset) == 0x000480, "Member 'ABP_BtlGuiDamage2_C::ShadorPosOffset' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, IsOne) == 0x000488, "Member 'ABP_BtlGuiDamage2_C::IsOne' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, CenterPosWork) == 0x00048C, "Member 'ABP_BtlGuiDamage2_C::CenterPosWork' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, ShadorPosList) == 0x000498, "Member 'ABP_BtlGuiDamage2_C::ShadorPosList' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, PosList) == 0x0004A8, "Member 'ABP_BtlGuiDamage2_C::PosList' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, VectorOffset) == 0x0004B8, "Member 'ABP_BtlGuiDamage2_C::VectorOffset' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, TimerList) == 0x0004C0, "Member 'ABP_BtlGuiDamage2_C::TimerList' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, WorkTime) == 0x0004D0, "Member 'ABP_BtlGuiDamage2_C::WorkTime' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Curve) == 0x0004D8, "Member 'ABP_BtlGuiDamage2_C::Curve' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, Alpha) == 0x0004E0, "Member 'ABP_BtlGuiDamage2_C::Alpha' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, TypeWork) == 0x0004E4, "Member 'ABP_BtlGuiDamage2_C::TypeWork' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, TextItemList) == 0x0004E8, "Member 'ABP_BtlGuiDamage2_C::TextItemList' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, TextAlpha) == 0x0004F8, "Member 'ABP_BtlGuiDamage2_C::TextAlpha' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, TextPosList) == 0x000500, "Member 'ABP_BtlGuiDamage2_C::TextPosList' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, TextParam1) == 0x000510, "Member 'ABP_BtlGuiDamage2_C::TextParam1' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, TextParam2) == 0x000514, "Member 'ABP_BtlGuiDamage2_C::TextParam2' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, TextParam3) == 0x000518, "Member 'ABP_BtlGuiDamage2_C::TextParam3' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, WeakTimeRate) == 0x000520, "Member 'ABP_BtlGuiDamage2_C::WeakTimeRate' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, WeakLineTimeRate) == 0x000530, "Member 'ABP_BtlGuiDamage2_C::WeakLineTimeRate' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, BoolParam) == 0x000540, "Member 'ABP_BtlGuiDamage2_C::BoolParam' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, CursorPosWork) == 0x000544, "Member 'ABP_BtlGuiDamage2_C::CursorPosWork' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, TextPosList2) == 0x000550, "Member 'ABP_BtlGuiDamage2_C::TextPosList2' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, TextPosList3) == 0x000560, "Member 'ABP_BtlGuiDamage2_C::TextPosList3' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, WorldToScreenFlag) == 0x000570, "Member 'ABP_BtlGuiDamage2_C::WorldToScreenFlag' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, IsEnemy) == 0x000571, "Member 'ABP_BtlGuiDamage2_C::IsEnemy' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, PosWork) == 0x000574, "Member 'ABP_BtlGuiDamage2_C::PosWork' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, ColorWork) == 0x00057C, "Member 'ABP_BtlGuiDamage2_C::ColorWork' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, FripFlopFlag) == 0x000580, "Member 'ABP_BtlGuiDamage2_C::FripFlopFlag' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, DebugTextItemList) == 0x000588, "Member 'ABP_BtlGuiDamage2_C::DebugTextItemList' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, DebugTextType) == 0x000598, "Member 'ABP_BtlGuiDamage2_C::DebugTextType' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiDamage2_C, DebugTextPos) == 0x00059C, "Member 'ABP_BtlGuiDamage2_C::DebugTextPos' has a wrong offset!");

}

