#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LS_Btl_UI_ChanceEncount

#include "Basic.hpp"


namespace SDK::Params
{

// Function LS_Btl_UI_ChanceEncount.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x0038 (0x0038 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlEncountAssistant_C*              K2Node_CustomEvent_BP_BtlEncountAssistant;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlEncountAssistant_C*              K2Node_CustomEvent_BP_BtlEncountAssistant_4;       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlEncountAssistant_C*              K2Node_CustomEvent_BP_BtlEncountAssistant_3;       // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlEncountAssistant_C*              K2Node_CustomEvent_BP_BtlEncountAssistant_2;       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlEncountAssistant_C*              K2Node_CustomEvent_BP_BtlEncountAssistant_1;       // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_CueID;                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000038, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BtlEncountAssistant) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BtlEncountAssistant' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BtlEncountAssistant_4) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BtlEncountAssistant_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BtlEncountAssistant_3) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BtlEncountAssistant_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BtlEncountAssistant_2) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BtlEncountAssistant_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BP_BtlEncountAssistant_1) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BP_BtlEncountAssistant_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_CueID) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_CueID' has a wrong offset!");

// Function LS_Btl_UI_ChanceEncount.SequenceDirector_C.BP_BtlEncountAssistant_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BP_BtlEncountAssistant_Event_0 final
{
public:
	class ABP_BtlEncountAssistant_C*              BP_BtlEncountAssistant;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BP_BtlEncountAssistant_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BP_BtlEncountAssistant_Event_0");
static_assert(sizeof(SequenceDirector_C_BP_BtlEncountAssistant_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BP_BtlEncountAssistant_Event_0");
static_assert(offsetof(SequenceDirector_C_BP_BtlEncountAssistant_Event_0, BP_BtlEncountAssistant) == 0x000000, "Member 'SequenceDirector_C_BP_BtlEncountAssistant_Event_0::BP_BtlEncountAssistant' has a wrong offset!");

// Function LS_Btl_UI_ChanceEncount.SequenceDirector_C.PlaySE
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_PlaySE final
{
public:
	class ABP_BtlEncountAssistant_C*              BP_BtlEncountAssistant;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CueId;                                             // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_PlaySE) == 0x000008, "Wrong alignment on SequenceDirector_C_PlaySE");
static_assert(sizeof(SequenceDirector_C_PlaySE) == 0x000010, "Wrong size on SequenceDirector_C_PlaySE");
static_assert(offsetof(SequenceDirector_C_PlaySE, BP_BtlEncountAssistant) == 0x000000, "Member 'SequenceDirector_C_PlaySE::BP_BtlEncountAssistant' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_PlaySE, CueId) == 0x000008, "Member 'SequenceDirector_C_PlaySE::CueId' has a wrong offset!");

// Function LS_Btl_UI_ChanceEncount.SequenceDirector_C.RequestSunnmonEnemy
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_RequestSunnmonEnemy final
{
public:
	class ABP_BtlEncountAssistant_C*              BP_BtlEncountAssistant;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_RequestSunnmonEnemy) == 0x000008, "Wrong alignment on SequenceDirector_C_RequestSunnmonEnemy");
static_assert(sizeof(SequenceDirector_C_RequestSunnmonEnemy) == 0x000008, "Wrong size on SequenceDirector_C_RequestSunnmonEnemy");
static_assert(offsetof(SequenceDirector_C_RequestSunnmonEnemy, BP_BtlEncountAssistant) == 0x000000, "Member 'SequenceDirector_C_RequestSunnmonEnemy::BP_BtlEncountAssistant' has a wrong offset!");

// Function LS_Btl_UI_ChanceEncount.SequenceDirector_C.HeroRunStop
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_HeroRunStop final
{
public:
	class ABP_BtlEncountAssistant_C*              BP_BtlEncountAssistant;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_HeroRunStop) == 0x000008, "Wrong alignment on SequenceDirector_C_HeroRunStop");
static_assert(sizeof(SequenceDirector_C_HeroRunStop) == 0x000008, "Wrong size on SequenceDirector_C_HeroRunStop");
static_assert(offsetof(SequenceDirector_C_HeroRunStop, BP_BtlEncountAssistant) == 0x000000, "Member 'SequenceDirector_C_HeroRunStop::BP_BtlEncountAssistant' has a wrong offset!");

// Function LS_Btl_UI_ChanceEncount.SequenceDirector_C.RequestSequenceEvent1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_RequestSequenceEvent1 final
{
public:
	class ABP_BtlEncountAssistant_C*              BP_BtlEncountAssistant;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_RequestSequenceEvent1) == 0x000008, "Wrong alignment on SequenceDirector_C_RequestSequenceEvent1");
static_assert(sizeof(SequenceDirector_C_RequestSequenceEvent1) == 0x000008, "Wrong size on SequenceDirector_C_RequestSequenceEvent1");
static_assert(offsetof(SequenceDirector_C_RequestSequenceEvent1, BP_BtlEncountAssistant) == 0x000000, "Member 'SequenceDirector_C_RequestSequenceEvent1::BP_BtlEncountAssistant' has a wrong offset!");

// Function LS_Btl_UI_ChanceEncount.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class ABP_BtlEncountAssistant_C*              BP_BtlEncountAssistant;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, BP_BtlEncountAssistant) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::BP_BtlEncountAssistant' has a wrong offset!");

// Function LS_Btl_UI_ChanceEncount.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class ABP_BtlEncountAssistant_C*              BP_BtlEncountAssistant;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, BP_BtlEncountAssistant) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::BP_BtlEncountAssistant' has a wrong offset!");

// Function LS_Btl_UI_ChanceEncount.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2 final
{
public:
	class ABP_BtlEncountAssistant_C*              BP_BtlEncountAssistant;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2, BP_BtlEncountAssistant) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2::BP_BtlEncountAssistant' has a wrong offset!");

// Function LS_Btl_UI_ChanceEncount.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3 final
{
public:
	class ABP_BtlEncountAssistant_C*              BP_BtlEncountAssistant;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3, BP_BtlEncountAssistant) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3::BP_BtlEncountAssistant' has a wrong offset!");

// Function LS_Btl_UI_ChanceEncount.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4 final
{
public:
	class ABP_BtlEncountAssistant_C*              BP_BtlEncountAssistant;                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4, BP_BtlEncountAssistant) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4::BP_BtlEncountAssistant' has a wrong offset!");

}

