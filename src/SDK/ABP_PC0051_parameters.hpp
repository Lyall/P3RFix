#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_PC0051

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_PC0051.ABP_PC0051_C.ExecuteUbergraph_ABP_PC0051
// 0x0018 (0x0018 - 0x0000)
struct ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051) == 0x000008, "Wrong alignment on ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051");
static_assert(sizeof(ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051) == 0x000018, "Wrong size on ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051");
static_assert(offsetof(ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051, EntryPoint) == 0x000000, "Member 'ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000008, "Member 'ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051, K2Node_Event_DeltaTimeX) == 0x000010, "Member 'ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'ABP_PC0051_C_ExecuteUbergraph_ABP_PC0051::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function ABP_PC0051.ABP_PC0051_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_PC0051_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC0051_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_PC0051_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_PC0051_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_PC0051_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_PC0051_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_PC0051_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_PC0051.ABP_PC0051_C.EyeBlink
// 0x0018 (0x0018 - 0x0000)
struct ABP_PC0051_C_EyeBlink final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_Add_ByteByte_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_ByteByte_ReturnValue;                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_1;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue_2;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC0051_C_EyeBlink) == 0x000004, "Wrong alignment on ABP_PC0051_C_EyeBlink");
static_assert(sizeof(ABP_PC0051_C_EyeBlink) == 0x000018, "Wrong size on ABP_PC0051_C_EyeBlink");
static_assert(offsetof(ABP_PC0051_C_EyeBlink, DeltaTime) == 0x000000, "Member 'ABP_PC0051_C_EyeBlink::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeBlink, CallFunc_Add_ByteByte_ReturnValue) == 0x000004, "Member 'ABP_PC0051_C_EyeBlink::CallFunc_Add_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeBlink, CallFunc_Less_ByteByte_ReturnValue) == 0x000005, "Member 'ABP_PC0051_C_EyeBlink::CallFunc_Less_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeBlink, CallFunc_Less_FloatFloat_ReturnValue) == 0x000006, "Member 'ABP_PC0051_C_EyeBlink::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeBlink, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000007, "Member 'ABP_PC0051_C_EyeBlink::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeBlink, CallFunc_Less_FloatFloat_ReturnValue_1) == 0x000008, "Member 'ABP_PC0051_C_EyeBlink::CallFunc_Less_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeBlink, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000009, "Member 'ABP_PC0051_C_EyeBlink::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeBlink, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x00000C, "Member 'ABP_PC0051_C_EyeBlink::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeBlink, CallFunc_Less_FloatFloat_ReturnValue_2) == 0x000010, "Member 'ABP_PC0051_C_EyeBlink::CallFunc_Less_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeBlink, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000011, "Member 'ABP_PC0051_C_EyeBlink::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeBlink, CallFunc_RandomFloatInRange_ReturnValue) == 0x000014, "Member 'ABP_PC0051_C_EyeBlink::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");

// Function ABP_PC0051.ABP_PC0051_C.EyeSaccade
// 0x0030 (0x0030 - 0x0000)
struct ABP_PC0051_C_EyeSaccade final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_VInterpTo_ReturnValue;                    // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Subtract_FloatFloat_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_1;         // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRange_ReturnValue_2;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0024(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC0051_C_EyeSaccade) == 0x000004, "Wrong alignment on ABP_PC0051_C_EyeSaccade");
static_assert(sizeof(ABP_PC0051_C_EyeSaccade) == 0x000030, "Wrong size on ABP_PC0051_C_EyeSaccade");
static_assert(offsetof(ABP_PC0051_C_EyeSaccade, DeltaTime) == 0x000000, "Member 'ABP_PC0051_C_EyeSaccade::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeSaccade, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000004, "Member 'ABP_PC0051_C_EyeSaccade::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeSaccade, CallFunc_Less_FloatFloat_ReturnValue) == 0x000005, "Member 'ABP_PC0051_C_EyeSaccade::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeSaccade, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000006, "Member 'ABP_PC0051_C_EyeSaccade::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeSaccade, CallFunc_VInterpTo_ReturnValue) == 0x000008, "Member 'ABP_PC0051_C_EyeSaccade::CallFunc_VInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeSaccade, CallFunc_Subtract_FloatFloat_ReturnValue) == 0x000014, "Member 'ABP_PC0051_C_EyeSaccade::CallFunc_Subtract_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeSaccade, CallFunc_RandomFloatInRange_ReturnValue) == 0x000018, "Member 'ABP_PC0051_C_EyeSaccade::CallFunc_RandomFloatInRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeSaccade, CallFunc_RandomFloatInRange_ReturnValue_1) == 0x00001C, "Member 'ABP_PC0051_C_EyeSaccade::CallFunc_RandomFloatInRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeSaccade, CallFunc_RandomFloatInRange_ReturnValue_2) == 0x000020, "Member 'ABP_PC0051_C_EyeSaccade::CallFunc_RandomFloatInRange_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0051_C_EyeSaccade, CallFunc_MakeVector_ReturnValue) == 0x000024, "Member 'ABP_PC0051_C_EyeSaccade::CallFunc_MakeVector_ReturnValue' has a wrong offset!");

// Function ABP_PC0051.ABP_PC0051_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_PC0051_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_PC0051_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_PC0051_C_AnimGraph");
static_assert(sizeof(ABP_PC0051_C_AnimGraph) == 0x000010, "Wrong size on ABP_PC0051_C_AnimGraph");
static_assert(offsetof(ABP_PC0051_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_PC0051_C_AnimGraph::AnimGraph_0' has a wrong offset!");

}

