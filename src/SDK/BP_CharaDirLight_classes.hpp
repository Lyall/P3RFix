#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharaDirLight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharaDirLight.BP_CharaDirLight_C
// 0x0068 (0x0288 - 0x0220)
class ABP_CharaDirLight_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    LightIcon;                                         // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        LightDirection;                                    // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Light_Color;                                       // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Shadow_Color;                                      // 0x0248(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           HiLight_Color;                                     // 0x0258(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           RimLight_Color;                                    // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         RimHiLightBias;                                    // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         RimLightBias;                                      // 0x027C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         SelfEmissiveBias;                                  // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         FSSSBoost;                                         // 0x0284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_CharaDirLight(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();
	void SetLightParameterToMPC();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharaDirLight_C">();
	}
	static class ABP_CharaDirLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CharaDirLight_C>();
	}
};
static_assert(alignof(ABP_CharaDirLight_C) == 0x000008, "Wrong alignment on ABP_CharaDirLight_C");
static_assert(sizeof(ABP_CharaDirLight_C) == 0x000288, "Wrong size on ABP_CharaDirLight_C");
static_assert(offsetof(ABP_CharaDirLight_C, UberGraphFrame) == 0x000220, "Member 'ABP_CharaDirLight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CharaDirLight_C, LightIcon) == 0x000228, "Member 'ABP_CharaDirLight_C::LightIcon' has a wrong offset!");
static_assert(offsetof(ABP_CharaDirLight_C, LightDirection) == 0x000230, "Member 'ABP_CharaDirLight_C::LightDirection' has a wrong offset!");
static_assert(offsetof(ABP_CharaDirLight_C, Light_Color) == 0x000238, "Member 'ABP_CharaDirLight_C::Light_Color' has a wrong offset!");
static_assert(offsetof(ABP_CharaDirLight_C, Shadow_Color) == 0x000248, "Member 'ABP_CharaDirLight_C::Shadow_Color' has a wrong offset!");
static_assert(offsetof(ABP_CharaDirLight_C, HiLight_Color) == 0x000258, "Member 'ABP_CharaDirLight_C::HiLight_Color' has a wrong offset!");
static_assert(offsetof(ABP_CharaDirLight_C, RimLight_Color) == 0x000268, "Member 'ABP_CharaDirLight_C::RimLight_Color' has a wrong offset!");
static_assert(offsetof(ABP_CharaDirLight_C, RimHiLightBias) == 0x000278, "Member 'ABP_CharaDirLight_C::RimHiLightBias' has a wrong offset!");
static_assert(offsetof(ABP_CharaDirLight_C, RimLightBias) == 0x00027C, "Member 'ABP_CharaDirLight_C::RimLightBias' has a wrong offset!");
static_assert(offsetof(ABP_CharaDirLight_C, SelfEmissiveBias) == 0x000280, "Member 'ABP_CharaDirLight_C::SelfEmissiveBias' has a wrong offset!");
static_assert(offsetof(ABP_CharaDirLight_C, FSSSBoost) == 0x000284, "Member 'ABP_CharaDirLight_C::FSSSBoost' has a wrong offset!");

}

