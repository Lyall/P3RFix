#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RuntimeMiscLib

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class RuntimeMiscLib.ML_MontageUtility
// 0x0000 (0x0028 - 0x0028)
class UML_MontageUtility final : public UBlueprintFunctionLibrary
{
public:
	static bool GetAnimationSequence(class UAnimMontage* AnimMontage, class FName SlotName, class FName SectionName, class UAnimSequenceBase** AnimSequence);
	static float GetBlendIn(class UAnimMontage* AnimMontage);
	static float GetBlendOut(class UAnimMontage* AnimMontage);
	static class FName GetNextSectionName(class UAnimMontage* AnimMontage, class FName SectionName, bool* Success);
	static void SetBlendIn(class UAnimMontage* AnimMontage, float Time);
	static bool SetBlendInAuto(class USkeletalMeshComponent* SkeletalMeshComp, class UAnimMontage* AnimMontage, class FName SectionName);
	static bool SetBlendInOutAutoWithParam(class USkeletalMeshComponent* SkeletalMeshComp, class UAnimMontage* AnimMontage, class FName SectionName, float DecreaseBlendTime);
	static void SetBlendOut(class UAnimMontage* AnimMontage, float Time);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ML_MontageUtility">();
	}
	static class UML_MontageUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UML_MontageUtility>();
	}
};
static_assert(alignof(UML_MontageUtility) == 0x000008, "Wrong alignment on UML_MontageUtility");
static_assert(sizeof(UML_MontageUtility) == 0x000028, "Wrong size on UML_MontageUtility");

// Class RuntimeMiscLib.ML_SplineActor
// 0x0010 (0x0230 - 0x0220)
class AML_SplineActor final : public AActor
{
public:
	class UML_SplineComponent*                    _SplineComponent;                                  // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UML_TargetMarkerComponent*              _TargetMarkerComponent;                            // 0x0228(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetMarkerPosition(int32 Index_0, const struct FVector& Position);
	void SetMarkerVisibility(bool Visibility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ML_SplineActor">();
	}
	static class AML_SplineActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AML_SplineActor>();
	}
};
static_assert(alignof(AML_SplineActor) == 0x000008, "Wrong alignment on AML_SplineActor");
static_assert(sizeof(AML_SplineActor) == 0x000230, "Wrong size on AML_SplineActor");
static_assert(offsetof(AML_SplineActor, _SplineComponent) == 0x000220, "Member 'AML_SplineActor::_SplineComponent' has a wrong offset!");
static_assert(offsetof(AML_SplineActor, _TargetMarkerComponent) == 0x000228, "Member 'AML_SplineActor::_TargetMarkerComponent' has a wrong offset!");

// Class RuntimeMiscLib.ML_SplineComponent
// 0x0000 (0x0550 - 0x0550)
class UML_SplineComponent final : public USplineComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ML_SplineComponent">();
	}
	static class UML_SplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UML_SplineComponent>();
	}
};
static_assert(alignof(UML_SplineComponent) == 0x000010, "Wrong alignment on UML_SplineComponent");
static_assert(sizeof(UML_SplineComponent) == 0x000550, "Wrong size on UML_SplineComponent");

// Class RuntimeMiscLib.ML_TargetMarkerComponent
// 0x0020 (0x0470 - 0x0450)
class UML_TargetMarkerComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_450[0x20];                                     // 0x0450(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ML_TargetMarkerComponent">();
	}
	static class UML_TargetMarkerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UML_TargetMarkerComponent>();
	}
};
static_assert(alignof(UML_TargetMarkerComponent) == 0x000010, "Wrong alignment on UML_TargetMarkerComponent");
static_assert(sizeof(UML_TargetMarkerComponent) == 0x000470, "Wrong size on UML_TargetMarkerComponent");

}

