#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlCameraManagerComponent

#include "Basic.hpp"

#include "BP_BtlCameraManagerComponent_classes.hpp"
#include "BP_BtlCameraManagerComponent_parameters.hpp"


namespace SDK
{

// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.ExecuteUbergraph_BP_BtlCameraManagerComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::ExecuteUbergraph_BP_BtlCameraManagerComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "ExecuteUbergraph_BP_BtlCameraManagerComponent");

	Params::BP_BtlCameraManagerComponent_C_ExecuteUbergraph_BP_BtlCameraManagerComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Has Finished Sequence Camera
// (BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::Has_Finished_Sequence_Camera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Has Finished Sequence Camera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.On Play Camera Animation
// (BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::On_Play_Camera_Animation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "On Play Camera Animation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "ReceiveTick");

	Params::BP_BtlCameraManagerComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.On Play Skill Camera
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBtlTargetsManagerComponent*      BtlTargets                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_BtlSkillBase_C*               SkillData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBtlSkillCameraType                     CameraType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::On_Play_Skill_Camera(class UBtlTargetsManagerComponent* BtlTargets, class ABP_BtlSkillBase_C* SkillData, EBtlSkillCameraType CameraType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "On Play Skill Camera");

	Params::BP_BtlCameraManagerComponent_C_On_Play_Skill_Camera Parms{};

	Parms.BtlTargets = BtlTargets;
	Parms.SkillData = SkillData;
	Parms.CameraType = CameraType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.GetMainCameraRoot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USceneComponent*                  Scene_Component                                        (Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::GetMainCameraRoot(class USceneComponent** Scene_Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "GetMainCameraRoot");

	Params::BP_BtlCameraManagerComponent_C_GetMainCameraRoot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Scene_Component != nullptr)
		*Scene_Component = Parms.Scene_Component;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.SetActCharacter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           Enchanter                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::SetActCharacter(class ABP_BtlCharacterBase_C* Enchanter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "SetActCharacter");

	Params::BP_BtlCameraManagerComponent_C_SetActCharacter Parms{};

	Parms.Enchanter = Enchanter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlaySequenceCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              Sequence_Actor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABtlActor*                        TransformBaseActor                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Loop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ACineCameraActor*                 UsingOtherMainCamera                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::PlaySequenceCamera(class ALevelSequenceActor* Sequence_Actor, class ABtlActor* TransformBaseActor, bool Loop, class ACineCameraActor* UsingOtherMainCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlaySequenceCamera");

	Params::BP_BtlCameraManagerComponent_C_PlaySequenceCamera Parms{};

	Parms.Sequence_Actor = Sequence_Actor;
	Parms.TransformBaseActor = TransformBaseActor;
	Parms.Loop = Loop;
	Parms.UsingOtherMainCamera = UsingOtherMainCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.ClearSequenceCamera
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::ClearSequenceCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "ClearSequenceCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Play Calc Camera
// (Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBtlTargetsManagerComponent*      Btl_Targets                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             TypeName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NotInitialShowHidingCharacter                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::Play_Calc_Camera(class UBtlTargetsManagerComponent* Btl_Targets, class FName TypeName, bool NotInitialShowHidingCharacter, struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Play Calc Camera");

	Params::BP_BtlCameraManagerComponent_C_Play_Calc_Camera Parms{};

	Parms.Btl_Targets = Btl_Targets;
	Parms.TypeName = TypeName;
	Parms.NotInitialShowHidingCharacter = NotInitialShowHidingCharacter;

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayCalculateSkillCamera
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBtlTargetsManagerComponent*      Btl_Targets                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NeedHidingOthersProc                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::PlayCalculateSkillCamera(class UBtlTargetsManagerComponent* Btl_Targets, bool* NeedHidingOthersProc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayCalculateSkillCamera");

	Params::BP_BtlCameraManagerComponent_C_PlayCalculateSkillCamera Parms{};

	Parms.Btl_Targets = Btl_Targets;

	UObject::ProcessEvent(Func, &Parms);

	if (NeedHidingOthersProc != nullptr)
		*NeedHidingOthersProc = Parms.NeedHidingOthersProc;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayEffectSkillCamera
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlSkillBase_C*               SkillData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABtlActor*                        Enchanter                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::PlayEffectSkillCamera(class ABP_BtlSkillBase_C* SkillData, class ABtlActor* Enchanter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayEffectSkillCamera");

	Params::BP_BtlCameraManagerComponent_C_PlayEffectSkillCamera Parms{};

	Parms.SkillData = SkillData;
	Parms.Enchanter = Enchanter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayCommandCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       CharacterTransform                                     (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::PlayCommandCamera(const struct FTransform& CharacterTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayCommandCamera");

	Params::BP_BtlCameraManagerComponent_C_PlayCommandCamera Parms{};

	Parms.CharacterTransform = std::move(CharacterTransform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.InitializeRootTransform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::InitializeRootTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "InitializeRootTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.InitializeCharaCameraRootTransform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::InitializeCharaCameraRootTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "InitializeCharaCameraRootTransform");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.SetViewTargetToMainCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::SetViewTargetToMainCamera(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "SetViewTargetToMainCamera");

	Params::BP_BtlCameraManagerComponent_C_SetViewTargetToMainCamera Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.LookAtTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   InterpTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::LookAtTarget(float InterpTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "LookAtTarget");

	Params::BP_BtlCameraManagerComponent_C_LookAtTarget Parms{};

	Parms.InterpTime = InterpTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Set Camera Transform
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Trans                                                  (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::Set_Camera_Transform(const struct FTransform& Trans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Set Camera Transform");

	Params::BP_BtlCameraManagerComponent_C_Set_Camera_Transform Parms{};

	Parms.Trans = std::move(Trans);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayAttackCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BtlTargetManager_C*           Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    EnemyCamera                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::PlayAttackCamera(class UBP_BtlTargetManager_C* Targets, bool EnemyCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayAttackCamera");

	Params::BP_BtlCameraManagerComponent_C_PlayAttackCamera Parms{};

	Parms.Targets = Targets;
	Parms.EnemyCamera = EnemyCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.CalcAttackCamera
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BtlTargetManager_C*           Targets_Manager_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::CalcAttackCamera(class UBP_BtlTargetManager_C* Targets_Manager_0, struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "CalcAttackCamera");

	Params::BP_BtlCameraManagerComponent_C_CalcAttackCamera Parms{};

	Parms.Targets_Manager_0 = Targets_Manager_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Hide Obstacle Character
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HideWeak                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::Hide_Obstacle_Character(bool HideWeak)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Hide Obstacle Character");

	Params::BP_BtlCameraManagerComponent_C_Hide_Obstacle_Character Parms{};

	Parms.HideWeak = HideWeak;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.HideInBoxTrace
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Start                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          End                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideStrong                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideRapid                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::HideInBoxTrace(const struct FVector& Start, const struct FVector& End, float Size, bool HideStrong, bool HideRapid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "HideInBoxTrace");

	Params::BP_BtlCameraManagerComponent_C_HideInBoxTrace Parms{};

	Parms.Start = std::move(Start);
	Parms.End = std::move(End);
	Parms.Size = Size;
	Parms.HideStrong = HideStrong;
	Parms.HideRapid = HideRapid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.SetHideOthersMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    CheckEnchanterOnly                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideWeakly                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideRapidly                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::SetHideOthersMode(bool Enable, bool CheckEnchanterOnly, bool HideWeakly, bool HideRapidly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "SetHideOthersMode");

	Params::BP_BtlCameraManagerComponent_C_SetHideOthersMode Parms{};

	Parms.Enable = Enable;
	Parms.CheckEnchanterOnly = CheckEnchanterOnly;
	Parms.HideWeakly = HideWeakly;
	Parms.HideRapidly = HideRapidly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Get Hide Other Cylinder Ratio
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Ratio                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::Get_Hide_Other_Cylinder_Ratio(float* Ratio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Get Hide Other Cylinder Ratio");

	Params::BP_BtlCameraManagerComponent_C_Get_Hide_Other_Cylinder_Ratio Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Ratio != nullptr)
		*Ratio = Parms.Ratio;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.ToggleShowingCameraCollision
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::ToggleShowingCameraCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "ToggleShowingCameraCollision");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.AnimCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::AnimCamera(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "AnimCamera");

	Params::BP_BtlCameraManagerComponent_C_AnimCamera Parms{};

	Parms.Alpha = Alpha;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.AnimProcess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::AnimProcess(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "AnimProcess");

	Params::BP_BtlCameraManagerComponent_C_AnimProcess Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Setup Camera Anim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::Setup_Camera_Anim(float AnimTime_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Setup Camera Anim");

	Params::BP_BtlCameraManagerComponent_C_Setup_Camera_Anim Parms{};

	Parms.AnimTime_0 = AnimTime_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayEnemyStandbyCam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DownContinuedCamera                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::PlayEnemyStandbyCam(bool DownContinuedCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayEnemyStandbyCam");

	Params::BP_BtlCameraManagerComponent_C_PlayEnemyStandbyCam Parms{};

	Parms.DownContinuedCamera = DownContinuedCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Set View Camera 
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Trans                                                  (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::Set_View_Camera_(const struct FTransform& Trans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Set View Camera ");

	Params::BP_BtlCameraManagerComponent_C_Set_View_Camera_ Parms{};

	Parms.Trans = std::move(Trans);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Play Enemy Pre Act Cam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBtlTargetsManagerComponent*      Btl_Targets                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::Play_Enemy_Pre_Act_Cam(class UBtlTargetsManagerComponent* Btl_Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Play Enemy Pre Act Cam");

	Params::BP_BtlCameraManagerComponent_C_Play_Enemy_Pre_Act_Cam Parms{};

	Parms.Btl_Targets = Btl_Targets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.RefleshAnim
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::RefleshAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "RefleshAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.UseBackShotCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Backshot                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::UseBackShotCamera(bool* Backshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "UseBackShotCamera");

	Params::BP_BtlCameraManagerComponent_C_UseBackShotCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Backshot != nullptr)
		*Backshot = Parms.Backshot;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.UseBackShotWholeCamera
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Backshot                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::UseBackShotWholeCamera(bool* Backshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "UseBackShotWholeCamera");

	Params::BP_BtlCameraManagerComponent_C_UseBackShotWholeCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Backshot != nullptr)
		*Backshot = Parms.Backshot;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.CheckUseGroupCam
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    UseWholeSkill                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::CheckUseGroupCam(bool* Result, bool* UseWholeSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "CheckUseGroupCam");

	Params::BP_BtlCameraManagerComponent_C_CheckUseGroupCam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (UseWholeSkill != nullptr)
		*UseWholeSkill = Parms.UseWholeSkill;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Hide Characters for Action
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABtlActor*>                Characters                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ABtlActor*                        Enchanter                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABtlActor*>                Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    CompletlyHide                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Rapid                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    WeaklyHide                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ExceptBoss                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::Hide_Characters_for_Action(TArray<class ABtlActor*>& Characters, class ABtlActor* Enchanter, TArray<class ABtlActor*>& Targets, bool CompletlyHide, bool Rapid, bool WeaklyHide, bool ExceptBoss)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Hide Characters for Action");

	Params::BP_BtlCameraManagerComponent_C_Hide_Characters_for_Action Parms{};

	Parms.Characters = std::move(Characters);
	Parms.Enchanter = Enchanter;
	Parms.Targets = std::move(Targets);
	Parms.CompletlyHide = CompletlyHide;
	Parms.Rapid = Rapid;
	Parms.WeaklyHide = WeaklyHide;
	Parms.ExceptBoss = ExceptBoss;

	UObject::ProcessEvent(Func, &Parms);

	Characters = std::move(Parms.Characters);
	Targets = std::move(Parms.Targets);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.HideOtherEnemies
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CompletlyHide                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Rapid                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    WeaklyHide                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::HideOtherEnemies(bool CompletlyHide, bool Rapid, bool WeaklyHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "HideOtherEnemies");

	Params::BP_BtlCameraManagerComponent_C_HideOtherEnemies Parms{};

	Parms.CompletlyHide = CompletlyHide;
	Parms.Rapid = Rapid;
	Parms.WeaklyHide = WeaklyHide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.HideOtherEnemiesWithoutBoss
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CompletlyHide                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Rapid                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    WeaklyHide                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::HideOtherEnemiesWithoutBoss(bool CompletlyHide, bool Rapid, bool WeaklyHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "HideOtherEnemiesWithoutBoss");

	Params::BP_BtlCameraManagerComponent_C_HideOtherEnemiesWithoutBoss Parms{};

	Parms.CompletlyHide = CompletlyHide;
	Parms.Rapid = Rapid;
	Parms.WeaklyHide = WeaklyHide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.HideOtherPlayers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CompletlyHide                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideExcludesTargets                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::HideOtherPlayers(bool CompletlyHide, bool HideExcludesTargets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "HideOtherPlayers");

	Params::BP_BtlCameraManagerComponent_C_HideOtherPlayers Parms{};

	Parms.CompletlyHide = CompletlyHide;
	Parms.HideExcludesTargets = HideExcludesTargets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.HideInSphereTrace
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideStrong                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideIncludesTargets                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::HideInSphereTrace(const struct FVector& Location, float Size, bool HideStrong, bool HideIncludesTargets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "HideInSphereTrace");

	Params::BP_BtlCameraManagerComponent_C_HideInSphereTrace Parms{};

	Parms.Location = std::move(Location);
	Parms.Size = Size;
	Parms.HideStrong = HideStrong;
	Parms.HideIncludesTargets = HideIncludesTargets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlaySummonCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BtlTargetManager_C*           TargetMG                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::PlaySummonCamera(class UBP_BtlTargetManager_C* TargetMG)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlaySummonCamera");

	Params::BP_BtlCameraManagerComponent_C_PlaySummonCamera Parms{};

	Parms.TargetMG = TargetMG;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayStandbyCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::PlayStandbyCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayStandbyCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayAlloutDamageCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BtlTargetManager_C*           Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::PlayAlloutDamageCamera(class UBP_BtlTargetManager_C* Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayAlloutDamageCamera");

	Params::BP_BtlCameraManagerComponent_C_PlayAlloutDamageCamera Parms{};

	Parms.Targets = Targets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayHoldupCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BtlTargetManager_C*           Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::PlayHoldupCamera(class UBP_BtlTargetManager_C* Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayHoldupCamera");

	Params::BP_BtlCameraManagerComponent_C_PlayHoldupCamera Parms{};

	Parms.Targets = Targets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.CheckUseAllTargetsCam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseAllTargetsSkill                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::CheckUseAllTargetsCam(bool* UseAllTargetsSkill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "CheckUseAllTargetsCam");

	Params::BP_BtlCameraManagerComponent_C_CheckUseAllTargetsCam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UseAllTargetsSkill != nullptr)
		*UseAllTargetsSkill = Parms.UseAllTargetsSkill;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayItemUsingCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBtlTargetsManagerComponent*      Btl_Targets                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::PlayItemUsingCamera(class UBtlTargetsManagerComponent* Btl_Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayItemUsingCamera");

	Params::BP_BtlCameraManagerComponent_C_PlayItemUsingCamera Parms{};

	Parms.Btl_Targets = Btl_Targets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayEnemyEscapeCam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::PlayEnemyEscapeCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayEnemyEscapeCam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.StopCameraAnimation
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::StopCameraAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "StopCameraAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayPlayerSelectCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::PlayPlayerSelectCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayPlayerSelectCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayPlayerAllSelectCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::PlayPlayerAllSelectCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayPlayerAllSelectCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Show Hidden Character
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::Show_Hidden_Character()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Show Hidden Character");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.GetCharaCameraRoot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           CharaCameraRoot_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::GetCharaCameraRoot(class AActor** CharaCameraRoot_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "GetCharaCameraRoot");

	Params::BP_BtlCameraManagerComponent_C_GetCharaCameraRoot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CharaCameraRoot_0 != nullptr)
		*CharaCameraRoot_0 = Parms.CharaCameraRoot_0;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.CheckBackshotDisableTargets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Disable                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::CheckBackshotDisableTargets(bool* Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "CheckBackshotDisableTargets");

	Params::BP_BtlCameraManagerComponent_C_CheckBackshotDisableTargets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Disable != nullptr)
		*Disable = Parms.Disable;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.HideOthersInPerformanceLine
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BtlTargetManager_C*           TargetManager                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HideStrong                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HideRapid                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::HideOthersInPerformanceLine(class UBP_BtlTargetManager_C* TargetManager, bool HideStrong, bool HideRapid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "HideOthersInPerformanceLine");

	Params::BP_BtlCameraManagerComponent_C_HideOthersInPerformanceLine Parms{};

	Parms.TargetManager = TargetManager;
	Parms.HideStrong = HideStrong;
	Parms.HideRapid = HideRapid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.CheckAttackShortRange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBtlTargetsManagerComponent*      TargetManager                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ShortRange                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::CheckAttackShortRange(class UBtlTargetsManagerComponent* TargetManager, bool* ShortRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "CheckAttackShortRange");

	Params::BP_BtlCameraManagerComponent_C_CheckAttackShortRange Parms{};

	Parms.TargetManager = TargetManager;

	UObject::ProcessEvent(Func, &Parms);

	if (ShortRange != nullptr)
		*ShortRange = Parms.ShortRange;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Check Target Is Enemy
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBtlTargetsManagerComponent*      Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enemy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::Check_Target_Is_Enemy(class UBtlTargetsManagerComponent* Targets, bool* Enemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Check Target Is Enemy");

	Params::BP_BtlCameraManagerComponent_C_Check_Target_Is_Enemy Parms{};

	Parms.Targets = Targets;

	UObject::ProcessEvent(Func, &Parms);

	if (Enemy != nullptr)
		*Enemy = Parms.Enemy;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Check Target Is Enemy Boss
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBtlTargetsManagerComponent*      TargetsManager                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Enemy                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::Check_Target_Is_Enemy_Boss(class UBtlTargetsManagerComponent* TargetsManager, bool* Enemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Check Target Is Enemy Boss");

	Params::BP_BtlCameraManagerComponent_C_Check_Target_Is_Enemy_Boss Parms{};

	Parms.TargetsManager = TargetsManager;

	UObject::ProcessEvent(Func, &Parms);

	if (Enemy != nullptr)
		*Enemy = Parms.Enemy;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.HideAllEnemies
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CompletlyHide                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Rapid                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    WeaklyHide                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::HideAllEnemies(bool CompletlyHide, bool Rapid, bool WeaklyHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "HideAllEnemies");

	Params::BP_BtlCameraManagerComponent_C_HideAllEnemies Parms{};

	Parms.CompletlyHide = CompletlyHide;
	Parms.Rapid = Rapid;
	Parms.WeaklyHide = WeaklyHide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.HidePlayerInCameraEnchanterCircle
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       CameraTrans                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// class UBtlTargetsManagerComponent*      BtlTargets                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::HidePlayerInCameraEnchanterCircle(const struct FTransform& CameraTrans, class UBtlTargetsManagerComponent* BtlTargets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "HidePlayerInCameraEnchanterCircle");

	Params::BP_BtlCameraManagerComponent_C_HidePlayerInCameraEnchanterCircle Parms{};

	Parms.CameraTrans = std::move(CameraTrans);
	Parms.BtlTargets = BtlTargets;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.HideAllPlayers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::HideAllPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "HideAllPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.HidingProcess
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::HidingProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "HidingProcess");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayPlayerWholeCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::PlayPlayerWholeCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayPlayerWholeCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayPlayerEscapeCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::PlayPlayerEscapeCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayPlayerEscapeCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayAttackCharaCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BtlTargetManager_C*           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Cut                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::PlayAttackCharaCamera(class UBP_BtlTargetManager_C* Target, int32 Cut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayAttackCharaCamera");

	Params::BP_BtlCameraManagerComponent_C_PlayAttackCharaCamera Parms{};

	Parms.Target = Target;
	Parms.Cut = Cut;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.ProcWithCamChange
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::ProcWithCamChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "ProcWithCamChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.RequestRelocationWhenCamChange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABtlActor*                        MainCharacter_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    TurntableForceReset                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::RequestRelocationWhenCamChange(class UBtlCoreComponent* BtlCore, class ABtlActor* MainCharacter_0, bool TurntableForceReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "RequestRelocationWhenCamChange");

	Params::BP_BtlCameraManagerComponent_C_RequestRelocationWhenCamChange Parms{};

	Parms.BtlCore = BtlCore;
	Parms.MainCharacter_0 = MainCharacter_0;
	Parms.TurntableForceReset = TurntableForceReset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.ResetRelocationRequest
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::ResetRelocationRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "ResetRelocationRequest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.SaveDefaultParam
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::SaveDefaultParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "SaveDefaultParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.RestoreToDefaultParam
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::RestoreToDefaultParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "RestoreToDefaultParam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.SyncEventCamToSystemCam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::SyncEventCamToSystemCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "SyncEventCamToSystemCam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlayAnalyzeCamera
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BtlTargetManager_C*           Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    InitialCamera                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    PlayFromLeft                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::PlayAnalyzeCamera(class UBP_BtlTargetManager_C* Targets, bool InitialCamera, bool PlayFromLeft)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlayAnalyzeCamera");

	Params::BP_BtlCameraManagerComponent_C_PlayAnalyzeCamera Parms{};

	Parms.Targets = Targets;
	Parms.InitialCamera = InitialCamera;
	Parms.PlayFromLeft = PlayFromLeft;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.Coordinate Backshot Persona Hiding 
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::Coordinate_Backshot_Persona_Hiding_()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "Coordinate Backshot Persona Hiding ");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.ClearHidingMode
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::ClearHidingMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "ClearHidingMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.PlaySequenceCameraWithBaseTrans
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              Sequence_Actor                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Playing_Transform                                      (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    Loop                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ACineCameraActor*                 UsingOtherMainCamera                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::PlaySequenceCameraWithBaseTrans(class ALevelSequenceActor* Sequence_Actor, const struct FTransform& Playing_Transform, bool Loop, class ACineCameraActor* UsingOtherMainCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "PlaySequenceCameraWithBaseTrans");

	Params::BP_BtlCameraManagerComponent_C_PlaySequenceCameraWithBaseTrans Parms{};

	Parms.Sequence_Actor = Sequence_Actor;
	Parms.Playing_Transform = std::move(Playing_Transform);
	Parms.Loop = Loop;
	Parms.UsingOtherMainCamera = UsingOtherMainCamera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.HideEnemiesWithoutEnchanter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CompletlyHide                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Rapid                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    WeaklyHide                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlCameraManagerComponent_C::HideEnemiesWithoutEnchanter(bool CompletlyHide, bool Rapid, bool WeaklyHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "HideEnemiesWithoutEnchanter");

	Params::BP_BtlCameraManagerComponent_C_HideEnemiesWithoutEnchanter Parms{};

	Parms.CompletlyHide = CompletlyHide;
	Parms.Rapid = Rapid;
	Parms.WeaklyHide = WeaklyHide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.CallEnemiesFinalizeSummonFadeinProc
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::CallEnemiesFinalizeSummonFadeinProc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "CallEnemiesFinalizeSummonFadeinProc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.ProcFadein
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::ProcFadein()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "ProcFadein");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.RequestFadeinWhenCamChange
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::RequestFadeinWhenCamChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "RequestFadeinWhenCamChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.GetCriticalAttackUpshotCamera
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ACineCameraActor*                 BCD_Camera                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlCameraManagerComponent_C::GetCriticalAttackUpshotCamera(class ACineCameraActor** BCD_Camera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "GetCriticalAttackUpshotCamera");

	Params::BP_BtlCameraManagerComponent_C_GetCriticalAttackUpshotCamera Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BCD_Camera != nullptr)
		*BCD_Camera = Parms.BCD_Camera;
}


// Function BP_BtlCameraManagerComponent.BP_BtlCameraManagerComponent_C.ResetCalcCamera
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BtlCameraManagerComponent_C::ResetCalcCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlCameraManagerComponent_C", "ResetCalcCamera");

	UObject::ProcessEvent(Func, nullptr);
}

}

