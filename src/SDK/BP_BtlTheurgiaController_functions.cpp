#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlTheurgiaController

#include "Basic.hpp"

#include "BP_BtlTheurgiaController_classes.hpp"
#include "BP_BtlTheurgiaController_parameters.hpp"


namespace SDK
{

// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.HasFinishedLoading__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::HasFinishedLoading__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "HasFinishedLoading__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.HasFinishedSequence__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::HasFinishedSequence__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "HasFinishedSequence__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.ExecuteUbergraph_BP_BtlTheurgiaController
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlTheurgiaController_C::ExecuteUbergraph_BP_BtlTheurgiaController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "ExecuteUbergraph_BP_BtlTheurgiaController");

	Params::BP_BtlTheurgiaController_C_ExecuteUbergraph_BP_BtlTheurgiaController Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.On Play Sequence
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::On_Play_Sequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "On Play Sequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.Has Finished Sequence
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::Has_Finished_Sequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "Has Finished Sequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.On Load Resource
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::On_Load_Resource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "On Load Resource");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlTheurgiaController_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "ReceiveTick");

	Params::BP_BtlTheurgiaController_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BtlTheurgiaController_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.OnLoaded_419743374F851E2A1AB942B6DA4C7D5F
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlTheurgiaController_C::OnLoaded_419743374F851E2A1AB942B6DA4C7D5F(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "OnLoaded_419743374F851E2A1AB942B6DA4C7D5F");

	Params::BP_BtlTheurgiaController_C_OnLoaded_419743374F851E2A1AB942B6DA4C7D5F Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.OnLoaded_48C72DAE4B6AFD3C5C57A5A22F41F554
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlTheurgiaController_C::OnLoaded_48C72DAE4B6AFD3C5C57A5A22F41F554(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "OnLoaded_48C72DAE4B6AFD3C5C57A5A22F41F554");

	Params::BP_BtlTheurgiaController_C_OnLoaded_48C72DAE4B6AFD3C5C57A5A22F41F554 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.Setup
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::Setup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "Setup");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.AllocateMembers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::AllocateMembers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "AllocateMembers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.PlayTheurgia
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::PlayTheurgia()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "PlayTheurgia");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.Clear
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.HideOtherCharacters
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::HideOtherCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "HideOtherCharacters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.GetRootTrans
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   XOffset                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OutTrans                                               (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_BtlTheurgiaController_C::GetRootTrans(float XOffset, struct FTransform* OutTrans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "GetRootTrans");

	Params::BP_BtlTheurgiaController_C_GetRootTrans Parms{};

	Parms.XOffset = XOffset;

	UObject::ProcessEvent(Func, &Parms);

	if (OutTrans != nullptr)
		*OutTrans = std::move(Parms.OutTrans);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.LocateStartPosition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::LocateStartPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "LocateStartPosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.TurnigPersona
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::TurnigPersona()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "TurnigPersona");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.RestorePersona
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::RestorePersona()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "RestorePersona");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.RestoreTheurgia
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::RestoreTheurgia()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "RestoreTheurgia");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.SetupBGM
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::SetupBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "SetupBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.RestoreBGM
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::RestoreBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "RestoreBGM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.SetupTheurgiaSkillPerformance
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::SetupTheurgiaSkillPerformance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "SetupTheurgiaSkillPerformance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.Choice Seq to Play
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class ULevelSequence>    SequenceToPlay                                         (Parm, OutParm, HasGetValueTypeHash)

void ABP_BtlTheurgiaController_C::Choice_Seq_to_Play(TSoftObjectPtr<class ULevelSequence>* SequenceToPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "Choice Seq to Play");

	Params::BP_BtlTheurgiaController_C_Choice_Seq_to_Play Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SequenceToPlay != nullptr)
		*SequenceToPlay = Parms.SequenceToPlay;
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.SetEquipVisible
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::SetEquipVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "SetEquipVisible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.TurningCharacter
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::TurningCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "TurningCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.RestoreEnemy
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::RestoreEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "RestoreEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.RestoreCharacter
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlTheurgiaController_C::RestoreCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "RestoreCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTheurgiaController.BP_BtlTheurgiaController_C.AdjustEnemyTeammatesRotate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FRotator                         InRotate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FRotator                         AdjustedRotate                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlTheurgiaController_C::AdjustEnemyTeammatesRotate(const struct FRotator& InRotate, struct FRotator* AdjustedRotate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTheurgiaController_C", "AdjustEnemyTeammatesRotate");

	Params::BP_BtlTheurgiaController_C_AdjustEnemyTeammatesRotate Parms{};

	Parms.InRotate = std::move(InRotate);

	UObject::ProcessEvent(Func, &Parms);

	if (AdjustedRotate != nullptr)
		*AdjustedRotate = std::move(Parms.AdjustedRotate);
}

}

