#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Xrd777

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SoundManager_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CharacterBase_structs.hpp"
#include "MovieScene_structs.hpp"


namespace SDK
{

// Enum xrd777.EAppCharCategoryType
// NumValues: 0x0005
enum class EAppCharCategoryType : uint8
{
	None                                     = 0,
	MainCharacter                            = 1,
	SubCharacter                             = 2,
	NpcCharacter                             = 3,
	EAppCharCategoryType_MAX                 = 4,
};

// Enum xrd777.ECharacterSimpleLipsAnimAppStateType
// NumValues: 0x0003
enum class ECharacterSimpleLipsAnimAppStateType : uint8
{
	StartSpeaking                            = 0,
	StopSpeaking                             = 1,
	ECharacterSimpleLipsAnimAppStateType_MAX = 2,
};

// Enum xrd777.EAtlLevelSequenceActorType
// NumValues: 0x0007
enum class EAtlLevelSequenceActorType : uint8
{
	UE4Default                               = 0,
	AtlusEvent                               = 1,
	AtlusBattle                              = 2,
	AtlusBattleEvent                         = 3,
	AtlusFieldEvent                          = 4,
	AtlusEventTemplateFieldEvent             = 5,
	EAtlLevelSequenceActorType_MAX           = 6,
};

// Enum xrd777.EDungeonObjHitEvent
// NumValues: 0x0004
enum class EDungeonObjHitEvent : uint8
{
	In                                       = 0,
	Out                                      = 1,
	Action                                   = 2,
	EDungeonObjHitEvent_MAX                  = 3,
};

// Enum xrd777.ELipSyncAppStateType
// NumValues: 0x0003
enum class ELipSyncAppStateType : uint8
{
	StartSpeaking                            = 0,
	StopSpeaking                             = 1,
	ELipSyncAppStateType_MAX                 = 2,
};

// Enum xrd777.EAppPauseObjectFlag
// NumValues: 0x000A
enum class EAppPauseObjectFlag : uint8
{
	Unknown                                  = 0,
	CampUI                                   = 1,
	CharacterModel                           = 2,
	FieldLocal                               = 4,
	SystemUI                                 = 8,
	FacilityUI                               = 16,
	FieldSound                               = 32,
	FieldCrowd                               = 64,
	Always                                   = 255,
	EAppPauseObjectFlag_MAX                  = 256,
};

// Enum xrd777.EUIBLEND_STATE_TYPE
// NumValues: 0x000F
enum class EUIBLEND_STATE_TYPE : uint8
{
	EUI_Defult_Value                         = 0,
	UI_DEFAULT                               = 0,
	UI_MUL                                   = 1,
	UI_ADD                                   = 2,
	UI_CREATE_MASK                           = 3,
	UI_CREATE_MASK_INV                       = 4,
	UI_DRAW_MIN_ALPHA                        = 5,
	UI_USE_MASK_DRAW                         = 6,
	UI_USE_MASK_ADD_DRAW                     = 7,
	UI_ONE                                   = 8,
	UI_MINIMAP_MASK                          = 9,
	UI_DEFAULT_AND_NONE_ALPHA                = 10,
	UI_MUL_AND_NONE_ALPHA                    = 11,
	UI_ADD_AND_NONE_ALPHA                    = 12,
	EUIBLEND_STATE_MAX                       = 13,
};

// Enum xrd777.EUI_DRAW_POINT
// NumValues: 0x000A
enum class EUI_DRAW_POINT : uint8
{
	UI_DRAW_LEFT_TOP                         = 0,
	UI_DRAW_LEFT_CENTER                      = 1,
	UI_DRAW_LEFT_BOTTOM                      = 2,
	UI_DRAW_CENTER_TOP                       = 3,
	UI_DRAW_CENTER_CENTER                    = 4,
	UI_DRAW_CENTER_BOTTOM                    = 5,
	UI_DRAW_RIGHT_TOP                        = 6,
	UI_DRAW_RIGHT_CENTER                     = 7,
	UI_DRAW_RIGHT_BOTTOM                     = 8,
	UI_DRAW_MAX                              = 9,
};

// Enum xrd777.EUIFontStyle
// NumValues: 0x0006
enum class EUIFontStyle : uint8
{
	EUI_Defult_Value                         = 0,
	UI_FONT_STYLE_NORMAL_SSMALL              = 3,
	UI_FONT_STYLE_NORMAL_SMALL               = 0,
	UI_FONT_STYLE_NORMAL_MEDIUM              = 1,
	UI_FONT_STYLE_NORMAL_LARGE               = 2,
	EUIFontStyle_MAX                         = 4,
};

// Enum xrd777.EUIBlendFactor
// NumValues: 0x0014
enum class EUIBlendFactor : uint8
{
	EUI_Defult_Value                         = 0,
	UI_BF_Zero                               = 0,
	UI_BF_One                                = 1,
	UI_BF_SourceColor                        = 2,
	UI_BF_InverseSourceColor                 = 3,
	UI_BF_SourceAlpha                        = 4,
	UI_BF_InverseSourceAlpha                 = 5,
	UI_BF_DestAlpha                          = 6,
	UI_BF_InverseDestAlpha                   = 7,
	UI_BF_DestColor                          = 8,
	UI_BF_InverseDestColor                   = 9,
	UI_BF_ConstantBlendFactor                = 10,
	UI_BF_InverseConstantBlendFactor         = 11,
	UI_BF_Source1Color                       = 12,
	UI_BF_InverseSource1Color                = 13,
	UI_BF_Source1Alpha                       = 14,
	UI_BF_InverseSource1Alpha                = 15,
	UI_EBlendFactor_Num                      = 16,
	UI_EBlendFactor_NumBits                  = 4,
	EUIBlendFactor_MAX                       = 17,
};

// Enum xrd777.EUIBlendOperation
// NumValues: 0x0009
enum class EUIBlendOperation : uint8
{
	EUI_Defult_Value                         = 0,
	UI_BO_Add                                = 0,
	UI_BO_Subtract                           = 1,
	UI_BO_Min                                = 2,
	UI_BO_Max                                = 3,
	UI_BO_ReverseSubtract                    = 4,
	UI_EBlendOperation_Num                   = 5,
	UI_EBlendOperation_NumBits               = 3,
	EUIBlendOperation_MAX                    = 6,
};

// Enum xrd777.EUIOTPRESET_BLEND_TYPE
// NumValues: 0x000C
enum class EUIOTPRESET_BLEND_TYPE : uint8
{
	EUI_Defult_Value                         = 0,
	UI_OT_PRESET_BLEND_OPAQUE                = 0,
	UI_OT_PRESET_BLEND_SEMITRANS             = 1,
	UI_OT_PRESET_BLEND_ADDTRANS              = 2,
	UI_OT_PRESET_BLEND_SUBTRANS              = 3,
	UI_OT_PRESET_BLEND_MULTRANS              = 4,
	UI_OT_PRESET_BLEND_MUL2TRANS             = 5,
	UI_OT_PRESET_BLEND_ADVANCED              = 6,
	UI_OT_PRESET_BLEND_MAKE_MASK             = 7,
	UI_OT_PRESET_BLEND_MAKE_MASK_MUL         = 8,
	UI_OT_PRESET_BLEND_DRAW_ONLY_MASK        = 9,
	EUIOTPRESET_BLEND_MAX                    = 10,
};

// Enum xrd777.appCalculationType
// NumValues: 0x000C
enum class EAppCalculationType : uint8
{
	Default_value                            = 0,
	LINEAR                                   = 0,
	DEC                                      = 1,
	ACC                                      = 2,
	COS2                                     = 3,
	H_DEC                                    = 4,
	H_ACC                                    = 5,
	ACC_DEC                                  = 6,
	SIN_2                                    = 7,
	AD_SIN                                   = 8,
	LOOP                                     = 9,
	AppCalculationType_MAX                   = 10,
};

// Enum xrd777.EDrawConfigListType
// NumValues: 0x000C
enum class EDrawConfigListType : uint8
{
	NONE                                     = 0,
	BUTTON                                   = 1,
	SOUNT_OUTPUT                             = 2,
	GRAPHIC_QUALITY                          = 3,
	RENDERING_SCALE                          = 4,
	SHADOW_QUALITY                           = 5,
	FRAMELATE                                = 6,
	RESOLUTION                               = 7,
	SCREEN_MODE                              = 8,
	MONITOR                                  = 9,
	KEY_CONFIG                               = 10,
	EDrawConfigListType_MAX                  = 11,
};

// Enum xrd777.EDrawConfigParamType
// NumValues: 0x0007
enum class EDrawConfigParamType : uint8
{
	DCPT_FLAG                                = 0,
	DCPT_VALUE                               = 1,
	DCPT_LANGUAGE                            = 2,
	DCPT_SELECT                              = 3,
	DCPT_BGM                                 = 4,
	DCPT_LIST                                = 5,
	DCPT_MAX                                 = 6,
};

// Enum xrd777.ECmpLayoutConfig
// NumValues: 0x0007
enum class ECmpLayoutConfig : uint8
{
	PLAYLIST_POS                             = 0,
	SET_POS                                  = 1,
	INFO_POS                                 = 2,
	INFO_TEXT_POS                            = 3,
	BUTTON_TEXT_POS                          = 4,
	AUDIO_DEVICE_BASELINE                    = 5,
	Max                                      = 6,
};

// Enum xrd777.ECmpLayoutConfigText
// NumValues: 0x0008
enum class ECmpLayoutConfigText : uint8
{
	DETAIL_TEXT_COLLISION                    = 0,
	ITEM_TEXT_COLLISION                      = 1,
	BUTTON_TEXT_COLLISION                    = 2,
	CHOICE_TEXT_COLLISION                    = 3,
	CHOICE_TEXT_POS_Y                        = 4,
	BGM_TEXT_COLLISION                       = 5,
	SET_BGM_TEXT_COLLISION                   = 6,
	Max                                      = 7,
};

// Enum xrd777.ESaveLoadDateLayout
// NumValues: 0x0007
enum class ESaveLoadDateLayout : uint8
{
	MONTH                                    = 0,
	DAY_1_DIG                                = 1,
	DAY_2_DIG                                = 2,
	SEL_MONTH                                = 3,
	SEL_DAY_1_DIG                            = 4,
	SEL_DAY_2_DIG                            = 5,
	MAX                                      = 6,
};

// Enum xrd777.ESaveLoadLayout2
// NumValues: 0x0006
enum class ESaveLoadLayout2 : uint8
{
	CLEAR_DATA                               = 0,
	NETWORK_NOT_SET                          = 1,
	NETWORK_DISCONNECTED                     = 2,
	NETWORK_NOT_SET_SEL                      = 3,
	NETWORK_DISCONNECTED_SEL                 = 4,
	MAX                                      = 5,
};

// Enum xrd777.ESaveLoadLayout
// NumValues: 0x000E
enum class ESaveLoadLayout : uint8
{
	SAVE_HELP                                = 0,
	SAVE_HELP_TEXT                           = 1,
	LOAD_HELP                                = 2,
	LOAD_HELP_TEXT                           = 3,
	ROLL_BACK_HELP                           = 4,
	ROLL_BACK_HELP_TEXT                      = 5,
	LOCATION_TEXTCOL                         = 6,
	LV_POS                                   = 7,
	LVNUM_POS                                = 8,
	LVNUM_10POS                              = 9,
	PL_POS                                   = 10,
	PL_TEXTCOL                               = 11,
	PL_LF_THRESHOLD                          = 12,
	MAX                                      = 13,
};

// Enum xrd777.ESaveLoadLayoutAstrea
// NumValues: 0x0004
enum class ESaveLoadLayoutAstrea : uint8
{
	INHERITANCE_HELP                         = 0,
	INHERITANCE_HELP_TEXT                    = 1,
	UNKNOWN_DAY_OFFSET_POS                   = 2,
	MAX                                      = 3,
};

// Enum xrd777.ESaveLoadTimeZoneLayoutAstrea
// NumValues: 0x0003
enum class ESaveLoadTimeZoneLayoutAstrea : uint8
{
	UNKNOWN                                  = 0,
	SEL_UNKNOWN                              = 1,
	MAX                                      = 2,
};

// Enum xrd777.ESaveDrawOpenType
// NumValues: 0x0004
enum class ESaveDrawOpenType : uint8
{
	TYPE_FIELD                               = 0,
	TYPE_CAMP                                = 1,
	TYPE_TITLE                               = 2,
	TYPE_MAX                                 = 3,
};

// Enum xrd777.EAddContentEntitlementCategory
// NumValues: 0x0005
enum class EAddContentEntitlementCategory : uint8
{
	Blank                                    = 0,
	Bundle                                   = 1,
	Unlock                                   = 2,
	Entitlement                              = 3,
	EAddContentEntitlementCategory_MAX       = 4,
};

// Enum xrd777.EEventAnimID
// NumValues: 0x003A
enum class EEventAnimID : uint8
{
	BLANK                                    = 0,
	Main                                     = 1,
	Neutral                                  = 2,
	Walk                                     = 3,
	Run                                      = 4,
	TalkR                                    = 5,
	TalkMainR                                = 6,
	SatN                                     = 7,
	SatMain                                  = 8,
	SatTalkR                                 = 9,
	TurnL90                                  = 10,
	TurnR90                                  = 11,
	TurnL180                                 = 12,
	TurnR180                                 = 13,
	NodN                                     = 14,
	NeckSwingN                               = 15,
	BagL                                     = 16,
	TalkR_17                                 = 17,
	Main_18                                  = 18,
	TalkR_19                                 = 19,
	MainTag                                  = 20,
	NeutralTag                               = 21,
	WalkTag                                  = 22,
	RunTag                                   = 23,
	TalkRTag                                 = 24,
	TalkMainRTag                             = 25,
	SurprisedTag                             = 26,
	AngryTag                                 = 27,
	TroubleTag                               = 28,
	SadTag                                   = 29,
	CryTag                                   = 30,
	LaughTag                                 = 31,
	GladTag                                  = 32,
	StandingActionATag                       = 33,
	SatActionTag                             = 34,
	SatNTag                                  = 35,
	SatMainStartTag                          = 36,
	SatMainTag                               = 37,
	SatMainEndTag                            = 38,
	SatAStartTag                             = 39,
	SatATag                                  = 40,
	SatAEndTag                               = 41,
	SatBStartTag                             = 42,
	SatBTag                                  = 43,
	SatBEndTag                               = 44,
	StandTag                                 = 45,
	SitTag                                   = 46,
	StandingAStartTag                        = 47,
	StandingATag                             = 48,
	StandingAEndTag                          = 49,
	StandingBStartTag                        = 50,
	StandingBTag                             = 51,
	StandingBEndTag                          = 52,
	StandingActionBTag                       = 53,
	TalkSatNTag                              = 54,
	EVC0321                                  = 60,
	EVC0322                                  = 61,
	EEventAnimID_MAX                         = 62,
};

// Enum xrd777.EDungeonAnimID
// NumValues: 0x001F
enum class EDungeonAnimID : uint8
{
	BLANK                                    = 0,
	Idel                                     = 1,
	Walk                                     = 2,
	Talk                                     = 3,
	SatMain                                  = 4,
	SatTalk                                  = 5,
	SatA                                     = 6,
	SatB                                     = 7,
	SatN                                     = 8,
	TurnL90                                  = 9,
	TurnR90                                  = 10,
	TurnL180                                 = 11,
	TurnR180                                 = 12,
	Run                                      = 13,
	Dash                                     = 14,
	AttackA                                  = 50,
	AttackB                                  = 51,
	AttackAssault                            = 52,
	DashStop                                 = 53,
	DashStopTurn                             = 54,
	AttackDashA                              = 55,
	DoorOpen00                               = 115,
	PersonalAction1                          = 200,
	PersonalAction2                          = 201,
	PersonalAction3                          = 202,
	PersonalAction4                          = 203,
	PersonalAction5                          = 204,
	PersonalAction6                          = 205,
	TurnL                                    = 210,
	TurnR                                    = 211,
	EDungeonAnimID_MAX                       = 212,
};

// Enum xrd777.ECommonAnimID
// NumValues: 0x0047
enum class ECommonAnimID : uint8
{
	BLANK                                    = 0,
	Idel                                     = 1,
	Walk                                     = 2,
	Talk                                     = 3,
	SatMain                                  = 4,
	SatTalk                                  = 5,
	SatA                                     = 6,
	SatB                                     = 7,
	SatN                                     = 8,
	TurnL90                                  = 9,
	TurnR90                                  = 10,
	TurnL180                                 = 11,
	TurnR180                                 = 12,
	PhoneIdel                                = 13,
	PhoneWalk                                = 14,
	PhoneTalk                                = 15,
	PhoneSatMain                             = 16,
	PhoneSatTalk                             = 17,
	StrongIdel                               = 18,
	StrongWalk                               = 19,
	StrongTalk                               = 20,
	StrongSatMain                            = 21,
	StrongSatTalk                            = 22,
	WeakIdel                                 = 23,
	WeakWalk                                 = 24,
	WeakTalk                                 = 25,
	WeakSatMain                              = 26,
	WeakSatTalk                              = 27,
	FldAction1                               = 50,
	FldAction2                               = 51,
	FldAction3                               = 52,
	FldAction4                               = 53,
	FldAction5                               = 54,
	FldAction6                               = 55,
	FldAction7                               = 56,
	FldAction8                               = 57,
	FldAction9                               = 58,
	FldAction10                              = 59,
	FldAction11                              = 60,
	FldAction12                              = 61,
	FldAction13                              = 62,
	FldAction14                              = 63,
	FldAction15                              = 64,
	FldAction16                              = 65,
	FldAction17                              = 66,
	FldAction18                              = 67,
	FldAction19                              = 68,
	TalkMainR                                = 80,
	TalkMainL                                = 81,
	KageIdle                                 = 100,
	DoorOpen1                                = 115,
	DoorOpen2                                = 116,
	DoorOpen3                                = 117,
	DoorOpen4                                = 118,
	DoorOpen5                                = 119,
	DoorOpen6                                = 120,
	DoorOpen7                                = 121,
	DoorOpen8                                = 122,
	DoorOpen9                                = 123,
	DoorOpen10                               = 124,
	DoorOpen11                               = 125,
	DoorOpen12                               = 126,
	PersonalAction1                          = 200,
	PersonalAction2                          = 201,
	PersonalAction3                          = 202,
	PersonalAction4                          = 203,
	PersonalAction5                          = 204,
	PersonalAction6                          = 205,
	TurnL                                    = 210,
	TurnR                                    = 211,
	ECommonAnimID_MAX                        = 212,
};

// Enum xrd777.EAnimPackID
// NumValues: 0x0006
enum class EAnimPackID : uint8
{
	None                                     = 0,
	Common                                   = 1,
	Dungeon                                  = 2,
	Combine                                  = 3,
	Event                                    = 4,
	EAnimPackID_MAX                          = 5,
};

// Enum xrd777.EAppCharAnimSlot
// NumValues: 0x0003
enum class EAppCharAnimSlot : uint8
{
	Default                                  = 0,
	Event                                    = 1,
	Max                                      = 2,
};

// Enum xrd777.EAppCharWeaponType
// NumValues: 0x0004
enum class EAppCharWeaponType : uint8
{
	None                                     = 0,
	Battle                                   = 1,
	Field                                    = 2,
	EAppCharWeaponType_MAX                   = 3,
};

// Enum xrd777.EAppCharState
// NumValues: 0x0004
enum class EAppCharState : uint32
{
	None                                     = 0,
	Move                                     = 1,
	MoveStop                                 = 2,
	EAppCharState_MAX                        = 3,
};

// Enum xrd777.EAppCharBagAnimType
// NumValues: 0x0004
enum class EAppCharBagAnimType : uint8
{
	EC_None                                  = 0,
	EC_Stand                                 = 1,
	EC_Run                                   = 2,
	EC_Max                                   = 3,
};

// Enum xrd777.EAppCharFaceAnimID
// NumValues: 0x0011
enum class EAppCharFaceAnimID : uint8
{
	EA_Normal                                = 0,
	EA_Smile                                 = 1,
	EA_Anger                                 = 2,
	EA_Sad                                   = 3,
	EA_Surprise                              = 4,
	EA_Pain                                  = 5,
	EA_Sigh                                  = 6,
	EA_Shock                                 = 7,
	EA_Shout                                 = 8,
	EA_Daring                                = 9,
	EA_Disappointed                          = 10,
	EA_Laugh                                 = 11,
	EA_Agony                                 = 12,
	EA_Serious                               = 13,
	EA_Summon                                = 14,
	EA_CloseEyes                             = 15,
	EA_Max                                   = 16,
};

// Enum xrd777.EAppCharFootstepsType
// NumValues: 0x0004
enum class EAppCharFootstepsType : uint8
{
	None                                     = 0,
	Walk                                     = 1,
	Run                                      = 2,
	EAppCharFootstepsType_MAX                = 3,
};

// Enum xrd777.EAppCharShoesID
// NumValues: 0x0005
enum class EAppCharShoesID : uint8
{
	None                                     = 0,
	Shoes                                    = 50,
	Slippers                                 = 51,
	Socks                                    = 52,
	EAppCharShoesID_MAX                      = 53,
};

// Enum xrd777.EAppCharAnimCategoryType
// NumValues: 0x0006
enum class EAppCharAnimCategoryType : uint8
{
	Common                                   = 0,
	Battle                                   = 1,
	EventBC                                  = 2,
	Field                                    = 3,
	Dungeon                                  = 4,
	EAppCharAnimCategoryType_MAX             = 5,
};

// Enum xrd777.AppCharWeaponAnimType
// NumValues: 0x0008
enum class EAppCharWeaponAnimType : uint8
{
	None                                     = 0,
	AnimDefault                              = 1,
	Idle                                     = 2,
	Attack                                   = 3,
	AttackLong                               = 4,
	AttackCritical                           = 5,
	AttackMiss                               = 6,
	AppCharWeaponAnimType_MAX                = 7,
};

// Enum xrd777.AppCharWeaponUsageEnv
// NumValues: 0x0003
enum class EAppCharWeaponUsageEnv : uint8
{
	Battle                                   = 0,
	Field                                    = 1,
	AppCharWeaponUsageEnv_MAX                = 2,
};

// Enum xrd777.EAppLevelType
// NumValues: 0x0004
enum class EAppLevelType : uint8
{
	Normal                                   = 0,
	Resident                                 = 1,
	PreLoad                                  = 2,
	EAppLevelType_MAX                        = 3,
};

// Enum xrd777.EAppLevelStatus
// NumValues: 0x0008
enum class EAppLevelStatus : uint8
{
	LevelInvalid                             = 0,
	LevelUnloaded                            = 1,
	LevelLoading                             = 2,
	LevelLoaded                              = 3,
	LevelMakingVisible                       = 4,
	LevelVisible                             = 5,
	LevelAlwaysLoaded                        = 6,
	EAppLevelStatus_MAX                      = 7,
};

// Enum xrd777.EAppPauseType
// NumValues: 0x0006
enum class EAppPauseType : uint8
{
	None                                     = 0,
	Camp                                     = 1,
	TownMap                                  = 2,
	DialogueLog                              = 3,
	PauseEventA                              = 4,
	Max                                      = 5,
};

// Enum xrd777.EAppPropsAnimPackType
// NumValues: 0x0002
enum class EAppPropsAnimPackType : uint8
{
	Common                                   = 0,
	EAppPropsAnimPackType_MAX                = 1,
};

// Enum xrd777.EAppPropsCardType
// NumValues: 0x0005
enum class EAppPropsCardType : uint8
{
	Blank                                    = 0,
	Persona                                  = 1,
	MajorArcana                              = 2,
	MinorArcana                              = 3,
	EAppPropsCardType_MAX                    = 4,
};

// Enum xrd777.EEventManagerEventRank
// NumValues: 0x0005
enum class EEventManagerEventRank : uint8
{
	EventRankA                               = 0,
	EventRankB                               = 1,
	EventRankC                               = 2,
	EventRankUnknown                         = 3,
	EEventManagerEventRank_MAX               = 4,
};

// Enum xrd777.EEventManagerMessageState
// NumValues: 0x0007
enum class EEventManagerMessageState : uint8
{
	Invalid                                  = 0,
	RunningMessage                           = 1,
	EndMessage                               = 2,
	RunningSelect                            = 3,
	EndSelect                                = 4,
	Finished                                 = 5,
	EEventManagerMessageState_MAX            = 6,
};

// Enum xrd777.EEventManagerSeqControllerState
// NumValues: 0x0005
enum class EEventManagerSeqControllerState : uint8
{
	Idle                                     = 0,
	BeginWaitFinishedMessage                 = 1,
	WaitingFinishedMessage                   = 2,
	EndWaitFinishedMessage                   = 3,
	EEventManagerSeqControllerState_MAX      = 4,
};

// Enum xrd777.EAtlEvtManagerSequencerPlayerPauseType
// NumValues: 0x0004
enum class EAtlEvtManagerSequencerPlayerPauseType : uint8
{
	NoPause                                  = 0,
	MessagePause                             = 1,
	GamePause                                = 2,
	EAtlEvtManagerSequencerPlayerPauseType_MAX = 3,
};

// Enum xrd777.EAtlEvtManagerPauseFlag
// NumValues: 0x0007
enum class EAtlEvtManagerPauseFlag : uint8
{
	None                                     = 0,
	AtlEvtMessagePaused                      = 1,
	AEvtPaused                               = 2,
	BacklogPaused                            = 4,
	NetAnswerPaused                          = 8,
	Always                                   = 255,
	EAtlEvtManagerPauseFlag_MAX              = 256,
};

// Enum xrd777.EAtlEvtLocomotionTeleportVelocityType
// NumValues: 0x0005
enum class EAtlEvtLocomotionTeleportVelocityType : uint8
{
	Default                                  = 0,
	Clamp                                    = 1,
	Constant                                 = 2,
	Keep                                     = 3,
	EAtlEvtLocomotionTeleportVelocityType_MAX = 4,
};

// Enum xrd777.EAtlEvtPropAttachType
// NumValues: 0x0004
enum class EAtlEvtPropAttachType : uint8
{
	SetAttachPropActor                       = 0,
	SetDetachTransform                       = 1,
	Invalid                                  = 2,
	EAtlEvtPropAttachType_MAX                = 3,
};

// Enum xrd777.EEvtSoundManageOperationType
// NumValues: 0x0003
enum class EEvtSoundManageOperationType : uint8
{
	DayTimeFieldEnvSE                        = 0,
	SetAisacValueFieldEnvSE                  = 1,
	EEvtSoundManageOperationType_MAX         = 2,
};

// Enum xrd777.EEvtAdxTrackSoundOperationType
// NumValues: 0x0004
enum class EEvtAdxTrackSoundOperationType : uint8
{
	Play                                     = 0,
	Stop                                     = 1,
	Invalid                                  = 2,
	EEvtAdxTrackSoundOperationType_MAX       = 3,
};

// Enum xrd777.EEvtSoundCategoryType
// NumValues: 0x0008
enum class EEvtSoundCategoryType : uint8
{
	GlobalBGM                                = 0,
	GlobalSE                                 = 1,
	EventVoice                               = 2,
	EventSE                                  = 3,
	EventSE_2                                = 4,
	EventSE_3                                = 5,
	UserID                                   = 6,
	EEvtSoundCategoryType_MAX                = 7,
};

// Enum xrd777.EEvtConditionalBranchCompType
// NumValues: 0x0007
enum class EEvtConditionalBranchCompType : uint8
{
	Equal                                    = 0,
	Not                                      = 1,
	LessThan                                 = 2,
	GreaterThan                              = 3,
	Less                                     = 4,
	Greater                                  = 5,
	EEvtConditionalBranchCompType_MAX        = 6,
};

// Enum xrd777.EAtlEvtEventCategoryType
// NumValues: 0x0006
enum class EAtlEvtEventCategoryType : uint8
{
	MAIN                                     = 0,
	CMMU                                     = 1,
	QEST                                     = 2,
	EXTR                                     = 3,
	FILD                                     = 4,
	EAtlEvtEventCategoryType_MAX             = 5,
};

// Enum xrd777.EAtlEvtKeyHelpType
// NumValues: 0x0006
enum class EAtlEvtKeyHelpType : uint8
{
	Normal                                   = 0,
	AEvent                                   = 1,
	Answer                                   = 2,
	BackLog                                  = 3,
	Disable_Log                              = 4,
	Max                                      = 5,
};

// Enum xrd777.EAtlEvtLoadLevelCheckType
// NumValues: 0x0006
enum class EAtlEvtLoadLevelCheckType : uint8
{
	FieldMain                                = 0,
	FieldSound                               = 1,
	FieldSeason                              = 2,
	LightScenario                            = 3,
	EventMain                                = 4,
	EAtlEvtLoadLevelCheckType_MAX            = 5,
};

// Enum xrd777.EAtlEvtPlayMode
// NumValues: 0x0003
enum class EAtlEvtPlayMode : uint8
{
	PlayingGameMode                          = 0,
	EventEditHelperMode                      = 1,
	EAtlEvtPlayMode_MAX                      = 2,
};

// Enum xrd777.EAtlEvtPlayLoadSublevelType
// NumValues: 0x0006
enum class EAtlEvtPlayLoadSublevelType : uint8
{
	Custom                                   = 0,
	BindActorSublevel                        = 1,
	CallEvent                                = 2,
	EvtPlay                                  = 3,
	EventEditHelper                          = 4,
	EAtlEvtPlayLoadSublevelType_MAX          = 5,
};

// Enum xrd777.EAtlEvtSublevelType
// NumValues: 0x0008
enum class EAtlEvtSublevelType : uint8
{
	Unknown                                  = 0,
	Background                               = 1,
	LightScenario                            = 2,
	Sound                                    = 3,
	Season                                   = 4,
	Crowd                                    = 5,
	EventSublevel                            = 6,
	EAtlEvtSublevelType_MAX                  = 7,
};

// Enum xrd777.EAtlUIPrimitivePreset
// NumValues: 0x0006
enum class EAtlUIPrimitivePreset : uint8
{
	UI_PRIM_FREE                             = 0,
	UI_PRIM_TRIANGLE                         = 1,
	UI_PRIM_SQUARE                           = 2,
	UI_PRIM_ROUND_SQUARE                     = 3,
	UI_PRIM_CIRCLE                           = 4,
	UI_PRIM_MAX                              = 5,
};

// Enum xrd777.EAtlUIFontStyle
// NumValues: 0x0005
enum class EAtlUIFontStyle : uint8
{
	UI_FONT_STYLE_NORMAL_SMALL               = 0,
	UI_FONT_STYLE_NORMAL_MEDIUM              = 1,
	UI_FONT_STYLE_NORMAL_LARGE               = 2,
	UI_FONT_STYLE_NORMAL_SSMALL              = 3,
	UI_FONT_STYLE_NORMAL_MAX                 = 4,
};

// Enum xrd777.EEvtCharaAnimationLookAtType
// NumValues: 0x0005
enum class EEvtCharaAnimationLookAtType : uint8
{
	Disable                                  = 0,
	World                                    = 1,
	TargetActor                              = 2,
	TargetActorFIELD                         = 3,
	EEvtCharaAnimationLookAtType_MAX         = 4,
};

// Enum xrd777.EEvtCharaAnimationSlotType
// NumValues: 0x0008
enum class EEvtCharaAnimationSlotType : uint8
{
	User                                     = 0,
	DefaultSlot                              = 1,
	EventSlot                                = 2,
	NodSlot                                  = 3,
	FacialSlot                               = 4,
	ArmL                                     = 5,
	ArmR                                     = 6,
	EEvtCharaAnimationSlotType_MAX           = 7,
};

// Enum xrd777.EEvtCharaAnimationType
// NumValues: 0x0007
enum class EEvtCharaAnimationType : uint8
{
	SimpleMontage                            = 0,
	LoopAnimationSingle                      = 1,
	LoopAnimationOnLastFrame                 = 2,
	StopSlotAnimation                        = 3,
	LoopAnimationSingleWithStartOffset       = 4,
	KeepWorld                                = 5,
	EEvtCharaAnimationType_MAX               = 6,
};

// Enum xrd777.EBtlCutsceneMoveMode
// NumValues: 0x0003
enum class EBtlCutsceneMoveMode : uint8
{
	CharaToNormal                            = 0,
	NormalToChara                            = 1,
	EBtlCutsceneMoveMode_MAX                 = 2,
};

// Enum xrd777.EBtlCutsceneEditorMode
// NumValues: 0x0004
enum class EBtlCutsceneEditorMode : uint8
{
	NormalCamera                             = 0,
	CharacterCamera                          = 1,
	MoveCamera                               = 2,
	EBtlCutsceneEditorMode_MAX               = 3,
};

// Enum xrd777.EBtlCalcStatsType
// NumValues: 0x0006
enum class EBtlCalcStatsType : uint8
{
	STRENGTH                                 = 0,
	MAGIC                                    = 1,
	ENDURANCE                                = 2,
	SPEED                                    = 3,
	LUCK                                     = 4,
	EBtlCalcStatsType_MAX                    = 5,
};

// Enum xrd777.EBtlCalcParamType
// NumValues: 0x001F
enum class EBtlCalcParamType : uint8
{
	LEVEL_ATK                                = 0,
	LEVEL_DEF                                = 1,
	HP_ATK                                   = 2,
	HP_DEF                                   = 3,
	MAXHP_ATK                                = 4,
	MAXHP_DEF                                = 5,
	SP_ATK                                   = 6,
	SP_DEF                                   = 7,
	MAXSP_ATK                                = 8,
	MAXSP_DEF                                = 9,
	AFFINITY_ATK                             = 10,
	AFFINITY_DEF                             = 11,
	PARAM_ATK                                = 12,
	PARAM_DEF                                = 13,
	BAD_AFFINITY_ATK                         = 14,
	BAD_AFFINITY_DEF                         = 15,
	HIT                                      = 16,
	BAD_HIT                                  = 17,
	SKILL_POWER                              = 18,
	CRITICAL                                 = 19,
	DOWN                                     = 20,
	LEVELDAMAGE                              = 21,
	MAGIC_BONUS_DAMAGE                       = 22,
	MAGIC_BONUS_RECOVERY                     = 23,
	ALLOUT_MEMBER_NUM                        = 24,
	ALLOUT_LEVEL_POWER_RATE                  = 25,
	ARMOR_ATK                                = 26,
	ARMOR_DEF                                = 27,
	EVASION_ATK                              = 28,
	EVASION_DEF                              = 29,
	EBtlCalcParamType_MAX                    = 30,
};

// Enum xrd777.EBtlGameDifficulty
// NumValues: 0x0006
enum class EBtlGameDifficulty : uint8
{
	BTL_SAFETY                               = 0,
	BTL_EASY                                 = 1,
	BTL_NORMAL                               = 2,
	BTL_HARD                                 = 3,
	BTL_RISKY                                = 4,
	BTL_MAX                                  = 5,
};

// Enum xrd777.EBtlCalcCameraLookAtType
// NumValues: 0x0007
enum class EBtlCalcCameraLookAtType : uint8
{
	CylinderCenter                           = 0,
	UpShot                                   = 1,
	BustShot                                 = 2,
	LongShot                                 = 3,
	Cylinder                                 = 4,
	Field                                    = 5,
	EBtlCalcCameraLookAtType_MAX             = 6,
};

// Enum xrd777.EBtlCalcCameraCylinderType
// NumValues: 0x0007
enum class EBtlCalcCameraCylinderType : uint8
{
	Enchant                                  = 0,
	TargetGroup                              = 1,
	Whole                                    = 2,
	None                                     = 3,
	Field                                    = 4,
	World                                    = 5,
	EBtlCalcCameraCylinderType_MAX           = 6,
};

// Enum xrd777.EBtlLoadingTimeCategory
// NumValues: 0x0008
enum class EBtlLoadingTimeCategory : uint8
{
	Levels                                   = 0,
	Residents                                = 1,
	Resources                                = 2,
	Resourcesenemy                           = 3,
	GUI                                      = 4,
	CharacterSetup                           = 5,
	GUIModel                                 = 6,
	MAX                                      = 7,
};

// Enum xrd777.EBtlEncountPreemptive
// NumValues: 0x0004
enum class EBtlEncountPreemptive : uint8
{
	Normal                                   = 0,
	Enemy                                    = 1,
	Ally                                     = 2,
	MAX                                      = 3,
};

// Enum xrd777.EBtlDataMoveCursorTactics
// NumValues: 0x0005
enum class EBtlDataMoveCursorTactics : uint8
{
	BTL_DATA_MOVE_TACTICS_UP                 = 0,
	BTL_DATA_MOVE_TACTICS_RIGHT              = 1,
	BTL_DATA_MOVE_TACTICS_DOWN               = 2,
	BTL_DATA_MOVE_TACTICS_LEFT               = 3,
	BTL_DATA_MOVE_TACTICS_MAX                = 4,
};

// Enum xrd777.EBtlDataBadStatus
// NumValues: 0x000F
enum class EBtlDataBadStatus : uint8
{
	BTL_DATA_BAD_KIZETU                      = 0,
	BTL_DATA_BAD_CHARM                       = 1,
	BTL_DATA_BAD_UPSET                       = 2,
	BTL_DATA_BAD_PANIC                       = 3,
	BTL_DATA_BAD_FEAR                        = 4,
	BTL_DATA_BAD_ANGER                       = 5,
	BTL_DATA_BAD_FREEZE                      = 6,
	BTL_DATA_BAD_SHOCK                       = 7,
	BTL_DATA_BAD_POISON                      = 8,
	BTL_DATA_BAD_OVERLIMIT                   = 9,
	BTL_DATA_BAD_OVERHEAT                    = 10,
	BTL_DATA_BAD_BOMB                        = 11,
	BTL_DATA_BAD_DEAD                        = 12,
	BTL_DATA_BAD_DOWN                        = 13,
	BTL_DATA_BAD_MAX                         = 14,
};

// Enum xrd777.EBtlDataItemUseType
// NumValues: 0x0003
enum class EBtlDataItemUseType : uint8
{
	BTL_DATA_ITEM_USE_SUCCESS                = 0,
	BTL_DATA_ITEM_USE_DONTUSE                = 1,
	BTL_DATA_ITEM_USE_MAX                    = 2,
};

// Enum xrd777.EBtlDataSupportTable
// NumValues: 0x001A
enum class EBtlDataSupportTable : uint8
{
	BTL_DATA_SUPPORT_ATK_UP                  = 0,
	BTL_DATA_SUPPORT_ATK_DOWN                = 1,
	BTL_DATA_SUPPORT_ESC_UP                  = 2,
	BTL_DATA_SUPPORT_ESC_DOWN                = 3,
	BTL_DATA_SUPPORT_DEF_UP                  = 4,
	BTL_DATA_SUPPORT_DEF_DOWN                = 5,
	BTL_DATA_SUPPORT_HIT_UP                  = 6,
	BTL_DATA_SUPPORT_HIT_DOWN                = 7,
	BTL_DATA_SUPPORT_HIRISK                  = 8,
	BTL_DATA_SUPPORT_RISKHG                  = 9,
	BTL_DATA_SUPPORT_AGINDA                  = 10,
	BTL_DATA_SUPPORT_BUFNDA                  = 11,
	BTL_DATA_SUPPORT_GALNDA                  = 12,
	BTL_DATA_SUPPORT_JIONDA                  = 13,
	BTL_DATA_SUPPORT_BADx2                   = 14,
	BTL_DATA_SUPPORT_REDWALL                 = 15,
	BTL_DATA_SUPPORT_BLUWALL                 = 16,
	BTL_DATA_SUPPORT_YELWALL                 = 17,
	BTL_DATA_SUPPORT_GRNWALL                 = 18,
	BTL_DATA_SUPPORT_TETORA                  = 19,
	BTL_DATA_SUPPORT_MAKARA                  = 20,
	BTL_DATA_SUPPORT_BATKx2                  = 21,
	BTL_DATA_SUPPORT_MATKx2                  = 22,
	BTL_DATA_SUPPORT_DEKAJA                  = 23,
	BTL_DATA_SUPPORT_DEKUNDA                 = 24,
	BTL_DATA_SUPPORT_MAX                     = 25,
};

// Enum xrd777.EBtlDataCostType
// NumValues: 0x0004
enum class EBtlDataCostType : uint8
{
	BTL_DATA_COST_NONE                       = 0,
	BTL_DATA_COST_HP                         = 1,
	BTL_DATA_COST_SP                         = 2,
	BTL_DATA_COST_MAX                        = 3,
};

// Enum xrd777.EBtlDataAnalyze
// NumValues: 0x0008
enum class EBtlDataAnalyze : uint8
{
	BTL_DATA_ANA_NORMAL                      = 0,
	BTL_DATA_ANA_MUKOU                       = 1,
	BTL_DATA_ANA_HANSYA                      = 2,
	BTL_DATA_ANA_KYUSYU                      = 3,
	BTL_DATA_ANA_WEAK                        = 4,
	BTL_DATA_ANA_TAISEI                      = 5,
	BTL_DATA_ANA_NOOPEN                      = 6,
	BTL_DATA_ANA_MAX                         = 7,
};

// Enum xrd777.EBtlDataKeyControl
// NumValues: 0x000A
enum class EBtlDataKeyControl : uint8
{
	BTL_DATA_KEYCONTROL_ATTACK               = 0,
	BTL_DATA_KEYCONTROL_GUARD                = 1,
	BTL_DATA_KEYCONTROL_PERSONA              = 2,
	BTL_DATA_KEYCONTROL_ITEM                 = 4,
	BTL_DATA_KEYCONTROL_SHIFT                = 4,
	BTL_DATA_KEYCONTROL_ANALYZE              = 4,
	BTL_DATA_KEYCONTROL_STRATEGY             = 4,
	BTL_DATA_KEYCONTROL_ASSIST               = 4,
	BTL_DATA_KEYCONTROL_RUSH                 = 4,
	BTL_DATA_KEYCONTROL_MAX                  = 5,
};

// Enum xrd777.EBtlDataTargetArea
// NumValues: 0x0005
enum class EBtlDataTargetArea : uint8
{
	BTL_DATA_TARGET_AREA_NULL                = 0,
	BTL_DATA_TARGET_AREA_ALLY                = 1,
	BTL_DATA_TARGET_AREA_ENEMY               = 2,
	BTL_DATA_TARGET_AREA_PERSONA             = 4,
	BTL_DATA_TARGET_AREA_MAX                 = 5,
};

// Enum xrd777.EBtlDataTargetType
// NumValues: 0x0006
enum class EBtlDataTargetType : uint8
{
	BTL_DATA_TARGET_TYPE_NULL                = 0,
	BTL_DATA_TARGET_TYPE_SINGLE              = 0,
	BTL_DATA_TARGET_TYPE_GROUP               = 1,
	BTL_DATA_TARGET_TYPE_ALL                 = 2,
	BTL_DATA_TARGET_TYPE_NON                 = 3,
	BTL_DATA_TARGET_TYPE_MAX                 = 4,
};

// Enum xrd777.EBtlDataEfficacyType
// NumValues: 0x0005
enum class EBtlDataEfficacyType : uint8
{
	BTL_DATA_EFFICACY_NULL                   = 0,
	BTL_DATA_EFFICACY_NON                    = 0,
	BTL_DATA_EFFICACY_BUTURI                 = 1,
	BTL_DATA_EFFICACY_MAGIC                  = 2,
	BTL_DATA_EFFICACY_MAX                    = 3,
};

// Enum xrd777.EBtlCommonEventType
// NumValues: 0x0002
enum class EBtlCommonEventType : uint8
{
	RETRY                                    = 0,
	MAX                                      = 1,
};

// Enum xrd777.EBtlEventType
// NumValues: 0x000F
enum class EBtlEventType : uint8
{
	ENCOUNT                                  = 0,
	BTLSTART                                 = 1,
	AISTART                                  = 2,
	ACTSTART                                 = 3,
	ACTEND                                   = 4,
	BTLEND                                   = 5,
	TALK                                     = 6,
	TALK02                                   = 7,
	EVENT0                                   = 8,
	EVENT1                                   = 9,
	EVENT2                                   = 10,
	EVENT3                                   = 11,
	EVENT4                                   = 12,
	EVENT5                                   = 13,
	MAX                                      = 14,
};

// Enum xrd777.EBtlFadeType
// NumValues: 0x000E
enum class EBtlFadeType : uint8
{
	BTL_FADE_TYPE_NULL                       = 0,
	BTL_FADE_TYPE_BLACKOUT                   = 1,
	BTL_FADE_TYPE_WHITEOUT                   = 2,
	BTL_FADE_TYPE_LINEWIPE                   = 3,
	BTL_FADE_TYPE_CIRCLE                     = 4,
	BTL_FADE_TYPE_CIRCLE2                    = 5,
	BTL_FADE_TYPE_CIRCLE3                    = 6,
	BTL_FADE_TYPE_SHIFTIN                    = 7,
	BTL_FADE_TYPE_SHIFTOUT                   = 8,
	BTL_FADE_TYPE_THEURGIA                   = 9,
	BTL_FADE_TYPE_BATTLE_RESULT              = 10,
	BTL_FADE_TYPE_BATTLE_RESULT_END          = 11,
	BTL_FADE_TYPE_CONTINUE                   = 12,
	BTL_FADE_TYPE_MAX                        = 13,
};

// Enum xrd777.EBtlSizeCategoryType
// NumValues: 0x0006
enum class EBtlSizeCategoryType : uint8
{
	CATEGORY_S                               = 0,
	CATEGORY_M                               = 1,
	CATEGORY_L                               = 2,
	CATEGORY_LL                              = 3,
	CATEGORY_EX                              = 4,
	CATEGORY_MAX                             = 5,
};

// Enum xrd777.EBtlFormationCategoryType
// NumValues: 0x0021
enum class EBtlFormationCategoryType : uint8
{
	CATEGORY_S                               = 0,
	CATEGORY_M                               = 1,
	CATEGORY_L                               = 2,
	CATEGORY_SS                              = 3,
	CATEGORY_MS                              = 4,
	CATEGORY_MM                              = 5,
	CATEGORY_LS                              = 6,
	CATEGORY_LM                              = 7,
	CATEGORY_LL                              = 8,
	CATEGORY_SSS                             = 9,
	CATEGORY_MSS                             = 10,
	CATEGORY_MMS                             = 11,
	CATEGORY_MMM                             = 12,
	CATEGORY_LSS                             = 13,
	CATEGORY_LMS                             = 14,
	CATEGORY_LMM                             = 15,
	CATEGORY_LLS                             = 16,
	CATEGORY_LLM                             = 17,
	CATEGORY_LLL                             = 18,
	CATEGORY_SSSS                            = 19,
	CATEGORY_MSSS                            = 20,
	CATEGORY_MMSS                            = 21,
	CATEGORY_MMMS                            = 22,
	CATEGORY_LMSS                            = 23,
	CATEGORY_LMMS                            = 24,
	CATEGORY_LLSS                            = 25,
	CATEGORY_MMMM                            = 26,
	CATEGORY_SSSSS                           = 27,
	CATEGORY_MSSSS                           = 28,
	CATEGORY_MMSSS                           = 29,
	CATEGORY_LSSSS                           = 30,
	CATEGORY_MMMMM                           = 31,
	CATEGORY_MAX                             = 32,
};

// Enum xrd777.EBtlFormationSizeType
// NumValues: 0x0004
enum class EBtlFormationSizeType : uint8
{
	BTL_FORMATION_POINT_SIZE_S               = 0,
	BTL_FORMATION_POINT_SIZE_M               = 1,
	BTL_FORMATION_POINT_SIZE_L               = 2,
	BTL_FORMATION_POINT_SIZE_MAX             = 3,
};

// Enum xrd777.EBtlAnalyzeSupportType
// NumValues: 0x0007
enum class EBtlAnalyzeSupportType : uint8
{
	BTL_ANALYZE_SUPPORT_QUESTION             = 0,
	BTL_ANALYZE_SUPPORT_NOT_PREPARE          = 1,
	BTL_ANALYZE_SUPPORT_CANNOT_ENEMY         = 2,
	BTL_ANALYZE_SUPPORT_PLAY                 = 3,
	BTL_ANALYZE_SUPPORT_ALREADY_PLAY         = 4,
	BTL_ANALYZE_SUPPORT_NOT_SP               = 5,
	BTL_ANALYZE_SUPPORT_MAX                  = 6,
};

// Enum xrd777.EBtlTouchCallbackValue
// NumValues: 0x0023
enum class EBtlTouchCallbackValue : uint8
{
	TOP_ATTACK_TEXT                          = 0,
	TOP_ATTACK_KEY                           = 1,
	TOP_GUARD_TEXT                           = 2,
	TOP_GUARD_KEY                            = 3,
	TOP_ITEM_TEXT                            = 4,
	TOP_ITEM_KEY                             = 5,
	TOP_SKILL_TEXT                           = 6,
	TOP_SKILL_KEY                            = 7,
	TOP_THEURGIA_TEXT                        = 8,
	TOP_THEURGIA_KEY                         = 9,
	TOP_SHIFT_TEXT                           = 10,
	TOP_SHIFT_KEY                            = 11,
	TOP_ORACLE_TEXT                          = 12,
	TOP_ORACLE_KEY                           = 13,
	PROMISE_CANCEL_TEXT                      = 14,
	PROMISE_CANCEL_KEY                       = 15,
	PROMISE_GO_TEXT                          = 16,
	PROMISE_GO_KEY                           = 17,
	GUARD_NO_TEXT                            = 18,
	GUARD_NO_KEY                             = 19,
	GUARD_YES_TEXT                           = 20,
	GUARD_YES_KEY                            = 21,
	RUSH_STOP_TEXT                           = 22,
	RUSH_STOP_KEY                            = 23,
	SKILL_L_TEXT                             = 24,
	SKILL_R_TEXT                             = 25,
	ANALYZE_HIGH_ANALYZE_KEY                 = 26,
	ANALYZE_L_TEXT                           = 27,
	ANALYZE_R_TEXT                           = 28,
	THEURGIA_ARROW_L                         = 29,
	THEURGIA_ARROW_R                         = 30,
	THEURGIA_SELECT                          = 31,
	LIST_SCROLL_BAR                          = 100,
	LIST_SCROLL_SLIDER                       = 101,
	EBtlTouchCallbackValue_MAX               = 102,
};

// Enum xrd777.EBtlTouchScreenID
// NumValues: 0x0009
enum class EBtlTouchScreenID : uint8
{
	BTL_SCREEN_ID_CMN                        = 0,
	BTL_SCREEN_ID_SCROLL                     = 1,
	BTL_SCREEN_ID_ITEM_LIST                  = 2,
	BTL_SCREEN_ID_SKILL_LIST                 = 3,
	BTL_SCREEN_ID_TACTICS1_LIST              = 4,
	BTL_SCREEN_ID_TACTICS2_LIST              = 5,
	BTL_SCREEN_ID_TACTICS3_LIST              = 6,
	BTL_SCREEN_ID_THEURGIA_LIST              = 7,
	BTL_SCREEN_ID_MAX                        = 8,
};

// Enum xrd777.EBtlGuiTextType
// NumValues: 0x0004
enum class EBtlGuiTextType : uint8
{
	BTL_TTYPE_NORMAL                         = 0,
	BTL_TTYPE_ITALIC                         = 1,
	BTL_TTYPE_THEURGIA_ITALIC                = 2,
	BTL_TTYPE_MAX                            = 3,
};

// Enum xrd777.EBtlGuiFontStyle
// NumValues: 0x0003
enum class EBtlGuiFontStyle : uint8
{
	BTL_FSTYLE_SMALL                         = 0,
	BTL_FSTYLE_MEDIUM                        = 1,
	BTL_FSTYLE_MAX                           = 2,
};

// Enum xrd777.EBtlGuiDrawType
// NumValues: 0x0008
enum class EBtlGuiDrawType : uint8
{
	BTL_DTYPE_NORMAL                         = 0,
	BTL_DTYPE_INVALPHA                       = 1,
	BTL_DTYPE_GAUSS                          = 2,
	BTL_DTYPE_GAUSSINVAPLHA                  = 3,
	BTL_DTYPE_GAUSSTEXTURE                   = 4,
	BTL_DTYPE_GAUSSINVTEXTURE                = 5,
	BTL_DTYPE_MULTIPLY                       = 6,
	BTL_DTYPE_MAX                            = 7,
};

// Enum xrd777.EBtlGuiAnchorPt
// NumValues: 0x0006
enum class EBtlGuiAnchorPt : uint8
{
	BTL_ANC_CENTER                           = 0,
	BTL_ANC_LU                               = 1,
	BTL_ANC_RU                               = 2,
	BTL_ANC_LD                               = 3,
	BTL_ANC_RD                               = 4,
	BTL_ANC_MAX                              = 5,
};

// Enum xrd777.EBtlGuiColorWhiteMask
// NumValues: 0x000A
enum class EBtlGuiColorWhiteMask : uint8
{
	BTL_CW_RGBA                              = 0,
	BTL_CW_R                                 = 1,
	BTL_CW_G                                 = 2,
	BTL_CW_B                                 = 3,
	BTL_CW_A                                 = 4,
	BTL_CW_RG                                = 5,
	BTL_CW_BA                                = 6,
	BTL_CW_RGB                               = 7,
	BTL_CW_NONE                              = 8,
	BTL_CW_MAX                               = 9,
};

// Enum xrd777.EBtlGuiOT
// NumValues: 0x0008
enum class EBtlGuiOT : uint8
{
	BTL_OT_LOW                               = 0,
	BTL_OT_WIPE                              = 1,
	BTL_OT_MIDDLE                            = 2,
	BTL_OT_HIGH                              = 3,
	BTL_OT_FADE                              = 4,
	BTL_OT_FADE_HIGH                         = 5,
	BTL_OT_PTPANEL_HIGH                      = 6,
	BTL_OT_MAX                               = 7,
};

// Enum xrd777.EBtlGuiBlendFactor
// NumValues: 0x0011
enum class EBtlGuiBlendFactor : uint8
{
	BTL_BF_Zero                              = 0,
	BTL_BF_One                               = 1,
	BTL_BF_SourceColor                       = 2,
	BTL_BF_InverseSourceColor                = 3,
	BTL_BF_SourceAlpha                       = 4,
	BTL_BF_InverseSourceAlpha                = 5,
	BTL_BF_DestAlpha                         = 6,
	BTL_BF_InverseDestAlpha                  = 7,
	BTL_BF_DestColor                         = 8,
	BTL_BF_InverseDestColor                  = 9,
	BTL_BF_ConstantBlendFactor               = 10,
	BTL_BF_InverseConstantBlendFactor        = 11,
	BTL_BF_Source1Color                      = 12,
	BTL_BF_InverseSource1Color               = 13,
	BTL_BF_Source1Alpha                      = 14,
	BTL_BF_InverseSource1Alpha               = 15,
	BTL_BF_MAX                               = 16,
};

// Enum xrd777.EBtlGuiBlendOp
// NumValues: 0x0005
enum class EBtlGuiBlendOp : uint8
{
	BTL_OP_ADD                               = 0,
	BTL_OP_SUBTRACT                          = 1,
	BTL_OP_MIN                               = 2,
	BTL_OP_MAX                               = 3,
	BTL_OP_REVSUB                            = 4,
};

// Enum xrd777.EBtlGuiCanvas
// NumValues: 0x000B
enum class EBtlGuiCanvas : uint8
{
	BTL_CANVAS_NULL                          = 0,
	BTL_CANVAS_0                             = 1,
	BTL_CANVAS_1                             = 2,
	BTL_CANVAS_2                             = 3,
	BTL_CANVAS_3                             = 4,
	BTL_CANVAS_4                             = 5,
	BTL_CANVAS_5                             = 6,
	BTL_CANVAS_6                             = 7,
	BTL_CANVAS_7                             = 8,
	BTL_CANVAS_CAP                           = 9,
	BTL_CANVAS_MAX                           = 10,
};

// Enum xrd777.EBtlEncountWipeType
// NumValues: 0x0005
enum class EBtlEncountWipeType : uint8
{
	BTL_ENCWIPE_NONE                         = 0,
	BTL_ENCWIPE_NORMAL                       = 1,
	BTL_ENCWIPE_PINCH                        = 2,
	BTL_ENCWIPE_EVENT                        = 3,
	BTL_ENCWIPE_MAX                          = 4,
};

// Enum xrd777.EBtlGuiIconKeyHelp
// NumValues: 0x000F
enum class EBtlGuiIconKeyHelp : uint8
{
	BTL_ICON_KEYHELP_NONE                    = 0,
	BTL_ICON_KEYHELP_TOP                     = 1,
	BTL_ICON_KEYHELP_SKILL                   = 2,
	BTL_ICON_KEYHELP_ITEM                    = 3,
	BTL_ICON_KEYHELP_PROMISE                 = 4,
	BTL_ICON_KEYHELP_TARGET                  = 5,
	BTL_ICON_KEYHELP_ALLYTARGET              = 6,
	BTL_ICON_KEYHELP_SHIFT                   = 7,
	BTL_ICON_KEYHELP_TACTICSALLY             = 8,
	BTL_ICON_KEYHELP_TACTICSENEMY            = 9,
	BTL_ICON_KEYHELP_THEURGIA                = 10,
	BTL_ICON_KEYHELP_THEURGIADETAIL          = 11,
	BTL_ICON_KEYHELP_ANALYZE                 = 12,
	BTL_ICON_KEYHELP_ORACLE_TARGET           = 13,
	BTL_ICON_KEYHELP_MAX                     = 14,
};

// Enum xrd777.EBtlGuiIconDamageType
// NumValues: 0x0004
enum class EBtlGuiIconDamageType : uint8
{
	BTL_ICON_DAMAGE_NORMAL                   = 0,
	BTL_ICON_DAMAGE_CRITICAL                 = 1,
	BTL_ICON_DAMAGE_WEAK                     = 2,
	BTL_ICON_DAMAGE_MAX                      = 3,
};

// Enum xrd777.EBtlGuiIconHit
// NumValues: 0x0008
enum class EBtlGuiIconHit : uint8
{
	BTL_ICON_HIT_NORMAL                      = 0,
	BTL_ICON_HIT_HANSYA                      = 1,
	BTL_ICON_HIT_KYUSYU                      = 2,
	BTL_ICON_HIT_MUKOU                       = 3,
	BTL_ICON_HIT_TAISEI                      = 4,
	BTL_ICON_HIT_SAKE                        = 5,
	BTL_ICON_HIT_MISS                        = 6,
	BTL_ICON_HIT_MAX                         = 7,
};

// Enum xrd777.EBtlTouchCollisionLayout
// NumValues: 0x000F
enum class EBtlTouchCollisionLayout : uint8
{
	TOP_COMMAND_ATTACK                       = 0,
	TOP_COMMAND_ATTACK_WH                    = 1,
	TOP_COMMAND_GUARD                        = 2,
	TOP_COMMAND_GUARD_WH                     = 3,
	TOP_COMMAND_SKILL                        = 4,
	TOP_COMMAND_SKILL_WH                     = 5,
	TOP_COMMAND_ITEM                         = 6,
	TOP_COMMAND_ITEM_WH                      = 7,
	TOP_COMMAND_ORACLE                       = 8,
	TOP_COMMAND_ORACLE_WH                    = 9,
	TOP_COMMAND_THEURGIA                     = 10,
	TOP_COMMAND_THEURGIA_WH                  = 11,
	TOP_COMMAND_SHIFT                        = 12,
	TOP_COMMAND_SHIFT_WH                     = 13,
	Max                                      = 14,
};

// Enum xrd777.EBtlOthersLayout
// NumValues: 0x0008
enum class EBtlOthersLayout : uint8
{
	SKILL_NAME_PANEL_TEXTCOLL                = 0,
	SKILL_NAME_PANEL_POS_Y                   = 1,
	JYOKYO_HELP_POS_Y_SHORT1LINE             = 2,
	JYOKYO_HELP_POS_Y                        = 3,
	JYOKYO_HELP_ROW_Y                        = 4,
	JYOKYO_HELP_TEXTCOLL_X                   = 5,
	ITEM_HELP_TITLE_POS                      = 6,
	Max                                      = 7,
};

// Enum xrd777.EBtlRushLayout
// NumValues: 0x0003
enum class EBtlRushLayout : uint8
{
	STOP_MASK_LENGTH                         = 0,
	STOP_MASK_RATE                           = 1,
	Max                                      = 2,
};

// Enum xrd777.EBtlDamageIconLayout
// NumValues: 0x0007
enum class EBtlDamageIconLayout : uint8
{
	DAMAGE_WEAK_BASE                         = 0,
	DAMAGE_WEAK_TOP_OFS_Y                    = 1,
	DAMAGE_WEAK_BOTTOM_OFS_Y                 = 2,
	DAMAGE_CRITICAL_BASE                     = 3,
	DAMAGE_CRITICAL_TOP_OFS_Y                = 4,
	DAMAGE_CRITICAL_BOTTOM_OFS_Y             = 5,
	Max                                      = 6,
};

// Enum xrd777.EBtlPromiseLayout
// NumValues: 0x0005
enum class EBtlPromiseLayout : uint8
{
	COMMAND_GO_MARU                          = 0,
	COMMAND_GO_BATSU                         = 1,
	COMMAND_CANCEL_MARU                      = 2,
	COMMAND_CANCEL_BATSU                     = 3,
	Max                                      = 4,
};

// Enum xrd777.EBtlTacticsCheckLayout
// NumValues: 0x0002
enum class EBtlTacticsCheckLayout : uint8
{
	SITUATION_HEADLINE_WIDTH                 = 0,
	Max                                      = 1,
};

// Enum xrd777.EBtlGuardLayout
// NumValues: 0x0003
enum class EBtlGuardLayout : uint8
{
	GUARD_HEADLINE_WIDTH_TOP                 = 0,
	GUARD_HEADLINE_WIDTH_BOTTOM              = 1,
	Max                                      = 2,
};

// Enum xrd777.EBtlTopLayout
// NumValues: 0x0005
enum class EBtlTopLayout : uint8
{
	COMMAND_ITEM                             = 0,
	COMMAND_GUARD_MARU                       = 1,
	COMMAND_GUARD_BATSU                      = 2,
	COMMAND_SHIFT                            = 3,
	Max                                      = 4,
};

// Enum xrd777.EBtlTargetInfoTextLayout
// NumValues: 0x0003
enum class EBtlTargetInfoTextLayout : uint8
{
	TARGET_NAME                              = 0,
	TARGET_NAME_POS                          = 1,
	Max                                      = 2,
};

// Enum xrd777.EBtlTacticsListTextLayout
// NumValues: 0x0007
enum class EBtlTacticsListTextLayout : uint8
{
	CHARA_NAME                               = 0,
	CHARA_NAME_POS                           = 1,
	OPERATION_NAME                           = 2,
	OPERATION_NAME_POS                       = 3,
	MEMBER_CHARA_NAME_POS                    = 4,
	MEMBER_OPERATION_NAME_POS                = 5,
	Max                                      = 6,
};

// Enum xrd777.EBtlTacticsLayout
// NumValues: 0x0002
enum class EBtlTacticsLayout : uint8
{
	ALREADY_ESCAPE                           = 0,
	Max                                      = 1,
};

// Enum xrd777.EBtlItemSkillListTextLayout
// NumValues: 0x0007
enum class EBtlItemSkillListTextLayout : uint8
{
	ITEM_SKILL_NAME                          = 0,
	ITEM_SKILL_HELP                          = 1,
	ITEM_HELP_POS                            = 2,
	SKILL_HELP_POS                           = 3,
	SKILL_PERSONA_NAME                       = 4,
	SKILL_PERSONA_NAME_POS                   = 5,
	Max                                      = 6,
};

// Enum xrd777.EBtlTheurgiaLayout
// NumValues: 0x0003
enum class EBtlTheurgiaLayout : uint8
{
	USING_QUESTION_TEXT                      = 0,
	INFO                                     = 1,
	Max                                      = 2,
};

// Enum xrd777.EBtlAnalyzeTextLayout
// NumValues: 0x0004
enum class EBtlAnalyzeTextLayout : uint8
{
	ENEMY_NAME                               = 0,
	LIST_NAME                                = 1,
	NAVI_TEXT_X                              = 2,
	Max                                      = 3,
};

// Enum xrd777.EBtlAnalyzeLayout
// NumValues: 0x0004
enum class EBtlAnalyzeLayout : uint8
{
	ARCANA                                   = 0,
	AFFINITY_TEXT                            = 1,
	NAVI_TEXT_POS_Y                          = 2,
	Max                                      = 3,
};

// Enum xrd777.EBtlListScreenID
// NumValues: 0x0008
enum class EBtlListScreenID : uint8
{
	NONE                                     = 0,
	BTL_LIST_SCREEN_ID_ITEM                  = 1,
	BTL_LIST_SCREEN_ID_SKILL                 = 2,
	BTL_LIST_SCREEN_ID_TACTICS1              = 3,
	BTL_LIST_SCREEN_ID_TACTICS2              = 4,
	BTL_LIST_SCREEN_ID_TACTICS3              = 5,
	BTL_LIST_SCREEN_ID_THEURGIA              = 6,
	EBtlListScreenID_MAX                     = 7,
};

// Enum xrd777.EBtlGuiPromise
// NumValues: 0x0004
enum class EBtlGuiPromise : uint8
{
	BTL_PROMISE_NORMAL                       = 0,
	BTL_PROMISE_GUARD                        = 1,
	BTL_PROMISE_SOUKOUGEKI                   = 2,
	BTL_PROMISE_MAX                          = 3,
};

// Enum xrd777.EBtlGuiState
// NumValues: 0x0010
enum class EBtlGuiState : uint8
{
	BTL_STATE_NONE                           = 0,
	BTL_STATE_TOP                            = 1,
	BTL_STATE_SKILL                          = 2,
	BTL_STATE_ITEM                           = 3,
	BTL_STATE_TARGET                         = 4,
	BTL_STATE_PROMISE                        = 5,
	BTL_STATE_TACTICS                        = 6,
	BTL_STATE_THEURGIA                       = 7,
	BTL_STATE_ANALYZE                        = 8,
	BTL_STATE_SHIFT                          = 9,
	BTL_STATE_STRATEGY                       = 10,
	BTL_STATE_GUARD                          = 11,
	BTL_STATE_PERSONASTATUS                  = 12,
	BTL_STATE_NAVIGATION                     = 13,
	BTL_STATE_NUM                            = 14,
	BTL_STATE_MAX                            = 15,
};

// Enum xrd777.EBtlInputKeyboardEnum
// NumValues: 0x0012
enum class EBtlInputKeyboardEnum : uint8
{
	BTL_INPUT_KEY_NONE                       = 0,
	BTL_INPUT_KEY_RU                         = 1,
	BTL_INPUT_KEY_RR                         = 2,
	BTL_INPUT_KEY_RL                         = 3,
	BTL_INPUT_KEY_RD                         = 4,
	BTL_INPUT_KEY_LU                         = 5,
	BTL_INPUT_KEY_LR                         = 6,
	BTL_INPUT_KEY_LL                         = 7,
	BTL_INPUT_KEY_LD                         = 8,
	BTL_INPUT_KEY_R1                         = 9,
	BTL_INPUT_KEY_L1                         = 10,
	BTL_INPUT_KEY_R2                         = 11,
	BTL_INPUT_KEY_L2                         = 12,
	BTL_INPUT_KEY_R3                         = 13,
	BTL_INPUT_KEY_L3                         = 14,
	BTL_INPUT_KEY_OPTION                     = 15,
	BTL_INPUT_KEY_TOUCH                      = 16,
	BTL_INPUT_MAX                            = 17,
};

// Enum xrd777.EBattlePhaseName
// NumValues: 0x0008
enum class EBattlePhaseName : uint8
{
	Fighting                                 = 0,
	Dead                                     = 1,
	Escape                                   = 2,
	SerialEncount                            = 3,
	Result                                   = 4,
	Victory                                  = 5,
	None                                     = 6,
	EBattlePhaseName_MAX                     = 7,
};

// Enum xrd777.EBtlResultType
// NumValues: 0x0003
enum class EBtlResultType : uint8
{
	Normal                                   = 0,
	AllAttack                                = 1,
	EBtlResultType_MAX                       = 2,
};

// Enum xrd777.EBtlPhaseType
// NumValues: 0x0008
enum class EBtlPhaseType : uint8
{
	None                                     = 0,
	Fighting                                 = 1,
	Victory                                  = 2,
	Annihilation                             = 3,
	Escape                                   = 4,
	EscapeSkill                              = 5,
	Others                                   = 6,
	EBtlPhaseType_MAX                        = 7,
};

// Enum xrd777.EBtlResidentResource
// NumValues: 0x000E
enum class EBtlResidentResource : uint8
{
	Summon                                   = 0,
	SummonShell                              = 1,
	HitSlash                                 = 2,
	HitPierce                                = 3,
	HitStrike                                = 4,
	ReflectionHit                            = 5,
	AbsorptionHit                            = 6,
	PersonaAura                              = 7,
	PersonaAuraShine                         = 8,
	ShadowSummon                             = 9,
	ShadowDead                               = 10,
	ShadowDeadSplash                         = 11,
	HitPierceYukariCritical                  = 12,
	MAX                                      = 13,
};

// Enum xrd777.EBtlShuffleTextLayout
// NumValues: 0x0006
enum class EBtlShuffleTextLayout : uint8
{
	CARD_NAME                                = 0,
	CARD_NAME_POS                            = 1,
	CARD_HELP                                = 2,
	CARD_HELP_POS                            = 3,
	PERSONA_NAME                             = 4,
	Max                                      = 5,
};

// Enum xrd777.EBtlShuffleLayout
// NumValues: 0x0002
enum class EBtlShuffleLayout : uint8
{
	ARCANA_SWORDS                            = 0,
	Max                                      = 1,
};

// Enum xrd777.EBtlResultTextLayout
// NumValues: 0x0009
enum class EBtlResultTextLayout : uint8
{
	PERSONA_NAME_POS                         = 0,
	PERSONA_NAME_DOT_OFS_POS                 = 1,
	ITEM_NAME                                = 2,
	ITEM_NAME_POS                            = 3,
	LV_UP_CHARA_NAME_POS                     = 4,
	LV_UP_PERSONA_NAME                       = 5,
	LV_UP_PERSONA_NAME_DOT_OFS_POS           = 6,
	LV_UP_PERSONA_NAME_POS                   = 7,
	Max                                      = 8,
};

// Enum xrd777.EBtlResultLayoutAstrea
// NumValues: 0x0003
enum class EBtlResultLayoutAstrea : uint8
{
	RESULT_UI_HERO_OFFSET_POS                = 0,
	RESULT_UI_NON_LEVEL_UP_BG_OFFSET_POS     = 1,
	Max                                      = 2,
};

// Enum xrd777.EBtlResultLayout
// NumValues: 0x0004
enum class EBtlResultLayout : uint8
{
	PERSONA_ARCANA                           = 0,
	RESULT_HEADLINE_WIDTH                    = 1,
	RESULT_HELP_TRIANGLE                     = 2,
	Max                                      = 3,
};

// Enum xrd777.EBtlResultHeroPersonaUpEvent
// NumValues: 0x0005
enum class EBtlResultHeroPersonaUpEvent : uint8
{
	No                                       = 0,
	UpStock8                                 = 1,
	UpStock10                                = 2,
	UpStock12                                = 3,
	EBtlResultHeroPersonaUpEvent_MAX         = 4,
};

// Enum xrd777.EBtlResultState
// NumValues: 0x000A
enum class EBtlResultState : uint8
{
	Init                                     = 0,
	Top                                      = 1,
	Levelup                                  = 2,
	PersonaLvup                              = 3,
	HeroHumanLevelup                         = 4,
	HeroPersonaStatus                        = 5,
	AllyPersonaStatus                        = 6,
	PersonaStatus                            = 7,
	End                                      = 8,
	EBtlResultState_MAX                      = 9,
};

// Enum xrd777.EBtlShakeType
// NumValues: 0x0007
enum class EBtlShakeType : uint8
{
	BTL_SHAKE_NORMAL                         = 0,
	BTL_SHAKE_NORMAL_STRONG                  = 1,
	BTL_SHAKE_SINGLE_SHORT                   = 2,
	BTL_SHAKE_SINGLE_SHORT_STRONG            = 3,
	BTL_SHAKE_SINGLE_LONG                    = 4,
	BTL_SHAKE_SINGLE_LONG_STRONG             = 5,
	BTL_SHAKE_MAX                            = 6,
};

// Enum xrd777.EBtlShuffleCardRotationState
// NumValues: 0x0004
enum class EBtlShuffleCardRotationState : uint8
{
	BTL_SHUFFLECARD_ROTATION_WAIT            = 0,
	BTL_SHUFFLECARD_ROTATION_PLAYING         = 1,
	BTL_SHUFFLECARD_ROTATION_END             = 2,
	BTL_SHUFFLECARD_ROTATION_MAX             = 3,
};

// Enum xrd777.EBtlShuffleCardAllGetBonusAnimeState
// NumValues: 0x0006
enum class EBtlShuffleCardAllGetBonusAnimeState : uint8
{
	BTL_SHUFFLECARD_BONUSANIME_OUTSMALLTAROT = 0,
	BTL_SHUFFLECARD_BONUSANIME_IN            = 1,
	BTL_SHUFFLECARD_BONUSANIME_TRANSE        = 2,
	BTL_SHUFFLECARD_BONUSANIME_OUT           = 3,
	BTL_SHUFFLECARD_BONUSANIME_FINISH        = 4,
	BTL_SHUFFLECARD_BONUSANIME_MAX           = 5,
};

// Enum xrd777.EBtlShuffleCardSmallTarotState
// NumValues: 0x0004
enum class EBtlShuffleCardSmallTarotState : uint8
{
	BTL_SHUFFLECARD_TAROTCARD_NORMAL         = 0,
	BTL_SHUFFLECARD_TAROTCARD_ALLGETBONUS_ANIME = 1,
	BTL_SHUFFLECARD_TAROTCARD_INVISIBLE      = 2,
	BTL_SHUFFLECARD_TAROTCARD_MAX            = 3,
};

// Enum xrd777.EBtlShuffleCardEffectSelectState
// NumValues: 0x0004
enum class EBtlShuffleCardEffectSelectState : uint8
{
	BTL_SHUFFLECARD_EFFECTSELECT_WAIT        = 0,
	BTL_SHUFFLECARD_EFFECTSELECT_OUT         = 1,
	BTL_SHUFFLECARD_EFFECTSELECT_IN          = 2,
	BTL_SHUFFLECARD_EFFECTSELECT_MAX         = 3,
};

// Enum xrd777.EBtlShuffleKeyHelpState
// NumValues: 0x0004
enum class EBtlShuffleKeyHelpState : uint8
{
	BTL_SHUFFLE_KEYHELP_NONE                 = 0,
	BTL_SHUFFLE_KEYHELP_SELECTCARD           = 1,
	BTL_SHUFFLE_KEYHELP_SELECTPERSONA        = 2,
	BTL_SHUFFLE_KEYHELP_MAX                  = 3,
};

// Enum xrd777.EBtlShuffleCardState
// NumValues: 0x0005
enum class EBtlShuffleCardState : uint8
{
	BTL_SHUFFLECARD_WAIT                     = 0,
	BTL_SHUFFLECARD_SELECT                   = 1,
	BTL_SHUFFLECARD_MOVE                     = 2,
	BTL_SHUFFLECARD_DISSOLVE                 = 3,
	BTL_SHUFFLECARD_MAX                      = 4,
};

// Enum xrd777.EBtlSkillDirectionTargetType
// NumValues: 0x0005
enum class EBtlSkillDirectionTargetType : uint8
{
	BTL_SKILL_DIR_FRONT                      = 0,
	BTL_SKILL_DIR_NONE                       = 1,
	BTL_SKILL_DIR_FRONT_NOT_ROT              = 2,
	BTL_SKILL_DIR_NONE_NOT_ROT               = 3,
	BTL_SKILL_DIR_MAX                        = 4,
};

// Enum xrd777.EBtlSkillPositionTargetType
// NumValues: 0x0005
enum class EBtlSkillPositionTargetType : uint8
{
	BTL_SKILL_POS_TARGETS_ROOT               = 0,
	BTL_SKILL_POS_TARGETS_DAMAGE_SOCKET      = 1,
	BTL_SKILL_POS_TARGETS_CYLINDER           = 2,
	BTL_SKILL_POS_WORLD                      = 3,
	BTL_SKILL_POS_MAX                        = 4,
};

// Enum xrd777.EBtlSkillPositionHeightType
// NumValues: 0x0004
enum class EBtlSkillPositionHeightType : uint8
{
	BTL_SKILL_POS_H_GROUND                   = 0,
	BTL_SKILL_POS_H_CENTER                   = 1,
	BTL_SKILL_POS_H_ONHEAD                   = 2,
	BTL_SKILL_POS_H_MAX                      = 3,
};

// Enum xrd777.EBtlSkillTargetType
// NumValues: 0x0005
enum class EBtlSkillTargetType : uint8
{
	BTL_SKILL_TARGET_CHARACTERS              = 0,
	BTL_SKILL_TARGET_GROUP                   = 1,
	BTL_SKILL_TARGET_ENCHANTER               = 2,
	BTL_SKILL_TARGET_FIELD_CENTER            = 3,
	BTL_SKILL_TARGET_MAX                     = 4,
};

// Enum xrd777.EBtlDataAttr
// NumValues: 0x0015
enum class EBtlDataAttr : uint8
{
	BTL_DATA_ATTR_SLASH                      = 0,
	BTL_DATA_ATTR_STRIKE                     = 1,
	BTL_DATA_ATTR_PIERCE                     = 2,
	BTL_DATA_ATTR_FIRE                       = 3,
	BTL_DATA_ATTR_ICE                        = 4,
	BTL_DATA_ATTR_ELECTRIC                   = 5,
	BTL_DATA_ATTR_WIND                       = 6,
	BTL_DATA_ATTR_ALMIGHTY                   = 7,
	BTL_DATA_ATTR_LIGHT                      = 8,
	BTL_DATA_ATTR_DARK                       = 9,
	BTL_DATA_ATTR_CHARM                      = 10,
	BTL_DATA_ATTR_POISON                     = 11,
	BTL_DATA_ATTR_UPSET                      = 12,
	BTL_DATA_ATTR_PANIC                      = 13,
	BTL_DATA_ATTR_FEAR                       = 14,
	BTL_DATA_ATTR_ANGER                      = 15,
	BTL_DATA_ATTR_RECOVERY                   = 16,
	BTL_DATA_ATTR_SUPPORT                    = 17,
	BTL_DATA_ATTR_SPECIAL                    = 18,
	BTL_DATA_ATTR_NON                        = 19,
	BTL_DATA_ATTR_MAX                        = 20,
};

// Enum xrd777.EBtlJyokyohelpType
// NumValues: 0x0005
enum class EBtlJyokyohelpType : uint8
{
	NyxCoreHeroRecovery1                     = 0,
	NyxCoreHeroRecovery2                     = 1,
	NyxCoreHeroRecovery3                     = 2,
	AegisOveerheat                           = 3,
	EBtlJyokyohelpType_MAX                   = 4,
};

// Enum xrd777.EBtlRelocationType
// NumValues: 0x0006
enum class EBtlRelocationType : uint8
{
	Normal                                   = 0,
	Command                                  = 1,
	Closed                                   = 2,
	Encount                                  = 3,
	WholeForEnchanterBackshot                = 4,
	EBtlRelocationType_MAX                   = 5,
};

// Enum xrd777.EBtlFinishResult
// NumValues: 0x0008
enum class EBtlFinishResult : uint8
{
	None                                     = 0,
	Win                                      = 1,
	Lose                                     = 2,
	Escape                                   = 3,
	Roundup                                  = 4,
	Trafuli                                  = 5,
	EneEscape                                = 6,
	EBtlFinishResult_MAX                     = 7,
};

// Enum xrd777.EBtlAttackPerformanceType
// NumValues: 0x0004
enum class EBtlAttackPerformanceType : uint8
{
	Normal                                   = 0,
	Long                                     = 1,
	Critical                                 = 2,
	EBtlAttackPerformanceType_MAX            = 3,
};

// Enum xrd777.EBtlAttackWeaponAnimType
// NumValues: 0x0005
enum class EBtlAttackWeaponAnimType : uint8
{
	Normal                                   = 0,
	TypeB                                    = 1,
	TypeC                                    = 2,
	TypeOrgia                                = 3,
	EBtlAttackWeaponAnimType_MAX             = 4,
};

// Enum xrd777.EBtlAlloutAttackResult
// NumValues: 0x0005
enum class EBtlAlloutAttackResult : uint8
{
	Blank                                    = 0,
	Annihilation                             = 1,
	DefeatAtLeastOne                         = 2,
	DefeatNone                               = 3,
	EBtlAlloutAttackResult_MAX               = 4,
};

// Enum xrd777.EBtlTheurgiaBoostType
// NumValues: 0x0014
enum class EBtlTheurgiaBoostType : uint8
{
	RecoveryFromDown                         = 0,
	WithPowerCharge                          = 1,
	WithPowerBoost                           = 2,
	LowHP                                    = 3,
	LowSP                                    = 4,
	GetTakeover                              = 5,
	EnemyBadStatus                           = 6,
	CriticalAttack                           = 7,
	PersonaSkillWeak                         = 8,
	PersonaSkillCritical                     = 9,
	PersonaSkillPhysics                      = 10,
	PersonaSkillMagic                        = 11,
	PersonaSkillHeal                         = 12,
	PersonaSkillSupport                      = 13,
	PersonaHitBadStatus                      = 14,
	HighAnalyze                              = 15,
	EnemyStatusDown                          = 16,
	GetTakeoverFromAEGIS                     = 17,
	TypeMax                                  = 18,
	EBtlTheurgiaBoostType_MAX                = 19,
};

// Enum xrd777.EBtlCutsceneBlendType
// NumValues: 0x0006
enum class EBtlCutsceneBlendType : uint8
{
	Liner                                    = 0,
	Cubic                                    = 1,
	EaseIN                                   = 2,
	EaseOut                                  = 3,
	EaseInOut                                = 4,
	EBtlCutsceneBlendType_MAX                = 5,
};

// Enum xrd777.EBtlBGMType
// NumValues: 0x0003
enum class EBtlBGMType : uint8
{
	Fighting                                 = 0,
	Victory                                  = 1,
	EBtlBGMType_MAX                          = 2,
};

// Enum xrd777.EBtlBadStatusIcon
// NumValues: 0x0010
enum class EBtlBadStatusIcon : uint8
{
	Knockedout                               = 0,
	Charm                                    = 1,
	Upset                                    = 2,
	Panic                                    = 3,
	Fear                                     = 4,
	Anger                                    = 5,
	Freeze                                   = 6,
	Shock                                    = 7,
	Poison                                   = 8,
	Overlimit                                = 9,
	Overheat                                 = 10,
	Bomb                                     = 11,
	Dead                                     = 12,
	Down                                     = 13,
	None                                     = 14,
	EBtlBadStatusIcon_MAX                    = 15,
};

// Enum xrd777.EBtlAnimNotifyHitEffect
// NumValues: 0x000B
enum class EBtlAnimNotifyHitEffect : uint8
{
	DefaultType                              = 0,
	YukariFromAbove                          = 1,
	MitsuruKick                              = 2,
	AegisVulcan                              = 3,
	AegisCanon                               = 4,
	AegisRifle                               = 5,
	AegisKick                                = 6,
	AegisOrgiaAttack                         = 7,
	AmadaSweep                               = 8,
	JokerAttack                              = 9,
	EBtlAnimNotifyHitEffect_MAX              = 10,
};

// Enum xrd777.EBtlAnimNotifyPersona
// NumValues: 0x0006
enum class EBtlAnimNotifyPersona : uint8
{
	Custom                                   = 0,
	SkillShot                                = 1,
	SkillCamChange                           = 2,
	FadeoutStart                             = 3,
	AnimationStop                            = 4,
	EBtlAnimNotifyPersona_MAX                = 5,
};

// Enum xrd777.EBtlAnimNotifyShadow
// NumValues: 0x000A
enum class EBtlAnimNotifyShadow : uint8
{
	Custom                                   = 0,
	Hit                                      = 1,
	SkillShot                                = 2,
	SkillCamChange                           = 3,
	DeadPerformance                          = 4,
	PersonalMotion                           = 5,
	AnimationStop                            = 6,
	BlendToWait                              = 7,
	ShowWeaponEffect                         = 8,
	EBtlAnimNotifyShadow_MAX                 = 9,
};

// Enum xrd777.EBtlAnimNotify
// NumValues: 0x0015
enum class EBtlAnimNotify : uint8
{
	Custom                                   = 0,
	Hit                                      = 1,
	SummonActBurst                           = 2,
	HideWeapon                               = 3,
	ShowWeapon                               = 4,
	HideGun                                  = 5,
	ShowGun                                  = 6,
	ShiftPersonaSkill                        = 7,
	AnimationStop                            = 8,
	HitSub                                   = 9,
	BlendToWait                              = 10,
	ItemUse                                  = 11,
	PersonalMotion                           = 12,
	BackstepLoop                             = 13,
	PlayCriticalAttackCamera                 = 14,
	SyncDeadAnim                             = 15,
	SkillAct                                 = 16,
	SkillCamChange                           = 17,
	SkillActEffect                           = 18,
	BlendToCommandWait                       = 19,
	EBtlAnimNotify_MAX                       = 20,
};

// Enum xrd777.EBtlSkillCameraType
// NumValues: 0x0004
enum class EBtlSkillCameraType : uint8
{
	NORMAL                                   = 0,
	DYNAMIC                                  = 1,
	CUTIN                                    = 2,
	EBtlSkillCameraType_MAX                  = 3,
};

// Enum xrd777.EBtlAttackType
// NumValues: 0x0004
enum class EBtlAttackType : uint8
{
	SLASH                                    = 0,
	PIERCE                                   = 1,
	STRIKE                                   = 2,
	EBtlAttackType_MAX                       = 3,
};

// Enum xrd777.EBtlEventAreaType
// NumValues: 0x000A
enum class EBtlEventAreaType : uint8
{
	BTL_AREA_NULL                            = 0,
	BTL_AREA_INVOKE                          = 1,
	BTL_AREA_PARTY_TEAM                      = 2,
	BTL_AREA_TARGET                          = 3,
	BTL_AREA_ENEMY_TEAM                      = 4,
	BTL_AREA_PARTY_MEMBER1                   = 5,
	BTL_AREA_PARTY_MEMBER2                   = 6,
	BTL_AREA_PARTY_MEMBER3                   = 7,
	BTL_AREA_NUM                             = 8,
	BTL_AREA_MAX                             = 9,
};

// Enum xrd777.EBtlPersonaSceneAnimationType
// NumValues: 0x0007
enum class EBtlPersonaSceneAnimationType : uint8
{
	BTL_ANIM_THEURGIA_A                      = 0,
	BTL_ANIM_THEURGIA_A_LOOP                 = 1,
	BTL_ANIM_THEURGIA_B                      = 2,
	BTL_ANIM_THEURGIA_B_LOOP                 = 3,
	BTL_ANIM_MIXRAID_A                       = 4,
	BTL_ANIM_MIXRAID_A_LOOP                  = 5,
	BTL_ANIM_MAX                             = 6,
};

// Enum xrd777.EBtlPersonaAnimationType
// NumValues: 0x0009
enum class EBtlPersonaAnimationType : uint8
{
	BTL_ANIM_NULL                            = 0,
	BTL_ANIM_WAIT                            = 1,
	BTL_ANIM_ATTACK                          = 2,
	BTL_ANIM_MAGIC                           = 3,
	BTL_ANIM_SKILL_END                       = 4,
	BTL_ANIM_THEURGIA_A                      = 5,
	BTL_ANIM_THEURGIA_B                      = 6,
	BTL_ANIM_NUM                             = 7,
	BTL_ANIM_MAX                             = 8,
};

// Enum xrd777.EBtlSceneAnimationType
// NumValues: 0x001D
enum class EBtlSceneAnimationType : uint8
{
	BTL_S_ANIM_NULL                          = 0,
	BTL_S_ANIM_ALLOUT_START_1                = 1,
	BTL_S_ANIM_ALLOUT_START_2                = 2,
	BTL_S_ANIM_ALLOUT_START_3                = 3,
	BTL_S_ANIM_ALLOUT_START_4                = 4,
	BTL_S_ANIM_ALLOUT_LAST                   = 5,
	BTL_S_ANIM_SHUFFLE_START                 = 6,
	BTL_S_ANIM_SHUFFLE_END                   = 7,
	BTL_S_ANIM_SHUFFLE_LOOP                  = 8,
	BTL_S_ANIM_TAKEOVER_FROM                 = 9,
	BTL_S_ANIM_TAKEOVER_TO                   = 10,
	BTL_S_ANIM_THEURGIA_A                    = 11,
	BTL_S_ANIM_THEURGIA_B                    = 12,
	BTL_S_ANIM_MIXRAID_A                     = 13,
	BTL_S_ANIM_MIXRAID_B                     = 14,
	BTL_S_ANIM_MIXRAID_C                     = 15,
	BTL_S_ANIM_MIXRAID_D                     = 16,
	BTL_S_ANIM_MIXRAID_E                     = 17,
	BTL_S_ANIM_MIXRAID_F                     = 18,
	BTL_S_ANIM_MIXRAID_G                     = 19,
	BTL_S_ANIM_RESULT_MAIN                   = 20,
	BTL_S_ANIM_RESULT_SUB                    = 21,
	BTL_S_ANIM_SUMMON_LOOP                   = 22,
	BTL_S_ANIM_SUMMON_ACT                    = 23,
	BTL_S_ANIM_OVERHEAT_1                    = 24,
	BTL_S_ANIM_OVERHEAT_2                    = 25,
	BTL_S_ANIM_OVERHEAT_3                    = 26,
	BTL_S_ANIM_THEURGIA_A_END                = 27,
	BTL_S_ANIM_MAX                           = 28,
};

// Enum xrd777.EBtlAnimationType
// NumValues: 0x0053
enum class EBtlAnimationType : uint8
{
	BTL_ANIM_NULL                            = 0,
	BTL_ANIM_WAIT                            = 1,
	BTL_ANIM_WAIT_NORMAL                     = 2,
	BTL_ANIM_WAIT_DYING                      = 3,
	BTL_ANIM_DAMAGED                         = 4,
	BTL_ANIM_COMMAND_WAIT                    = 5,
	BTL_ANIM_COMMAND_WAIT_LOOP               = 6,
	BTL_ANIM_SUMMON_START                    = 7,
	BTL_ANIM_SUMMON_LOOP                     = 8,
	BTL_ANIM_SUMMON_ACT                      = 9,
	BTL_ANIM_SUMMON_CANCEL                   = 10,
	BTL_ANIM_SUMMON_END                      = 11,
	BTL_ANIM_SKILL_CHANT                     = 12,
	BTL_ANIM_SKILL_SHOT                      = 13,
	BTL_ANIM_SKILL_SHOT_LOOP                 = 14,
	BTL_ANIM_SKILL_SHOT_END                  = 15,
	BTL_ANIM_DEAD                            = 16,
	BTL_ANIM_DOWN                            = 17,
	BTL_ANIM_WAKE_UP                         = 18,
	BTL_ANIM_DEAD_START                      = 19,
	BTL_ANIM_DEAD_SHORT                      = 20,
	BTL_ANIM_RUN                             = 21,
	BTL_ANIM_WALK                            = 22,
	BTL_ANIM_DOWN_LOOP                       = 23,
	BTL_ANIM_AVOID                           = 24,
	BTL_ANIM_ITEM_START                      = 25,
	BTL_ANIM_ITEM_USE                        = 26,
	BTL_ANIM_ITEM_CANCEL                     = 27,
	BTL_ANIM_REVIVAL                         = 28,
	BTL_ANIM_GUARD                           = 29,
	BTL_ANIM_GUARD_CANCEL                    = 30,
	BTL_ANIM_PERSONAL                        = 31,
	BTL_ANIM_PERSONA_CHANGE                  = 32,
	BTL_ANIM_SPECIAL_01_CHANT                = 33,
	BTL_ANIM_SPECIAL_02_CHANT                = 34,
	BTL_ANIM_SPECIAL_03_CHANT                = 35,
	BTL_ANIM_SPECIAL_04_CHANT                = 36,
	BTL_ANIM_SPECIAL_01                      = 37,
	BTL_ANIM_SPECIAL_02                      = 38,
	BTL_ANIM_SPECIAL_03                      = 39,
	BTL_ANIM_SPECIAL_04                      = 40,
	BTL_ANIM_SPECIAL_01_END                  = 41,
	BTL_ANIM_SPECIAL_02_END                  = 42,
	BTL_ANIM_SPECIAL_03_END                  = 43,
	BTL_ANIM_SPECIAL_04_END                  = 44,
	BTL_ANIM_TALK_A_START                    = 45,
	BTL_ANIM_TALK_A_END                      = 46,
	BTL_ANIM_TALK_B_START                    = 47,
	BTL_ANIM_TALK_B_END                      = 48,
	BTL_ANIM_TALK_C_START                    = 49,
	BTL_ANIM_TALK_C_END                      = 50,
	BTL_ANIM_TALK_D_START                    = 51,
	BTL_ANIM_TALK_D_END                      = 52,
	BTL_ANIM_BACKSTEP_START                  = 53,
	BTL_ANIM_BACKSTEP_LOOP                   = 54,
	BTL_ANIM_BACKSTEP_END                    = 55,
	BTL_ANIM_RUNAWAY                         = 56,
	BTL_ANIM_RUN_STOP                        = 57,
	BTL_ANIM_DEAD_LOOP                       = 58,
	BTL_ANIM_EVENT_1                         = 59,
	BTL_ANIM_EVENT_2                         = 60,
	BTL_ANIM_EVENT_3                         = 61,
	BTL_ANIM_EVENT_4                         = 62,
	BTL_ANIM_ATTACK                          = 63,
	BTL_ANIM_ATTACK_SINGLE                   = 64,
	BTL_ANIM_ATTACK_MISS                     = 65,
	BTL_ANIM_ATTACK_LONG                     = 66,
	BTL_ANIM_CRITICAL                        = 67,
	BTL_ANIM_ATTACK_B                        = 68,
	BTL_ANIM_ATTACK_B_SINGLE                 = 69,
	BTL_ANIM_ATTACK_B_MISS                   = 70,
	BTL_ANIM_ATTACK_B_LONG                   = 71,
	BTL_ANIM_CRITICAL_B                      = 72,
	BTL_ANIM_ATTACK_C                        = 73,
	BTL_ANIM_ATTACK_C_SINGLE                 = 74,
	BTL_ANIM_ATTACK_C_MISS                   = 75,
	BTL_ANIM_ATTACK_C_LONG                   = 76,
	BTL_ANIM_CRITICAL_C                      = 77,
	BTL_ANIM_EX_CHANT                        = 78,
	BTL_ANIM_EX_SKILL_SHOT                   = 79,
	BTL_ANIM_EX_SKILL_END                    = 80,
	BTL_ANIM_NUM                             = 81,
	BTL_ANIM_MAX                             = 82,
};

// Enum xrd777.EBtlCommandType
// NumValues: 0x0010
enum class EBtlCommandType : uint8
{
	BTL_ACT_NULL                             = 0,
	BTL_ACT_ATTACK                           = 1,
	BTL_ACT_SKILL                            = 2,
	BTL_ACT_ITEM                             = 3,
	BTL_ACT_ESCAPE                           = 4,
	BTL_ACT_GUARD                            = 5,
	BTL_ACT_SKIP                             = 6,
	BTL_ACT_TAKEOVER                         = 7,
	BTL_ACT_SUMMON                           = 8,
	BTL_ACT_WAIT                             = 9,
	BTL_ACT_BADSTATUS_ACTION                 = 10,
	BTL_ACT_THEURGIA                         = 11,
	BTL_ACT_FAILURE_WAIT                     = 12,
	BTL_ACT_RUSH                             = 13,
	BTL_ACT_NUM                              = 14,
	BTL_ACT_MAX                              = 15,
};

// Enum xrd777.EBtlSoundType
// NumValues: 0x0013
enum class EBtlSoundType : uint8
{
	START                                    = 50,
	BTL_VOICE_HERO                           = 51,
	BTL_VOICE_YUKARI                         = 52,
	BTL_VOICE_JUNPEI                         = 53,
	BTL_VOICE_SANADA                         = 54,
	BTL_VOICE_MITURU                         = 55,
	BTL_VOICE_FUKA                           = 56,
	BTL_VOICE_AEGIS                          = 57,
	BTL_VOICE_AMADA                          = 58,
	BTL_VOICE_KOROMARU                       = 59,
	BTL_VOICE_ARAGAKI                        = 60,
	BTL_VOICE_METIS                          = 61,
	BTL_VOICE_HEROAEGS                       = 62,
	BTL_VOICE_ENEMY1                         = 70,
	BTL_VOICE_ENEMY2                         = 71,
	BTL_VOICE_ENEMY3                         = 72,
	BTL_VOICE_ENEMY4                         = 73,
	BTL_VOICE_ENEMY5                         = 74,
	EBtlSoundType_MAX                        = 75,
};

// Enum xrd777.ECldSceneChangeType
// NumValues: 0x0004
enum class ECldSceneChangeType : uint8
{
	None                                     = 0,
	TimeChange                               = 1,
	DayChange                                = 2,
	ECldSceneChangeType_MAX                  = 3,
};

// Enum xrd777.ECldSeasonClothType
// NumValues: 0x0003
enum class ECldSeasonClothType : uint8
{
	Summer                                   = 0,
	Winter                                   = 1,
	ECldSeasonClothType_MAX                  = 2,
};

// Enum xrd777.ECldDayDispState
// NumValues: 0x0003
enum class ECldDayDispState : uint8
{
	On                                       = 0,
	Off                                      = 1,
	ECldDayDispState_MAX                     = 2,
};

// Enum xrd777.ECldMoonAge
// NumValues: 0x0020
enum class ECldMoonAge : uint8
{
	Moon01                                   = 0,
	Moon02                                   = 1,
	Moon03                                   = 2,
	Moon04                                   = 3,
	Moon05                                   = 4,
	Moon06                                   = 5,
	Moon07                                   = 6,
	Moon08                                   = 7,
	Moon09                                   = 8,
	Moon10                                   = 9,
	Moon11                                   = 10,
	Moon12                                   = 11,
	Moon13                                   = 12,
	Moon14                                   = 13,
	Moon15                                   = 14,
	Moon16                                   = 15,
	Moon17                                   = 16,
	Moon18                                   = 17,
	Moon19                                   = 18,
	Moon20                                   = 19,
	Moon21                                   = 20,
	Moon22                                   = 21,
	Moon23                                   = 22,
	Moon24                                   = 23,
	Moon25                                   = 24,
	Moon26                                   = 25,
	Moon27                                   = 26,
	Moon28                                   = 27,
	Moon29                                   = 28,
	Moon30                                   = 29,
	MoonMax                                  = 30,
	ECldMoonAge_MAX                          = 31,
};

// Enum xrd777.ECldWeek
// NumValues: 0x0009
enum class ECldWeek : uint8
{
	Sunday                                   = 0,
	Monday                                   = 1,
	Tuesday                                  = 2,
	Wednesday                                = 3,
	Thursday                                 = 4,
	Friday                                   = 5,
	Saturday                                 = 6,
	WeekMax                                  = 7,
	ECldWeek_MAX                             = 8,
};

// Enum xrd777.ECldTimeZone
// NumValues: 0x000C
enum class ECldTimeZone : uint8
{
	None                                     = 0,
	EarlyMorning                             = 1,
	Morning                                  = 2,
	AM                                       = 3,
	Noon                                     = 4,
	PM                                       = 5,
	AfterSchool                              = 6,
	Night                                    = 7,
	Shadow                                   = 8,
	Midnight                                 = 9,
	TimeMax                                  = 10,
	ECldTimeZone_MAX                         = 11,
};

// Enum xrd777.ECldSeason
// NumValues: 0x0006
enum class ECldSeason : uint8
{
	Spring                                   = 0,
	Summer                                   = 1,
	Autumn                                   = 2,
	Winter                                   = 3,
	SeasonMax                                = 4,
	ECldSeason_MAX                           = 5,
};

// Enum xrd777.EUIGaussType
// NumValues: 0x0008
enum class EUIGaussType : uint8
{
	VeryWeak1                                = 0,
	Weak2                                    = 1,
	Normal3                                  = 2,
	Strong4                                  = 3,
	VeryStrong5                              = 4,
	MostWeak0                                = 5,
	Off                                      = 6,
	EUIGaussType_MAX                         = 7,
};

// Enum xrd777.ECldCmnDataBpClass
// NumValues: 0x0003
enum class ECldCmnDataBpClass : uint8
{
	SchedulerEveryDay                        = 0,
	SchedulerEveryTime                       = 1,
	Max                                      = 2,
};

// Enum xrd777.ECldDateMsgPeriod
// NumValues: 0x0005
enum class ECldDateMsgPeriod : uint8
{
	Single                                   = 0,
	Start                                    = 1,
	Mid                                      = 2,
	End                                      = 3,
	ECldDateMsgPeriod_MAX                    = 4,
};

// Enum xrd777.ECldDateColor
// NumValues: 0x0003
enum class ECldDateColor : uint8
{
	Normal                                   = 0,
	Red                                      = 1,
	ECldDateColor_MAX                        = 2,
};

// Enum xrd777.EBtlCommonNameIndex
// NumValues: 0x0006
enum class EBtlCommonNameIndex : uint8
{
	BTL_COMMON_NAME_DEFENCE                  = 0,
	BTL_COMMON_NAME_SUMMON                   = 1,
	BTL_COMMON_NAME_ESCAPE                   = 2,
	BTL_COMMON_NAME_OPERATION                = 3,
	BTL_COMMON_NAME_ATTACK                   = 10,
	BTL_COMMON_NAME_MAX                      = 11,
};

// Enum xrd777.EDifficultySelectionLayout
// NumValues: 0x0010
enum class EDifficultySelectionLayout : uint8
{
	DIFFICULT_SELECTION_TEXT                 = 0,
	DIFFICULT_SELECTION_INFO_TEXT            = 1,
	DIFFICULT_SELECTION_ROW                  = 2,
	DIFFICULT_SELECTION_INFO_ROW             = 3,
	LIST_ROOT_POS                            = 4,
	PEACEFUL_POS_OFFSET                      = 5,
	EASY_POS_OFFSET                          = 6,
	NORMAL_POS_OFFSET                        = 7,
	HARD_POS_OFFSET                          = 8,
	LUNATIC_POS_OFFSET                       = 9,
	LIST_CURSOR                              = 10,
	MASK_WIDTH                               = 11,
	MASK_OFFSET                              = 12,
	HEARTLESS_POS_OFFSET                     = 13,
	HEARTLESS_MASK_WIDTH                     = 14,
	MAX                                      = 15,
};

// Enum xrd777.EAdcUnlockType
// NumValues: 0x0002
enum class EAdcUnlockType : uint8
{
	ASTREA                                   = 0,
	MAX                                      = 1,
};

// Enum xrd777.EAdcType
// NumValues: 0x000F
enum class EAdcType : uint8
{
	COSTUME_SET_1                            = 0,
	COSTUME_SET_2                            = 1,
	COSTUME_SET_3                            = 2,
	PERSONA_SET_1                            = 3,
	PERSONA_SET_2                            = 4,
	PERSONA_SET_3                            = 5,
	BGM_SET_1                                = 6,
	BGM_SET_2                                = 7,
	ITEM_SET1                                = 8,
	SEASON_BGM_SET_1                         = 9,
	SEASON_BGM_SET_2                         = 10,
	COSTUME_SET_4                            = 11,
	SEASON_BGM_SET_3                         = 12,
	SEASON_BGM_SET_4                         = 13,
	MAX                                      = 14,
};

// Enum xrd777.EAdcCategory
// NumValues: 0x0006
enum class EAdcCategory : uint8
{
	COSTUME_SET                              = 0,
	PERSONA_SET                              = 1,
	BGM_SET                                  = 2,
	ITEM_SET                                 = 3,
	EXPASS_SET                               = 4,
	MAX                                      = 5,
};

// Enum xrd777.EEvtManagerState
// NumValues: 0x0009
enum class EEvtManagerState : uint8
{
	EVTM_BC_Playing                          = 0,
	EVTM_A_Playing                           = 1,
	EVTM_Playing                             = 2,
	EVTM_BackLog                             = 3,
	EVTM_NetAnswer                           = 4,
	EVTM_A_Skip                              = 5,
	TS_Exit                                  = 6,
	TS_Num                                   = 7,
	EEvtManagerState_MAX                     = 8,
};

// Enum xrd777.EFadeMode
// NumValues: 0x0004
enum class EFadeMode : uint32
{
	Idle                                     = 0,
	In                                       = 1,
	Out                                      = 2,
	EFadeMode_MAX                            = 3,
};

// Enum xrd777.EFadingState
// NumValues: 0x0004
enum class EFadingState : uint32
{
	Blank                                    = 0,
	Filled                                   = 1,
	Running                                  = 2,
	EFadingState_MAX                         = 3,
};

// Enum xrd777.EFldShapeCompType
// NumValues: 0x0002
enum class EFldShapeCompType : uint8
{
	LinkAnimHit                              = 0,
	EFldShapeCompType_MAX                    = 1,
};

// Enum xrd777.EFldActorType
// NumValues: 0x000D
enum class EFldActorType : uint8
{
	Player                                   = 0,
	Door                                     = 1,
	AnimObj                                  = 2,
	LinkAnimObj                              = 3,
	HitActor                                 = 4,
	Npc                                      = 5,
	CmmNpc                                   = 6,
	Animal                                   = 7,
	PlayerStart                              = 8,
	CrowdManager                             = 9,
	CrowdTarget                              = 10,
	TargetIcon                               = 11,
	EFldActorType_MAX                        = 12,
};

// Enum xrd777.EFldAnimalMotion_BIRD
// NumValues: 0x000A
enum class EFldAnimalMotion_BIRD : uint8
{
	Blank                                    = 0,
	Idle                                     = 1,
	Walk                                     = 2,
	Run                                      = 3,
	PersonalAction00                         = 4,
	PersonalAction01                         = 5,
	FlyAway                                  = 6,
	ComeBack                                 = 7,
	FlyIdol                                  = 8,
	EFldAnimalMotion_MAX                     = 9,
};

// Enum xrd777.EFldAnimalMotion_CAT
// NumValues: 0x000C
enum class EFldAnimalMotion_CAT : uint8
{
	Blank                                    = 0,
	Idle_Stand                               = 1,
	Idle_Sit                                 = 2,
	Walk                                     = 3,
	Run                                      = 4,
	To_Stand                                 = 5,
	To_Sit                                   = 6,
	PersonalAction00_Stand                   = 7,
	PersonalAction01_Stand                   = 8,
	PersonalAction00_Sit                     = 9,
	PersonalAction01_Sit                     = 10,
	Max                                      = 11,
};

// Enum xrd777.EFldLoadPersistentType
// NumValues: 0x0003
enum class EFldLoadPersistentType : uint8
{
	Daily                                    = 0,
	Dungeon                                  = 1,
	Max                                      = 2,
};

// Enum xrd777.EFldBpRetBool
// NumValues: 0x0003
enum class EFldBpRetBool : uint8
{
	FldBpTrue                                = 0,
	FldBpFalse                               = 1,
	EFldBpRetBool_MAX                        = 2,
};

// Enum xrd777.EFldBpRetFlag
// NumValues: 0x0003
enum class EFldBpRetFlag : uint8
{
	FldBpOn                                  = 0,
	FldBpOff                                 = 1,
	EFldBpRetFlag_MAX                        = 2,
};

// Enum xrd777.EFldCameraForwardType
// NumValues: 0x0008
enum class EFldCameraForwardType : uint32
{
	Camera                                   = 0,
	WorldX                                   = 1,
	WorldInverseX                            = 2,
	WorldY                                   = 3,
	WorldInverseY                            = 4,
	Free                                     = 5,
	SplinePath                               = 6,
	EFldCameraForwardType_MAX                = 7,
};

// Enum xrd777.EFldCameraBehaviorFreeState
// NumValues: 0x0005
enum class EFldCameraBehaviorFreeState : uint32
{
	None                                     = 0,
	Free                                     = 1,
	ZoomAnim                                 = 2,
	MoveToDefault                            = 3,
	EFldCameraBehaviorFreeState_MAX          = 4,
};

// Enum xrd777.EFldCharAccessIconType
// NumValues: 0x0007
enum class EFldCharAccessIconType : uint8
{
	Fukidashi                                = 0,
	Talk                                     = 1,
	Zawazawa                                 = 2,
	Hisoiso                                  = 3,
	Butsubutsu                               = 4,
	Bosoboso                                 = 5,
	Max                                      = 6,
};

// Enum xrd777.EFldCharAttackAnimNotifyFlag
// NumValues: 0x0005
enum class EFldCharAttackAnimNotifyFlag : uint32
{
	None                                     = 0,
	Collision                                = 1,
	Orbit                                    = 2,
	Encount                                  = 3,
	EFldCharAttackAnimNotifyFlag_MAX         = 4,
};

// Enum xrd777.EFldAttackCollisionType
// NumValues: 0x0008
enum class EFldAttackCollisionType : uint8
{
	MeleeAttackCollision                     = 1,
	LongRangeAttackCollision                 = 2,
	LongRangeAttackEnhancedCollision         = 3,
	LongRangeAttackCollision_DarkZone        = 4,
	LongRangeAttackEnhancedCollision_DarkZone = 5,
	ObjectAutoDestroyCollision               = 6,
	DashAttackCollision                      = 7,
	EFldAttackCollisionType_MAX              = 8,
};

// Enum xrd777.EFldCharKeyType
// NumValues: 0x0011
enum class EFldCharKeyType : uint8
{
	Triangle                                 = 1,
	Ok_Cross                                 = 2,
	Square                                   = 3,
	Cancel_Circle                            = 4,
	Up                                       = 5,
	Down                                     = 6,
	Right                                    = 7,
	Left                                     = 8,
	L1                                       = 9,
	L2                                       = 10,
	L3                                       = 11,
	R1                                       = 12,
	R2                                       = 13,
	R3                                       = 14,
	OPTION                                   = 15,
	TOUCH                                    = 16,
	EFldCharKeyType_MAX                      = 17,
};

// Enum xrd777.EFldCmmNpcType
// NumValues: 0x0003
enum class EFldCmmNpcType : uint8
{
	Cmm                                      = 0,
	Normal                                   = 1,
	Max                                      = 2,
};

// Enum xrd777.EFldCmnDataBpClass
// NumValues: 0x0016
enum class EFldCmnDataBpClass : uint8
{
	NpcIconActor_Normal                      = 0,
	NpcIconActor_Talk                        = 1,
	NpcIconActor_Cmm                         = 2,
	NpcIconActor_Cmm_Reverse                 = 3,
	NpcIconActor_Cmm_Object                  = 4,
	NpcIconActor_Quest                       = 5,
	NpcIconActor_MaleQuest                   = 6,
	NpcIconActor_MaleQuest_Object            = 7,
	NpcIconActor_Dormitory                   = 8,
	NpcIconActor_Study                       = 9,
	NpcIconActor_Koromaru                    = 10,
	NpcIconActor_Readed_Normal               = 11,
	NpcIconActor_Readed_Talk                 = 12,
	WordIconActor_00                         = 13,
	WordIconActor_Readed_00                  = 14,
	WordIconActor_01                         = 15,
	WordIconActor_Readed_01                  = 16,
	WordIconActor_02                         = 17,
	WordIconActor_03                         = 18,
	Props_HeroPhone                          = 19,
	CameraShakeActor                         = 20,
	Max                                      = 21,
};

// Enum xrd777.EFldDataTable
// NumValues: 0x0018
enum class EFldDataTable : uint8
{
	SubLevelList                             = 0,
	VariationSubLevelList                    = 1,
	CrowdSubLevelList                        = 2,
	BgmList                                  = 3,
	NpcTypeList                              = 4,
	PlayerCostumeList                        = 5,
	ShortcutNameList                         = 6,
	PlaceNameList                            = 7,
	HitNameList_Daily                        = 8,
	HitNameList_Dungeon                      = 9,
	NpcNameList                              = 10,
	TvProgram                                = 11,
	MailOrder                                = 12,
	CrowdWalkInit                            = 13,
	SortieMember                             = 14,
	LmapCmmNpcLayout                         = 15,
	LmapNpcLayout                            = 16,
	TemporalAAList                           = 17,
	PersonalMotionList                       = 18,
	PoolPack                                 = 19,
	PoolPack_PLAYGO                          = 20,
	PoolConnect                              = 21,
	RaytraceSettingList                      = 22,
	Max                                      = 23,
};

// Enum xrd777.EFldCrowdRoutePtn
// NumValues: 0x0004
enum class EFldCrowdRoutePtn : uint8
{
	Normal                                   = 0,
	Outward                                  = 1,
	Return                                   = 2,
	EFldCrowdRoutePtn_MAX                    = 3,
};

// Enum xrd777.EFldCrowdTime
// NumValues: 0x0006
enum class EFldCrowdTime : uint8
{
	None                                     = 0,
	Noon                                     = 1,
	Evening                                  = 2,
	Night                                    = 3,
	Shadow                                   = 4,
	Max                                      = 5,
};

// Enum xrd777.EFldCrowdSeason
// NumValues: 0x0005
enum class EFldCrowdSeason : uint8
{
	None                                     = 0,
	Winter                                   = 1,
	Summer                                   = 2,
	EndTime                                  = 3,
	Max                                      = 4,
};

// Enum xrd777.EFldDoorOpenType
// NumValues: 0x0003
enum class EFldDoorOpenType : uint8
{
	OpenFront                                = 0,
	OpenBack                                 = 1,
	EFldDoorOpenType_MAX                     = 2,
};

// Enum xrd777.EEncountEnemyType
// NumValues: 0x0007
enum class EEncountEnemyType : uint8
{
	Blank                                    = 0,
	Normal                                   = 1,
	Strong                                   = 2,
	Rare                                     = 3,
	Death                                    = 4,
	Num                                      = 5,
	EEncountEnemyType_MAX                    = 6,
};

// Enum xrd777.EEncountType
// NumValues: 0x0007
enum class EEncountType : uint8
{
	Blank                                    = 0,
	Normal                                   = 1,
	Chance                                   = 2,
	Pinch                                    = 3,
	Friend                                   = 4,
	Num                                      = 5,
	EEncountType_MAX                         = 6,
};

// Enum xrd777.EDungeonBattleRetType
// NumValues: 0x0008
enum class EDungeonBattleRetType : uint8
{
	None                                     = 0,
	Win                                      = 1,
	Lose                                     = 2,
	Escape                                   = 3,
	Roundup                                  = 4,
	Trafuli                                  = 5,
	EneEscape                                = 6,
	Max                                      = 7,
};

// Enum xrd777.EDungeonTBoxType
// NumValues: 0x000D
enum class EDungeonTBoxType : uint8
{
	Normal                                   = 0,
	Rare                                     = 1,
	Jewelry                                  = 2,
	PrimField                                = 3,
	Medal1                                   = 4,
	Medal2                                   = 5,
	Medal3                                   = 6,
	Medal4                                   = 7,
	Medal5                                   = 8,
	Medal6                                   = 9,
	Num                                      = 10,
	UseNum                                   = 7,
	EDungeonTBoxType_MAX                     = 11,
};

// Enum xrd777.EDungeonEnemyType
// NumValues: 0x0007
enum class EDungeonEnemyType : uint8
{
	Normal                                   = 0,
	Strong                                   = 1,
	Rare                                     = 2,
	Death                                    = 3,
	Gatekeeper                               = 4,
	Num                                      = 5,
	EDungeonEnemyType_MAX                    = 6,
};

// Enum xrd777.EDungeonFieldType
// NumValues: 0x0005
enum class EDungeonFieldType : uint8
{
	Auto                                     = 0,
	Fixed                                    = 1,
	Design                                   = 2,
	Num                                      = 3,
	EDungeonFieldType_MAX                    = 4,
};

// Enum xrd777.EDungeonEffectType
// NumValues: 0x000A
enum class EDungeonEffectType : uint8
{
	Dark                                     = 0,
	HeroAttack                               = 1,
	EnemyAttack                              = 2,
	TartarosSearch                           = 3,
	HeroAttackLongRange                      = 4,
	HeroAttackLongRangeLockOn                = 5,
	HeroAssaultAutoDestroy                   = 6,
	HeroAssaultAutoDestroyHit                = 7,
	Num                                      = 8,
	EDungeonEffectType_MAX                   = 9,
};

// Enum xrd777.EDungeonEnemyGroup
// NumValues: 0x0003
enum class EDungeonEnemyGroup : uint8
{
	Normal                                   = 0,
	ForbiddenDoor                            = 1,
	EDungeonEnemyGroup_MAX                   = 2,
};

// Enum xrd777.EDungeonEnvType
// NumValues: 0x000A
enum class EDungeonEnvType : uint8
{
	CharaLight                               = 0,
	ShadowTimeFilter                         = 1,
	Num                                      = 2,
	DungeonFilter01                          = 1,
	DungeonFilter02                          = 2,
	DungeonFilter03                          = 3,
	DungeonFilter04                          = 4,
	DungeonFilter05                          = 5,
	AstreaNum                                = 6,
	EDungeonEnvType_MAX                      = 7,
};

// Enum xrd777.EDungeonEventTransOriginType
// NumValues: 0x000A
enum class EDungeonEventTransOriginType : uint8
{
	Part                                     = 0,
	ObjectInfo                               = 1,
	TBox                                     = 2,
	Clock                                    = 3,
	Enemy                                    = 4,
	DirectEnemy                              = 5,
	MissingNPC                               = 6,
	SecretGate                               = 7,
	RefActor                                 = 99,
	EDungeonEventTransOriginType_MAX         = 100,
};

// Enum xrd777.EDungeonObjectInfoType
// NumValues: 0x0003
enum class EDungeonObjectInfoType : uint8
{
	Goal                                     = 0,
	FDoor                                    = 1,
	EDungeonObjectInfoType_MAX               = 2,
};

// Enum xrd777.EDungeonInfoType
// NumValues: 0x0002
enum class EDungeonInfoType : uint8
{
	Object                                   = 0,
	EDungeonInfoType_MAX                     = 1,
};

// Enum xrd777.ELayoutStartType
// NumValues: 0x0009
enum class ELayoutStartType : uint8
{
	StartPart                                = 0,
	Transfer                                 = 1,
	EventBattle                              = 2,
	ForbiddenDoor                            = 3,
	ForbiddenDoorRet                         = 4,
	FreeID                                   = 5,
	Partner                                  = 6,
	FieldEvent                               = 7,
	ELayoutStartType_MAX                     = 8,
};

// Enum xrd777.ELayoutDirType
// NumValues: 0x0005
enum class ELayoutDirType : uint8
{
	Up                                       = 0,
	Left                                     = 1,
	Down                                     = 2,
	Right                                    = 3,
	ELayoutDirType_MAX                       = 4,
};

// Enum xrd777.ELayoutUsageType
// NumValues: 0x0005
enum class ELayoutUsageType : uint8
{
	Normal                                   = 0,
	FixedFloor                               = 1,
	MonadPassage                             = 2,
	ForbiddenDoor                            = 3,
	ELayoutUsageType_MAX                     = 4,
};

// Enum xrd777.ELayoutGroup
// NumValues: 0x0012
enum class ELayoutGroup : uint8
{
	Blank                                    = 0,
	G_01                                     = 1,
	G_02                                     = 2,
	G_03                                     = 3,
	G_04                                     = 4,
	G_05                                     = 5,
	G_06                                     = 6,
	G_07                                     = 7,
	G_08                                     = 8,
	G_09                                     = 9,
	G_10                                     = 10,
	G_11                                     = 11,
	G_12                                     = 12,
	G_13                                     = 13,
	G_14                                     = 14,
	G_15                                     = 15,
	G_16                                     = 16,
	ELayoutGroup_MAX                         = 17,
};

// Enum xrd777.ELayoutType
// NumValues: 0x000E
enum class ELayoutType : uint8
{
	Blank                                    = 0,
	StartPos                                 = 1,
	Enemy                                    = 10,
	DirectEnemy                              = 20,
	EnemyPath                                = 100,
	TBox                                     = 30,
	DirectTBox                               = 40,
	RetDev                                   = 50,
	NPC                                      = 60,
	Broken                                   = 70,
	Reaper                                   = 80,
	Clock                                    = 90,
	SecretGate                               = 110,
	ELayoutType_MAX                          = 111,
};

// Enum xrd777.EDungeonObjType
// NumValues: 0x0014
enum class EDungeonObjType : uint8
{
	Blank                                    = 0,
	TBoxNormal                               = 1,
	TBoxRare                                 = 2,
	TBoxJewelry                              = 3,
	TBoxPrimField                            = 4,
	ReturnDevice                             = 10,
	TransferDevice                           = 11,
	MonadReturnDevice                        = 15,
	MonadTransferDevice                      = 16,
	TBoxMedal1                               = 21,
	TBoxMedal2                               = 22,
	TBoxMedal3                               = 23,
	Broken1                                  = 30,
	Broken2                                  = 31,
	Broken3                                  = 32,
	BrokenFragment                           = 39,
	Clock                                    = 40,
	ClockFloorEntrance                       = 50,
	Gimmick                                  = 100,
	EDungeonObjType_MAX                      = 101,
};

// Enum xrd777.EDungeonLevelPathType
// NumValues: 0x0005
enum class EDungeonLevelPathType : uint8
{
	Blank                                    = 0,
	Floor                                    = 1,
	Environment                              = 2,
	NavMesh                                  = 3,
	EDungeonLevelPathType_MAX                = 4,
};

// Enum xrd777.EDungeonBfBmdPathGroup
// NumValues: 0x0007
enum class EDungeonBfBmdPathGroup : uint8
{
	BattleEnd                                = 0,
	FloorPreLoad                             = 1,
	Hit                                      = 2,
	SupportTalk                              = 3,
	Debug                                    = 4,
	Num                                      = 5,
	EDungeonBfBmdPathGroup_MAX               = 6,
};

// Enum xrd777.EDungeonPathGroup
// NumValues: 0x0009
enum class EDungeonPathGroup : uint8
{
	G_01                                     = 0,
	G_02                                     = 1,
	G_03                                     = 2,
	G_04                                     = 3,
	G_05                                     = 4,
	G_06                                     = 5,
	G_07                                     = 6,
	Num                                      = 7,
	EDungeonPathGroup_MAX                    = 8,
};

// Enum xrd777.EDungeonPathType
// NumValues: 0x002B
enum class EDungeonPathType : uint8
{
	Blank                                    = 0,
	PartNiagara                              = 1,
	Part                                     = 2,
	PartWall                                 = 3,
	FDoorPart                                = 4,
	Environment                              = 5,
	EffectNiagara                            = 6,
	Effect                                   = 7,
	EnemyNiagara                             = 8,
	Enemy                                    = 9,
	Enemy_Unique                             = 10,
	Enemy_Boss                               = 11,
	Enemy_FBD                                = 12,
	TBoxNiagara                              = 13,
	TBoxObj                                  = 14,
	TBox                                     = 15,
	TBoxSE                                   = 16,
	BrokenObjNiagara                         = 17,
	BrokenObj                                = 18,
	ReturnDev                                = 19,
	Clock                                    = 20,
	SecretGate                               = 21,
	CameraAttachNiagara                      = 22,
	SupportSkill                             = 23,
	Reaper                                   = 24,
	AutoRecover                              = 25,
	Partner                                  = 26,
	Missing                                  = 27,
	MisNpcTypeSE                             = 28,
	BfBmd                                    = 29,
	EnemyModel                               = 30,
	BtlEnemyModel                            = 31,
	UI                                       = 32,
	Sprite                                   = 33,
	EncountChara                             = 34,
	BattleResident                           = 35,
	BattleResidentBackLoad                   = 36,
	BattleField                              = 37,
	ParamData                                = 38,
	Niagara                                  = 39,
	CheckMode                                = 40,
	Num                                      = 41,
	EDungeonPathType_MAX                     = 42,
};

// Enum xrd777.EDungeonMisNpcType
// NumValues: 0x000A
enum class EDungeonMisNpcType : uint8
{
	MALE_01                                  = 0,
	MALE_02                                  = 1,
	MALE_03                                  = 2,
	MALE_04                                  = 3,
	FEMALE_01                                = 4,
	FEMALE_02                                = 5,
	FEMALE_03                                = 6,
	FEMALE_04                                = 7,
	CAT_01                                   = 8,
	EDungeonMisNpcType_MAX                   = 9,
};

// Enum xrd777.EDungeonResetDataType
// NumValues: 0x0003
enum class EDungeonResetDataType : uint8
{
	Flag                                     = 0,
	Counter                                  = 1,
	EDungeonResetDataType_MAX                = 2,
};

// Enum xrd777.EDungeonResetTiming
// NumValues: 0x0004
enum class EDungeonResetTiming : uint8
{
	Blank                                    = 0,
	FieldInit                                = 1,
	SetupEnd                                 = 2,
	EDungeonResetTiming_MAX                  = 3,
};

// Enum xrd777.EDungeonTrophyType
// NumValues: 0x0002
enum class EDungeonTrophyType : uint8
{
	ChanceEncount                            = 0,
	EDungeonTrophyType_MAX                   = 1,
};

// Enum xrd777.EPartDirType
// NumValues: 0x0005
enum class EPartDirType : uint8
{
	Up                                       = 0,
	Right                                    = 1,
	Down                                     = 2,
	Left                                     = 3,
	EPartDirType_MAX                         = 4,
};

// Enum xrd777.EPartType
// NumValues: 0x0010
enum class EPartType : uint8
{
	Blank0                                   = 0,
	FloorStart                               = 1,
	Straight                                 = 2,
	Lshape                                   = 3,
	Tshape                                   = 4,
	Croshape                                 = 5,
	DeadEnd                                  = 6,
	RoomA                                    = 7,
	RoomB                                    = 8,
	MissingRoom                              = 9,
	ForbiddenDoor                            = 10,
	FloorEnd                                 = 11,
	Blank12                                  = 12,
	Num                                      = 13,
	Wall                                     = 20,
	EPartType_MAX                            = 21,
};

// Enum xrd777.EDungeonSuondType
// NumValues: 0x0004
enum class EDungeonSuondType : uint8
{
	EnvSE                                    = 0,
	MissingSE                                = 1,
	TBoxSE                                   = 2,
	EDungeonSuondType_MAX                    = 3,
};

// Enum xrd777.EDungeonUIFontStyle
// NumValues: 0x0003
enum class EDungeonUIFontStyle : uint8
{
	Small                                    = 0,
	Medium                                   = 1,
	EDungeonUIFontStyle_MAX                  = 2,
};

// Enum xrd777.EDungeonUISpriteOrigin
// NumValues: 0x0008
enum class EDungeonUISpriteOrigin : uint8
{
	LeftUp                                   = 0,
	RightUp                                  = 1,
	Center                                   = 2,
	LeftCenter                               = 3,
	RightCenter                              = 4,
	CenterDown                               = 5,
	RightDown                                = 6,
	EDungeonUISpriteOrigin_MAX               = 7,
};

// Enum xrd777.EDungeonUIBlendStateType
// NumValues: 0x0004
enum class EDungeonUIBlendStateType : uint8
{
	Default                                  = 0,
	Mul                                      = 1,
	Add                                      = 2,
	EDungeonUIBlendStateType_MAX             = 3,
};

// Enum xrd777.EDungeonUISpriteType
// NumValues: 0x0003
enum class EDungeonUISpriteType : uint8
{
	SituationHelp                            = 0,
	Num                                      = 1,
	EDungeonUISpriteType_MAX                 = 2,
};

// Enum xrd777.EDungeonUIType
// NumValues: 0x0003
enum class EDungeonUIType : uint8
{
	SituationHelp                            = 0,
	Num                                      = 1,
	EDungeonUIType_MAX                       = 2,
};

// Enum xrd777.EFldEnemyState
// NumValues: 0x0006
enum class EFldEnemyState : uint32
{
	None                                     = 0,
	Standby                                  = 1,
	Alive                                    = 2,
	Dead                                     = 3,
	Execution                                = 4,
	EFldEnemyState_MAX                       = 5,
};

// Enum xrd777.EFldEnemyType
// NumValues: 0x0007
enum class EFldEnemyType : uint8
{
	Normal                                   = 0,
	Strong                                   = 1,
	Rare                                     = 2,
	Death                                    = 3,
	Gatekeeper                               = 4,
	ForbiddenDoor                            = 5,
	EFldEnemyType_MAX                        = 6,
};

// Enum xrd777.EFldHitActorIconType
// NumValues: 0x0003
enum class EFldHitActorIconType : uint8
{
	None                                     = 0,
	Quest                                    = 1,
	Max                                      = 2,
};

// Enum xrd777.EFldHitType
// NumValues: 0x0003
enum class EFldHitType : uint8
{
	Normal                                   = 0,
	AreaChange                               = 1,
	EFldHitType_MAX                          = 2,
};

// Enum xrd777.EFldHitCharaHeroMotion
// NumValues: 0x0003
enum class EFldHitCharaHeroMotion : uint8
{
	Speak                                    = 0,
	Listen                                   = 1,
	EFldHitCharaHeroMotion_MAX               = 2,
};

// Enum xrd777.EFldHitCharaIconAttachedType
// NumValues: 0x0008
enum class EFldHitCharaIconAttachedType : uint8
{
	Auto                                     = 0,
	ModelTop                                 = 1,
	ModelNeck                                = 2,
	ModelCenter                              = 3,
	ModelRoot                                = 4,
	CollisionTop                             = 5,
	OwnActor                                 = 6,
	EFldHitCharaIconAttachedType_MAX         = 7,
};

// Enum xrd777.EFldHitCharaIconType
// NumValues: 0x0014
enum class EFldHitCharaIconType : uint8
{
	None                                     = 0,
	Normal                                   = 1,
	Talk                                     = 2,
	Cmm                                      = 3,
	Cmm_Normal                               = 4,
	Cmm_Reverse                              = 5,
	Cmm_Object                               = 6,
	Quest                                    = 7,
	MaleQuest                                = 8,
	MaleQuest_Object                         = 9,
	Dormitory                                = 10,
	Study                                    = 11,
	Koromaru                                 = 12,
	WORD_13                                  = 13,
	WORD_14                                  = 14,
	WORD_15                                  = 15,
	WORD_16                                  = 16,
	Max                                      = 17,
	TargetOnly                               = 18,
	QuestHit                                 = 19,
};

// Enum xrd777.EFldHitCoreCheckIconType
// NumValues: 0x0008
enum class EFldHitCoreCheckIconType : uint8
{
	Check                                    = 0,
	Speak                                    = 1,
	Listen                                   = 2,
	Goto                                     = 3,
	Action                                   = 4,
	Shop                                     = 5,
	None                                     = 6,
	Max                                      = 7,
};

// Enum xrd777.FFldHitCoreHeroDirectType
// NumValues: 0x0008
enum class EFFldHitCoreHeroDirectType : uint8
{
	None                                     = 0,
	Center                                   = 1,
	Front                                    = 2,
	Back                                     = 3,
	Left                                     = 4,
	Right                                    = 5,
	BackNG                                   = 6,
	Max                                      = 7,
};

// Enum xrd777.EFldKeyHelpType
// NumValues: 0x0004
enum class EFldKeyHelpType : uint8
{
	Common                                   = 0,
	Daily                                    = 1,
	Dungeon                                  = 2,
	Max                                      = 3,
};

// Enum xrd777.EFldLevelLoaderType
// NumValues: 0x0003
enum class EFldLevelLoaderType : uint8
{
	Load                                     = 0,
	Unload                                   = 1,
	EFldLevelLoaderType_MAX                  = 2,
};

// Enum xrd777.EFldLoadCrowdType
// NumValues: 0x0008
enum class EFldLoadCrowdType : uint8
{
	Auto                                     = 0,
	Parant                                   = 1,
	Child01                                  = 2,
	Child02                                  = 3,
	Holiday                                  = 4,
	Sale                                     = 5,
	Target                                   = 6,
	Max                                      = 7,
};

// Enum xrd777.EFldLoadPattern
// NumValues: 0x000C
enum class EFldLoadPattern : uint8
{
	All                                      = 0,
	BgOnly                                   = 1,
	BgMob                                    = 2,
	BgHit                                    = 3,
	BgNpc                                    = 4,
	BgCmm                                    = 5,
	KeyFreeEvent                             = 6,
	Dungeon                                  = 7,
	Load                                     = 8,
	ExceptEnv                                = 9,
	TimeChanged                              = 10,
	Max                                      = 11,
};

// Enum xrd777.EShadowSettingCategory
// NumValues: 0x0005
enum class EShadowSettingCategory : uint8
{
	FIELD                                    = 0,
	DUNGEONPARTS                             = 1,
	EVENT_MAIN                               = 2,
	EVENT_CMMU                               = 3,
	EShadowSettingCategory_MAX               = 4,
};

// Enum xrd777.EFldLmapData_QuestType
// NumValues: 0x0004
enum class EFldLmapData_QuestType : uint8
{
	Npc                                      = 0,
	Target                                   = 1,
	Hit                                      = 2,
	EFldLmapData_MAX                         = 3,
};

// Enum xrd777.EFldLmapData_NpcType
// NumValues: 0x0006
enum class EFldLmapData_NpcType : uint8
{
	None                                     = 0,
	MaleQuest                                = 1,
	Dormitory                                = 2,
	Koromaru                                 = 3,
	Quest                                    = 4,
	EFldLmapData_MAX                         = 5,
};

// Enum xrd777.EFldMailOrderType
// NumValues: 0x0003
enum class EFldMailOrderType : uint8
{
	Buy                                      = 0,
	Receive                                  = 1,
	Max                                      = 2,
};

// Enum xrd777.EFldCmnProps
// NumValues: 0x0002
enum class EFldCmnProps : uint8
{
	HeroPhone                                = 0,
	Max                                      = 1,
};

// Enum xrd777.EFldType
// NumValues: 0x0003
enum class EFldType : uint8
{
	DailyField                               = 0,
	DungeonField                             = 1,
	Max                                      = 2,
};

// Enum xrd777.EFldMiniMapType_NPC
// NumValues: 0x000A
enum class EFldMiniMapType_NPC : uint8
{
	Normal                                   = 0,
	Cmm                                      = 1,
	Cmm_Reverse                              = 2,
	MaleQuest                                = 3,
	Dormitory                                = 4,
	Study                                    = 5,
	Koromaru                                 = 6,
	Cmm_Object                               = 7,
	Quest                                    = 8,
	EFldMiniMapType_MAX                      = 9,
};

// Enum xrd777.FFldMiscCharBaseReload_Type
// NumValues: 0x0003
enum class EFFldMiscCharBaseReload_Type : uint8
{
	ALL                                      = 0,
	WeaponOnly                               = 1,
	FFldMiscCharBaseReload_MAX               = 2,
};

// Enum xrd777.EFldNpcActorType
// NumValues: 0x0005
enum class EFldNpcActorType : uint8
{
	Normal                                   = 0,
	Special                                  = 1,
	Target                                   = 2,
	Hit                                      = 3,
	EFldNpcActorType_MAX                     = 4,
};

// Enum xrd777.EFldNpcModelType
// NumValues: 0x0004
enum class EFldNpcModelType : uint8
{
	Main                                     = 0,
	Sub                                      = 1,
	ColorMob                                 = 2,
	EFldNpcModelType_MAX                     = 3,
};

// Enum xrd777.EFldOperatorKeyState
// NumValues: 0x0005
enum class EFldOperatorKeyState : uint32
{
	None                                     = 0,
	Disable                                  = 1,
	EnablePrepare                            = 2,
	Enable                                   = 3,
	EFldOperatorKeyState_MAX                 = 4,
};

// Enum xrd777.EFldOperatorState
// NumValues: 0x0010
enum class EFldOperatorState : uint32
{
	None                                     = 0,
	Free                                     = 1,
	Encounting                               = 2,
	DailyMenu                                = 3,
	DungeonMenu                              = 4,
	AutoRecover                              = 5,
	Camp                                     = 6,
	LargeMap                                 = 7,
	BackLog                                  = 8,
	VoiceActionDisp                          = 9,
	Save                                     = 10,
	Battle                                   = 11,
	Event                                    = 12,
	EventEnd                                 = 13,
	DebugCamera                              = 14,
	EFldOperatorState_MAX                    = 15,
};

// Enum xrd777.EFldOperatorEncountType
// NumValues: 0x0007
enum class EFldOperatorEncountType : uint32
{
	None                                     = 0,
	Normal                                   = 1,
	Chance                                   = 2,
	Assault                                  = 3,
	AssaultChance                            = 4,
	Pinch                                    = 5,
	EFldOperatorEncountType_MAX              = 6,
};

// Enum xrd777.EFldPartnerBehavior
// NumValues: 0x0007
enum class EFldPartnerBehavior : uint32
{
	None                                     = 0,
	Idel                                     = 1,
	TrackingFar                              = 2,
	TrackingNear                             = 3,
	Avoid                                    = 4,
	Adjustment                               = 5,
	EFldPartnerBehavior_MAX                  = 6,
};

// Enum xrd777.EFldPartnerState
// NumValues: 0x0005
enum class EFldPartnerState : uint32
{
	None                                     = 0,
	Standby                                  = 1,
	EndBattle                                = 2,
	Execution                                = 3,
	EFldPartnerState_MAX                     = 4,
};

// Enum xrd777.ESearchPriority
// NumValues: 0x0003
enum class ESearchPriority : uint8
{
	Standard                                 = 0,
	Enemy                                    = 1,
	ESearchPriority_MAX                      = 2,
};

// Enum xrd777.EFldPlayerSpeedState
// NumValues: 0x0006
enum class EFldPlayerSpeedState : uint8
{
	None                                     = 0,
	Walk                                     = 1,
	Run                                      = 2,
	Dash                                     = 3,
	Assault                                  = 4,
	EFldPlayerSpeedState_MAX                 = 5,
};

// Enum xrd777.EFldPlayerState
// NumValues: 0x0005
enum class EFldPlayerState : uint32
{
	None                                     = 0,
	Standby                                  = 1,
	EndBattle                                = 2,
	Execution                                = 3,
	EFldPlayerState_MAX                      = 4,
};

// Enum xrd777.EFldPlayerDailyBehavior
// NumValues: 0x0004
enum class EFldPlayerDailyBehavior : uint32
{
	None                                     = 0,
	Free                                     = 1,
	Turn                                     = 2,
	EFldPlayerDailyBehavior_MAX              = 3,
};

// Enum xrd777.EFldPlayerDngBehavior
// NumValues: 0x000C
enum class EFldPlayerDngBehavior : uint32
{
	None                                     = 0,
	Free                                     = 1,
	Turn                                     = 2,
	Brake                                    = 3,
	Braking                                  = 4,
	BrakingTurn                              = 5,
	BrakingEnd                               = 6,
	Attack                                   = 7,
	Attacking                                = 8,
	Encount                                  = 9,
	Encounting                               = 10,
	EFldPlayerDngBehavior_MAX                = 11,
};

// Enum xrd777.EFldPoolPackType
// NumValues: 0x0005
enum class EFldPoolPackType : uint8
{
	Common                                   = 0,
	Daily                                    = 1,
	Dungeon_01                               = 2,
	Dungeon_02                               = 3,
	Max                                      = 4,
};

// Enum xrd777.EFldShortcutResult
// NumValues: 0x0005
enum class EFldShortcutResult : uint8
{
	Success                                  = 0,
	Failed                                   = 1,
	TownMap                                  = 2,
	NowField                                 = 3,
	EFldShortcutResult_MAX                   = 4,
};

// Enum xrd777.ELibraSaveDataState
// NumValues: 0x0004
enum class ELibraSaveDataState : uint8
{
	NoLibraSaveData                          = 0,
	HaveLibraSaveData                        = 1,
	HaveLibraClearSaveData                   = 2,
	ELibraSaveDataState_MAX                  = 3,
};

// Enum xrd777.EPlatFormIndex
// NumValues: 0x0007
enum class EPlatFormIndex : uint8
{
	WIN                                      = 0,
	PS4                                      = 1,
	PS5                                      = 2,
	WIN_GDK                                  = 3,
	XBOX_ONE                                 = 4,
	XSX                                      = 5,
	MAX                                      = 6,
};

// Enum xrd777.ESubLevelIndex
// NumValues: 0x000A
enum class ESubLevelIndex : uint8
{
	TITLE                                    = 0,
	Battle                                   = 1,
	Field                                    = 2,
	BC_Event                                 = 3,
	A_Event                                  = 4,
	Dungeon                                  = 5,
	UI_Weapon                                = 6,
	UI_Conbine                               = 7,
	SubLevelIndexMAX                         = 8,
	ESubLevelIndex_MAX                       = 9,
};

// Enum xrd777.EGWorkSeqType
// NumValues: 0x0005
enum class EGWorkSeqType : uint8
{
	Battle                                   = 0,
	Field                                    = 1,
	Event                                    = 2,
	KeyFreeEvent                             = 3,
	EGWorkSeqType_MAX                        = 4,
};

// Enum xrd777.EGWorkOnOffEnum
// NumValues: 0x0003
enum class EGWorkOnOffEnum : uint8
{
	On                                       = 0,
	Off                                      = 1,
	EGWorkOnOffEnum_MAX                      = 2,
};

// Enum xrd777.EHandwritingLayout
// NumValues: 0x001C
enum class EHandwritingLayout : uint8
{
	GROAN_1_POS_ROT                          = 0,
	GROAN_1_SCALE                            = 1,
	GROAN_2_POS_ROT                          = 2,
	GROAN_2_SCALE                            = 3,
	MUMBLE_1_POS_ROT                         = 4,
	MUMBLE_1_SCALE                           = 5,
	MUMBLE_2_POS_ROT                         = 6,
	MUMBLE_2_SCALE                           = 7,
	DOORKNOCK_1                              = 8,
	DOORKNOCK_2                              = 9,
	CALLING_1                                = 10,
	CALLING_2                                = 11,
	CALLING_3                                = 12,
	WOOF_1                                   = 13,
	WOOF_2                                   = 14,
	WOOF_3                                   = 15,
	WOOF_4                                   = 16,
	WHINE_POS                                = 17,
	WHINE_SCALE                              = 18,
	BUZZ_1_POS                               = 19,
	BUZZ_1_SCALE                             = 20,
	BUZZ_2_POS                               = 21,
	BUZZ_2_SCALE                             = 22,
	DOUBLE_EXCLAMATION_POS                   = 23,
	EXCLAMATION_QUESTION_POS                 = 24,
	EXCLAMATION_QUESTION_SCALE               = 25,
	QUESTION_POS                             = 26,
	Max                                      = 27,
};

// Enum xrd777.EHandwritingSpawnRules
// NumValues: 0x0003
enum class EHandwritingSpawnRules : uint8
{
	SpawnWorldLocation                       = 0,
	AttachToSpawner                          = 1,
	EHandwritingSpawnRules_MAX               = 2,
};

// Enum xrd777.EAtlEvtHandwritingType
// NumValues: 0x0010
enum class EAtlEvtHandwritingType : uint8
{
	AngerMark                                = 0,
	AngerMark_01                             = 1,
	Calling                                  = 2,
	DoorKnock_00                             = 3,
	Exclamation_00                           = 4,
	Sweat_00                                 = 5,
	DoubleExclamation_00                     = 6,
	Question_00                              = 7,
	ExclamationQuestion_00                   = 8,
	Sweat_01                                 = 9,
	Woof_00                                  = 10,
	Whine_00                                 = 11,
	Zzz_00                                   = 12,
	Ittitate_00                              = 13,
	AccessIcon_Listen                        = 14,
	EAtlEvtHandwritingType_MAX               = 15,
};

// Enum xrd777.EAtlHandwritingGroupType
// NumValues: 0x0004
enum class EAtlHandwritingGroupType : uint8
{
	Default                                  = 0,
	Field                                    = 1,
	Event                                    = 2,
	EAtlHandwritingGroupType_MAX             = 3,
};

// Enum xrd777.EItemShopText
// NumValues: 0x0003
enum class EItemShopText : uint8
{
	ITEM_NAME                                = 0,
	ITEM_HELP                                = 1,
	Max                                      = 2,
};

// Enum xrd777.EItemShopLayout
// NumValues: 0x0003
enum class EItemShopLayout : uint8
{
	ITEM_DETAIL_POS                          = 0,
	ITEM_DETAIL_ROW                          = 1,
	Max                                      = 2,
};

// Enum xrd777.EMsgProcWindowLayout_MIND
// NumValues: 0x0004
enum class EMsgProcWindowLayout_MIND : uint8
{
	MSG_OFFSET                               = 0,
	MSG_ROW                                  = 1,
	SELECT_OFS                               = 2,
	Max                                      = 3,
};

// Enum xrd777.EMsgProcWindowLayout_DIALOG
// NumValues: 0x0003
enum class EMsgProcWindowLayout_DIALOG : uint8
{
	TITLE_TEXT                               = 0,
	MAIN_TEXT                                = 1,
	Max                                      = 2,
};

// Enum xrd777.EMsgProcWindowLayout_SELECT
// NumValues: 0x0005
enum class EMsgProcWindowLayout_SELECT : uint8
{
	SELECT_TEXT_COL                          = 0,
	NON_SELECT_TEXT_COL                      = 1,
	SELECT_TEXT_OFFSET                       = 2,
	NON_SELECT_TEXT_OFFSET                   = 3,
	Max                                      = 4,
};

// Enum xrd777.EMsgProcWindowLayout_SIMPLE
// NumValues: 0x0004
enum class EMsgProcWindowLayout_SIMPLE : uint8
{
	MSG_TEXT_COL                             = 0,
	MSG_OFFSET                               = 1,
	MSG_ROW                                  = 2,
	Max                                      = 3,
};

// Enum xrd777.EMsgProcWindowLayout_ASSIST
// NumValues: 0x0004
enum class EMsgProcWindowLayout_ASSIST : uint8
{
	ASSIST_POSITION                          = 0,
	LINE_SPACE_OFFSET                        = 1,
	SUPPORT_INTERVAL                         = 2,
	Max                                      = 3,
};

// Enum xrd777.EMsgProcWindowTextColLayout_ASSIST
// NumValues: 0x0002
enum class EMsgProcWindowTextColLayout_ASSIST : uint8
{
	TEXT_SIZE                                = 0,
	Max                                      = 1,
};

// Enum xrd777.PAGE_MOVE_TYPE
// NumValues: 0x0004
enum class EPAGE_MOVE_TYPE : uint8
{
	PREV_MOVE                                = 0,
	NEXT_MOVE                                = 1,
	PAGE_MOVE_TYPE_MAX                       = 2,
	PAGE_MOVE_MAX                            = 3,
};

// Enum xrd777.INDEX_SIZE
// NumValues: 0x0005
enum class EINDEX_SIZE : uint8
{
	SMALL                                    = 0,
	NORMAL                                   = 1,
	LARGE                                    = 2,
	MAX_INDEX_SIZE                           = 3,
	INDEX_MAX                                = 4,
};

// Enum xrd777.PAGE_MOVE
// NumValues: 0x0007
enum class EPAGE_MOVE : uint8
{
	BASE_PAGE_MOVE                           = 0,
	THUM_PAGE_MOVE_X                         = 1,
	THUM_PAGE_MOVE_Y                         = 2,
	BUTTON_PAGE_MOVE                         = 3,
	BASE_PAGE_MOVE_NEXT                      = 4,
	PAGE_MOVE_MAX                            = 5,
	PAGE_MAX                                 = 6,
};

// Enum xrd777.FADE_ANIM
// NumValues: 0x0005
enum class EFADE_ANIM : uint8
{
	FADE_ANIM_IN                             = 0,
	FADE_ANIM_IN_WATE                        = 1,
	FADE_ANIM_OUT                            = 2,
	FADE_ANIM_OUT_WATE                       = 3,
	FADE_ANIM_MAX                            = 4,
};

// Enum xrd777.FADE_MOVE
// NumValues: 0x0006
enum class EFADE_MOVE : uint8
{
	BASE_MOVE_POSX                           = 0,
	THUM_MOVE_POSX                           = 1,
	THUM_MOVE_POSY                           = 2,
	THUM_ANGLE                               = 3,
	FADE_MOVE_MAX                            = 4,
	FADE_MAX                                 = 5,
};

// Enum xrd777.FADE_ALPHA
// NumValues: 0x000B
enum class EFADE_ALPHA : uint8
{
	NAVY_ALPHA                               = 0,
	GRAD_ALPHA                               = 1,
	UNDER_SHADOW_ALPHA                       = 2,
	BASE_ALPHA                               = 3,
	BUTTON_ALPHA                             = 4,
	TEXT_ALPHA                               = 5,
	THUM_ALPHA                               = 6,
	GROUND_ALPHA                             = 7,
	TEXT_ALPHA_NEXT                          = 8,
	FADE_ALPHA_MAX                           = 9,
	FADE_MAX                                 = 10,
};

// Enum xrd777.TUTRIAL_SCENE
// NumValues: 0x0005
enum class ETUTRIAL_SCENE : uint8
{
	FADE_IN                                  = 0,
	DRAWING                                  = 1,
	FADE_OUT                                 = 2,
	SCENE_MAX                                = 3,
	TUTRIAL_MAX                              = 4,
};

// Enum xrd777.ESystemLanguage
// NumValues: 0x000E
enum class ESystemLanguage : uint8
{
	Japanese                                 = 0,
	English                                  = 1,
	French                                   = 2,
	Italian                                  = 3,
	German                                   = 4,
	Spanish                                  = 5,
	SimplifiedChinese                        = 6,
	TraditionalChinese                       = 7,
	Korean                                   = 8,
	Russian                                  = 9,
	Portuguese                               = 10,
	Turkish                                  = 11,
	Polish                                   = 12,
	Max                                      = 13,
};

// Enum xrd777.ELOADTRANCE
// NumValues: 0x0004
enum class ELOADTRANCE : uint8
{
	SCENE_START                              = 0,
	SCENE_WATE                               = 1,
	SCENE_END                                = 2,
	SCENE_MAX                                = 3,
};

// Enum xrd777.TIMESHIFTPARAM
// NumValues: 0x0005
enum class ETIMESHIFTPARAM : uint8
{
	MORNING                                  = 0,
	EVENING                                  = 1,
	NIGHT                                    = 2,
	SHADOWHOUR                               = 3,
	TIMESHIFTPARAM_MAX                       = 4,
};

// Enum xrd777.ETagType
// NumValues: 0x0005
enum class ETagType : uint16
{
	TITLE                                    = 1,
	NAME                                     = 2,
	TEXTURE                                  = 3,
	SPACE                                    = 999,
	ETagType_MAX                             = 1000,
};

// Enum xrd777.EMailText
// NumValues: 0x0005
enum class EMailText : uint8
{
	MAIL_LIST_SENDER                         = 0,
	MAIL_LIST_TITLE                          = 1,
	MAIL_SENDER                              = 2,
	MAIL_TITLE                               = 3,
	Max                                      = 4,
};

// Enum xrd777.EMailLayout
// NumValues: 0x0007
enum class EMailLayout : uint8
{
	MAIL_NEW_MESSAGE                         = 0,
	MAIL_LIST_TITLE                          = 1,
	MAIL_TITLE                               = 2,
	MAIL_LIST_SENDER                         = 3,
	MAIL_SENDER                              = 4,
	MAIL_TODAYS                              = 5,
	Max                                      = 6,
};

// Enum xrd777.EEvtAdxSoundFadeType
// NumValues: 0x0004
enum class EEvtAdxSoundFadeType : uint8
{
	FADE_IN                                  = 0,
	FADE_OUT                                 = 1,
	STOP_BGM                                 = 2,
	EEvtAdxSoundFadeType_MAX                 = 3,
};

// Enum xrd777.EAtlCharaAnimFireEventsAtPosition
// NumValues: 0x0004
enum class EAtlCharaAnimFireEventsAtPosition : uint8
{
	AtStartOfEvaluation                      = 0,
	AtEndOfEvaluation                        = 1,
	AfterSpawn                               = 2,
	EAtlCharaAnimFireEventsAtPosition_MAX    = 3,
};

// Enum xrd777.EEvtCharaHandwritingSpawnOwnerType
// NumValues: 0x0004
enum class EEvtCharaHandwritingSpawnOwnerType : uint8
{
	CharacterDefault                         = 0,
	Character                                = 1,
	SpawnerDirectRequest                     = 2,
	EEvtCharaHandwritingSpawnOwnerType_MAX   = 3,
};

// Enum xrd777.EEvtCharaOperationFootStepLabelType
// NumValues: 0x0004
enum class EEvtCharaOperationFootStepLabelType : uint8
{
	Dynamic                                  = 0,
	Carpet                                   = 1,
	Concrete                                 = 2,
	EEvtCharaOperationFootStepLabelType_MAX  = 3,
};

// Enum xrd777.EEvtCharaOperationType
// NumValues: 0x0003
enum class EEvtCharaOperationType : uint8
{
	Invalid                                  = 0,
	OverwriteFootStepLabel                   = 1,
	EEvtCharaOperationType_MAX               = 2,
};

// Enum xrd777.EEvtCharaAnimationPackIDType
// NumValues: 0x0004
enum class EEvtCharaAnimationPackIDType : uint8
{
	Event                                    = 0,
	Common                                   = 1,
	Dungeon                                  = 2,
	EEvtCharaAnimationPackIDType_MAX         = 3,
};

// Enum xrd777.EAtlCharaFaceAnimFireEventsAtPosition
// NumValues: 0x0004
enum class EAtlCharaFaceAnimFireEventsAtPosition : uint8
{
	AtStartOfEvaluation                      = 0,
	AtEndOfEvaluation                        = 1,
	AfterSpawn                               = 2,
	EAtlCharaFaceAnimFireEventsAtPosition_MAX = 3,
};

// Enum xrd777.EEvtConditionalBranchType
// NumValues: 0x0006
enum class EEvtConditionalBranchType : uint8
{
	AlwaysExecute                            = 0,
	DoNotExecute                             = 1,
	RefFromLocal                             = 2,
	RefFromGlobalFlag                        = 3,
	RefFromGlobalCounter                     = 4,
	EEvtConditionalBranchType_MAX            = 5,
};

// Enum xrd777.EFireEventsAtPositionggg
// NumValues: 0x0004
enum class EFireEventsAtPositionggg : uint8
{
	AtStartOfEvaluation                      = 0,
	AtEndOfEvaluation                        = 1,
	AfterSpawn                               = 2,
	EFireEventsAtPositionggg_MAX             = 3,
};

// Enum xrd777.EEvtFadeScreenType
// NumValues: 0x0005
enum class EEvtFadeScreenType : uint8
{
	EVT_FADESCREEN_FADE_IN                   = 0,
	EVT_FADESCREEN_FADE_OUT                  = 1,
	EVT_FADESCREEN_CROSSFADE_IN              = 2,
	EVT_FADESCREEN_CROSSFADE_OUT             = 3,
	EVT_FADESCREEN_MAX                       = 4,
};

// Enum xrd777.EEvtMovieOperation
// NumValues: 0x0004
enum class EEvtMovieOperation : uint8
{
	Play                                     = 0,
	Pause                                    = 1,
	Resume                                   = 2,
	EEvtMovieOperation_MAX                   = 3,
};

// Enum xrd777.EEvtSeqControllerOperation
// NumValues: 0x000A
enum class EEvtSeqControllerOperation : uint8
{
	Invalid                                  = 0,
	WaitingMessage                           = 1,
	FinishSequencer                          = 2,
	PlayAndJumpToSec                         = 3,
	Pause                                    = 4,
	ViewFieldCamera                          = 5,
	ViewSequencerCamera                      = 6,
	TransitionLightScenarioSublevel          = 7,
	WaitTransitionLightScenarioSublevel      = 8,
	EEvtSeqControllerOperation_MAX           = 9,
};

// Enum xrd777.EEvtSeqTimeJumpControllerOperation
// NumValues: 0x0005
enum class EEvtSeqTimeJumpControllerOperation : uint8
{
	TimeJump                                 = 0,
	TimeJumpMarker                           = 1,
	Invalid                                  = 2,
	SkipAndTimeJump                          = 3,
	EEvtSeqTimeJumpControllerOperation_MAX   = 4,
};

// Enum xrd777.EPlatformName
// NumValues: 0x0008
enum class EPlatformName : uint8
{
	PN_STEAM                                 = 0,
	PN_WINGDK                                = 1,
	PN_PS4                                   = 2,
	PN_PS5                                   = 3,
	PN_XBOXONE                               = 4,
	PN_XSX                                   = 5,
	PN_COUNT                                 = 6,
	PN_MAX                                   = 7,
};

// Enum xrd777.ANIMFADEALPHA_RN
// NumValues: 0x0007
enum class EANIMFADEALPHA_RN : uint8
{
	BLACKBOARD_ALPHA                         = 0,
	BLUEBOARD_ALPHA                          = 1,
	GRADATION_ALPHA                          = 2,
	SCROLLBAR_ALPHA                          = 3,
	MAINTEXT_ALPHA                           = 4,
	FADE_ALPHA_MAX                           = 5,
	ANIMFADEALPHA_MAX                        = 6,
};

// Enum xrd777.ANIMFADEMOVE_RN
// NumValues: 0x0007
enum class EANIMFADEMOVE_RN : uint8
{
	BLACKBOARD_POS                           = 0,
	BLUEBOARD_POS                            = 1,
	BLUEBOARD_ROLL                           = 2,
	SCROLLBAR_POS                            = 3,
	MAINTEX_POS                              = 4,
	FADE_MOVE_MAX                            = 5,
	ANIMFADEMOVE_MAX                         = 6,
};

// Enum xrd777.ASSETDATATYPE_RN
// NumValues: 0x0003
enum class EASSETDATATYPE_RN : uint8
{
	RightsNotationType                       = 0,
	DayTypeMax                               = 1,
	ASSETDATATYPE_MAX                        = 2,
};

// Enum xrd777.STATEDRAW
// NumValues: 0x0005
enum class ESTATEDRAW : uint8
{
	FADE_IN                                  = 0,
	DRAW_WATE                                = 1,
	FADE_OUT                                 = 2,
	MAX_STATE                                = 3,
	STATEDRAW_MAX                            = 4,
};

// Enum xrd777.TEXTUREID
// NumValues: 0x0011
enum class ETEXTUREID : uint8
{
	NONE                                     = 0,
	FLOWER                                   = 1,
	SUPPLIES                                 = 2,
	FOOD                                     = 3,
	DRINK1                                   = 4,
	DRINK2                                   = 5,
	DRINK3                                   = 6,
	DRINK4                                   = 7,
	DRINK5                                   = 8,
	OMIYAGE                                  = 9,
	DRINK6                                   = 10,
	DRINK7                                   = 11,
	UMIUSI                                   = 12,
	PCSOFTWARE                               = 13,
	GOSSIP                                   = 14,
	JEWELRY                                  = 15,
	TEXTUREID_MAX                            = 16,
};

// Enum xrd777.TIMEPARM
// NumValues: 0x0004
enum class ETIMEPARM : uint8
{
	NIGHT                                    = 0,
	DAYTIME                                  = 1,
	MORNING                                  = 2,
	MAX                                      = 3,
};

// Enum xrd777.EsoundPlayerType
// NumValues: 0x0007
enum class EsoundPlayerType : uint8
{
	BGM                                      = 0,
	ENV                                      = 1,
	SE                                       = 2,
	VOICE                                    = 3,
	OTHER                                    = 4,
	NONE                                     = 5,
	EsoundPlayerType_MAX                     = 6,
};

// Enum xrd777.ESteamControllerType
// NumValues: 0x000E
enum class ESteamControllerType : uint8
{
	None                                     = 0,
	NoCont                                   = 1,
	Unknown                                  = 2,
	Steam                                    = 3,
	XBOX360                                  = 4,
	XBOX_ONE                                 = 5,
	XInput                                   = 6,
	PS4                                      = 7,
	PS5                                      = 8,
	SwitchPro                                = 9,
	DirectInput                              = 10,
	Other                                    = 11,
	Keyboard                                 = 12,
	ESteamControllerType_MAX                 = 13,
};

// Enum xrd777.ESystemFontType
// NumValues: 0x0007
enum class ESystemFontType : uint8
{
	SkipStd                                  = 0,
	AsiaKSJ_B                                = 1,
	DFGBJH8                                  = 2,
	DFT_C8                                   = 3,
	Amrys_Medium                             = 4,
	SkipPro                                  = 5,
	ESystemFontType_MAX                      = 6,
};

// Enum xrd777.ETCSSaveDataTCRJobType
// NumValues: 0x0004
enum class ETCSSaveDataTCRJobType : uint8
{
	NONE                                     = 0,
	WRITE                                    = 1,
	READ                                     = 2,
	ETCSSaveDataTCRJobType_MAX               = 3,
};

// Enum xrd777.ETCSSaveDataTCRModeType
// NumValues: 0x0009
enum class ETCSSaveDataTCRModeType : uint8
{
	NONE                                     = 0,
	INIT_WEB_API                             = 1,
	SYNC_WEB_API                             = 2,
	INIT_WRITE_TCR                           = 3,
	SYNC_WRITE_TCR                           = 4,
	INIT_READ_TCR                            = 5,
	SYNC_READ_TCR                            = 6,
	END                                      = 7,
	ETCSSaveDataTCRModeType_MAX              = 8,
};

// Enum xrd777.ETitleLayout
// NumValues: 0x0013
enum class ETitleLayout : uint8
{
	PRESS_ANY_BUTTON_END_POS                 = 0,
	PRESS_ANY_BUTTON_POS_OFFSET              = 1,
	LIST_NEW_GAME                            = 2,
	LIST_LOAD_GAME                           = 3,
	LIST_CONFIG                              = 4,
	LIST_CURSOR                              = 5,
	MASK_WIDTH                               = 6,
	PRESS_ANY_BUTTON_MASK_WIDTH              = 7,
	PS_PRESS_ANY_BUTTON_END_POS              = 8,
	PS_PRESS_ANY_BUTTON_POS_OFFSET           = 9,
	PS_PRESS_ANY_BUTTON_MASK_WIDTH           = 10,
	LIST_EPISODE_AEGIS                       = 11,
	LIST_EPISODE_YOURSELF                    = 12,
	LIST_ROOT_POS_AEGIS                      = 13,
	LIST_ROOT_POS_YOURSELF                   = 14,
	LIST_CURSOR_AEGIS                        = 15,
	LIST_CURSOR_YOURSELF                     = 16,
	MASK_WIDTH_AEGIS                         = 17,
	MAX                                      = 18,
};

// Enum xrd777.ETitleState
// NumValues: 0x0013
enum class ETitleState : uint8
{
	TS_Caution                               = 0,
	TS_PhotosensitiveCaution                 = 1,
	TS_NetworkCheck                          = 2,
	TS_Logo                                  = 3,
	TS_OP                                    = 4,
	TS_PressWait                             = 5,
	TS_Select                                = 6,
	TS_NewGame                               = 7,
	TS_LoadGame                              = 8,
	TS_Config                                = 9,
	TS_Exit                                  = 10,
	TS_ComeBackLoad                          = 11,
	TS_WaitGamerTag                          = 12,
	TS_ResidentReload                        = 13,
	TS_OP_Astrea                             = 14,
	TS_PressWait_Astrea                      = 15,
	TS_Select_Astrea                         = 16,
	TS_Num                                   = 17,
	TS_MAX                                   = 18,
};

// Enum xrd777.ETitleMenueState
// NumValues: 0x0009
enum class ETitleMenueState : uint8
{
	TM_NewGame                               = 0,
	TM_LoadGame                              = 1,
	TM_Config                                = 2,
	TM_EpisodeAegis                          = 3,
	TM_ExitGameDialog                        = 4,
	TM_RightsNotation                        = 5,
	TM_Localization                          = 6,
	TM_Num                                   = 7,
	TM_MAX                                   = 8,
};

// Enum xrd777.ETitleMenueStateAstrea
// NumValues: 0x0009
enum class ETitleMenueStateAstrea : uint8
{
	TM_NewGame                               = 0,
	TM_LoadGame                              = 1,
	TM_Config                                = 2,
	TM_EpisodeYouSelf                        = 3,
	TM_ExitGameDialog                        = 4,
	TM_RightsNotation                        = 5,
	TM_Localization                          = 6,
	TM_Num                                   = 7,
	TM_MAX                                   = 8,
};

// Enum xrd777.EAccessInfoPlaceNameWidthType
// NumValues: 0x0003
enum class EAccessInfoPlaceNameWidthType : uint8
{
	FIXED_WIDTH                              = 0,
	PROPORTIONAL                             = 1,
	EAccessInfoPlaceNameWidthType_MAX        = 2,
};

// Enum xrd777.EAccessInfoCarNoDisplayType
// NumValues: 0x0003
enum class EAccessInfoCarNoDisplayType : uint8
{
	CAR_NO_LAST                              = 0,
	CAR_NO_FIRST                             = 1,
	CAR_NO_MAX                               = 2,
};

// Enum xrd777.ANIMFADEALPHA
// NumValues: 0x000D
enum class EANIMFADEALPHA : uint8
{
	BLACKBOARD_ALPHA                         = 0,
	BLUEBOARD_ALPHA                          = 1,
	GRADATION_ALPHA                          = 2,
	DAY_ALPHA                                = 3,
	SCROLLBAR_ALPHA                          = 4,
	LOG_ALPHA                                = 5,
	ICON_ALPHA                               = 6,
	NONE_ALPHA                               = 7,
	DECO_ALPHA                               = 8,
	CURSOR_WHITE_ALPHA                       = 9,
	CURSOR_BLUE_ALPHA                        = 10,
	FADE_ALPHA_MAX                           = 11,
	ANIMFADEALPHA_MAX                        = 12,
};

// Enum xrd777.ANIMFADEMOVE
// NumValues: 0x000D
enum class EANIMFADEMOVE : uint8
{
	BLACKBOARD_POS                           = 0,
	BLUEBOARD_POS                            = 1,
	BLUEBOARD_ROLL                           = 2,
	DAY_POS                                  = 3,
	SCROLLBAR_POS                            = 4,
	LOG_POS                                  = 5,
	ICON_POS                                 = 6,
	NONE_POS                                 = 7,
	DECO_POS                                 = 8,
	CURSOR_WHITE_POS                         = 9,
	CURSOR_BLUE_POS                          = 10,
	FADE_MOVE_MAX                            = 11,
	ANIMFADEMOVE_MAX                         = 12,
};

// Enum xrd777.ANIMFADE
// NumValues: 0x0005
enum class EANIMFADE : uint8
{
	FADE_ANIM_IN                             = 0,
	FADE_ANIM_OUT                            = 1,
	FADE_ANIM_IN_WATE                        = 2,
	FADE_ANIM_OUT_WATE                       = 3,
	FADE_ANIM_MAX                            = 4,
};

// Enum xrd777.ASSETDATATYPE
// NumValues: 0x0005
enum class EASSETDATATYPE : uint8
{
	BackLogType                              = 0,
	FieldDayType                             = 1,
	FieldDayTypeAstrea                       = 2,
	DayTypeMax                               = 3,
	ASSETDATATYPE_MAX                        = 4,
};

// Enum xrd777.WAVETYPE
// NumValues: 0x0005
enum class EWAVETYPE : uint8
{
	FIRST                                    = 0,
	SECOND                                   = 1,
	THIRD                                    = 2,
	MAX_WAVETYPE                             = 3,
	WAVETYPE_MAX                             = 4,
};

// Enum xrd777.DRAWSTATE
// NumValues: 0x0005
enum class EDRAWSTATE : uint8
{
	DRAW_FADE_IN                             = 0,
	DRAW_WATE                                = 1,
	DRAW_FADE_OUT                            = 2,
	MAX_STATE                                = 3,
	DRAWSTATE_MAX                            = 4,
};

// Enum xrd777.EUICmmRankUpSE
// NumValues: 0x000C
enum class EUICmmRankUpSE : uint8
{
	UI_CMM_SE_CARD_SET                       = 0,
	UI_CMM_SE_CARD_ROTETION                  = 1,
	UI_CMM_SE_RANKUP_FALL                    = 2,
	UI_CMM_SE_RANKUP_INSTRING                = 3,
	UI_CMM_SE_RANKUP_MAXSTAR                 = 4,
	UI_CMM_SE_RANKUP_INSTAR                  = 5,
	UI_CMM_SE_REVERSE_FALL                   = 6,
	UI_CMM_SE_REVERSE_BGCHANGE               = 7,
	UI_CMM_SE_REVERSE_INSTRING               = 8,
	UI_CMM_SE_REVERSE_ROTATION               = 9,
	UI_CMM_SE_RECOVERY_ROTATION              = 10,
	UI_CMM_SE_MAX                            = 11,
};

// Enum xrd777.EAnimationType
// NumValues: 0x0003
enum class EAnimationType : uint8
{
	Physics                                  = 0,
	Magic                                    = 1,
	EAnimationType_MAX                       = 2,
};

// Enum xrd777.ECmmProfileMsgType
// NumValues: 0x0005
enum class ECmmProfileMsgType : uint8
{
	Normal                                   = 0,
	Reverse                                  = 1,
	Missing                                  = 2,
	Lost                                     = 3,
	ECmmProfileMsgType_MAX                   = 4,
};

// Enum xrd777.EQuestRequestOption
// NumValues: 0x0003
enum class EQuestRequestOption : uint8
{
	None                                     = 0,
	Erase                                    = 1,
	EQuestRequestOption_MAX                  = 2,
};

// Enum xrd777.EQuestRequestPersonaType
// NumValues: 0x0005
enum class EQuestRequestPersonaType : uint8
{
	None                                     = 0,
	Has                                      = 1,
	Skill                                    = 2,
	Level                                    = 3,
	EQuestRequestPersonaType_MAX             = 4,
};

// Enum xrd777.EQuestRequestType
// NumValues: 0x0005
enum class EQuestRequestType : uint8
{
	Event                                    = 0,
	Item                                     = 1,
	Persona                                  = 2,
	Counter                                  = 3,
	EQuestRequestType_MAX                    = 4,
};

// Enum xrd777.EMailCategory
// NumValues: 0x0005
enum class EMailCategory : uint8
{
	Community                                = 0,
	DeepEpisode                              = 1,
	Facility                                 = 2,
	Common                                   = 3,
	Max                                      = 4,
};

// Enum xrd777.EMailCondition
// NumValues: 0x0007
enum class EMailCondition : uint8
{
	Equal                                    = 0,
	NotEqual                                 = 1,
	Greater                                  = 2,
	EGreater                                 = 3,
	Less                                     = 4,
	ELess                                    = 5,
	EMailCondition_MAX                       = 6,
};

// Enum xrd777.EMailTime
// NumValues: 0x0004
enum class EMailTime : uint8
{
	Morning                                  = 0,
	Noon                                     = 1,
	Night                                    = 2,
	EMailTime_MAX                            = 3,
};

// Enum xrd777.UIActionSuggestionLayout
// NumValues: 0x0004
enum class EUIActionSuggestionLayout : uint8
{
	ACTION_SUGGESTION_TEXT                   = 0,
	ACTION_SUGGESTION_TEXT_POS_Y             = 1,
	ACTION_SUGGESTION_ICON_POS_Y             = 2,
	Max                                      = 3,
};

// Enum xrd777.EUI_OT_TYPE
// NumValues: 0x0022
enum class EUI_OT_TYPE : uint8
{
	EUI_Defult_Value                         = 0,
	UI_OT_BEGIN                              = 0,
	UI_OT_BATTLE_LOW                         = 3,
	UI_OT_BATTLE_MIDDLE                      = 5,
	UI_OT_BATTLE_HIGH                        = 6,
	UI_SKELETON_OT_2D_HIGH                   = 7,
	UI_OT_FADE_UI_BACK                       = 9,
	UI_OT_UI_PANEL_BACK                      = 10,
	UI_OT_UI_PANEL                           = 11,
	UI_OT_UI_PANEL_FRONT                     = 12,
	UI_OT_FACILITY                           = 13,
	UI_OT_FACILITY_FRONT                     = 17,
	UI_OT_FCL_WEAPON                         = 18,
	UI_OT_CAMP_BACK                          = 20,
	UI_OT_CAMP                               = 21,
	UI_OT_CAMP_FRONT                         = 22,
	UI_OT_CAMP_MORE_FRONT                    = 23,
	UI_OT_PERSONA_STATUS_BACK                = 24,
	UI_OT_PERSONA_STATUS                     = 25,
	UI_OT_PERSONA_STATUS_FRONT               = 26,
	UI_OT_SAVE                               = 27,
	UI_OT_CAMP_WIPE                          = 30,
	UI_OT_STAFFROLL                          = 31,
	UI_OT_FADE                               = 32,
	UI_OT_MESSAGE_WINDOW_BACK                = 33,
	UI_OT_BUSTUP                             = 34,
	UI_OT_MESSAGE_WINDOW                     = 35,
	UI_OT_MESSAGE_SEL_WINDOW                 = 36,
	UI_OT_BACKLOG                            = 37,
	UI_OT_CALENDAR                           = 38,
	UI_OT_NETWORK                            = 39,
	UI_OT_DEBUG                              = 41,
	UI_OT_NUM_MAX                            = 42,
	EUI_OT_MAX                               = 43,
};

// Enum xrd777.EUIGAUSS_TYPE
// NumValues: 0x0008
enum class EUIGAUSS_TYPE : uint8
{
	EUI_Defult_Value                         = 0,
	UI_OT_GAUSS_VERY_WEAK                    = 0,
	UI_OT_GAUSS_WEAK                         = 1,
	UI_OT_GAUSS_NORMAL                       = 2,
	UI_OT_GAUSS_STRONG                       = 3,
	UI_OT_GAUSS_VERY_STRONG                  = 4,
	UI_OT_GAUSSTEX_MOST_WEAK                 = 5,
	EUIGAUSS_MAX                             = 6,
};

// Enum xrd777.EUIColorWriteMask
// NumValues: 0x000C
enum class EUIColorWriteMask : uint8
{
	EUI_Defult_Value                         = 0,
	UI_CW_RED                                = 1,
	UI_CW_GREEN                              = 2,
	UI_CW_BLUE                               = 4,
	UI_CW_ALPHA                              = 8,
	UI_CW_NONE                               = 0,
	UI_CW_RGB                                = 7,
	UI_CW_RGBA                               = 15,
	UI_CW_RG                                 = 3,
	UI_CW_BA                                 = 12,
	UI_EColorWriteMask_NumBits               = 4,
	EUIColorWriteMask_MAX                    = 16,
};

// Enum xrd777.EUIDungeonTransferCloudDrawMode
// NumValues: 0x0003
enum class EUIDungeonTransferCloudDrawMode : uint8
{
	Normal                                   = 0,
	ADD                                      = 1,
	EUIDungeonTransferCloudDrawMode_MAX      = 2,
};

// Enum xrd777.EUIDungeonTransferHazeDrawMode
// NumValues: 0x0003
enum class EUIDungeonTransferHazeDrawMode : uint8
{
	TowerMask                                = 0,
	Normal                                   = 1,
	EUIDungeonTransferHazeDrawMode_MAX       = 2,
};

// Enum xrd777.ETownType
// NumValues: 0x0008
enum class ETownType : uint8
{
	SCHOOL                                   = 0,
	DORMITORY                                = 1,
	POLONIANMALL                             = 2,
	PORTISLAND                               = 3,
	IWATODAI                                 = 4,
	NAGANAKI_TEMPLE                          = 5,
	ARRAY_MAX                                = 6,
	ETownType_MAX                            = 7,
};

// Enum xrd777.EMiscGetItemLayout
// NumValues: 0x0002
enum class EMiscGetItemLayout : uint8
{
	ITEM_TEXT_SIZE                           = 0,
	MAX                                      = 1,
};

// Enum xrd777.EUINameEntryLayout
// NumValues: 0x000C
enum class EUINameEntryLayout : uint8
{
	NAME_LEFT                                = 0,
	NAME_RIGHT                               = 1,
	CURSOR_NAME_LEFT                         = 2,
	CURSOR_NAME_RIGHT                        = 3,
	OPTION                                   = 4,
	DECISION                                 = 5,
	DARK_BLUE_LIGHT                          = 6,
	LIGHT_BLUE_LIGHT                         = 7,
	BLUE_LIGHT_LEFT                          = 8,
	NONAME_LEFT                              = 9,
	NONAME_RIGHT                             = 10,
	Max                                      = 11,
};

// Enum xrd777.EOkNextMaskLayout
// NumValues: 0x0011
enum class EOkNextMaskLayout : uint8
{
	OK_DUNGEON_ITEM_MSK_SIZE                 = 0,
	OK_DUNGEON_ITEM_MSK_OFFSET               = 1,
	OK_CAMP_HUMAN_PARA_MSK_SIZE              = 2,
	OK_CAMP_HUMAN_PARA_MSK_OFFSET            = 3,
	OK_CAMP_THEURGIA_MSK_SIZE                = 4,
	OK_CAMP_THEURGIA_MSK_OFFSET              = 5,
	OK_COMMU_POETRY_MSK_SIZE                 = 6,
	OK_COMMU_POETRY_MSK_OFFSET               = 7,
	OK_COMMU_RANK_UP_MSK_SIZE                = 8,
	OK_COMMU_RANK_UP_MSK_OFFSET              = 9,
	OK_SYSTEM_WINDOW_MSK_SIZE                = 10,
	OK_SYSTEM_WINDOW_MSK_OFFSET              = 11,
	NEXT_CAMP_THEURGIA_MSK_SIZE              = 12,
	NEXT_CAMP_THEURGIA_MSK_OFFSET            = 13,
	NEXT_SYSTEM_WINDOW_MSK_SIZE              = 14,
	NEXT_SYSTEM_WINDOW_MSK_OFFSET            = 15,
	Max                                      = 16,
};

// Enum xrd777.EOkNextLayout
// NumValues: 0x000E
enum class EOkNextLayout : uint8
{
	OK_DUNGEON_ITEM_OFFSET                   = 0,
	OK_CAMP_HUMAN_PARAMETER_OFFSET           = 1,
	OK_CAMP_THEURGIA_OFFSET                  = 2,
	OK_COMMU_POETRY_OFFSET                   = 3,
	OK_COMMU_RANK_UP_OFFSET                  = 4,
	OK_BATTLE_RESULT_OFFSET                  = 5,
	BUTTON_BATTLE_RESULT_OFFSET              = 6,
	OK_SYSTEM_WINDOW_OFFSET                  = 7,
	NEXT_CAMP_THEURGIA_OFFSET                = 8,
	NEXT_SYSTEM_WINDOW_OFFSET                = 9,
	OK_ONLY_CAMP_HUMAN_PARAMETER_OFFSET      = 10,
	YES_OFFSET                               = 11,
	NO_OFFSET                                = 12,
	Max                                      = 13,
};

// Enum xrd777.EPersonaStatusModelAnim
// NumValues: 0x0003
enum class EPersonaStatusModelAnim : uint8
{
	Physics                                  = 0,
	Magic                                    = 1,
	EPersonaStatusModelAnim_MAX              = 2,
};

// Enum xrd777.EPERSONA_STATUS_DRAW_SCENE
// NumValues: 0x000A
enum class EPERSONA_STATUS_DRAW_SCENE : uint8
{
	NONE                                     = 0,
	LIST                                     = 1,
	MAIN                                     = 2,
	LEVEL_UP                                 = 3,
	PARAMETER_UP                             = 4,
	COMBINE                                  = 5,
	DRAWER                                   = 6,
	REGISTRY                                 = 7,
	SKILL_CARD                               = 8,
	EPERSONA_STATUS_DRAW_MAX                 = 9,
};

// Enum xrd777.EPersonaGrowthEvent
// NumValues: 0x0007
enum class EPersonaGrowthEvent : uint8
{
	None                                     = 0,
	LevelUp                                  = 1,
	AddSkill                                 = 2,
	Conception                               = 4,
	ShowStatus                               = 6,
	ShowStatus_Combine                       = 7,
	EPersonaGrowthEvent_MAX                  = 8,
};

// Enum xrd777.EUIRippleTimeLayout
// NumValues: 0x000E
enum class EUIRippleTimeLayout : uint8
{
	RIPPLE_0_TIME                            = 0,
	RIPPLE_1_TIME                            = 1,
	RIPPLE_2_TIME                            = 2,
	RIPPLE_3_TIME                            = 3,
	RIPPLE_4_TIME                            = 4,
	RIPPLE_5_TIME                            = 5,
	RIPPLE_6_TIME                            = 6,
	RIPPLE_7_TIME                            = 7,
	RIPPLE_8_TIME                            = 8,
	RIPPLE_9_TIME                            = 9,
	RIPPLE_10_TIME                           = 10,
	RIPPLE_11_TIME                           = 11,
	RIPPLE_12_TIME                           = 12,
	Max                                      = 13,
};

// Enum xrd777.EUIRippleLayout
// NumValues: 0x001B
enum class EUIRippleLayout : uint8
{
	RIPPLE_0_POS                             = 0,
	RIPPLE_0_SIZE                            = 1,
	RIPPLE_1_POS                             = 2,
	RIPPLE_1_SIZE                            = 3,
	RIPPLE_2_POS                             = 4,
	RIPPLE_2_SIZE                            = 5,
	RIPPLE_3_POS                             = 6,
	RIPPLE_3_SIZE                            = 7,
	RIPPLE_4_POS                             = 8,
	RIPPLE_4_SIZE                            = 9,
	RIPPLE_5_POS                             = 10,
	RIPPLE_5_SIZE                            = 11,
	RIPPLE_6_POS                             = 12,
	RIPPLE_6_SIZE                            = 13,
	RIPPLE_7_POS                             = 14,
	RIPPLE_7_SIZE                            = 15,
	RIPPLE_8_POS                             = 16,
	RIPPLE_8_SIZE                            = 17,
	RIPPLE_9_POS                             = 18,
	RIPPLE_9_SIZE                            = 19,
	RIPPLE_10_POS                            = 20,
	RIPPLE_10_SIZE                           = 21,
	RIPPLE_11_POS                            = 22,
	RIPPLE_11_SIZE                           = 23,
	RIPPLE_12_POS                            = 24,
	RIPPLE_12_SIZE                           = 25,
	Max                                      = 26,
};

// Enum xrd777.EUICommonResource
// NumValues: 0x0055
enum class EUICommonResource : uint8
{
	SprItemIcon                              = 0,
	BustupExist                              = 1,
	CampSystemBmd                            = 2,
	SkillHelpBmd                             = 3,
	ItemWeaponHelpBmd                        = 4,
	ItemArmorHelpBmd                         = 5,
	ItemShoesHelpBmd                         = 6,
	ItemAccessoryHelpBmd                     = 7,
	ItemCommonHelpBmd                        = 8,
	ItemEvitemHelpBmd                        = 9,
	ItemMaterialHelpBmd                      = 10,
	ItemSkillcardHelpBmd                     = 11,
	ItemCostumeHelpBmd                       = 12,
	CmmOutlineHelpBmd                        = 13,
	CmmProfileHelpBmd                        = 14,
	CmmProfileHelpTable                      = 15,
	MailIncoming                             = 16,
	Disappear                                = 17,
	VelvetRoomQuest                          = 18,
	QuestBmd                                 = 19,
	GenSelItemDefineTable                    = 20,
	GenSelItemLineupTable                    = 21,
	SimpleShop                               = 22,
	KeyHelp                                  = 23,
	BattleKeyHelp                            = 24,
	CampKeyHelp                              = 25,
	FacilityKeyHelp                          = 26,
	BustupEnvironment                        = 27,
	BustupGradation                          = 28,
	BustupBaseMaterial                       = 29,
	BustupFillMaterial                       = 30,
	MessageWindowSpr                         = 31,
	MessageWindowPlg                         = 32,
	MessageWindowAssistSpr                   = 33,
	DisappearHelpBmd                         = 34,
	BustupAnim                               = 35,
	KeyHelpPlg                               = 36,
	WaveMaterial                             = 37,
	WaveBackMaterial                         = 38,
	BustupSupportMaterial                    = 39,
	PersonaHelpBmd                           = 40,
	ActionRecordBmd                          = 41,
	CldDateMessagesBmd                       = 42,
	CldDateMessagesDataAsset                 = 43,
	ArbeitHelpBmd                            = 44,
	ArbeitInfoDataAsset                      = 45,
	HiddenArbeitDataAsset                    = 46,
	CommonMoneySpr                           = 47,
	SupportBustupDataAsset                   = 48,
	ItemAddEffectHelpBmd                     = 49,
	CampSpr                                  = 50,
	CampPlg                                  = 51,
	AddContentData                           = 52,
	AddContentBmd                            = 53,
	AddContentBundleName                     = 54,
	AddContentEntitlementName                = 55,
	AddContentDispName                       = 56,
	BPPersonaStatusDraw                      = 57,
	DataInheritanceTable                     = 58,
	DataInheritanceBmd                       = 59,
	ClearSaveBmd                             = 60,
	KeyHelpButton                            = 61,
	BattleKeyHelpButton                      = 62,
	CampKeyHelpButton                        = 63,
	FacilityKeyHelpButton                    = 64,
	AdditionalResourcesAstrea                = 65,
	AddContent_AstreaMessage                 = 65,
	CampKeyHelpEx                            = 66,
	SprItemIconAstrea                        = 67,
	CampSprAstrea                            = 68,
	WeaponShopAward                          = 69,
	BtlJyokyoHelpBmd                         = 70,
	CampSystemBmdAstrea                      = 71,
	CampPlgAstrea                            = 72,
	HeroParameterAstrea                      = 73,
	MessageWindowPlgAstrea                   = 74,
	MajorArcanaMessageAstrea                 = 75,
	SeedLotteryDataAstrea                    = 76,
	TutorialBattle_UseAstreaTexture          = 77,
	TutorialCombine_UseAstreaTexture         = 78,
	TutorialDaily_UseAstreaTexture           = 79,
	TutorialDungeon_UseAstreaTexture         = 80,
	TutorialSystem_UseAstreaTexture          = 81,
	CampTheurgiaSprAstrea                    = 82,
	Max                                      = 83,
};

// Enum xrd777.EShopType
// NumValues: 0x0005
enum class EShopType : uint8
{
	Weapon                                   = 0,
	Items                                    = 1,
	Antique                                  = 2,
	Combine                                  = 3,
	EShopType_MAX                            = 4,
};

// Enum xrd777.EArbeitOrderableWeek
// NumValues: 0x0008
enum class EArbeitOrderableWeek : uint8
{
	Sun                                      = 1,
	Mon                                      = 2,
	Tue                                      = 4,
	Wed                                      = 8,
	Thu                                      = 16,
	Fri                                      = 32,
	Sat                                      = 64,
	EArbeitOrderableWeek_MAX                 = 65,
};

// Enum xrd777.EArbeitOrderableTime
// NumValues: 0x0004
enum class EArbeitOrderableTime : uint8
{
	Afternoon                                = 1,
	Evening                                  = 2,
	AllTime                                  = 3,
	EArbeitOrderableTime_MAX                 = 4,
};

// Enum xrd777.EUITheurgiaTextRowLayout
// NumValues: 0x0006
enum class EUITheurgiaTextRowLayout : uint8
{
	THEURGIA_HELP_MAX_ROW_COUNT              = 0,
	THEURGIA_HELP_ROW_OFFSET                 = 1,
	BTL_THEURGIA_HELP_ROW_OFFSET             = 2,
	RISE_TREND_ROW_OFFSET                    = 3,
	CHARACTERISTIC_HELP_ROW_OFFSET           = 4,
	Max                                      = 5,
};

// Enum xrd777.EUITheurgiaTextPosLayout
// NumValues: 0x0008
enum class EUITheurgiaTextPosLayout : uint8
{
	THEURGIA_NAME_POS_Y                      = 0,
	THEURGIA_HELP_POS_Y                      = 1,
	BTL_THEURGIA_NAME_POS_Y                  = 2,
	BTL_THEURGIA_HELP_POS_Y                  = 3,
	RISE_TREND_POS_Y                         = 4,
	CHARACTERISTIC_NAME_POS_Y                = 5,
	CHARACTERISTIC_HELP_POS_Y                = 6,
	Max                                      = 7,
};

// Enum xrd777.EUITheurgiaTextLayout
// NumValues: 0x0009
enum class EUITheurgiaTextLayout : uint8
{
	PLAYER_NAME_CHANGE_POS                   = 0,
	CHARA_NAME                               = 1,
	CHARA_NAME_POS_OFFSET                    = 2,
	THEURGIA_NAME                            = 3,
	THEURGIA_HELP                            = 4,
	RISE_TREND                               = 5,
	CHARACTERISTIC_NAME                      = 6,
	CHARACTERISTIC_HELP                      = 7,
	Max                                      = 8,
};

// Enum xrd777.EUIScreenID4Touch
// NumValues: 0x0059
enum class EUIScreenID4Touch : uint8
{
	SaveLoad                                 = 1,
	KeyHelp                                  = 2,
	MsgSystemWindow                          = 3,
	MsgWindow                                = 4,
	SelectMsgWindow                          = 5,
	PersonaStatusDraw_3D                     = 6,
	Config                                   = 7,
	KeyConfigTab                             = 8,
	Mail                                     = 9,
	MailList                                 = 10,
	MapLocationSelect                        = 11,
	MapMiniMap                               = 12,
	MapTownMap                               = 13,
	MapDungeon                               = 14,
	MapDungeonList                           = 15,
	GenericSelect                            = 16,
	GenericSelectList                        = 17,
	BackLog                                  = 18,
	BackLogMask                              = 19,
	TitleList                                = 20,
	Shop                                     = 21,
	ShopData                                 = 22,
	ShopList                                 = 23,
	CsAEvent_A                               = 24,
	CsAEvent_B                               = 25,
	TitleDiffList                            = 26,
	CalendarDay                              = 27,
	CalendarMonth                            = 28,
	CampTop                                  = 29,
	CampSystemTop                            = 30,
	Tutorial                                 = 31,
	TutorialTab                              = 32,
	TutorialList                             = 33,
	CommuTop                                 = 34,
	CommuTopList                             = 35,
	CommuDetailsList                         = 36,
	CommuDetails                             = 37,
	Battle                                   = 38,
	BattleScrollbar                          = 39,
	BattleItemList                           = 40,
	BattleSkillList                          = 41,
	BattleTacticsList1                       = 42,
	BattleTacticsList2                       = 43,
	BattleTacticsList3                       = 44,
	BattleTheurgiaList                       = 45,
	BattleKeyHelp                            = 46,
	ShuffleCardList                          = 47,
	ShufflePersonaList                       = 48,
	Quest                                    = 49,
	Request                                  = 50,
	RequestList                              = 51,
	RequestDetail                            = 52,
	MissingPerson                            = 53,
	MissingPersonList                        = 54,
	MissingPersonDetail                      = 55,
	CmpPartyPanel                            = 56,
	CmpPartyPanelEquip                       = 57,
	CmpStatusMode                            = 58,
	CmpStatus                                = 59,
	PersonaList                              = 60,
	PersonaStatusSkill                       = 61,
	PersonaStatusSkillSelect                 = 62,
	PersonaStatusSkillSelectList             = 63,
	PersonaStatusRegistry                    = 64,
	PersonaStatusKeyHelp                     = 65,
	KeyHelpUniqueAction                      = 66,
	CmpItem                                  = 67,
	CmpItemList                              = 68,
	CmpItemPersonaList                       = 69,
	CmpTheurgia                              = 70,
	CmpTheurgiaCardList                      = 71,
	CmpSkillLIst                             = 72,
	CmpEquip                                 = 73,
	CmpEquipCategory                         = 74,
	CmpEquipList                             = 75,
	CmpEquipDetail                           = 76,
	RightsNotation                           = 77,
	GameOverPoem                             = 78,
	EventKeyHelp                             = 79,
	BackLogKeyHelp                           = 80,
	NameEntry                                = 81,
	ConfigList                               = 82,
	Calendar                                 = 83,
	VelvetKeyHelp                            = 84,
	ConfigValueGauge                         = 85,
	HeroParameter                            = 86,
	VoiceAnswer                              = 87,
	VoiceAnswerKeyHelp                       = 88,
	EUIScreenID4Touch_MAX                    = 89,
};

// Enum xrd777.EUIVELVET_ROOM_MCA_CAPTURE
// NumValues: 0x0008
enum class EUIVELVET_ROOM_MCA_CAPTURE : uint8
{
	NONE                                     = 0,
	TOP                                      = 1,
	COMBINE2                                 = 2,
	SEARCH                                   = 3,
	SPECIAL                                  = 4,
	BOOK                                     = 5,
	REGIST                                   = 6,
	EUIVELVET_ROOM_MCA_MAX                   = 7,
};

// Enum xrd777.EUIVelvetRoomDrawScene
// NumValues: 0x0009
enum class EUIVelvetRoomDrawScene : uint8
{
	NONE                                     = 0,
	EVENT                                    = 1,
	MAIN                                     = 2,
	COMBINE_SELECT                           = 3,
	COMBINE                                  = 4,
	DRAWER                                   = 5,
	REGIST                                   = 6,
	TALK                                     = 7,
	EUIVelvetRoomDrawScene_MAX               = 8,
};

// Enum xrd777.EQuestListItemState
// NumValues: 0x0005
enum class EQuestListItemState : uint8
{
	None                                     = 0,
	Ordered                                  = 1,
	Completed                                = 2,
	Failed                                   = 3,
	EQuestListItemState_MAX                  = 4,
};

// Enum xrd777.EVoiceActionTime
// NumValues: 0x0004
enum class EVoiceActionTime : uint8
{
	Auto                                     = 0,
	Daytime                                  = 1,
	Night                                    = 2,
	EVoiceActionTime_MAX                     = 3,
};

// Enum xrd777.EOneAnimType
// NumValues: 0x001A
enum class EOneAnimType : uint8
{
	Linear                                   = 0,
	Sin90                                    = 1,
	Sin180                                   = 2,
	Sin360                                   = 3,
	HSin180                                  = 4,
	EaseInOut                                = 5,
	EaseOut1                                 = 6,
	EaseOut2                                 = 7,
	EaseOut3                                 = 8,
	CurveUp1                                 = 9,
	CurveUp2                                 = 10,
	CurveUp3                                 = 11,
	CurveDown1                               = 12,
	CurveDown2                               = 13,
	CurveDown3                               = 14,
	Haneru1                                  = 15,
	Haneru1ST1                               = 16,
	Haneru2                                  = 17,
	Haneru3                                  = 18,
	Fuwari1                                  = 19,
	Bowa1                                    = 20,
	Gachan2                                  = 21,
	KaesiSlide2                              = 22,
	ButtonPush                               = 23,
	YureruRot                                = 24,
	Max                                      = 25,
};

// ScriptStruct xrd777.FldSoundMngAisacSet
// 0x0008 (0x0008 - 0x0000)
struct FFldSoundMngAisacSet final
{
public:
	uint32                                        MAisacID;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MNowValume;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldSoundMngAisacSet) == 0x000004, "Wrong alignment on FFldSoundMngAisacSet");
static_assert(sizeof(FFldSoundMngAisacSet) == 0x000008, "Wrong size on FFldSoundMngAisacSet");
static_assert(offsetof(FFldSoundMngAisacSet, MAisacID) == 0x000000, "Member 'FFldSoundMngAisacSet::MAisacID' has a wrong offset!");
static_assert(offsetof(FFldSoundMngAisacSet, MNowValume) == 0x000004, "Member 'FFldSoundMngAisacSet::MNowValume' has a wrong offset!");

// ScriptStruct xrd777.EvtLocalData
// 0x0010 (0x0010 - 0x0000)
struct FEvtLocalData final
{
public:
	TArray<int32>                                 LocalDatas;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtLocalData) == 0x000008, "Wrong alignment on FEvtLocalData");
static_assert(sizeof(FEvtLocalData) == 0x000010, "Wrong size on FEvtLocalData");
static_assert(offsetof(FEvtLocalData, LocalDatas) == 0x000000, "Member 'FEvtLocalData::LocalDatas' has a wrong offset!");

// ScriptStruct xrd777.BtlInputKeyParam
// 0x0010 (0x0010 - 0x0000)
struct FBtlInputKeyParam final
{
public:
	bool                                          Ru;                                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OK;                                                // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RL;                                                // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CANCEL;                                            // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LU;                                                // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LR;                                                // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LL;                                                // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LD;                                                // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          R1;                                                // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          L1;                                                // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          R2;                                                // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          L2;                                                // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          R3;                                                // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          L3;                                                // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OPTION;                                            // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Touch;                                             // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlInputKeyParam) == 0x000001, "Wrong alignment on FBtlInputKeyParam");
static_assert(sizeof(FBtlInputKeyParam) == 0x000010, "Wrong size on FBtlInputKeyParam");
static_assert(offsetof(FBtlInputKeyParam, Ru) == 0x000000, "Member 'FBtlInputKeyParam::Ru' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, OK) == 0x000001, "Member 'FBtlInputKeyParam::OK' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, RL) == 0x000002, "Member 'FBtlInputKeyParam::RL' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, CANCEL) == 0x000003, "Member 'FBtlInputKeyParam::CANCEL' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, LU) == 0x000004, "Member 'FBtlInputKeyParam::LU' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, LR) == 0x000005, "Member 'FBtlInputKeyParam::LR' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, LL) == 0x000006, "Member 'FBtlInputKeyParam::LL' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, LD) == 0x000007, "Member 'FBtlInputKeyParam::LD' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, R1) == 0x000008, "Member 'FBtlInputKeyParam::R1' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, L1) == 0x000009, "Member 'FBtlInputKeyParam::L1' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, R2) == 0x00000A, "Member 'FBtlInputKeyParam::R2' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, L2) == 0x00000B, "Member 'FBtlInputKeyParam::L2' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, R3) == 0x00000C, "Member 'FBtlInputKeyParam::R3' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, L3) == 0x00000D, "Member 'FBtlInputKeyParam::L3' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, OPTION) == 0x00000E, "Member 'FBtlInputKeyParam::OPTION' has a wrong offset!");
static_assert(offsetof(FBtlInputKeyParam, Touch) == 0x00000F, "Member 'FBtlInputKeyParam::Touch' has a wrong offset!");

// ScriptStruct xrd777.BtlInputKey
// 0x0030 (0x0030 - 0x0000)
struct FBtlInputKey final
{
public:
	struct FBtlInputKeyParam                      Trig;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBtlInputKeyParam                      Press;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBtlInputKeyParam                      Rep;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlInputKey) == 0x000001, "Wrong alignment on FBtlInputKey");
static_assert(sizeof(FBtlInputKey) == 0x000030, "Wrong size on FBtlInputKey");
static_assert(offsetof(FBtlInputKey, Trig) == 0x000000, "Member 'FBtlInputKey::Trig' has a wrong offset!");
static_assert(offsetof(FBtlInputKey, Press) == 0x000010, "Member 'FBtlInputKey::Press' has a wrong offset!");
static_assert(offsetof(FBtlInputKey, Rep) == 0x000020, "Member 'FBtlInputKey::Rep' has a wrong offset!");

// ScriptStruct xrd777.DatUnitStatus
// 0x0020 (0x0020 - 0x0000)
struct FDatUnitStatus final
{
public:
	int32                                         Hp;                                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sp;                                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tp;                                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        bad;                                               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Level;                                             // 0x0010(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Exp;                                               // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Affinity;                                          // 0x0018(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PersonalSkill;                                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatUnitStatus) == 0x000004, "Wrong alignment on FDatUnitStatus");
static_assert(sizeof(FDatUnitStatus) == 0x000020, "Wrong size on FDatUnitStatus");
static_assert(offsetof(FDatUnitStatus, Hp) == 0x000000, "Member 'FDatUnitStatus::Hp' has a wrong offset!");
static_assert(offsetof(FDatUnitStatus, Sp) == 0x000004, "Member 'FDatUnitStatus::Sp' has a wrong offset!");
static_assert(offsetof(FDatUnitStatus, Tp) == 0x000008, "Member 'FDatUnitStatus::Tp' has a wrong offset!");
static_assert(offsetof(FDatUnitStatus, bad) == 0x00000C, "Member 'FDatUnitStatus::bad' has a wrong offset!");
static_assert(offsetof(FDatUnitStatus, Level) == 0x000010, "Member 'FDatUnitStatus::Level' has a wrong offset!");
static_assert(offsetof(FDatUnitStatus, Exp) == 0x000014, "Member 'FDatUnitStatus::Exp' has a wrong offset!");
static_assert(offsetof(FDatUnitStatus, Affinity) == 0x000018, "Member 'FDatUnitStatus::Affinity' has a wrong offset!");
static_assert(offsetof(FDatUnitStatus, PersonalSkill) == 0x00001C, "Member 'FDatUnitStatus::PersonalSkill' has a wrong offset!");

// ScriptStruct xrd777.DatUnitSupport
// 0x001C (0x001C - 0x0000)
struct FDatUnitSupport final
{
public:
	uint32                                        Valid;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Appointment;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Point[0xA];                                        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Turn[0xA];                                         // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatUnitSupport) == 0x000004, "Wrong alignment on FDatUnitSupport");
static_assert(sizeof(FDatUnitSupport) == 0x00001C, "Wrong size on FDatUnitSupport");
static_assert(offsetof(FDatUnitSupport, Valid) == 0x000000, "Member 'FDatUnitSupport::Valid' has a wrong offset!");
static_assert(offsetof(FDatUnitSupport, Appointment) == 0x000004, "Member 'FDatUnitSupport::Appointment' has a wrong offset!");
static_assert(offsetof(FDatUnitSupport, Point) == 0x000008, "Member 'FDatUnitSupport::Point' has a wrong offset!");
static_assert(offsetof(FDatUnitSupport, Turn) == 0x000012, "Member 'FDatUnitSupport::Turn' has a wrong offset!");

// ScriptStruct xrd777.DatUnitPersona
// 0x0244 (0x0244 - 0x0000)
struct alignas(0x04) FDatUnitPersona final
{
public:
	uint16                                        Equip;                                             // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x242];                                      // 0x0002(0x0242)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatUnitPersona) == 0x000004, "Wrong alignment on FDatUnitPersona");
static_assert(sizeof(FDatUnitPersona) == 0x000244, "Wrong size on FDatUnitPersona");
static_assert(offsetof(FDatUnitPersona, Equip) == 0x000000, "Member 'FDatUnitPersona::Equip' has a wrong offset!");

// ScriptStruct xrd777.DatUnitItem
// 0x000A (0x000A - 0x0000)
struct FDatUnitItem final
{
public:
	uint16                                        Equip[0x5];                                        // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatUnitItem) == 0x000002, "Wrong alignment on FDatUnitItem");
static_assert(sizeof(FDatUnitItem) == 0x00000A, "Wrong size on FDatUnitItem");
static_assert(offsetof(FDatUnitItem, Equip) == 0x000000, "Member 'FDatUnitItem::Equip' has a wrong offset!");

// ScriptStruct xrd777.DatUnitSpecialSkill
// 0x0014 (0x0014 - 0x0000)
struct FDatUnitSpecialSkill final
{
public:
	uint16                                        SkillId[0xA];                                      // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatUnitSpecialSkill) == 0x000002, "Wrong alignment on FDatUnitSpecialSkill");
static_assert(sizeof(FDatUnitSpecialSkill) == 0x000014, "Wrong size on FDatUnitSpecialSkill");
static_assert(offsetof(FDatUnitSpecialSkill, SkillId) == 0x000000, "Member 'FDatUnitSpecialSkill::SkillId' has a wrong offset!");

// ScriptStruct xrd777.DatUnitWork
// 0x02B4 (0x02B4 - 0x0000)
struct FDatUnitWork final
{
public:
	uint32                                        Flags;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Genus;                                             // 0x0004(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ID;                                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDatUnitStatus                         Status;                                            // 0x000C(0x0020)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatUnitSupport                        Support;                                           // 0x002C(0x001C)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatUnitPersona                        Persona;                                           // 0x0048(0x0244)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatUnitItem                           Item;                                              // 0x028C(0x000A)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint16                                        Operation;                                         // 0x0296(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Message;                                           // 0x0298(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         MaxHpUp;                                           // 0x029A(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         MaxSpUp;                                           // 0x029C(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDatUnitSpecialSkill                   SpecialSkill;                                      // 0x029E(0x0014)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatUnitWork) == 0x000004, "Wrong alignment on FDatUnitWork");
static_assert(sizeof(FDatUnitWork) == 0x0002B4, "Wrong size on FDatUnitWork");
static_assert(offsetof(FDatUnitWork, Flags) == 0x000000, "Member 'FDatUnitWork::Flags' has a wrong offset!");
static_assert(offsetof(FDatUnitWork, Genus) == 0x000004, "Member 'FDatUnitWork::Genus' has a wrong offset!");
static_assert(offsetof(FDatUnitWork, ID) == 0x000008, "Member 'FDatUnitWork::ID' has a wrong offset!");
static_assert(offsetof(FDatUnitWork, Status) == 0x00000C, "Member 'FDatUnitWork::Status' has a wrong offset!");
static_assert(offsetof(FDatUnitWork, Support) == 0x00002C, "Member 'FDatUnitWork::Support' has a wrong offset!");
static_assert(offsetof(FDatUnitWork, Persona) == 0x000048, "Member 'FDatUnitWork::Persona' has a wrong offset!");
static_assert(offsetof(FDatUnitWork, Item) == 0x00028C, "Member 'FDatUnitWork::Item' has a wrong offset!");
static_assert(offsetof(FDatUnitWork, Operation) == 0x000296, "Member 'FDatUnitWork::Operation' has a wrong offset!");
static_assert(offsetof(FDatUnitWork, Message) == 0x000298, "Member 'FDatUnitWork::Message' has a wrong offset!");
static_assert(offsetof(FDatUnitWork, MaxHpUp) == 0x00029A, "Member 'FDatUnitWork::MaxHpUp' has a wrong offset!");
static_assert(offsetof(FDatUnitWork, MaxSpUp) == 0x00029C, "Member 'FDatUnitWork::MaxSpUp' has a wrong offset!");
static_assert(offsetof(FDatUnitWork, SpecialSkill) == 0x00029E, "Member 'FDatUnitWork::SpecialSkill' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtLevelSequenceSound
// 0x0038 (0x0038 - 0x0000)
struct FAtlEvtLevelSequenceSound final
{
public:
	TSoftObjectPtr<class USoundAtomCueSheet>      AtomCueAssetPath;                                  // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMajorID;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   SoundPlayerType;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlEvtLevelSequenceSound) == 0x000008, "Wrong alignment on FAtlEvtLevelSequenceSound");
static_assert(sizeof(FAtlEvtLevelSequenceSound) == 0x000038, "Wrong size on FAtlEvtLevelSequenceSound");
static_assert(offsetof(FAtlEvtLevelSequenceSound, AtomCueAssetPath) == 0x000000, "Member 'FAtlEvtLevelSequenceSound::AtomCueAssetPath' has a wrong offset!");
static_assert(offsetof(FAtlEvtLevelSequenceSound, PlayerMajorID) == 0x000028, "Member 'FAtlEvtLevelSequenceSound::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtLevelSequenceSound, PlayerMinorID) == 0x00002C, "Member 'FAtlEvtLevelSequenceSound::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtLevelSequenceSound, SoundPlayerType) == 0x000030, "Member 'FAtlEvtLevelSequenceSound::SoundPlayerType' has a wrong offset!");

// ScriptStruct xrd777.AppCharWeaponData
// 0x0010 (0x0010 - 0x0000)
struct FAppCharWeaponData final
{
public:
	TArray<TSoftClassPtr<class UClass>>           BluePrints;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppCharWeaponData) == 0x000008, "Wrong alignment on FAppCharWeaponData");
static_assert(sizeof(FAppCharWeaponData) == 0x000010, "Wrong size on FAppCharWeaponData");
static_assert(offsetof(FAppCharWeaponData, BluePrints) == 0x000000, "Member 'FAppCharWeaponData::BluePrints' has a wrong offset!");

// ScriptStruct xrd777.AppCharCostumePartsData
// 0x0050 (0x0050 - 0x0000)
struct FAppCharCostumePartsData final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Anim;                                              // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppCharCostumePartsData) == 0x000008, "Wrong alignment on FAppCharCostumePartsData");
static_assert(sizeof(FAppCharCostumePartsData) == 0x000050, "Wrong size on FAppCharCostumePartsData");
static_assert(offsetof(FAppCharCostumePartsData, Mesh) == 0x000000, "Member 'FAppCharCostumePartsData::Mesh' has a wrong offset!");
static_assert(offsetof(FAppCharCostumePartsData, Anim) == 0x000028, "Member 'FAppCharCostumePartsData::Anim' has a wrong offset!");

// ScriptStruct xrd777.AppCharCostumeData
// 0x0148 (0x0148 - 0x0000)
struct FAppCharCostumeData final
{
public:
	struct FAppCharCostumePartsData               Base;                                              // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FAppCharCostumePartsData               Costume;                                           // 0x0050(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FAppCharCostumePartsData               Hair;                                              // 0x00A0(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FAppCharCostumePartsData               Face;                                              // 0x00F0(0x0050)(Edit, NativeAccessSpecifierPublic)
	int32                                         BagKeyID;                                          // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppCharCostumeData) == 0x000008, "Wrong alignment on FAppCharCostumeData");
static_assert(sizeof(FAppCharCostumeData) == 0x000148, "Wrong size on FAppCharCostumeData");
static_assert(offsetof(FAppCharCostumeData, Base) == 0x000000, "Member 'FAppCharCostumeData::Base' has a wrong offset!");
static_assert(offsetof(FAppCharCostumeData, Costume) == 0x000050, "Member 'FAppCharCostumeData::Costume' has a wrong offset!");
static_assert(offsetof(FAppCharCostumeData, Hair) == 0x0000A0, "Member 'FAppCharCostumeData::Hair' has a wrong offset!");
static_assert(offsetof(FAppCharCostumeData, Face) == 0x0000F0, "Member 'FAppCharCostumeData::Face' has a wrong offset!");
static_assert(offsetof(FAppCharCostumeData, BagKeyID) == 0x000140, "Member 'FAppCharCostumeData::BagKeyID' has a wrong offset!");

// ScriptStruct xrd777.AppCharBagData
// 0x0088 (0x0088 - 0x0000)
struct FAppCharBagData final
{
public:
	TSoftClassPtr<class UClass>                   Base;                                              // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SetAnimSlotName;                                   // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EAppCharBagAnimType, TSoftObjectPtr<class UAnimSequenceBase>> AnimSeqs;                                          // 0x0038(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppCharBagData) == 0x000008, "Wrong alignment on FAppCharBagData");
static_assert(sizeof(FAppCharBagData) == 0x000088, "Wrong size on FAppCharBagData");
static_assert(offsetof(FAppCharBagData, Base) == 0x000000, "Member 'FAppCharBagData::Base' has a wrong offset!");
static_assert(offsetof(FAppCharBagData, AttachSocketName) == 0x000028, "Member 'FAppCharBagData::AttachSocketName' has a wrong offset!");
static_assert(offsetof(FAppCharBagData, SetAnimSlotName) == 0x000030, "Member 'FAppCharBagData::SetAnimSlotName' has a wrong offset!");
static_assert(offsetof(FAppCharBagData, AnimSeqs) == 0x000038, "Member 'FAppCharBagData::AnimSeqs' has a wrong offset!");

// ScriptStruct xrd777.AppCharTableRow
// 0x0178 (0x0180 - 0x0008)
struct FAppCharTableRow final : public FTableRowBase
{
public:
	float                                         CapsuleHalfHeight;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MeshLocation;                                      // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EAnimPackID, TSoftObjectPtr<class UAppCharAnimDataAsset>> Anims;                                             // 0x0018(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAppCharFaceAnimDataAsset> FaceAnim;                                          // 0x0068(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FAppCharCostumeData>       Costumes;                                          // 0x0090(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FAppCharWeaponData>        WeaponType;                                        // 0x00E0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FAppCharBagData>           BagType;                                           // 0x0130(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppCharTableRow) == 0x000008, "Wrong alignment on FAppCharTableRow");
static_assert(sizeof(FAppCharTableRow) == 0x000180, "Wrong size on FAppCharTableRow");
static_assert(offsetof(FAppCharTableRow, CapsuleHalfHeight) == 0x000008, "Member 'FAppCharTableRow::CapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(FAppCharTableRow, MeshLocation) == 0x00000C, "Member 'FAppCharTableRow::MeshLocation' has a wrong offset!");
static_assert(offsetof(FAppCharTableRow, Anims) == 0x000018, "Member 'FAppCharTableRow::Anims' has a wrong offset!");
static_assert(offsetof(FAppCharTableRow, FaceAnim) == 0x000068, "Member 'FAppCharTableRow::FaceAnim' has a wrong offset!");
static_assert(offsetof(FAppCharTableRow, Costumes) == 0x000090, "Member 'FAppCharTableRow::Costumes' has a wrong offset!");
static_assert(offsetof(FAppCharTableRow, WeaponType) == 0x0000E0, "Member 'FAppCharTableRow::WeaponType' has a wrong offset!");
static_assert(offsetof(FAppCharTableRow, BagType) == 0x000130, "Member 'FAppCharTableRow::BagType' has a wrong offset!");

// ScriptStruct xrd777.AppNpcCostumePartsData
// 0x00A0 (0x00A0 - 0x0000)
struct FAppNpcCostumePartsData final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Anim;                                              // 0x0028(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, TSoftObjectPtr<class UTexture2D>> Texture;                                           // 0x0050(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppNpcCostumePartsData) == 0x000008, "Wrong alignment on FAppNpcCostumePartsData");
static_assert(sizeof(FAppNpcCostumePartsData) == 0x0000A0, "Wrong size on FAppNpcCostumePartsData");
static_assert(offsetof(FAppNpcCostumePartsData, Mesh) == 0x000000, "Member 'FAppNpcCostumePartsData::Mesh' has a wrong offset!");
static_assert(offsetof(FAppNpcCostumePartsData, Anim) == 0x000028, "Member 'FAppNpcCostumePartsData::Anim' has a wrong offset!");
static_assert(offsetof(FAppNpcCostumePartsData, Texture) == 0x000050, "Member 'FAppNpcCostumePartsData::Texture' has a wrong offset!");

// ScriptStruct xrd777.AppNpcCostumeData
// 0x0280 (0x0280 - 0x0000)
struct FAppNpcCostumeData final
{
public:
	struct FAppNpcCostumePartsData                Base;                                              // 0x0000(0x00A0)(Edit, NativeAccessSpecifierPublic)
	struct FAppNpcCostumePartsData                Costume;                                           // 0x00A0(0x00A0)(Edit, NativeAccessSpecifierPublic)
	struct FAppNpcCostumePartsData                Hair;                                              // 0x0140(0x00A0)(Edit, NativeAccessSpecifierPublic)
	struct FAppNpcCostumePartsData                Face;                                              // 0x01E0(0x00A0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppNpcCostumeData) == 0x000008, "Wrong alignment on FAppNpcCostumeData");
static_assert(sizeof(FAppNpcCostumeData) == 0x000280, "Wrong size on FAppNpcCostumeData");
static_assert(offsetof(FAppNpcCostumeData, Base) == 0x000000, "Member 'FAppNpcCostumeData::Base' has a wrong offset!");
static_assert(offsetof(FAppNpcCostumeData, Costume) == 0x0000A0, "Member 'FAppNpcCostumeData::Costume' has a wrong offset!");
static_assert(offsetof(FAppNpcCostumeData, Hair) == 0x000140, "Member 'FAppNpcCostumeData::Hair' has a wrong offset!");
static_assert(offsetof(FAppNpcCostumeData, Face) == 0x0001E0, "Member 'FAppNpcCostumeData::Face' has a wrong offset!");

// ScriptStruct xrd777.AppNpcSkeletonTableRow
// 0x00B0 (0x00B8 - 0x0008)
struct FAppNpcSkeletonTableRow final : public FTableRowBase
{
public:
	struct FVector                                MeshLocation;                                      // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EAnimPackID, TSoftObjectPtr<class UAppCharAnimDataAsset>> Anims;                                             // 0x0018(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<int32, struct FAppNpcCostumeData>        Costumes;                                          // 0x0068(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppNpcSkeletonTableRow) == 0x000008, "Wrong alignment on FAppNpcSkeletonTableRow");
static_assert(sizeof(FAppNpcSkeletonTableRow) == 0x0000B8, "Wrong size on FAppNpcSkeletonTableRow");
static_assert(offsetof(FAppNpcSkeletonTableRow, MeshLocation) == 0x000008, "Member 'FAppNpcSkeletonTableRow::MeshLocation' has a wrong offset!");
static_assert(offsetof(FAppNpcSkeletonTableRow, Anims) == 0x000018, "Member 'FAppNpcSkeletonTableRow::Anims' has a wrong offset!");
static_assert(offsetof(FAppNpcSkeletonTableRow, Costumes) == 0x000068, "Member 'FAppNpcSkeletonTableRow::Costumes' has a wrong offset!");

// ScriptStruct xrd777.CharacterSimpleLipsAnimAppParam
// 0x0030 (0x0030 - 0x0000)
struct FCharacterSimpleLipsAnimAppParam final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequestedTotalTime;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LipsPlayRate;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartLipsDelaySec;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LipACustomCurve;                                   // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 CharaActorPtr;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMajorID;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterSimpleLipsAnimAppParam) == 0x000008, "Wrong alignment on FCharacterSimpleLipsAnimAppParam");
static_assert(sizeof(FCharacterSimpleLipsAnimAppParam) == 0x000030, "Wrong size on FCharacterSimpleLipsAnimAppParam");
static_assert(offsetof(FCharacterSimpleLipsAnimAppParam, CharcterCategoryType) == 0x000000, "Member 'FCharacterSimpleLipsAnimAppParam::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(FCharacterSimpleLipsAnimAppParam, CharaIndexID) == 0x000004, "Member 'FCharacterSimpleLipsAnimAppParam::CharaIndexID' has a wrong offset!");
static_assert(offsetof(FCharacterSimpleLipsAnimAppParam, RequestedTotalTime) == 0x000008, "Member 'FCharacterSimpleLipsAnimAppParam::RequestedTotalTime' has a wrong offset!");
static_assert(offsetof(FCharacterSimpleLipsAnimAppParam, LipsPlayRate) == 0x00000C, "Member 'FCharacterSimpleLipsAnimAppParam::LipsPlayRate' has a wrong offset!");
static_assert(offsetof(FCharacterSimpleLipsAnimAppParam, StartLipsDelaySec) == 0x000010, "Member 'FCharacterSimpleLipsAnimAppParam::StartLipsDelaySec' has a wrong offset!");
static_assert(offsetof(FCharacterSimpleLipsAnimAppParam, LipACustomCurve) == 0x000018, "Member 'FCharacterSimpleLipsAnimAppParam::LipACustomCurve' has a wrong offset!");
static_assert(offsetof(FCharacterSimpleLipsAnimAppParam, CharaActorPtr) == 0x000020, "Member 'FCharacterSimpleLipsAnimAppParam::CharaActorPtr' has a wrong offset!");
static_assert(offsetof(FCharacterSimpleLipsAnimAppParam, PlayerMajorID) == 0x000028, "Member 'FCharacterSimpleLipsAnimAppParam::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(FCharacterSimpleLipsAnimAppParam, PlayerMinorID) == 0x00002C, "Member 'FCharacterSimpleLipsAnimAppParam::PlayerMinorID' has a wrong offset!");

// ScriptStruct xrd777.CharacterSimpleLipsAnimAppListener
// 0x0030 (0x0030 - 0x0000)
struct FCharacterSimpleLipsAnimAppListener final
{
public:
	struct FCharacterSimpleLipsAnimAppParam       SimpleLipsAnimParam;                               // 0x0000(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterSimpleLipsAnimAppListener) == 0x000008, "Wrong alignment on FCharacterSimpleLipsAnimAppListener");
static_assert(sizeof(FCharacterSimpleLipsAnimAppListener) == 0x000030, "Wrong size on FCharacterSimpleLipsAnimAppListener");
static_assert(offsetof(FCharacterSimpleLipsAnimAppListener, SimpleLipsAnimParam) == 0x000000, "Member 'FCharacterSimpleLipsAnimAppListener::SimpleLipsAnimParam' has a wrong offset!");

// ScriptStruct xrd777.ShadowSettingData
// 0x0018 (0x0020 - 0x0008)
struct FShadowSettingData final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBiasHigh;                                    // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShadowSettingData) == 0x000008, "Wrong alignment on FShadowSettingData");
static_assert(sizeof(FShadowSettingData) == 0x000020, "Wrong size on FShadowSettingData");
static_assert(offsetof(FShadowSettingData, Name) == 0x000008, "Member 'FShadowSettingData::Name' has a wrong offset!");
static_assert(offsetof(FShadowSettingData, ShadowBiasHigh) == 0x000018, "Member 'FShadowSettingData::ShadowBiasHigh' has a wrong offset!");

// ScriptStruct xrd777.AppPropsCardParam
// 0x000C (0x000C - 0x0000)
struct FAppPropsCardParam final
{
public:
	EAppPropsCardType                             Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppPropsCardParam) == 0x000004, "Wrong alignment on FAppPropsCardParam");
static_assert(sizeof(FAppPropsCardParam) == 0x00000C, "Wrong size on FAppPropsCardParam");
static_assert(offsetof(FAppPropsCardParam, Type) == 0x000000, "Member 'FAppPropsCardParam::Type' has a wrong offset!");
static_assert(offsetof(FAppPropsCardParam, ID) == 0x000004, "Member 'FAppPropsCardParam::ID' has a wrong offset!");
static_assert(offsetof(FAppPropsCardParam, Rank) == 0x000008, "Member 'FAppPropsCardParam::Rank' has a wrong offset!");

// ScriptStruct xrd777.FldNpcCompAttachPropsParam
// 0x0030 (0x0030 - 0x0000)
struct FFldNpcCompAttachPropsParam final
{
public:
	struct FTransform                             MAddTransform;                                     // 0x0000(0x0030)(Edit, BlueprintVisible, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldNpcCompAttachPropsParam) == 0x000010, "Wrong alignment on FFldNpcCompAttachPropsParam");
static_assert(sizeof(FFldNpcCompAttachPropsParam) == 0x000030, "Wrong size on FFldNpcCompAttachPropsParam");
static_assert(offsetof(FFldNpcCompAttachPropsParam, MAddTransform) == 0x000000, "Member 'FFldNpcCompAttachPropsParam::MAddTransform' has a wrong offset!");

// ScriptStruct xrd777.FldHitCharaModelParam
// 0x00A0 (0x00A0 - 0x0000)
struct FFldHitCharaModelParam final
{
public:
	int32                                         MMajorID;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MMinorID;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MFbnNumber;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MNoCollision;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MAddTransform;                                     // 0x0010(0x0030)(Edit, BlueprintVisible, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldNpcCompAttachPropsParam            MAttachProps00;                                    // 0x0040(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldNpcCompAttachPropsParam            MAttachProps01;                                    // 0x0070(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldHitCharaModelParam) == 0x000010, "Wrong alignment on FFldHitCharaModelParam");
static_assert(sizeof(FFldHitCharaModelParam) == 0x0000A0, "Wrong size on FFldHitCharaModelParam");
static_assert(offsetof(FFldHitCharaModelParam, MMajorID) == 0x000000, "Member 'FFldHitCharaModelParam::MMajorID' has a wrong offset!");
static_assert(offsetof(FFldHitCharaModelParam, MMinorID) == 0x000004, "Member 'FFldHitCharaModelParam::MMinorID' has a wrong offset!");
static_assert(offsetof(FFldHitCharaModelParam, MFbnNumber) == 0x000008, "Member 'FFldHitCharaModelParam::MFbnNumber' has a wrong offset!");
static_assert(offsetof(FFldHitCharaModelParam, MNoCollision) == 0x00000C, "Member 'FFldHitCharaModelParam::MNoCollision' has a wrong offset!");
static_assert(offsetof(FFldHitCharaModelParam, MAddTransform) == 0x000010, "Member 'FFldHitCharaModelParam::MAddTransform' has a wrong offset!");
static_assert(offsetof(FFldHitCharaModelParam, MAttachProps00) == 0x000040, "Member 'FFldHitCharaModelParam::MAttachProps00' has a wrong offset!");
static_assert(offsetof(FFldHitCharaModelParam, MAttachProps01) == 0x000070, "Member 'FFldHitCharaModelParam::MAttachProps01' has a wrong offset!");

// ScriptStruct xrd777.DatFadeOutDataTable
// 0x0018 (0x0020 - 0x0008)
struct FDatFadeOutDataTable final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Major;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Minor;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FadeType;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorR;                                            // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorG;                                            // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorB;                                            // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatFadeOutDataTable) == 0x000008, "Wrong alignment on FDatFadeOutDataTable");
static_assert(sizeof(FDatFadeOutDataTable) == 0x000020, "Wrong size on FDatFadeOutDataTable");
static_assert(offsetof(FDatFadeOutDataTable, Category) == 0x000008, "Member 'FDatFadeOutDataTable::Category' has a wrong offset!");
static_assert(offsetof(FDatFadeOutDataTable, Major) == 0x000010, "Member 'FDatFadeOutDataTable::Major' has a wrong offset!");
static_assert(offsetof(FDatFadeOutDataTable, Minor) == 0x000014, "Member 'FDatFadeOutDataTable::Minor' has a wrong offset!");
static_assert(offsetof(FDatFadeOutDataTable, FadeType) == 0x000018, "Member 'FDatFadeOutDataTable::FadeType' has a wrong offset!");
static_assert(offsetof(FDatFadeOutDataTable, ColorR) == 0x000019, "Member 'FDatFadeOutDataTable::ColorR' has a wrong offset!");
static_assert(offsetof(FDatFadeOutDataTable, ColorG) == 0x00001A, "Member 'FDatFadeOutDataTable::ColorG' has a wrong offset!");
static_assert(offsetof(FDatFadeOutDataTable, ColorB) == 0x00001B, "Member 'FDatFadeOutDataTable::ColorB' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtPlayingEventInfo
// 0x0058 (0x0058 - 0x0000)
struct FAtlEvtPlayingEventInfo final
{
public:
	class FString                                 EventLevelName;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventCategoryTypeID;                               // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventCategory;                                     // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventRank;                                         // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMajorID;                                      // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AAtlEvtLevelSequenceActor> AtlEvtLevelSequenceActor;                          // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AAtlEvtEventManager>     AtlEvtEventManagerActor;                           // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventFirstFieldMajorID;                            // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventFirstFieldMinorID;                            // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtPlayingEventInfo) == 0x000008, "Wrong alignment on FAtlEvtPlayingEventInfo");
static_assert(sizeof(FAtlEvtPlayingEventInfo) == 0x000058, "Wrong size on FAtlEvtPlayingEventInfo");
static_assert(offsetof(FAtlEvtPlayingEventInfo, EventLevelName) == 0x000000, "Member 'FAtlEvtPlayingEventInfo::EventLevelName' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayingEventInfo, EventCategoryTypeID) == 0x000010, "Member 'FAtlEvtPlayingEventInfo::EventCategoryTypeID' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayingEventInfo, EventCategory) == 0x000018, "Member 'FAtlEvtPlayingEventInfo::EventCategory' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayingEventInfo, EventRank) == 0x000028, "Member 'FAtlEvtPlayingEventInfo::EventRank' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayingEventInfo, EventMajorID) == 0x000038, "Member 'FAtlEvtPlayingEventInfo::EventMajorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayingEventInfo, EventMinorID) == 0x00003C, "Member 'FAtlEvtPlayingEventInfo::EventMinorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayingEventInfo, AtlEvtLevelSequenceActor) == 0x000040, "Member 'FAtlEvtPlayingEventInfo::AtlEvtLevelSequenceActor' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayingEventInfo, AtlEvtEventManagerActor) == 0x000048, "Member 'FAtlEvtPlayingEventInfo::AtlEvtEventManagerActor' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayingEventInfo, EventFirstFieldMajorID) == 0x000050, "Member 'FAtlEvtPlayingEventInfo::EventFirstFieldMajorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayingEventInfo, EventFirstFieldMinorID) == 0x000054, "Member 'FAtlEvtPlayingEventInfo::EventFirstFieldMinorID' has a wrong offset!");

// ScriptStruct xrd777.SuggestionTextList
// 0x0030 (0x0038 - 0x0008)
struct FSuggestionTextList final : public FTableRowBase
{
public:
	class FString                                 TextLabel;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSuggestionTextList) == 0x000008, "Wrong alignment on FSuggestionTextList");
static_assert(sizeof(FSuggestionTextList) == 0x000038, "Wrong size on FSuggestionTextList");
static_assert(offsetof(FSuggestionTextList, TextLabel) == 0x000008, "Member 'FSuggestionTextList::TextLabel' has a wrong offset!");
static_assert(offsetof(FSuggestionTextList, Text) == 0x000018, "Member 'FSuggestionTextList::Text' has a wrong offset!");
static_assert(offsetof(FSuggestionTextList, Comment) == 0x000028, "Member 'FSuggestionTextList::Comment' has a wrong offset!");

// ScriptStruct xrd777.LipsyncAppListener
// 0x0014 (0x0014 - 0x0000)
struct FLipsyncAppListener final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundMajorID;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundMinorID;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayingCheckWaitTime;                              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLipsyncAppListener) == 0x000004, "Wrong alignment on FLipsyncAppListener");
static_assert(sizeof(FLipsyncAppListener) == 0x000014, "Wrong size on FLipsyncAppListener");
static_assert(offsetof(FLipsyncAppListener, CharcterCategoryType) == 0x000000, "Member 'FLipsyncAppListener::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(FLipsyncAppListener, CharaIndexID) == 0x000004, "Member 'FLipsyncAppListener::CharaIndexID' has a wrong offset!");
static_assert(offsetof(FLipsyncAppListener, SoundMajorID) == 0x000008, "Member 'FLipsyncAppListener::SoundMajorID' has a wrong offset!");
static_assert(offsetof(FLipsyncAppListener, SoundMinorID) == 0x00000C, "Member 'FLipsyncAppListener::SoundMinorID' has a wrong offset!");
static_assert(offsetof(FLipsyncAppListener, PlayingCheckWaitTime) == 0x000010, "Member 'FLipsyncAppListener::PlayingCheckWaitTime' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtEventManagerInitializer
// 0x0018 (0x0018 - 0x0000)
struct FAtlEvtEventManagerInitializer final
{
public:
	class FString                                 EventRank;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneSequencePlayer*              EventSequencePlayer;                               // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtEventManagerInitializer) == 0x000008, "Wrong alignment on FAtlEvtEventManagerInitializer");
static_assert(sizeof(FAtlEvtEventManagerInitializer) == 0x000018, "Wrong size on FAtlEvtEventManagerInitializer");
static_assert(offsetof(FAtlEvtEventManagerInitializer, EventRank) == 0x000000, "Member 'FAtlEvtEventManagerInitializer::EventRank' has a wrong offset!");
static_assert(offsetof(FAtlEvtEventManagerInitializer, EventSequencePlayer) == 0x000010, "Member 'FAtlEvtEventManagerInitializer::EventSequencePlayer' has a wrong offset!");

// ScriptStruct xrd777.ShopLineUpListBase
// 0x000C (0x000C - 0x0000)
struct FShopLineUpListBase
{
public:
	uint16                                        Value;                                             // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SaleMonth;                                         // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SaleDay;                                           // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        OpenFLG;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShopLineUpListBase) == 0x000004, "Wrong alignment on FShopLineUpListBase");
static_assert(sizeof(FShopLineUpListBase) == 0x00000C, "Wrong size on FShopLineUpListBase");
static_assert(offsetof(FShopLineUpListBase, Value) == 0x000000, "Member 'FShopLineUpListBase::Value' has a wrong offset!");
static_assert(offsetof(FShopLineUpListBase, SaleMonth) == 0x000002, "Member 'FShopLineUpListBase::SaleMonth' has a wrong offset!");
static_assert(offsetof(FShopLineUpListBase, SaleDay) == 0x000004, "Member 'FShopLineUpListBase::SaleDay' has a wrong offset!");
static_assert(offsetof(FShopLineUpListBase, OpenFLG) == 0x000008, "Member 'FShopLineUpListBase::OpenFLG' has a wrong offset!");

// ScriptStruct xrd777.ItemShopLineUpList
// 0x0000 (0x000C - 0x000C)
struct FItemShopLineUpList final : public FShopLineUpListBase
{
};
static_assert(alignof(FItemShopLineUpList) == 0x000004, "Wrong alignment on FItemShopLineUpList");
static_assert(sizeof(FItemShopLineUpList) == 0x00000C, "Wrong size on FItemShopLineUpList");

// ScriptStruct xrd777.AtlEvtLevelSequenceEventSE
// 0x0030 (0x0030 - 0x0000)
struct FAtlEvtLevelSequenceEventSE final
{
public:
	TSoftObjectPtr<class USoundAtomCueSheet>      AtomCueAssetPath;                                  // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlEvtLevelSequenceEventSE) == 0x000008, "Wrong alignment on FAtlEvtLevelSequenceEventSE");
static_assert(sizeof(FAtlEvtLevelSequenceEventSE) == 0x000030, "Wrong size on FAtlEvtLevelSequenceEventSE");
static_assert(offsetof(FAtlEvtLevelSequenceEventSE, AtomCueAssetPath) == 0x000000, "Member 'FAtlEvtLevelSequenceEventSE::AtomCueAssetPath' has a wrong offset!");
static_assert(offsetof(FAtlEvtLevelSequenceEventSE, BankNum) == 0x000028, "Member 'FAtlEvtLevelSequenceEventSE::BankNum' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtLevelSequenceEventVoice
// 0x0030 (0x0030 - 0x0000)
struct FAtlEvtLevelSequenceEventVoice final
{
public:
	TSoftObjectPtr<class USoundAtomCueSheet>      AtomCueAssetPath;                                  // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlEvtLevelSequenceEventVoice) == 0x000008, "Wrong alignment on FAtlEvtLevelSequenceEventVoice");
static_assert(sizeof(FAtlEvtLevelSequenceEventVoice) == 0x000030, "Wrong size on FAtlEvtLevelSequenceEventVoice");
static_assert(offsetof(FAtlEvtLevelSequenceEventVoice, AtomCueAssetPath) == 0x000000, "Member 'FAtlEvtLevelSequenceEventVoice::AtomCueAssetPath' has a wrong offset!");
static_assert(offsetof(FAtlEvtLevelSequenceEventVoice, BankNum) == 0x000028, "Member 'FAtlEvtLevelSequenceEventVoice::BankNum' has a wrong offset!");

// ScriptStruct xrd777.AddContentEntitlement
// 0x0048 (0x0050 - 0x0008)
struct FAddContentEntitlement final : public FTableRowBase
{
public:
	bool                                          Enabled;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAddContentEntitlementCategory                Categories[0x5];                                   // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Items[0x5];                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PsEntitlementLabel;                                // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MsStoreId;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SteamAppId;                                        // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAddContentEntitlement) == 0x000008, "Wrong alignment on FAddContentEntitlement");
static_assert(sizeof(FAddContentEntitlement) == 0x000050, "Wrong size on FAddContentEntitlement");
static_assert(offsetof(FAddContentEntitlement, Enabled) == 0x000008, "Member 'FAddContentEntitlement::Enabled' has a wrong offset!");
static_assert(offsetof(FAddContentEntitlement, Categories) == 0x000009, "Member 'FAddContentEntitlement::Categories' has a wrong offset!");
static_assert(offsetof(FAddContentEntitlement, Items) == 0x000010, "Member 'FAddContentEntitlement::Items' has a wrong offset!");
static_assert(offsetof(FAddContentEntitlement, PsEntitlementLabel) == 0x000028, "Member 'FAddContentEntitlement::PsEntitlementLabel' has a wrong offset!");
static_assert(offsetof(FAddContentEntitlement, MsStoreId) == 0x000038, "Member 'FAddContentEntitlement::MsStoreId' has a wrong offset!");
static_assert(offsetof(FAddContentEntitlement, SteamAppId) == 0x000048, "Member 'FAddContentEntitlement::SteamAppId' has a wrong offset!");

// ScriptStruct xrd777.BtlDataTargetRule
// 0x0004 (0x0004 - 0x0000)
struct FBtlDataTargetRule final
{
public:
	bool                                          Me;                                                // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Other;                                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Dead;                                              // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DownOnly;                                          // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlDataTargetRule) == 0x000001, "Wrong alignment on FBtlDataTargetRule");
static_assert(sizeof(FBtlDataTargetRule) == 0x000004, "Wrong size on FBtlDataTargetRule");
static_assert(offsetof(FBtlDataTargetRule, Me) == 0x000000, "Member 'FBtlDataTargetRule::Me' has a wrong offset!");
static_assert(offsetof(FBtlDataTargetRule, Other) == 0x000001, "Member 'FBtlDataTargetRule::Other' has a wrong offset!");
static_assert(offsetof(FBtlDataTargetRule, Dead) == 0x000002, "Member 'FBtlDataTargetRule::Dead' has a wrong offset!");
static_assert(offsetof(FBtlDataTargetRule, DownOnly) == 0x000003, "Member 'FBtlDataTargetRule::DownOnly' has a wrong offset!");

// ScriptStruct xrd777.DrawConfigParam
// 0x0068 (0x0068 - 0x0000)
struct FDrawConfigParam final
{
public:
	EDrawConfigParamType                          Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MenueID;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlag;                                             // 0x002C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x002D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawConfigListType                           ListType;                                          // 0x002E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ListMaxNum;                                        // 0x0030(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListDefault;                                       // 0x0034(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectedLabel;                                     // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 SprColor;                                          // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawStatus;                                        // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DescriptionScale;                                  // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDrawConfigParam) == 0x000008, "Wrong alignment on FDrawConfigParam");
static_assert(sizeof(FDrawConfigParam) == 0x000068, "Wrong size on FDrawConfigParam");
static_assert(offsetof(FDrawConfigParam, Type) == 0x000000, "Member 'FDrawConfigParam::Type' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, MenueID) == 0x000004, "Member 'FDrawConfigParam::MenueID' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, Title) == 0x000008, "Member 'FDrawConfigParam::Title' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, Description) == 0x000018, "Member 'FDrawConfigParam::Description' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, Value) == 0x000028, "Member 'FDrawConfigParam::Value' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, bFlag) == 0x00002C, "Member 'FDrawConfigParam::bFlag' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, bEnable) == 0x00002D, "Member 'FDrawConfigParam::bEnable' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, ListType) == 0x00002E, "Member 'FDrawConfigParam::ListType' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, ListMaxNum) == 0x000030, "Member 'FDrawConfigParam::ListMaxNum' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, ListDefault) == 0x000034, "Member 'FDrawConfigParam::ListDefault' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, SelectedLabel) == 0x000038, "Member 'FDrawConfigParam::SelectedLabel' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, SprColor) == 0x000048, "Member 'FDrawConfigParam::SprColor' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, DrawStatus) == 0x00004C, "Member 'FDrawConfigParam::DrawStatus' has a wrong offset!");
static_assert(offsetof(FDrawConfigParam, DescriptionScale) == 0x000060, "Member 'FDrawConfigParam::DescriptionScale' has a wrong offset!");

// ScriptStruct xrd777.DrawBGMParam
// 0x0028 (0x0028 - 0x0000)
struct FDrawBGMParam final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BgmId;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewFlag;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFavoriteFlag;                                   // 0x0015(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x12];                                      // 0x0016(0x0012)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDrawBGMParam) == 0x000008, "Wrong alignment on FDrawBGMParam");
static_assert(sizeof(FDrawBGMParam) == 0x000028, "Wrong size on FDrawBGMParam");
static_assert(offsetof(FDrawBGMParam, Title) == 0x000000, "Member 'FDrawBGMParam::Title' has a wrong offset!");
static_assert(offsetof(FDrawBGMParam, BgmId) == 0x000010, "Member 'FDrawBGMParam::BgmId' has a wrong offset!");
static_assert(offsetof(FDrawBGMParam, bNewFlag) == 0x000014, "Member 'FDrawBGMParam::bNewFlag' has a wrong offset!");
static_assert(offsetof(FDrawBGMParam, bIsFavoriteFlag) == 0x000015, "Member 'FDrawBGMParam::bIsFavoriteFlag' has a wrong offset!");

// ScriptStruct xrd777.PauseDebugItem
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FPauseDebugItem final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPauseDebugItem) == 0x000004, "Wrong alignment on FPauseDebugItem");
static_assert(sizeof(FPauseDebugItem) == 0x000010, "Wrong size on FPauseDebugItem");

// ScriptStruct xrd777.SaveSlotItem
// 0x0058 (0x0058 - 0x0000)
struct FSaveSlotItem final
{
public:
	int32                                         SlotNo;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PLV;                                               // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Week;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHoliday;                                          // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PTimeHour;                                         // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PTimeMin;                                          // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Diff;                                              // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoonAge;                                           // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeZone;                                          // 0x0028(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerName;                                        // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LocationName;                                      // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGoodEnd;                                        // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBadEnd;                                         // 0x0051(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAstreaClear;                                    // 0x0052(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAstreaManiacsClear;                             // 0x0053(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLoaded;                                         // 0x0054(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasData;                                          // 0x0055(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDefaultHeroName;                               // 0x0056(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDateUnknownAstrea;                              // 0x0057(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveSlotItem) == 0x000008, "Wrong alignment on FSaveSlotItem");
static_assert(sizeof(FSaveSlotItem) == 0x000058, "Wrong size on FSaveSlotItem");
static_assert(offsetof(FSaveSlotItem, SlotNo) == 0x000000, "Member 'FSaveSlotItem::SlotNo' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, Month) == 0x000004, "Member 'FSaveSlotItem::Month' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, Day) == 0x000008, "Member 'FSaveSlotItem::Day' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, PLV) == 0x00000C, "Member 'FSaveSlotItem::PLV' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, Week) == 0x000010, "Member 'FSaveSlotItem::Week' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, bHoliday) == 0x000014, "Member 'FSaveSlotItem::bHoliday' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, PTimeHour) == 0x000018, "Member 'FSaveSlotItem::PTimeHour' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, PTimeMin) == 0x00001C, "Member 'FSaveSlotItem::PTimeMin' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, Diff) == 0x000020, "Member 'FSaveSlotItem::Diff' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, MoonAge) == 0x000024, "Member 'FSaveSlotItem::MoonAge' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, TimeZone) == 0x000028, "Member 'FSaveSlotItem::TimeZone' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, PlayerName) == 0x000030, "Member 'FSaveSlotItem::PlayerName' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, LocationName) == 0x000040, "Member 'FSaveSlotItem::LocationName' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, bIsGoodEnd) == 0x000050, "Member 'FSaveSlotItem::bIsGoodEnd' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, bIsBadEnd) == 0x000051, "Member 'FSaveSlotItem::bIsBadEnd' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, bIsAstreaClear) == 0x000052, "Member 'FSaveSlotItem::bIsAstreaClear' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, bIsAstreaManiacsClear) == 0x000053, "Member 'FSaveSlotItem::bIsAstreaManiacsClear' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, bIsLoaded) == 0x000054, "Member 'FSaveSlotItem::bIsLoaded' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, bHasData) == 0x000055, "Member 'FSaveSlotItem::bHasData' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, bUseDefaultHeroName) == 0x000056, "Member 'FSaveSlotItem::bUseDefaultHeroName' has a wrong offset!");
static_assert(offsetof(FSaveSlotItem, bIsDateUnknownAstrea) == 0x000057, "Member 'FSaveSlotItem::bIsDateUnknownAstrea' has a wrong offset!");

// ScriptStruct xrd777.ActivityTaskData
// 0x000C (0x000C - 0x0000)
struct FActivityTaskData final
{
public:
	class FName                                   EndFlag;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFloorNo;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityTaskData) == 0x000004, "Wrong alignment on FActivityTaskData");
static_assert(sizeof(FActivityTaskData) == 0x00000C, "Wrong size on FActivityTaskData");
static_assert(offsetof(FActivityTaskData, EndFlag) == 0x000000, "Member 'FActivityTaskData::EndFlag' has a wrong offset!");
static_assert(offsetof(FActivityTaskData, EndFloorNo) == 0x000008, "Member 'FActivityTaskData::EndFloorNo' has a wrong offset!");

// ScriptStruct xrd777.ActivityData
// 0x0028 (0x0028 - 0x0000)
struct FActivityData final
{
public:
	uint8                                         StartMonth;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartDay;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MinFloorNo;                                        // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MaxFloorNo;                                        // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StartFlag;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndFlag;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FActivityTaskData>              TaskIds;                                           // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityData) == 0x000008, "Wrong alignment on FActivityData");
static_assert(sizeof(FActivityData) == 0x000028, "Wrong size on FActivityData");
static_assert(offsetof(FActivityData, StartMonth) == 0x000000, "Member 'FActivityData::StartMonth' has a wrong offset!");
static_assert(offsetof(FActivityData, StartDay) == 0x000001, "Member 'FActivityData::StartDay' has a wrong offset!");
static_assert(offsetof(FActivityData, MinFloorNo) == 0x000002, "Member 'FActivityData::MinFloorNo' has a wrong offset!");
static_assert(offsetof(FActivityData, MaxFloorNo) == 0x000004, "Member 'FActivityData::MaxFloorNo' has a wrong offset!");
static_assert(offsetof(FActivityData, StartFlag) == 0x000008, "Member 'FActivityData::StartFlag' has a wrong offset!");
static_assert(offsetof(FActivityData, EndFlag) == 0x000010, "Member 'FActivityData::EndFlag' has a wrong offset!");
static_assert(offsetof(FActivityData, TaskIds) == 0x000018, "Member 'FActivityData::TaskIds' has a wrong offset!");

// ScriptStruct xrd777.DungeonUIPosAnimData
// 0x0010 (0x0010 - 0x0000)
struct FDungeonUIPosAnimData final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OffsPos;                                           // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonUIPosAnimData) == 0x000004, "Wrong alignment on FDungeonUIPosAnimData");
static_assert(sizeof(FDungeonUIPosAnimData) == 0x000010, "Wrong size on FDungeonUIPosAnimData");
static_assert(offsetof(FDungeonUIPosAnimData, Time) == 0x000000, "Member 'FDungeonUIPosAnimData::Time' has a wrong offset!");
static_assert(offsetof(FDungeonUIPosAnimData, OffsPos) == 0x000004, "Member 'FDungeonUIPosAnimData::OffsPos' has a wrong offset!");

// ScriptStruct xrd777.FldEnemyLoiterParam
// 0x0010 (0x0010 - 0x0000)
struct FFldEnemyLoiterParam final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveSpeed;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurveScale;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldEnemyLoiterParam) == 0x000004, "Wrong alignment on FFldEnemyLoiterParam");
static_assert(sizeof(FFldEnemyLoiterParam) == 0x000010, "Wrong size on FFldEnemyLoiterParam");
static_assert(offsetof(FFldEnemyLoiterParam, Length) == 0x000000, "Member 'FFldEnemyLoiterParam::Length' has a wrong offset!");
static_assert(offsetof(FFldEnemyLoiterParam, Speed) == 0x000004, "Member 'FFldEnemyLoiterParam::Speed' has a wrong offset!");
static_assert(offsetof(FFldEnemyLoiterParam, CurveSpeed) == 0x000008, "Member 'FFldEnemyLoiterParam::CurveSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyLoiterParam, CurveScale) == 0x00000C, "Member 'FFldEnemyLoiterParam::CurveScale' has a wrong offset!");

// ScriptStruct xrd777.AppAnimSequence
// 0x0008 (0x0008 - 0x0000)
struct FAppAnimSequence final
{
public:
	class UAnimSequence*                          PAnimSequence;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppAnimSequence) == 0x000008, "Wrong alignment on FAppAnimSequence");
static_assert(sizeof(FAppAnimSequence) == 0x000008, "Wrong size on FAppAnimSequence");
static_assert(offsetof(FAppAnimSequence, PAnimSequence) == 0x000000, "Member 'FAppAnimSequence::PAnimSequence' has a wrong offset!");

// ScriptStruct xrd777.FldPoolParts
// 0x0018 (0x0018 - 0x0000)
struct FFldPoolParts final
{
public:
	int32                                         FieldMajor;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinor;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrevLoad;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Noon;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Night;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Holiday;                                           // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPoolParts) == 0x000004, "Wrong alignment on FFldPoolParts");
static_assert(sizeof(FFldPoolParts) == 0x000018, "Wrong size on FFldPoolParts");
static_assert(offsetof(FFldPoolParts, FieldMajor) == 0x000000, "Member 'FFldPoolParts::FieldMajor' has a wrong offset!");
static_assert(offsetof(FFldPoolParts, FieldMinor) == 0x000004, "Member 'FFldPoolParts::FieldMinor' has a wrong offset!");
static_assert(offsetof(FFldPoolParts, PrevLoad) == 0x000008, "Member 'FFldPoolParts::PrevLoad' has a wrong offset!");
static_assert(offsetof(FFldPoolParts, Noon) == 0x00000C, "Member 'FFldPoolParts::Noon' has a wrong offset!");
static_assert(offsetof(FFldPoolParts, Night) == 0x000010, "Member 'FFldPoolParts::Night' has a wrong offset!");
static_assert(offsetof(FFldPoolParts, Holiday) == 0x000014, "Member 'FFldPoolParts::Holiday' has a wrong offset!");

// ScriptStruct xrd777.FldPoolConnectTableRow
// 0x0010 (0x0018 - 0x0008)
struct FFldPoolConnectTableRow final : public FTableRowBase
{
public:
	TArray<struct FFldPoolParts>                  Access;                                            // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPoolConnectTableRow) == 0x000008, "Wrong alignment on FFldPoolConnectTableRow");
static_assert(sizeof(FFldPoolConnectTableRow) == 0x000018, "Wrong size on FFldPoolConnectTableRow");
static_assert(offsetof(FFldPoolConnectTableRow, Access) == 0x000008, "Member 'FFldPoolConnectTableRow::Access' has a wrong offset!");

// ScriptStruct xrd777.FldLoadVariationLevel
// 0x0038 (0x0040 - 0x0008)
struct FFldLoadVariationLevel final : public FTableRowBase
{
public:
	int32                                         FieldMajor;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinor;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartMonth;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartDay;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndMonth;                                          // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndDay;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnFlag;                                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffFlag;                                           // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LevelName;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldLoadVariationLevel) == 0x000008, "Wrong alignment on FFldLoadVariationLevel");
static_assert(sizeof(FFldLoadVariationLevel) == 0x000040, "Wrong size on FFldLoadVariationLevel");
static_assert(offsetof(FFldLoadVariationLevel, FieldMajor) == 0x000008, "Member 'FFldLoadVariationLevel::FieldMajor' has a wrong offset!");
static_assert(offsetof(FFldLoadVariationLevel, FieldMinor) == 0x00000C, "Member 'FFldLoadVariationLevel::FieldMinor' has a wrong offset!");
static_assert(offsetof(FFldLoadVariationLevel, StartMonth) == 0x000010, "Member 'FFldLoadVariationLevel::StartMonth' has a wrong offset!");
static_assert(offsetof(FFldLoadVariationLevel, StartDay) == 0x000014, "Member 'FFldLoadVariationLevel::StartDay' has a wrong offset!");
static_assert(offsetof(FFldLoadVariationLevel, EndMonth) == 0x000018, "Member 'FFldLoadVariationLevel::EndMonth' has a wrong offset!");
static_assert(offsetof(FFldLoadVariationLevel, EndDay) == 0x00001C, "Member 'FFldLoadVariationLevel::EndDay' has a wrong offset!");
static_assert(offsetof(FFldLoadVariationLevel, Time) == 0x000020, "Member 'FFldLoadVariationLevel::Time' has a wrong offset!");
static_assert(offsetof(FFldLoadVariationLevel, OnFlag) == 0x000024, "Member 'FFldLoadVariationLevel::OnFlag' has a wrong offset!");
static_assert(offsetof(FFldLoadVariationLevel, OffFlag) == 0x000028, "Member 'FFldLoadVariationLevel::OffFlag' has a wrong offset!");
static_assert(offsetof(FFldLoadVariationLevel, LevelName) == 0x000030, "Member 'FFldLoadVariationLevel::LevelName' has a wrong offset!");

// ScriptStruct xrd777.AppNpcUniqueCostumeData
// 0x0230 (0x0230 - 0x0000)
struct FAppNpcUniqueCostumeData final
{
public:
	TMap<EAnimPackID, TSoftObjectPtr<class UAppCharAnimDataAsset>> Anims;                                             // 0x0000(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FAppNpcCostumePartsData                Costume;                                           // 0x0050(0x00A0)(Edit, NativeAccessSpecifierPublic)
	struct FAppNpcCostumePartsData                Hair;                                              // 0x00F0(0x00A0)(Edit, NativeAccessSpecifierPublic)
	struct FAppNpcCostumePartsData                Face;                                              // 0x0190(0x00A0)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppNpcUniqueCostumeData) == 0x000008, "Wrong alignment on FAppNpcUniqueCostumeData");
static_assert(sizeof(FAppNpcUniqueCostumeData) == 0x000230, "Wrong size on FAppNpcUniqueCostumeData");
static_assert(offsetof(FAppNpcUniqueCostumeData, Anims) == 0x000000, "Member 'FAppNpcUniqueCostumeData::Anims' has a wrong offset!");
static_assert(offsetof(FAppNpcUniqueCostumeData, Costume) == 0x000050, "Member 'FAppNpcUniqueCostumeData::Costume' has a wrong offset!");
static_assert(offsetof(FAppNpcUniqueCostumeData, Hair) == 0x0000F0, "Member 'FAppNpcUniqueCostumeData::Hair' has a wrong offset!");
static_assert(offsetof(FAppNpcUniqueCostumeData, Face) == 0x000190, "Member 'FAppNpcUniqueCostumeData::Face' has a wrong offset!");

// ScriptStruct xrd777.FldShortcutNameTableRowBase
// 0x0018 (0x0020 - 0x0008)
struct FFldShortcutNameTableRowBase final : public FTableRowBase
{
public:
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldShortcutNameTableRowBase) == 0x000008, "Wrong alignment on FFldShortcutNameTableRowBase");
static_assert(sizeof(FFldShortcutNameTableRowBase) == 0x000020, "Wrong size on FFldShortcutNameTableRowBase");
static_assert(offsetof(FFldShortcutNameTableRowBase, Index) == 0x000008, "Member 'FFldShortcutNameTableRowBase::Index' has a wrong offset!");
static_assert(offsetof(FFldShortcutNameTableRowBase, Name) == 0x000010, "Member 'FFldShortcutNameTableRowBase::Name' has a wrong offset!");

// ScriptStruct xrd777.FldHitActorChgIconParam
// 0x000C (0x000C - 0x0000)
struct FFldHitActorChgIconParam final
{
public:
	class FName                                   MFlagName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldHitActorIconType                          MIconType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldHitActorChgIconParam) == 0x000004, "Wrong alignment on FFldHitActorChgIconParam");
static_assert(sizeof(FFldHitActorChgIconParam) == 0x00000C, "Wrong size on FFldHitActorChgIconParam");
static_assert(offsetof(FFldHitActorChgIconParam, MFlagName) == 0x000000, "Member 'FFldHitActorChgIconParam::MFlagName' has a wrong offset!");
static_assert(offsetof(FFldHitActorChgIconParam, MIconType) == 0x000008, "Member 'FFldHitActorChgIconParam::MIconType' has a wrong offset!");

// ScriptStruct xrd777.UAppCharFootstepsLabel
// 0x0020 (0x0020 - 0x0000)
struct FUAppCharFootstepsLabel final
{
public:
	class FString                                 Walk;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Run;                                               // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUAppCharFootstepsLabel) == 0x000008, "Wrong alignment on FUAppCharFootstepsLabel");
static_assert(sizeof(FUAppCharFootstepsLabel) == 0x000020, "Wrong size on FUAppCharFootstepsLabel");
static_assert(offsetof(FUAppCharFootstepsLabel, Walk) == 0x000000, "Member 'FUAppCharFootstepsLabel::Walk' has a wrong offset!");
static_assert(offsetof(FUAppCharFootstepsLabel, Run) == 0x000010, "Member 'FUAppCharFootstepsLabel::Run' has a wrong offset!");

// ScriptStruct xrd777.AppCharFootstepsOverwrite
// 0x0028 (0x0028 - 0x0000)
struct FAppCharFootstepsOverwrite final
{
public:
	class AActor*                                 MOverwriteActor;                                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUAppCharFootstepsLabel                MLable;                                            // 0x0008(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppCharFootstepsOverwrite) == 0x000008, "Wrong alignment on FAppCharFootstepsOverwrite");
static_assert(sizeof(FAppCharFootstepsOverwrite) == 0x000028, "Wrong size on FAppCharFootstepsOverwrite");
static_assert(offsetof(FAppCharFootstepsOverwrite, MOverwriteActor) == 0x000000, "Member 'FAppCharFootstepsOverwrite::MOverwriteActor' has a wrong offset!");
static_assert(offsetof(FAppCharFootstepsOverwrite, MLable) == 0x000008, "Member 'FAppCharFootstepsOverwrite::MLable' has a wrong offset!");

// ScriptStruct xrd777.FldTvProgramTableRow
// 0x0010 (0x0018 - 0x0008)
struct FFldTvProgramTableRow final : public FTableRowBase
{
public:
	int32                                         ObjIndex;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MotionID;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcID;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldTvProgramTableRow) == 0x000008, "Wrong alignment on FFldTvProgramTableRow");
static_assert(sizeof(FFldTvProgramTableRow) == 0x000018, "Wrong size on FFldTvProgramTableRow");
static_assert(offsetof(FFldTvProgramTableRow, ObjIndex) == 0x000008, "Member 'FFldTvProgramTableRow::ObjIndex' has a wrong offset!");
static_assert(offsetof(FFldTvProgramTableRow, MotionID) == 0x00000C, "Member 'FFldTvProgramTableRow::MotionID' has a wrong offset!");
static_assert(offsetof(FFldTvProgramTableRow, ProcID) == 0x000010, "Member 'FFldTvProgramTableRow::ProcID' has a wrong offset!");

// ScriptStruct xrd777.FldLaoAnimData
// 0x0008 (0x0008 - 0x0000)
struct FFldLaoAnimData final
{
public:
	class UAnimationAsset*                        MAsset;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldLaoAnimData) == 0x000008, "Wrong alignment on FFldLaoAnimData");
static_assert(sizeof(FFldLaoAnimData) == 0x000008, "Wrong size on FFldLaoAnimData");
static_assert(offsetof(FFldLaoAnimData, MAsset) == 0x000000, "Member 'FFldLaoAnimData::MAsset' has a wrong offset!");

// ScriptStruct xrd777.UAppCharFootstepsCue
// 0x0058 (0x0058 - 0x0000)
struct FUAppCharFootstepsCue final
{
public:
	class USoundAtomCue*                          Common;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class USoundAtomCue*>             Costume;                                           // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUAppCharFootstepsCue) == 0x000008, "Wrong alignment on FUAppCharFootstepsCue");
static_assert(sizeof(FUAppCharFootstepsCue) == 0x000058, "Wrong size on FUAppCharFootstepsCue");
static_assert(offsetof(FUAppCharFootstepsCue, Common) == 0x000000, "Member 'FUAppCharFootstepsCue::Common' has a wrong offset!");
static_assert(offsetof(FUAppCharFootstepsCue, Costume) == 0x000008, "Member 'FUAppCharFootstepsCue::Costume' has a wrong offset!");

// ScriptStruct xrd777.UAppCharFootstepsMajor
// 0x0050 (0x0050 - 0x0000)
struct FUAppCharFootstepsMajor final
{
public:
	TMap<int32, struct FUAppCharFootstepsLabel>   Minor;                                             // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUAppCharFootstepsMajor) == 0x000008, "Wrong alignment on FUAppCharFootstepsMajor");
static_assert(sizeof(FUAppCharFootstepsMajor) == 0x000050, "Wrong size on FUAppCharFootstepsMajor");
static_assert(offsetof(FUAppCharFootstepsMajor, Minor) == 0x000000, "Member 'FUAppCharFootstepsMajor::Minor' has a wrong offset!");

// ScriptStruct xrd777.AppCharTransparency
// 0x000C (0x000C - 0x0000)
struct FAppCharTransparency final
{
public:
	float                                         Opacity;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOpacity;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLarge;                                            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppCharTransparency) == 0x000004, "Wrong alignment on FAppCharTransparency");
static_assert(sizeof(FAppCharTransparency) == 0x00000C, "Wrong size on FAppCharTransparency");
static_assert(offsetof(FAppCharTransparency, Opacity) == 0x000000, "Member 'FAppCharTransparency::Opacity' has a wrong offset!");
static_assert(offsetof(FAppCharTransparency, MaxOpacity) == 0x000004, "Member 'FAppCharTransparency::MaxOpacity' has a wrong offset!");
static_assert(offsetof(FAppCharTransparency, bLarge) == 0x000008, "Member 'FAppCharTransparency::bLarge' has a wrong offset!");

// ScriptStruct xrd777.GenSelListElementInterface
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FGenSelListElementInterface
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenSelListElementInterface) == 0x000008, "Wrong alignment on FGenSelListElementInterface");
static_assert(sizeof(FGenSelListElementInterface) == 0x000008, "Wrong size on FGenSelListElementInterface");

// ScriptStruct xrd777.GenSelListMsgElement
// 0x0020 (0x0028 - 0x0008)
struct FGenSelListMsgElement : public FGenSelListElementInterface
{
public:
	uint8                                         Pad_8[0x20];                                       // 0x0008(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenSelListMsgElement) == 0x000008, "Wrong alignment on FGenSelListMsgElement");
static_assert(sizeof(FGenSelListMsgElement) == 0x000028, "Wrong size on FGenSelListMsgElement");

// ScriptStruct xrd777.AppCharWeaponMeshData
// 0x0030 (0x0030 - 0x0000)
struct FAppCharWeaponMeshData final
{
public:
	TSoftObjectPtr<class USkeletalMesh>           Mesh;                                              // 0x0000(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MultiEquip;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppCharWeaponMeshData) == 0x000008, "Wrong alignment on FAppCharWeaponMeshData");
static_assert(sizeof(FAppCharWeaponMeshData) == 0x000030, "Wrong size on FAppCharWeaponMeshData");
static_assert(offsetof(FAppCharWeaponMeshData, Mesh) == 0x000000, "Member 'FAppCharWeaponMeshData::Mesh' has a wrong offset!");
static_assert(offsetof(FAppCharWeaponMeshData, MultiEquip) == 0x000028, "Member 'FAppCharWeaponMeshData::MultiEquip' has a wrong offset!");

// ScriptStruct xrd777.AppCharWeapoAnimAssetTypeData
// 0x0030 (0x0030 - 0x0000)
struct FAppCharWeapoAnimAssetTypeData final
{
public:
	EAppCharWeaponUsageEnv                        UsageEnv;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAppCharWeaponAnimDataAsset> Asset;                                             // 0x0008(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppCharWeapoAnimAssetTypeData) == 0x000008, "Wrong alignment on FAppCharWeapoAnimAssetTypeData");
static_assert(sizeof(FAppCharWeapoAnimAssetTypeData) == 0x000030, "Wrong size on FAppCharWeapoAnimAssetTypeData");
static_assert(offsetof(FAppCharWeapoAnimAssetTypeData, UsageEnv) == 0x000000, "Member 'FAppCharWeapoAnimAssetTypeData::UsageEnv' has a wrong offset!");
static_assert(offsetof(FAppCharWeapoAnimAssetTypeData, Asset) == 0x000008, "Member 'FAppCharWeapoAnimAssetTypeData::Asset' has a wrong offset!");

// ScriptStruct xrd777.AppCharWeaponTableRow
// 0x0088 (0x0090 - 0x0008)
struct FAppCharWeaponTableRow final : public FTableRowBase
{
public:
	TMap<int32, struct FAppCharWeaponMeshData>    Data;                                              // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   Anim;                                              // 0x0058(0x0028)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAppCharWeapoAnimAssetTypeData> AnimAsset;                                         // 0x0080(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppCharWeaponTableRow) == 0x000008, "Wrong alignment on FAppCharWeaponTableRow");
static_assert(sizeof(FAppCharWeaponTableRow) == 0x000090, "Wrong size on FAppCharWeaponTableRow");
static_assert(offsetof(FAppCharWeaponTableRow, Data) == 0x000008, "Member 'FAppCharWeaponTableRow::Data' has a wrong offset!");
static_assert(offsetof(FAppCharWeaponTableRow, Anim) == 0x000058, "Member 'FAppCharWeaponTableRow::Anim' has a wrong offset!");
static_assert(offsetof(FAppCharWeaponTableRow, AnimAsset) == 0x000080, "Member 'FAppCharWeaponTableRow::AnimAsset' has a wrong offset!");

// ScriptStruct xrd777.FldHitNameTableRow
// 0x0030 (0x0038 - 0x0008)
struct FFldHitNameTableRow final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Flag;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name2;                                             // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldHitNameTableRow) == 0x000008, "Wrong alignment on FFldHitNameTableRow");
static_assert(sizeof(FFldHitNameTableRow) == 0x000038, "Wrong size on FFldHitNameTableRow");
static_assert(offsetof(FFldHitNameTableRow, Name) == 0x000008, "Member 'FFldHitNameTableRow::Name' has a wrong offset!");
static_assert(offsetof(FFldHitNameTableRow, Flag) == 0x000018, "Member 'FFldHitNameTableRow::Flag' has a wrong offset!");
static_assert(offsetof(FFldHitNameTableRow, Name2) == 0x000028, "Member 'FFldHitNameTableRow::Name2' has a wrong offset!");

// ScriptStruct xrd777.CommunityMemberFormat
// 0x0050 (0x0058 - 0x0008)
struct FCommunityMemberFormat final : public FTableRowBase
{
public:
	int32                                         PCID1;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag1;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCID2;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag2;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCID3;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag3;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCID4;                                             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag4;                                             // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCID5;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag5;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCID6;                                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag6;                                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCID7;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag7;                                             // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCID8;                                             // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag8;                                             // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCID9;                                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag9;                                             // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PCID10;                                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag10;                                            // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityMemberFormat) == 0x000008, "Wrong alignment on FCommunityMemberFormat");
static_assert(sizeof(FCommunityMemberFormat) == 0x000058, "Wrong size on FCommunityMemberFormat");
static_assert(offsetof(FCommunityMemberFormat, PCID1) == 0x000008, "Member 'FCommunityMemberFormat::PCID1' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, Flag1) == 0x00000C, "Member 'FCommunityMemberFormat::Flag1' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, PCID2) == 0x000010, "Member 'FCommunityMemberFormat::PCID2' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, Flag2) == 0x000014, "Member 'FCommunityMemberFormat::Flag2' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, PCID3) == 0x000018, "Member 'FCommunityMemberFormat::PCID3' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, Flag3) == 0x00001C, "Member 'FCommunityMemberFormat::Flag3' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, PCID4) == 0x000020, "Member 'FCommunityMemberFormat::PCID4' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, Flag4) == 0x000024, "Member 'FCommunityMemberFormat::Flag4' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, PCID5) == 0x000028, "Member 'FCommunityMemberFormat::PCID5' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, Flag5) == 0x00002C, "Member 'FCommunityMemberFormat::Flag5' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, PCID6) == 0x000030, "Member 'FCommunityMemberFormat::PCID6' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, Flag6) == 0x000034, "Member 'FCommunityMemberFormat::Flag6' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, PCID7) == 0x000038, "Member 'FCommunityMemberFormat::PCID7' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, Flag7) == 0x00003C, "Member 'FCommunityMemberFormat::Flag7' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, PCID8) == 0x000040, "Member 'FCommunityMemberFormat::PCID8' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, Flag8) == 0x000044, "Member 'FCommunityMemberFormat::Flag8' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, PCID9) == 0x000048, "Member 'FCommunityMemberFormat::PCID9' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, Flag9) == 0x00004C, "Member 'FCommunityMemberFormat::Flag9' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, PCID10) == 0x000050, "Member 'FCommunityMemberFormat::PCID10' has a wrong offset!");
static_assert(offsetof(FCommunityMemberFormat, Flag10) == 0x000054, "Member 'FCommunityMemberFormat::Flag10' has a wrong offset!");

// ScriptStruct xrd777.AppLevelData
// 0x0008 (0x0008 - 0x0000)
struct FAppLevelData final
{
public:
	EAppLevelType                                 MType;                                             // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MReferenceCounter;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppLevelData) == 0x000004, "Wrong alignment on FAppLevelData");
static_assert(sizeof(FAppLevelData) == 0x000008, "Wrong size on FAppLevelData");
static_assert(offsetof(FAppLevelData, MType) == 0x000000, "Member 'FAppLevelData::MType' has a wrong offset!");
static_assert(offsetof(FAppLevelData, MReferenceCounter) == 0x000004, "Member 'FAppLevelData::MReferenceCounter' has a wrong offset!");

// ScriptStruct xrd777.FldEnemyEffectParam
// 0x0018 (0x0018 - 0x0000)
struct FFldEnemyEffectParam final
{
public:
	class UNiagaraSystem*                         Asset;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldEnemyEffectParam) == 0x000008, "Wrong alignment on FFldEnemyEffectParam");
static_assert(sizeof(FFldEnemyEffectParam) == 0x000018, "Wrong size on FFldEnemyEffectParam");
static_assert(offsetof(FFldEnemyEffectParam, Asset) == 0x000000, "Member 'FFldEnemyEffectParam::Asset' has a wrong offset!");
static_assert(offsetof(FFldEnemyEffectParam, SocketName) == 0x000008, "Member 'FFldEnemyEffectParam::SocketName' has a wrong offset!");
static_assert(offsetof(FFldEnemyEffectParam, Scale) == 0x000010, "Member 'FFldEnemyEffectParam::Scale' has a wrong offset!");

// ScriptStruct xrd777.FldMiniMapData_Target
// 0x0030 (0x0030 - 0x0000)
struct FFldMiniMapData_Target final
{
public:
	struct FTransform                             MTransform;                                        // 0x0000(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldMiniMapData_Target) == 0x000010, "Wrong alignment on FFldMiniMapData_Target");
static_assert(sizeof(FFldMiniMapData_Target) == 0x000030, "Wrong size on FFldMiniMapData_Target");
static_assert(offsetof(FFldMiniMapData_Target, MTransform) == 0x000000, "Member 'FFldMiniMapData_Target::MTransform' has a wrong offset!");

// ScriptStruct xrd777.AppPropsCardTable
// 0x0030 (0x0038 - 0x0008)
struct FAppPropsCardTable final : public FTableRowBase
{
public:
	EAppPropsCardType                             Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture>                Texture;                                           // 0x0010(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppPropsCardTable) == 0x000008, "Wrong alignment on FAppPropsCardTable");
static_assert(sizeof(FAppPropsCardTable) == 0x000038, "Wrong size on FAppPropsCardTable");
static_assert(offsetof(FAppPropsCardTable, Type) == 0x000008, "Member 'FAppPropsCardTable::Type' has a wrong offset!");
static_assert(offsetof(FAppPropsCardTable, Texture) == 0x000010, "Member 'FAppPropsCardTable::Texture' has a wrong offset!");

// ScriptStruct xrd777.AppPropsCardData
// 0x0018 (0x0018 - 0x0000)
struct FAppPropsCardData final
{
public:
	struct FAppPropsCardParam                     Param;                                             // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAppPropsCore*                          Card;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppPropsCardData) == 0x000008, "Wrong alignment on FAppPropsCardData");
static_assert(sizeof(FAppPropsCardData) == 0x000018, "Wrong size on FAppPropsCardData");
static_assert(offsetof(FAppPropsCardData, Param) == 0x000000, "Member 'FAppPropsCardData::Param' has a wrong offset!");
static_assert(offsetof(FAppPropsCardData, Card) == 0x000010, "Member 'FAppPropsCardData::Card' has a wrong offset!");

// ScriptStruct xrd777.CommunityRankUpEventData
// 0x001C (0x001C - 0x0000)
struct FCommunityRankUpEventData final
{
public:
	int16                                         Rank;                                              // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Point;                                             // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Major;                                             // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Minor;                                             // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Brain;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Charm;                                             // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Courage;                                           // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Flag0;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag1;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag2;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag3;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityRankUpEventData) == 0x000004, "Wrong alignment on FCommunityRankUpEventData");
static_assert(sizeof(FCommunityRankUpEventData) == 0x00001C, "Wrong size on FCommunityRankUpEventData");
static_assert(offsetof(FCommunityRankUpEventData, Rank) == 0x000000, "Member 'FCommunityRankUpEventData::Rank' has a wrong offset!");
static_assert(offsetof(FCommunityRankUpEventData, Point) == 0x000002, "Member 'FCommunityRankUpEventData::Point' has a wrong offset!");
static_assert(offsetof(FCommunityRankUpEventData, Major) == 0x000004, "Member 'FCommunityRankUpEventData::Major' has a wrong offset!");
static_assert(offsetof(FCommunityRankUpEventData, Minor) == 0x000006, "Member 'FCommunityRankUpEventData::Minor' has a wrong offset!");
static_assert(offsetof(FCommunityRankUpEventData, Brain) == 0x000008, "Member 'FCommunityRankUpEventData::Brain' has a wrong offset!");
static_assert(offsetof(FCommunityRankUpEventData, Charm) == 0x000009, "Member 'FCommunityRankUpEventData::Charm' has a wrong offset!");
static_assert(offsetof(FCommunityRankUpEventData, Courage) == 0x00000A, "Member 'FCommunityRankUpEventData::Courage' has a wrong offset!");
static_assert(offsetof(FCommunityRankUpEventData, Flag0) == 0x00000C, "Member 'FCommunityRankUpEventData::Flag0' has a wrong offset!");
static_assert(offsetof(FCommunityRankUpEventData, Flag1) == 0x000010, "Member 'FCommunityRankUpEventData::Flag1' has a wrong offset!");
static_assert(offsetof(FCommunityRankUpEventData, Flag2) == 0x000014, "Member 'FCommunityRankUpEventData::Flag2' has a wrong offset!");
static_assert(offsetof(FCommunityRankUpEventData, Flag3) == 0x000018, "Member 'FCommunityRankUpEventData::Flag3' has a wrong offset!");

// ScriptStruct xrd777.AstreaInitialPersonaBookData
// 0x0008 (0x0010 - 0x0008)
struct FAstreaInitialPersonaBookData final : public FTableRowBase
{
public:
	int32                                         PersonaID;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAstreaInitialPersonaBookData) == 0x000008, "Wrong alignment on FAstreaInitialPersonaBookData");
static_assert(sizeof(FAstreaInitialPersonaBookData) == 0x000010, "Wrong size on FAstreaInitialPersonaBookData");
static_assert(offsetof(FAstreaInitialPersonaBookData, PersonaID) == 0x000008, "Member 'FAstreaInitialPersonaBookData::PersonaID' has a wrong offset!");

// ScriptStruct xrd777.RaytraceActorData
// 0x0020 (0x0028 - 0x0008)
struct FRaytraceActorData final : public FTableRowBase
{
public:
	class FString                                 ActorName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MaterialNames;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaytraceActorData) == 0x000008, "Wrong alignment on FRaytraceActorData");
static_assert(sizeof(FRaytraceActorData) == 0x000028, "Wrong size on FRaytraceActorData");
static_assert(offsetof(FRaytraceActorData, ActorName) == 0x000008, "Member 'FRaytraceActorData::ActorName' has a wrong offset!");
static_assert(offsetof(FRaytraceActorData, MaterialNames) == 0x000018, "Member 'FRaytraceActorData::MaterialNames' has a wrong offset!");

// ScriptStruct xrd777.RaytracePlanarReflectionActorData
// 0x0018 (0x0020 - 0x0008)
struct FRaytracePlanarReflectionActorData final : public FTableRowBase
{
public:
	class FString                                 ActorName;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Percentage;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HighendOnly;                                       // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRaytracePlanarReflectionActorData) == 0x000008, "Wrong alignment on FRaytracePlanarReflectionActorData");
static_assert(sizeof(FRaytracePlanarReflectionActorData) == 0x000020, "Wrong size on FRaytracePlanarReflectionActorData");
static_assert(offsetof(FRaytracePlanarReflectionActorData, ActorName) == 0x000008, "Member 'FRaytracePlanarReflectionActorData::ActorName' has a wrong offset!");
static_assert(offsetof(FRaytracePlanarReflectionActorData, Percentage) == 0x000018, "Member 'FRaytracePlanarReflectionActorData::Percentage' has a wrong offset!");
static_assert(offsetof(FRaytracePlanarReflectionActorData, HighendOnly) == 0x00001C, "Member 'FRaytracePlanarReflectionActorData::HighendOnly' has a wrong offset!");

// ScriptStruct xrd777.RaytraceFieldData
// 0x0048 (0x0050 - 0x0008)
struct FRaytraceFieldData final : public FTableRowBase
{
public:
	int32                                         MinorId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RayTraceEnable;                                    // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxRoughness;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReflectionMaxBounces;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReflectionShadow;                                  // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RayTracingCulling;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RayTracingCullingRadius;                           // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RayTracingCullingAngle;                            // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RayTracingGeometryWPOCullingRadius;                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRaytraceActorData>             ActorDatas;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRaytracePlanarReflectionActorData> PlanarReflectionActorDatas;                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaytraceFieldData) == 0x000008, "Wrong alignment on FRaytraceFieldData");
static_assert(sizeof(FRaytraceFieldData) == 0x000050, "Wrong size on FRaytraceFieldData");
static_assert(offsetof(FRaytraceFieldData, MinorId) == 0x000008, "Member 'FRaytraceFieldData::MinorId' has a wrong offset!");
static_assert(offsetof(FRaytraceFieldData, RayTraceEnable) == 0x00000C, "Member 'FRaytraceFieldData::RayTraceEnable' has a wrong offset!");
static_assert(offsetof(FRaytraceFieldData, MaxRoughness) == 0x000010, "Member 'FRaytraceFieldData::MaxRoughness' has a wrong offset!");
static_assert(offsetof(FRaytraceFieldData, ReflectionMaxBounces) == 0x000014, "Member 'FRaytraceFieldData::ReflectionMaxBounces' has a wrong offset!");
static_assert(offsetof(FRaytraceFieldData, ReflectionShadow) == 0x000018, "Member 'FRaytraceFieldData::ReflectionShadow' has a wrong offset!");
static_assert(offsetof(FRaytraceFieldData, RayTracingCulling) == 0x00001C, "Member 'FRaytraceFieldData::RayTracingCulling' has a wrong offset!");
static_assert(offsetof(FRaytraceFieldData, RayTracingCullingRadius) == 0x000020, "Member 'FRaytraceFieldData::RayTracingCullingRadius' has a wrong offset!");
static_assert(offsetof(FRaytraceFieldData, RayTracingCullingAngle) == 0x000024, "Member 'FRaytraceFieldData::RayTracingCullingAngle' has a wrong offset!");
static_assert(offsetof(FRaytraceFieldData, RayTracingGeometryWPOCullingRadius) == 0x000028, "Member 'FRaytraceFieldData::RayTracingGeometryWPOCullingRadius' has a wrong offset!");
static_assert(offsetof(FRaytraceFieldData, ActorDatas) == 0x000030, "Member 'FRaytraceFieldData::ActorDatas' has a wrong offset!");
static_assert(offsetof(FRaytraceFieldData, PlanarReflectionActorDatas) == 0x000040, "Member 'FRaytraceFieldData::PlanarReflectionActorDatas' has a wrong offset!");

// ScriptStruct xrd777.RaytraceFieldDataTable
// 0x0018 (0x0020 - 0x0008)
struct FRaytraceFieldDataTable final : public FTableRowBase
{
public:
	int32                                         MajorId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRaytraceFieldData>             FieldDatas;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaytraceFieldDataTable) == 0x000008, "Wrong alignment on FRaytraceFieldDataTable");
static_assert(sizeof(FRaytraceFieldDataTable) == 0x000020, "Wrong size on FRaytraceFieldDataTable");
static_assert(offsetof(FRaytraceFieldDataTable, MajorId) == 0x000008, "Member 'FRaytraceFieldDataTable::MajorId' has a wrong offset!");
static_assert(offsetof(FRaytraceFieldDataTable, FieldDatas) == 0x000010, "Member 'FRaytraceFieldDataTable::FieldDatas' has a wrong offset!");

// ScriptStruct xrd777.AstreaProgressTableItem
// 0x0008 (0x0010 - 0x0008)
struct FAstreaProgressTableItem final : public FTableRowBase
{
public:
	int32                                         Progress;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RefMonth;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RefDay;                                            // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldTimeZone                                  RefTimeZone;                                       // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBMD;                                            // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAstreaProgressTableItem) == 0x000008, "Wrong alignment on FAstreaProgressTableItem");
static_assert(sizeof(FAstreaProgressTableItem) == 0x000010, "Wrong size on FAstreaProgressTableItem");
static_assert(offsetof(FAstreaProgressTableItem, Progress) == 0x000008, "Member 'FAstreaProgressTableItem::Progress' has a wrong offset!");
static_assert(offsetof(FAstreaProgressTableItem, RefMonth) == 0x00000C, "Member 'FAstreaProgressTableItem::RefMonth' has a wrong offset!");
static_assert(offsetof(FAstreaProgressTableItem, RefDay) == 0x00000D, "Member 'FAstreaProgressTableItem::RefDay' has a wrong offset!");
static_assert(offsetof(FAstreaProgressTableItem, RefTimeZone) == 0x00000E, "Member 'FAstreaProgressTableItem::RefTimeZone' has a wrong offset!");
static_assert(offsetof(FAstreaProgressTableItem, UseBMD) == 0x00000F, "Member 'FAstreaProgressTableItem::UseBMD' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtNiagaraSystemPool
// 0x0050 (0x0050 - 0x0000)
struct FAtlEvtNiagaraSystemPool final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             AttachToCharacter;                                 // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x38];                                      // 0x0018(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlEvtNiagaraSystemPool) == 0x000008, "Wrong alignment on FAtlEvtNiagaraSystemPool");
static_assert(sizeof(FAtlEvtNiagaraSystemPool) == 0x000050, "Wrong size on FAtlEvtNiagaraSystemPool");
static_assert(offsetof(FAtlEvtNiagaraSystemPool, AttachToCharacter) == 0x000010, "Member 'FAtlEvtNiagaraSystemPool::AttachToCharacter' has a wrong offset!");

// ScriptStruct xrd777.CommunityCharacter
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FCommunityCharacter final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunityCharacter) == 0x000008, "Wrong alignment on FCommunityCharacter");
static_assert(sizeof(FCommunityCharacter) == 0x000020, "Wrong size on FCommunityCharacter");

// ScriptStruct xrd777.CommunityMemberInfo
// 0x0010 (0x0010 - 0x0000)
struct FCommunityMemberInfo final
{
public:
	TArray<struct FCommunityCharacter>            Member;                                            // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityMemberInfo) == 0x000008, "Wrong alignment on FCommunityMemberInfo");
static_assert(sizeof(FCommunityMemberInfo) == 0x000010, "Wrong size on FCommunityMemberInfo");
static_assert(offsetof(FCommunityMemberInfo, Member) == 0x000000, "Member 'FCommunityMemberInfo::Member' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtEventManagerMovieSceneOperator
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FAtlEvtEventManagerMovieSceneOperator final
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlEvtEventManagerMovieSceneOperator) == 0x000004, "Wrong alignment on FAtlEvtEventManagerMovieSceneOperator");
static_assert(sizeof(FAtlEvtEventManagerMovieSceneOperator) == 0x00000C, "Wrong size on FAtlEvtEventManagerMovieSceneOperator");

// ScriptStruct xrd777.FldHitCharaIdleTalkCharacterParam
// 0x0020 (0x0020 - 0x0000)
struct FFldHitCharaIdleTalkCharacterParam final
{
public:
	class UFldNpcComp*                            MNpcComp;                                          // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MMotionTimer;                                      // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MMotionMaxTime;                                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         bIsLookAt;                                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MLookTimer;                                        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MLookMaxTime;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldHitCharaIdleTalkCharacterParam) == 0x000008, "Wrong alignment on FFldHitCharaIdleTalkCharacterParam");
static_assert(sizeof(FFldHitCharaIdleTalkCharacterParam) == 0x000020, "Wrong size on FFldHitCharaIdleTalkCharacterParam");
static_assert(offsetof(FFldHitCharaIdleTalkCharacterParam, MNpcComp) == 0x000000, "Member 'FFldHitCharaIdleTalkCharacterParam::MNpcComp' has a wrong offset!");
static_assert(offsetof(FFldHitCharaIdleTalkCharacterParam, MMotionTimer) == 0x000008, "Member 'FFldHitCharaIdleTalkCharacterParam::MMotionTimer' has a wrong offset!");
static_assert(offsetof(FFldHitCharaIdleTalkCharacterParam, MMotionMaxTime) == 0x00000C, "Member 'FFldHitCharaIdleTalkCharacterParam::MMotionMaxTime' has a wrong offset!");
static_assert(offsetof(FFldHitCharaIdleTalkCharacterParam, bIsLookAt) == 0x000010, "Member 'FFldHitCharaIdleTalkCharacterParam::bIsLookAt' has a wrong offset!");
static_assert(offsetof(FFldHitCharaIdleTalkCharacterParam, MLookTimer) == 0x000014, "Member 'FFldHitCharaIdleTalkCharacterParam::MLookTimer' has a wrong offset!");
static_assert(offsetof(FFldHitCharaIdleTalkCharacterParam, MLookMaxTime) == 0x000018, "Member 'FFldHitCharaIdleTalkCharacterParam::MLookMaxTime' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtHandwritingDataTable
// 0x0010 (0x0018 - 0x0008)
struct FAtlEvtHandwritingDataTable final : public FTableRowBase
{
public:
	EAppCharCategoryType                          CharCategoryType;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtlEvtHandwritingType                        HandwritingType;                                   // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlEvtHandwritingDataTable) == 0x000008, "Wrong alignment on FAtlEvtHandwritingDataTable");
static_assert(sizeof(FAtlEvtHandwritingDataTable) == 0x000018, "Wrong size on FAtlEvtHandwritingDataTable");
static_assert(offsetof(FAtlEvtHandwritingDataTable, CharCategoryType) == 0x000008, "Member 'FAtlEvtHandwritingDataTable::CharCategoryType' has a wrong offset!");
static_assert(offsetof(FAtlEvtHandwritingDataTable, CharaIndexID) == 0x00000C, "Member 'FAtlEvtHandwritingDataTable::CharaIndexID' has a wrong offset!");
static_assert(offsetof(FAtlEvtHandwritingDataTable, HandwritingType) == 0x000010, "Member 'FAtlEvtHandwritingDataTable::HandwritingType' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtHandwritingData
// 0x0038 (0x0038 - 0x0000)
struct FAtlEvtHandwritingData final
{
public:
	EAtlEvtHandwritingType                        HandwritingType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0004(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0010(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BoneName;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraOffset;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtHandwritingData) == 0x000008, "Wrong alignment on FAtlEvtHandwritingData");
static_assert(sizeof(FAtlEvtHandwritingData) == 0x000038, "Wrong size on FAtlEvtHandwritingData");
static_assert(offsetof(FAtlEvtHandwritingData, HandwritingType) == 0x000000, "Member 'FAtlEvtHandwritingData::HandwritingType' has a wrong offset!");
static_assert(offsetof(FAtlEvtHandwritingData, Location) == 0x000004, "Member 'FAtlEvtHandwritingData::Location' has a wrong offset!");
static_assert(offsetof(FAtlEvtHandwritingData, Scale) == 0x000010, "Member 'FAtlEvtHandwritingData::Scale' has a wrong offset!");
static_assert(offsetof(FAtlEvtHandwritingData, BoneName) == 0x000020, "Member 'FAtlEvtHandwritingData::BoneName' has a wrong offset!");
static_assert(offsetof(FAtlEvtHandwritingData, LoopCount) == 0x000030, "Member 'FAtlEvtHandwritingData::LoopCount' has a wrong offset!");
static_assert(offsetof(FAtlEvtHandwritingData, CameraOffset) == 0x000034, "Member 'FAtlEvtHandwritingData::CameraOffset' has a wrong offset!");

// ScriptStruct xrd777.HeroParameterSaveData_t
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FHeroParameterSaveData_t final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroParameterSaveData_t) == 0x000004, "Wrong alignment on FHeroParameterSaveData_t");
static_assert(sizeof(FHeroParameterSaveData_t) == 0x000008, "Wrong size on FHeroParameterSaveData_t");

// ScriptStruct xrd777.AtlEvtAdditionBGSublevel
// 0x0008 (0x0008 - 0x0000)
struct FAtlEvtAdditionBGSublevel final
{
public:
	class FName                                   FieldLevelName;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtAdditionBGSublevel) == 0x000004, "Wrong alignment on FAtlEvtAdditionBGSublevel");
static_assert(sizeof(FAtlEvtAdditionBGSublevel) == 0x000008, "Wrong size on FAtlEvtAdditionBGSublevel");
static_assert(offsetof(FAtlEvtAdditionBGSublevel, FieldLevelName) == 0x000000, "Member 'FAtlEvtAdditionBGSublevel::FieldLevelName' has a wrong offset!");

// ScriptStruct xrd777.FldLoadCrowdLevelDays
// 0x0010 (0x0010 - 0x0000)
struct FFldLoadCrowdLevelDays final
{
public:
	int32                                         StartMonth;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartDay;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndMonth;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndDay;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldLoadCrowdLevelDays) == 0x000004, "Wrong alignment on FFldLoadCrowdLevelDays");
static_assert(sizeof(FFldLoadCrowdLevelDays) == 0x000010, "Wrong size on FFldLoadCrowdLevelDays");
static_assert(offsetof(FFldLoadCrowdLevelDays, StartMonth) == 0x000000, "Member 'FFldLoadCrowdLevelDays::StartMonth' has a wrong offset!");
static_assert(offsetof(FFldLoadCrowdLevelDays, StartDay) == 0x000004, "Member 'FFldLoadCrowdLevelDays::StartDay' has a wrong offset!");
static_assert(offsetof(FFldLoadCrowdLevelDays, EndMonth) == 0x000008, "Member 'FFldLoadCrowdLevelDays::EndMonth' has a wrong offset!");
static_assert(offsetof(FFldLoadCrowdLevelDays, EndDay) == 0x00000C, "Member 'FFldLoadCrowdLevelDays::EndDay' has a wrong offset!");

// ScriptStruct xrd777.FldLoadCrowdLevel
// 0x0060 (0x0068 - 0x0008)
struct FFldLoadCrowdLevel final : public FTableRowBase
{
public:
	int32                                         FieldMajor;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinor;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldPartsID;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFldLoadCrowdLevelDays>         DayDatas;                                          // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 OnFlags;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 OffFlags;                                          // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LevelName;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldLoadCrowdLevel) == 0x000008, "Wrong alignment on FFldLoadCrowdLevel");
static_assert(sizeof(FFldLoadCrowdLevel) == 0x000068, "Wrong size on FFldLoadCrowdLevel");
static_assert(offsetof(FFldLoadCrowdLevel, FieldMajor) == 0x000008, "Member 'FFldLoadCrowdLevel::FieldMajor' has a wrong offset!");
static_assert(offsetof(FFldLoadCrowdLevel, FieldMinor) == 0x00000C, "Member 'FFldLoadCrowdLevel::FieldMinor' has a wrong offset!");
static_assert(offsetof(FFldLoadCrowdLevel, FieldPartsID) == 0x000010, "Member 'FFldLoadCrowdLevel::FieldPartsID' has a wrong offset!");
static_assert(offsetof(FFldLoadCrowdLevel, DayDatas) == 0x000018, "Member 'FFldLoadCrowdLevel::DayDatas' has a wrong offset!");
static_assert(offsetof(FFldLoadCrowdLevel, Time) == 0x000028, "Member 'FFldLoadCrowdLevel::Time' has a wrong offset!");
static_assert(offsetof(FFldLoadCrowdLevel, OnFlags) == 0x000030, "Member 'FFldLoadCrowdLevel::OnFlags' has a wrong offset!");
static_assert(offsetof(FFldLoadCrowdLevel, OffFlags) == 0x000040, "Member 'FFldLoadCrowdLevel::OffFlags' has a wrong offset!");
static_assert(offsetof(FFldLoadCrowdLevel, Type) == 0x000050, "Member 'FFldLoadCrowdLevel::Type' has a wrong offset!");
static_assert(offsetof(FFldLoadCrowdLevel, LevelName) == 0x000058, "Member 'FFldLoadCrowdLevel::LevelName' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtLightScenarioSublevel
// 0x0008 (0x0008 - 0x0000)
struct FAtlEvtLightScenarioSublevel final
{
public:
	class FName                                   FieldLevelName;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtLightScenarioSublevel) == 0x000004, "Wrong alignment on FAtlEvtLightScenarioSublevel");
static_assert(sizeof(FAtlEvtLightScenarioSublevel) == 0x000008, "Wrong size on FAtlEvtLightScenarioSublevel");
static_assert(offsetof(FAtlEvtLightScenarioSublevel, FieldLevelName) == 0x000000, "Member 'FAtlEvtLightScenarioSublevel::FieldLevelName' has a wrong offset!");

// ScriptStruct xrd777.FldLmapData_CMM
// 0x0020 (0x0020 - 0x0000)
struct FFldLmapData_CMM final
{
public:
	int32                                         MArcanaID;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MRank;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MReverse;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MName;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldLmapData_CMM) == 0x000008, "Wrong alignment on FFldLmapData_CMM");
static_assert(sizeof(FFldLmapData_CMM) == 0x000020, "Wrong size on FFldLmapData_CMM");
static_assert(offsetof(FFldLmapData_CMM, MArcanaID) == 0x000000, "Member 'FFldLmapData_CMM::MArcanaID' has a wrong offset!");
static_assert(offsetof(FFldLmapData_CMM, MRank) == 0x000004, "Member 'FFldLmapData_CMM::MRank' has a wrong offset!");
static_assert(offsetof(FFldLmapData_CMM, MReverse) == 0x000008, "Member 'FFldLmapData_CMM::MReverse' has a wrong offset!");
static_assert(offsetof(FFldLmapData_CMM, MName) == 0x000010, "Member 'FFldLmapData_CMM::MName' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtLightScenarioSublevelParam
// 0x0020 (0x0020 - 0x0000)
struct FAtlEvtLightScenarioSublevelParam final
{
public:
	class UObject*                                Level;                                             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtLightScenarioSublevelParam) == 0x000008, "Wrong alignment on FAtlEvtLightScenarioSublevelParam");
static_assert(sizeof(FAtlEvtLightScenarioSublevelParam) == 0x000020, "Wrong size on FAtlEvtLightScenarioSublevelParam");
static_assert(offsetof(FAtlEvtLightScenarioSublevelParam, Level) == 0x000000, "Member 'FAtlEvtLightScenarioSublevelParam::Level' has a wrong offset!");
static_assert(offsetof(FAtlEvtLightScenarioSublevelParam, LevelName) == 0x000008, "Member 'FAtlEvtLightScenarioSublevelParam::LevelName' has a wrong offset!");
static_assert(offsetof(FAtlEvtLightScenarioSublevelParam, PrimaryAssetId) == 0x000010, "Member 'FAtlEvtLightScenarioSublevelParam::PrimaryAssetId' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtPreSublevelData
// 0x0038 (0x0038 - 0x0000)
struct FAtlEvtPreSublevelData final
{
public:
	TArray<class FString>                         EventBGLevels;                                     // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         BGFieldMajorID;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMinorID;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSeasonSubLevel;                             // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSoundSubLevel;                              // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtPreSublevelData) == 0x000008, "Wrong alignment on FAtlEvtPreSublevelData");
static_assert(sizeof(FAtlEvtPreSublevelData) == 0x000038, "Wrong size on FAtlEvtPreSublevelData");
static_assert(offsetof(FAtlEvtPreSublevelData, EventBGLevels) == 0x000000, "Member 'FAtlEvtPreSublevelData::EventBGLevels' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreSublevelData, BGFieldMajorID) == 0x000010, "Member 'FAtlEvtPreSublevelData::BGFieldMajorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreSublevelData, BGFieldMinorID) == 0x000014, "Member 'FAtlEvtPreSublevelData::BGFieldMinorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreSublevelData, BGFieldSeasonSubLevel) == 0x000018, "Member 'FAtlEvtPreSublevelData::BGFieldSeasonSubLevel' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreSublevelData, BGFieldSoundSubLevel) == 0x000028, "Member 'FAtlEvtPreSublevelData::BGFieldSoundSubLevel' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtPreDungeonSublevelData
// 0x0010 (0x0010 - 0x0000)
struct FAtlEvtPreDungeonSublevelData final
{
public:
	class FName                                   EventBGFloorLevel;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BGEnvironmentSubLevel;                             // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtPreDungeonSublevelData) == 0x000004, "Wrong alignment on FAtlEvtPreDungeonSublevelData");
static_assert(sizeof(FAtlEvtPreDungeonSublevelData) == 0x000010, "Wrong size on FAtlEvtPreDungeonSublevelData");
static_assert(offsetof(FAtlEvtPreDungeonSublevelData, EventBGFloorLevel) == 0x000000, "Member 'FAtlEvtPreDungeonSublevelData::EventBGFloorLevel' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDungeonSublevelData, BGEnvironmentSubLevel) == 0x000008, "Member 'FAtlEvtPreDungeonSublevelData::BGEnvironmentSubLevel' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtPreData
// 0x0070 (0x0070 - 0x0000)
struct FAtlEvtPreData final
{
public:
	int32                                         EventMajorID;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventCategoryTypeID;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventRank;                                         // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventCategory;                                     // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventLevel;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAtlEvtPreSublevelData>         EventSublevels;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           LightScenarioSublevels;                            // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAtlEvtPreDungeonSublevelData          DungeonSublevel;                                   // 0x0050(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDisableAutoLoadFirstLightingScenarioLevel;        // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceDisableUseCurrentTimeZone;                   // 0x0061(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ForcedCldTimeZoneValue;                            // 0x0062(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ForceMonth;                                        // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceDay;                                          // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlEvtPreData) == 0x000008, "Wrong alignment on FAtlEvtPreData");
static_assert(sizeof(FAtlEvtPreData) == 0x000070, "Wrong size on FAtlEvtPreData");
static_assert(offsetof(FAtlEvtPreData, EventMajorID) == 0x000000, "Member 'FAtlEvtPreData::EventMajorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, EventMinorID) == 0x000004, "Member 'FAtlEvtPreData::EventMinorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, EventCategoryTypeID) == 0x000008, "Member 'FAtlEvtPreData::EventCategoryTypeID' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, EventRank) == 0x00000C, "Member 'FAtlEvtPreData::EventRank' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, EventCategory) == 0x000014, "Member 'FAtlEvtPreData::EventCategory' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, EventLevel) == 0x000020, "Member 'FAtlEvtPreData::EventLevel' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, EventSublevels) == 0x000030, "Member 'FAtlEvtPreData::EventSublevels' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, LightScenarioSublevels) == 0x000040, "Member 'FAtlEvtPreData::LightScenarioSublevels' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, DungeonSublevel) == 0x000050, "Member 'FAtlEvtPreData::DungeonSublevel' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, bDisableAutoLoadFirstLightingScenarioLevel) == 0x000060, "Member 'FAtlEvtPreData::bDisableAutoLoadFirstLightingScenarioLevel' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, bForceDisableUseCurrentTimeZone) == 0x000061, "Member 'FAtlEvtPreData::bForceDisableUseCurrentTimeZone' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, ForcedCldTimeZoneValue) == 0x000062, "Member 'FAtlEvtPreData::ForcedCldTimeZoneValue' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, ForceMonth) == 0x000064, "Member 'FAtlEvtPreData::ForceMonth' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreData, ForceDay) == 0x000068, "Member 'FAtlEvtPreData::ForceDay' has a wrong offset!");

// ScriptStruct xrd777.DungeonPathData
// 0x0038 (0x0038 - 0x0000)
struct FDungeonPathData final
{
public:
	int32                                         MajorId;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorId;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Path;                                              // 0x0008(0x0018)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StrPath;                                           // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesignTypeID;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDungeonPathData) == 0x000008, "Wrong alignment on FDungeonPathData");
static_assert(sizeof(FDungeonPathData) == 0x000038, "Wrong size on FDungeonPathData");
static_assert(offsetof(FDungeonPathData, MajorId) == 0x000000, "Member 'FDungeonPathData::MajorId' has a wrong offset!");
static_assert(offsetof(FDungeonPathData, MinorId) == 0x000004, "Member 'FDungeonPathData::MinorId' has a wrong offset!");
static_assert(offsetof(FDungeonPathData, Path) == 0x000008, "Member 'FDungeonPathData::Path' has a wrong offset!");
static_assert(offsetof(FDungeonPathData, StrPath) == 0x000020, "Member 'FDungeonPathData::StrPath' has a wrong offset!");
static_assert(offsetof(FDungeonPathData, DesignTypeID) == 0x000030, "Member 'FDungeonPathData::DesignTypeID' has a wrong offset!");

// ScriptStruct xrd777.DungeonPathList
// 0x0010 (0x0010 - 0x0000)
struct FDungeonPathList final
{
public:
	TArray<struct FDungeonPathData>               PathData;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonPathList) == 0x000008, "Wrong alignment on FDungeonPathList");
static_assert(sizeof(FDungeonPathList) == 0x000010, "Wrong size on FDungeonPathList");
static_assert(offsetof(FDungeonPathList, PathData) == 0x000000, "Member 'FDungeonPathList::PathData' has a wrong offset!");

// ScriptStruct xrd777.FldPlayerCostumeData
// 0x0006 (0x0006 - 0x0000)
struct FFldPlayerCostumeData final
{
public:
	int16                                         CostumeType;                                       // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         BagType;                                           // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         ShoesID;                                           // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPlayerCostumeData) == 0x000002, "Wrong alignment on FFldPlayerCostumeData");
static_assert(sizeof(FFldPlayerCostumeData) == 0x000006, "Wrong size on FFldPlayerCostumeData");
static_assert(offsetof(FFldPlayerCostumeData, CostumeType) == 0x000000, "Member 'FFldPlayerCostumeData::CostumeType' has a wrong offset!");
static_assert(offsetof(FFldPlayerCostumeData, BagType) == 0x000002, "Member 'FFldPlayerCostumeData::BagType' has a wrong offset!");
static_assert(offsetof(FFldPlayerCostumeData, ShoesID) == 0x000004, "Member 'FFldPlayerCostumeData::ShoesID' has a wrong offset!");

// ScriptStruct xrd777.FldPlayerCostumeTableRow
// 0x0018 (0x0020 - 0x0008)
struct FFldPlayerCostumeTableRow final : public FTableRowBase
{
public:
	struct FFldPlayerCostumeData                  Data_DAY;                                          // 0x0008(0x0006)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldPlayerCostumeData                  Data_AFTER;                                        // 0x000E(0x0006)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldPlayerCostumeData                  Data_NIGHT;                                        // 0x0014(0x0006)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldPlayerCostumeData                  Data_NIGHT_H;                                      // 0x001A(0x0006)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPlayerCostumeTableRow) == 0x000008, "Wrong alignment on FFldPlayerCostumeTableRow");
static_assert(sizeof(FFldPlayerCostumeTableRow) == 0x000020, "Wrong size on FFldPlayerCostumeTableRow");
static_assert(offsetof(FFldPlayerCostumeTableRow, Data_DAY) == 0x000008, "Member 'FFldPlayerCostumeTableRow::Data_DAY' has a wrong offset!");
static_assert(offsetof(FFldPlayerCostumeTableRow, Data_AFTER) == 0x00000E, "Member 'FFldPlayerCostumeTableRow::Data_AFTER' has a wrong offset!");
static_assert(offsetof(FFldPlayerCostumeTableRow, Data_NIGHT) == 0x000014, "Member 'FFldPlayerCostumeTableRow::Data_NIGHT' has a wrong offset!");
static_assert(offsetof(FFldPlayerCostumeTableRow, Data_NIGHT_H) == 0x00001A, "Member 'FFldPlayerCostumeTableRow::Data_NIGHT_H' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtPreDataTableRow
// 0x03C8 (0x03D0 - 0x0008)
struct FAtlEvtPreDataTableRow final : public FTableRowBase
{
public:
	int32                                         EventMajorID;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventRank;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventType;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventLevel;                                        // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMajorID0;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMinorID0;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel0_0;                                // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel0_1;                                // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel0_2;                                // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel0_3;                                // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel0_4;                                // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSeasonSubLevel0_0;                          // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSoundSubLevel0_0;                           // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMajorID1;                                   // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMinorID1;                                   // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel1_0;                                // 0x00B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel1_1;                                // 0x00C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel1_2;                                // 0x00D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel1_3;                                // 0x00E0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel1_4;                                // 0x00F0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSeasonSubLevel1_0;                          // 0x0100(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSoundSubLevel1_0;                           // 0x0110(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMajorID2;                                   // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMinorID2;                                   // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel2_0;                                // 0x0128(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel2_1;                                // 0x0138(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel2_2;                                // 0x0148(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel2_3;                                // 0x0158(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel2_4;                                // 0x0168(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSeasonSubLevel2_0;                          // 0x0178(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSoundSubLevel2_0;                           // 0x0188(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMajorID3;                                   // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMinorID3;                                   // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel3_0;                                // 0x01A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel3_1;                                // 0x01B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel3_2;                                // 0x01C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel3_3;                                // 0x01D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel3_4;                                // 0x01E0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSeasonSubLevel3_0;                          // 0x01F0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSoundSubLevel3_0;                           // 0x0200(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMajorID4;                                   // 0x0210(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMinorID4;                                   // 0x0214(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel4_0;                                // 0x0218(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel4_1;                                // 0x0228(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel4_2;                                // 0x0238(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel4_3;                                // 0x0248(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel4_4;                                // 0x0258(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSeasonSubLevel4_0;                          // 0x0268(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSoundSubLevel4_0;                           // 0x0278(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMajorID5;                                   // 0x0288(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMinorID5;                                   // 0x028C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel5_0;                                // 0x0290(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel5_1;                                // 0x02A0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel5_2;                                // 0x02B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel5_3;                                // 0x02C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel5_4;                                // 0x02D0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSeasonSubLevel5_0;                          // 0x02E0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSoundSubLevel5_0;                           // 0x02F0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMajorID6;                                   // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGFieldMinorID6;                                   // 0x0304(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel6_0;                                // 0x0308(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel6_1;                                // 0x0318(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel6_2;                                // 0x0328(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel6_3;                                // 0x0338(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSubLevel6_4;                                // 0x0348(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSeasonSubLevel6_0;                          // 0x0358(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BGFieldSoundSubLevel6_0;                           // 0x0368(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LightScenario0;                                    // 0x0378(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LightScenario1;                                    // 0x0380(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LightScenario2;                                    // 0x0388(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LightScenario3;                                    // 0x0390(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LightScenario4;                                    // 0x0398(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LightScenario5;                                    // 0x03A0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LightScenario6;                                    // 0x03A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DungeonFloorSubLevel;                              // 0x03B0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DungeonEnvironmentSubLevel;                        // 0x03B8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableAutoLoadFirstLightingScenarioLevel;         // 0x03C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceDisableUseCurrentTimeZone;                    // 0x03C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C2[0x2];                                      // 0x03C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ForceMonth;                                        // 0x03C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ForceDay;                                          // 0x03C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlEvtPreDataTableRow) == 0x000008, "Wrong alignment on FAtlEvtPreDataTableRow");
static_assert(sizeof(FAtlEvtPreDataTableRow) == 0x0003D0, "Wrong size on FAtlEvtPreDataTableRow");
static_assert(offsetof(FAtlEvtPreDataTableRow, EventMajorID) == 0x000008, "Member 'FAtlEvtPreDataTableRow::EventMajorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, EventMinorID) == 0x00000C, "Member 'FAtlEvtPreDataTableRow::EventMinorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, EventRank) == 0x000010, "Member 'FAtlEvtPreDataTableRow::EventRank' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, EventType) == 0x000018, "Member 'FAtlEvtPreDataTableRow::EventType' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, EventLevel) == 0x000020, "Member 'FAtlEvtPreDataTableRow::EventLevel' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMajorID0) == 0x000030, "Member 'FAtlEvtPreDataTableRow::BGFieldMajorID0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMinorID0) == 0x000034, "Member 'FAtlEvtPreDataTableRow::BGFieldMinorID0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel0_0) == 0x000038, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel0_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel0_1) == 0x000048, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel0_1' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel0_2) == 0x000058, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel0_2' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel0_3) == 0x000068, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel0_3' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel0_4) == 0x000078, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel0_4' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSeasonSubLevel0_0) == 0x000088, "Member 'FAtlEvtPreDataTableRow::BGFieldSeasonSubLevel0_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSoundSubLevel0_0) == 0x000098, "Member 'FAtlEvtPreDataTableRow::BGFieldSoundSubLevel0_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMajorID1) == 0x0000A8, "Member 'FAtlEvtPreDataTableRow::BGFieldMajorID1' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMinorID1) == 0x0000AC, "Member 'FAtlEvtPreDataTableRow::BGFieldMinorID1' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel1_0) == 0x0000B0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel1_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel1_1) == 0x0000C0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel1_1' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel1_2) == 0x0000D0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel1_2' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel1_3) == 0x0000E0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel1_3' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel1_4) == 0x0000F0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel1_4' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSeasonSubLevel1_0) == 0x000100, "Member 'FAtlEvtPreDataTableRow::BGFieldSeasonSubLevel1_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSoundSubLevel1_0) == 0x000110, "Member 'FAtlEvtPreDataTableRow::BGFieldSoundSubLevel1_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMajorID2) == 0x000120, "Member 'FAtlEvtPreDataTableRow::BGFieldMajorID2' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMinorID2) == 0x000124, "Member 'FAtlEvtPreDataTableRow::BGFieldMinorID2' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel2_0) == 0x000128, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel2_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel2_1) == 0x000138, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel2_1' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel2_2) == 0x000148, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel2_2' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel2_3) == 0x000158, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel2_3' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel2_4) == 0x000168, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel2_4' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSeasonSubLevel2_0) == 0x000178, "Member 'FAtlEvtPreDataTableRow::BGFieldSeasonSubLevel2_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSoundSubLevel2_0) == 0x000188, "Member 'FAtlEvtPreDataTableRow::BGFieldSoundSubLevel2_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMajorID3) == 0x000198, "Member 'FAtlEvtPreDataTableRow::BGFieldMajorID3' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMinorID3) == 0x00019C, "Member 'FAtlEvtPreDataTableRow::BGFieldMinorID3' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel3_0) == 0x0001A0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel3_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel3_1) == 0x0001B0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel3_1' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel3_2) == 0x0001C0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel3_2' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel3_3) == 0x0001D0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel3_3' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel3_4) == 0x0001E0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel3_4' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSeasonSubLevel3_0) == 0x0001F0, "Member 'FAtlEvtPreDataTableRow::BGFieldSeasonSubLevel3_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSoundSubLevel3_0) == 0x000200, "Member 'FAtlEvtPreDataTableRow::BGFieldSoundSubLevel3_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMajorID4) == 0x000210, "Member 'FAtlEvtPreDataTableRow::BGFieldMajorID4' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMinorID4) == 0x000214, "Member 'FAtlEvtPreDataTableRow::BGFieldMinorID4' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel4_0) == 0x000218, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel4_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel4_1) == 0x000228, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel4_1' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel4_2) == 0x000238, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel4_2' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel4_3) == 0x000248, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel4_3' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel4_4) == 0x000258, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel4_4' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSeasonSubLevel4_0) == 0x000268, "Member 'FAtlEvtPreDataTableRow::BGFieldSeasonSubLevel4_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSoundSubLevel4_0) == 0x000278, "Member 'FAtlEvtPreDataTableRow::BGFieldSoundSubLevel4_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMajorID5) == 0x000288, "Member 'FAtlEvtPreDataTableRow::BGFieldMajorID5' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMinorID5) == 0x00028C, "Member 'FAtlEvtPreDataTableRow::BGFieldMinorID5' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel5_0) == 0x000290, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel5_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel5_1) == 0x0002A0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel5_1' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel5_2) == 0x0002B0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel5_2' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel5_3) == 0x0002C0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel5_3' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel5_4) == 0x0002D0, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel5_4' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSeasonSubLevel5_0) == 0x0002E0, "Member 'FAtlEvtPreDataTableRow::BGFieldSeasonSubLevel5_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSoundSubLevel5_0) == 0x0002F0, "Member 'FAtlEvtPreDataTableRow::BGFieldSoundSubLevel5_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMajorID6) == 0x000300, "Member 'FAtlEvtPreDataTableRow::BGFieldMajorID6' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldMinorID6) == 0x000304, "Member 'FAtlEvtPreDataTableRow::BGFieldMinorID6' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel6_0) == 0x000308, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel6_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel6_1) == 0x000318, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel6_1' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel6_2) == 0x000328, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel6_2' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel6_3) == 0x000338, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel6_3' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSubLevel6_4) == 0x000348, "Member 'FAtlEvtPreDataTableRow::BGFieldSubLevel6_4' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSeasonSubLevel6_0) == 0x000358, "Member 'FAtlEvtPreDataTableRow::BGFieldSeasonSubLevel6_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, BGFieldSoundSubLevel6_0) == 0x000368, "Member 'FAtlEvtPreDataTableRow::BGFieldSoundSubLevel6_0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, LightScenario0) == 0x000378, "Member 'FAtlEvtPreDataTableRow::LightScenario0' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, LightScenario1) == 0x000380, "Member 'FAtlEvtPreDataTableRow::LightScenario1' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, LightScenario2) == 0x000388, "Member 'FAtlEvtPreDataTableRow::LightScenario2' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, LightScenario3) == 0x000390, "Member 'FAtlEvtPreDataTableRow::LightScenario3' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, LightScenario4) == 0x000398, "Member 'FAtlEvtPreDataTableRow::LightScenario4' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, LightScenario5) == 0x0003A0, "Member 'FAtlEvtPreDataTableRow::LightScenario5' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, LightScenario6) == 0x0003A8, "Member 'FAtlEvtPreDataTableRow::LightScenario6' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, DungeonFloorSubLevel) == 0x0003B0, "Member 'FAtlEvtPreDataTableRow::DungeonFloorSubLevel' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, DungeonEnvironmentSubLevel) == 0x0003B8, "Member 'FAtlEvtPreDataTableRow::DungeonEnvironmentSubLevel' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, DisableAutoLoadFirstLightingScenarioLevel) == 0x0003C0, "Member 'FAtlEvtPreDataTableRow::DisableAutoLoadFirstLightingScenarioLevel' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, ForceDisableUseCurrentTimeZone) == 0x0003C1, "Member 'FAtlEvtPreDataTableRow::ForceDisableUseCurrentTimeZone' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, ForceMonth) == 0x0003C4, "Member 'FAtlEvtPreDataTableRow::ForceMonth' has a wrong offset!");
static_assert(offsetof(FAtlEvtPreDataTableRow, ForceDay) == 0x0003C8, "Member 'FAtlEvtPreDataTableRow::ForceDay' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtPlayBindingTagParameter
// 0x0018 (0x0018 - 0x0000)
struct FAtlEvtPlayBindingTagParameter final
{
public:
	class AActor*                                 BindingActor;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BindingTag;                                        // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtPlayBindingTagParameter) == 0x000008, "Wrong alignment on FAtlEvtPlayBindingTagParameter");
static_assert(sizeof(FAtlEvtPlayBindingTagParameter) == 0x000018, "Wrong size on FAtlEvtPlayBindingTagParameter");
static_assert(offsetof(FAtlEvtPlayBindingTagParameter, BindingActor) == 0x000000, "Member 'FAtlEvtPlayBindingTagParameter::BindingActor' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayBindingTagParameter, BindingTag) == 0x000008, "Member 'FAtlEvtPlayBindingTagParameter::BindingTag' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtAssetOverrideParameter
// 0x0018 (0x0018 - 0x0000)
struct FAtlEvtAssetOverrideParameter final
{
public:
	struct FAtlEvtPlayBindingTagParameter         BindingTagParameter;                               // 0x0000(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtAssetOverrideParameter) == 0x000008, "Wrong alignment on FAtlEvtAssetOverrideParameter");
static_assert(sizeof(FAtlEvtAssetOverrideParameter) == 0x000018, "Wrong size on FAtlEvtAssetOverrideParameter");
static_assert(offsetof(FAtlEvtAssetOverrideParameter, BindingTagParameter) == 0x000000, "Member 'FAtlEvtAssetOverrideParameter::BindingTagParameter' has a wrong offset!");

// ScriptStruct xrd777.DungeonMDoorEncountIdOfDesignType
// 0x0010 (0x0010 - 0x0000)
struct FDungeonMDoorEncountIdOfDesignType final
{
public:
	TArray<int32>                                 EncountID;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonMDoorEncountIdOfDesignType) == 0x000008, "Wrong alignment on FDungeonMDoorEncountIdOfDesignType");
static_assert(sizeof(FDungeonMDoorEncountIdOfDesignType) == 0x000010, "Wrong size on FDungeonMDoorEncountIdOfDesignType");
static_assert(offsetof(FDungeonMDoorEncountIdOfDesignType, EncountID) == 0x000000, "Member 'FDungeonMDoorEncountIdOfDesignType::EncountID' has a wrong offset!");

// ScriptStruct xrd777.DungeonMDoorEncountIDData
// 0x0070 (0x0070 - 0x0000)
struct FDungeonMDoorEncountIDData final
{
public:
	TArray<int32>                                 Minor00;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Minor01;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, struct FDungeonMDoorEncountIdOfDesignType> EncountIdOfDesignType;                             // 0x0020(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonMDoorEncountIDData) == 0x000008, "Wrong alignment on FDungeonMDoorEncountIDData");
static_assert(sizeof(FDungeonMDoorEncountIDData) == 0x000070, "Wrong size on FDungeonMDoorEncountIDData");
static_assert(offsetof(FDungeonMDoorEncountIDData, Minor00) == 0x000000, "Member 'FDungeonMDoorEncountIDData::Minor00' has a wrong offset!");
static_assert(offsetof(FDungeonMDoorEncountIDData, Minor01) == 0x000010, "Member 'FDungeonMDoorEncountIDData::Minor01' has a wrong offset!");
static_assert(offsetof(FDungeonMDoorEncountIDData, EncountIdOfDesignType) == 0x000020, "Member 'FDungeonMDoorEncountIDData::EncountIdOfDesignType' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtSoundSEInfo
// 0x0008 (0x0008 - 0x0000)
struct FAtlEvtSoundSEInfo final
{
public:
	int32                                         bankID;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhileHighSpeed;                               // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlEvtSoundSEInfo) == 0x000004, "Wrong alignment on FAtlEvtSoundSEInfo");
static_assert(sizeof(FAtlEvtSoundSEInfo) == 0x000008, "Wrong size on FAtlEvtSoundSEInfo");
static_assert(offsetof(FAtlEvtSoundSEInfo, bankID) == 0x000000, "Member 'FAtlEvtSoundSEInfo::bankID' has a wrong offset!");
static_assert(offsetof(FAtlEvtSoundSEInfo, bStopWhileHighSpeed) == 0x000004, "Member 'FAtlEvtSoundSEInfo::bStopWhileHighSpeed' has a wrong offset!");

// ScriptStruct xrd777.FldNpcCompPropsInfo
// 0x0080 (0x0080 - 0x0000)
struct FFldNpcCompPropsInfo
{
public:
	class AAppPropsCore*                          MActor;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        MFilePath;                                         // 0x0008(0x0018)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MAttachIndex;                                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MAttachName;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MTransform;                                        // 0x0040(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          MMotionAttached;                                   // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MWaitMotionID;                                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MSpeakMotionID;                                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldNpcCompPropsInfo) == 0x000010, "Wrong alignment on FFldNpcCompPropsInfo");
static_assert(sizeof(FFldNpcCompPropsInfo) == 0x000080, "Wrong size on FFldNpcCompPropsInfo");
static_assert(offsetof(FFldNpcCompPropsInfo, MActor) == 0x000000, "Member 'FFldNpcCompPropsInfo::MActor' has a wrong offset!");
static_assert(offsetof(FFldNpcCompPropsInfo, MFilePath) == 0x000008, "Member 'FFldNpcCompPropsInfo::MFilePath' has a wrong offset!");
static_assert(offsetof(FFldNpcCompPropsInfo, MAttachIndex) == 0x000020, "Member 'FFldNpcCompPropsInfo::MAttachIndex' has a wrong offset!");
static_assert(offsetof(FFldNpcCompPropsInfo, MAttachName) == 0x000028, "Member 'FFldNpcCompPropsInfo::MAttachName' has a wrong offset!");
static_assert(offsetof(FFldNpcCompPropsInfo, MTransform) == 0x000040, "Member 'FFldNpcCompPropsInfo::MTransform' has a wrong offset!");
static_assert(offsetof(FFldNpcCompPropsInfo, MMotionAttached) == 0x000070, "Member 'FFldNpcCompPropsInfo::MMotionAttached' has a wrong offset!");
static_assert(offsetof(FFldNpcCompPropsInfo, MWaitMotionID) == 0x000074, "Member 'FFldNpcCompPropsInfo::MWaitMotionID' has a wrong offset!");
static_assert(offsetof(FFldNpcCompPropsInfo, MSpeakMotionID) == 0x000078, "Member 'FFldNpcCompPropsInfo::MSpeakMotionID' has a wrong offset!");

// ScriptStruct xrd777.FldNpcCompOrnamentsInfo
// 0x0010 (0x0090 - 0x0080)
struct FFldNpcCompOrnamentsInfo final : public FFldNpcCompPropsInfo
{
public:
	int32                                         MOnFlagValue;                                      // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0xC];                                       // 0x0084(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldNpcCompOrnamentsInfo) == 0x000010, "Wrong alignment on FFldNpcCompOrnamentsInfo");
static_assert(sizeof(FFldNpcCompOrnamentsInfo) == 0x000090, "Wrong size on FFldNpcCompOrnamentsInfo");
static_assert(offsetof(FFldNpcCompOrnamentsInfo, MOnFlagValue) == 0x000080, "Member 'FFldNpcCompOrnamentsInfo::MOnFlagValue' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtPlayLoadSublevelInfo
// 0x000C (0x000C - 0x0000)
struct FAtlEvtPlayLoadSublevelInfo final
{
public:
	class FName                                   SublevelPackageName;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtlEvtPlayLoadSublevelType                   SublevelType;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlEvtPlayLoadSublevelInfo) == 0x000004, "Wrong alignment on FAtlEvtPlayLoadSublevelInfo");
static_assert(sizeof(FAtlEvtPlayLoadSublevelInfo) == 0x00000C, "Wrong size on FAtlEvtPlayLoadSublevelInfo");
static_assert(offsetof(FAtlEvtPlayLoadSublevelInfo, SublevelPackageName) == 0x000000, "Member 'FAtlEvtPlayLoadSublevelInfo::SublevelPackageName' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayLoadSublevelInfo, SublevelType) == 0x000008, "Member 'FAtlEvtPlayLoadSublevelInfo::SublevelType' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtPlayingCharacterInfo
// 0x0010 (0x0010 - 0x0000)
struct FAtlEvtPlayingCharacterInfo final
{
public:
	TArray<TWeakObjectPtr<class AActor>>          AppEventCharacters;                                // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtPlayingCharacterInfo) == 0x000008, "Wrong alignment on FAtlEvtPlayingCharacterInfo");
static_assert(sizeof(FAtlEvtPlayingCharacterInfo) == 0x000010, "Wrong size on FAtlEvtPlayingCharacterInfo");
static_assert(offsetof(FAtlEvtPlayingCharacterInfo, AppEventCharacters) == 0x000000, "Member 'FAtlEvtPlayingCharacterInfo::AppEventCharacters' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtVisibleEventInfo
// 0x0058 (0x0058 - 0x0000)
struct FAtlEvtVisibleEventInfo final
{
public:
	bool                                          bExsistVisibleField;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventLevelName;                                    // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventCategoryTypeID;                               // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMajorID;                                      // 0x001C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ULevelStreaming>         VisibleLevelStreaming;                             // 0x0028(0x0028)(BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMajorID;                                      // 0x0050(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinorID;                                      // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtVisibleEventInfo) == 0x000008, "Wrong alignment on FAtlEvtVisibleEventInfo");
static_assert(sizeof(FAtlEvtVisibleEventInfo) == 0x000058, "Wrong size on FAtlEvtVisibleEventInfo");
static_assert(offsetof(FAtlEvtVisibleEventInfo, bExsistVisibleField) == 0x000000, "Member 'FAtlEvtVisibleEventInfo::bExsistVisibleField' has a wrong offset!");
static_assert(offsetof(FAtlEvtVisibleEventInfo, EventLevelName) == 0x000008, "Member 'FAtlEvtVisibleEventInfo::EventLevelName' has a wrong offset!");
static_assert(offsetof(FAtlEvtVisibleEventInfo, EventCategoryTypeID) == 0x000018, "Member 'FAtlEvtVisibleEventInfo::EventCategoryTypeID' has a wrong offset!");
static_assert(offsetof(FAtlEvtVisibleEventInfo, EventMajorID) == 0x00001C, "Member 'FAtlEvtVisibleEventInfo::EventMajorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtVisibleEventInfo, EventMinorID) == 0x000020, "Member 'FAtlEvtVisibleEventInfo::EventMinorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtVisibleEventInfo, VisibleLevelStreaming) == 0x000028, "Member 'FAtlEvtVisibleEventInfo::VisibleLevelStreaming' has a wrong offset!");
static_assert(offsetof(FAtlEvtVisibleEventInfo, FieldMajorID) == 0x000050, "Member 'FAtlEvtVisibleEventInfo::FieldMajorID' has a wrong offset!");
static_assert(offsetof(FAtlEvtVisibleEventInfo, FieldMinorID) == 0x000054, "Member 'FAtlEvtVisibleEventInfo::FieldMinorID' has a wrong offset!");

// ScriptStruct xrd777.DungeonFDoorAppearanceData
// 0x0028 (0x0028 - 0x0000)
struct FDungeonFDoorAppearanceData final
{
public:
	TArray<int32>                                 MagValue_SAreaDiff;                                // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MagDecValue_Floor;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagIncAddValue;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PartPos;                                           // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDungeonFDoorAppearanceData) == 0x000008, "Wrong alignment on FDungeonFDoorAppearanceData");
static_assert(sizeof(FDungeonFDoorAppearanceData) == 0x000028, "Wrong size on FDungeonFDoorAppearanceData");
static_assert(offsetof(FDungeonFDoorAppearanceData, MagValue_SAreaDiff) == 0x000000, "Member 'FDungeonFDoorAppearanceData::MagValue_SAreaDiff' has a wrong offset!");
static_assert(offsetof(FDungeonFDoorAppearanceData, MagDecValue_Floor) == 0x000010, "Member 'FDungeonFDoorAppearanceData::MagDecValue_Floor' has a wrong offset!");
static_assert(offsetof(FDungeonFDoorAppearanceData, MagIncAddValue) == 0x000014, "Member 'FDungeonFDoorAppearanceData::MagIncAddValue' has a wrong offset!");
static_assert(offsetof(FDungeonFDoorAppearanceData, PartPos) == 0x000018, "Member 'FDungeonFDoorAppearanceData::PartPos' has a wrong offset!");

// ScriptStruct xrd777.FieldEventInfo
// 0x0008 (0x0008 - 0x0000)
struct FFieldEventInfo final
{
public:
	class AActor*                                 FieldCameraActor;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFieldEventInfo) == 0x000008, "Wrong alignment on FFieldEventInfo");
static_assert(sizeof(FFieldEventInfo) == 0x000008, "Wrong size on FFieldEventInfo");
static_assert(offsetof(FFieldEventInfo, FieldCameraActor) == 0x000000, "Member 'FFieldEventInfo::FieldCameraActor' has a wrong offset!");

// ScriptStruct xrd777.AtlEvtPlayParameter
// 0x0038 (0x0038 - 0x0000)
struct FAtlEvtPlayParameter final
{
public:
	class FString                                 EventAssetName;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableBinding;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtlEvtPlayBindingTagParameter> BindingTagActors;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDisableTimeZone;                                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFieldEventInfo                        FieldEventInfo;                                    // 0x0030(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlEvtPlayParameter) == 0x000008, "Wrong alignment on FAtlEvtPlayParameter");
static_assert(sizeof(FAtlEvtPlayParameter) == 0x000038, "Wrong size on FAtlEvtPlayParameter");
static_assert(offsetof(FAtlEvtPlayParameter, EventAssetName) == 0x000000, "Member 'FAtlEvtPlayParameter::EventAssetName' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayParameter, bEnableBinding) == 0x000010, "Member 'FAtlEvtPlayParameter::bEnableBinding' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayParameter, BindingTagActors) == 0x000018, "Member 'FAtlEvtPlayParameter::BindingTagActors' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayParameter, bDisableTimeZone) == 0x000028, "Member 'FAtlEvtPlayParameter::bDisableTimeZone' has a wrong offset!");
static_assert(offsetof(FAtlEvtPlayParameter, FieldEventInfo) == 0x000030, "Member 'FAtlEvtPlayParameter::FieldEventInfo' has a wrong offset!");

// ScriptStruct xrd777.DungeonPartOpenInfoData
// 0x0008 (0x0008 - 0x0000)
struct FDungeonPartOpenInfoData final
{
public:
	float                                         ConnectPartOpenDistance;                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeparatelyNextFloorOpenNum;                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonPartOpenInfoData) == 0x000004, "Wrong alignment on FDungeonPartOpenInfoData");
static_assert(sizeof(FDungeonPartOpenInfoData) == 0x000008, "Wrong size on FDungeonPartOpenInfoData");
static_assert(offsetof(FDungeonPartOpenInfoData, ConnectPartOpenDistance) == 0x000000, "Member 'FDungeonPartOpenInfoData::ConnectPartOpenDistance' has a wrong offset!");
static_assert(offsetof(FDungeonPartOpenInfoData, SeparatelyNextFloorOpenNum) == 0x000004, "Member 'FDungeonPartOpenInfoData::SeparatelyNextFloorOpenNum' has a wrong offset!");

// ScriptStruct xrd777.BaseHeadPanel
// 0x0CA0 (0x0CA0 - 0x0000)
struct alignas(0x10) FBaseHeadPanel
{
public:
	uint8                                         Pad_0[0xCA0];                                      // 0x0000(0x0CA0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBaseHeadPanel) == 0x000010, "Wrong alignment on FBaseHeadPanel");
static_assert(sizeof(FBaseHeadPanel) == 0x000CA0, "Wrong size on FBaseHeadPanel");

// ScriptStruct xrd777.FldPmtCostumeDataCore
// 0x0008 (0x0008 - 0x0000)
struct FFldPmtCostumeDataCore final
{
public:
	int32                                         CostumeIndex;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Setting;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPmtCostumeDataCore) == 0x000004, "Wrong alignment on FFldPmtCostumeDataCore");
static_assert(sizeof(FFldPmtCostumeDataCore) == 0x000008, "Wrong size on FFldPmtCostumeDataCore");
static_assert(offsetof(FFldPmtCostumeDataCore, CostumeIndex) == 0x000000, "Member 'FFldPmtCostumeDataCore::CostumeIndex' has a wrong offset!");
static_assert(offsetof(FFldPmtCostumeDataCore, Setting) == 0x000004, "Member 'FFldPmtCostumeDataCore::Setting' has a wrong offset!");

// ScriptStruct xrd777.AtlSlotMultiAnimationParam
// 0x0020 (0x0020 - 0x0000)
struct FAtlSlotMultiAnimationParam final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendIn;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOut;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlSlotMultiAnimationParam) == 0x000008, "Wrong alignment on FAtlSlotMultiAnimationParam");
static_assert(sizeof(FAtlSlotMultiAnimationParam) == 0x000020, "Wrong size on FAtlSlotMultiAnimationParam");
static_assert(offsetof(FAtlSlotMultiAnimationParam, Animation) == 0x000000, "Member 'FAtlSlotMultiAnimationParam::Animation' has a wrong offset!");
static_assert(offsetof(FAtlSlotMultiAnimationParam, StartOffset) == 0x000008, "Member 'FAtlSlotMultiAnimationParam::StartOffset' has a wrong offset!");
static_assert(offsetof(FAtlSlotMultiAnimationParam, EndOffset) == 0x00000C, "Member 'FAtlSlotMultiAnimationParam::EndOffset' has a wrong offset!");
static_assert(offsetof(FAtlSlotMultiAnimationParam, BlendIn) == 0x000010, "Member 'FAtlSlotMultiAnimationParam::BlendIn' has a wrong offset!");
static_assert(offsetof(FAtlSlotMultiAnimationParam, BlendOut) == 0x000014, "Member 'FAtlSlotMultiAnimationParam::BlendOut' has a wrong offset!");
static_assert(offsetof(FAtlSlotMultiAnimationParam, PlayRate) == 0x000018, "Member 'FAtlSlotMultiAnimationParam::PlayRate' has a wrong offset!");

// ScriptStruct xrd777.BtlCharacterWeaponVisibility
// 0x0008 (0x0010 - 0x0008)
struct FBtlCharacterWeaponVisibility final : public FTableRowBase
{
public:
	bool                                          ShowWeapon;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowGun;                                           // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlCharacterWeaponVisibility) == 0x000008, "Wrong alignment on FBtlCharacterWeaponVisibility");
static_assert(sizeof(FBtlCharacterWeaponVisibility) == 0x000010, "Wrong size on FBtlCharacterWeaponVisibility");
static_assert(offsetof(FBtlCharacterWeaponVisibility, ShowWeapon) == 0x000008, "Member 'FBtlCharacterWeaponVisibility::ShowWeapon' has a wrong offset!");
static_assert(offsetof(FBtlCharacterWeaponVisibility, ShowGun) == 0x000009, "Member 'FBtlCharacterWeaponVisibility::ShowGun' has a wrong offset!");

// ScriptStruct xrd777.BtlCharacterFaceAnim
// 0x0010 (0x0018 - 0x0008)
struct FBtlCharacterFaceAnim final : public FTableRowBase
{
public:
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppCharFaceAnimID                            FaceType;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NotPlay;                                           // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlCharacterFaceAnim) == 0x000008, "Wrong alignment on FBtlCharacterFaceAnim");
static_assert(sizeof(FBtlCharacterFaceAnim) == 0x000018, "Wrong size on FBtlCharacterFaceAnim");
static_assert(offsetof(FBtlCharacterFaceAnim, SectionName) == 0x000008, "Member 'FBtlCharacterFaceAnim::SectionName' has a wrong offset!");
static_assert(offsetof(FBtlCharacterFaceAnim, FaceType) == 0x000010, "Member 'FBtlCharacterFaceAnim::FaceType' has a wrong offset!");
static_assert(offsetof(FBtlCharacterFaceAnim, NotPlay) == 0x000011, "Member 'FBtlCharacterFaceAnim::NotPlay' has a wrong offset!");

// ScriptStruct xrd777.FldMiscCharBaseReload_Data
// 0x0010 (0x0010 - 0x0000)
struct FFldMiscCharBaseReload_Data final
{
public:
	EFFldMiscCharBaseReload_Type                  MType;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAppCharacterComp*                      MCharaComp;                                        // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldMiscCharBaseReload_Data) == 0x000008, "Wrong alignment on FFldMiscCharBaseReload_Data");
static_assert(sizeof(FFldMiscCharBaseReload_Data) == 0x000010, "Wrong size on FFldMiscCharBaseReload_Data");
static_assert(offsetof(FFldMiscCharBaseReload_Data, MType) == 0x000000, "Member 'FFldMiscCharBaseReload_Data::MType' has a wrong offset!");
static_assert(offsetof(FFldMiscCharBaseReload_Data, MCharaComp) == 0x000008, "Member 'FFldMiscCharBaseReload_Data::MCharaComp' has a wrong offset!");

// ScriptStruct xrd777.BtlCharacterVisual
// 0x0020 (0x0028 - 0x0008)
struct FBtlCharacterVisual final : public FTableRowBase
{
public:
	bool                                          Movable;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AttackWithMove;                                    // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttackRange;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 AttackDegree;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          HasMultiPersonalMotion;                            // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseShakingWhenDownDamage;                          // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlCharacterVisual) == 0x000008, "Wrong alignment on FBtlCharacterVisual");
static_assert(sizeof(FBtlCharacterVisual) == 0x000028, "Wrong size on FBtlCharacterVisual");
static_assert(offsetof(FBtlCharacterVisual, Movable) == 0x000008, "Member 'FBtlCharacterVisual::Movable' has a wrong offset!");
static_assert(offsetof(FBtlCharacterVisual, AttackWithMove) == 0x000009, "Member 'FBtlCharacterVisual::AttackWithMove' has a wrong offset!");
static_assert(offsetof(FBtlCharacterVisual, AttackRange) == 0x00000C, "Member 'FBtlCharacterVisual::AttackRange' has a wrong offset!");
static_assert(offsetof(FBtlCharacterVisual, AttackDegree) == 0x000010, "Member 'FBtlCharacterVisual::AttackDegree' has a wrong offset!");
static_assert(offsetof(FBtlCharacterVisual, HasMultiPersonalMotion) == 0x000020, "Member 'FBtlCharacterVisual::HasMultiPersonalMotion' has a wrong offset!");
static_assert(offsetof(FBtlCharacterVisual, UseShakingWhenDownDamage) == 0x000021, "Member 'FBtlCharacterVisual::UseShakingWhenDownDamage' has a wrong offset!");

// ScriptStruct xrd777.GlobalGameDataInheritanceTableRow
// 0x0008 (0x0010 - 0x0008)
struct FGlobalGameDataInheritanceTableRow final : public FTableRowBase
{
public:
	int16                                         Type;                                              // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Parameter;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalGameDataInheritanceTableRow) == 0x000008, "Wrong alignment on FGlobalGameDataInheritanceTableRow");
static_assert(sizeof(FGlobalGameDataInheritanceTableRow) == 0x000010, "Wrong size on FGlobalGameDataInheritanceTableRow");
static_assert(offsetof(FGlobalGameDataInheritanceTableRow, Type) == 0x000008, "Member 'FGlobalGameDataInheritanceTableRow::Type' has a wrong offset!");
static_assert(offsetof(FGlobalGameDataInheritanceTableRow, Parameter) == 0x00000C, "Member 'FGlobalGameDataInheritanceTableRow::Parameter' has a wrong offset!");

// ScriptStruct xrd777.BtlCylinder
// 0x0018 (0x0020 - 0x0008)
struct FBtlCylinder final : public FTableRowBase
{
public:
	struct FVector                                CenterBottom;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlCylinder) == 0x000008, "Wrong alignment on FBtlCylinder");
static_assert(sizeof(FBtlCylinder) == 0x000020, "Wrong size on FBtlCylinder");
static_assert(offsetof(FBtlCylinder, CenterBottom) == 0x000008, "Member 'FBtlCylinder::CenterBottom' has a wrong offset!");
static_assert(offsetof(FBtlCylinder, Radius) == 0x000014, "Member 'FBtlCylinder::Radius' has a wrong offset!");
static_assert(offsetof(FBtlCylinder, Height) == 0x000018, "Member 'FBtlCylinder::Height' has a wrong offset!");

// ScriptStruct xrd777.BtlPersonaVisual
// 0x0068 (0x0070 - 0x0008)
struct FBtlPersonaVisual final : public FTableRowBase
{
public:
	struct FVector                                SummonLocation;                                    // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SummonRotation;                                    // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                PhysicsLocation;                                   // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PhysicsRotation;                                   // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                MagicLocation;                                     // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MagicRotation;                                     // 0x0044(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CustomCutinLocation;                               // 0x0050(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CustomCutinRotation;                               // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PhysicalSkillRange;                                // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableBackShotCamera;                             // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseLSizeCutin;                                     // 0x006D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCustomCutinLocation;                            // 0x006E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlPersonaVisual) == 0x000008, "Wrong alignment on FBtlPersonaVisual");
static_assert(sizeof(FBtlPersonaVisual) == 0x000070, "Wrong size on FBtlPersonaVisual");
static_assert(offsetof(FBtlPersonaVisual, SummonLocation) == 0x000008, "Member 'FBtlPersonaVisual::SummonLocation' has a wrong offset!");
static_assert(offsetof(FBtlPersonaVisual, SummonRotation) == 0x000014, "Member 'FBtlPersonaVisual::SummonRotation' has a wrong offset!");
static_assert(offsetof(FBtlPersonaVisual, PhysicsLocation) == 0x000020, "Member 'FBtlPersonaVisual::PhysicsLocation' has a wrong offset!");
static_assert(offsetof(FBtlPersonaVisual, PhysicsRotation) == 0x00002C, "Member 'FBtlPersonaVisual::PhysicsRotation' has a wrong offset!");
static_assert(offsetof(FBtlPersonaVisual, MagicLocation) == 0x000038, "Member 'FBtlPersonaVisual::MagicLocation' has a wrong offset!");
static_assert(offsetof(FBtlPersonaVisual, MagicRotation) == 0x000044, "Member 'FBtlPersonaVisual::MagicRotation' has a wrong offset!");
static_assert(offsetof(FBtlPersonaVisual, CustomCutinLocation) == 0x000050, "Member 'FBtlPersonaVisual::CustomCutinLocation' has a wrong offset!");
static_assert(offsetof(FBtlPersonaVisual, CustomCutinRotation) == 0x00005C, "Member 'FBtlPersonaVisual::CustomCutinRotation' has a wrong offset!");
static_assert(offsetof(FBtlPersonaVisual, PhysicalSkillRange) == 0x000068, "Member 'FBtlPersonaVisual::PhysicalSkillRange' has a wrong offset!");
static_assert(offsetof(FBtlPersonaVisual, DisableBackShotCamera) == 0x00006C, "Member 'FBtlPersonaVisual::DisableBackShotCamera' has a wrong offset!");
static_assert(offsetof(FBtlPersonaVisual, UseLSizeCutin) == 0x00006D, "Member 'FBtlPersonaVisual::UseLSizeCutin' has a wrong offset!");
static_assert(offsetof(FBtlPersonaVisual, UseCustomCutinLocation) == 0x00006E, "Member 'FBtlPersonaVisual::UseCustomCutinLocation' has a wrong offset!");

// ScriptStruct xrd777.BtlEventCustomEquipment
// 0x000C (0x000C - 0x0000)
struct FBtlEventCustomEquipment final
{
public:
	bool                                          UseCustomEquipSettings;                            // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CostumeID;                                         // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseWeapon;                                         // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlEventCustomEquipment) == 0x000004, "Wrong alignment on FBtlEventCustomEquipment");
static_assert(sizeof(FBtlEventCustomEquipment) == 0x00000C, "Wrong size on FBtlEventCustomEquipment");
static_assert(offsetof(FBtlEventCustomEquipment, UseCustomEquipSettings) == 0x000000, "Member 'FBtlEventCustomEquipment::UseCustomEquipSettings' has a wrong offset!");
static_assert(offsetof(FBtlEventCustomEquipment, CostumeID) == 0x000004, "Member 'FBtlEventCustomEquipment::CostumeID' has a wrong offset!");
static_assert(offsetof(FBtlEventCustomEquipment, UseWeapon) == 0x000008, "Member 'FBtlEventCustomEquipment::UseWeapon' has a wrong offset!");

// ScriptStruct xrd777.FldNpcCompTableRow
// 0x0118 (0x0120 - 0x0008)
struct FFldNpcCompTableRow final : public FTableRowBase
{
public:
	int32                                         ModelType;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ModelTableID;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         CharaBagON;                                        // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         CharShoesID;                                       // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         HairTexID;                                         // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         CosTexID;                                          // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         SkinColorID;                                       // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeightScale;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitMotionID;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpeakMotionID;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         BreathSetting;                                     // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PersonalMotionID;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToPersonalMotionTime;                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FromPersonalMotionTime;                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID_00;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GoodsAttachName_00;                                // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsAttachedMotion_00;                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsWaitMotionID_00;                              // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsSpeakMotionID_00;                             // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID_01;                                        // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GoodsAttachName_01;                                // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsAttachedMotion_01;                            // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsWaitMotionID_01;                              // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsSpeakMotionID_01;                             // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID_Onmt_00;                                   // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnFlag_Onmt_00;                                    // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AttachName_Onmt_00;                                // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitMotionID_Onmt_00;                              // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpeakMotionID_Onmt_00;                             // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID_Onmt_01;                                   // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnFlag_Onmt_01;                                    // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachName_Onmt_01;                                // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitMotionID_Onmt_01;                              // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpeakMotionID_Onmt_01;                             // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID_Onmt_02;                                   // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnFlag_Onmt_02;                                    // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachName_Onmt_02;                                // 0x00C8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitMotionID_Onmt_02;                              // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpeakMotionID_Onmt_02;                             // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID_Onmt_03;                                   // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnFlag_Onmt_03;                                    // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachName_Onmt_03;                                // 0x00E8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitMotionID_Onmt_03;                              // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpeakMotionID_Onmt_03;                             // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GoodsID_Onmt_04;                                   // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnFlag_Onmt_04;                                    // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttachName_Onmt_04;                                // 0x0108(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitMotionID_Onmt_04;                              // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpeakMotionID_Onmt_04;                             // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldNpcCompTableRow) == 0x000008, "Wrong alignment on FFldNpcCompTableRow");
static_assert(sizeof(FFldNpcCompTableRow) == 0x000120, "Wrong size on FFldNpcCompTableRow");
static_assert(offsetof(FFldNpcCompTableRow, ModelType) == 0x000008, "Member 'FFldNpcCompTableRow::ModelType' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, ModelTableID) == 0x00000C, "Member 'FFldNpcCompTableRow::ModelTableID' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, CharaBagON) == 0x000010, "Member 'FFldNpcCompTableRow::CharaBagON' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, CharShoesID) == 0x000012, "Member 'FFldNpcCompTableRow::CharShoesID' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, HairTexID) == 0x000014, "Member 'FFldNpcCompTableRow::HairTexID' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, CosTexID) == 0x000016, "Member 'FFldNpcCompTableRow::CosTexID' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, SkinColorID) == 0x000018, "Member 'FFldNpcCompTableRow::SkinColorID' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, HeightScale) == 0x00001C, "Member 'FFldNpcCompTableRow::HeightScale' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, WaitMotionID) == 0x000020, "Member 'FFldNpcCompTableRow::WaitMotionID' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, SpeakMotionID) == 0x000024, "Member 'FFldNpcCompTableRow::SpeakMotionID' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, BreathSetting) == 0x000028, "Member 'FFldNpcCompTableRow::BreathSetting' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, PersonalMotionID) == 0x00002C, "Member 'FFldNpcCompTableRow::PersonalMotionID' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, ToPersonalMotionTime) == 0x000030, "Member 'FFldNpcCompTableRow::ToPersonalMotionTime' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, FromPersonalMotionTime) == 0x000034, "Member 'FFldNpcCompTableRow::FromPersonalMotionTime' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsID_00) == 0x000038, "Member 'FFldNpcCompTableRow::GoodsID_00' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsAttachName_00) == 0x000040, "Member 'FFldNpcCompTableRow::GoodsAttachName_00' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsAttachedMotion_00) == 0x000050, "Member 'FFldNpcCompTableRow::GoodsAttachedMotion_00' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsWaitMotionID_00) == 0x000054, "Member 'FFldNpcCompTableRow::GoodsWaitMotionID_00' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsSpeakMotionID_00) == 0x000058, "Member 'FFldNpcCompTableRow::GoodsSpeakMotionID_00' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsID_01) == 0x00005C, "Member 'FFldNpcCompTableRow::GoodsID_01' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsAttachName_01) == 0x000060, "Member 'FFldNpcCompTableRow::GoodsAttachName_01' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsAttachedMotion_01) == 0x000070, "Member 'FFldNpcCompTableRow::GoodsAttachedMotion_01' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsWaitMotionID_01) == 0x000074, "Member 'FFldNpcCompTableRow::GoodsWaitMotionID_01' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsSpeakMotionID_01) == 0x000078, "Member 'FFldNpcCompTableRow::GoodsSpeakMotionID_01' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsID_Onmt_00) == 0x00007C, "Member 'FFldNpcCompTableRow::GoodsID_Onmt_00' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, OnFlag_Onmt_00) == 0x000080, "Member 'FFldNpcCompTableRow::OnFlag_Onmt_00' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, AttachName_Onmt_00) == 0x000088, "Member 'FFldNpcCompTableRow::AttachName_Onmt_00' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, WaitMotionID_Onmt_00) == 0x000098, "Member 'FFldNpcCompTableRow::WaitMotionID_Onmt_00' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, SpeakMotionID_Onmt_00) == 0x00009C, "Member 'FFldNpcCompTableRow::SpeakMotionID_Onmt_00' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsID_Onmt_01) == 0x0000A0, "Member 'FFldNpcCompTableRow::GoodsID_Onmt_01' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, OnFlag_Onmt_01) == 0x0000A4, "Member 'FFldNpcCompTableRow::OnFlag_Onmt_01' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, AttachName_Onmt_01) == 0x0000A8, "Member 'FFldNpcCompTableRow::AttachName_Onmt_01' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, WaitMotionID_Onmt_01) == 0x0000B8, "Member 'FFldNpcCompTableRow::WaitMotionID_Onmt_01' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, SpeakMotionID_Onmt_01) == 0x0000BC, "Member 'FFldNpcCompTableRow::SpeakMotionID_Onmt_01' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsID_Onmt_02) == 0x0000C0, "Member 'FFldNpcCompTableRow::GoodsID_Onmt_02' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, OnFlag_Onmt_02) == 0x0000C4, "Member 'FFldNpcCompTableRow::OnFlag_Onmt_02' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, AttachName_Onmt_02) == 0x0000C8, "Member 'FFldNpcCompTableRow::AttachName_Onmt_02' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, WaitMotionID_Onmt_02) == 0x0000D8, "Member 'FFldNpcCompTableRow::WaitMotionID_Onmt_02' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, SpeakMotionID_Onmt_02) == 0x0000DC, "Member 'FFldNpcCompTableRow::SpeakMotionID_Onmt_02' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsID_Onmt_03) == 0x0000E0, "Member 'FFldNpcCompTableRow::GoodsID_Onmt_03' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, OnFlag_Onmt_03) == 0x0000E4, "Member 'FFldNpcCompTableRow::OnFlag_Onmt_03' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, AttachName_Onmt_03) == 0x0000E8, "Member 'FFldNpcCompTableRow::AttachName_Onmt_03' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, WaitMotionID_Onmt_03) == 0x0000F8, "Member 'FFldNpcCompTableRow::WaitMotionID_Onmt_03' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, SpeakMotionID_Onmt_03) == 0x0000FC, "Member 'FFldNpcCompTableRow::SpeakMotionID_Onmt_03' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, GoodsID_Onmt_04) == 0x000100, "Member 'FFldNpcCompTableRow::GoodsID_Onmt_04' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, OnFlag_Onmt_04) == 0x000104, "Member 'FFldNpcCompTableRow::OnFlag_Onmt_04' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, AttachName_Onmt_04) == 0x000108, "Member 'FFldNpcCompTableRow::AttachName_Onmt_04' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, WaitMotionID_Onmt_04) == 0x000118, "Member 'FFldNpcCompTableRow::WaitMotionID_Onmt_04' has a wrong offset!");
static_assert(offsetof(FFldNpcCompTableRow, SpeakMotionID_Onmt_04) == 0x00011C, "Member 'FFldNpcCompTableRow::SpeakMotionID_Onmt_04' has a wrong offset!");

// ScriptStruct xrd777.BtlBossAnimRequestParam
// 0x000C (0x000C - 0x0000)
struct FBtlBossAnimRequestParam final
{
public:
	EBtlAnimationType                             Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCustomFade;                                     // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomFadeIn;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomFadeOut;                                     // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlBossAnimRequestParam) == 0x000004, "Wrong alignment on FBtlBossAnimRequestParam");
static_assert(sizeof(FBtlBossAnimRequestParam) == 0x00000C, "Wrong size on FBtlBossAnimRequestParam");
static_assert(offsetof(FBtlBossAnimRequestParam, Type) == 0x000000, "Member 'FBtlBossAnimRequestParam::Type' has a wrong offset!");
static_assert(offsetof(FBtlBossAnimRequestParam, UseCustomFade) == 0x000001, "Member 'FBtlBossAnimRequestParam::UseCustomFade' has a wrong offset!");
static_assert(offsetof(FBtlBossAnimRequestParam, CustomFadeIn) == 0x000004, "Member 'FBtlBossAnimRequestParam::CustomFadeIn' has a wrong offset!");
static_assert(offsetof(FBtlBossAnimRequestParam, CustomFadeOut) == 0x000008, "Member 'FBtlBossAnimRequestParam::CustomFadeOut' has a wrong offset!");

// ScriptStruct xrd777.FldPoolPackTableRow
// 0x0010 (0x0018 - 0x0008)
struct FFldPoolPackTableRow final : public FTableRowBase
{
public:
	TArray<struct FFldPoolParts>                  PartsList;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPoolPackTableRow) == 0x000008, "Wrong alignment on FFldPoolPackTableRow");
static_assert(sizeof(FFldPoolPackTableRow) == 0x000018, "Wrong size on FFldPoolPackTableRow");
static_assert(offsetof(FFldPoolPackTableRow, PartsList) == 0x000008, "Member 'FFldPoolPackTableRow::PartsList' has a wrong offset!");

// ScriptStruct xrd777.BtlEffectItem
// 0x0020 (0x0020 - 0x0000)
struct FBtlEffectItem final
{
public:
	class AActor*                                 ParentEmpActor;                                    // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      ObjectReference;                                   // 0x0008(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0010(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlBadStatusIcon                             Type;                                              // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BadStatus;                                         // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlEffectItem) == 0x000008, "Wrong alignment on FBtlEffectItem");
static_assert(sizeof(FBtlEffectItem) == 0x000020, "Wrong size on FBtlEffectItem");
static_assert(offsetof(FBtlEffectItem, ParentEmpActor) == 0x000000, "Member 'FBtlEffectItem::ParentEmpActor' has a wrong offset!");
static_assert(offsetof(FBtlEffectItem, ObjectReference) == 0x000008, "Member 'FBtlEffectItem::ObjectReference' has a wrong offset!");
static_assert(offsetof(FBtlEffectItem, Tag) == 0x000010, "Member 'FBtlEffectItem::Tag' has a wrong offset!");
static_assert(offsetof(FBtlEffectItem, Type) == 0x000018, "Member 'FBtlEffectItem::Type' has a wrong offset!");
static_assert(offsetof(FBtlEffectItem, BadStatus) == 0x000019, "Member 'FBtlEffectItem::BadStatus' has a wrong offset!");

// ScriptStruct xrd777.BtlDamageParam
// 0x0004 (0x0004 - 0x0000)
struct FBtlDamageParam final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlDamageParam) == 0x000004, "Wrong alignment on FBtlDamageParam");
static_assert(sizeof(FBtlDamageParam) == 0x000004, "Wrong size on FBtlDamageParam");
static_assert(offsetof(FBtlDamageParam, Damage) == 0x000000, "Member 'FBtlDamageParam::Damage' has a wrong offset!");

// ScriptStruct xrd777.BtlCalcCameraPosParam
// 0x0080 (0x0080 - 0x0000)
struct FBtlCalcCameraPosParam final
{
public:
	EBtlCalcCameraCylinderType                    CylinderType;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DirectToOrigin;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DirectAlongLookedAtCharacter;                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotateDegree;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusRatio;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusAdd;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusAddHeightRatio;                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightRatio;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightAddRadiusRatio;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlCalcCameraLookAtType                      LookAtTarget;                                      // 0x001C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookAtCylinderHightRatio;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtBlendToCenter;                               // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAtLineRatio;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRoll;                                           // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Roll;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightBlend;                                       // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightDefault;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pan;                                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PanV;                                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideCamX;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCommonCylinder;                                 // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ExceptPersonaCylinder;                             // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldTransform;                                    // 0x0050(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlCalcCameraPosParam) == 0x000010, "Wrong alignment on FBtlCalcCameraPosParam");
static_assert(sizeof(FBtlCalcCameraPosParam) == 0x000080, "Wrong size on FBtlCalcCameraPosParam");
static_assert(offsetof(FBtlCalcCameraPosParam, CylinderType) == 0x000000, "Member 'FBtlCalcCameraPosParam::CylinderType' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, DirectToOrigin) == 0x000001, "Member 'FBtlCalcCameraPosParam::DirectToOrigin' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, DirectAlongLookedAtCharacter) == 0x000002, "Member 'FBtlCalcCameraPosParam::DirectAlongLookedAtCharacter' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, RotateDegree) == 0x000004, "Member 'FBtlCalcCameraPosParam::RotateDegree' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, RadiusRatio) == 0x000008, "Member 'FBtlCalcCameraPosParam::RadiusRatio' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, RadiusAdd) == 0x00000C, "Member 'FBtlCalcCameraPosParam::RadiusAdd' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, RadiusAddHeightRatio) == 0x000010, "Member 'FBtlCalcCameraPosParam::RadiusAddHeightRatio' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, HeightRatio) == 0x000014, "Member 'FBtlCalcCameraPosParam::HeightRatio' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, HeightAddRadiusRatio) == 0x000018, "Member 'FBtlCalcCameraPosParam::HeightAddRadiusRatio' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, LookAtTarget) == 0x00001C, "Member 'FBtlCalcCameraPosParam::LookAtTarget' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, LookAtCylinderHightRatio) == 0x000020, "Member 'FBtlCalcCameraPosParam::LookAtCylinderHightRatio' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, LookAtBlendToCenter) == 0x000024, "Member 'FBtlCalcCameraPosParam::LookAtBlendToCenter' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, LookAtLineRatio) == 0x000028, "Member 'FBtlCalcCameraPosParam::LookAtLineRatio' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, UseRoll) == 0x00002C, "Member 'FBtlCalcCameraPosParam::UseRoll' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, Roll) == 0x000030, "Member 'FBtlCalcCameraPosParam::Roll' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, HeightBlend) == 0x000034, "Member 'FBtlCalcCameraPosParam::HeightBlend' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, HeightDefault) == 0x000038, "Member 'FBtlCalcCameraPosParam::HeightDefault' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, Pan) == 0x00003C, "Member 'FBtlCalcCameraPosParam::Pan' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, PanV) == 0x000040, "Member 'FBtlCalcCameraPosParam::PanV' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, SlideCamX) == 0x000044, "Member 'FBtlCalcCameraPosParam::SlideCamX' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, UseCommonCylinder) == 0x000048, "Member 'FBtlCalcCameraPosParam::UseCommonCylinder' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, ExceptPersonaCylinder) == 0x000049, "Member 'FBtlCalcCameraPosParam::ExceptPersonaCylinder' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraPosParam, WorldTransform) == 0x000050, "Member 'FBtlCalcCameraPosParam::WorldTransform' has a wrong offset!");

// ScriptStruct xrd777.BtlCalcCameraData
// 0x0118 (0x0120 - 0x0008)
struct FBtlCalcCameraData final : public FTableRowBase
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlCalcCameraPosParam                 Start;                                             // 0x0010(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FBtlCalcCameraPosParam                 Goal;                                              // 0x0090(0x0080)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         AnimTime;                                          // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RefleshEachFrame;                                  // 0x0114(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlCalcCameraData) == 0x000010, "Wrong alignment on FBtlCalcCameraData");
static_assert(sizeof(FBtlCalcCameraData) == 0x000120, "Wrong size on FBtlCalcCameraData");
static_assert(offsetof(FBtlCalcCameraData, Start) == 0x000010, "Member 'FBtlCalcCameraData::Start' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraData, Goal) == 0x000090, "Member 'FBtlCalcCameraData::Goal' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraData, AnimTime) == 0x000110, "Member 'FBtlCalcCameraData::AnimTime' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraData, RefleshEachFrame) == 0x000114, "Member 'FBtlCalcCameraData::RefleshEachFrame' has a wrong offset!");
static_assert(offsetof(FBtlCalcCameraData, Curve) == 0x000118, "Member 'FBtlCalcCameraData::Curve' has a wrong offset!");

// ScriptStruct xrd777.FldNpcNameTableRow
// 0x0030 (0x0038 - 0x0008)
struct FFldNpcNameTableRow final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Flag;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name2;                                             // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldNpcNameTableRow) == 0x000008, "Wrong alignment on FFldNpcNameTableRow");
static_assert(sizeof(FFldNpcNameTableRow) == 0x000038, "Wrong size on FFldNpcNameTableRow");
static_assert(offsetof(FFldNpcNameTableRow, Name) == 0x000008, "Member 'FFldNpcNameTableRow::Name' has a wrong offset!");
static_assert(offsetof(FFldNpcNameTableRow, Flag) == 0x000018, "Member 'FFldNpcNameTableRow::Flag' has a wrong offset!");
static_assert(offsetof(FFldNpcNameTableRow, Name2) == 0x000028, "Member 'FFldNpcNameTableRow::Name2' has a wrong offset!");

// ScriptStruct xrd777.FldHitCitTimeParam
// 0x0008 (0x0008 - 0x0000)
struct FFldHitCitTimeParam
{
public:
	float                                         MMinTime;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MMaxTime;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldHitCitTimeParam) == 0x000004, "Wrong alignment on FFldHitCitTimeParam");
static_assert(sizeof(FFldHitCitTimeParam) == 0x000008, "Wrong size on FFldHitCitTimeParam");
static_assert(offsetof(FFldHitCitTimeParam, MMinTime) == 0x000000, "Member 'FFldHitCitTimeParam::MMinTime' has a wrong offset!");
static_assert(offsetof(FFldHitCitTimeParam, MMaxTime) == 0x000004, "Member 'FFldHitCitTimeParam::MMaxTime' has a wrong offset!");

// ScriptStruct xrd777.BtlCameraParam
// 0x0008 (0x0010 - 0x0008)
struct FBtlCameraParam final : public FTableRowBase
{
public:
	float                                         HideOtherProcCylinderRatio;                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlCameraParam) == 0x000008, "Wrong alignment on FBtlCameraParam");
static_assert(sizeof(FBtlCameraParam) == 0x000010, "Wrong size on FBtlCameraParam");
static_assert(offsetof(FBtlCameraParam, HideOtherProcCylinderRatio) == 0x000008, "Member 'FBtlCameraParam::HideOtherProcCylinderRatio' has a wrong offset!");

// ScriptStruct xrd777.BtlEncountParam
// 0x0024 (0x0024 - 0x0000)
struct FBtlEncountParam final
{
public:
	int32                                         EncountID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlEncountPreemptive                         Preemptive;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlEncountPreemptive                         PreemptiveOriginal;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0xE];                                        // 0x0006(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StageMajor;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StageMinor;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnemyBadStatus;                                    // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalledFromScript;                                  // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEventResult;                                     // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlEncountParam) == 0x000004, "Wrong alignment on FBtlEncountParam");
static_assert(sizeof(FBtlEncountParam) == 0x000024, "Wrong size on FBtlEncountParam");
static_assert(offsetof(FBtlEncountParam, EncountID) == 0x000000, "Member 'FBtlEncountParam::EncountID' has a wrong offset!");
static_assert(offsetof(FBtlEncountParam, Preemptive) == 0x000004, "Member 'FBtlEncountParam::Preemptive' has a wrong offset!");
static_assert(offsetof(FBtlEncountParam, PreemptiveOriginal) == 0x000005, "Member 'FBtlEncountParam::PreemptiveOriginal' has a wrong offset!");
static_assert(offsetof(FBtlEncountParam, StageMajor) == 0x000014, "Member 'FBtlEncountParam::StageMajor' has a wrong offset!");
static_assert(offsetof(FBtlEncountParam, StageMinor) == 0x000018, "Member 'FBtlEncountParam::StageMinor' has a wrong offset!");
static_assert(offsetof(FBtlEncountParam, EnemyBadStatus) == 0x00001C, "Member 'FBtlEncountParam::EnemyBadStatus' has a wrong offset!");
static_assert(offsetof(FBtlEncountParam, CalledFromScript) == 0x000020, "Member 'FBtlEncountParam::CalledFromScript' has a wrong offset!");
static_assert(offsetof(FBtlEncountParam, IsEventResult) == 0x000021, "Member 'FBtlEncountParam::IsEventResult' has a wrong offset!");

// ScriptStruct xrd777.BtlItemData
// 0x0020 (0x0020 - 0x0000)
struct FBtlItemData final
{
public:
	int32                                         IconSpr;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryID;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlItemData) == 0x000008, "Wrong alignment on FBtlItemData");
static_assert(sizeof(FBtlItemData) == 0x000020, "Wrong size on FBtlItemData");
static_assert(offsetof(FBtlItemData, IconSpr) == 0x000000, "Member 'FBtlItemData::IconSpr' has a wrong offset!");
static_assert(offsetof(FBtlItemData, ID) == 0x000004, "Member 'FBtlItemData::ID' has a wrong offset!");
static_assert(offsetof(FBtlItemData, CategoryID) == 0x000008, "Member 'FBtlItemData::CategoryID' has a wrong offset!");
static_assert(offsetof(FBtlItemData, Num) == 0x00000C, "Member 'FBtlItemData::Num' has a wrong offset!");
static_assert(offsetof(FBtlItemData, Name) == 0x000010, "Member 'FBtlItemData::Name' has a wrong offset!");

// ScriptStruct xrd777.FldPlaceNameNameTableRowBase
// 0x0018 (0x0020 - 0x0008)
struct FFldPlaceNameNameTableRowBase final : public FTableRowBase
{
public:
	int32                                         Index;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPlaceNameNameTableRowBase) == 0x000008, "Wrong alignment on FFldPlaceNameNameTableRowBase");
static_assert(sizeof(FFldPlaceNameNameTableRowBase) == 0x000020, "Wrong size on FFldPlaceNameNameTableRowBase");
static_assert(offsetof(FFldPlaceNameNameTableRowBase, Index) == 0x000008, "Member 'FFldPlaceNameNameTableRowBase::Index' has a wrong offset!");
static_assert(offsetof(FFldPlaceNameNameTableRowBase, Name) == 0x000010, "Member 'FFldPlaceNameNameTableRowBase::Name' has a wrong offset!");

// ScriptStruct xrd777.BtlCutsceneData
// 0x0028 (0x0030 - 0x0008)
struct FBtlCutsceneData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class ULevelSequence>          Cutscene;                                          // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlCutsceneData) == 0x000008, "Wrong alignment on FBtlCutsceneData");
static_assert(sizeof(FBtlCutsceneData) == 0x000030, "Wrong size on FBtlCutsceneData");
static_assert(offsetof(FBtlCutsceneData, Cutscene) == 0x000008, "Member 'FBtlCutsceneData::Cutscene' has a wrong offset!");

// ScriptStruct xrd777.BtlCutsceneHandleData
// 0x0030 (0x0030 - 0x0000)
struct FBtlCutsceneHandleData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         Scene;                                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAssetLoader*                           Loader;                                            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RowName;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlCutsceneHandleData) == 0x000008, "Wrong alignment on FBtlCutsceneHandleData");
static_assert(sizeof(FBtlCutsceneHandleData) == 0x000030, "Wrong size on FBtlCutsceneHandleData");
static_assert(offsetof(FBtlCutsceneHandleData, Scene) == 0x000008, "Member 'FBtlCutsceneHandleData::Scene' has a wrong offset!");
static_assert(offsetof(FBtlCutsceneHandleData, Loader) == 0x000010, "Member 'FBtlCutsceneHandleData::Loader' has a wrong offset!");
static_assert(offsetof(FBtlCutsceneHandleData, RowName) == 0x000018, "Member 'FBtlCutsceneHandleData::RowName' has a wrong offset!");

// ScriptStruct xrd777.RankUpEventRow
// 0x0038 (0x0040 - 0x0008)
struct FRankUpEventRow final : public FTableRowBase
{
public:
	int16                                         Rank;                                              // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Point;                                             // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Major;                                             // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Minor;                                             // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Brain;                                             // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Charm;                                             // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Courage;                                           // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Flag0;                                             // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Flag1;                                             // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Flag2;                                             // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Flag3;                                             // 0x002C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankUpEventRow) == 0x000008, "Wrong alignment on FRankUpEventRow");
static_assert(sizeof(FRankUpEventRow) == 0x000040, "Wrong size on FRankUpEventRow");
static_assert(offsetof(FRankUpEventRow, Rank) == 0x000008, "Member 'FRankUpEventRow::Rank' has a wrong offset!");
static_assert(offsetof(FRankUpEventRow, Point) == 0x00000A, "Member 'FRankUpEventRow::Point' has a wrong offset!");
static_assert(offsetof(FRankUpEventRow, Major) == 0x00000C, "Member 'FRankUpEventRow::Major' has a wrong offset!");
static_assert(offsetof(FRankUpEventRow, Minor) == 0x00000E, "Member 'FRankUpEventRow::Minor' has a wrong offset!");
static_assert(offsetof(FRankUpEventRow, Brain) == 0x000010, "Member 'FRankUpEventRow::Brain' has a wrong offset!");
static_assert(offsetof(FRankUpEventRow, Charm) == 0x000011, "Member 'FRankUpEventRow::Charm' has a wrong offset!");
static_assert(offsetof(FRankUpEventRow, Courage) == 0x000012, "Member 'FRankUpEventRow::Courage' has a wrong offset!");
static_assert(offsetof(FRankUpEventRow, Flag0) == 0x000014, "Member 'FRankUpEventRow::Flag0' has a wrong offset!");
static_assert(offsetof(FRankUpEventRow, Flag1) == 0x00001C, "Member 'FRankUpEventRow::Flag1' has a wrong offset!");
static_assert(offsetof(FRankUpEventRow, Flag2) == 0x000024, "Member 'FRankUpEventRow::Flag2' has a wrong offset!");
static_assert(offsetof(FRankUpEventRow, Flag3) == 0x00002C, "Member 'FRankUpEventRow::Flag3' has a wrong offset!");
static_assert(offsetof(FRankUpEventRow, Comment) == 0x000034, "Member 'FRankUpEventRow::Comment' has a wrong offset!");

// ScriptStruct xrd777.BtlFadeParam
// 0x0010 (0x0010 - 0x0000)
struct FBtlFadeParam final
{
public:
	bool                                          IsFadeOut;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NowTime;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Param;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlFadeParam) == 0x000004, "Wrong alignment on FBtlFadeParam");
static_assert(sizeof(FBtlFadeParam) == 0x000010, "Wrong size on FBtlFadeParam");
static_assert(offsetof(FBtlFadeParam, IsFadeOut) == 0x000000, "Member 'FBtlFadeParam::IsFadeOut' has a wrong offset!");
static_assert(offsetof(FBtlFadeParam, NowTime) == 0x000004, "Member 'FBtlFadeParam::NowTime' has a wrong offset!");
static_assert(offsetof(FBtlFadeParam, MaxTime) == 0x000008, "Member 'FBtlFadeParam::MaxTime' has a wrong offset!");
static_assert(offsetof(FBtlFadeParam, Param) == 0x00000C, "Member 'FBtlFadeParam::Param' has a wrong offset!");

// ScriptStruct xrd777.ChristmasEventMailRow
// 0x0010 (0x0018 - 0x0008)
struct FChristmasEventMailRow final : public FTableRowBase
{
public:
	int16                                         MailID;                                            // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Rank;                                              // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Flag;                                              // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChristmasEventMailRow) == 0x000008, "Wrong alignment on FChristmasEventMailRow");
static_assert(sizeof(FChristmasEventMailRow) == 0x000018, "Wrong size on FChristmasEventMailRow");
static_assert(offsetof(FChristmasEventMailRow, MailID) == 0x000008, "Member 'FChristmasEventMailRow::MailID' has a wrong offset!");
static_assert(offsetof(FChristmasEventMailRow, Rank) == 0x00000A, "Member 'FChristmasEventMailRow::Rank' has a wrong offset!");
static_assert(offsetof(FChristmasEventMailRow, Flag) == 0x00000C, "Member 'FChristmasEventMailRow::Flag' has a wrong offset!");

// ScriptStruct xrd777.BtlFormationUnit
// 0x0020 (0x0028 - 0x0008)
struct FBtlFormationUnit final : public FTableRowBase
{
public:
	struct FVector                                Translation;                                       // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlSizeCategoryType                          SizeCategory;                                      // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlFormationUnit) == 0x000008, "Wrong alignment on FBtlFormationUnit");
static_assert(sizeof(FBtlFormationUnit) == 0x000028, "Wrong size on FBtlFormationUnit");
static_assert(offsetof(FBtlFormationUnit, Translation) == 0x000008, "Member 'FBtlFormationUnit::Translation' has a wrong offset!");
static_assert(offsetof(FBtlFormationUnit, Rotation) == 0x000014, "Member 'FBtlFormationUnit::Rotation' has a wrong offset!");
static_assert(offsetof(FBtlFormationUnit, ID) == 0x000020, "Member 'FBtlFormationUnit::ID' has a wrong offset!");
static_assert(offsetof(FBtlFormationUnit, SizeCategory) == 0x000024, "Member 'FBtlFormationUnit::SizeCategory' has a wrong offset!");

// ScriptStruct xrd777.BtlFormationData
// 0x0020 (0x0028 - 0x0008)
struct FBtlFormationData final : public FTableRowBase
{
public:
	TArray<struct FBtlFormationUnit>              PlayerPositions;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBtlFormationUnit>              EnemyPositions;                                    // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlFormationData) == 0x000008, "Wrong alignment on FBtlFormationData");
static_assert(sizeof(FBtlFormationData) == 0x000028, "Wrong size on FBtlFormationData");
static_assert(offsetof(FBtlFormationData, PlayerPositions) == 0x000008, "Member 'FBtlFormationData::PlayerPositions' has a wrong offset!");
static_assert(offsetof(FBtlFormationData, EnemyPositions) == 0x000018, "Member 'FBtlFormationData::EnemyPositions' has a wrong offset!");

// ScriptStruct xrd777.BtlAnalyzeHighAnalyzePrimitive
// 0x0018 (0x0018 - 0x0000)
struct FBtlAnalyzeHighAnalyzePrimitive final
{
public:
	class UBtlGuiDrawObjectPrimitive*             Object;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReflectX;                                        // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlAnalyzeHighAnalyzePrimitive) == 0x000008, "Wrong alignment on FBtlAnalyzeHighAnalyzePrimitive");
static_assert(sizeof(FBtlAnalyzeHighAnalyzePrimitive) == 0x000018, "Wrong size on FBtlAnalyzeHighAnalyzePrimitive");
static_assert(offsetof(FBtlAnalyzeHighAnalyzePrimitive, Object) == 0x000000, "Member 'FBtlAnalyzeHighAnalyzePrimitive::Object' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeHighAnalyzePrimitive, PosX) == 0x000008, "Member 'FBtlAnalyzeHighAnalyzePrimitive::PosX' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeHighAnalyzePrimitive, PosY) == 0x00000C, "Member 'FBtlAnalyzeHighAnalyzePrimitive::PosY' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeHighAnalyzePrimitive, Width) == 0x000010, "Member 'FBtlAnalyzeHighAnalyzePrimitive::Width' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeHighAnalyzePrimitive, IsReflectX) == 0x000014, "Member 'FBtlAnalyzeHighAnalyzePrimitive::IsReflectX' has a wrong offset!");

// ScriptStruct xrd777.ChristmasEventMailData
// 0x0008 (0x0008 - 0x0000)
struct FChristmasEventMailData final
{
public:
	int16                                         ID;                                                // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Rank;                                              // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChristmasEventMailData) == 0x000004, "Wrong alignment on FChristmasEventMailData");
static_assert(sizeof(FChristmasEventMailData) == 0x000008, "Wrong size on FChristmasEventMailData");
static_assert(offsetof(FChristmasEventMailData, ID) == 0x000000, "Member 'FChristmasEventMailData::ID' has a wrong offset!");
static_assert(offsetof(FChristmasEventMailData, Rank) == 0x000002, "Member 'FChristmasEventMailData::Rank' has a wrong offset!");
static_assert(offsetof(FChristmasEventMailData, Flag) == 0x000004, "Member 'FChristmasEventMailData::Flag' has a wrong offset!");

// ScriptStruct xrd777.BtlAnalyzeItemSpace
// 0x0028 (0x0028 - 0x0000)
struct FBtlAnalyzeItemSpace final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectText*                  Text;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                Icon;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                NoneIcon;                                          // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlAnalyzeItemSpace) == 0x000008, "Wrong alignment on FBtlAnalyzeItemSpace");
static_assert(sizeof(FBtlAnalyzeItemSpace) == 0x000028, "Wrong size on FBtlAnalyzeItemSpace");
static_assert(offsetof(FBtlAnalyzeItemSpace, Pos) == 0x000000, "Member 'FBtlAnalyzeItemSpace::Pos' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeItemSpace, Text) == 0x000010, "Member 'FBtlAnalyzeItemSpace::Text' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeItemSpace, Icon) == 0x000018, "Member 'FBtlAnalyzeItemSpace::Icon' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeItemSpace, NoneIcon) == 0x000020, "Member 'FBtlAnalyzeItemSpace::NoneIcon' has a wrong offset!");

// ScriptStruct xrd777.BtlAnalyzeSkillSpace
// 0x0030 (0x0030 - 0x0000)
struct FBtlAnalyzeSkillSpace final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectText*                  Text;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                Icon;                                              // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectRoundRect*             BGRect;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                NoneIcon;                                          // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlAnalyzeSkillSpace) == 0x000008, "Wrong alignment on FBtlAnalyzeSkillSpace");
static_assert(sizeof(FBtlAnalyzeSkillSpace) == 0x000030, "Wrong size on FBtlAnalyzeSkillSpace");
static_assert(offsetof(FBtlAnalyzeSkillSpace, Pos) == 0x000000, "Member 'FBtlAnalyzeSkillSpace::Pos' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeSkillSpace, Text) == 0x000010, "Member 'FBtlAnalyzeSkillSpace::Text' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeSkillSpace, Icon) == 0x000018, "Member 'FBtlAnalyzeSkillSpace::Icon' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeSkillSpace, BGRect) == 0x000020, "Member 'FBtlAnalyzeSkillSpace::BGRect' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeSkillSpace, NoneIcon) == 0x000028, "Member 'FBtlAnalyzeSkillSpace::NoneIcon' has a wrong offset!");

// ScriptStruct xrd777.BtlAnalyzeScanPrimitive
// 0x0040 (0x0040 - 0x0000)
struct FBtlAnalyzeScanPrimitive final
{
public:
	TArray<class UBtlGuiDrawObjectPrimitive*>     Objects;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Size;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 MoveX;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 MoveY;                                             // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MoveToX;                                           // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveToY;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlAnalyzeScanPrimitive) == 0x000008, "Wrong alignment on FBtlAnalyzeScanPrimitive");
static_assert(sizeof(FBtlAnalyzeScanPrimitive) == 0x000040, "Wrong size on FBtlAnalyzeScanPrimitive");
static_assert(offsetof(FBtlAnalyzeScanPrimitive, Objects) == 0x000000, "Member 'FBtlAnalyzeScanPrimitive::Objects' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeScanPrimitive, Size) == 0x000010, "Member 'FBtlAnalyzeScanPrimitive::Size' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeScanPrimitive, Alpha) == 0x000014, "Member 'FBtlAnalyzeScanPrimitive::Alpha' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeScanPrimitive, MoveX) == 0x000018, "Member 'FBtlAnalyzeScanPrimitive::MoveX' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeScanPrimitive, MoveY) == 0x000028, "Member 'FBtlAnalyzeScanPrimitive::MoveY' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeScanPrimitive, MoveToX) == 0x000038, "Member 'FBtlAnalyzeScanPrimitive::MoveToX' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeScanPrimitive, MoveToY) == 0x00003C, "Member 'FBtlAnalyzeScanPrimitive::MoveToY' has a wrong offset!");

// ScriptStruct xrd777.BtlAnalyzeAffinityIcon
// 0x0120 (0x0120 - 0x0000)
struct FBtlAnalyzeAffinityIcon final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectSprite*                Icon;                                              // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                BGRect;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                WeakIn;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                WeakOut;                                           // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                WeakInDupli;                                       // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                WeakOutDupli;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaWeakDupli;                                    // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleWeakDupli;                                    // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeWeakDupli;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayingInAnime;                                  // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectSprite*                ResistIcon;                                        // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                ResistText;                                        // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                ResistTextBlur;                                    // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectPlg*                   ScanUnknownIcon;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                ScanUnknownIconBlur;                               // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectPlg*                   ScanResistIcon;                                    // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                ScanResistIconBlur;                                // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                RippleEffectLarge;                                 // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                RippleEffectSmall;                                 // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                KnownEffect;                                       // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                SmallScanUnknownIconBlur;                          // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBtlAnalyzeScanPrimitive               ScanPrimitive;                                     // 0x00A8(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         TimeScan1;                                         // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaUnknownIcon;                                  // 0x00EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeScan2;                                         // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaResistIcon;                                   // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaRippleEffec;                                  // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeRippleEffect;                                  // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AlphaKnownEffect;                                  // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHighAnalyzeAnime;                                // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsShowNewAttr;                                     // 0x0105(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              KnownIconPosDif;                                   // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RationDetailMove;                                  // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorIcon;                                         // 0x0114(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWeakKnownIcon;                                   // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlAnalyzeAffinityIcon) == 0x000008, "Wrong alignment on FBtlAnalyzeAffinityIcon");
static_assert(sizeof(FBtlAnalyzeAffinityIcon) == 0x000120, "Wrong size on FBtlAnalyzeAffinityIcon");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, Pos) == 0x000000, "Member 'FBtlAnalyzeAffinityIcon::Pos' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, Icon) == 0x000010, "Member 'FBtlAnalyzeAffinityIcon::Icon' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, BGRect) == 0x000018, "Member 'FBtlAnalyzeAffinityIcon::BGRect' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, WeakIn) == 0x000020, "Member 'FBtlAnalyzeAffinityIcon::WeakIn' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, WeakOut) == 0x000028, "Member 'FBtlAnalyzeAffinityIcon::WeakOut' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, WeakInDupli) == 0x000030, "Member 'FBtlAnalyzeAffinityIcon::WeakInDupli' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, WeakOutDupli) == 0x000038, "Member 'FBtlAnalyzeAffinityIcon::WeakOutDupli' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, AlphaWeakDupli) == 0x000040, "Member 'FBtlAnalyzeAffinityIcon::AlphaWeakDupli' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, ScaleWeakDupli) == 0x000044, "Member 'FBtlAnalyzeAffinityIcon::ScaleWeakDupli' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, TimeWeakDupli) == 0x000048, "Member 'FBtlAnalyzeAffinityIcon::TimeWeakDupli' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, IsPlayingInAnime) == 0x00004C, "Member 'FBtlAnalyzeAffinityIcon::IsPlayingInAnime' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, ResistIcon) == 0x000050, "Member 'FBtlAnalyzeAffinityIcon::ResistIcon' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, ResistText) == 0x000058, "Member 'FBtlAnalyzeAffinityIcon::ResistText' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, ResistTextBlur) == 0x000060, "Member 'FBtlAnalyzeAffinityIcon::ResistTextBlur' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, ScanUnknownIcon) == 0x000068, "Member 'FBtlAnalyzeAffinityIcon::ScanUnknownIcon' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, ScanUnknownIconBlur) == 0x000070, "Member 'FBtlAnalyzeAffinityIcon::ScanUnknownIconBlur' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, ScanResistIcon) == 0x000078, "Member 'FBtlAnalyzeAffinityIcon::ScanResistIcon' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, ScanResistIconBlur) == 0x000080, "Member 'FBtlAnalyzeAffinityIcon::ScanResistIconBlur' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, RippleEffectLarge) == 0x000088, "Member 'FBtlAnalyzeAffinityIcon::RippleEffectLarge' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, RippleEffectSmall) == 0x000090, "Member 'FBtlAnalyzeAffinityIcon::RippleEffectSmall' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, KnownEffect) == 0x000098, "Member 'FBtlAnalyzeAffinityIcon::KnownEffect' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, SmallScanUnknownIconBlur) == 0x0000A0, "Member 'FBtlAnalyzeAffinityIcon::SmallScanUnknownIconBlur' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, ScanPrimitive) == 0x0000A8, "Member 'FBtlAnalyzeAffinityIcon::ScanPrimitive' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, TimeScan1) == 0x0000E8, "Member 'FBtlAnalyzeAffinityIcon::TimeScan1' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, AlphaUnknownIcon) == 0x0000EC, "Member 'FBtlAnalyzeAffinityIcon::AlphaUnknownIcon' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, TimeScan2) == 0x0000F0, "Member 'FBtlAnalyzeAffinityIcon::TimeScan2' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, AlphaResistIcon) == 0x0000F4, "Member 'FBtlAnalyzeAffinityIcon::AlphaResistIcon' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, AlphaRippleEffec) == 0x0000F8, "Member 'FBtlAnalyzeAffinityIcon::AlphaRippleEffec' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, SizeRippleEffect) == 0x0000FC, "Member 'FBtlAnalyzeAffinityIcon::SizeRippleEffect' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, AlphaKnownEffect) == 0x000100, "Member 'FBtlAnalyzeAffinityIcon::AlphaKnownEffect' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, IsHighAnalyzeAnime) == 0x000104, "Member 'FBtlAnalyzeAffinityIcon::IsHighAnalyzeAnime' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, IsShowNewAttr) == 0x000105, "Member 'FBtlAnalyzeAffinityIcon::IsShowNewAttr' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, KnownIconPosDif) == 0x000108, "Member 'FBtlAnalyzeAffinityIcon::KnownIconPosDif' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, RationDetailMove) == 0x000110, "Member 'FBtlAnalyzeAffinityIcon::RationDetailMove' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, ColorIcon) == 0x000114, "Member 'FBtlAnalyzeAffinityIcon::ColorIcon' has a wrong offset!");
static_assert(offsetof(FBtlAnalyzeAffinityIcon, IsWeakKnownIcon) == 0x000118, "Member 'FBtlAnalyzeAffinityIcon::IsWeakKnownIcon' has a wrong offset!");

// ScriptStruct xrd777.CommunityPresentData
// 0x0020 (0x0020 - 0x0000)
struct FCommunityPresentData final
{
public:
	uint32                                        ItemId;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddCommunityPoint;                                 // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReactionMessageLabel;                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeroMessageLabel;                                  // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChristmasReactionMessageLabel;                     // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityPresentData) == 0x000004, "Wrong alignment on FCommunityPresentData");
static_assert(sizeof(FCommunityPresentData) == 0x000020, "Wrong size on FCommunityPresentData");
static_assert(offsetof(FCommunityPresentData, ItemId) == 0x000000, "Member 'FCommunityPresentData::ItemId' has a wrong offset!");
static_assert(offsetof(FCommunityPresentData, AddCommunityPoint) == 0x000004, "Member 'FCommunityPresentData::AddCommunityPoint' has a wrong offset!");
static_assert(offsetof(FCommunityPresentData, ReactionMessageLabel) == 0x000008, "Member 'FCommunityPresentData::ReactionMessageLabel' has a wrong offset!");
static_assert(offsetof(FCommunityPresentData, HeroMessageLabel) == 0x000010, "Member 'FCommunityPresentData::HeroMessageLabel' has a wrong offset!");
static_assert(offsetof(FCommunityPresentData, ChristmasReactionMessageLabel) == 0x000018, "Member 'FCommunityPresentData::ChristmasReactionMessageLabel' has a wrong offset!");

// ScriptStruct xrd777.BtlBlendState
// 0x0008 (0x0008 - 0x0000)
struct FBtlBlendState final
{
public:
	EBtlGuiBlendOp                                OpColor;                                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiBlendFactor                            SrcColor;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiBlendFactor                            DstColor;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiBlendOp                                OpAlpha;                                           // 0x0003(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiBlendFactor                            SrcAlpha;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiBlendFactor                            DstAlpha;                                          // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiColorWhiteMask                         ColorWMask;                                        // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiOT                                     OT;                                                // 0x0007(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlBlendState) == 0x000001, "Wrong alignment on FBtlBlendState");
static_assert(sizeof(FBtlBlendState) == 0x000008, "Wrong size on FBtlBlendState");
static_assert(offsetof(FBtlBlendState, OpColor) == 0x000000, "Member 'FBtlBlendState::OpColor' has a wrong offset!");
static_assert(offsetof(FBtlBlendState, SrcColor) == 0x000001, "Member 'FBtlBlendState::SrcColor' has a wrong offset!");
static_assert(offsetof(FBtlBlendState, DstColor) == 0x000002, "Member 'FBtlBlendState::DstColor' has a wrong offset!");
static_assert(offsetof(FBtlBlendState, OpAlpha) == 0x000003, "Member 'FBtlBlendState::OpAlpha' has a wrong offset!");
static_assert(offsetof(FBtlBlendState, SrcAlpha) == 0x000004, "Member 'FBtlBlendState::SrcAlpha' has a wrong offset!");
static_assert(offsetof(FBtlBlendState, DstAlpha) == 0x000005, "Member 'FBtlBlendState::DstAlpha' has a wrong offset!");
static_assert(offsetof(FBtlBlendState, ColorWMask) == 0x000006, "Member 'FBtlBlendState::ColorWMask' has a wrong offset!");
static_assert(offsetof(FBtlBlendState, OT) == 0x000007, "Member 'FBtlBlendState::OT' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawStructCore
// 0x0034 (0x0034 - 0x0000)
struct FBtlGuiDrawStructCore
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Scale;                                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiAnchorPt                               Anchor;                                            // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ScaleAnchorPos;                                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AngleAnchorPos;                                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBtlBlendState                         blendState;                                        // 0x002C(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlGuiDrawStructCore) == 0x000004, "Wrong alignment on FBtlGuiDrawStructCore");
static_assert(sizeof(FBtlGuiDrawStructCore) == 0x000034, "Wrong size on FBtlGuiDrawStructCore");
static_assert(offsetof(FBtlGuiDrawStructCore, Pos) == 0x000000, "Member 'FBtlGuiDrawStructCore::Pos' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawStructCore, Scale) == 0x000008, "Member 'FBtlGuiDrawStructCore::Scale' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawStructCore, Angle) == 0x000010, "Member 'FBtlGuiDrawStructCore::Angle' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawStructCore, Anchor) == 0x000014, "Member 'FBtlGuiDrawStructCore::Anchor' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawStructCore, ScaleAnchorPos) == 0x000018, "Member 'FBtlGuiDrawStructCore::ScaleAnchorPos' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawStructCore, AngleAnchorPos) == 0x000020, "Member 'FBtlGuiDrawStructCore::AngleAnchorPos' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawStructCore, Color) == 0x000028, "Member 'FBtlGuiDrawStructCore::Color' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawStructCore, blendState) == 0x00002C, "Member 'FBtlGuiDrawStructCore::blendState' has a wrong offset!");

// ScriptStruct xrd777.HolidayEventRow
// 0x0008 (0x0010 - 0x0008)
struct FHolidayEventRow final : public FTableRowBase
{
public:
	int32                                         Major;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHolidayEventRow) == 0x000008, "Wrong alignment on FHolidayEventRow");
static_assert(sizeof(FHolidayEventRow) == 0x000010, "Wrong size on FHolidayEventRow");
static_assert(offsetof(FHolidayEventRow, Major) == 0x000008, "Member 'FHolidayEventRow::Major' has a wrong offset!");
static_assert(offsetof(FHolidayEventRow, Minor) == 0x00000C, "Member 'FHolidayEventRow::Minor' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawSilhouette
// 0x003C (0x0070 - 0x0034)
struct FBtlGuiDrawSilhouette final : public FBtlGuiDrawStructCore
{
public:
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Texture;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               UV;                                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReverseAlpha;                                      // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlGuiDrawSilhouette) == 0x000010, "Wrong alignment on FBtlGuiDrawSilhouette");
static_assert(sizeof(FBtlGuiDrawSilhouette) == 0x000070, "Wrong size on FBtlGuiDrawSilhouette");
static_assert(offsetof(FBtlGuiDrawSilhouette, Texture) == 0x000038, "Member 'FBtlGuiDrawSilhouette::Texture' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawSilhouette, Width) == 0x000040, "Member 'FBtlGuiDrawSilhouette::Width' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawSilhouette, Height) == 0x000044, "Member 'FBtlGuiDrawSilhouette::Height' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawSilhouette, UV) == 0x000050, "Member 'FBtlGuiDrawSilhouette::UV' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawSilhouette, ReverseAlpha) == 0x000060, "Member 'FBtlGuiDrawSilhouette::ReverseAlpha' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawRoundRect
// 0x000C (0x0040 - 0x0034)
struct FBtlGuiDrawRoundRect final : public FBtlGuiDrawStructCore
{
public:
	float                                         Width;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Round;                                             // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlGuiDrawRoundRect) == 0x000004, "Wrong alignment on FBtlGuiDrawRoundRect");
static_assert(sizeof(FBtlGuiDrawRoundRect) == 0x000040, "Wrong size on FBtlGuiDrawRoundRect");
static_assert(offsetof(FBtlGuiDrawRoundRect, Width) == 0x000034, "Member 'FBtlGuiDrawRoundRect::Width' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawRoundRect, Height) == 0x000038, "Member 'FBtlGuiDrawRoundRect::Height' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawRoundRect, Round) == 0x00003C, "Member 'FBtlGuiDrawRoundRect::Round' has a wrong offset!");

// ScriptStruct xrd777.HolidayScheduleData
// 0x0014 (0x0014 - 0x0000)
struct FHolidayScheduleData final
{
public:
	int32                                         Month;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArcanaID[0x3];                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHolidayScheduleData) == 0x000004, "Wrong alignment on FHolidayScheduleData");
static_assert(sizeof(FHolidayScheduleData) == 0x000014, "Wrong size on FHolidayScheduleData");
static_assert(offsetof(FHolidayScheduleData, Month) == 0x000000, "Member 'FHolidayScheduleData::Month' has a wrong offset!");
static_assert(offsetof(FHolidayScheduleData, Day) == 0x000004, "Member 'FHolidayScheduleData::Day' has a wrong offset!");
static_assert(offsetof(FHolidayScheduleData, ArcanaID) == 0x000008, "Member 'FHolidayScheduleData::ArcanaID' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiVertex
// 0x0014 (0x0014 - 0x0000)
struct FBtlGuiVertex final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV;                                                // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlGuiVertex) == 0x000004, "Wrong alignment on FBtlGuiVertex");
static_assert(sizeof(FBtlGuiVertex) == 0x000014, "Wrong size on FBtlGuiVertex");
static_assert(offsetof(FBtlGuiVertex, Pos) == 0x000000, "Member 'FBtlGuiVertex::Pos' has a wrong offset!");
static_assert(offsetof(FBtlGuiVertex, Color) == 0x000008, "Member 'FBtlGuiVertex::Color' has a wrong offset!");
static_assert(offsetof(FBtlGuiVertex, UV) == 0x00000C, "Member 'FBtlGuiVertex::UV' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawLineFrame
// 0x0024 (0x0058 - 0x0034)
struct FBtlGuiDrawLineFrame final : public FBtlGuiDrawStructCore
{
public:
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBtlGuiVertex>                  Vertex;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         LineLength;                                        // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseAnriAlias;                                      // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReverseAlpha;                                      // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VertexLeftTurn;                                    // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OutStretch;                                        // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlGuiDrawLineFrame) == 0x000008, "Wrong alignment on FBtlGuiDrawLineFrame");
static_assert(sizeof(FBtlGuiDrawLineFrame) == 0x000058, "Wrong size on FBtlGuiDrawLineFrame");
static_assert(offsetof(FBtlGuiDrawLineFrame, Vertex) == 0x000038, "Member 'FBtlGuiDrawLineFrame::Vertex' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawLineFrame, LineLength) == 0x000048, "Member 'FBtlGuiDrawLineFrame::LineLength' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawLineFrame, UseAnriAlias) == 0x000050, "Member 'FBtlGuiDrawLineFrame::UseAnriAlias' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawLineFrame, ReverseAlpha) == 0x000051, "Member 'FBtlGuiDrawLineFrame::ReverseAlpha' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawLineFrame, VertexLeftTurn) == 0x000052, "Member 'FBtlGuiDrawLineFrame::VertexLeftTurn' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawLineFrame, OutStretch) == 0x000053, "Member 'FBtlGuiDrawLineFrame::OutStretch' has a wrong offset!");

// ScriptStruct xrd777.EquipListItem
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FEquipListItem final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEquipListItem) == 0x000004, "Wrong alignment on FEquipListItem");
static_assert(sizeof(FEquipListItem) == 0x000008, "Wrong size on FEquipListItem");

// ScriptStruct xrd777.BtlGuiDrawPrimitive
// 0x002C (0x0060 - 0x0034)
struct FBtlGuiDrawPrimitive final : public FBtlGuiDrawStructCore
{
public:
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBtlGuiVertex>                  Vertex;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UTexture*                               Texture;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x4];                                       // 0x0050(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseAnriAlias;                                      // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SkipAntiFirstVtx;                                  // 0x0055(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReverseAlpha;                                      // 0x0056(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          VertexLeftTurn;                                    // 0x0057(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiDrawType                               DrawType;                                          // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlGuiDrawPrimitive) == 0x000008, "Wrong alignment on FBtlGuiDrawPrimitive");
static_assert(sizeof(FBtlGuiDrawPrimitive) == 0x000060, "Wrong size on FBtlGuiDrawPrimitive");
static_assert(offsetof(FBtlGuiDrawPrimitive, Vertex) == 0x000038, "Member 'FBtlGuiDrawPrimitive::Vertex' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawPrimitive, Texture) == 0x000048, "Member 'FBtlGuiDrawPrimitive::Texture' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawPrimitive, UseAnriAlias) == 0x000054, "Member 'FBtlGuiDrawPrimitive::UseAnriAlias' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawPrimitive, SkipAntiFirstVtx) == 0x000055, "Member 'FBtlGuiDrawPrimitive::SkipAntiFirstVtx' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawPrimitive, ReverseAlpha) == 0x000056, "Member 'FBtlGuiDrawPrimitive::ReverseAlpha' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawPrimitive, VertexLeftTurn) == 0x000057, "Member 'FBtlGuiDrawPrimitive::VertexLeftTurn' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawPrimitive, DrawType) == 0x000058, "Member 'FBtlGuiDrawPrimitive::DrawType' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawPlg
// 0x0014 (0x0048 - 0x0034)
struct FBtlGuiDrawPlg final : public FBtlGuiDrawStructCore
{
public:
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlgAsset*                              Plg;                                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlgNo;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReverseAlpha;                                      // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InverseX;                                          // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMultiMode;                                       // 0x0046(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlGuiDrawPlg) == 0x000008, "Wrong alignment on FBtlGuiDrawPlg");
static_assert(sizeof(FBtlGuiDrawPlg) == 0x000048, "Wrong size on FBtlGuiDrawPlg");
static_assert(offsetof(FBtlGuiDrawPlg, Plg) == 0x000038, "Member 'FBtlGuiDrawPlg::Plg' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawPlg, PlgNo) == 0x000040, "Member 'FBtlGuiDrawPlg::PlgNo' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawPlg, ReverseAlpha) == 0x000044, "Member 'FBtlGuiDrawPlg::ReverseAlpha' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawPlg, InverseX) == 0x000045, "Member 'FBtlGuiDrawPlg::InverseX' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawPlg, IsMultiMode) == 0x000046, "Member 'FBtlGuiDrawPlg::IsMultiMode' has a wrong offset!");

// ScriptStruct xrd777.FldPlayerInputInterpolationData
// 0x0014 (0x0014 - 0x0000)
struct FFldPlayerInputInterpolationData final
{
public:
	float                                         MinAgnle;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinFrame;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAgnle;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFrame;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Border;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPlayerInputInterpolationData) == 0x000004, "Wrong alignment on FFldPlayerInputInterpolationData");
static_assert(sizeof(FFldPlayerInputInterpolationData) == 0x000014, "Wrong size on FFldPlayerInputInterpolationData");
static_assert(offsetof(FFldPlayerInputInterpolationData, MinAgnle) == 0x000000, "Member 'FFldPlayerInputInterpolationData::MinAgnle' has a wrong offset!");
static_assert(offsetof(FFldPlayerInputInterpolationData, MinFrame) == 0x000004, "Member 'FFldPlayerInputInterpolationData::MinFrame' has a wrong offset!");
static_assert(offsetof(FFldPlayerInputInterpolationData, MaxAgnle) == 0x000008, "Member 'FFldPlayerInputInterpolationData::MaxAgnle' has a wrong offset!");
static_assert(offsetof(FFldPlayerInputInterpolationData, MaxFrame) == 0x00000C, "Member 'FFldPlayerInputInterpolationData::MaxFrame' has a wrong offset!");
static_assert(offsetof(FFldPlayerInputInterpolationData, Border) == 0x000010, "Member 'FFldPlayerInputInterpolationData::Border' has a wrong offset!");

// ScriptStruct xrd777.RumbleParam
// 0x0014 (0x0014 - 0x0000)
struct FRumbleParam final
{
public:
	int32                                         Power;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frame;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitFrame;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFram;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRumbleParam) == 0x000004, "Wrong alignment on FRumbleParam");
static_assert(sizeof(FRumbleParam) == 0x000014, "Wrong size on FRumbleParam");
static_assert(offsetof(FRumbleParam, Power) == 0x000000, "Member 'FRumbleParam::Power' has a wrong offset!");
static_assert(offsetof(FRumbleParam, Frame) == 0x000004, "Member 'FRumbleParam::Frame' has a wrong offset!");
static_assert(offsetof(FRumbleParam, WaitFrame) == 0x000008, "Member 'FRumbleParam::WaitFrame' has a wrong offset!");
static_assert(offsetof(FRumbleParam, Num) == 0x00000C, "Member 'FRumbleParam::Num' has a wrong offset!");
static_assert(offsetof(FRumbleParam, TotalFram) == 0x000010, "Member 'FRumbleParam::TotalFram' has a wrong offset!");

// ScriptStruct xrd777.RumbleData
// 0x003C (0x003C - 0x0000)
struct FRumbleData final
{
public:
	struct FRumbleParam                           Encount;                                           // 0x0000(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRumbleParam                           PinchEncount;                                      // 0x0014(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FRumbleParam                           Broken;                                            // 0x0028(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRumbleData) == 0x000004, "Wrong alignment on FRumbleData");
static_assert(sizeof(FRumbleData) == 0x00003C, "Wrong size on FRumbleData");
static_assert(offsetof(FRumbleData, Encount) == 0x000000, "Member 'FRumbleData::Encount' has a wrong offset!");
static_assert(offsetof(FRumbleData, PinchEncount) == 0x000014, "Member 'FRumbleData::PinchEncount' has a wrong offset!");
static_assert(offsetof(FRumbleData, Broken) == 0x000028, "Member 'FRumbleData::Broken' has a wrong offset!");

// ScriptStruct xrd777.FldPlayerAttackData
// 0x0030 (0x0030 - 0x0000)
struct FFldPlayerAttackData final
{
public:
	EDungeonAnimID                                AnimId;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimBlendTime;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponAnimId;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeginReceivingInputTime;                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndReceivingInputTime;                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchNextAttackTime;                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchFreeStateTime;                               // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideRot;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideScaleTime;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlideScale;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceId;                                           // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextAttackId;                                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPlayerAttackData) == 0x000004, "Wrong alignment on FFldPlayerAttackData");
static_assert(sizeof(FFldPlayerAttackData) == 0x000030, "Wrong size on FFldPlayerAttackData");
static_assert(offsetof(FFldPlayerAttackData, AnimId) == 0x000000, "Member 'FFldPlayerAttackData::AnimId' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackData, AnimBlendTime) == 0x000004, "Member 'FFldPlayerAttackData::AnimBlendTime' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackData, WeaponAnimId) == 0x000008, "Member 'FFldPlayerAttackData::WeaponAnimId' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackData, BeginReceivingInputTime) == 0x00000C, "Member 'FFldPlayerAttackData::BeginReceivingInputTime' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackData, EndReceivingInputTime) == 0x000010, "Member 'FFldPlayerAttackData::EndReceivingInputTime' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackData, SwitchNextAttackTime) == 0x000014, "Member 'FFldPlayerAttackData::SwitchNextAttackTime' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackData, SwitchFreeStateTime) == 0x000018, "Member 'FFldPlayerAttackData::SwitchFreeStateTime' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackData, SlideRot) == 0x00001C, "Member 'FFldPlayerAttackData::SlideRot' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackData, SlideScaleTime) == 0x000020, "Member 'FFldPlayerAttackData::SlideScaleTime' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackData, SlideScale) == 0x000024, "Member 'FFldPlayerAttackData::SlideScale' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackData, VoiceId) == 0x000028, "Member 'FFldPlayerAttackData::VoiceId' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackData, NextAttackId) == 0x00002C, "Member 'FFldPlayerAttackData::NextAttackId' has a wrong offset!");

// ScriptStruct xrd777.FldPlayerAttackGuideData
// 0x000C (0x000C - 0x0000)
struct FFldPlayerAttackGuideData final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GuideAngle;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPlayerAttackGuideData) == 0x000004, "Wrong alignment on FFldPlayerAttackGuideData");
static_assert(sizeof(FFldPlayerAttackGuideData) == 0x00000C, "Wrong size on FFldPlayerAttackGuideData");
static_assert(offsetof(FFldPlayerAttackGuideData, Range) == 0x000000, "Member 'FFldPlayerAttackGuideData::Range' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackGuideData, Angle) == 0x000004, "Member 'FFldPlayerAttackGuideData::Angle' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackGuideData, GuideAngle) == 0x000008, "Member 'FFldPlayerAttackGuideData::GuideAngle' has a wrong offset!");

// ScriptStruct xrd777.FldPlayerAttackCollisionData
// 0x0020 (0x0020 - 0x0000)
struct FFldPlayerAttackCollisionData final
{
public:
	struct FVector                                CollisionSize;                                     // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CollisionOffset;                                   // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearSideLength;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockOnDistanceCheckAngle;                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPlayerAttackCollisionData) == 0x000004, "Wrong alignment on FFldPlayerAttackCollisionData");
static_assert(sizeof(FFldPlayerAttackCollisionData) == 0x000020, "Wrong size on FFldPlayerAttackCollisionData");
static_assert(offsetof(FFldPlayerAttackCollisionData, CollisionSize) == 0x000000, "Member 'FFldPlayerAttackCollisionData::CollisionSize' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackCollisionData, CollisionOffset) == 0x00000C, "Member 'FFldPlayerAttackCollisionData::CollisionOffset' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackCollisionData, NearSideLength) == 0x000018, "Member 'FFldPlayerAttackCollisionData::NearSideLength' has a wrong offset!");
static_assert(offsetof(FFldPlayerAttackCollisionData, LockOnDistanceCheckAngle) == 0x00001C, "Member 'FFldPlayerAttackCollisionData::LockOnDistanceCheckAngle' has a wrong offset!");

// ScriptStruct xrd777.FldCharacterEffectSetup
// 0x0040 (0x0040 - 0x0000)
struct FFldCharacterEffectSetup final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldCharacterEffectSetup) == 0x000010, "Wrong alignment on FFldCharacterEffectSetup");
static_assert(sizeof(FFldCharacterEffectSetup) == 0x000040, "Wrong size on FFldCharacterEffectSetup");
static_assert(offsetof(FFldCharacterEffectSetup, SocketName) == 0x000000, "Member 'FFldCharacterEffectSetup::SocketName' has a wrong offset!");
static_assert(offsetof(FFldCharacterEffectSetup, Transform) == 0x000010, "Member 'FFldCharacterEffectSetup::Transform' has a wrong offset!");

// ScriptStruct xrd777.FldPlayerData
// 0x01E8 (0x01E8 - 0x0000)
struct FFldPlayerData final
{
public:
	float                                         InputDeadZone;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InputWalkZone;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFldPlayerInputInterpolationData       InputInterpolation;                                // 0x0008(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deceleration;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotSpeed;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotSpeed_Walk;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnSpeed;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnMoveRot;                                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingTime;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingSlideTime;                                  // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseBrakingTime;                                // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverseBrakingSlideTime;                           // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EncoutRadius;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LongRangeAttackEncoutRadius;                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockOnAnimAdvanceDuration;                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LockOnEffectSizeMin;                               // 0x0050(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LockOnEffectSizeMax;                               // 0x005C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnAniStartRot;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchingTimeToAssault;                            // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchingTimeToAssaultLv2;                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AssaultGetTpLv1;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AssaultGetTpLv2;                                   // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssaultUpsetRateLv1;                               // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssaultUpsetRateLv2;                               // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IdleAttackId;                                      // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WalkAttackId;                                      // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RunAttackId;                                       // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DashAttackId;                                      // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssaultAttackId;                                   // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackToMoveBlendTime;                             // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FFldPlayerAttackData>      Attack;                                            // 0x00A0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<struct FFldPlayerAttackGuideData>      AttackGuide;                                       // 0x00F0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<EFldAttackCollisionType, struct FFldPlayerAttackCollisionData> AttackCollision;                                   // 0x0100(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FRumbleData                            Rumble;                                            // 0x0150(0x003C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DashAttackEffectWaitTime;                          // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AssaultAttackJumpHeight;                           // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EDungeonEffectType, struct FFldCharacterEffectSetup> CharacterEffectSetup;                              // 0x0198(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPlayerData) == 0x000008, "Wrong alignment on FFldPlayerData");
static_assert(sizeof(FFldPlayerData) == 0x0001E8, "Wrong size on FFldPlayerData");
static_assert(offsetof(FFldPlayerData, InputDeadZone) == 0x000000, "Member 'FFldPlayerData::InputDeadZone' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, InputWalkZone) == 0x000004, "Member 'FFldPlayerData::InputWalkZone' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, InputInterpolation) == 0x000008, "Member 'FFldPlayerData::InputInterpolation' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, Acceleration) == 0x00001C, "Member 'FFldPlayerData::Acceleration' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, Deceleration) == 0x000020, "Member 'FFldPlayerData::Deceleration' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, RotSpeed) == 0x000024, "Member 'FFldPlayerData::RotSpeed' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, RotSpeed_Walk) == 0x000028, "Member 'FFldPlayerData::RotSpeed_Walk' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, TurnSpeed) == 0x00002C, "Member 'FFldPlayerData::TurnSpeed' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, TurnMoveRot) == 0x000030, "Member 'FFldPlayerData::TurnMoveRot' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, BrakingTime) == 0x000034, "Member 'FFldPlayerData::BrakingTime' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, BrakingSlideTime) == 0x000038, "Member 'FFldPlayerData::BrakingSlideTime' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, ReverseBrakingTime) == 0x00003C, "Member 'FFldPlayerData::ReverseBrakingTime' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, ReverseBrakingSlideTime) == 0x000040, "Member 'FFldPlayerData::ReverseBrakingSlideTime' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, EncoutRadius) == 0x000044, "Member 'FFldPlayerData::EncoutRadius' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, LongRangeAttackEncoutRadius) == 0x000048, "Member 'FFldPlayerData::LongRangeAttackEncoutRadius' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, LockOnAnimAdvanceDuration) == 0x00004C, "Member 'FFldPlayerData::LockOnAnimAdvanceDuration' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, LockOnEffectSizeMin) == 0x000050, "Member 'FFldPlayerData::LockOnEffectSizeMin' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, LockOnEffectSizeMax) == 0x00005C, "Member 'FFldPlayerData::LockOnEffectSizeMax' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, TurnAniStartRot) == 0x000068, "Member 'FFldPlayerData::TurnAniStartRot' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, SwitchingTimeToAssault) == 0x00006C, "Member 'FFldPlayerData::SwitchingTimeToAssault' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, SwitchingTimeToAssaultLv2) == 0x000070, "Member 'FFldPlayerData::SwitchingTimeToAssaultLv2' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, AssaultGetTpLv1) == 0x000074, "Member 'FFldPlayerData::AssaultGetTpLv1' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, AssaultGetTpLv2) == 0x000078, "Member 'FFldPlayerData::AssaultGetTpLv2' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, AssaultUpsetRateLv1) == 0x00007C, "Member 'FFldPlayerData::AssaultUpsetRateLv1' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, AssaultUpsetRateLv2) == 0x000080, "Member 'FFldPlayerData::AssaultUpsetRateLv2' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, IdleAttackId) == 0x000084, "Member 'FFldPlayerData::IdleAttackId' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, WalkAttackId) == 0x000088, "Member 'FFldPlayerData::WalkAttackId' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, RunAttackId) == 0x00008C, "Member 'FFldPlayerData::RunAttackId' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, DashAttackId) == 0x000090, "Member 'FFldPlayerData::DashAttackId' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, AssaultAttackId) == 0x000094, "Member 'FFldPlayerData::AssaultAttackId' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, AttackToMoveBlendTime) == 0x000098, "Member 'FFldPlayerData::AttackToMoveBlendTime' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, Attack) == 0x0000A0, "Member 'FFldPlayerData::Attack' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, AttackGuide) == 0x0000F0, "Member 'FFldPlayerData::AttackGuide' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, AttackCollision) == 0x000100, "Member 'FFldPlayerData::AttackCollision' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, Rumble) == 0x000150, "Member 'FFldPlayerData::Rumble' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, DashAttackEffectWaitTime) == 0x00018C, "Member 'FFldPlayerData::DashAttackEffectWaitTime' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, AssaultAttackJumpHeight) == 0x000190, "Member 'FFldPlayerData::AssaultAttackJumpHeight' has a wrong offset!");
static_assert(offsetof(FFldPlayerData, CharacterEffectSetup) == 0x000198, "Member 'FFldPlayerData::CharacterEffectSetup' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawMaterial
// 0x002C (0x0060 - 0x0034)
struct FBtlGuiDrawMaterial final : public FBtlGuiDrawStructCore
{
public:
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Rect;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Material;                                          // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlGuiDrawMaterial) == 0x000010, "Wrong alignment on FBtlGuiDrawMaterial");
static_assert(sizeof(FBtlGuiDrawMaterial) == 0x000060, "Wrong size on FBtlGuiDrawMaterial");
static_assert(offsetof(FBtlGuiDrawMaterial, Rect) == 0x000040, "Member 'FBtlGuiDrawMaterial::Rect' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawMaterial, Material) == 0x000050, "Member 'FBtlGuiDrawMaterial::Material' has a wrong offset!");

// ScriptStruct xrd777.MoviesEventData
// 0x0018 (0x0018 - 0x0000)
struct FMoviesEventData final
{
public:
	int8                                          Month;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Day;                                               // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ArcanaID;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MailID;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Major;                                             // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Minor;                                             // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          CommunityRankMin;                                  // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          CommunityRankMax;                                  // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        OffFlag;                                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoviesEventData) == 0x000004, "Wrong alignment on FMoviesEventData");
static_assert(sizeof(FMoviesEventData) == 0x000018, "Wrong size on FMoviesEventData");
static_assert(offsetof(FMoviesEventData, Month) == 0x000000, "Member 'FMoviesEventData::Month' has a wrong offset!");
static_assert(offsetof(FMoviesEventData, Day) == 0x000001, "Member 'FMoviesEventData::Day' has a wrong offset!");
static_assert(offsetof(FMoviesEventData, ArcanaID) == 0x000004, "Member 'FMoviesEventData::ArcanaID' has a wrong offset!");
static_assert(offsetof(FMoviesEventData, MailID) == 0x000008, "Member 'FMoviesEventData::MailID' has a wrong offset!");
static_assert(offsetof(FMoviesEventData, Major) == 0x00000C, "Member 'FMoviesEventData::Major' has a wrong offset!");
static_assert(offsetof(FMoviesEventData, Minor) == 0x00000E, "Member 'FMoviesEventData::Minor' has a wrong offset!");
static_assert(offsetof(FMoviesEventData, CommunityRankMin) == 0x000010, "Member 'FMoviesEventData::CommunityRankMin' has a wrong offset!");
static_assert(offsetof(FMoviesEventData, CommunityRankMax) == 0x000011, "Member 'FMoviesEventData::CommunityRankMax' has a wrong offset!");
static_assert(offsetof(FMoviesEventData, OffFlag) == 0x000014, "Member 'FMoviesEventData::OffFlag' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawSprite
// 0x001C (0x0050 - 0x0034)
struct FBtlGuiDrawSprite final : public FBtlGuiDrawStructCore
{
public:
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USprAsset*                              Sprite;                                            // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GrpNo;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprNo;                                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiDrawType                               DrawType;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevHorizontal;                                     // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevVertical;                                       // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlGuiDrawSprite) == 0x000008, "Wrong alignment on FBtlGuiDrawSprite");
static_assert(sizeof(FBtlGuiDrawSprite) == 0x000050, "Wrong size on FBtlGuiDrawSprite");
static_assert(offsetof(FBtlGuiDrawSprite, Sprite) == 0x000038, "Member 'FBtlGuiDrawSprite::Sprite' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawSprite, GrpNo) == 0x000040, "Member 'FBtlGuiDrawSprite::GrpNo' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawSprite, SprNo) == 0x000044, "Member 'FBtlGuiDrawSprite::SprNo' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawSprite, DrawType) == 0x000048, "Member 'FBtlGuiDrawSprite::DrawType' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawSprite, RevHorizontal) == 0x000049, "Member 'FBtlGuiDrawSprite::RevHorizontal' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawSprite, RevVertical) == 0x00004A, "Member 'FBtlGuiDrawSprite::RevVertical' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawRect
// 0x001C (0x0050 - 0x0034)
struct FBtlGuiDrawRect final : public FBtlGuiDrawStructCore
{
public:
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               Rect;                                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlGuiDrawRect) == 0x000010, "Wrong alignment on FBtlGuiDrawRect");
static_assert(sizeof(FBtlGuiDrawRect) == 0x000050, "Wrong size on FBtlGuiDrawRect");
static_assert(offsetof(FBtlGuiDrawRect, Rect) == 0x000040, "Member 'FBtlGuiDrawRect::Rect' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawMsg
// 0x004C (0x0080 - 0x0034)
struct FBtlGuiDrawMsg final : public FBtlGuiDrawStructCore
{
public:
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBmdAsset*                              bmd;                                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MsgNo;                                             // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PageNo;                                            // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MsgLine;                                           // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x4];                                       // 0x0060(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EBtlGuiTextType                               TextType;                                          // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiFontStyle                              FontStyle;                                         // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineBreak;                                         // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxRow;                                            // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AdjustedScale;                                     // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RowOffset;                                         // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlGuiDrawMsg) == 0x000008, "Wrong alignment on FBtlGuiDrawMsg");
static_assert(sizeof(FBtlGuiDrawMsg) == 0x000080, "Wrong size on FBtlGuiDrawMsg");
static_assert(offsetof(FBtlGuiDrawMsg, bmd) == 0x000038, "Member 'FBtlGuiDrawMsg::bmd' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawMsg, MsgNo) == 0x000050, "Member 'FBtlGuiDrawMsg::MsgNo' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawMsg, PageNo) == 0x000058, "Member 'FBtlGuiDrawMsg::PageNo' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawMsg, MsgLine) == 0x00005C, "Member 'FBtlGuiDrawMsg::MsgLine' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawMsg, TextType) == 0x000064, "Member 'FBtlGuiDrawMsg::TextType' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawMsg, FontStyle) == 0x000065, "Member 'FBtlGuiDrawMsg::FontStyle' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawMsg, LineBreak) == 0x000068, "Member 'FBtlGuiDrawMsg::LineBreak' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawMsg, MaxRow) == 0x00006C, "Member 'FBtlGuiDrawMsg::MaxRow' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawMsg, AdjustedScale) == 0x000070, "Member 'FBtlGuiDrawMsg::AdjustedScale' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawMsg, RowOffset) == 0x000078, "Member 'FBtlGuiDrawMsg::RowOffset' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawText
// 0x0024 (0x0058 - 0x0034)
struct FBtlGuiDrawText final : public FBtlGuiDrawStructCore
{
public:
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Str;                                               // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiTextType                               TextType;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiFontStyle                              FontStyle;                                         // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              AdjustedScale;                                     // 0x004C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlGuiDrawText) == 0x000008, "Wrong alignment on FBtlGuiDrawText");
static_assert(sizeof(FBtlGuiDrawText) == 0x000058, "Wrong size on FBtlGuiDrawText");
static_assert(offsetof(FBtlGuiDrawText, Str) == 0x000038, "Member 'FBtlGuiDrawText::Str' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawText, TextType) == 0x000048, "Member 'FBtlGuiDrawText::TextType' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawText, FontStyle) == 0x000049, "Member 'FBtlGuiDrawText::FontStyle' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawText, AdjustedScale) == 0x00004C, "Member 'FBtlGuiDrawText::AdjustedScale' has a wrong offset!");

// ScriptStruct xrd777.CommunityPresentRow
// 0x0028 (0x0030 - 0x0008)
struct FCommunityPresentRow final : public FTableRowBase
{
public:
	class FName                                   ItemId;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddCommunityPoint;                                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReactionMessageLabel;                              // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeroMessageLabel;                                  // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ChristmasReactionMessageLabel;                     // 0x0024(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunityPresentRow) == 0x000008, "Wrong alignment on FCommunityPresentRow");
static_assert(sizeof(FCommunityPresentRow) == 0x000030, "Wrong size on FCommunityPresentRow");
static_assert(offsetof(FCommunityPresentRow, ItemId) == 0x000008, "Member 'FCommunityPresentRow::ItemId' has a wrong offset!");
static_assert(offsetof(FCommunityPresentRow, AddCommunityPoint) == 0x000010, "Member 'FCommunityPresentRow::AddCommunityPoint' has a wrong offset!");
static_assert(offsetof(FCommunityPresentRow, ReactionMessageLabel) == 0x000014, "Member 'FCommunityPresentRow::ReactionMessageLabel' has a wrong offset!");
static_assert(offsetof(FCommunityPresentRow, HeroMessageLabel) == 0x00001C, "Member 'FCommunityPresentRow::HeroMessageLabel' has a wrong offset!");
static_assert(offsetof(FCommunityPresentRow, ChristmasReactionMessageLabel) == 0x000024, "Member 'FCommunityPresentRow::ChristmasReactionMessageLabel' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawPanel
// 0x0008 (0x003C - 0x0034)
struct FBtlGuiDrawPanel final : public FBtlGuiDrawStructCore
{
public:
	float                                         Width;                                             // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlGuiDrawPanel) == 0x000004, "Wrong alignment on FBtlGuiDrawPanel");
static_assert(sizeof(FBtlGuiDrawPanel) == 0x00003C, "Wrong size on FBtlGuiDrawPanel");
static_assert(offsetof(FBtlGuiDrawPanel, Width) == 0x000034, "Member 'FBtlGuiDrawPanel::Width' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawPanel, Height) == 0x000038, "Member 'FBtlGuiDrawPanel::Height' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawImage
// 0x003C (0x0070 - 0x0034)
struct FBtlGuiDrawImage final : public FBtlGuiDrawStructCore
{
public:
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Texture;                                           // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiDrawType                               DrawType;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               UV;                                                // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevHorizontal;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RevVertical;                                       // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_62[0xE];                                       // 0x0062(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlGuiDrawImage) == 0x000010, "Wrong alignment on FBtlGuiDrawImage");
static_assert(sizeof(FBtlGuiDrawImage) == 0x000070, "Wrong size on FBtlGuiDrawImage");
static_assert(offsetof(FBtlGuiDrawImage, Texture) == 0x000038, "Member 'FBtlGuiDrawImage::Texture' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawImage, Width) == 0x000040, "Member 'FBtlGuiDrawImage::Width' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawImage, Height) == 0x000044, "Member 'FBtlGuiDrawImage::Height' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawImage, DrawType) == 0x000048, "Member 'FBtlGuiDrawImage::DrawType' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawImage, UV) == 0x000050, "Member 'FBtlGuiDrawImage::UV' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawImage, RevHorizontal) == 0x000060, "Member 'FBtlGuiDrawImage::RevHorizontal' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawImage, RevVertical) == 0x000061, "Member 'FBtlGuiDrawImage::RevVertical' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiDrawFlag
// 0x0003 (0x0003 - 0x0000)
struct FBtlGuiDrawFlag final
{
public:
	bool                                          InheritScale;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InheritAngle;                                      // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InheritColor;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlGuiDrawFlag) == 0x000001, "Wrong alignment on FBtlGuiDrawFlag");
static_assert(sizeof(FBtlGuiDrawFlag) == 0x000003, "Wrong size on FBtlGuiDrawFlag");
static_assert(offsetof(FBtlGuiDrawFlag, InheritScale) == 0x000000, "Member 'FBtlGuiDrawFlag::InheritScale' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawFlag, InheritAngle) == 0x000001, "Member 'FBtlGuiDrawFlag::InheritAngle' has a wrong offset!");
static_assert(offsetof(FBtlGuiDrawFlag, InheritColor) == 0x000002, "Member 'FBtlGuiDrawFlag::InheritColor' has a wrong offset!");

// ScriptStruct xrd777.FldCharSpeed
// 0x0010 (0x0010 - 0x0000)
struct FFldCharSpeed final
{
public:
	float                                         Walk;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Run;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dash;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Assault;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldCharSpeed) == 0x000004, "Wrong alignment on FFldCharSpeed");
static_assert(sizeof(FFldCharSpeed) == 0x000010, "Wrong size on FFldCharSpeed");
static_assert(offsetof(FFldCharSpeed, Walk) == 0x000000, "Member 'FFldCharSpeed::Walk' has a wrong offset!");
static_assert(offsetof(FFldCharSpeed, Run) == 0x000004, "Member 'FFldCharSpeed::Run' has a wrong offset!");
static_assert(offsetof(FFldCharSpeed, Dash) == 0x000008, "Member 'FFldCharSpeed::Dash' has a wrong offset!");
static_assert(offsetof(FFldCharSpeed, Assault) == 0x00000C, "Member 'FFldCharSpeed::Assault' has a wrong offset!");

// ScriptStruct xrd777.FldCharMinorBgData
// 0x0010 (0x0010 - 0x0000)
struct FFldCharMinorBgData final
{
public:
	struct FFldCharSpeed                          Speed;                                             // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldCharMinorBgData) == 0x000004, "Wrong alignment on FFldCharMinorBgData");
static_assert(sizeof(FFldCharMinorBgData) == 0x000010, "Wrong size on FFldCharMinorBgData");
static_assert(offsetof(FFldCharMinorBgData, Speed) == 0x000000, "Member 'FFldCharMinorBgData::Speed' has a wrong offset!");

// ScriptStruct xrd777.FldCharMajorBgData
// 0x0050 (0x0050 - 0x0000)
struct FFldCharMajorBgData final
{
public:
	TMap<int32, struct FFldCharMinorBgData>       Minor;                                             // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldCharMajorBgData) == 0x000008, "Wrong alignment on FFldCharMajorBgData");
static_assert(sizeof(FFldCharMajorBgData) == 0x000050, "Wrong size on FFldCharMajorBgData");
static_assert(offsetof(FFldCharMajorBgData, Minor) == 0x000000, "Member 'FFldCharMajorBgData::Minor' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiIconDamage
// 0x0020 (0x0020 - 0x0000)
struct FBtlGuiIconDamage final
{
public:
	class ABtlActor*                              PTarget;                                           // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Damage;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageSP;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiIconHit                                Hit;                                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiIconDamageType                         DamageType;                                        // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPortionDamage;                                   // 0x0012(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBadStatus;                                       // 0x0013(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBadStatusRecovery;                               // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEndure;                                          // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepEndureRadio;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlGuiIconDamage) == 0x000008, "Wrong alignment on FBtlGuiIconDamage");
static_assert(sizeof(FBtlGuiIconDamage) == 0x000020, "Wrong size on FBtlGuiIconDamage");
static_assert(offsetof(FBtlGuiIconDamage, PTarget) == 0x000000, "Member 'FBtlGuiIconDamage::PTarget' has a wrong offset!");
static_assert(offsetof(FBtlGuiIconDamage, Damage) == 0x000008, "Member 'FBtlGuiIconDamage::Damage' has a wrong offset!");
static_assert(offsetof(FBtlGuiIconDamage, DamageSP) == 0x00000C, "Member 'FBtlGuiIconDamage::DamageSP' has a wrong offset!");
static_assert(offsetof(FBtlGuiIconDamage, Hit) == 0x000010, "Member 'FBtlGuiIconDamage::Hit' has a wrong offset!");
static_assert(offsetof(FBtlGuiIconDamage, DamageType) == 0x000011, "Member 'FBtlGuiIconDamage::DamageType' has a wrong offset!");
static_assert(offsetof(FBtlGuiIconDamage, IsPortionDamage) == 0x000012, "Member 'FBtlGuiIconDamage::IsPortionDamage' has a wrong offset!");
static_assert(offsetof(FBtlGuiIconDamage, IsBadStatus) == 0x000013, "Member 'FBtlGuiIconDamage::IsBadStatus' has a wrong offset!");
static_assert(offsetof(FBtlGuiIconDamage, IsBadStatusRecovery) == 0x000014, "Member 'FBtlGuiIconDamage::IsBadStatusRecovery' has a wrong offset!");
static_assert(offsetof(FBtlGuiIconDamage, IsEndure) == 0x000015, "Member 'FBtlGuiIconDamage::IsEndure' has a wrong offset!");
static_assert(offsetof(FBtlGuiIconDamage, Delay) == 0x000018, "Member 'FBtlGuiIconDamage::Delay' has a wrong offset!");
static_assert(offsetof(FBtlGuiIconDamage, StepEndureRadio) == 0x00001C, "Member 'FBtlGuiIconDamage::StepEndureRadio' has a wrong offset!");

// ScriptStruct xrd777.HolidayEventData
// 0x0008 (0x0008 - 0x0000)
struct FHolidayEventData final
{
public:
	int32                                         Major;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHolidayEventData) == 0x000004, "Wrong alignment on FHolidayEventData");
static_assert(sizeof(FHolidayEventData) == 0x000008, "Wrong size on FHolidayEventData");
static_assert(offsetof(FHolidayEventData, Major) == 0x000000, "Member 'FHolidayEventData::Major' has a wrong offset!");
static_assert(offsetof(FHolidayEventData, Minor) == 0x000004, "Member 'FHolidayEventData::Minor' has a wrong offset!");

// ScriptStruct xrd777.BtlGuiRushEffectParam
// 0x001C (0x001C - 0x0000)
struct FBtlGuiRushEffectParam final
{
public:
	float                                         Intensity_float;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineDensity_float;                                 // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThershold_float;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineWidthX_float;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineWidthY_float;                                  // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskWidth_float;                                   // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed_float;                                       // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlGuiRushEffectParam) == 0x000004, "Wrong alignment on FBtlGuiRushEffectParam");
static_assert(sizeof(FBtlGuiRushEffectParam) == 0x00001C, "Wrong size on FBtlGuiRushEffectParam");
static_assert(offsetof(FBtlGuiRushEffectParam, Intensity_float) == 0x000000, "Member 'FBtlGuiRushEffectParam::Intensity_float' has a wrong offset!");
static_assert(offsetof(FBtlGuiRushEffectParam, LineDensity_float) == 0x000004, "Member 'FBtlGuiRushEffectParam::LineDensity_float' has a wrong offset!");
static_assert(offsetof(FBtlGuiRushEffectParam, LineThershold_float) == 0x000008, "Member 'FBtlGuiRushEffectParam::LineThershold_float' has a wrong offset!");
static_assert(offsetof(FBtlGuiRushEffectParam, LineWidthX_float) == 0x00000C, "Member 'FBtlGuiRushEffectParam::LineWidthX_float' has a wrong offset!");
static_assert(offsetof(FBtlGuiRushEffectParam, LineWidthY_float) == 0x000010, "Member 'FBtlGuiRushEffectParam::LineWidthY_float' has a wrong offset!");
static_assert(offsetof(FBtlGuiRushEffectParam, MaskWidth_float) == 0x000014, "Member 'FBtlGuiRushEffectParam::MaskWidth_float' has a wrong offset!");
static_assert(offsetof(FBtlGuiRushEffectParam, Speed_float) == 0x000018, "Member 'FBtlGuiRushEffectParam::Speed_float' has a wrong offset!");

// ScriptStruct xrd777.BtlResultHeroInfo
// 0x0040 (0x0040 - 0x0000)
struct FBtlResultHeroInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hp;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHp;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sp;                                                // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSp;                                             // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         NextExp;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipRaceNo;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EquipPersonaLevel;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EquipPersonaName;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlResultHeroInfo) == 0x000008, "Wrong alignment on FBtlResultHeroInfo");
static_assert(sizeof(FBtlResultHeroInfo) == 0x000040, "Wrong size on FBtlResultHeroInfo");
static_assert(offsetof(FBtlResultHeroInfo, Name) == 0x000000, "Member 'FBtlResultHeroInfo::Name' has a wrong offset!");
static_assert(offsetof(FBtlResultHeroInfo, Hp) == 0x000010, "Member 'FBtlResultHeroInfo::Hp' has a wrong offset!");
static_assert(offsetof(FBtlResultHeroInfo, MaxHp) == 0x000014, "Member 'FBtlResultHeroInfo::MaxHp' has a wrong offset!");
static_assert(offsetof(FBtlResultHeroInfo, Sp) == 0x000018, "Member 'FBtlResultHeroInfo::Sp' has a wrong offset!");
static_assert(offsetof(FBtlResultHeroInfo, MaxSp) == 0x00001C, "Member 'FBtlResultHeroInfo::MaxSp' has a wrong offset!");
static_assert(offsetof(FBtlResultHeroInfo, NextExp) == 0x000020, "Member 'FBtlResultHeroInfo::NextExp' has a wrong offset!");
static_assert(offsetof(FBtlResultHeroInfo, EquipRaceNo) == 0x000028, "Member 'FBtlResultHeroInfo::EquipRaceNo' has a wrong offset!");
static_assert(offsetof(FBtlResultHeroInfo, EquipPersonaLevel) == 0x00002C, "Member 'FBtlResultHeroInfo::EquipPersonaLevel' has a wrong offset!");
static_assert(offsetof(FBtlResultHeroInfo, EquipPersonaName) == 0x000030, "Member 'FBtlResultHeroInfo::EquipPersonaName' has a wrong offset!");

// ScriptStruct xrd777.BtlResultPersonaParam
// 0x0018 (0x0018 - 0x0000)
struct FBtlResultPersonaParam final
{
public:
	int32                                         PersonaID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlResultPersonaParam) == 0x000008, "Wrong alignment on FBtlResultPersonaParam");
static_assert(sizeof(FBtlResultPersonaParam) == 0x000018, "Wrong size on FBtlResultPersonaParam");
static_assert(offsetof(FBtlResultPersonaParam, PersonaID) == 0x000000, "Member 'FBtlResultPersonaParam::PersonaID' has a wrong offset!");
static_assert(offsetof(FBtlResultPersonaParam, Level) == 0x000004, "Member 'FBtlResultPersonaParam::Level' has a wrong offset!");
static_assert(offsetof(FBtlResultPersonaParam, Name) == 0x000008, "Member 'FBtlResultPersonaParam::Name' has a wrong offset!");

// ScriptStruct xrd777.FldCharKeyParam
// 0x0028 (0x0028 - 0x0000)
struct FFldCharKeyParam final
{
public:
	EFldCharKeyType                               Save;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFldCharKeyType                               AutoRecover;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFldCharKeyType                               DailyMenu;                                         // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFldCharKeyType                               DungeonMenu;                                       // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFldCharKeyType                               Camp;                                              // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFldCharKeyType                               LargeMap;                                          // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFldCharKeyType                               BackLog;                                           // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFldCharKeyType                               VoiceActionDisp;                                   // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFldCharKeyType                               Check;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFldCharKeyType                               Attack;                                            // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFldCharKeyType                               CameraZoomIn;                                      // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFldCharKeyType                               CameraZoomOut;                                     // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EFldCharKeyType>                       CameraDefault;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	EFldCharKeyType                               DebugCamera;                                       // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldCharKeyParam) == 0x000008, "Wrong alignment on FFldCharKeyParam");
static_assert(sizeof(FFldCharKeyParam) == 0x000028, "Wrong size on FFldCharKeyParam");
static_assert(offsetof(FFldCharKeyParam, Save) == 0x000000, "Member 'FFldCharKeyParam::Save' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, AutoRecover) == 0x000001, "Member 'FFldCharKeyParam::AutoRecover' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, DailyMenu) == 0x000002, "Member 'FFldCharKeyParam::DailyMenu' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, DungeonMenu) == 0x000003, "Member 'FFldCharKeyParam::DungeonMenu' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, Camp) == 0x000004, "Member 'FFldCharKeyParam::Camp' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, LargeMap) == 0x000005, "Member 'FFldCharKeyParam::LargeMap' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, BackLog) == 0x000006, "Member 'FFldCharKeyParam::BackLog' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, VoiceActionDisp) == 0x000007, "Member 'FFldCharKeyParam::VoiceActionDisp' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, Check) == 0x000008, "Member 'FFldCharKeyParam::Check' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, Attack) == 0x000009, "Member 'FFldCharKeyParam::Attack' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, CameraZoomIn) == 0x00000A, "Member 'FFldCharKeyParam::CameraZoomIn' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, CameraZoomOut) == 0x00000B, "Member 'FFldCharKeyParam::CameraZoomOut' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, CameraDefault) == 0x000010, "Member 'FFldCharKeyParam::CameraDefault' has a wrong offset!");
static_assert(offsetof(FFldCharKeyParam, DebugCamera) == 0x000020, "Member 'FFldCharKeyParam::DebugCamera' has a wrong offset!");

// ScriptStruct xrd777.BtlResultAllyLvupParam
// 0x000C (0x000C - 0x0000)
struct FBtlResultAllyLvupParam final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLevelUp;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlResultAllyLvupParam) == 0x000004, "Wrong alignment on FBtlResultAllyLvupParam");
static_assert(sizeof(FBtlResultAllyLvupParam) == 0x00000C, "Wrong size on FBtlResultAllyLvupParam");
static_assert(offsetof(FBtlResultAllyLvupParam, PlayerId) == 0x000000, "Member 'FBtlResultAllyLvupParam::PlayerId' has a wrong offset!");
static_assert(offsetof(FBtlResultAllyLvupParam, Level) == 0x000004, "Member 'FBtlResultAllyLvupParam::Level' has a wrong offset!");
static_assert(offsetof(FBtlResultAllyLvupParam, IsLevelUp) == 0x000008, "Member 'FBtlResultAllyLvupParam::IsLevelUp' has a wrong offset!");

// ScriptStruct xrd777.ChristmasEventListData
// 0x0008 (0x0008 - 0x0000)
struct FChristmasEventListData final
{
public:
	int16                                         Major;                                             // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Minor;                                             // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChristmasEventListData) == 0x000004, "Wrong alignment on FChristmasEventListData");
static_assert(sizeof(FChristmasEventListData) == 0x000008, "Wrong size on FChristmasEventListData");
static_assert(offsetof(FChristmasEventListData, Major) == 0x000000, "Member 'FChristmasEventListData::Major' has a wrong offset!");
static_assert(offsetof(FChristmasEventListData, Minor) == 0x000002, "Member 'FChristmasEventListData::Minor' has a wrong offset!");
static_assert(offsetof(FChristmasEventListData, Flag) == 0x000004, "Member 'FChristmasEventListData::Flag' has a wrong offset!");

// ScriptStruct xrd777.ChristmasEventData
// 0x0018 (0x0018 - 0x0000)
struct FChristmasEventData final
{
public:
	struct FChristmasEventMailData                Mail;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FChristmasEventListData>        Events;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChristmasEventData) == 0x000008, "Wrong alignment on FChristmasEventData");
static_assert(sizeof(FChristmasEventData) == 0x000018, "Wrong size on FChristmasEventData");
static_assert(offsetof(FChristmasEventData, Mail) == 0x000000, "Member 'FChristmasEventData::Mail' has a wrong offset!");
static_assert(offsetof(FChristmasEventData, Events) == 0x000008, "Member 'FChristmasEventData::Events' has a wrong offset!");

// ScriptStruct xrd777.BtlResultItemParam
// 0x0018 (0x0018 - 0x0000)
struct FBtlResultItemParam final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlResultItemParam) == 0x000008, "Wrong alignment on FBtlResultItemParam");
static_assert(sizeof(FBtlResultItemParam) == 0x000018, "Wrong size on FBtlResultItemParam");
static_assert(offsetof(FBtlResultItemParam, ID) == 0x000000, "Member 'FBtlResultItemParam::ID' has a wrong offset!");
static_assert(offsetof(FBtlResultItemParam, Num) == 0x000004, "Member 'FBtlResultItemParam::Num' has a wrong offset!");
static_assert(offsetof(FBtlResultItemParam, Name) == 0x000008, "Member 'FBtlResultItemParam::Name' has a wrong offset!");

// ScriptStruct xrd777.ShuffleBackGroundPrimitiveDrawObject
// 0x005C (0x005C - 0x0000)
struct FShuffleBackGroundPrimitiveDrawObject final
{
public:
	float                                         SlideX;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleW;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleH;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PosBase;                                           // 0x000C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationBase;                                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationBeforeExpansion;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationAfterExpansion;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedRotationBeforeExpansion;                      // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedRotationAfterExpansion;                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRotationBeforeExpansion;                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRotationAfterExpansion;                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeTimeRotationBeforeExpansion;                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeTimeRotationAfterExpansion;                  // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Move;                                              // 0x003C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpeedMove;                                         // 0x0048(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeMove;                                          // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChangeTimeMove;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShuffleBackGroundPrimitiveDrawObject) == 0x000004, "Wrong alignment on FShuffleBackGroundPrimitiveDrawObject");
static_assert(sizeof(FShuffleBackGroundPrimitiveDrawObject) == 0x00005C, "Wrong size on FShuffleBackGroundPrimitiveDrawObject");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, SlideX) == 0x000000, "Member 'FShuffleBackGroundPrimitiveDrawObject::SlideX' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, ScaleW) == 0x000004, "Member 'FShuffleBackGroundPrimitiveDrawObject::ScaleW' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, ScaleH) == 0x000008, "Member 'FShuffleBackGroundPrimitiveDrawObject::ScaleH' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, PosBase) == 0x00000C, "Member 'FShuffleBackGroundPrimitiveDrawObject::PosBase' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, RotationBase) == 0x000018, "Member 'FShuffleBackGroundPrimitiveDrawObject::RotationBase' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, RotationBeforeExpansion) == 0x00001C, "Member 'FShuffleBackGroundPrimitiveDrawObject::RotationBeforeExpansion' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, RotationAfterExpansion) == 0x000020, "Member 'FShuffleBackGroundPrimitiveDrawObject::RotationAfterExpansion' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, SpeedRotationBeforeExpansion) == 0x000024, "Member 'FShuffleBackGroundPrimitiveDrawObject::SpeedRotationBeforeExpansion' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, SpeedRotationAfterExpansion) == 0x000028, "Member 'FShuffleBackGroundPrimitiveDrawObject::SpeedRotationAfterExpansion' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, TimeRotationBeforeExpansion) == 0x00002C, "Member 'FShuffleBackGroundPrimitiveDrawObject::TimeRotationBeforeExpansion' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, TimeRotationAfterExpansion) == 0x000030, "Member 'FShuffleBackGroundPrimitiveDrawObject::TimeRotationAfterExpansion' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, ChangeTimeRotationBeforeExpansion) == 0x000034, "Member 'FShuffleBackGroundPrimitiveDrawObject::ChangeTimeRotationBeforeExpansion' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, ChangeTimeRotationAfterExpansion) == 0x000038, "Member 'FShuffleBackGroundPrimitiveDrawObject::ChangeTimeRotationAfterExpansion' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, Move) == 0x00003C, "Member 'FShuffleBackGroundPrimitiveDrawObject::Move' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, SpeedMove) == 0x000048, "Member 'FShuffleBackGroundPrimitiveDrawObject::SpeedMove' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, TimeMove) == 0x000054, "Member 'FShuffleBackGroundPrimitiveDrawObject::TimeMove' has a wrong offset!");
static_assert(offsetof(FShuffleBackGroundPrimitiveDrawObject, ChangeTimeMove) == 0x000058, "Member 'FShuffleBackGroundPrimitiveDrawObject::ChangeTimeMove' has a wrong offset!");

// ScriptStruct xrd777.ShuffleSmallArcanaDrawObject
// 0x0048 (0x0048 - 0x0000)
struct FShuffleSmallArcanaDrawObject final
{
public:
	class UBtlGuiDrawObjectSprite*                Card;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                Shine1;                                            // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                Shine2;                                            // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                Frame;                                             // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                BonusShine;                                        // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                Glow;                                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectSprite*                GetEffect;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNewGetArcana;                                    // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlowAlpha;                                         // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlowWaitAnimeTime;                                 // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStartGlowWaitAnime;                              // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShuffleSmallArcanaDrawObject) == 0x000008, "Wrong alignment on FShuffleSmallArcanaDrawObject");
static_assert(sizeof(FShuffleSmallArcanaDrawObject) == 0x000048, "Wrong size on FShuffleSmallArcanaDrawObject");
static_assert(offsetof(FShuffleSmallArcanaDrawObject, Card) == 0x000000, "Member 'FShuffleSmallArcanaDrawObject::Card' has a wrong offset!");
static_assert(offsetof(FShuffleSmallArcanaDrawObject, Shine1) == 0x000008, "Member 'FShuffleSmallArcanaDrawObject::Shine1' has a wrong offset!");
static_assert(offsetof(FShuffleSmallArcanaDrawObject, Shine2) == 0x000010, "Member 'FShuffleSmallArcanaDrawObject::Shine2' has a wrong offset!");
static_assert(offsetof(FShuffleSmallArcanaDrawObject, Frame) == 0x000018, "Member 'FShuffleSmallArcanaDrawObject::Frame' has a wrong offset!");
static_assert(offsetof(FShuffleSmallArcanaDrawObject, BonusShine) == 0x000020, "Member 'FShuffleSmallArcanaDrawObject::BonusShine' has a wrong offset!");
static_assert(offsetof(FShuffleSmallArcanaDrawObject, Glow) == 0x000028, "Member 'FShuffleSmallArcanaDrawObject::Glow' has a wrong offset!");
static_assert(offsetof(FShuffleSmallArcanaDrawObject, GetEffect) == 0x000030, "Member 'FShuffleSmallArcanaDrawObject::GetEffect' has a wrong offset!");
static_assert(offsetof(FShuffleSmallArcanaDrawObject, IsNewGetArcana) == 0x000038, "Member 'FShuffleSmallArcanaDrawObject::IsNewGetArcana' has a wrong offset!");
static_assert(offsetof(FShuffleSmallArcanaDrawObject, GlowAlpha) == 0x00003C, "Member 'FShuffleSmallArcanaDrawObject::GlowAlpha' has a wrong offset!");
static_assert(offsetof(FShuffleSmallArcanaDrawObject, GlowWaitAnimeTime) == 0x000040, "Member 'FShuffleSmallArcanaDrawObject::GlowWaitAnimeTime' has a wrong offset!");
static_assert(offsetof(FShuffleSmallArcanaDrawObject, IsStartGlowWaitAnime) == 0x000044, "Member 'FShuffleSmallArcanaDrawObject::IsStartGlowWaitAnime' has a wrong offset!");

// ScriptStruct xrd777.DatPlayerNameTableRowBase
// 0x0038 (0x0040 - 0x0008)
struct FDatPlayerNameTableRowBase final : public FTableRowBase
{
public:
	int32                                         PlayerId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0028(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatPlayerNameTableRowBase) == 0x000008, "Wrong alignment on FDatPlayerNameTableRowBase");
static_assert(sizeof(FDatPlayerNameTableRowBase) == 0x000040, "Wrong size on FDatPlayerNameTableRowBase");
static_assert(offsetof(FDatPlayerNameTableRowBase, PlayerId) == 0x000008, "Member 'FDatPlayerNameTableRowBase::PlayerId' has a wrong offset!");
static_assert(offsetof(FDatPlayerNameTableRowBase, Name) == 0x000010, "Member 'FDatPlayerNameTableRowBase::Name' has a wrong offset!");
static_assert(offsetof(FDatPlayerNameTableRowBase, Comment) == 0x000028, "Member 'FDatPlayerNameTableRowBase::Comment' has a wrong offset!");

// ScriptStruct xrd777.ShuffleCardInfo
// 0x00B0 (0x00B0 - 0x0000)
struct FShuffleCardInfo final
{
public:
	class AAppPropsCore*                          Card;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PosBase;                                           // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PosAllMove;                                        // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PosWaittingMove;                                   // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpeedWatting;                                      // 0x0038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseRotX;                                          // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseRotZ;                                          // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationX;                                         // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationZ;                                         // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SppedRotationX;                                    // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SppedRotationZ;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PosMoveFrom;                                       // 0x005C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PosMoveTo;                                         // 0x0068(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotMoveXFrom;                                      // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotMoveXTo;                                        // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotMoveZFrom;                                      // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotMoveZTo;                                        // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveLerpValue;                                     // 0x0084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlShuffleCardState                          MoveAfterState;                                    // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveTime;                                          // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlShuffleCardState                          State;                                             // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Moving;                                            // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOutAnimeSelectEffect;                            // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x1];                                       // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SelectEffectAlpha;                                 // 0x0094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlShuffleCardEffectSelectState              EffectSelectState;                                 // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValueCardRotation;                                 // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeWaitCardRotation;                              // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlShuffleCardRotationState                  StateCardRotation;                                 // 0x00A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTickCard;                                        // 0x00A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStartMajorAppear;                                // 0x00A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A7[0x1];                                       // 0x00A7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationMajorAppear;                               // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShuffleCardInfo) == 0x000008, "Wrong alignment on FShuffleCardInfo");
static_assert(sizeof(FShuffleCardInfo) == 0x0000B0, "Wrong size on FShuffleCardInfo");
static_assert(offsetof(FShuffleCardInfo, Card) == 0x000000, "Member 'FShuffleCardInfo::Card' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, Pos) == 0x000008, "Member 'FShuffleCardInfo::Pos' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, PosBase) == 0x000014, "Member 'FShuffleCardInfo::PosBase' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, PosAllMove) == 0x000020, "Member 'FShuffleCardInfo::PosAllMove' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, PosWaittingMove) == 0x00002C, "Member 'FShuffleCardInfo::PosWaittingMove' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, SpeedWatting) == 0x000038, "Member 'FShuffleCardInfo::SpeedWatting' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, BaseRotX) == 0x000044, "Member 'FShuffleCardInfo::BaseRotX' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, BaseRotZ) == 0x000048, "Member 'FShuffleCardInfo::BaseRotZ' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, RotationX) == 0x00004C, "Member 'FShuffleCardInfo::RotationX' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, RotationZ) == 0x000050, "Member 'FShuffleCardInfo::RotationZ' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, SppedRotationX) == 0x000054, "Member 'FShuffleCardInfo::SppedRotationX' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, SppedRotationZ) == 0x000058, "Member 'FShuffleCardInfo::SppedRotationZ' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, PosMoveFrom) == 0x00005C, "Member 'FShuffleCardInfo::PosMoveFrom' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, PosMoveTo) == 0x000068, "Member 'FShuffleCardInfo::PosMoveTo' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, RotMoveXFrom) == 0x000074, "Member 'FShuffleCardInfo::RotMoveXFrom' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, RotMoveXTo) == 0x000078, "Member 'FShuffleCardInfo::RotMoveXTo' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, RotMoveZFrom) == 0x00007C, "Member 'FShuffleCardInfo::RotMoveZFrom' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, RotMoveZTo) == 0x000080, "Member 'FShuffleCardInfo::RotMoveZTo' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, MoveLerpValue) == 0x000084, "Member 'FShuffleCardInfo::MoveLerpValue' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, MoveAfterState) == 0x000088, "Member 'FShuffleCardInfo::MoveAfterState' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, MoveTime) == 0x00008C, "Member 'FShuffleCardInfo::MoveTime' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, State) == 0x000090, "Member 'FShuffleCardInfo::State' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, Moving) == 0x000091, "Member 'FShuffleCardInfo::Moving' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, IsOutAnimeSelectEffect) == 0x000092, "Member 'FShuffleCardInfo::IsOutAnimeSelectEffect' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, SelectEffectAlpha) == 0x000094, "Member 'FShuffleCardInfo::SelectEffectAlpha' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, EffectSelectState) == 0x000098, "Member 'FShuffleCardInfo::EffectSelectState' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, ValueCardRotation) == 0x00009C, "Member 'FShuffleCardInfo::ValueCardRotation' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, TimeWaitCardRotation) == 0x0000A0, "Member 'FShuffleCardInfo::TimeWaitCardRotation' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, StateCardRotation) == 0x0000A4, "Member 'FShuffleCardInfo::StateCardRotation' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, IsTickCard) == 0x0000A5, "Member 'FShuffleCardInfo::IsTickCard' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, IsStartMajorAppear) == 0x0000A6, "Member 'FShuffleCardInfo::IsStartMajorAppear' has a wrong offset!");
static_assert(offsetof(FShuffleCardInfo, RotationMajorAppear) == 0x0000A8, "Member 'FShuffleCardInfo::RotationMajorAppear' has a wrong offset!");

// ScriptStruct xrd777.ShadowFieldData
// 0x0040 (0x0048 - 0x0008)
struct FShadowFieldData final : public FTableRowBase
{
public:
	int32                                         MajorId;                                           // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorId;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartsId;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShadowSettingCategory                        DataCategory;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FShadowSettingData>             ActorList;                                         // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FShadowSettingData>             ChildComponentList;                                // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShadowFieldData) == 0x000008, "Wrong alignment on FShadowFieldData");
static_assert(sizeof(FShadowFieldData) == 0x000048, "Wrong size on FShadowFieldData");
static_assert(offsetof(FShadowFieldData, MajorId) == 0x000008, "Member 'FShadowFieldData::MajorId' has a wrong offset!");
static_assert(offsetof(FShadowFieldData, MinorId) == 0x00000C, "Member 'FShadowFieldData::MinorId' has a wrong offset!");
static_assert(offsetof(FShadowFieldData, PartsId) == 0x000010, "Member 'FShadowFieldData::PartsId' has a wrong offset!");
static_assert(offsetof(FShadowFieldData, DataCategory) == 0x000020, "Member 'FShadowFieldData::DataCategory' has a wrong offset!");
static_assert(offsetof(FShadowFieldData, ActorList) == 0x000028, "Member 'FShadowFieldData::ActorList' has a wrong offset!");
static_assert(offsetof(FShadowFieldData, ChildComponentList) == 0x000038, "Member 'FShadowFieldData::ChildComponentList' has a wrong offset!");

// ScriptStruct xrd777.CommunityCallEventData
// 0x001C (0x001C - 0x0000)
struct FCommunityCallEventData final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Major;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag0;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag1;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag2;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag3;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityCallEventData) == 0x000004, "Wrong alignment on FCommunityCallEventData");
static_assert(sizeof(FCommunityCallEventData) == 0x00001C, "Wrong size on FCommunityCallEventData");
static_assert(offsetof(FCommunityCallEventData, Rank) == 0x000000, "Member 'FCommunityCallEventData::Rank' has a wrong offset!");
static_assert(offsetof(FCommunityCallEventData, Major) == 0x000004, "Member 'FCommunityCallEventData::Major' has a wrong offset!");
static_assert(offsetof(FCommunityCallEventData, Minor) == 0x000008, "Member 'FCommunityCallEventData::Minor' has a wrong offset!");
static_assert(offsetof(FCommunityCallEventData, Flag0) == 0x00000C, "Member 'FCommunityCallEventData::Flag0' has a wrong offset!");
static_assert(offsetof(FCommunityCallEventData, Flag1) == 0x000010, "Member 'FCommunityCallEventData::Flag1' has a wrong offset!");
static_assert(offsetof(FCommunityCallEventData, Flag2) == 0x000014, "Member 'FCommunityCallEventData::Flag2' has a wrong offset!");
static_assert(offsetof(FCommunityCallEventData, Flag3) == 0x000018, "Member 'FCommunityCallEventData::Flag3' has a wrong offset!");

// ScriptStruct xrd777.BtlSkillEnvParam
// 0x0018 (0x0020 - 0x0008)
struct FBtlSkillEnvParam final : public FTableRowBase
{
public:
	float                                         FadeTime;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogPower;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDistance;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogGradationRange;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightIntensityRatio;                               // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BGBlackRatio;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlSkillEnvParam) == 0x000008, "Wrong alignment on FBtlSkillEnvParam");
static_assert(sizeof(FBtlSkillEnvParam) == 0x000020, "Wrong size on FBtlSkillEnvParam");
static_assert(offsetof(FBtlSkillEnvParam, FadeTime) == 0x000008, "Member 'FBtlSkillEnvParam::FadeTime' has a wrong offset!");
static_assert(offsetof(FBtlSkillEnvParam, FogPower) == 0x00000C, "Member 'FBtlSkillEnvParam::FogPower' has a wrong offset!");
static_assert(offsetof(FBtlSkillEnvParam, FogDistance) == 0x000010, "Member 'FBtlSkillEnvParam::FogDistance' has a wrong offset!");
static_assert(offsetof(FBtlSkillEnvParam, FogGradationRange) == 0x000014, "Member 'FBtlSkillEnvParam::FogGradationRange' has a wrong offset!");
static_assert(offsetof(FBtlSkillEnvParam, LightIntensityRatio) == 0x000018, "Member 'FBtlSkillEnvParam::LightIntensityRatio' has a wrong offset!");
static_assert(offsetof(FBtlSkillEnvParam, BGBlackRatio) == 0x00001C, "Member 'FBtlSkillEnvParam::BGBlackRatio' has a wrong offset!");

// ScriptStruct xrd777.BtlSkillCameraEffectParam
// 0x0010 (0x0010 - 0x0000)
struct FBtlSkillCameraEffectParam final
{
public:
	class UNiagaraCameraAttachComponent*          CameraEffect;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlSkillCameraEffectParam) == 0x000008, "Wrong alignment on FBtlSkillCameraEffectParam");
static_assert(sizeof(FBtlSkillCameraEffectParam) == 0x000010, "Wrong size on FBtlSkillCameraEffectParam");
static_assert(offsetof(FBtlSkillCameraEffectParam, CameraEffect) == 0x000000, "Member 'FBtlSkillCameraEffectParam::CameraEffect' has a wrong offset!");
static_assert(offsetof(FBtlSkillCameraEffectParam, StartTime) == 0x000008, "Member 'FBtlSkillCameraEffectParam::StartTime' has a wrong offset!");

// ScriptStruct xrd777.BtlSkillParam
// 0x0038 (0x0038 - 0x0000)
struct FBtlSkillParam final
{
public:
	class UNiagaraSystem*                         VFX;                                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlSkillTargetType                           TargetType;                                        // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlSkillPositionTargetType                   PositionType;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlSkillPositionHeightType                   PositionHeight;                                    // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlSkillDirectionTargetType                  Direction;                                         // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntervalTime;                                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDamageEffect;                                    // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          SkillSE;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SEVolumeRatio;                                     // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SE_UseCameraRangeParam;                            // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SE_CameraRangeMaxCM;                               // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBtlSkillParam) == 0x000008, "Wrong alignment on FBtlSkillParam");
static_assert(sizeof(FBtlSkillParam) == 0x000038, "Wrong size on FBtlSkillParam");
static_assert(offsetof(FBtlSkillParam, VFX) == 0x000000, "Member 'FBtlSkillParam::VFX' has a wrong offset!");
static_assert(offsetof(FBtlSkillParam, TargetType) == 0x000008, "Member 'FBtlSkillParam::TargetType' has a wrong offset!");
static_assert(offsetof(FBtlSkillParam, PositionType) == 0x000009, "Member 'FBtlSkillParam::PositionType' has a wrong offset!");
static_assert(offsetof(FBtlSkillParam, PositionHeight) == 0x00000A, "Member 'FBtlSkillParam::PositionHeight' has a wrong offset!");
static_assert(offsetof(FBtlSkillParam, Direction) == 0x00000B, "Member 'FBtlSkillParam::Direction' has a wrong offset!");
static_assert(offsetof(FBtlSkillParam, Scale) == 0x00000C, "Member 'FBtlSkillParam::Scale' has a wrong offset!");
static_assert(offsetof(FBtlSkillParam, StartTime) == 0x000010, "Member 'FBtlSkillParam::StartTime' has a wrong offset!");
static_assert(offsetof(FBtlSkillParam, IntervalTime) == 0x000014, "Member 'FBtlSkillParam::IntervalTime' has a wrong offset!");
static_assert(offsetof(FBtlSkillParam, IsDamageEffect) == 0x000018, "Member 'FBtlSkillParam::IsDamageEffect' has a wrong offset!");
static_assert(offsetof(FBtlSkillParam, SkillSE) == 0x000020, "Member 'FBtlSkillParam::SkillSE' has a wrong offset!");
static_assert(offsetof(FBtlSkillParam, SEVolumeRatio) == 0x000028, "Member 'FBtlSkillParam::SEVolumeRatio' has a wrong offset!");
static_assert(offsetof(FBtlSkillParam, SE_UseCameraRangeParam) == 0x00002C, "Member 'FBtlSkillParam::SE_UseCameraRangeParam' has a wrong offset!");
static_assert(offsetof(FBtlSkillParam, SE_CameraRangeMaxCM) == 0x000030, "Member 'FBtlSkillParam::SE_CameraRangeMaxCM' has a wrong offset!");

// ScriptStruct xrd777.DatUnitDropItem
// 0x0008 (0x0008 - 0x0000)
struct FDatUnitDropItem final
{
public:
	uint32                                        ID;                                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Eventitem;                                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatUnitDropItem) == 0x000004, "Wrong alignment on FDatUnitDropItem");
static_assert(sizeof(FDatUnitDropItem) == 0x000008, "Wrong size on FDatUnitDropItem");
static_assert(offsetof(FDatUnitDropItem, ID) == 0x000000, "Member 'FDatUnitDropItem::ID' has a wrong offset!");
static_assert(offsetof(FDatUnitDropItem, Eventitem) == 0x000004, "Member 'FDatUnitDropItem::Eventitem' has a wrong offset!");

// ScriptStruct xrd777.BtlCutinBackGround
// 0x0028 (0x0030 - 0x0008)
struct FBtlCutinBackGround final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMaterialInstance>       BackGround;                                        // 0x0008(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBtlCutinBackGround) == 0x000008, "Wrong alignment on FBtlCutinBackGround");
static_assert(sizeof(FBtlCutinBackGround) == 0x000030, "Wrong size on FBtlCutinBackGround");
static_assert(offsetof(FBtlCutinBackGround, BackGround) == 0x000008, "Member 'FBtlCutinBackGround::BackGround' has a wrong offset!");

// ScriptStruct xrd777.DatBtlMixraidReleaseRecord
// 0x000C (0x000C - 0x0000)
struct FDatBtlMixraidReleaseRecord final
{
public:
	uint16                                        PersonaAID;                                        // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PersonaBID;                                        // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatBtlMixraidReleaseRecord) == 0x000004, "Wrong alignment on FDatBtlMixraidReleaseRecord");
static_assert(sizeof(FDatBtlMixraidReleaseRecord) == 0x00000C, "Wrong size on FDatBtlMixraidReleaseRecord");
static_assert(offsetof(FDatBtlMixraidReleaseRecord, PersonaAID) == 0x000000, "Member 'FDatBtlMixraidReleaseRecord::PersonaAID' has a wrong offset!");
static_assert(offsetof(FDatBtlMixraidReleaseRecord, PersonaBID) == 0x000002, "Member 'FDatBtlMixraidReleaseRecord::PersonaBID' has a wrong offset!");
static_assert(offsetof(FDatBtlMixraidReleaseRecord, Flag) == 0x000004, "Member 'FDatBtlMixraidReleaseRecord::Flag' has a wrong offset!");
static_assert(offsetof(FDatBtlMixraidReleaseRecord, Skill) == 0x000008, "Member 'FDatBtlMixraidReleaseRecord::Skill' has a wrong offset!");

// ScriptStruct xrd777.DatBtlMixraidReleaseDataTable
// 0x0010 (0x0018 - 0x0008)
struct FDatBtlMixraidReleaseDataTable final : public FTableRowBase
{
public:
	uint16                                        PersonaAID;                                        // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PersonaBID;                                        // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill;                                             // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatBtlMixraidReleaseDataTable) == 0x000008, "Wrong alignment on FDatBtlMixraidReleaseDataTable");
static_assert(sizeof(FDatBtlMixraidReleaseDataTable) == 0x000018, "Wrong size on FDatBtlMixraidReleaseDataTable");
static_assert(offsetof(FDatBtlMixraidReleaseDataTable, PersonaAID) == 0x000008, "Member 'FDatBtlMixraidReleaseDataTable::PersonaAID' has a wrong offset!");
static_assert(offsetof(FDatBtlMixraidReleaseDataTable, PersonaBID) == 0x00000A, "Member 'FDatBtlMixraidReleaseDataTable::PersonaBID' has a wrong offset!");
static_assert(offsetof(FDatBtlMixraidReleaseDataTable, Flag) == 0x00000C, "Member 'FDatBtlMixraidReleaseDataTable::Flag' has a wrong offset!");
static_assert(offsetof(FDatBtlMixraidReleaseDataTable, Skill) == 0x000010, "Member 'FDatBtlMixraidReleaseDataTable::Skill' has a wrong offset!");

// ScriptStruct xrd777.DatBtlTheurgiaBoostRecord
// 0x0010 (0x0010 - 0x0000)
struct FDatBtlTheurgiaBoostRecord final
{
public:
	TArray<int16>                                 Value;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatBtlTheurgiaBoostRecord) == 0x000008, "Wrong alignment on FDatBtlTheurgiaBoostRecord");
static_assert(sizeof(FDatBtlTheurgiaBoostRecord) == 0x000010, "Wrong size on FDatBtlTheurgiaBoostRecord");
static_assert(offsetof(FDatBtlTheurgiaBoostRecord, Value) == 0x000000, "Member 'FDatBtlTheurgiaBoostRecord::Value' has a wrong offset!");

// ScriptStruct xrd777.DatBtlTheurgiaBoostDataTable
// 0x0010 (0x0018 - 0x0008)
struct FDatBtlTheurgiaBoostDataTable final : public FTableRowBase
{
public:
	TArray<int16>                                 Value;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatBtlTheurgiaBoostDataTable) == 0x000008, "Wrong alignment on FDatBtlTheurgiaBoostDataTable");
static_assert(sizeof(FDatBtlTheurgiaBoostDataTable) == 0x000018, "Wrong size on FDatBtlTheurgiaBoostDataTable");
static_assert(offsetof(FDatBtlTheurgiaBoostDataTable, Value) == 0x000008, "Member 'FDatBtlTheurgiaBoostDataTable::Value' has a wrong offset!");

// ScriptStruct xrd777.FldLmapData_QUEST
// 0x0028 (0x0028 - 0x0000)
struct FFldLmapData_QUEST final
{
public:
	EFldLmapData_QuestType                        MType;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MFlagName;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MDispName;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldLmapData_QUEST) == 0x000008, "Wrong alignment on FFldLmapData_QUEST");
static_assert(sizeof(FFldLmapData_QUEST) == 0x000028, "Wrong size on FFldLmapData_QUEST");
static_assert(offsetof(FFldLmapData_QUEST, MType) == 0x000000, "Member 'FFldLmapData_QUEST::MType' has a wrong offset!");
static_assert(offsetof(FFldLmapData_QUEST, MFlagName) == 0x000008, "Member 'FFldLmapData_QUEST::MFlagName' has a wrong offset!");
static_assert(offsetof(FFldLmapData_QUEST, MDispName) == 0x000018, "Member 'FFldLmapData_QUEST::MDispName' has a wrong offset!");

// ScriptStruct xrd777.DatItemBag
// 0x1D78 (0x1D78 - 0x0000)
struct alignas(0x04) FDatItemBag final
{
public:
	uint8                                         Pad_0[0x1D78];                                     // 0x0000(0x1D78)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatItemBag) == 0x000004, "Wrong alignment on FDatItemBag");
static_assert(sizeof(FDatItemBag) == 0x001D78, "Wrong size on FDatItemBag");

// ScriptStruct xrd777.DatEncountEnemyBadPercentRecord
// 0x0005 (0x0005 - 0x0000)
struct FDatEncountEnemyBadPercentRecord final
{
public:
	uint8                                         Num1;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Num2;                                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Num3;                                              // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Num4;                                              // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NumOver5;                                          // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatEncountEnemyBadPercentRecord) == 0x000001, "Wrong alignment on FDatEncountEnemyBadPercentRecord");
static_assert(sizeof(FDatEncountEnemyBadPercentRecord) == 0x000005, "Wrong size on FDatEncountEnemyBadPercentRecord");
static_assert(offsetof(FDatEncountEnemyBadPercentRecord, Num1) == 0x000000, "Member 'FDatEncountEnemyBadPercentRecord::Num1' has a wrong offset!");
static_assert(offsetof(FDatEncountEnemyBadPercentRecord, Num2) == 0x000001, "Member 'FDatEncountEnemyBadPercentRecord::Num2' has a wrong offset!");
static_assert(offsetof(FDatEncountEnemyBadPercentRecord, Num3) == 0x000002, "Member 'FDatEncountEnemyBadPercentRecord::Num3' has a wrong offset!");
static_assert(offsetof(FDatEncountEnemyBadPercentRecord, Num4) == 0x000003, "Member 'FDatEncountEnemyBadPercentRecord::Num4' has a wrong offset!");
static_assert(offsetof(FDatEncountEnemyBadPercentRecord, NumOver5) == 0x000004, "Member 'FDatEncountEnemyBadPercentRecord::NumOver5' has a wrong offset!");

// ScriptStruct xrd777.DatEncountEnemyBadPercentDataTable
// 0x0008 (0x0010 - 0x0008)
struct FDatEncountEnemyBadPercentDataTable final : public FTableRowBase
{
public:
	uint8                                         Num1;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Num2;                                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Num3;                                              // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Num4;                                              // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NumOver5;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatEncountEnemyBadPercentDataTable) == 0x000008, "Wrong alignment on FDatEncountEnemyBadPercentDataTable");
static_assert(sizeof(FDatEncountEnemyBadPercentDataTable) == 0x000010, "Wrong size on FDatEncountEnemyBadPercentDataTable");
static_assert(offsetof(FDatEncountEnemyBadPercentDataTable, Num1) == 0x000008, "Member 'FDatEncountEnemyBadPercentDataTable::Num1' has a wrong offset!");
static_assert(offsetof(FDatEncountEnemyBadPercentDataTable, Num2) == 0x000009, "Member 'FDatEncountEnemyBadPercentDataTable::Num2' has a wrong offset!");
static_assert(offsetof(FDatEncountEnemyBadPercentDataTable, Num3) == 0x00000A, "Member 'FDatEncountEnemyBadPercentDataTable::Num3' has a wrong offset!");
static_assert(offsetof(FDatEncountEnemyBadPercentDataTable, Num4) == 0x00000B, "Member 'FDatEncountEnemyBadPercentDataTable::Num4' has a wrong offset!");
static_assert(offsetof(FDatEncountEnemyBadPercentDataTable, NumOver5) == 0x00000C, "Member 'FDatEncountEnemyBadPercentDataTable::NumOver5' has a wrong offset!");

// ScriptStruct xrd777.DatCalcPANICUseItemRecord
// 0x0002 (0x0002 - 0x0000)
struct FDatCalcPANICUseItemRecord final
{
public:
	uint16                                        ItemId;                                            // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatCalcPANICUseItemRecord) == 0x000002, "Wrong alignment on FDatCalcPANICUseItemRecord");
static_assert(sizeof(FDatCalcPANICUseItemRecord) == 0x000002, "Wrong size on FDatCalcPANICUseItemRecord");
static_assert(offsetof(FDatCalcPANICUseItemRecord, ItemId) == 0x000000, "Member 'FDatCalcPANICUseItemRecord::ItemId' has a wrong offset!");

// ScriptStruct xrd777.DictionaryTableData
// 0x0030 (0x0030 - 0x0000)
struct FDictionaryTableData final
{
public:
	int32                                         DictionaryID;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenFlagID;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextureNames;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDictionaryTableData) == 0x000008, "Wrong alignment on FDictionaryTableData");
static_assert(sizeof(FDictionaryTableData) == 0x000030, "Wrong size on FDictionaryTableData");
static_assert(offsetof(FDictionaryTableData, DictionaryID) == 0x000000, "Member 'FDictionaryTableData::DictionaryID' has a wrong offset!");
static_assert(offsetof(FDictionaryTableData, SortID) == 0x000004, "Member 'FDictionaryTableData::SortID' has a wrong offset!");
static_assert(offsetof(FDictionaryTableData, OpenFlagID) == 0x000008, "Member 'FDictionaryTableData::OpenFlagID' has a wrong offset!");
static_assert(offsetof(FDictionaryTableData, Title) == 0x000010, "Member 'FDictionaryTableData::Title' has a wrong offset!");
static_assert(offsetof(FDictionaryTableData, TextureNames) == 0x000020, "Member 'FDictionaryTableData::TextureNames' has a wrong offset!");

// ScriptStruct xrd777.DatCalcPANICUseItemDataTable
// 0x0008 (0x0010 - 0x0008)
struct FDatCalcPANICUseItemDataTable final : public FTableRowBase
{
public:
	uint16                                        ItemId;                                            // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatCalcPANICUseItemDataTable) == 0x000008, "Wrong alignment on FDatCalcPANICUseItemDataTable");
static_assert(sizeof(FDatCalcPANICUseItemDataTable) == 0x000010, "Wrong size on FDatCalcPANICUseItemDataTable");
static_assert(offsetof(FDatCalcPANICUseItemDataTable, ItemId) == 0x000008, "Member 'FDatCalcPANICUseItemDataTable::ItemId' has a wrong offset!");

// ScriptStruct xrd777.FldSequenceDeleteParam
// 0x0030 (0x0030 - 0x0000)
struct FFldSequenceDeleteParam final
{
public:
	uint32                                        MFlag;                                             // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MNextSequence;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         MLoadSubLevelList;                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         MHideSubLevelList;                                 // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MNextMajor;                                        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MNextMinor;                                        // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldSequenceDeleteParam) == 0x000008, "Wrong alignment on FFldSequenceDeleteParam");
static_assert(sizeof(FFldSequenceDeleteParam) == 0x000030, "Wrong size on FFldSequenceDeleteParam");
static_assert(offsetof(FFldSequenceDeleteParam, MFlag) == 0x000000, "Member 'FFldSequenceDeleteParam::MFlag' has a wrong offset!");
static_assert(offsetof(FFldSequenceDeleteParam, MNextSequence) == 0x000004, "Member 'FFldSequenceDeleteParam::MNextSequence' has a wrong offset!");
static_assert(offsetof(FFldSequenceDeleteParam, MLoadSubLevelList) == 0x000008, "Member 'FFldSequenceDeleteParam::MLoadSubLevelList' has a wrong offset!");
static_assert(offsetof(FFldSequenceDeleteParam, MHideSubLevelList) == 0x000018, "Member 'FFldSequenceDeleteParam::MHideSubLevelList' has a wrong offset!");
static_assert(offsetof(FFldSequenceDeleteParam, MNextMajor) == 0x000028, "Member 'FFldSequenceDeleteParam::MNextMajor' has a wrong offset!");
static_assert(offsetof(FFldSequenceDeleteParam, MNextMinor) == 0x00002C, "Member 'FFldSequenceDeleteParam::MNextMinor' has a wrong offset!");

// ScriptStruct xrd777.HeroParameterNameRow
// 0x0048 (0x0050 - 0x0008)
struct FHeroParameterNameRow final : public FTableRowBase
{
public:
	class FText                                   Brain;                                             // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Charm;                                             // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Courage;                                           // 0x0038(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroParameterNameRow) == 0x000008, "Wrong alignment on FHeroParameterNameRow");
static_assert(sizeof(FHeroParameterNameRow) == 0x000050, "Wrong size on FHeroParameterNameRow");
static_assert(offsetof(FHeroParameterNameRow, Brain) == 0x000008, "Member 'FHeroParameterNameRow::Brain' has a wrong offset!");
static_assert(offsetof(FHeroParameterNameRow, Charm) == 0x000020, "Member 'FHeroParameterNameRow::Charm' has a wrong offset!");
static_assert(offsetof(FHeroParameterNameRow, Courage) == 0x000038, "Member 'FHeroParameterNameRow::Courage' has a wrong offset!");

// ScriptStruct xrd777.DatEnemyItemTable
// 0x0004 (0x0004 - 0x0000)
struct FDatEnemyItemTable final
{
public:
	uint16                                        ID;                                                // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Prob;                                              // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatEnemyItemTable) == 0x000002, "Wrong alignment on FDatEnemyItemTable");
static_assert(sizeof(FDatEnemyItemTable) == 0x000004, "Wrong size on FDatEnemyItemTable");
static_assert(offsetof(FDatEnemyItemTable, ID) == 0x000000, "Member 'FDatEnemyItemTable::ID' has a wrong offset!");
static_assert(offsetof(FDatEnemyItemTable, Prob) == 0x000002, "Member 'FDatEnemyItemTable::Prob' has a wrong offset!");

// ScriptStruct xrd777.DatCalcPANICDropItemRecord
// 0x0014 (0x0014 - 0x0000)
struct FDatCalcPANICDropItemRecord final
{
public:
	struct FDatEnemyItemTable                     Item[0x5];                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatCalcPANICDropItemRecord) == 0x000002, "Wrong alignment on FDatCalcPANICDropItemRecord");
static_assert(sizeof(FDatCalcPANICDropItemRecord) == 0x000014, "Wrong size on FDatCalcPANICDropItemRecord");
static_assert(offsetof(FDatCalcPANICDropItemRecord, Item) == 0x000000, "Member 'FDatCalcPANICDropItemRecord::Item' has a wrong offset!");

// ScriptStruct xrd777.DatCalcPANICDropItemDataTable
// 0x0018 (0x0020 - 0x0008)
struct FDatCalcPANICDropItemDataTable final : public FTableRowBase
{
public:
	struct FDatEnemyItemTable                     Item0;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatEnemyItemTable                     Item1;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatEnemyItemTable                     Item2;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatEnemyItemTable                     Item3;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatEnemyItemTable                     Item4;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatCalcPANICDropItemDataTable) == 0x000008, "Wrong alignment on FDatCalcPANICDropItemDataTable");
static_assert(sizeof(FDatCalcPANICDropItemDataTable) == 0x000020, "Wrong size on FDatCalcPANICDropItemDataTable");
static_assert(offsetof(FDatCalcPANICDropItemDataTable, Item0) == 0x000008, "Member 'FDatCalcPANICDropItemDataTable::Item0' has a wrong offset!");
static_assert(offsetof(FDatCalcPANICDropItemDataTable, Item1) == 0x00000C, "Member 'FDatCalcPANICDropItemDataTable::Item1' has a wrong offset!");
static_assert(offsetof(FDatCalcPANICDropItemDataTable, Item2) == 0x000010, "Member 'FDatCalcPANICDropItemDataTable::Item2' has a wrong offset!");
static_assert(offsetof(FDatCalcPANICDropItemDataTable, Item3) == 0x000014, "Member 'FDatCalcPANICDropItemDataTable::Item3' has a wrong offset!");
static_assert(offsetof(FDatCalcPANICDropItemDataTable, Item4) == 0x000018, "Member 'FDatCalcPANICDropItemDataTable::Item4' has a wrong offset!");

// ScriptStruct xrd777.CldDateMessageTableItem
// 0x0028 (0x0028 - 0x0000)
struct FCldDateMessageTableItem final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Month;                                             // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Day;                                               // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Period;                                            // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MsgLabel;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VisibleFlag;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCldDateMessageTableItem) == 0x000008, "Wrong alignment on FCldDateMessageTableItem");
static_assert(sizeof(FCldDateMessageTableItem) == 0x000028, "Wrong size on FCldDateMessageTableItem");
static_assert(offsetof(FCldDateMessageTableItem, Key) == 0x000000, "Member 'FCldDateMessageTableItem::Key' has a wrong offset!");
static_assert(offsetof(FCldDateMessageTableItem, Month) == 0x000004, "Member 'FCldDateMessageTableItem::Month' has a wrong offset!");
static_assert(offsetof(FCldDateMessageTableItem, Day) == 0x000005, "Member 'FCldDateMessageTableItem::Day' has a wrong offset!");
static_assert(offsetof(FCldDateMessageTableItem, Period) == 0x000006, "Member 'FCldDateMessageTableItem::Period' has a wrong offset!");
static_assert(offsetof(FCldDateMessageTableItem, MsgLabel) == 0x000008, "Member 'FCldDateMessageTableItem::MsgLabel' has a wrong offset!");
static_assert(offsetof(FCldDateMessageTableItem, VisibleFlag) == 0x000018, "Member 'FCldDateMessageTableItem::VisibleFlag' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleCommonRationDataTable
// 0x0008 (0x0010 - 0x0008)
struct FDatShuffleCommonRationDataTable final : public FTableRowBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatShuffleCommonRationDataTable) == 0x000008, "Wrong alignment on FDatShuffleCommonRationDataTable");
static_assert(sizeof(FDatShuffleCommonRationDataTable) == 0x000010, "Wrong size on FDatShuffleCommonRationDataTable");
static_assert(offsetof(FDatShuffleCommonRationDataTable, Value) == 0x000008, "Member 'FDatShuffleCommonRationDataTable::Value' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleAppearRationDataTable
// 0x0008 (0x0010 - 0x0008)
struct FDatShuffleAppearRationDataTable final : public FTableRowBase
{
public:
	int32                                         Prob;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatShuffleAppearRationDataTable) == 0x000008, "Wrong alignment on FDatShuffleAppearRationDataTable");
static_assert(sizeof(FDatShuffleAppearRationDataTable) == 0x000010, "Wrong size on FDatShuffleAppearRationDataTable");
static_assert(offsetof(FDatShuffleAppearRationDataTable, Prob) == 0x000008, "Member 'FDatShuffleAppearRationDataTable::Prob' has a wrong offset!");

// ScriptStruct xrd777.DatBtlCommonName
// 0x0018 (0x0018 - 0x0000)
struct FDatBtlCommonName final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatBtlCommonName) == 0x000008, "Wrong alignment on FDatBtlCommonName");
static_assert(sizeof(FDatBtlCommonName) == 0x000018, "Wrong size on FDatBtlCommonName");
static_assert(offsetof(FDatBtlCommonName, Name) == 0x000000, "Member 'FDatBtlCommonName::Name' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleCommonItemdropArcanaRecord
// 0x0008 (0x0008 - 0x0000)
struct FDatShuffleCommonItemdropArcanaRecord final
{
public:
	uint8                                         RankID;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Num;                                               // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Prob;                                              // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ItemtID;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleCommonItemdropArcanaRecord) == 0x000004, "Wrong alignment on FDatShuffleCommonItemdropArcanaRecord");
static_assert(sizeof(FDatShuffleCommonItemdropArcanaRecord) == 0x000008, "Wrong size on FDatShuffleCommonItemdropArcanaRecord");
static_assert(offsetof(FDatShuffleCommonItemdropArcanaRecord, RankID) == 0x000000, "Member 'FDatShuffleCommonItemdropArcanaRecord::RankID' has a wrong offset!");
static_assert(offsetof(FDatShuffleCommonItemdropArcanaRecord, Num) == 0x000001, "Member 'FDatShuffleCommonItemdropArcanaRecord::Num' has a wrong offset!");
static_assert(offsetof(FDatShuffleCommonItemdropArcanaRecord, Prob) == 0x000002, "Member 'FDatShuffleCommonItemdropArcanaRecord::Prob' has a wrong offset!");
static_assert(offsetof(FDatShuffleCommonItemdropArcanaRecord, ItemtID) == 0x000004, "Member 'FDatShuffleCommonItemdropArcanaRecord::ItemtID' has a wrong offset!");

// ScriptStruct xrd777.ItemListItem
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x04) FItemListItem final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemListItem) == 0x000004, "Wrong alignment on FItemListItem");
static_assert(sizeof(FItemListItem) == 0x000010, "Wrong size on FItemListItem");

// ScriptStruct xrd777.DatShuffleCommonItemdropArcanaDataTable
// 0x0008 (0x0010 - 0x0008)
struct FDatShuffleCommonItemdropArcanaDataTable final : public FTableRowBase
{
public:
	uint8                                         RankID;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Num;                                               // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Prob;                                              // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ItemtID;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleCommonItemdropArcanaDataTable) == 0x000008, "Wrong alignment on FDatShuffleCommonItemdropArcanaDataTable");
static_assert(sizeof(FDatShuffleCommonItemdropArcanaDataTable) == 0x000010, "Wrong size on FDatShuffleCommonItemdropArcanaDataTable");
static_assert(offsetof(FDatShuffleCommonItemdropArcanaDataTable, RankID) == 0x000008, "Member 'FDatShuffleCommonItemdropArcanaDataTable::RankID' has a wrong offset!");
static_assert(offsetof(FDatShuffleCommonItemdropArcanaDataTable, Num) == 0x000009, "Member 'FDatShuffleCommonItemdropArcanaDataTable::Num' has a wrong offset!");
static_assert(offsetof(FDatShuffleCommonItemdropArcanaDataTable, Prob) == 0x00000A, "Member 'FDatShuffleCommonItemdropArcanaDataTable::Prob' has a wrong offset!");
static_assert(offsetof(FDatShuffleCommonItemdropArcanaDataTable, ItemtID) == 0x00000C, "Member 'FDatShuffleCommonItemdropArcanaDataTable::ItemtID' has a wrong offset!");

// ScriptStruct xrd777.HeroParameterHandleSaveData_t
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FHeroParameterHandleSaveData_t final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroParameterHandleSaveData_t) == 0x000004, "Wrong alignment on FHeroParameterHandleSaveData_t");
static_assert(sizeof(FHeroParameterHandleSaveData_t) == 0x000018, "Wrong size on FHeroParameterHandleSaveData_t");

// ScriptStruct xrd777.DatShuffleCommonCoefficientArcanaRecord
// 0x0004 (0x0004 - 0x0000)
struct FDatShuffleCommonCoefficientArcanaRecord final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleCommonCoefficientArcanaRecord) == 0x000004, "Wrong alignment on FDatShuffleCommonCoefficientArcanaRecord");
static_assert(sizeof(FDatShuffleCommonCoefficientArcanaRecord) == 0x000004, "Wrong size on FDatShuffleCommonCoefficientArcanaRecord");
static_assert(offsetof(FDatShuffleCommonCoefficientArcanaRecord, Value) == 0x000000, "Member 'FDatShuffleCommonCoefficientArcanaRecord::Value' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleCommonCoefficientArcanaDataTable
// 0x0008 (0x0010 - 0x0008)
struct FDatShuffleCommonCoefficientArcanaDataTable final : public FTableRowBase
{
public:
	float                                         Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatShuffleCommonCoefficientArcanaDataTable) == 0x000008, "Wrong alignment on FDatShuffleCommonCoefficientArcanaDataTable");
static_assert(sizeof(FDatShuffleCommonCoefficientArcanaDataTable) == 0x000010, "Wrong size on FDatShuffleCommonCoefficientArcanaDataTable");
static_assert(offsetof(FDatShuffleCommonCoefficientArcanaDataTable, Value) == 0x000008, "Member 'FDatShuffleCommonCoefficientArcanaDataTable::Value' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleArcanaNameRecord
// 0x0018 (0x0018 - 0x0000)
struct FDatShuffleArcanaNameRecord final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleArcanaNameRecord) == 0x000008, "Wrong alignment on FDatShuffleArcanaNameRecord");
static_assert(sizeof(FDatShuffleArcanaNameRecord) == 0x000018, "Wrong size on FDatShuffleArcanaNameRecord");
static_assert(offsetof(FDatShuffleArcanaNameRecord, Name) == 0x000000, "Member 'FDatShuffleArcanaNameRecord::Name' has a wrong offset!");

// ScriptStruct xrd777.SummerFestivalEventRow
// 0x0018 (0x0020 - 0x0008)
struct FSummerFestivalEventRow final : public FTableRowBase
{
public:
	int32                                         MailID;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Major;                                             // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Minor;                                             // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OnFlag;                                            // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OffFlag;                                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSummerFestivalEventRow) == 0x000008, "Wrong alignment on FSummerFestivalEventRow");
static_assert(sizeof(FSummerFestivalEventRow) == 0x000020, "Wrong size on FSummerFestivalEventRow");
static_assert(offsetof(FSummerFestivalEventRow, MailID) == 0x000008, "Member 'FSummerFestivalEventRow::MailID' has a wrong offset!");
static_assert(offsetof(FSummerFestivalEventRow, Major) == 0x00000C, "Member 'FSummerFestivalEventRow::Major' has a wrong offset!");
static_assert(offsetof(FSummerFestivalEventRow, Minor) == 0x00000E, "Member 'FSummerFestivalEventRow::Minor' has a wrong offset!");
static_assert(offsetof(FSummerFestivalEventRow, OnFlag) == 0x000010, "Member 'FSummerFestivalEventRow::OnFlag' has a wrong offset!");
static_assert(offsetof(FSummerFestivalEventRow, OffFlag) == 0x000018, "Member 'FSummerFestivalEventRow::OffFlag' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleArcanaNameDataTable
// 0x0030 (0x0038 - 0x0008)
struct FDatShuffleArcanaNameDataTable final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleArcanaNameDataTable) == 0x000008, "Wrong alignment on FDatShuffleArcanaNameDataTable");
static_assert(sizeof(FDatShuffleArcanaNameDataTable) == 0x000038, "Wrong size on FDatShuffleArcanaNameDataTable");
static_assert(offsetof(FDatShuffleArcanaNameDataTable, Name) == 0x000008, "Member 'FDatShuffleArcanaNameDataTable::Name' has a wrong offset!");
static_assert(offsetof(FDatShuffleArcanaNameDataTable, Comment) == 0x000020, "Member 'FDatShuffleArcanaNameDataTable::Comment' has a wrong offset!");

// ScriptStruct xrd777.DatObjectVisibleDataTable
// 0x0080 (0x0088 - 0x0008)
struct FDatObjectVisibleDataTable final : public FTableRowBase
{
public:
	uint32                                        Major;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Minor;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ObjectID;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Visible;                                           // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FlagCond1;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlagValue1;                                        // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FlagCond2;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlagValue2;                                        // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FlagCond3;                                         // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlagValue3;                                        // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TimeZone;                                          // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FlagDoW;                                           // 0x0070(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlagDoWValue;                                      // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartMonth;                                        // 0x0081(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartDay;                                          // 0x0082(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndMonth;                                          // 0x0083(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndDay;                                            // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatObjectVisibleDataTable) == 0x000008, "Wrong alignment on FDatObjectVisibleDataTable");
static_assert(sizeof(FDatObjectVisibleDataTable) == 0x000088, "Wrong size on FDatObjectVisibleDataTable");
static_assert(offsetof(FDatObjectVisibleDataTable, Major) == 0x000008, "Member 'FDatObjectVisibleDataTable::Major' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, Minor) == 0x00000C, "Member 'FDatObjectVisibleDataTable::Minor' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, ObjectID) == 0x000010, "Member 'FDatObjectVisibleDataTable::ObjectID' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, Visible) == 0x000014, "Member 'FDatObjectVisibleDataTable::Visible' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, FlagCond1) == 0x000018, "Member 'FDatObjectVisibleDataTable::FlagCond1' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, FlagValue1) == 0x000028, "Member 'FDatObjectVisibleDataTable::FlagValue1' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, FlagCond2) == 0x000030, "Member 'FDatObjectVisibleDataTable::FlagCond2' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, FlagValue2) == 0x000040, "Member 'FDatObjectVisibleDataTable::FlagValue2' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, FlagCond3) == 0x000048, "Member 'FDatObjectVisibleDataTable::FlagCond3' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, FlagValue3) == 0x000058, "Member 'FDatObjectVisibleDataTable::FlagValue3' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, TimeZone) == 0x000060, "Member 'FDatObjectVisibleDataTable::TimeZone' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, FlagDoW) == 0x000070, "Member 'FDatObjectVisibleDataTable::FlagDoW' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, FlagDoWValue) == 0x000080, "Member 'FDatObjectVisibleDataTable::FlagDoWValue' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, StartMonth) == 0x000081, "Member 'FDatObjectVisibleDataTable::StartMonth' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, StartDay) == 0x000082, "Member 'FDatObjectVisibleDataTable::StartDay' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, EndMonth) == 0x000083, "Member 'FDatObjectVisibleDataTable::EndMonth' has a wrong offset!");
static_assert(offsetof(FDatObjectVisibleDataTable, EndDay) == 0x000084, "Member 'FDatObjectVisibleDataTable::EndDay' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleLoversArcanaRecord
// 0x0004 (0x0004 - 0x0000)
struct FDatShuffleLoversArcanaRecord final
{
public:
	uint16                                        CommuBonus;                                        // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        LoversBonus;                                       // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleLoversArcanaRecord) == 0x000002, "Wrong alignment on FDatShuffleLoversArcanaRecord");
static_assert(sizeof(FDatShuffleLoversArcanaRecord) == 0x000004, "Wrong size on FDatShuffleLoversArcanaRecord");
static_assert(offsetof(FDatShuffleLoversArcanaRecord, CommuBonus) == 0x000000, "Member 'FDatShuffleLoversArcanaRecord::CommuBonus' has a wrong offset!");
static_assert(offsetof(FDatShuffleLoversArcanaRecord, LoversBonus) == 0x000002, "Member 'FDatShuffleLoversArcanaRecord::LoversBonus' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleLoversArcanaDataTable
// 0x0008 (0x0010 - 0x0008)
struct FDatShuffleLoversArcanaDataTable final : public FTableRowBase
{
public:
	uint16                                        CommuBonus;                                        // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        LoversBonus;                                       // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatShuffleLoversArcanaDataTable) == 0x000008, "Wrong alignment on FDatShuffleLoversArcanaDataTable");
static_assert(sizeof(FDatShuffleLoversArcanaDataTable) == 0x000010, "Wrong size on FDatShuffleLoversArcanaDataTable");
static_assert(offsetof(FDatShuffleLoversArcanaDataTable, CommuBonus) == 0x000008, "Member 'FDatShuffleLoversArcanaDataTable::CommuBonus' has a wrong offset!");
static_assert(offsetof(FDatShuffleLoversArcanaDataTable, LoversBonus) == 0x00000A, "Member 'FDatShuffleLoversArcanaDataTable::LoversBonus' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleCupArcanaRecord
// 0x0008 (0x0008 - 0x0000)
struct FDatShuffleCupArcanaRecord final
{
public:
	uint8                                         RankID;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EffectID;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Prob;                                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleCupArcanaRecord) == 0x000004, "Wrong alignment on FDatShuffleCupArcanaRecord");
static_assert(sizeof(FDatShuffleCupArcanaRecord) == 0x000008, "Wrong size on FDatShuffleCupArcanaRecord");
static_assert(offsetof(FDatShuffleCupArcanaRecord, RankID) == 0x000000, "Member 'FDatShuffleCupArcanaRecord::RankID' has a wrong offset!");
static_assert(offsetof(FDatShuffleCupArcanaRecord, EffectID) == 0x000001, "Member 'FDatShuffleCupArcanaRecord::EffectID' has a wrong offset!");
static_assert(offsetof(FDatShuffleCupArcanaRecord, Prob) == 0x000004, "Member 'FDatShuffleCupArcanaRecord::Prob' has a wrong offset!");

// ScriptStruct xrd777.GeneralCoefficientRow
// 0x0010 (0x0018 - 0x0008)
struct FGeneralCoefficientRow final : public FTableRowBase
{
public:
	class FName                                   Flag;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coefficient;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGeneralCoefficientRow) == 0x000008, "Wrong alignment on FGeneralCoefficientRow");
static_assert(sizeof(FGeneralCoefficientRow) == 0x000018, "Wrong size on FGeneralCoefficientRow");
static_assert(offsetof(FGeneralCoefficientRow, Flag) == 0x000008, "Member 'FGeneralCoefficientRow::Flag' has a wrong offset!");
static_assert(offsetof(FGeneralCoefficientRow, Coefficient) == 0x000010, "Member 'FGeneralCoefficientRow::Coefficient' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleCupArcanaDataTable
// 0x0008 (0x0010 - 0x0008)
struct FDatShuffleCupArcanaDataTable final : public FTableRowBase
{
public:
	uint8                                         RankID;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EffectID;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Prob;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleCupArcanaDataTable) == 0x000008, "Wrong alignment on FDatShuffleCupArcanaDataTable");
static_assert(sizeof(FDatShuffleCupArcanaDataTable) == 0x000010, "Wrong size on FDatShuffleCupArcanaDataTable");
static_assert(offsetof(FDatShuffleCupArcanaDataTable, RankID) == 0x000008, "Member 'FDatShuffleCupArcanaDataTable::RankID' has a wrong offset!");
static_assert(offsetof(FDatShuffleCupArcanaDataTable, EffectID) == 0x000009, "Member 'FDatShuffleCupArcanaDataTable::EffectID' has a wrong offset!");
static_assert(offsetof(FDatShuffleCupArcanaDataTable, Prob) == 0x00000C, "Member 'FDatShuffleCupArcanaDataTable::Prob' has a wrong offset!");

// ScriptStruct xrd777.DatNameTable
// 0x0030 (0x0038 - 0x0008)
struct FDatNameTable final : public FTableRowBase
{
public:
	class FText                                   Name;                                              // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatNameTable) == 0x000008, "Wrong alignment on FDatNameTable");
static_assert(sizeof(FDatNameTable) == 0x000038, "Wrong size on FDatNameTable");
static_assert(offsetof(FDatNameTable, Name) == 0x000008, "Member 'FDatNameTable::Name' has a wrong offset!");
static_assert(offsetof(FDatNameTable, Comment) == 0x000020, "Member 'FDatNameTable::Comment' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleCoinArcanaRecord
// 0x0008 (0x0008 - 0x0000)
struct FDatShuffleCoinArcanaRecord final
{
public:
	uint32                                        Max;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Min;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleCoinArcanaRecord) == 0x000004, "Wrong alignment on FDatShuffleCoinArcanaRecord");
static_assert(sizeof(FDatShuffleCoinArcanaRecord) == 0x000008, "Wrong size on FDatShuffleCoinArcanaRecord");
static_assert(offsetof(FDatShuffleCoinArcanaRecord, Max) == 0x000000, "Member 'FDatShuffleCoinArcanaRecord::Max' has a wrong offset!");
static_assert(offsetof(FDatShuffleCoinArcanaRecord, Min) == 0x000004, "Member 'FDatShuffleCoinArcanaRecord::Min' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleCoinArcanaDataTable
// 0x0008 (0x0010 - 0x0008)
struct FDatShuffleCoinArcanaDataTable final : public FTableRowBase
{
public:
	uint32                                        Max;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Min;                                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleCoinArcanaDataTable) == 0x000008, "Wrong alignment on FDatShuffleCoinArcanaDataTable");
static_assert(sizeof(FDatShuffleCoinArcanaDataTable) == 0x000010, "Wrong size on FDatShuffleCoinArcanaDataTable");
static_assert(offsetof(FDatShuffleCoinArcanaDataTable, Max) == 0x000008, "Member 'FDatShuffleCoinArcanaDataTable::Max' has a wrong offset!");
static_assert(offsetof(FDatShuffleCoinArcanaDataTable, Min) == 0x00000C, "Member 'FDatShuffleCoinArcanaDataTable::Min' has a wrong offset!");

// ScriptStruct xrd777.DatShufflePersonaArcanaRecord
// 0x0003 (0x0003 - 0x0000)
struct FDatShufflePersonaArcanaRecord final
{
public:
	uint8                                         RankID;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PersonaID;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Prob;                                              // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShufflePersonaArcanaRecord) == 0x000001, "Wrong alignment on FDatShufflePersonaArcanaRecord");
static_assert(sizeof(FDatShufflePersonaArcanaRecord) == 0x000003, "Wrong size on FDatShufflePersonaArcanaRecord");
static_assert(offsetof(FDatShufflePersonaArcanaRecord, RankID) == 0x000000, "Member 'FDatShufflePersonaArcanaRecord::RankID' has a wrong offset!");
static_assert(offsetof(FDatShufflePersonaArcanaRecord, PersonaID) == 0x000001, "Member 'FDatShufflePersonaArcanaRecord::PersonaID' has a wrong offset!");
static_assert(offsetof(FDatShufflePersonaArcanaRecord, Prob) == 0x000002, "Member 'FDatShufflePersonaArcanaRecord::Prob' has a wrong offset!");

// ScriptStruct xrd777.FileNameListRecord
// 0x0028 (0x0030 - 0x0008)
struct FFileNameListRecord final : public FTableRowBase
{
public:
	class FString                                 Path;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chunk;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFileNameListRecord) == 0x000008, "Wrong alignment on FFileNameListRecord");
static_assert(sizeof(FFileNameListRecord) == 0x000030, "Wrong size on FFileNameListRecord");
static_assert(offsetof(FFileNameListRecord, Path) == 0x000008, "Member 'FFileNameListRecord::Path' has a wrong offset!");
static_assert(offsetof(FFileNameListRecord, Filename) == 0x000018, "Member 'FFileNameListRecord::Filename' has a wrong offset!");
static_assert(offsetof(FFileNameListRecord, Chunk) == 0x000028, "Member 'FFileNameListRecord::Chunk' has a wrong offset!");

// ScriptStruct xrd777.DatShufflePersonaArcanaDataTable
// 0x0008 (0x0010 - 0x0008)
struct FDatShufflePersonaArcanaDataTable final : public FTableRowBase
{
public:
	uint8                                         RankID;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PersonaID;                                         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Prob;                                              // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatShufflePersonaArcanaDataTable) == 0x000008, "Wrong alignment on FDatShufflePersonaArcanaDataTable");
static_assert(sizeof(FDatShufflePersonaArcanaDataTable) == 0x000010, "Wrong size on FDatShufflePersonaArcanaDataTable");
static_assert(offsetof(FDatShufflePersonaArcanaDataTable, RankID) == 0x000008, "Member 'FDatShufflePersonaArcanaDataTable::RankID' has a wrong offset!");
static_assert(offsetof(FDatShufflePersonaArcanaDataTable, PersonaID) == 0x000009, "Member 'FDatShufflePersonaArcanaDataTable::PersonaID' has a wrong offset!");
static_assert(offsetof(FDatShufflePersonaArcanaDataTable, Prob) == 0x00000A, "Member 'FDatShufflePersonaArcanaDataTable::Prob' has a wrong offset!");

// ScriptStruct xrd777.BaseCurveAnimation
// 0x0028 (0x0028 - 0x0000)
struct FBaseCurveAnimation
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAssetLoader*                           M_pAssetLoader;                                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveBase*                             M_pCurve;                                          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FBaseCurveAnimation) == 0x000008, "Wrong alignment on FBaseCurveAnimation");
static_assert(sizeof(FBaseCurveAnimation) == 0x000028, "Wrong size on FBaseCurveAnimation");
static_assert(offsetof(FBaseCurveAnimation, M_pAssetLoader) == 0x000018, "Member 'FBaseCurveAnimation::M_pAssetLoader' has a wrong offset!");
static_assert(offsetof(FBaseCurveAnimation, M_pCurve) == 0x000020, "Member 'FBaseCurveAnimation::M_pCurve' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleChoiceMajorArcanaRecord
// 0x0009 (0x0009 - 0x0000)
struct FDatShuffleChoiceMajorArcanaRecord final
{
public:
	uint8                                         ArcanaID;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RankInPhase[0x8];                                  // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleChoiceMajorArcanaRecord) == 0x000001, "Wrong alignment on FDatShuffleChoiceMajorArcanaRecord");
static_assert(sizeof(FDatShuffleChoiceMajorArcanaRecord) == 0x000009, "Wrong size on FDatShuffleChoiceMajorArcanaRecord");
static_assert(offsetof(FDatShuffleChoiceMajorArcanaRecord, ArcanaID) == 0x000000, "Member 'FDatShuffleChoiceMajorArcanaRecord::ArcanaID' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMajorArcanaRecord, RankInPhase) == 0x000001, "Member 'FDatShuffleChoiceMajorArcanaRecord::RankInPhase' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleChoiceMajorArcanaDataTable
// 0x0010 (0x0018 - 0x0008)
struct FDatShuffleChoiceMajorArcanaDataTable final : public FTableRowBase
{
public:
	uint8                                         ArcanaID;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RankInPhase[0x8];                                  // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatShuffleChoiceMajorArcanaDataTable) == 0x000008, "Wrong alignment on FDatShuffleChoiceMajorArcanaDataTable");
static_assert(sizeof(FDatShuffleChoiceMajorArcanaDataTable) == 0x000018, "Wrong size on FDatShuffleChoiceMajorArcanaDataTable");
static_assert(offsetof(FDatShuffleChoiceMajorArcanaDataTable, ArcanaID) == 0x000008, "Member 'FDatShuffleChoiceMajorArcanaDataTable::ArcanaID' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMajorArcanaDataTable, RankInPhase) == 0x000009, "Member 'FDatShuffleChoiceMajorArcanaDataTable::RankInPhase' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleMajorArcanaCard
// 0x0002 (0x0002 - 0x0000)
struct FDatShuffleMajorArcanaCard final
{
public:
	uint8                                         Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rank;                                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleMajorArcanaCard) == 0x000001, "Wrong alignment on FDatShuffleMajorArcanaCard");
static_assert(sizeof(FDatShuffleMajorArcanaCard) == 0x000002, "Wrong size on FDatShuffleMajorArcanaCard");
static_assert(offsetof(FDatShuffleMajorArcanaCard, Type) == 0x000000, "Member 'FDatShuffleMajorArcanaCard::Type' has a wrong offset!");
static_assert(offsetof(FDatShuffleMajorArcanaCard, Rank) == 0x000001, "Member 'FDatShuffleMajorArcanaCard::Rank' has a wrong offset!");

// ScriptStruct xrd777.FldCatMotionList
// 0x0010 (0x0010 - 0x0000)
struct FFldCatMotionList final
{
public:
	TArray<EFldAnimalMotion_CAT>                  MList;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldCatMotionList) == 0x000008, "Wrong alignment on FFldCatMotionList");
static_assert(sizeof(FFldCatMotionList) == 0x000010, "Wrong size on FFldCatMotionList");
static_assert(offsetof(FFldCatMotionList, MList) == 0x000000, "Member 'FFldCatMotionList::MList' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleChoiceMinorArcanaRecord
// 0x0040 (0x0040 - 0x0000)
struct FDatShuffleChoiceMinorArcanaRecord final
{
public:
	uint8                                         AreaId;                                            // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LowPersonaRankId;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HightPersonaRankId;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowWandRankId;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HightWandRankId;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowCoinRankId;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HightCoinRankId;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowCupRankId;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HightCupRankId;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowSwordRankId;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HightSwordRankId;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardNumProb[0x5];                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleChoiceMinorArcanaRecord) == 0x000004, "Wrong alignment on FDatShuffleChoiceMinorArcanaRecord");
static_assert(sizeof(FDatShuffleChoiceMinorArcanaRecord) == 0x000040, "Wrong size on FDatShuffleChoiceMinorArcanaRecord");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaRecord, AreaId) == 0x000000, "Member 'FDatShuffleChoiceMinorArcanaRecord::AreaId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaRecord, LowPersonaRankId) == 0x000004, "Member 'FDatShuffleChoiceMinorArcanaRecord::LowPersonaRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaRecord, HightPersonaRankId) == 0x000008, "Member 'FDatShuffleChoiceMinorArcanaRecord::HightPersonaRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaRecord, LowWandRankId) == 0x00000C, "Member 'FDatShuffleChoiceMinorArcanaRecord::LowWandRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaRecord, HightWandRankId) == 0x000010, "Member 'FDatShuffleChoiceMinorArcanaRecord::HightWandRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaRecord, LowCoinRankId) == 0x000014, "Member 'FDatShuffleChoiceMinorArcanaRecord::LowCoinRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaRecord, HightCoinRankId) == 0x000018, "Member 'FDatShuffleChoiceMinorArcanaRecord::HightCoinRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaRecord, LowCupRankId) == 0x00001C, "Member 'FDatShuffleChoiceMinorArcanaRecord::LowCupRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaRecord, HightCupRankId) == 0x000020, "Member 'FDatShuffleChoiceMinorArcanaRecord::HightCupRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaRecord, LowSwordRankId) == 0x000024, "Member 'FDatShuffleChoiceMinorArcanaRecord::LowSwordRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaRecord, HightSwordRankId) == 0x000028, "Member 'FDatShuffleChoiceMinorArcanaRecord::HightSwordRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaRecord, CardNumProb) == 0x00002C, "Member 'FDatShuffleChoiceMinorArcanaRecord::CardNumProb' has a wrong offset!");

// ScriptStruct xrd777.FldCrowdWalkInitActorData
// 0x0028 (0x0028 - 0x0000)
struct FFldCrowdWalkInitActorData final
{
public:
	int32                                         BpIndex;                                           // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PointIndex;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMobWalkRoutePoint>             PointArray;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldCrowdWalkInitActorData) == 0x000008, "Wrong alignment on FFldCrowdWalkInitActorData");
static_assert(sizeof(FFldCrowdWalkInitActorData) == 0x000028, "Wrong size on FFldCrowdWalkInitActorData");
static_assert(offsetof(FFldCrowdWalkInitActorData, BpIndex) == 0x000000, "Member 'FFldCrowdWalkInitActorData::BpIndex' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkInitActorData, StartLocation) == 0x000004, "Member 'FFldCrowdWalkInitActorData::StartLocation' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkInitActorData, PointIndex) == 0x000010, "Member 'FFldCrowdWalkInitActorData::PointIndex' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkInitActorData, PointArray) == 0x000018, "Member 'FFldCrowdWalkInitActorData::PointArray' has a wrong offset!");

// ScriptStruct xrd777.DatShuffleChoiceMinorArcanaDataTable
// 0x0040 (0x0048 - 0x0008)
struct FDatShuffleChoiceMinorArcanaDataTable final : public FTableRowBase
{
public:
	uint8                                         AreaId;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LowPersonaRankId;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HightPersonaRankId;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowWandRankId;                                     // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HightWandRankId;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowCoinRankId;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HightCoinRankId;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowCupRankId;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HightCupRankId;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LowSwordRankId;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HightSwordRankId;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CardNumProb[0x5];                                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatShuffleChoiceMinorArcanaDataTable) == 0x000008, "Wrong alignment on FDatShuffleChoiceMinorArcanaDataTable");
static_assert(sizeof(FDatShuffleChoiceMinorArcanaDataTable) == 0x000048, "Wrong size on FDatShuffleChoiceMinorArcanaDataTable");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaDataTable, AreaId) == 0x000008, "Member 'FDatShuffleChoiceMinorArcanaDataTable::AreaId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaDataTable, LowPersonaRankId) == 0x00000C, "Member 'FDatShuffleChoiceMinorArcanaDataTable::LowPersonaRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaDataTable, HightPersonaRankId) == 0x000010, "Member 'FDatShuffleChoiceMinorArcanaDataTable::HightPersonaRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaDataTable, LowWandRankId) == 0x000014, "Member 'FDatShuffleChoiceMinorArcanaDataTable::LowWandRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaDataTable, HightWandRankId) == 0x000018, "Member 'FDatShuffleChoiceMinorArcanaDataTable::HightWandRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaDataTable, LowCoinRankId) == 0x00001C, "Member 'FDatShuffleChoiceMinorArcanaDataTable::LowCoinRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaDataTable, HightCoinRankId) == 0x000020, "Member 'FDatShuffleChoiceMinorArcanaDataTable::HightCoinRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaDataTable, LowCupRankId) == 0x000024, "Member 'FDatShuffleChoiceMinorArcanaDataTable::LowCupRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaDataTable, HightCupRankId) == 0x000028, "Member 'FDatShuffleChoiceMinorArcanaDataTable::HightCupRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaDataTable, LowSwordRankId) == 0x00002C, "Member 'FDatShuffleChoiceMinorArcanaDataTable::LowSwordRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaDataTable, HightSwordRankId) == 0x000030, "Member 'FDatShuffleChoiceMinorArcanaDataTable::HightSwordRankId' has a wrong offset!");
static_assert(offsetof(FDatShuffleChoiceMinorArcanaDataTable, CardNumProb) == 0x000034, "Member 'FDatShuffleChoiceMinorArcanaDataTable::CardNumProb' has a wrong offset!");

// ScriptStruct xrd777.DatRaceTableRecord
// 0x0048 (0x0048 - 0x0000)
struct FDatRaceTableRecord final
{
public:
	class FText                                   Race;                                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Community;                                         // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0030(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatRaceTableRecord) == 0x000008, "Wrong alignment on FDatRaceTableRecord");
static_assert(sizeof(FDatRaceTableRecord) == 0x000048, "Wrong size on FDatRaceTableRecord");
static_assert(offsetof(FDatRaceTableRecord, Race) == 0x000000, "Member 'FDatRaceTableRecord::Race' has a wrong offset!");
static_assert(offsetof(FDatRaceTableRecord, Community) == 0x000018, "Member 'FDatRaceTableRecord::Community' has a wrong offset!");
static_assert(offsetof(FDatRaceTableRecord, Comment) == 0x000030, "Member 'FDatRaceTableRecord::Comment' has a wrong offset!");

// ScriptStruct xrd777.DatRaceDataTable
// 0x0048 (0x0050 - 0x0008)
struct FDatRaceDataTable final : public FTableRowBase
{
public:
	class FText                                   Name1;                                             // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Name2;                                             // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0038(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatRaceDataTable) == 0x000008, "Wrong alignment on FDatRaceDataTable");
static_assert(sizeof(FDatRaceDataTable) == 0x000050, "Wrong size on FDatRaceDataTable");
static_assert(offsetof(FDatRaceDataTable, Name1) == 0x000008, "Member 'FDatRaceDataTable::Name1' has a wrong offset!");
static_assert(offsetof(FDatRaceDataTable, Name2) == 0x000020, "Member 'FDatRaceDataTable::Name2' has a wrong offset!");
static_assert(offsetof(FDatRaceDataTable, Comment) == 0x000038, "Member 'FDatRaceDataTable::Comment' has a wrong offset!");

// ScriptStruct xrd777.ldCameraInputInterpolation
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x04) FLdCameraInputInterpolation final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLdCameraInputInterpolation) == 0x000004, "Wrong alignment on FLdCameraInputInterpolation");
static_assert(sizeof(FLdCameraInputInterpolation) == 0x000038, "Wrong size on FLdCameraInputInterpolation");

// ScriptStruct xrd777.DatSupportInfoTableRecord
// 0x0014 (0x0014 - 0x0000)
struct FDatSupportInfoTableRecord final
{
public:
	uint32                                        DefineId;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MajorId;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MinorId;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CharacterId;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Show;                                              // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Face;                                              // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Window;                                            // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatSupportInfoTableRecord) == 0x000004, "Wrong alignment on FDatSupportInfoTableRecord");
static_assert(sizeof(FDatSupportInfoTableRecord) == 0x000014, "Wrong size on FDatSupportInfoTableRecord");
static_assert(offsetof(FDatSupportInfoTableRecord, DefineId) == 0x000000, "Member 'FDatSupportInfoTableRecord::DefineId' has a wrong offset!");
static_assert(offsetof(FDatSupportInfoTableRecord, MajorId) == 0x000004, "Member 'FDatSupportInfoTableRecord::MajorId' has a wrong offset!");
static_assert(offsetof(FDatSupportInfoTableRecord, MinorId) == 0x000008, "Member 'FDatSupportInfoTableRecord::MinorId' has a wrong offset!");
static_assert(offsetof(FDatSupportInfoTableRecord, CharacterId) == 0x00000C, "Member 'FDatSupportInfoTableRecord::CharacterId' has a wrong offset!");
static_assert(offsetof(FDatSupportInfoTableRecord, Show) == 0x000010, "Member 'FDatSupportInfoTableRecord::Show' has a wrong offset!");
static_assert(offsetof(FDatSupportInfoTableRecord, Face) == 0x000011, "Member 'FDatSupportInfoTableRecord::Face' has a wrong offset!");
static_assert(offsetof(FDatSupportInfoTableRecord, Window) == 0x000012, "Member 'FDatSupportInfoTableRecord::Window' has a wrong offset!");

// ScriptStruct xrd777.WeaponShopDrawParam
// 0x0018 (0x0018 - 0x0000)
struct FWeaponShopDrawParam final
{
public:
	struct FVector2D                              _Position;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              _ScaleOrWH;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _Angle;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _GenericValue;                                     // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponShopDrawParam) == 0x000004, "Wrong alignment on FWeaponShopDrawParam");
static_assert(sizeof(FWeaponShopDrawParam) == 0x000018, "Wrong size on FWeaponShopDrawParam");
static_assert(offsetof(FWeaponShopDrawParam, _Position) == 0x000000, "Member 'FWeaponShopDrawParam::_Position' has a wrong offset!");
static_assert(offsetof(FWeaponShopDrawParam, _ScaleOrWH) == 0x000008, "Member 'FWeaponShopDrawParam::_ScaleOrWH' has a wrong offset!");
static_assert(offsetof(FWeaponShopDrawParam, _Angle) == 0x000010, "Member 'FWeaponShopDrawParam::_Angle' has a wrong offset!");
static_assert(offsetof(FWeaponShopDrawParam, _GenericValue) == 0x000014, "Member 'FWeaponShopDrawParam::_GenericValue' has a wrong offset!");

// ScriptStruct xrd777.WeaponShopAnimParam
// 0x0048 (0x0048 - 0x0000)
struct FWeaponShopAnimParam final
{
public:
	struct FWeaponShopDrawParam                   _StartParam;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWeaponShopDrawParam                   _EndParam;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         _WaitTime;                                         // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _InterpCurve;                                      // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _InterpCoefficient;                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _InterpTime;                                       // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponShopAnimParam) == 0x000008, "Wrong alignment on FWeaponShopAnimParam");
static_assert(sizeof(FWeaponShopAnimParam) == 0x000048, "Wrong size on FWeaponShopAnimParam");
static_assert(offsetof(FWeaponShopAnimParam, _StartParam) == 0x000000, "Member 'FWeaponShopAnimParam::_StartParam' has a wrong offset!");
static_assert(offsetof(FWeaponShopAnimParam, _EndParam) == 0x000018, "Member 'FWeaponShopAnimParam::_EndParam' has a wrong offset!");
static_assert(offsetof(FWeaponShopAnimParam, _WaitTime) == 0x000030, "Member 'FWeaponShopAnimParam::_WaitTime' has a wrong offset!");
static_assert(offsetof(FWeaponShopAnimParam, _InterpCurve) == 0x000038, "Member 'FWeaponShopAnimParam::_InterpCurve' has a wrong offset!");
static_assert(offsetof(FWeaponShopAnimParam, _InterpCoefficient) == 0x000040, "Member 'FWeaponShopAnimParam::_InterpCoefficient' has a wrong offset!");
static_assert(offsetof(FWeaponShopAnimParam, _InterpTime) == 0x000044, "Member 'FWeaponShopAnimParam::_InterpTime' has a wrong offset!");

// ScriptStruct xrd777.DatSupportInfoDataTable
// 0x0018 (0x0020 - 0x0008)
struct FDatSupportInfoDataTable final : public FTableRowBase
{
public:
	uint32                                        DefineId;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MajorId;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MinorId;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CharacterId;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Show;                                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Face;                                              // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Window;                                            // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatSupportInfoDataTable) == 0x000008, "Wrong alignment on FDatSupportInfoDataTable");
static_assert(sizeof(FDatSupportInfoDataTable) == 0x000020, "Wrong size on FDatSupportInfoDataTable");
static_assert(offsetof(FDatSupportInfoDataTable, DefineId) == 0x000008, "Member 'FDatSupportInfoDataTable::DefineId' has a wrong offset!");
static_assert(offsetof(FDatSupportInfoDataTable, MajorId) == 0x00000C, "Member 'FDatSupportInfoDataTable::MajorId' has a wrong offset!");
static_assert(offsetof(FDatSupportInfoDataTable, MinorId) == 0x000010, "Member 'FDatSupportInfoDataTable::MinorId' has a wrong offset!");
static_assert(offsetof(FDatSupportInfoDataTable, CharacterId) == 0x000014, "Member 'FDatSupportInfoDataTable::CharacterId' has a wrong offset!");
static_assert(offsetof(FDatSupportInfoDataTable, Show) == 0x000018, "Member 'FDatSupportInfoDataTable::Show' has a wrong offset!");
static_assert(offsetof(FDatSupportInfoDataTable, Face) == 0x000019, "Member 'FDatSupportInfoDataTable::Face' has a wrong offset!");
static_assert(offsetof(FDatSupportInfoDataTable, Window) == 0x00001A, "Member 'FDatSupportInfoDataTable::Window' has a wrong offset!");

// ScriptStruct xrd777.DatNormalSkillTableRecord
// 0x002C (0x002C - 0x0000)
struct FDatNormalSkillTableRecord final
{
public:
	uint32                                        Flag;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Use;                                               // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Koukatype;                                         // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Costtype;                                          // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Cost;                                              // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Costbase;                                          // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetType;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Targetarea;                                        // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Targetrule;                                        // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Untargetbadstat;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Hitratio;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Targetcntmin;                                      // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Targetcntmax;                                      // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Hptype;                                            // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Hpn;                                               // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Sptype;                                            // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         Spn;                                               // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         badtype;                                           // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         badratio;                                          // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        BadStatus;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Support;                                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Program;                                           // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Criticalratio;                                     // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Swoonratio;                                        // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x1];                                       // 0x002B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatNormalSkillTableRecord) == 0x000004, "Wrong alignment on FDatNormalSkillTableRecord");
static_assert(sizeof(FDatNormalSkillTableRecord) == 0x00002C, "Wrong size on FDatNormalSkillTableRecord");
static_assert(offsetof(FDatNormalSkillTableRecord, Flag) == 0x000000, "Member 'FDatNormalSkillTableRecord::Flag' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Use) == 0x000004, "Member 'FDatNormalSkillTableRecord::Use' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Koukatype) == 0x000006, "Member 'FDatNormalSkillTableRecord::Koukatype' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Costtype) == 0x000007, "Member 'FDatNormalSkillTableRecord::Costtype' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Cost) == 0x000008, "Member 'FDatNormalSkillTableRecord::Cost' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Costbase) == 0x00000A, "Member 'FDatNormalSkillTableRecord::Costbase' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, TargetType) == 0x00000C, "Member 'FDatNormalSkillTableRecord::TargetType' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Targetarea) == 0x00000D, "Member 'FDatNormalSkillTableRecord::Targetarea' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Targetrule) == 0x00000E, "Member 'FDatNormalSkillTableRecord::Targetrule' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Untargetbadstat) == 0x000010, "Member 'FDatNormalSkillTableRecord::Untargetbadstat' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Hitratio) == 0x000014, "Member 'FDatNormalSkillTableRecord::Hitratio' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Targetcntmin) == 0x000015, "Member 'FDatNormalSkillTableRecord::Targetcntmin' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Targetcntmax) == 0x000016, "Member 'FDatNormalSkillTableRecord::Targetcntmax' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Hptype) == 0x000017, "Member 'FDatNormalSkillTableRecord::Hptype' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Hpn) == 0x000018, "Member 'FDatNormalSkillTableRecord::Hpn' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Sptype) == 0x00001A, "Member 'FDatNormalSkillTableRecord::Sptype' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Spn) == 0x00001C, "Member 'FDatNormalSkillTableRecord::Spn' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, badtype) == 0x00001E, "Member 'FDatNormalSkillTableRecord::badtype' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, badratio) == 0x00001F, "Member 'FDatNormalSkillTableRecord::badratio' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, BadStatus) == 0x000020, "Member 'FDatNormalSkillTableRecord::BadStatus' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Support) == 0x000024, "Member 'FDatNormalSkillTableRecord::Support' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Program) == 0x000028, "Member 'FDatNormalSkillTableRecord::Program' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Criticalratio) == 0x000029, "Member 'FDatNormalSkillTableRecord::Criticalratio' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillTableRecord, Swoonratio) == 0x00002A, "Member 'FDatNormalSkillTableRecord::Swoonratio' has a wrong offset!");

// ScriptStruct xrd777.DatNormalSkillDataTable
// 0x0030 (0x0038 - 0x0008)
struct FDatNormalSkillDataTable final : public FTableRowBase
{
public:
	uint32                                        Flag;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Use;                                               // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Koukatype;                                         // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Costtype;                                          // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Cost;                                              // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Costbase;                                          // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TargetType;                                        // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Targetarea;                                        // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Targetrule;                                        // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Untargetbadstat;                                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Hitratio;                                          // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Targetcntmin;                                      // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Targetcntmax;                                      // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Hptype;                                            // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Hpn;                                               // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Sptype;                                            // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         Spn;                                               // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         badtype;                                           // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         badratio;                                          // 0x0027(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        BadStatus;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Support;                                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Program;                                           // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Criticalratio;                                     // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Swoonratio;                                        // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatNormalSkillDataTable) == 0x000008, "Wrong alignment on FDatNormalSkillDataTable");
static_assert(sizeof(FDatNormalSkillDataTable) == 0x000038, "Wrong size on FDatNormalSkillDataTable");
static_assert(offsetof(FDatNormalSkillDataTable, Flag) == 0x000008, "Member 'FDatNormalSkillDataTable::Flag' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Use) == 0x00000C, "Member 'FDatNormalSkillDataTable::Use' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Koukatype) == 0x00000E, "Member 'FDatNormalSkillDataTable::Koukatype' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Costtype) == 0x00000F, "Member 'FDatNormalSkillDataTable::Costtype' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Cost) == 0x000010, "Member 'FDatNormalSkillDataTable::Cost' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Costbase) == 0x000012, "Member 'FDatNormalSkillDataTable::Costbase' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, TargetType) == 0x000014, "Member 'FDatNormalSkillDataTable::TargetType' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Targetarea) == 0x000015, "Member 'FDatNormalSkillDataTable::Targetarea' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Targetrule) == 0x000016, "Member 'FDatNormalSkillDataTable::Targetrule' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Untargetbadstat) == 0x000018, "Member 'FDatNormalSkillDataTable::Untargetbadstat' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Hitratio) == 0x00001C, "Member 'FDatNormalSkillDataTable::Hitratio' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Targetcntmin) == 0x00001D, "Member 'FDatNormalSkillDataTable::Targetcntmin' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Targetcntmax) == 0x00001E, "Member 'FDatNormalSkillDataTable::Targetcntmax' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Hptype) == 0x00001F, "Member 'FDatNormalSkillDataTable::Hptype' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Hpn) == 0x000020, "Member 'FDatNormalSkillDataTable::Hpn' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Sptype) == 0x000022, "Member 'FDatNormalSkillDataTable::Sptype' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Spn) == 0x000024, "Member 'FDatNormalSkillDataTable::Spn' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, badtype) == 0x000026, "Member 'FDatNormalSkillDataTable::badtype' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, badratio) == 0x000027, "Member 'FDatNormalSkillDataTable::badratio' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, BadStatus) == 0x000028, "Member 'FDatNormalSkillDataTable::BadStatus' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Support) == 0x00002C, "Member 'FDatNormalSkillDataTable::Support' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Program) == 0x000030, "Member 'FDatNormalSkillDataTable::Program' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Criticalratio) == 0x000031, "Member 'FDatNormalSkillDataTable::Criticalratio' has a wrong offset!");
static_assert(offsetof(FDatNormalSkillDataTable, Swoonratio) == 0x000032, "Member 'FDatNormalSkillDataTable::Swoonratio' has a wrong offset!");

// ScriptStruct xrd777.ldCameraRotParam
// 0x001C (0x001C - 0x0000)
struct FLdCameraRotParam
{
public:
	float                                         Speed;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Acceleration;                                      // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Deceleration;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Press;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Release;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x8];                                       // 0x0014(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLdCameraRotParam) == 0x000004, "Wrong alignment on FLdCameraRotParam");
static_assert(sizeof(FLdCameraRotParam) == 0x00001C, "Wrong size on FLdCameraRotParam");
static_assert(offsetof(FLdCameraRotParam, Speed) == 0x000000, "Member 'FLdCameraRotParam::Speed' has a wrong offset!");
static_assert(offsetof(FLdCameraRotParam, Acceleration) == 0x000004, "Member 'FLdCameraRotParam::Acceleration' has a wrong offset!");
static_assert(offsetof(FLdCameraRotParam, Deceleration) == 0x000008, "Member 'FLdCameraRotParam::Deceleration' has a wrong offset!");
static_assert(offsetof(FLdCameraRotParam, Press) == 0x00000C, "Member 'FLdCameraRotParam::Press' has a wrong offset!");
static_assert(offsetof(FLdCameraRotParam, Release) == 0x000010, "Member 'FLdCameraRotParam::Release' has a wrong offset!");

// ScriptStruct xrd777.ldCameraCorrectionParam
// 0x0004 (0x0020 - 0x001C)
struct FLdCameraCorrectionParam final : public FLdCameraRotParam
{
public:
	float                                         Margin;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLdCameraCorrectionParam) == 0x000004, "Wrong alignment on FLdCameraCorrectionParam");
static_assert(sizeof(FLdCameraCorrectionParam) == 0x000020, "Wrong size on FLdCameraCorrectionParam");
static_assert(offsetof(FLdCameraCorrectionParam, Margin) == 0x00001C, "Member 'FLdCameraCorrectionParam::Margin' has a wrong offset!");

// ScriptStruct xrd777.DatSkillTableRecord
// 0x0003 (0x0003 - 0x0000)
struct FDatSkillTableRecord final
{
public:
	int8                                          Attr;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Type;                                              // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          TargetLv;                                          // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatSkillTableRecord) == 0x000001, "Wrong alignment on FDatSkillTableRecord");
static_assert(sizeof(FDatSkillTableRecord) == 0x000003, "Wrong size on FDatSkillTableRecord");
static_assert(offsetof(FDatSkillTableRecord, Attr) == 0x000000, "Member 'FDatSkillTableRecord::Attr' has a wrong offset!");
static_assert(offsetof(FDatSkillTableRecord, Type) == 0x000001, "Member 'FDatSkillTableRecord::Type' has a wrong offset!");
static_assert(offsetof(FDatSkillTableRecord, TargetLv) == 0x000002, "Member 'FDatSkillTableRecord::TargetLv' has a wrong offset!");

// ScriptStruct xrd777.DatAssetOverWriteDataTable
// 0x0028 (0x0030 - 0x0008)
struct FDatAssetOverWriteDataTable final : public FTableRowBase
{
public:
	uint32                                        Major;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Minor;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BindingTag;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Month;                                             // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Day;                                               // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Time;                                              // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        BaseMotion;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        BaseMotionEx;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AddMotionEx;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flag;                                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatAssetOverWriteDataTable) == 0x000008, "Wrong alignment on FDatAssetOverWriteDataTable");
static_assert(sizeof(FDatAssetOverWriteDataTable) == 0x000030, "Wrong size on FDatAssetOverWriteDataTable");
static_assert(offsetof(FDatAssetOverWriteDataTable, Major) == 0x000008, "Member 'FDatAssetOverWriteDataTable::Major' has a wrong offset!");
static_assert(offsetof(FDatAssetOverWriteDataTable, Minor) == 0x00000C, "Member 'FDatAssetOverWriteDataTable::Minor' has a wrong offset!");
static_assert(offsetof(FDatAssetOverWriteDataTable, BindingTag) == 0x000010, "Member 'FDatAssetOverWriteDataTable::BindingTag' has a wrong offset!");
static_assert(offsetof(FDatAssetOverWriteDataTable, Month) == 0x000018, "Member 'FDatAssetOverWriteDataTable::Month' has a wrong offset!");
static_assert(offsetof(FDatAssetOverWriteDataTable, Day) == 0x000019, "Member 'FDatAssetOverWriteDataTable::Day' has a wrong offset!");
static_assert(offsetof(FDatAssetOverWriteDataTable, Time) == 0x00001A, "Member 'FDatAssetOverWriteDataTable::Time' has a wrong offset!");
static_assert(offsetof(FDatAssetOverWriteDataTable, BaseMotion) == 0x00001C, "Member 'FDatAssetOverWriteDataTable::BaseMotion' has a wrong offset!");
static_assert(offsetof(FDatAssetOverWriteDataTable, BaseMotionEx) == 0x000020, "Member 'FDatAssetOverWriteDataTable::BaseMotionEx' has a wrong offset!");
static_assert(offsetof(FDatAssetOverWriteDataTable, AddMotionEx) == 0x000024, "Member 'FDatAssetOverWriteDataTable::AddMotionEx' has a wrong offset!");
static_assert(offsetof(FDatAssetOverWriteDataTable, Flag) == 0x000028, "Member 'FDatAssetOverWriteDataTable::Flag' has a wrong offset!");

// ScriptStruct xrd777.DatSkillDataTable
// 0x0008 (0x0010 - 0x0008)
struct FDatSkillDataTable final : public FTableRowBase
{
public:
	int8                                          Attr;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Type;                                              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          TargetLv;                                          // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatSkillDataTable) == 0x000008, "Wrong alignment on FDatSkillDataTable");
static_assert(sizeof(FDatSkillDataTable) == 0x000010, "Wrong size on FDatSkillDataTable");
static_assert(offsetof(FDatSkillDataTable, Attr) == 0x000008, "Member 'FDatSkillDataTable::Attr' has a wrong offset!");
static_assert(offsetof(FDatSkillDataTable, Type) == 0x000009, "Member 'FDatSkillDataTable::Type' has a wrong offset!");
static_assert(offsetof(FDatSkillDataTable, TargetLv) == 0x00000A, "Member 'FDatSkillDataTable::TargetLv' has a wrong offset!");

// ScriptStruct xrd777.DatAllyPersonaExpDataTable
// 0x0188 (0x0190 - 0x0008)
struct FDatAllyPersonaExpDataTable final : public FTableRowBase
{
public:
	uint32                                        Exp[0x62];                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatAllyPersonaExpDataTable) == 0x000008, "Wrong alignment on FDatAllyPersonaExpDataTable");
static_assert(sizeof(FDatAllyPersonaExpDataTable) == 0x000190, "Wrong size on FDatAllyPersonaExpDataTable");
static_assert(offsetof(FDatAllyPersonaExpDataTable, Exp) == 0x000008, "Member 'FDatAllyPersonaExpDataTable::Exp' has a wrong offset!");

// ScriptStruct xrd777.DatPersonaGrowthEventTable
// 0x0006 (0x0006 - 0x0000)
struct FDatPersonaGrowthEventTable final
{
public:
	uint8                                         Level;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        EventId;                                           // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatPersonaGrowthEventTable) == 0x000002, "Wrong alignment on FDatPersonaGrowthEventTable");
static_assert(sizeof(FDatPersonaGrowthEventTable) == 0x000006, "Wrong size on FDatPersonaGrowthEventTable");
static_assert(offsetof(FDatPersonaGrowthEventTable, Level) == 0x000000, "Member 'FDatPersonaGrowthEventTable::Level' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthEventTable, EventId) == 0x000002, "Member 'FDatPersonaGrowthEventTable::EventId' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthEventTable, SkillId) == 0x000004, "Member 'FDatPersonaGrowthEventTable::SkillId' has a wrong offset!");

// ScriptStruct xrd777.DatLevelupParam
// 0x0005 (0x0005 - 0x0000)
struct FDatLevelupParam final
{
public:
	uint8                                         ATK;                                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MAT;                                               // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DEF;                                               // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SPD;                                               // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LUK;                                               // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatLevelupParam) == 0x000001, "Wrong alignment on FDatLevelupParam");
static_assert(sizeof(FDatLevelupParam) == 0x000005, "Wrong size on FDatLevelupParam");
static_assert(offsetof(FDatLevelupParam, ATK) == 0x000000, "Member 'FDatLevelupParam::ATK' has a wrong offset!");
static_assert(offsetof(FDatLevelupParam, MAT) == 0x000001, "Member 'FDatLevelupParam::MAT' has a wrong offset!");
static_assert(offsetof(FDatLevelupParam, DEF) == 0x000002, "Member 'FDatLevelupParam::DEF' has a wrong offset!");
static_assert(offsetof(FDatLevelupParam, SPD) == 0x000003, "Member 'FDatLevelupParam::SPD' has a wrong offset!");
static_assert(offsetof(FDatLevelupParam, LUK) == 0x000004, "Member 'FDatLevelupParam::LUK' has a wrong offset!");

// ScriptStruct xrd777.DatAllyPersonaGrowthDataRecord
// 0x0434 (0x0434 - 0x0000)
struct FDatAllyPersonaGrowthDataRecord final
{
public:
	uint8                                         PlayerId;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LevelMax;                                          // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent[0x20];                                  // 0x0002(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       ParamsUp[0x62];                                    // 0x00C2(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint32                                        Exp[0x62];                                         // 0x02AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatAllyPersonaGrowthDataRecord) == 0x000004, "Wrong alignment on FDatAllyPersonaGrowthDataRecord");
static_assert(sizeof(FDatAllyPersonaGrowthDataRecord) == 0x000434, "Wrong size on FDatAllyPersonaGrowthDataRecord");
static_assert(offsetof(FDatAllyPersonaGrowthDataRecord, PlayerId) == 0x000000, "Member 'FDatAllyPersonaGrowthDataRecord::PlayerId' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataRecord, LevelMax) == 0x000001, "Member 'FDatAllyPersonaGrowthDataRecord::LevelMax' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataRecord, SkillEvent) == 0x000002, "Member 'FDatAllyPersonaGrowthDataRecord::SkillEvent' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataRecord, ParamsUp) == 0x0000C2, "Member 'FDatAllyPersonaGrowthDataRecord::ParamsUp' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataRecord, Exp) == 0x0002AC, "Member 'FDatAllyPersonaGrowthDataRecord::Exp' has a wrong offset!");

// ScriptStruct xrd777.DungeonPartVariationNumberDataAstrea
// 0x0018 (0x0018 - 0x0000)
struct FDungeonPartVariationNumberDataAstrea final
{
public:
	int32                                         DesignTypeID;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 VariationNo;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonPartVariationNumberDataAstrea) == 0x000008, "Wrong alignment on FDungeonPartVariationNumberDataAstrea");
static_assert(sizeof(FDungeonPartVariationNumberDataAstrea) == 0x000018, "Wrong size on FDungeonPartVariationNumberDataAstrea");
static_assert(offsetof(FDungeonPartVariationNumberDataAstrea, DesignTypeID) == 0x000000, "Member 'FDungeonPartVariationNumberDataAstrea::DesignTypeID' has a wrong offset!");
static_assert(offsetof(FDungeonPartVariationNumberDataAstrea, VariationNo) == 0x000008, "Member 'FDungeonPartVariationNumberDataAstrea::VariationNo' has a wrong offset!");

// ScriptStruct xrd777.DungeonPartVariationData
// 0x0030 (0x0030 - 0x0000)
struct FDungeonPartVariationData final
{
public:
	EPartType                                     PartType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 VariationNo;                                       // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDungeonPartVariationNumberDataAstrea  VariationNoDataOfAstrea;                           // 0x0018(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonPartVariationData) == 0x000008, "Wrong alignment on FDungeonPartVariationData");
static_assert(sizeof(FDungeonPartVariationData) == 0x000030, "Wrong size on FDungeonPartVariationData");
static_assert(offsetof(FDungeonPartVariationData, PartType) == 0x000000, "Member 'FDungeonPartVariationData::PartType' has a wrong offset!");
static_assert(offsetof(FDungeonPartVariationData, VariationNo) == 0x000008, "Member 'FDungeonPartVariationData::VariationNo' has a wrong offset!");
static_assert(offsetof(FDungeonPartVariationData, VariationNoDataOfAstrea) == 0x000018, "Member 'FDungeonPartVariationData::VariationNoDataOfAstrea' has a wrong offset!");

// ScriptStruct xrd777.DungeonPartMisRoomTypeDataTableRow
// 0x0018 (0x0020 - 0x0008)
struct FDungeonPartMisRoomTypeDataTableRow final : public FTableRowBase
{
public:
	TArray<struct FDungeonPartVariationData>      TypeList;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         VarNo;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDungeonPartMisRoomTypeDataTableRow) == 0x000008, "Wrong alignment on FDungeonPartMisRoomTypeDataTableRow");
static_assert(sizeof(FDungeonPartMisRoomTypeDataTableRow) == 0x000020, "Wrong size on FDungeonPartMisRoomTypeDataTableRow");
static_assert(offsetof(FDungeonPartMisRoomTypeDataTableRow, TypeList) == 0x000008, "Member 'FDungeonPartMisRoomTypeDataTableRow::TypeList' has a wrong offset!");
static_assert(offsetof(FDungeonPartMisRoomTypeDataTableRow, VarNo) == 0x000018, "Member 'FDungeonPartMisRoomTypeDataTableRow::VarNo' has a wrong offset!");

// ScriptStruct xrd777.FldAnimeObjAnimation
// 0x0018 (0x0018 - 0x0000)
struct FFldAnimeObjAnimation final
{
public:
	class UAnimationAsset*                        MAsset;                                            // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MLoop;                                             // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         MNiagara;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldAnimeObjAnimation) == 0x000008, "Wrong alignment on FFldAnimeObjAnimation");
static_assert(sizeof(FFldAnimeObjAnimation) == 0x000018, "Wrong size on FFldAnimeObjAnimation");
static_assert(offsetof(FFldAnimeObjAnimation, MAsset) == 0x000000, "Member 'FFldAnimeObjAnimation::MAsset' has a wrong offset!");
static_assert(offsetof(FFldAnimeObjAnimation, MLoop) == 0x000008, "Member 'FFldAnimeObjAnimation::MLoop' has a wrong offset!");
static_assert(offsetof(FFldAnimeObjAnimation, MNiagara) == 0x000010, "Member 'FFldAnimeObjAnimation::MNiagara' has a wrong offset!");

// ScriptStruct xrd777.EvtCharaPackFaceAnimationPayload
// 0x0018 (0x0018 - 0x0000)
struct FEvtCharaPackFaceAnimationPayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppCharFaceAnimID                            FaceAnimID;                                        // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtCharaPackFaceAnimationPayload) == 0x000004, "Wrong alignment on FEvtCharaPackFaceAnimationPayload");
static_assert(sizeof(FEvtCharaPackFaceAnimationPayload) == 0x000018, "Wrong size on FEvtCharaPackFaceAnimationPayload");
static_assert(offsetof(FEvtCharaPackFaceAnimationPayload, EventName) == 0x000000, "Member 'FEvtCharaPackFaceAnimationPayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackFaceAnimationPayload, FaceAnimID) == 0x000008, "Member 'FEvtCharaPackFaceAnimationPayload::FaceAnimID' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackFaceAnimationPayload, bLoop) == 0x000009, "Member 'FEvtCharaPackFaceAnimationPayload::bLoop' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackFaceAnimationPayload, BlendInTime) == 0x00000C, "Member 'FEvtCharaPackFaceAnimationPayload::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackFaceAnimationPayload, BlendOutTime) == 0x000010, "Member 'FEvtCharaPackFaceAnimationPayload::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackFaceAnimationPayload, PlayRate) == 0x000014, "Member 'FEvtCharaPackFaceAnimationPayload::PlayRate' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaPackFaceAnimationSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtCharaPackFaceAnimationSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtCharaPackFaceAnimationPayload> KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaPackFaceAnimationSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaPackFaceAnimationSectionData");
static_assert(sizeof(FMovieSceneEvtCharaPackFaceAnimationSectionData) == 0x000088, "Wrong size on FMovieSceneEvtCharaPackFaceAnimationSectionData");
static_assert(offsetof(FMovieSceneEvtCharaPackFaceAnimationSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtCharaPackFaceAnimationSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPackFaceAnimationSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtCharaPackFaceAnimationSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.DatAllyPersonaGrowthDataTable
// 0x02B0 (0x02B8 - 0x0008)
struct FDatAllyPersonaGrowthDataTable final : public FTableRowBase
{
public:
	uint8                                         PlayerId;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LevelMax;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent0;                                       // 0x000A(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent1;                                       // 0x0010(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent2;                                       // 0x0016(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent3;                                       // 0x001C(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent4;                                       // 0x0022(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent5;                                       // 0x0028(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent6;                                       // 0x002E(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent7;                                       // 0x0034(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent8;                                       // 0x003A(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent9;                                       // 0x0040(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent10;                                      // 0x0046(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent11;                                      // 0x004C(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent12;                                      // 0x0052(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent13;                                      // 0x0058(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent14;                                      // 0x005E(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent15;                                      // 0x0064(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent16;                                      // 0x006A(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent17;                                      // 0x0070(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent18;                                      // 0x0076(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent19;                                      // 0x007C(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent20;                                      // 0x0082(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent21;                                      // 0x0088(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent22;                                      // 0x008E(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent23;                                      // 0x0094(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent24;                                      // 0x009A(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent25;                                      // 0x00A0(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent26;                                      // 0x00A6(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent27;                                      // 0x00AC(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent28;                                      // 0x00B2(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent29;                                      // 0x00B8(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent30;                                      // 0x00BE(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            SkillEvent31;                                      // 0x00C4(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param0;                                            // 0x00CA(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param1;                                            // 0x00CF(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param2;                                            // 0x00D4(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param3;                                            // 0x00D9(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param4;                                            // 0x00DE(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param5;                                            // 0x00E3(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param6;                                            // 0x00E8(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param7;                                            // 0x00ED(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param8;                                            // 0x00F2(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param9;                                            // 0x00F7(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param10;                                           // 0x00FC(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param11;                                           // 0x0101(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param12;                                           // 0x0106(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param13;                                           // 0x010B(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param14;                                           // 0x0110(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param15;                                           // 0x0115(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param16;                                           // 0x011A(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param17;                                           // 0x011F(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param18;                                           // 0x0124(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param19;                                           // 0x0129(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param20;                                           // 0x012E(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param21;                                           // 0x0133(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param22;                                           // 0x0138(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param23;                                           // 0x013D(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param24;                                           // 0x0142(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param25;                                           // 0x0147(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param26;                                           // 0x014C(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param27;                                           // 0x0151(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param28;                                           // 0x0156(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param29;                                           // 0x015B(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param30;                                           // 0x0160(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param31;                                           // 0x0165(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param32;                                           // 0x016A(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param33;                                           // 0x016F(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param34;                                           // 0x0174(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param35;                                           // 0x0179(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param36;                                           // 0x017E(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param37;                                           // 0x0183(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param38;                                           // 0x0188(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param39;                                           // 0x018D(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param40;                                           // 0x0192(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param41;                                           // 0x0197(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param42;                                           // 0x019C(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param43;                                           // 0x01A1(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param44;                                           // 0x01A6(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param45;                                           // 0x01AB(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param46;                                           // 0x01B0(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param47;                                           // 0x01B5(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param48;                                           // 0x01BA(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param49;                                           // 0x01BF(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param50;                                           // 0x01C4(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param51;                                           // 0x01C9(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param52;                                           // 0x01CE(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param53;                                           // 0x01D3(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param54;                                           // 0x01D8(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param55;                                           // 0x01DD(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param56;                                           // 0x01E2(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param57;                                           // 0x01E7(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param58;                                           // 0x01EC(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param59;                                           // 0x01F1(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param60;                                           // 0x01F6(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param61;                                           // 0x01FB(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param62;                                           // 0x0200(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param63;                                           // 0x0205(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param64;                                           // 0x020A(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param65;                                           // 0x020F(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param66;                                           // 0x0214(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param67;                                           // 0x0219(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param68;                                           // 0x021E(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param69;                                           // 0x0223(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param70;                                           // 0x0228(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param71;                                           // 0x022D(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param72;                                           // 0x0232(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param73;                                           // 0x0237(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param74;                                           // 0x023C(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param75;                                           // 0x0241(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param76;                                           // 0x0246(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param77;                                           // 0x024B(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param78;                                           // 0x0250(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param79;                                           // 0x0255(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param80;                                           // 0x025A(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param81;                                           // 0x025F(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param82;                                           // 0x0264(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param83;                                           // 0x0269(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param84;                                           // 0x026E(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param85;                                           // 0x0273(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param86;                                           // 0x0278(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param87;                                           // 0x027D(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param88;                                           // 0x0282(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param89;                                           // 0x0287(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param90;                                           // 0x028C(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param91;                                           // 0x0291(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param92;                                           // 0x0296(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param93;                                           // 0x029B(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param94;                                           // 0x02A0(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param95;                                           // 0x02A5(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param96;                                           // 0x02AA(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatLevelupParam                       Param97;                                           // 0x02AF(0x0005)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatAllyPersonaGrowthDataTable) == 0x000008, "Wrong alignment on FDatAllyPersonaGrowthDataTable");
static_assert(sizeof(FDatAllyPersonaGrowthDataTable) == 0x0002B8, "Wrong size on FDatAllyPersonaGrowthDataTable");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, PlayerId) == 0x000008, "Member 'FDatAllyPersonaGrowthDataTable::PlayerId' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, LevelMax) == 0x000009, "Member 'FDatAllyPersonaGrowthDataTable::LevelMax' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent0) == 0x00000A, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent0' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent1) == 0x000010, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent1' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent2) == 0x000016, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent2' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent3) == 0x00001C, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent3' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent4) == 0x000022, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent4' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent5) == 0x000028, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent5' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent6) == 0x00002E, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent6' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent7) == 0x000034, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent7' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent8) == 0x00003A, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent8' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent9) == 0x000040, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent9' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent10) == 0x000046, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent10' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent11) == 0x00004C, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent11' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent12) == 0x000052, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent12' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent13) == 0x000058, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent13' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent14) == 0x00005E, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent14' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent15) == 0x000064, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent15' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent16) == 0x00006A, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent16' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent17) == 0x000070, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent17' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent18) == 0x000076, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent18' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent19) == 0x00007C, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent19' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent20) == 0x000082, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent20' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent21) == 0x000088, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent21' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent22) == 0x00008E, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent22' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent23) == 0x000094, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent23' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent24) == 0x00009A, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent24' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent25) == 0x0000A0, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent25' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent26) == 0x0000A6, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent26' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent27) == 0x0000AC, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent27' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent28) == 0x0000B2, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent28' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent29) == 0x0000B8, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent29' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent30) == 0x0000BE, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent30' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, SkillEvent31) == 0x0000C4, "Member 'FDatAllyPersonaGrowthDataTable::SkillEvent31' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param0) == 0x0000CA, "Member 'FDatAllyPersonaGrowthDataTable::Param0' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param1) == 0x0000CF, "Member 'FDatAllyPersonaGrowthDataTable::Param1' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param2) == 0x0000D4, "Member 'FDatAllyPersonaGrowthDataTable::Param2' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param3) == 0x0000D9, "Member 'FDatAllyPersonaGrowthDataTable::Param3' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param4) == 0x0000DE, "Member 'FDatAllyPersonaGrowthDataTable::Param4' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param5) == 0x0000E3, "Member 'FDatAllyPersonaGrowthDataTable::Param5' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param6) == 0x0000E8, "Member 'FDatAllyPersonaGrowthDataTable::Param6' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param7) == 0x0000ED, "Member 'FDatAllyPersonaGrowthDataTable::Param7' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param8) == 0x0000F2, "Member 'FDatAllyPersonaGrowthDataTable::Param8' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param9) == 0x0000F7, "Member 'FDatAllyPersonaGrowthDataTable::Param9' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param10) == 0x0000FC, "Member 'FDatAllyPersonaGrowthDataTable::Param10' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param11) == 0x000101, "Member 'FDatAllyPersonaGrowthDataTable::Param11' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param12) == 0x000106, "Member 'FDatAllyPersonaGrowthDataTable::Param12' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param13) == 0x00010B, "Member 'FDatAllyPersonaGrowthDataTable::Param13' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param14) == 0x000110, "Member 'FDatAllyPersonaGrowthDataTable::Param14' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param15) == 0x000115, "Member 'FDatAllyPersonaGrowthDataTable::Param15' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param16) == 0x00011A, "Member 'FDatAllyPersonaGrowthDataTable::Param16' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param17) == 0x00011F, "Member 'FDatAllyPersonaGrowthDataTable::Param17' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param18) == 0x000124, "Member 'FDatAllyPersonaGrowthDataTable::Param18' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param19) == 0x000129, "Member 'FDatAllyPersonaGrowthDataTable::Param19' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param20) == 0x00012E, "Member 'FDatAllyPersonaGrowthDataTable::Param20' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param21) == 0x000133, "Member 'FDatAllyPersonaGrowthDataTable::Param21' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param22) == 0x000138, "Member 'FDatAllyPersonaGrowthDataTable::Param22' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param23) == 0x00013D, "Member 'FDatAllyPersonaGrowthDataTable::Param23' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param24) == 0x000142, "Member 'FDatAllyPersonaGrowthDataTable::Param24' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param25) == 0x000147, "Member 'FDatAllyPersonaGrowthDataTable::Param25' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param26) == 0x00014C, "Member 'FDatAllyPersonaGrowthDataTable::Param26' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param27) == 0x000151, "Member 'FDatAllyPersonaGrowthDataTable::Param27' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param28) == 0x000156, "Member 'FDatAllyPersonaGrowthDataTable::Param28' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param29) == 0x00015B, "Member 'FDatAllyPersonaGrowthDataTable::Param29' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param30) == 0x000160, "Member 'FDatAllyPersonaGrowthDataTable::Param30' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param31) == 0x000165, "Member 'FDatAllyPersonaGrowthDataTable::Param31' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param32) == 0x00016A, "Member 'FDatAllyPersonaGrowthDataTable::Param32' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param33) == 0x00016F, "Member 'FDatAllyPersonaGrowthDataTable::Param33' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param34) == 0x000174, "Member 'FDatAllyPersonaGrowthDataTable::Param34' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param35) == 0x000179, "Member 'FDatAllyPersonaGrowthDataTable::Param35' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param36) == 0x00017E, "Member 'FDatAllyPersonaGrowthDataTable::Param36' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param37) == 0x000183, "Member 'FDatAllyPersonaGrowthDataTable::Param37' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param38) == 0x000188, "Member 'FDatAllyPersonaGrowthDataTable::Param38' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param39) == 0x00018D, "Member 'FDatAllyPersonaGrowthDataTable::Param39' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param40) == 0x000192, "Member 'FDatAllyPersonaGrowthDataTable::Param40' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param41) == 0x000197, "Member 'FDatAllyPersonaGrowthDataTable::Param41' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param42) == 0x00019C, "Member 'FDatAllyPersonaGrowthDataTable::Param42' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param43) == 0x0001A1, "Member 'FDatAllyPersonaGrowthDataTable::Param43' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param44) == 0x0001A6, "Member 'FDatAllyPersonaGrowthDataTable::Param44' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param45) == 0x0001AB, "Member 'FDatAllyPersonaGrowthDataTable::Param45' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param46) == 0x0001B0, "Member 'FDatAllyPersonaGrowthDataTable::Param46' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param47) == 0x0001B5, "Member 'FDatAllyPersonaGrowthDataTable::Param47' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param48) == 0x0001BA, "Member 'FDatAllyPersonaGrowthDataTable::Param48' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param49) == 0x0001BF, "Member 'FDatAllyPersonaGrowthDataTable::Param49' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param50) == 0x0001C4, "Member 'FDatAllyPersonaGrowthDataTable::Param50' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param51) == 0x0001C9, "Member 'FDatAllyPersonaGrowthDataTable::Param51' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param52) == 0x0001CE, "Member 'FDatAllyPersonaGrowthDataTable::Param52' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param53) == 0x0001D3, "Member 'FDatAllyPersonaGrowthDataTable::Param53' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param54) == 0x0001D8, "Member 'FDatAllyPersonaGrowthDataTable::Param54' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param55) == 0x0001DD, "Member 'FDatAllyPersonaGrowthDataTable::Param55' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param56) == 0x0001E2, "Member 'FDatAllyPersonaGrowthDataTable::Param56' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param57) == 0x0001E7, "Member 'FDatAllyPersonaGrowthDataTable::Param57' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param58) == 0x0001EC, "Member 'FDatAllyPersonaGrowthDataTable::Param58' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param59) == 0x0001F1, "Member 'FDatAllyPersonaGrowthDataTable::Param59' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param60) == 0x0001F6, "Member 'FDatAllyPersonaGrowthDataTable::Param60' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param61) == 0x0001FB, "Member 'FDatAllyPersonaGrowthDataTable::Param61' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param62) == 0x000200, "Member 'FDatAllyPersonaGrowthDataTable::Param62' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param63) == 0x000205, "Member 'FDatAllyPersonaGrowthDataTable::Param63' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param64) == 0x00020A, "Member 'FDatAllyPersonaGrowthDataTable::Param64' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param65) == 0x00020F, "Member 'FDatAllyPersonaGrowthDataTable::Param65' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param66) == 0x000214, "Member 'FDatAllyPersonaGrowthDataTable::Param66' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param67) == 0x000219, "Member 'FDatAllyPersonaGrowthDataTable::Param67' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param68) == 0x00021E, "Member 'FDatAllyPersonaGrowthDataTable::Param68' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param69) == 0x000223, "Member 'FDatAllyPersonaGrowthDataTable::Param69' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param70) == 0x000228, "Member 'FDatAllyPersonaGrowthDataTable::Param70' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param71) == 0x00022D, "Member 'FDatAllyPersonaGrowthDataTable::Param71' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param72) == 0x000232, "Member 'FDatAllyPersonaGrowthDataTable::Param72' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param73) == 0x000237, "Member 'FDatAllyPersonaGrowthDataTable::Param73' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param74) == 0x00023C, "Member 'FDatAllyPersonaGrowthDataTable::Param74' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param75) == 0x000241, "Member 'FDatAllyPersonaGrowthDataTable::Param75' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param76) == 0x000246, "Member 'FDatAllyPersonaGrowthDataTable::Param76' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param77) == 0x00024B, "Member 'FDatAllyPersonaGrowthDataTable::Param77' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param78) == 0x000250, "Member 'FDatAllyPersonaGrowthDataTable::Param78' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param79) == 0x000255, "Member 'FDatAllyPersonaGrowthDataTable::Param79' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param80) == 0x00025A, "Member 'FDatAllyPersonaGrowthDataTable::Param80' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param81) == 0x00025F, "Member 'FDatAllyPersonaGrowthDataTable::Param81' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param82) == 0x000264, "Member 'FDatAllyPersonaGrowthDataTable::Param82' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param83) == 0x000269, "Member 'FDatAllyPersonaGrowthDataTable::Param83' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param84) == 0x00026E, "Member 'FDatAllyPersonaGrowthDataTable::Param84' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param85) == 0x000273, "Member 'FDatAllyPersonaGrowthDataTable::Param85' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param86) == 0x000278, "Member 'FDatAllyPersonaGrowthDataTable::Param86' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param87) == 0x00027D, "Member 'FDatAllyPersonaGrowthDataTable::Param87' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param88) == 0x000282, "Member 'FDatAllyPersonaGrowthDataTable::Param88' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param89) == 0x000287, "Member 'FDatAllyPersonaGrowthDataTable::Param89' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param90) == 0x00028C, "Member 'FDatAllyPersonaGrowthDataTable::Param90' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param91) == 0x000291, "Member 'FDatAllyPersonaGrowthDataTable::Param91' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param92) == 0x000296, "Member 'FDatAllyPersonaGrowthDataTable::Param92' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param93) == 0x00029B, "Member 'FDatAllyPersonaGrowthDataTable::Param93' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param94) == 0x0002A0, "Member 'FDatAllyPersonaGrowthDataTable::Param94' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param95) == 0x0002A5, "Member 'FDatAllyPersonaGrowthDataTable::Param95' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param96) == 0x0002AA, "Member 'FDatAllyPersonaGrowthDataTable::Param96' has a wrong offset!");
static_assert(offsetof(FDatAllyPersonaGrowthDataTable, Param97) == 0x0002AF, "Member 'FDatAllyPersonaGrowthDataTable::Param97' has a wrong offset!");

// ScriptStruct xrd777.DatPersonaGrowthDataRecord
// 0x0066 (0x0066 - 0x0000)
struct FDatPersonaGrowthDataRecord final
{
public:
	uint8                                         ParamsUp[0x5];                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x1];                                        // 0x0005(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDatPersonaGrowthEventTable            SkillEvent[0x10];                                  // 0x0006(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatPersonaGrowthDataRecord) == 0x000002, "Wrong alignment on FDatPersonaGrowthDataRecord");
static_assert(sizeof(FDatPersonaGrowthDataRecord) == 0x000066, "Wrong size on FDatPersonaGrowthDataRecord");
static_assert(offsetof(FDatPersonaGrowthDataRecord, ParamsUp) == 0x000000, "Member 'FDatPersonaGrowthDataRecord::ParamsUp' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataRecord, SkillEvent) == 0x000006, "Member 'FDatPersonaGrowthDataRecord::SkillEvent' has a wrong offset!");

// ScriptStruct xrd777.DungeonDesignTypeID
// 0x000C (0x000C - 0x0000)
struct FDungeonDesignTypeID final
{
public:
	int32                                         MinFloor;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFloor;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DesignTypeID;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonDesignTypeID) == 0x000004, "Wrong alignment on FDungeonDesignTypeID");
static_assert(sizeof(FDungeonDesignTypeID) == 0x00000C, "Wrong size on FDungeonDesignTypeID");
static_assert(offsetof(FDungeonDesignTypeID, MinFloor) == 0x000000, "Member 'FDungeonDesignTypeID::MinFloor' has a wrong offset!");
static_assert(offsetof(FDungeonDesignTypeID, MaxFloor) == 0x000004, "Member 'FDungeonDesignTypeID::MaxFloor' has a wrong offset!");
static_assert(offsetof(FDungeonDesignTypeID, DesignTypeID) == 0x000008, "Member 'FDungeonDesignTypeID::DesignTypeID' has a wrong offset!");

// ScriptStruct xrd777.DungeonDesignTypesData
// 0x0010 (0x0010 - 0x0000)
struct FDungeonDesignTypesData final
{
public:
	TArray<struct FDungeonDesignTypeID>           DungeonDesignTypesData;                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonDesignTypesData) == 0x000008, "Wrong alignment on FDungeonDesignTypesData");
static_assert(sizeof(FDungeonDesignTypesData) == 0x000010, "Wrong size on FDungeonDesignTypesData");
static_assert(offsetof(FDungeonDesignTypesData, DungeonDesignTypesData) == 0x000000, "Member 'FDungeonDesignTypesData::DungeonDesignTypesData' has a wrong offset!");

// ScriptStruct xrd777.DatPersonaGrowthDataTable
// 0x0068 (0x0070 - 0x0008)
struct FDatPersonaGrowthDataTable final : public FTableRowBase
{
public:
	uint8                                         ParamsUp[0x5];                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x1];                                        // 0x000D(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDatPersonaGrowthEventTable            Event0;                                            // 0x000E(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event1;                                            // 0x0014(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event2;                                            // 0x001A(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event3;                                            // 0x0020(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event4;                                            // 0x0026(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event5;                                            // 0x002C(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event6;                                            // 0x0032(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event7;                                            // 0x0038(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event8;                                            // 0x003E(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event9;                                            // 0x0044(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event10;                                           // 0x004A(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event11;                                           // 0x0050(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event12;                                           // 0x0056(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event13;                                           // 0x005C(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event14;                                           // 0x0062(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatPersonaGrowthEventTable            Event15;                                           // 0x0068(0x0006)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatPersonaGrowthDataTable) == 0x000008, "Wrong alignment on FDatPersonaGrowthDataTable");
static_assert(sizeof(FDatPersonaGrowthDataTable) == 0x000070, "Wrong size on FDatPersonaGrowthDataTable");
static_assert(offsetof(FDatPersonaGrowthDataTable, ParamsUp) == 0x000008, "Member 'FDatPersonaGrowthDataTable::ParamsUp' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event0) == 0x00000E, "Member 'FDatPersonaGrowthDataTable::Event0' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event1) == 0x000014, "Member 'FDatPersonaGrowthDataTable::Event1' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event2) == 0x00001A, "Member 'FDatPersonaGrowthDataTable::Event2' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event3) == 0x000020, "Member 'FDatPersonaGrowthDataTable::Event3' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event4) == 0x000026, "Member 'FDatPersonaGrowthDataTable::Event4' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event5) == 0x00002C, "Member 'FDatPersonaGrowthDataTable::Event5' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event6) == 0x000032, "Member 'FDatPersonaGrowthDataTable::Event6' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event7) == 0x000038, "Member 'FDatPersonaGrowthDataTable::Event7' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event8) == 0x00003E, "Member 'FDatPersonaGrowthDataTable::Event8' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event9) == 0x000044, "Member 'FDatPersonaGrowthDataTable::Event9' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event10) == 0x00004A, "Member 'FDatPersonaGrowthDataTable::Event10' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event11) == 0x000050, "Member 'FDatPersonaGrowthDataTable::Event11' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event12) == 0x000056, "Member 'FDatPersonaGrowthDataTable::Event12' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event13) == 0x00005C, "Member 'FDatPersonaGrowthDataTable::Event13' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event14) == 0x000062, "Member 'FDatPersonaGrowthDataTable::Event14' has a wrong offset!");
static_assert(offsetof(FDatPersonaGrowthDataTable, Event15) == 0x000068, "Member 'FDatPersonaGrowthDataTable::Event15' has a wrong offset!");

// ScriptStruct xrd777.GetUIParameter
// 0x0078 (0x0078 - 0x0000)
struct FGetUIParameter final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIParameterAsset*                      ParameterAsset;                                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, float>                    ParameterMap;                                      // 0x0020(0x0050)(Protected, NativeAccessSpecifierProtected)
	class UAssetLoader*                           AssetLoader;                                       // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FGetUIParameter) == 0x000008, "Wrong alignment on FGetUIParameter");
static_assert(sizeof(FGetUIParameter) == 0x000078, "Wrong size on FGetUIParameter");
static_assert(offsetof(FGetUIParameter, ParameterAsset) == 0x000018, "Member 'FGetUIParameter::ParameterAsset' has a wrong offset!");
static_assert(offsetof(FGetUIParameter, ParameterMap) == 0x000020, "Member 'FGetUIParameter::ParameterMap' has a wrong offset!");
static_assert(offsetof(FGetUIParameter, AssetLoader) == 0x000070, "Member 'FGetUIParameter::AssetLoader' has a wrong offset!");

// ScriptStruct xrd777.DatAffinityDataRecord
// 0x0026 (0x0026 - 0x0000)
struct FDatAffinityDataRecord final
{
public:
	uint16                                        Attr[0x13];                                        // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatAffinityDataRecord) == 0x000002, "Wrong alignment on FDatAffinityDataRecord");
static_assert(sizeof(FDatAffinityDataRecord) == 0x000026, "Wrong size on FDatAffinityDataRecord");
static_assert(offsetof(FDatAffinityDataRecord, Attr) == 0x000000, "Member 'FDatAffinityDataRecord::Attr' has a wrong offset!");

// ScriptStruct xrd777.DatAffinityDataTable
// 0x0028 (0x0030 - 0x0008)
struct FDatAffinityDataTable final : public FTableRowBase
{
public:
	uint16                                        Slash;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Strike;                                            // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Pierce;                                            // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Fire;                                              // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Ice;                                               // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Electric;                                          // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Wind;                                              // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Almighty;                                          // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Light;                                             // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Dark;                                              // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Charm;                                             // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Poison;                                            // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Upset;                                             // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Panic;                                             // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Fear;                                              // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Anger;                                             // 0x0026(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Recovery;                                          // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Support;                                           // 0x002A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Special;                                           // 0x002C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatAffinityDataTable) == 0x000008, "Wrong alignment on FDatAffinityDataTable");
static_assert(sizeof(FDatAffinityDataTable) == 0x000030, "Wrong size on FDatAffinityDataTable");
static_assert(offsetof(FDatAffinityDataTable, Slash) == 0x000008, "Member 'FDatAffinityDataTable::Slash' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Strike) == 0x00000A, "Member 'FDatAffinityDataTable::Strike' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Pierce) == 0x00000C, "Member 'FDatAffinityDataTable::Pierce' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Fire) == 0x00000E, "Member 'FDatAffinityDataTable::Fire' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Ice) == 0x000010, "Member 'FDatAffinityDataTable::Ice' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Electric) == 0x000012, "Member 'FDatAffinityDataTable::Electric' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Wind) == 0x000014, "Member 'FDatAffinityDataTable::Wind' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Almighty) == 0x000016, "Member 'FDatAffinityDataTable::Almighty' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Light) == 0x000018, "Member 'FDatAffinityDataTable::Light' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Dark) == 0x00001A, "Member 'FDatAffinityDataTable::Dark' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Charm) == 0x00001C, "Member 'FDatAffinityDataTable::Charm' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Poison) == 0x00001E, "Member 'FDatAffinityDataTable::Poison' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Upset) == 0x000020, "Member 'FDatAffinityDataTable::Upset' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Panic) == 0x000022, "Member 'FDatAffinityDataTable::Panic' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Fear) == 0x000024, "Member 'FDatAffinityDataTable::Fear' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Anger) == 0x000026, "Member 'FDatAffinityDataTable::Anger' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Recovery) == 0x000028, "Member 'FDatAffinityDataTable::Recovery' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Support) == 0x00002A, "Member 'FDatAffinityDataTable::Support' has a wrong offset!");
static_assert(offsetof(FDatAffinityDataTable, Special) == 0x00002C, "Member 'FDatAffinityDataTable::Special' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaPackAnimationParams
// 0x0018 (0x0018 - 0x0000)
struct FMovieSceneEvtCharaPackAnimationParams final
{
public:
	EEventAnimID                                  EventAnimID;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonAnimID                                 CommonAnimID;                                      // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDungeonAnimID                                DungeonAnimID;                                     // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartOffset;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendIn;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOut;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvtCharaPackAnimationParams) == 0x000004, "Wrong alignment on FMovieSceneEvtCharaPackAnimationParams");
static_assert(sizeof(FMovieSceneEvtCharaPackAnimationParams) == 0x000018, "Wrong size on FMovieSceneEvtCharaPackAnimationParams");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationParams, EventAnimID) == 0x000000, "Member 'FMovieSceneEvtCharaPackAnimationParams::EventAnimID' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationParams, CommonAnimID) == 0x000001, "Member 'FMovieSceneEvtCharaPackAnimationParams::CommonAnimID' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationParams, DungeonAnimID) == 0x000002, "Member 'FMovieSceneEvtCharaPackAnimationParams::DungeonAnimID' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationParams, StartOffset) == 0x000004, "Member 'FMovieSceneEvtCharaPackAnimationParams::StartOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationParams, EndOffset) == 0x000008, "Member 'FMovieSceneEvtCharaPackAnimationParams::EndOffset' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationParams, BlendIn) == 0x00000C, "Member 'FMovieSceneEvtCharaPackAnimationParams::BlendIn' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationParams, BlendOut) == 0x000010, "Member 'FMovieSceneEvtCharaPackAnimationParams::BlendOut' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationParams, PlayRate) == 0x000014, "Member 'FMovieSceneEvtCharaPackAnimationParams::PlayRate' has a wrong offset!");

// ScriptStruct xrd777.EvtCharaPackAnimationPayload
// 0x0030 (0x0030 - 0x0000)
struct FEvtCharaPackAnimationPayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonAnimID                                 AnimId;                                            // 0x0008(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtCharaAnimationPackIDType                  UsingAnimIDType;                                   // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEventAnimID                                  EventAnimID;                                       // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonAnimID                                 CommonAnimID;                                      // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDungeonAnimID                                DungeonAnimID;                                     // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBagSlot;                                          // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtCharaAnimationType                        MultiAnimCharaAnimationType;                       // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovieSceneEvtCharaPackAnimationParams> AnimArray;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtCharaPackAnimationPayload) == 0x000008, "Wrong alignment on FEvtCharaPackAnimationPayload");
static_assert(sizeof(FEvtCharaPackAnimationPayload) == 0x000030, "Wrong size on FEvtCharaPackAnimationPayload");
static_assert(offsetof(FEvtCharaPackAnimationPayload, EventName) == 0x000000, "Member 'FEvtCharaPackAnimationPayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackAnimationPayload, AnimId) == 0x000008, "Member 'FEvtCharaPackAnimationPayload::AnimId' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackAnimationPayload, UsingAnimIDType) == 0x000009, "Member 'FEvtCharaPackAnimationPayload::UsingAnimIDType' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackAnimationPayload, EventAnimID) == 0x00000A, "Member 'FEvtCharaPackAnimationPayload::EventAnimID' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackAnimationPayload, CommonAnimID) == 0x00000B, "Member 'FEvtCharaPackAnimationPayload::CommonAnimID' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackAnimationPayload, DungeonAnimID) == 0x00000C, "Member 'FEvtCharaPackAnimationPayload::DungeonAnimID' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackAnimationPayload, bLoop) == 0x00000D, "Member 'FEvtCharaPackAnimationPayload::bLoop' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackAnimationPayload, BlendInTime) == 0x000010, "Member 'FEvtCharaPackAnimationPayload::BlendInTime' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackAnimationPayload, BlendOutTime) == 0x000014, "Member 'FEvtCharaPackAnimationPayload::BlendOutTime' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackAnimationPayload, PlayRate) == 0x000018, "Member 'FEvtCharaPackAnimationPayload::PlayRate' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackAnimationPayload, bBagSlot) == 0x00001C, "Member 'FEvtCharaPackAnimationPayload::bBagSlot' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackAnimationPayload, MultiAnimCharaAnimationType) == 0x00001D, "Member 'FEvtCharaPackAnimationPayload::MultiAnimCharaAnimationType' has a wrong offset!");
static_assert(offsetof(FEvtCharaPackAnimationPayload, AnimArray) == 0x000020, "Member 'FEvtCharaPackAnimationPayload::AnimArray' has a wrong offset!");

// ScriptStruct xrd777.DatPersonaName
// 0x0018 (0x0018 - 0x0000)
struct FDatPersonaName final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatPersonaName) == 0x000008, "Wrong alignment on FDatPersonaName");
static_assert(sizeof(FDatPersonaName) == 0x000018, "Wrong size on FDatPersonaName");
static_assert(offsetof(FDatPersonaName, Name) == 0x000000, "Member 'FDatPersonaName::Name' has a wrong offset!");

// ScriptStruct xrd777.DungeonUIBaseData
// 0x0010 (0x0010 - 0x0000)
struct FDungeonUIBaseData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawOrder;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDungeonUIBlendStateType                      BlendStateType;                                    // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDungeonUIBaseData) == 0x000004, "Wrong alignment on FDungeonUIBaseData");
static_assert(sizeof(FDungeonUIBaseData) == 0x000010, "Wrong size on FDungeonUIBaseData");
static_assert(offsetof(FDungeonUIBaseData, Name) == 0x000000, "Member 'FDungeonUIBaseData::Name' has a wrong offset!");
static_assert(offsetof(FDungeonUIBaseData, DrawOrder) == 0x000008, "Member 'FDungeonUIBaseData::DrawOrder' has a wrong offset!");
static_assert(offsetof(FDungeonUIBaseData, BlendStateType) == 0x00000C, "Member 'FDungeonUIBaseData::BlendStateType' has a wrong offset!");

// ScriptStruct xrd777.DungeonUIMaskInfo
// 0x000C (0x000C - 0x0000)
struct FDungeonUIMaskInfo final
{
public:
	bool                                          MaskOnly;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MaskTargetName;                                    // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonUIMaskInfo) == 0x000004, "Wrong alignment on FDungeonUIMaskInfo");
static_assert(sizeof(FDungeonUIMaskInfo) == 0x00000C, "Wrong size on FDungeonUIMaskInfo");
static_assert(offsetof(FDungeonUIMaskInfo, MaskOnly) == 0x000000, "Member 'FDungeonUIMaskInfo::MaskOnly' has a wrong offset!");
static_assert(offsetof(FDungeonUIMaskInfo, MaskTargetName) == 0x000004, "Member 'FDungeonUIMaskInfo::MaskTargetName' has a wrong offset!");

// ScriptStruct xrd777.DungeonUISprData
// 0x0050 (0x0050 - 0x0000)
struct FDungeonUISprData final
{
public:
	struct FDungeonUIBaseData                     BaseData;                                          // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDungeonUIMaskInfo                     MaskInfo;                                          // 0x0010(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EDungeonUISpriteType                          SprType;                                           // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GrpNo;                                             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprNo;                                             // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDungeonUISpriteOrigin                        Origin;                                            // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Pos;                                               // 0x002C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RGBA[0x4];                                         // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMin[0x2];                                     // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleMax[0x2];                                     // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MsgWSync;                                          // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDungeonUISprData) == 0x000004, "Wrong alignment on FDungeonUISprData");
static_assert(sizeof(FDungeonUISprData) == 0x000050, "Wrong size on FDungeonUISprData");
static_assert(offsetof(FDungeonUISprData, BaseData) == 0x000000, "Member 'FDungeonUISprData::BaseData' has a wrong offset!");
static_assert(offsetof(FDungeonUISprData, MaskInfo) == 0x000010, "Member 'FDungeonUISprData::MaskInfo' has a wrong offset!");
static_assert(offsetof(FDungeonUISprData, SprType) == 0x00001C, "Member 'FDungeonUISprData::SprType' has a wrong offset!");
static_assert(offsetof(FDungeonUISprData, GrpNo) == 0x000020, "Member 'FDungeonUISprData::GrpNo' has a wrong offset!");
static_assert(offsetof(FDungeonUISprData, SprNo) == 0x000024, "Member 'FDungeonUISprData::SprNo' has a wrong offset!");
static_assert(offsetof(FDungeonUISprData, Origin) == 0x000028, "Member 'FDungeonUISprData::Origin' has a wrong offset!");
static_assert(offsetof(FDungeonUISprData, Pos) == 0x00002C, "Member 'FDungeonUISprData::Pos' has a wrong offset!");
static_assert(offsetof(FDungeonUISprData, RGBA) == 0x000038, "Member 'FDungeonUISprData::RGBA' has a wrong offset!");
static_assert(offsetof(FDungeonUISprData, ScaleMin) == 0x00003C, "Member 'FDungeonUISprData::ScaleMin' has a wrong offset!");
static_assert(offsetof(FDungeonUISprData, ScaleMax) == 0x000044, "Member 'FDungeonUISprData::ScaleMax' has a wrong offset!");
static_assert(offsetof(FDungeonUISprData, MsgWSync) == 0x00004C, "Member 'FDungeonUISprData::MsgWSync' has a wrong offset!");

// ScriptStruct xrd777.DungeonUIVertexData
// 0x0014 (0x0014 - 0x0000)
struct FDungeonUIVertexData final
{
public:
	struct FVector                                Ver;                                               // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MsgWSync;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MsgWSyncOffsSize;                                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonUIVertexData) == 0x000004, "Wrong alignment on FDungeonUIVertexData");
static_assert(sizeof(FDungeonUIVertexData) == 0x000014, "Wrong size on FDungeonUIVertexData");
static_assert(offsetof(FDungeonUIVertexData, Ver) == 0x000000, "Member 'FDungeonUIVertexData::Ver' has a wrong offset!");
static_assert(offsetof(FDungeonUIVertexData, MsgWSync) == 0x00000C, "Member 'FDungeonUIVertexData::MsgWSync' has a wrong offset!");
static_assert(offsetof(FDungeonUIVertexData, MsgWSyncOffsSize) == 0x000010, "Member 'FDungeonUIVertexData::MsgWSyncOffsSize' has a wrong offset!");

// ScriptStruct xrd777.DungeonUIPrimData
// 0x0038 (0x0038 - 0x0000)
struct FDungeonUIPrimData final
{
public:
	struct FDungeonUIBaseData                     BaseData;                                          // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FDungeonUIMaskInfo                     MaskInfo;                                          // 0x0010(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDungeonUIVertexData>           Vertex;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RGBA[0x4];                                         // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonUIPrimData) == 0x000008, "Wrong alignment on FDungeonUIPrimData");
static_assert(sizeof(FDungeonUIPrimData) == 0x000038, "Wrong size on FDungeonUIPrimData");
static_assert(offsetof(FDungeonUIPrimData, BaseData) == 0x000000, "Member 'FDungeonUIPrimData::BaseData' has a wrong offset!");
static_assert(offsetof(FDungeonUIPrimData, MaskInfo) == 0x000010, "Member 'FDungeonUIPrimData::MaskInfo' has a wrong offset!");
static_assert(offsetof(FDungeonUIPrimData, Vertex) == 0x000020, "Member 'FDungeonUIPrimData::Vertex' has a wrong offset!");
static_assert(offsetof(FDungeonUIPrimData, Z) == 0x000030, "Member 'FDungeonUIPrimData::Z' has a wrong offset!");
static_assert(offsetof(FDungeonUIPrimData, RGBA) == 0x000034, "Member 'FDungeonUIPrimData::RGBA' has a wrong offset!");

// ScriptStruct xrd777.DungeonUIMsgData
// 0x0028 (0x0028 - 0x0000)
struct FDungeonUIMsgData final
{
public:
	struct FDungeonUIBaseData                     BaseData;                                          // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDungeonUIFontStyle                           FontStyle;                                         // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FontRGBA[0x4];                                     // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineBreakWidth;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonUIMsgData) == 0x000004, "Wrong alignment on FDungeonUIMsgData");
static_assert(sizeof(FDungeonUIMsgData) == 0x000028, "Wrong size on FDungeonUIMsgData");
static_assert(offsetof(FDungeonUIMsgData, BaseData) == 0x000000, "Member 'FDungeonUIMsgData::BaseData' has a wrong offset!");
static_assert(offsetof(FDungeonUIMsgData, Pos) == 0x000010, "Member 'FDungeonUIMsgData::Pos' has a wrong offset!");
static_assert(offsetof(FDungeonUIMsgData, FontStyle) == 0x00001C, "Member 'FDungeonUIMsgData::FontStyle' has a wrong offset!");
static_assert(offsetof(FDungeonUIMsgData, FontRGBA) == 0x00001D, "Member 'FDungeonUIMsgData::FontRGBA' has a wrong offset!");
static_assert(offsetof(FDungeonUIMsgData, LineBreakWidth) == 0x000024, "Member 'FDungeonUIMsgData::LineBreakWidth' has a wrong offset!");

// ScriptStruct xrd777.DungeonUIItemNameData
// 0x003C (0x003C - 0x0000)
struct FDungeonUIItemNameData final
{
public:
	struct FDungeonUIBaseData                     BaseData;                                          // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              IconPivot;                                         // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                IconPos;                                           // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IconScale;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NamePos;                                           // 0x0028(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDungeonUIFontStyle                           FontStyle;                                         // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FontRGBA[0x4];                                     // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDungeonUIItemNameData) == 0x000004, "Wrong alignment on FDungeonUIItemNameData");
static_assert(sizeof(FDungeonUIItemNameData) == 0x00003C, "Wrong size on FDungeonUIItemNameData");
static_assert(offsetof(FDungeonUIItemNameData, BaseData) == 0x000000, "Member 'FDungeonUIItemNameData::BaseData' has a wrong offset!");
static_assert(offsetof(FDungeonUIItemNameData, IconPivot) == 0x000010, "Member 'FDungeonUIItemNameData::IconPivot' has a wrong offset!");
static_assert(offsetof(FDungeonUIItemNameData, IconPos) == 0x000018, "Member 'FDungeonUIItemNameData::IconPos' has a wrong offset!");
static_assert(offsetof(FDungeonUIItemNameData, IconScale) == 0x000024, "Member 'FDungeonUIItemNameData::IconScale' has a wrong offset!");
static_assert(offsetof(FDungeonUIItemNameData, NamePos) == 0x000028, "Member 'FDungeonUIItemNameData::NamePos' has a wrong offset!");
static_assert(offsetof(FDungeonUIItemNameData, FontStyle) == 0x000034, "Member 'FDungeonUIItemNameData::FontStyle' has a wrong offset!");
static_assert(offsetof(FDungeonUIItemNameData, FontRGBA) == 0x000035, "Member 'FDungeonUIItemNameData::FontRGBA' has a wrong offset!");

// ScriptStruct xrd777.DungeonUIMoneyData
// 0x0024 (0x0024 - 0x0000)
struct FDungeonUIMoneyData final
{
public:
	struct FDungeonUIBaseData                     BaseData;                                          // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDungeonUIFontStyle                           FontStyle;                                         // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FontRGBA[0x4];                                     // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDungeonUIMoneyData) == 0x000004, "Wrong alignment on FDungeonUIMoneyData");
static_assert(sizeof(FDungeonUIMoneyData) == 0x000024, "Wrong size on FDungeonUIMoneyData");
static_assert(offsetof(FDungeonUIMoneyData, BaseData) == 0x000000, "Member 'FDungeonUIMoneyData::BaseData' has a wrong offset!");
static_assert(offsetof(FDungeonUIMoneyData, Pos) == 0x000010, "Member 'FDungeonUIMoneyData::Pos' has a wrong offset!");
static_assert(offsetof(FDungeonUIMoneyData, FontStyle) == 0x00001C, "Member 'FDungeonUIMoneyData::FontStyle' has a wrong offset!");
static_assert(offsetof(FDungeonUIMoneyData, FontRGBA) == 0x00001D, "Member 'FDungeonUIMoneyData::FontRGBA' has a wrong offset!");

// ScriptStruct xrd777.DungeonUIAlphaAnimData
// 0x0008 (0x0008 - 0x0000)
struct FDungeonUIAlphaAnimData final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonUIAlphaAnimData) == 0x000004, "Wrong alignment on FDungeonUIAlphaAnimData");
static_assert(sizeof(FDungeonUIAlphaAnimData) == 0x000008, "Wrong size on FDungeonUIAlphaAnimData");
static_assert(offsetof(FDungeonUIAlphaAnimData, Time) == 0x000000, "Member 'FDungeonUIAlphaAnimData::Time' has a wrong offset!");
static_assert(offsetof(FDungeonUIAlphaAnimData, Alpha) == 0x000004, "Member 'FDungeonUIAlphaAnimData::Alpha' has a wrong offset!");

// ScriptStruct xrd777.DungeonUIAnimData
// 0x0020 (0x0020 - 0x0000)
struct FDungeonUIAnimData final
{
public:
	TArray<struct FDungeonUIPosAnimData>          PosAnim;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDungeonUIAlphaAnimData>        AlphaAnim;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonUIAnimData) == 0x000008, "Wrong alignment on FDungeonUIAnimData");
static_assert(sizeof(FDungeonUIAnimData) == 0x000020, "Wrong size on FDungeonUIAnimData");
static_assert(offsetof(FDungeonUIAnimData, PosAnim) == 0x000000, "Member 'FDungeonUIAnimData::PosAnim' has a wrong offset!");
static_assert(offsetof(FDungeonUIAnimData, AlphaAnim) == 0x000010, "Member 'FDungeonUIAnimData::AlphaAnim' has a wrong offset!");

// ScriptStruct xrd777.DungeonUIDrawData
// 0x00A8 (0x00A8 - 0x0000)
struct FDungeonUIDrawData final
{
public:
	float                                         LifeSpan;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BasePos;                                           // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDungeonUISprData>              Sprite;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDungeonUIPrimData>             Primitive;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDungeonUIMsgData>              Massage;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDungeonUIItemNameData>         ItemName;                                          // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDungeonUIMoneyData>            Money;                                             // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDungeonUIAnimData                     FadeIn;                                            // 0x0060(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FDungeonUIAnimData                     FadeOut;                                           // 0x0080(0x0020)(Edit, NativeAccessSpecifierPublic)
	int32                                         MsgSyncMinWordCount;                               // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MsgSuncMaxWordCount;                               // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonUIDrawData) == 0x000008, "Wrong alignment on FDungeonUIDrawData");
static_assert(sizeof(FDungeonUIDrawData) == 0x0000A8, "Wrong size on FDungeonUIDrawData");
static_assert(offsetof(FDungeonUIDrawData, LifeSpan) == 0x000000, "Member 'FDungeonUIDrawData::LifeSpan' has a wrong offset!");
static_assert(offsetof(FDungeonUIDrawData, BasePos) == 0x000004, "Member 'FDungeonUIDrawData::BasePos' has a wrong offset!");
static_assert(offsetof(FDungeonUIDrawData, Sprite) == 0x000010, "Member 'FDungeonUIDrawData::Sprite' has a wrong offset!");
static_assert(offsetof(FDungeonUIDrawData, Primitive) == 0x000020, "Member 'FDungeonUIDrawData::Primitive' has a wrong offset!");
static_assert(offsetof(FDungeonUIDrawData, Massage) == 0x000030, "Member 'FDungeonUIDrawData::Massage' has a wrong offset!");
static_assert(offsetof(FDungeonUIDrawData, ItemName) == 0x000040, "Member 'FDungeonUIDrawData::ItemName' has a wrong offset!");
static_assert(offsetof(FDungeonUIDrawData, Money) == 0x000050, "Member 'FDungeonUIDrawData::Money' has a wrong offset!");
static_assert(offsetof(FDungeonUIDrawData, FadeIn) == 0x000060, "Member 'FDungeonUIDrawData::FadeIn' has a wrong offset!");
static_assert(offsetof(FDungeonUIDrawData, FadeOut) == 0x000080, "Member 'FDungeonUIDrawData::FadeOut' has a wrong offset!");
static_assert(offsetof(FDungeonUIDrawData, MsgSyncMinWordCount) == 0x0000A0, "Member 'FDungeonUIDrawData::MsgSyncMinWordCount' has a wrong offset!");
static_assert(offsetof(FDungeonUIDrawData, MsgSuncMaxWordCount) == 0x0000A4, "Member 'FDungeonUIDrawData::MsgSuncMaxWordCount' has a wrong offset!");

// ScriptStruct xrd777.DatPersonaDataRecord
// 0x000E (0x000E - 0x0000)
struct FDatPersonaDataRecord final
{
public:
	uint16                                        Flag;                                              // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Race;                                              // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Level;                                             // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Params[0x5];                                       // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         breakage;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Succession;                                        // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Conception;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Message;                                           // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatPersonaDataRecord) == 0x000002, "Wrong alignment on FDatPersonaDataRecord");
static_assert(sizeof(FDatPersonaDataRecord) == 0x00000E, "Wrong size on FDatPersonaDataRecord");
static_assert(offsetof(FDatPersonaDataRecord, Flag) == 0x000000, "Member 'FDatPersonaDataRecord::Flag' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataRecord, Race) == 0x000002, "Member 'FDatPersonaDataRecord::Race' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataRecord, Level) == 0x000003, "Member 'FDatPersonaDataRecord::Level' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataRecord, Params) == 0x000004, "Member 'FDatPersonaDataRecord::Params' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataRecord, breakage) == 0x000009, "Member 'FDatPersonaDataRecord::breakage' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataRecord, Succession) == 0x00000A, "Member 'FDatPersonaDataRecord::Succession' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataRecord, Conception) == 0x00000C, "Member 'FDatPersonaDataRecord::Conception' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataRecord, Message) == 0x00000D, "Member 'FDatPersonaDataRecord::Message' has a wrong offset!");

// ScriptStruct xrd777.FldCharAreaParam
// 0x0018 (0x0018 - 0x0000)
struct FFldCharAreaParam final
{
public:
	struct FVector                                Offset;                                            // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BoxExtent;                                         // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldCharAreaParam) == 0x000004, "Wrong alignment on FFldCharAreaParam");
static_assert(sizeof(FFldCharAreaParam) == 0x000018, "Wrong size on FFldCharAreaParam");
static_assert(offsetof(FFldCharAreaParam, Offset) == 0x000000, "Member 'FFldCharAreaParam::Offset' has a wrong offset!");
static_assert(offsetof(FFldCharAreaParam, BoxExtent) == 0x00000C, "Member 'FFldCharAreaParam::BoxExtent' has a wrong offset!");

// ScriptStruct xrd777.DatPersonaDataTable
// 0x0010 (0x0018 - 0x0008)
struct FDatPersonaDataTable final : public FTableRowBase
{
public:
	uint16                                        Flag;                                              // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Race;                                              // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Level;                                             // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Params[0x5];                                       // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         breakage;                                          // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Succession;                                        // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Conception;                                        // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Message;                                           // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatPersonaDataTable) == 0x000008, "Wrong alignment on FDatPersonaDataTable");
static_assert(sizeof(FDatPersonaDataTable) == 0x000018, "Wrong size on FDatPersonaDataTable");
static_assert(offsetof(FDatPersonaDataTable, Flag) == 0x000008, "Member 'FDatPersonaDataTable::Flag' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataTable, Race) == 0x00000A, "Member 'FDatPersonaDataTable::Race' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataTable, Level) == 0x00000B, "Member 'FDatPersonaDataTable::Level' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataTable, Params) == 0x00000C, "Member 'FDatPersonaDataTable::Params' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataTable, breakage) == 0x000011, "Member 'FDatPersonaDataTable::breakage' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataTable, Succession) == 0x000012, "Member 'FDatPersonaDataTable::Succession' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataTable, Conception) == 0x000014, "Member 'FDatPersonaDataTable::Conception' has a wrong offset!");
static_assert(offsetof(FDatPersonaDataTable, Message) == 0x000015, "Member 'FDatPersonaDataTable::Message' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtDialogueOptionsParameters
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMovieSceneEvtDialogueOptionsParameters final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtDialogueOptionsParameters) == 0x000008, "Wrong alignment on FMovieSceneEvtDialogueOptionsParameters");
static_assert(sizeof(FMovieSceneEvtDialogueOptionsParameters) == 0x000028, "Wrong size on FMovieSceneEvtDialogueOptionsParameters");

// ScriptStruct xrd777.EvtDialogueOptionsPayload
// 0x0030 (0x0030 - 0x0000)
struct FEvtDialogueOptionsPayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneEvtDialogueOptionsParameters Parameters;                                        // 0x0008(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtDialogueOptionsPayload) == 0x000008, "Wrong alignment on FEvtDialogueOptionsPayload");
static_assert(sizeof(FEvtDialogueOptionsPayload) == 0x000030, "Wrong size on FEvtDialogueOptionsPayload");
static_assert(offsetof(FEvtDialogueOptionsPayload, EventName) == 0x000000, "Member 'FEvtDialogueOptionsPayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtDialogueOptionsPayload, Parameters) == 0x000008, "Member 'FEvtDialogueOptionsPayload::Parameters' has a wrong offset!");

// ScriptStruct xrd777.DatEnemyName
// 0x0018 (0x0018 - 0x0000)
struct FDatEnemyName final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatEnemyName) == 0x000008, "Wrong alignment on FDatEnemyName");
static_assert(sizeof(FDatEnemyName) == 0x000018, "Wrong size on FDatEnemyName");
static_assert(offsetof(FDatEnemyName, Name) == 0x000000, "Member 'FDatEnemyName::Name' has a wrong offset!");

// ScriptStruct xrd777.DatEnemyAnalyzeSyncDataRecord
// 0x0014 (0x0014 - 0x0000)
struct FDatEnemyAnalyzeSyncDataRecord final
{
public:
	uint16                                        EnemyID[0xA];                                      // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatEnemyAnalyzeSyncDataRecord) == 0x000002, "Wrong alignment on FDatEnemyAnalyzeSyncDataRecord");
static_assert(sizeof(FDatEnemyAnalyzeSyncDataRecord) == 0x000014, "Wrong size on FDatEnemyAnalyzeSyncDataRecord");
static_assert(offsetof(FDatEnemyAnalyzeSyncDataRecord, EnemyID) == 0x000000, "Member 'FDatEnemyAnalyzeSyncDataRecord::EnemyID' has a wrong offset!");

// ScriptStruct xrd777.DatEnemyAnalyzeSyncDataTable
// 0x0030 (0x0038 - 0x0008)
struct FDatEnemyAnalyzeSyncDataTable final : public FTableRowBase
{
public:
	uint16                                        EnemyID0;                                          // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EnemyID1;                                          // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EnemyID2;                                          // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EnemyID3;                                          // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EnemyID4;                                          // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EnemyID5;                                          // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EnemyID6;                                          // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EnemyID7;                                          // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EnemyID8;                                          // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EnemyID9;                                          // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Comment;                                           // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatEnemyAnalyzeSyncDataTable) == 0x000008, "Wrong alignment on FDatEnemyAnalyzeSyncDataTable");
static_assert(sizeof(FDatEnemyAnalyzeSyncDataTable) == 0x000038, "Wrong size on FDatEnemyAnalyzeSyncDataTable");
static_assert(offsetof(FDatEnemyAnalyzeSyncDataTable, EnemyID0) == 0x000008, "Member 'FDatEnemyAnalyzeSyncDataTable::EnemyID0' has a wrong offset!");
static_assert(offsetof(FDatEnemyAnalyzeSyncDataTable, EnemyID1) == 0x00000A, "Member 'FDatEnemyAnalyzeSyncDataTable::EnemyID1' has a wrong offset!");
static_assert(offsetof(FDatEnemyAnalyzeSyncDataTable, EnemyID2) == 0x00000C, "Member 'FDatEnemyAnalyzeSyncDataTable::EnemyID2' has a wrong offset!");
static_assert(offsetof(FDatEnemyAnalyzeSyncDataTable, EnemyID3) == 0x00000E, "Member 'FDatEnemyAnalyzeSyncDataTable::EnemyID3' has a wrong offset!");
static_assert(offsetof(FDatEnemyAnalyzeSyncDataTable, EnemyID4) == 0x000010, "Member 'FDatEnemyAnalyzeSyncDataTable::EnemyID4' has a wrong offset!");
static_assert(offsetof(FDatEnemyAnalyzeSyncDataTable, EnemyID5) == 0x000012, "Member 'FDatEnemyAnalyzeSyncDataTable::EnemyID5' has a wrong offset!");
static_assert(offsetof(FDatEnemyAnalyzeSyncDataTable, EnemyID6) == 0x000014, "Member 'FDatEnemyAnalyzeSyncDataTable::EnemyID6' has a wrong offset!");
static_assert(offsetof(FDatEnemyAnalyzeSyncDataTable, EnemyID7) == 0x000016, "Member 'FDatEnemyAnalyzeSyncDataTable::EnemyID7' has a wrong offset!");
static_assert(offsetof(FDatEnemyAnalyzeSyncDataTable, EnemyID8) == 0x000018, "Member 'FDatEnemyAnalyzeSyncDataTable::EnemyID8' has a wrong offset!");
static_assert(offsetof(FDatEnemyAnalyzeSyncDataTable, EnemyID9) == 0x00001A, "Member 'FDatEnemyAnalyzeSyncDataTable::EnemyID9' has a wrong offset!");
static_assert(offsetof(FDatEnemyAnalyzeSyncDataTable, Comment) == 0x000020, "Member 'FDatEnemyAnalyzeSyncDataTable::Comment' has a wrong offset!");

// ScriptStruct xrd777.FldHeadIconData
// 0x0020 (0x0020 - 0x0000)
struct FFldHeadIconData final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MClassIndex;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 MActor;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAppCharTransparency                   MTransparency;                                     // 0x0010(0x000C)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldHeadIconData) == 0x000008, "Wrong alignment on FFldHeadIconData");
static_assert(sizeof(FFldHeadIconData) == 0x000020, "Wrong size on FFldHeadIconData");
static_assert(offsetof(FFldHeadIconData, bIsVisible) == 0x000000, "Member 'FFldHeadIconData::bIsVisible' has a wrong offset!");
static_assert(offsetof(FFldHeadIconData, MClassIndex) == 0x000004, "Member 'FFldHeadIconData::MClassIndex' has a wrong offset!");
static_assert(offsetof(FFldHeadIconData, MActor) == 0x000008, "Member 'FFldHeadIconData::MActor' has a wrong offset!");
static_assert(offsetof(FFldHeadIconData, MTransparency) == 0x000010, "Member 'FFldHeadIconData::MTransparency' has a wrong offset!");

// ScriptStruct xrd777.DatEnemyAttackTable
// 0x0004 (0x0004 - 0x0000)
struct FDatEnemyAttackTable final
{
public:
	uint8                                         Attr;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Hit;                                               // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Power;                                             // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatEnemyAttackTable) == 0x000002, "Wrong alignment on FDatEnemyAttackTable");
static_assert(sizeof(FDatEnemyAttackTable) == 0x000004, "Wrong size on FDatEnemyAttackTable");
static_assert(offsetof(FDatEnemyAttackTable, Attr) == 0x000000, "Member 'FDatEnemyAttackTable::Attr' has a wrong offset!");
static_assert(offsetof(FDatEnemyAttackTable, Hit) == 0x000001, "Member 'FDatEnemyAttackTable::Hit' has a wrong offset!");
static_assert(offsetof(FDatEnemyAttackTable, Power) == 0x000002, "Member 'FDatEnemyAttackTable::Power' has a wrong offset!");

// ScriptStruct xrd777.DatEnemyEventItemTable
// 0x0008 (0x0008 - 0x0000)
struct FDatEnemyEventItemTable final
{
public:
	uint32                                        Event;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ID;                                                // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Prob;                                              // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatEnemyEventItemTable) == 0x000004, "Wrong alignment on FDatEnemyEventItemTable");
static_assert(sizeof(FDatEnemyEventItemTable) == 0x000008, "Wrong size on FDatEnemyEventItemTable");
static_assert(offsetof(FDatEnemyEventItemTable, Event) == 0x000000, "Member 'FDatEnemyEventItemTable::Event' has a wrong offset!");
static_assert(offsetof(FDatEnemyEventItemTable, ID) == 0x000004, "Member 'FDatEnemyEventItemTable::ID' has a wrong offset!");
static_assert(offsetof(FDatEnemyEventItemTable, Prob) == 0x000006, "Member 'FDatEnemyEventItemTable::Prob' has a wrong offset!");

// ScriptStruct xrd777.DatEnemyDataRecord
// 0x004C (0x004C - 0x0000)
struct FDatEnemyDataRecord final
{
public:
	uint32                                        Flags;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Race;                                              // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x1];                                        // 0x0005(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         Level;                                             // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHp;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSp;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Params[0x5];                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x1];                                       // 0x0015(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        Skill[0x8];                                        // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Exp;                                               // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Money;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDatEnemyItemTable                     Item[0x4];                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatEnemyEventItemTable                Eventitem;                                         // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatEnemyAttackTable                   Attack;                                            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatEnemyDataRecord) == 0x000004, "Wrong alignment on FDatEnemyDataRecord");
static_assert(sizeof(FDatEnemyDataRecord) == 0x00004C, "Wrong size on FDatEnemyDataRecord");
static_assert(offsetof(FDatEnemyDataRecord, Flags) == 0x000000, "Member 'FDatEnemyDataRecord::Flags' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataRecord, Race) == 0x000004, "Member 'FDatEnemyDataRecord::Race' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataRecord, Level) == 0x000006, "Member 'FDatEnemyDataRecord::Level' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataRecord, MaxHp) == 0x000008, "Member 'FDatEnemyDataRecord::MaxHp' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataRecord, MaxSp) == 0x00000C, "Member 'FDatEnemyDataRecord::MaxSp' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataRecord, Params) == 0x000010, "Member 'FDatEnemyDataRecord::Params' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataRecord, Skill) == 0x000016, "Member 'FDatEnemyDataRecord::Skill' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataRecord, Exp) == 0x000028, "Member 'FDatEnemyDataRecord::Exp' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataRecord, Money) == 0x00002C, "Member 'FDatEnemyDataRecord::Money' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataRecord, Item) == 0x000030, "Member 'FDatEnemyDataRecord::Item' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataRecord, Eventitem) == 0x000040, "Member 'FDatEnemyDataRecord::Eventitem' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataRecord, Attack) == 0x000048, "Member 'FDatEnemyDataRecord::Attack' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaPackAnimationSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtCharaPackAnimationSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtCharaPackAnimationPayload>  KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaPackAnimationSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaPackAnimationSectionData");
static_assert(sizeof(FMovieSceneEvtCharaPackAnimationSectionData) == 0x000088, "Wrong size on FMovieSceneEvtCharaPackAnimationSectionData");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtCharaPackAnimationSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtCharaPackAnimationSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.FldHitCharaIconParam
// 0x000C (0x000C - 0x0000)
struct FFldHitCharaIconParam final
{
public:
	class FName                                   MFlagName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldHitCharaIconType                          MIconType;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldHitCharaIconParam) == 0x000004, "Wrong alignment on FFldHitCharaIconParam");
static_assert(sizeof(FFldHitCharaIconParam) == 0x00000C, "Wrong size on FFldHitCharaIconParam");
static_assert(offsetof(FFldHitCharaIconParam, MFlagName) == 0x000000, "Member 'FFldHitCharaIconParam::MFlagName' has a wrong offset!");
static_assert(offsetof(FFldHitCharaIconParam, MIconType) == 0x000008, "Member 'FFldHitCharaIconParam::MIconType' has a wrong offset!");

// ScriptStruct xrd777.FldCmmNpcLayoutData
// 0x0090 (0x0090 - 0x0000)
struct FFldCmmNpcLayoutData final
{
public:
	int32                                         MUniqueID;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MArcanaID;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MFieldPartsID;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldCmmNpcType                                MType;                                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldHitCharaIconType                          MIconType;                                         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFldHitCharaIconParam>          MChangeIcons;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MNameIndex;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MOnFlagName;                                       // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MOffFlagName;                                      // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     MCharaTrans;                                       // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MIconTran;                                         // 0x0050(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNotMapInfo;                                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldCmmNpcLayoutData) == 0x000010, "Wrong alignment on FFldCmmNpcLayoutData");
static_assert(sizeof(FFldCmmNpcLayoutData) == 0x000090, "Wrong size on FFldCmmNpcLayoutData");
static_assert(offsetof(FFldCmmNpcLayoutData, MUniqueID) == 0x000000, "Member 'FFldCmmNpcLayoutData::MUniqueID' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutData, MArcanaID) == 0x000004, "Member 'FFldCmmNpcLayoutData::MArcanaID' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutData, MFieldPartsID) == 0x000008, "Member 'FFldCmmNpcLayoutData::MFieldPartsID' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutData, MType) == 0x00000C, "Member 'FFldCmmNpcLayoutData::MType' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutData, MIconType) == 0x00000D, "Member 'FFldCmmNpcLayoutData::MIconType' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutData, MChangeIcons) == 0x000010, "Member 'FFldCmmNpcLayoutData::MChangeIcons' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutData, MNameIndex) == 0x000020, "Member 'FFldCmmNpcLayoutData::MNameIndex' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutData, MOnFlagName) == 0x000024, "Member 'FFldCmmNpcLayoutData::MOnFlagName' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutData, MOffFlagName) == 0x00002C, "Member 'FFldCmmNpcLayoutData::MOffFlagName' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutData, MCharaTrans) == 0x000038, "Member 'FFldCmmNpcLayoutData::MCharaTrans' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutData, MIconTran) == 0x000050, "Member 'FFldCmmNpcLayoutData::MIconTran' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutData, bNotMapInfo) == 0x000080, "Member 'FFldCmmNpcLayoutData::bNotMapInfo' has a wrong offset!");

// ScriptStruct xrd777.FldCmmNpcLayoutList
// 0x0020 (0x0020 - 0x0000)
struct FFldCmmNpcLayoutList final
{
public:
	int32                                         MFieldMajor;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MFieldMinor;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MTimeType;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MKeyfreeEventID;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFldCmmNpcLayoutData>           MDataList;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldCmmNpcLayoutList) == 0x000008, "Wrong alignment on FFldCmmNpcLayoutList");
static_assert(sizeof(FFldCmmNpcLayoutList) == 0x000020, "Wrong size on FFldCmmNpcLayoutList");
static_assert(offsetof(FFldCmmNpcLayoutList, MFieldMajor) == 0x000000, "Member 'FFldCmmNpcLayoutList::MFieldMajor' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutList, MFieldMinor) == 0x000004, "Member 'FFldCmmNpcLayoutList::MFieldMinor' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutList, MTimeType) == 0x000008, "Member 'FFldCmmNpcLayoutList::MTimeType' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutList, MKeyfreeEventID) == 0x00000C, "Member 'FFldCmmNpcLayoutList::MKeyfreeEventID' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutList, MDataList) == 0x000010, "Member 'FFldCmmNpcLayoutList::MDataList' has a wrong offset!");

// ScriptStruct xrd777.DatEnemyDataTable
// 0x0050 (0x0058 - 0x0008)
struct FDatEnemyDataTable final : public FTableRowBase
{
public:
	uint32                                        Flags;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Race;                                              // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x1];                                        // 0x000D(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         Level;                                             // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHp;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSp;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Params[0x5];                                       // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x1];                                       // 0x001D(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        Skill[0x8];                                        // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Exp;                                               // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Money;                                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDatEnemyItemTable                     Item0;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatEnemyItemTable                     Item1;                                             // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatEnemyItemTable                     Item2;                                             // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatEnemyItemTable                     Item3;                                             // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatEnemyEventItemTable                Eventitem;                                         // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDatEnemyAttackTable                   Attack;                                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatEnemyDataTable) == 0x000008, "Wrong alignment on FDatEnemyDataTable");
static_assert(sizeof(FDatEnemyDataTable) == 0x000058, "Wrong size on FDatEnemyDataTable");
static_assert(offsetof(FDatEnemyDataTable, Flags) == 0x000008, "Member 'FDatEnemyDataTable::Flags' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, Race) == 0x00000C, "Member 'FDatEnemyDataTable::Race' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, Level) == 0x00000E, "Member 'FDatEnemyDataTable::Level' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, MaxHp) == 0x000010, "Member 'FDatEnemyDataTable::MaxHp' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, MaxSp) == 0x000014, "Member 'FDatEnemyDataTable::MaxSp' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, Params) == 0x000018, "Member 'FDatEnemyDataTable::Params' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, Skill) == 0x00001E, "Member 'FDatEnemyDataTable::Skill' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, Exp) == 0x000030, "Member 'FDatEnemyDataTable::Exp' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, Money) == 0x000034, "Member 'FDatEnemyDataTable::Money' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, Item0) == 0x000038, "Member 'FDatEnemyDataTable::Item0' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, Item1) == 0x00003C, "Member 'FDatEnemyDataTable::Item1' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, Item2) == 0x000040, "Member 'FDatEnemyDataTable::Item2' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, Item3) == 0x000044, "Member 'FDatEnemyDataTable::Item3' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, Eventitem) == 0x000048, "Member 'FDatEnemyDataTable::Eventitem' has a wrong offset!");
static_assert(offsetof(FDatEnemyDataTable, Attack) == 0x000050, "Member 'FDatEnemyDataTable::Attack' has a wrong offset!");

// ScriptStruct xrd777.DatEncountDataRecord
// 0x001C (0x001C - 0x0000)
struct FDatEncountDataRecord final
{
public:
	uint32                                        Flags;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Party_item;                                        // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Party_item_num;                                    // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ID[0x5];                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Major;                                             // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Minor;                                             // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Sound;                                             // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ShuffleLevel;                                      // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatEncountDataRecord) == 0x000004, "Wrong alignment on FDatEncountDataRecord");
static_assert(sizeof(FDatEncountDataRecord) == 0x00001C, "Wrong size on FDatEncountDataRecord");
static_assert(offsetof(FDatEncountDataRecord, Flags) == 0x000000, "Member 'FDatEncountDataRecord::Flags' has a wrong offset!");
static_assert(offsetof(FDatEncountDataRecord, Party_item) == 0x000004, "Member 'FDatEncountDataRecord::Party_item' has a wrong offset!");
static_assert(offsetof(FDatEncountDataRecord, Party_item_num) == 0x000006, "Member 'FDatEncountDataRecord::Party_item_num' has a wrong offset!");
static_assert(offsetof(FDatEncountDataRecord, ID) == 0x000008, "Member 'FDatEncountDataRecord::ID' has a wrong offset!");
static_assert(offsetof(FDatEncountDataRecord, Major) == 0x000012, "Member 'FDatEncountDataRecord::Major' has a wrong offset!");
static_assert(offsetof(FDatEncountDataRecord, Minor) == 0x000014, "Member 'FDatEncountDataRecord::Minor' has a wrong offset!");
static_assert(offsetof(FDatEncountDataRecord, Sound) == 0x000016, "Member 'FDatEncountDataRecord::Sound' has a wrong offset!");
static_assert(offsetof(FDatEncountDataRecord, ShuffleLevel) == 0x000018, "Member 'FDatEncountDataRecord::ShuffleLevel' has a wrong offset!");

// ScriptStruct xrd777.DatEncountDataTable
// 0x0020 (0x0028 - 0x0008)
struct FDatEncountDataTable final : public FTableRowBase
{
public:
	uint32                                        Flags;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Party_item;                                        // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Party_item_num;                                    // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Id0;                                               // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Id1;                                               // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Id2;                                               // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Id3;                                               // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Id4;                                               // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Major;                                             // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Minor;                                             // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Sound;                                             // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ShuffleLevel;                                      // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatEncountDataTable) == 0x000008, "Wrong alignment on FDatEncountDataTable");
static_assert(sizeof(FDatEncountDataTable) == 0x000028, "Wrong size on FDatEncountDataTable");
static_assert(offsetof(FDatEncountDataTable, Flags) == 0x000008, "Member 'FDatEncountDataTable::Flags' has a wrong offset!");
static_assert(offsetof(FDatEncountDataTable, Party_item) == 0x00000C, "Member 'FDatEncountDataTable::Party_item' has a wrong offset!");
static_assert(offsetof(FDatEncountDataTable, Party_item_num) == 0x00000E, "Member 'FDatEncountDataTable::Party_item_num' has a wrong offset!");
static_assert(offsetof(FDatEncountDataTable, Id0) == 0x000010, "Member 'FDatEncountDataTable::Id0' has a wrong offset!");
static_assert(offsetof(FDatEncountDataTable, Id1) == 0x000012, "Member 'FDatEncountDataTable::Id1' has a wrong offset!");
static_assert(offsetof(FDatEncountDataTable, Id2) == 0x000014, "Member 'FDatEncountDataTable::Id2' has a wrong offset!");
static_assert(offsetof(FDatEncountDataTable, Id3) == 0x000016, "Member 'FDatEncountDataTable::Id3' has a wrong offset!");
static_assert(offsetof(FDatEncountDataTable, Id4) == 0x000018, "Member 'FDatEncountDataTable::Id4' has a wrong offset!");
static_assert(offsetof(FDatEncountDataTable, Major) == 0x00001A, "Member 'FDatEncountDataTable::Major' has a wrong offset!");
static_assert(offsetof(FDatEncountDataTable, Minor) == 0x00001C, "Member 'FDatEncountDataTable::Minor' has a wrong offset!");
static_assert(offsetof(FDatEncountDataTable, Sound) == 0x00001E, "Member 'FDatEncountDataTable::Sound' has a wrong offset!");
static_assert(offsetof(FDatEncountDataTable, ShuffleLevel) == 0x000020, "Member 'FDatEncountDataTable::ShuffleLevel' has a wrong offset!");

// ScriptStruct xrd777.DatPlayerLevelUpDataRecord
// 0x0004 (0x0004 - 0x0000)
struct FDatPlayerLevelUpDataRecord final
{
public:
	uint32                                        Exp;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatPlayerLevelUpDataRecord) == 0x000004, "Wrong alignment on FDatPlayerLevelUpDataRecord");
static_assert(sizeof(FDatPlayerLevelUpDataRecord) == 0x000004, "Wrong size on FDatPlayerLevelUpDataRecord");
static_assert(offsetof(FDatPlayerLevelUpDataRecord, Exp) == 0x000000, "Member 'FDatPlayerLevelUpDataRecord::Exp' has a wrong offset!");

// ScriptStruct xrd777.FldCrowdNpcChildParam
// 0x0010 (0x0010 - 0x0000)
struct FFldCrowdNpcChildParam final
{
public:
	int32                                         MColorID_G;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MColorID_B;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MRandomValue;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MGrassesOn;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldCrowdNpcChildParam) == 0x000004, "Wrong alignment on FFldCrowdNpcChildParam");
static_assert(sizeof(FFldCrowdNpcChildParam) == 0x000010, "Wrong size on FFldCrowdNpcChildParam");
static_assert(offsetof(FFldCrowdNpcChildParam, MColorID_G) == 0x000000, "Member 'FFldCrowdNpcChildParam::MColorID_G' has a wrong offset!");
static_assert(offsetof(FFldCrowdNpcChildParam, MColorID_B) == 0x000004, "Member 'FFldCrowdNpcChildParam::MColorID_B' has a wrong offset!");
static_assert(offsetof(FFldCrowdNpcChildParam, MRandomValue) == 0x000008, "Member 'FFldCrowdNpcChildParam::MRandomValue' has a wrong offset!");
static_assert(offsetof(FFldCrowdNpcChildParam, MGrassesOn) == 0x00000C, "Member 'FFldCrowdNpcChildParam::MGrassesOn' has a wrong offset!");

// ScriptStruct xrd777.DatPlayerLevelUpDataTable
// 0x0008 (0x0010 - 0x0008)
struct FDatPlayerLevelUpDataTable final : public FTableRowBase
{
public:
	uint32                                        Exp;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatPlayerLevelUpDataTable) == 0x000008, "Wrong alignment on FDatPlayerLevelUpDataTable");
static_assert(sizeof(FDatPlayerLevelUpDataTable) == 0x000010, "Wrong size on FDatPlayerLevelUpDataTable");
static_assert(offsetof(FDatPlayerLevelUpDataTable, Exp) == 0x000008, "Member 'FDatPlayerLevelUpDataTable::Exp' has a wrong offset!");

// ScriptStruct xrd777.CoefficientInfo
// 0x0008 (0x0008 - 0x0000)
struct FCoefficientInfo final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coefficient;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCoefficientInfo) == 0x000004, "Wrong alignment on FCoefficientInfo");
static_assert(sizeof(FCoefficientInfo) == 0x000008, "Wrong size on FCoefficientInfo");
static_assert(offsetof(FCoefficientInfo, Value) == 0x000000, "Member 'FCoefficientInfo::Value' has a wrong offset!");
static_assert(offsetof(FCoefficientInfo, Coefficient) == 0x000004, "Member 'FCoefficientInfo::Coefficient' has a wrong offset!");

// ScriptStruct xrd777.DatPlayerMaxHPSP
// 0x0004 (0x0004 - 0x0000)
struct FDatPlayerMaxHPSP final
{
public:
	uint16                                        MaxHp;                                             // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MaxSp;                                             // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatPlayerMaxHPSP) == 0x000002, "Wrong alignment on FDatPlayerMaxHPSP");
static_assert(sizeof(FDatPlayerMaxHPSP) == 0x000004, "Wrong size on FDatPlayerMaxHPSP");
static_assert(offsetof(FDatPlayerMaxHPSP, MaxHp) == 0x000000, "Member 'FDatPlayerMaxHPSP::MaxHp' has a wrong offset!");
static_assert(offsetof(FDatPlayerMaxHPSP, MaxSp) == 0x000002, "Member 'FDatPlayerMaxHPSP::MaxSp' has a wrong offset!");

// ScriptStruct xrd777.DatPlayerMaxHPSPBunch
// 0x0010 (0x0010 - 0x0000)
struct FDatPlayerMaxHPSPBunch final
{
public:
	TArray<struct FDatPlayerMaxHPSP>              EachPlayerData;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatPlayerMaxHPSPBunch) == 0x000008, "Wrong alignment on FDatPlayerMaxHPSPBunch");
static_assert(sizeof(FDatPlayerMaxHPSPBunch) == 0x000010, "Wrong size on FDatPlayerMaxHPSPBunch");
static_assert(offsetof(FDatPlayerMaxHPSPBunch, EachPlayerData) == 0x000000, "Member 'FDatPlayerMaxHPSPBunch::EachPlayerData' has a wrong offset!");

// ScriptStruct xrd777.DatPlayerMaxHPSPDataTable
// 0x0020 (0x0028 - 0x0008)
struct FDatPlayerMaxHPSPDataTable final : public FTableRowBase
{
public:
	uint16                                        MaxHp;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MaxSp;                                             // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Comment;                                           // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatPlayerMaxHPSPDataTable) == 0x000008, "Wrong alignment on FDatPlayerMaxHPSPDataTable");
static_assert(sizeof(FDatPlayerMaxHPSPDataTable) == 0x000028, "Wrong size on FDatPlayerMaxHPSPDataTable");
static_assert(offsetof(FDatPlayerMaxHPSPDataTable, MaxHp) == 0x000008, "Member 'FDatPlayerMaxHPSPDataTable::MaxHp' has a wrong offset!");
static_assert(offsetof(FDatPlayerMaxHPSPDataTable, MaxSp) == 0x00000A, "Member 'FDatPlayerMaxHPSPDataTable::MaxSp' has a wrong offset!");
static_assert(offsetof(FDatPlayerMaxHPSPDataTable, Comment) == 0x000010, "Member 'FDatPlayerMaxHPSPDataTable::Comment' has a wrong offset!");

// ScriptStruct xrd777.FldCrowdWalkRouteParam
// 0x0018 (0x0018 - 0x0000)
struct FFldCrowdWalkRouteParam final
{
public:
	TArray<int32>                                 MPointList;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EFldCrowdRoutePtn                             MRoutePattern_;                                    // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldCrowdWalkRouteParam) == 0x000008, "Wrong alignment on FFldCrowdWalkRouteParam");
static_assert(sizeof(FFldCrowdWalkRouteParam) == 0x000018, "Wrong size on FFldCrowdWalkRouteParam");
static_assert(offsetof(FFldCrowdWalkRouteParam, MPointList) == 0x000000, "Member 'FFldCrowdWalkRouteParam::MPointList' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkRouteParam, MRoutePattern_) == 0x000010, "Member 'FFldCrowdWalkRouteParam::MRoutePattern_' has a wrong offset!");

// ScriptStruct xrd777.BustupObjectBuffer
// 0x0010 (0x0010 - 0x0000)
struct FBustupObjectBuffer final
{
public:
	class UBustupObject*                          BustupObject;                                      // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBustupObjectBuffer) == 0x000008, "Wrong alignment on FBustupObjectBuffer");
static_assert(sizeof(FBustupObjectBuffer) == 0x000010, "Wrong size on FBustupObjectBuffer");
static_assert(offsetof(FBustupObjectBuffer, BustupObject) == 0x000000, "Member 'FBustupObjectBuffer::BustupObject' has a wrong offset!");

// ScriptStruct xrd777.FldPartnerHolder
// 0x0010 (0x0010 - 0x0000)
struct FFldPartnerHolder final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFldPartnerComp*                        PartnerComp;                                       // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFldPartnerHolder) == 0x000008, "Wrong alignment on FFldPartnerHolder");
static_assert(sizeof(FFldPartnerHolder) == 0x000010, "Wrong size on FFldPartnerHolder");
static_assert(offsetof(FFldPartnerHolder, Pawn) == 0x000000, "Member 'FFldPartnerHolder::Pawn' has a wrong offset!");
static_assert(offsetof(FFldPartnerHolder, PartnerComp) == 0x000008, "Member 'FFldPartnerHolder::PartnerComp' has a wrong offset!");

// ScriptStruct xrd777.AppCalculationItem
// 0x0014 (0x0014 - 0x0000)
struct FAppCalculationItem final
{
public:
	float                                         SrcValue;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DstValue;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Delay;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DstFrame;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppCalculationType                           Type;                                              // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAppCalculationItem) == 0x000004, "Wrong alignment on FAppCalculationItem");
static_assert(sizeof(FAppCalculationItem) == 0x000014, "Wrong size on FAppCalculationItem");
static_assert(offsetof(FAppCalculationItem, SrcValue) == 0x000000, "Member 'FAppCalculationItem::SrcValue' has a wrong offset!");
static_assert(offsetof(FAppCalculationItem, DstValue) == 0x000004, "Member 'FAppCalculationItem::DstValue' has a wrong offset!");
static_assert(offsetof(FAppCalculationItem, Delay) == 0x000008, "Member 'FAppCalculationItem::Delay' has a wrong offset!");
static_assert(offsetof(FAppCalculationItem, DstFrame) == 0x00000C, "Member 'FAppCalculationItem::DstFrame' has a wrong offset!");
static_assert(offsetof(FAppCalculationItem, Type) == 0x000010, "Member 'FAppCalculationItem::Type' has a wrong offset!");

// ScriptStruct xrd777.AppCalculaterComponentWork
// 0x0018 (0x0018 - 0x0000)
struct FAppCalculaterComponentWork final
{
public:
	float                                         Timer;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAppCalculationItem>            List;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAppCalculaterComponentWork) == 0x000008, "Wrong alignment on FAppCalculaterComponentWork");
static_assert(sizeof(FAppCalculaterComponentWork) == 0x000018, "Wrong size on FAppCalculaterComponentWork");
static_assert(offsetof(FAppCalculaterComponentWork, Timer) == 0x000000, "Member 'FAppCalculaterComponentWork::Timer' has a wrong offset!");
static_assert(offsetof(FAppCalculaterComponentWork, List) == 0x000008, "Member 'FAppCalculaterComponentWork::List' has a wrong offset!");

// ScriptStruct xrd777.CampModelControllerMotionItem
// 0x0008 (0x0008 - 0x0000)
struct FCampModelControllerMotionItem final
{
public:
	class UAnimSequenceBase*                      PAnimSequence;                                     // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampModelControllerMotionItem) == 0x000008, "Wrong alignment on FCampModelControllerMotionItem");
static_assert(sizeof(FCampModelControllerMotionItem) == 0x000008, "Wrong size on FCampModelControllerMotionItem");
static_assert(offsetof(FCampModelControllerMotionItem, PAnimSequence) == 0x000000, "Member 'FCampModelControllerMotionItem::PAnimSequence' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonEncountPacDataTable
// 0x0028 (0x0030 - 0x0008)
struct FFldDungeonEncountPacDataTable final : public FTableRowBase
{
public:
	uint16                                        EncNo1;                                            // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability1;                                      // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo2;                                            // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability2;                                      // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo3;                                            // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability3;                                      // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo4;                                            // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability4;                                      // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo5;                                            // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability5;                                      // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo6;                                            // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability6;                                      // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo7;                                            // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability7;                                      // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo8;                                            // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability8;                                      // 0x0026(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order1;                                            // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order2;                                            // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order3;                                            // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order4;                                            // 0x002B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order5;                                            // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order6;                                            // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order7;                                            // 0x002E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order8;                                            // 0x002F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldDungeonEncountPacDataTable) == 0x000008, "Wrong alignment on FFldDungeonEncountPacDataTable");
static_assert(sizeof(FFldDungeonEncountPacDataTable) == 0x000030, "Wrong size on FFldDungeonEncountPacDataTable");
static_assert(offsetof(FFldDungeonEncountPacDataTable, EncNo1) == 0x000008, "Member 'FFldDungeonEncountPacDataTable::EncNo1' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Probability1) == 0x00000A, "Member 'FFldDungeonEncountPacDataTable::Probability1' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, EncNo2) == 0x00000C, "Member 'FFldDungeonEncountPacDataTable::EncNo2' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Probability2) == 0x00000E, "Member 'FFldDungeonEncountPacDataTable::Probability2' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, EncNo3) == 0x000010, "Member 'FFldDungeonEncountPacDataTable::EncNo3' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Probability3) == 0x000012, "Member 'FFldDungeonEncountPacDataTable::Probability3' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, EncNo4) == 0x000014, "Member 'FFldDungeonEncountPacDataTable::EncNo4' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Probability4) == 0x000016, "Member 'FFldDungeonEncountPacDataTable::Probability4' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, EncNo5) == 0x000018, "Member 'FFldDungeonEncountPacDataTable::EncNo5' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Probability5) == 0x00001A, "Member 'FFldDungeonEncountPacDataTable::Probability5' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, EncNo6) == 0x00001C, "Member 'FFldDungeonEncountPacDataTable::EncNo6' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Probability6) == 0x00001E, "Member 'FFldDungeonEncountPacDataTable::Probability6' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, EncNo7) == 0x000020, "Member 'FFldDungeonEncountPacDataTable::EncNo7' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Probability7) == 0x000022, "Member 'FFldDungeonEncountPacDataTable::Probability7' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, EncNo8) == 0x000024, "Member 'FFldDungeonEncountPacDataTable::EncNo8' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Probability8) == 0x000026, "Member 'FFldDungeonEncountPacDataTable::Probability8' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Order1) == 0x000028, "Member 'FFldDungeonEncountPacDataTable::Order1' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Order2) == 0x000029, "Member 'FFldDungeonEncountPacDataTable::Order2' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Order3) == 0x00002A, "Member 'FFldDungeonEncountPacDataTable::Order3' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Order4) == 0x00002B, "Member 'FFldDungeonEncountPacDataTable::Order4' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Order5) == 0x00002C, "Member 'FFldDungeonEncountPacDataTable::Order5' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Order6) == 0x00002D, "Member 'FFldDungeonEncountPacDataTable::Order6' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Order7) == 0x00002E, "Member 'FFldDungeonEncountPacDataTable::Order7' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataTable, Order8) == 0x00002F, "Member 'FFldDungeonEncountPacDataTable::Order8' has a wrong offset!");

// ScriptStruct xrd777.CampCharaLookAdjust
// 0x0560 (0x0568 - 0x0008)
struct FCampCharaLookAdjust final : public FTableRowBase
{
public:
	struct FVector                                LightPositionTop;                                  // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustTop;                            // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustRimTop;                         // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorATop;                                // 0x002C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorBTop;                                // 0x003C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedTop;                                   // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedPowerTop;                              // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradationOFFTop;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SphereColorTop;                                    // 0x0058(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SpherePosTop;                                      // 0x0068(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpherePowerTop;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadiusTop;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShpereHardnessTop;                                 // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereReverseTop;                                  // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimLightColorTop;                                  // 0x0080(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMinTop;                               // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMaxTop;                               // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RTShadowColorTop;                                  // 0x0098(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTShadowColor_BlendTop;                            // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureTopColorTop;                       // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureBottomColorTop;                    // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionSkill;                                // 0x00B4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustSkill;                          // 0x00C0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustRimSkill;                       // 0x00CC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorASkill;                              // 0x00D8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorBSkill;                              // 0x00E8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedSkill;                                 // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedPowerSkill;                            // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradationOFFSkill;                                 // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SphereColorSkill;                                  // 0x0104(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SpherePosSkill;                                    // 0x0114(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpherePowerSkill;                                  // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadiusSkill;                                 // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShpereHardnessSkill;                               // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereReverseSkill;                                // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimLightColorSkill;                                // 0x012C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMinSkill;                             // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMaxSkill;                             // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RTShadowColorSkill;                                // 0x0144(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTShadowColor_BlendSkill;                          // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureTopColorSkill;                     // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureBottomColorSkill;                  // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionItem;                                 // 0x0160(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustItem;                           // 0x016C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustRimItem;                        // 0x0178(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorAItem;                               // 0x0184(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorBItem;                               // 0x0194(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedItem;                                  // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedPowerItem;                             // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradationOFFItem;                                  // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SphereColorItem;                                   // 0x01B0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SpherePosItem;                                     // 0x01C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpherePowerItem;                                   // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadiusItem;                                  // 0x01CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShpereHardnessItem;                                // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereReverseItem;                                 // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimLightColorItem;                                 // 0x01D8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMinItem;                              // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMaxItem;                              // 0x01EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RTShadowColorItem;                                 // 0x01F0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTShadowColor_BlendItem;                           // 0x0200(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureTopColorItem;                      // 0x0204(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureBottomColorItem;                   // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionEquip;                                // 0x020C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustEquip;                          // 0x0218(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustRimEquip;                       // 0x0224(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorAEquip;                              // 0x0230(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorBEquip;                              // 0x0240(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedEquip;                                 // 0x0250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedPowerEquip;                            // 0x0254(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradationOFFEquip;                                 // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SphereColorEquip;                                  // 0x025C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SpherePosEquip;                                    // 0x026C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpherePowerEquip;                                  // 0x0274(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadiusEquip;                                 // 0x0278(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShpereHardnessEquip;                               // 0x027C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereReverseEquip;                                // 0x0280(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimLightColorEquip;                                // 0x0284(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMinEquip;                             // 0x0294(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMaxEquip;                             // 0x0298(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RTShadowColorEquip;                                // 0x029C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTShadowColor_BlendEquip;                          // 0x02AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureTopColorEquip;                     // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureBottomColorEquip;                  // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionStatus;                               // 0x02B8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustStatus;                         // 0x02C4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustRimStatus;                      // 0x02D0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorAStatus;                             // 0x02DC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorBStatus;                             // 0x02EC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedStatus;                                // 0x02FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedPowerStatus;                           // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradationOFFStatus;                                // 0x0304(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SphereColorStatus;                                 // 0x0308(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SpherePosStatus;                                   // 0x0318(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpherePowerStatus;                                 // 0x0320(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadiusStatus;                                // 0x0324(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShpereHardnessStatus;                              // 0x0328(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereReverseStatus;                               // 0x032C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimLightColorStatus;                               // 0x0330(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMinStatus;                            // 0x0340(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMaxStatus;                            // 0x0344(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RTShadowColorStatus;                               // 0x0348(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTShadowColor_BlendStatus;                         // 0x0358(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureTopColorStatus;                    // 0x035C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureBottomColorStatus;                 // 0x0360(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionQuest;                                // 0x0364(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustQuest;                          // 0x0370(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustRimQuest;                       // 0x037C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorAQuest;                              // 0x0388(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorBQuest;                              // 0x0398(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedQuest;                                 // 0x03A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedPowerQuest;                            // 0x03AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradationOFFQuest;                                 // 0x03B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SphereColorQuest;                                  // 0x03B4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SpherePosQuest;                                    // 0x03C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpherePowerQuest;                                  // 0x03CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadiusQuest;                                 // 0x03D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShpereHardnessQuest;                               // 0x03D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereReverseQuest;                                // 0x03D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimLightColorQuest;                                // 0x03DC(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMinQuest;                             // 0x03EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMaxQuest;                             // 0x03F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RTShadowColorQuest;                                // 0x03F4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTShadowColor_BlendQuest;                          // 0x0404(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureTopColorQuest;                     // 0x0408(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureBottomColorQuest;                  // 0x040C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionSystem;                               // 0x0410(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustSystem;                         // 0x041C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustRimSystem;                      // 0x0428(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorASystem;                             // 0x0434(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorBSystem;                             // 0x0444(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedSystem;                                // 0x0454(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedPowerSystem;                           // 0x0458(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradationOFFSystem;                                // 0x045C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SphereColorSystem;                                 // 0x0460(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SpherePosSystem;                                   // 0x0470(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpherePowerSystem;                                 // 0x0478(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadiusSystem;                                // 0x047C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShpereHardnessSystem;                              // 0x0480(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereReverseSystem;                               // 0x0484(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimLightColorSystem;                               // 0x0488(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMinSystem;                            // 0x0498(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMaxSystem;                            // 0x049C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RTShadowColorSystem;                               // 0x04A0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTShadowColor_BlendSystem;                         // 0x04B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureTopColorSystem;                    // 0x04B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureBottomColorSystem;                 // 0x04B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionConfig;                               // 0x04BC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustConfig;                         // 0x04C8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightPositionAdjustRimConfig;                      // 0x04D4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorAConfig;                             // 0x04E0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GradationColorBConfig;                             // 0x04F0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedConfig;                                // 0x0500(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleAlignedPowerConfig;                           // 0x0504(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GradationOFFConfig;                                // 0x0508(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SphereColorConfig;                                 // 0x050C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SpherePosConfig;                                   // 0x051C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpherePowerConfig;                                 // 0x0524(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadiusConfig;                                // 0x0528(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShpereHardnessConfig;                              // 0x052C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereReverseConfig;                               // 0x0530(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RimLightColorConfig;                               // 0x0534(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMinConfig;                            // 0x0544(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RimLightWidthMaxConfig;                            // 0x0548(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           RTShadowColorConfig;                               // 0x054C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RTShadowColor_BlendConfig;                         // 0x055C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureTopColorConfig;                    // 0x0560(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GaussMaskTextureBottomColorConfig;                 // 0x0564(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampCharaLookAdjust) == 0x000008, "Wrong alignment on FCampCharaLookAdjust");
static_assert(sizeof(FCampCharaLookAdjust) == 0x000568, "Wrong size on FCampCharaLookAdjust");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionTop) == 0x000008, "Member 'FCampCharaLookAdjust::LightPositionTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustTop) == 0x000014, "Member 'FCampCharaLookAdjust::LightPositionAdjustTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustRimTop) == 0x000020, "Member 'FCampCharaLookAdjust::LightPositionAdjustRimTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorATop) == 0x00002C, "Member 'FCampCharaLookAdjust::GradationColorATop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorBTop) == 0x00003C, "Member 'FCampCharaLookAdjust::GradationColorBTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedTop) == 0x00004C, "Member 'FCampCharaLookAdjust::AngleAlignedTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedPowerTop) == 0x000050, "Member 'FCampCharaLookAdjust::AngleAlignedPowerTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationOFFTop) == 0x000054, "Member 'FCampCharaLookAdjust::GradationOFFTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereColorTop) == 0x000058, "Member 'FCampCharaLookAdjust::SphereColorTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePosTop) == 0x000068, "Member 'FCampCharaLookAdjust::SpherePosTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePowerTop) == 0x000070, "Member 'FCampCharaLookAdjust::SpherePowerTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereRadiusTop) == 0x000074, "Member 'FCampCharaLookAdjust::SphereRadiusTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, ShpereHardnessTop) == 0x000078, "Member 'FCampCharaLookAdjust::ShpereHardnessTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereReverseTop) == 0x00007C, "Member 'FCampCharaLookAdjust::SphereReverseTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightColorTop) == 0x000080, "Member 'FCampCharaLookAdjust::RimLightColorTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMinTop) == 0x000090, "Member 'FCampCharaLookAdjust::RimLightWidthMinTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMaxTop) == 0x000094, "Member 'FCampCharaLookAdjust::RimLightWidthMaxTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColorTop) == 0x000098, "Member 'FCampCharaLookAdjust::RTShadowColorTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColor_BlendTop) == 0x0000A8, "Member 'FCampCharaLookAdjust::RTShadowColor_BlendTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureTopColorTop) == 0x0000AC, "Member 'FCampCharaLookAdjust::GaussMaskTextureTopColorTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureBottomColorTop) == 0x0000B0, "Member 'FCampCharaLookAdjust::GaussMaskTextureBottomColorTop' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionSkill) == 0x0000B4, "Member 'FCampCharaLookAdjust::LightPositionSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustSkill) == 0x0000C0, "Member 'FCampCharaLookAdjust::LightPositionAdjustSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustRimSkill) == 0x0000CC, "Member 'FCampCharaLookAdjust::LightPositionAdjustRimSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorASkill) == 0x0000D8, "Member 'FCampCharaLookAdjust::GradationColorASkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorBSkill) == 0x0000E8, "Member 'FCampCharaLookAdjust::GradationColorBSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedSkill) == 0x0000F8, "Member 'FCampCharaLookAdjust::AngleAlignedSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedPowerSkill) == 0x0000FC, "Member 'FCampCharaLookAdjust::AngleAlignedPowerSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationOFFSkill) == 0x000100, "Member 'FCampCharaLookAdjust::GradationOFFSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereColorSkill) == 0x000104, "Member 'FCampCharaLookAdjust::SphereColorSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePosSkill) == 0x000114, "Member 'FCampCharaLookAdjust::SpherePosSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePowerSkill) == 0x00011C, "Member 'FCampCharaLookAdjust::SpherePowerSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereRadiusSkill) == 0x000120, "Member 'FCampCharaLookAdjust::SphereRadiusSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, ShpereHardnessSkill) == 0x000124, "Member 'FCampCharaLookAdjust::ShpereHardnessSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereReverseSkill) == 0x000128, "Member 'FCampCharaLookAdjust::SphereReverseSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightColorSkill) == 0x00012C, "Member 'FCampCharaLookAdjust::RimLightColorSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMinSkill) == 0x00013C, "Member 'FCampCharaLookAdjust::RimLightWidthMinSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMaxSkill) == 0x000140, "Member 'FCampCharaLookAdjust::RimLightWidthMaxSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColorSkill) == 0x000144, "Member 'FCampCharaLookAdjust::RTShadowColorSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColor_BlendSkill) == 0x000154, "Member 'FCampCharaLookAdjust::RTShadowColor_BlendSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureTopColorSkill) == 0x000158, "Member 'FCampCharaLookAdjust::GaussMaskTextureTopColorSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureBottomColorSkill) == 0x00015C, "Member 'FCampCharaLookAdjust::GaussMaskTextureBottomColorSkill' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionItem) == 0x000160, "Member 'FCampCharaLookAdjust::LightPositionItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustItem) == 0x00016C, "Member 'FCampCharaLookAdjust::LightPositionAdjustItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustRimItem) == 0x000178, "Member 'FCampCharaLookAdjust::LightPositionAdjustRimItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorAItem) == 0x000184, "Member 'FCampCharaLookAdjust::GradationColorAItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorBItem) == 0x000194, "Member 'FCampCharaLookAdjust::GradationColorBItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedItem) == 0x0001A4, "Member 'FCampCharaLookAdjust::AngleAlignedItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedPowerItem) == 0x0001A8, "Member 'FCampCharaLookAdjust::AngleAlignedPowerItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationOFFItem) == 0x0001AC, "Member 'FCampCharaLookAdjust::GradationOFFItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereColorItem) == 0x0001B0, "Member 'FCampCharaLookAdjust::SphereColorItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePosItem) == 0x0001C0, "Member 'FCampCharaLookAdjust::SpherePosItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePowerItem) == 0x0001C8, "Member 'FCampCharaLookAdjust::SpherePowerItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereRadiusItem) == 0x0001CC, "Member 'FCampCharaLookAdjust::SphereRadiusItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, ShpereHardnessItem) == 0x0001D0, "Member 'FCampCharaLookAdjust::ShpereHardnessItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereReverseItem) == 0x0001D4, "Member 'FCampCharaLookAdjust::SphereReverseItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightColorItem) == 0x0001D8, "Member 'FCampCharaLookAdjust::RimLightColorItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMinItem) == 0x0001E8, "Member 'FCampCharaLookAdjust::RimLightWidthMinItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMaxItem) == 0x0001EC, "Member 'FCampCharaLookAdjust::RimLightWidthMaxItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColorItem) == 0x0001F0, "Member 'FCampCharaLookAdjust::RTShadowColorItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColor_BlendItem) == 0x000200, "Member 'FCampCharaLookAdjust::RTShadowColor_BlendItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureTopColorItem) == 0x000204, "Member 'FCampCharaLookAdjust::GaussMaskTextureTopColorItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureBottomColorItem) == 0x000208, "Member 'FCampCharaLookAdjust::GaussMaskTextureBottomColorItem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionEquip) == 0x00020C, "Member 'FCampCharaLookAdjust::LightPositionEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustEquip) == 0x000218, "Member 'FCampCharaLookAdjust::LightPositionAdjustEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustRimEquip) == 0x000224, "Member 'FCampCharaLookAdjust::LightPositionAdjustRimEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorAEquip) == 0x000230, "Member 'FCampCharaLookAdjust::GradationColorAEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorBEquip) == 0x000240, "Member 'FCampCharaLookAdjust::GradationColorBEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedEquip) == 0x000250, "Member 'FCampCharaLookAdjust::AngleAlignedEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedPowerEquip) == 0x000254, "Member 'FCampCharaLookAdjust::AngleAlignedPowerEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationOFFEquip) == 0x000258, "Member 'FCampCharaLookAdjust::GradationOFFEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereColorEquip) == 0x00025C, "Member 'FCampCharaLookAdjust::SphereColorEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePosEquip) == 0x00026C, "Member 'FCampCharaLookAdjust::SpherePosEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePowerEquip) == 0x000274, "Member 'FCampCharaLookAdjust::SpherePowerEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereRadiusEquip) == 0x000278, "Member 'FCampCharaLookAdjust::SphereRadiusEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, ShpereHardnessEquip) == 0x00027C, "Member 'FCampCharaLookAdjust::ShpereHardnessEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereReverseEquip) == 0x000280, "Member 'FCampCharaLookAdjust::SphereReverseEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightColorEquip) == 0x000284, "Member 'FCampCharaLookAdjust::RimLightColorEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMinEquip) == 0x000294, "Member 'FCampCharaLookAdjust::RimLightWidthMinEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMaxEquip) == 0x000298, "Member 'FCampCharaLookAdjust::RimLightWidthMaxEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColorEquip) == 0x00029C, "Member 'FCampCharaLookAdjust::RTShadowColorEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColor_BlendEquip) == 0x0002AC, "Member 'FCampCharaLookAdjust::RTShadowColor_BlendEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureTopColorEquip) == 0x0002B0, "Member 'FCampCharaLookAdjust::GaussMaskTextureTopColorEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureBottomColorEquip) == 0x0002B4, "Member 'FCampCharaLookAdjust::GaussMaskTextureBottomColorEquip' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionStatus) == 0x0002B8, "Member 'FCampCharaLookAdjust::LightPositionStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustStatus) == 0x0002C4, "Member 'FCampCharaLookAdjust::LightPositionAdjustStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustRimStatus) == 0x0002D0, "Member 'FCampCharaLookAdjust::LightPositionAdjustRimStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorAStatus) == 0x0002DC, "Member 'FCampCharaLookAdjust::GradationColorAStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorBStatus) == 0x0002EC, "Member 'FCampCharaLookAdjust::GradationColorBStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedStatus) == 0x0002FC, "Member 'FCampCharaLookAdjust::AngleAlignedStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedPowerStatus) == 0x000300, "Member 'FCampCharaLookAdjust::AngleAlignedPowerStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationOFFStatus) == 0x000304, "Member 'FCampCharaLookAdjust::GradationOFFStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereColorStatus) == 0x000308, "Member 'FCampCharaLookAdjust::SphereColorStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePosStatus) == 0x000318, "Member 'FCampCharaLookAdjust::SpherePosStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePowerStatus) == 0x000320, "Member 'FCampCharaLookAdjust::SpherePowerStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereRadiusStatus) == 0x000324, "Member 'FCampCharaLookAdjust::SphereRadiusStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, ShpereHardnessStatus) == 0x000328, "Member 'FCampCharaLookAdjust::ShpereHardnessStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereReverseStatus) == 0x00032C, "Member 'FCampCharaLookAdjust::SphereReverseStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightColorStatus) == 0x000330, "Member 'FCampCharaLookAdjust::RimLightColorStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMinStatus) == 0x000340, "Member 'FCampCharaLookAdjust::RimLightWidthMinStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMaxStatus) == 0x000344, "Member 'FCampCharaLookAdjust::RimLightWidthMaxStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColorStatus) == 0x000348, "Member 'FCampCharaLookAdjust::RTShadowColorStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColor_BlendStatus) == 0x000358, "Member 'FCampCharaLookAdjust::RTShadowColor_BlendStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureTopColorStatus) == 0x00035C, "Member 'FCampCharaLookAdjust::GaussMaskTextureTopColorStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureBottomColorStatus) == 0x000360, "Member 'FCampCharaLookAdjust::GaussMaskTextureBottomColorStatus' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionQuest) == 0x000364, "Member 'FCampCharaLookAdjust::LightPositionQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustQuest) == 0x000370, "Member 'FCampCharaLookAdjust::LightPositionAdjustQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustRimQuest) == 0x00037C, "Member 'FCampCharaLookAdjust::LightPositionAdjustRimQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorAQuest) == 0x000388, "Member 'FCampCharaLookAdjust::GradationColorAQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorBQuest) == 0x000398, "Member 'FCampCharaLookAdjust::GradationColorBQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedQuest) == 0x0003A8, "Member 'FCampCharaLookAdjust::AngleAlignedQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedPowerQuest) == 0x0003AC, "Member 'FCampCharaLookAdjust::AngleAlignedPowerQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationOFFQuest) == 0x0003B0, "Member 'FCampCharaLookAdjust::GradationOFFQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereColorQuest) == 0x0003B4, "Member 'FCampCharaLookAdjust::SphereColorQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePosQuest) == 0x0003C4, "Member 'FCampCharaLookAdjust::SpherePosQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePowerQuest) == 0x0003CC, "Member 'FCampCharaLookAdjust::SpherePowerQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereRadiusQuest) == 0x0003D0, "Member 'FCampCharaLookAdjust::SphereRadiusQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, ShpereHardnessQuest) == 0x0003D4, "Member 'FCampCharaLookAdjust::ShpereHardnessQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereReverseQuest) == 0x0003D8, "Member 'FCampCharaLookAdjust::SphereReverseQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightColorQuest) == 0x0003DC, "Member 'FCampCharaLookAdjust::RimLightColorQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMinQuest) == 0x0003EC, "Member 'FCampCharaLookAdjust::RimLightWidthMinQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMaxQuest) == 0x0003F0, "Member 'FCampCharaLookAdjust::RimLightWidthMaxQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColorQuest) == 0x0003F4, "Member 'FCampCharaLookAdjust::RTShadowColorQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColor_BlendQuest) == 0x000404, "Member 'FCampCharaLookAdjust::RTShadowColor_BlendQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureTopColorQuest) == 0x000408, "Member 'FCampCharaLookAdjust::GaussMaskTextureTopColorQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureBottomColorQuest) == 0x00040C, "Member 'FCampCharaLookAdjust::GaussMaskTextureBottomColorQuest' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionSystem) == 0x000410, "Member 'FCampCharaLookAdjust::LightPositionSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustSystem) == 0x00041C, "Member 'FCampCharaLookAdjust::LightPositionAdjustSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustRimSystem) == 0x000428, "Member 'FCampCharaLookAdjust::LightPositionAdjustRimSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorASystem) == 0x000434, "Member 'FCampCharaLookAdjust::GradationColorASystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorBSystem) == 0x000444, "Member 'FCampCharaLookAdjust::GradationColorBSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedSystem) == 0x000454, "Member 'FCampCharaLookAdjust::AngleAlignedSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedPowerSystem) == 0x000458, "Member 'FCampCharaLookAdjust::AngleAlignedPowerSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationOFFSystem) == 0x00045C, "Member 'FCampCharaLookAdjust::GradationOFFSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereColorSystem) == 0x000460, "Member 'FCampCharaLookAdjust::SphereColorSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePosSystem) == 0x000470, "Member 'FCampCharaLookAdjust::SpherePosSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePowerSystem) == 0x000478, "Member 'FCampCharaLookAdjust::SpherePowerSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereRadiusSystem) == 0x00047C, "Member 'FCampCharaLookAdjust::SphereRadiusSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, ShpereHardnessSystem) == 0x000480, "Member 'FCampCharaLookAdjust::ShpereHardnessSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereReverseSystem) == 0x000484, "Member 'FCampCharaLookAdjust::SphereReverseSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightColorSystem) == 0x000488, "Member 'FCampCharaLookAdjust::RimLightColorSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMinSystem) == 0x000498, "Member 'FCampCharaLookAdjust::RimLightWidthMinSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMaxSystem) == 0x00049C, "Member 'FCampCharaLookAdjust::RimLightWidthMaxSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColorSystem) == 0x0004A0, "Member 'FCampCharaLookAdjust::RTShadowColorSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColor_BlendSystem) == 0x0004B0, "Member 'FCampCharaLookAdjust::RTShadowColor_BlendSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureTopColorSystem) == 0x0004B4, "Member 'FCampCharaLookAdjust::GaussMaskTextureTopColorSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureBottomColorSystem) == 0x0004B8, "Member 'FCampCharaLookAdjust::GaussMaskTextureBottomColorSystem' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionConfig) == 0x0004BC, "Member 'FCampCharaLookAdjust::LightPositionConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustConfig) == 0x0004C8, "Member 'FCampCharaLookAdjust::LightPositionAdjustConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, LightPositionAdjustRimConfig) == 0x0004D4, "Member 'FCampCharaLookAdjust::LightPositionAdjustRimConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorAConfig) == 0x0004E0, "Member 'FCampCharaLookAdjust::GradationColorAConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationColorBConfig) == 0x0004F0, "Member 'FCampCharaLookAdjust::GradationColorBConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedConfig) == 0x000500, "Member 'FCampCharaLookAdjust::AngleAlignedConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, AngleAlignedPowerConfig) == 0x000504, "Member 'FCampCharaLookAdjust::AngleAlignedPowerConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GradationOFFConfig) == 0x000508, "Member 'FCampCharaLookAdjust::GradationOFFConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereColorConfig) == 0x00050C, "Member 'FCampCharaLookAdjust::SphereColorConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePosConfig) == 0x00051C, "Member 'FCampCharaLookAdjust::SpherePosConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SpherePowerConfig) == 0x000524, "Member 'FCampCharaLookAdjust::SpherePowerConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereRadiusConfig) == 0x000528, "Member 'FCampCharaLookAdjust::SphereRadiusConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, ShpereHardnessConfig) == 0x00052C, "Member 'FCampCharaLookAdjust::ShpereHardnessConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, SphereReverseConfig) == 0x000530, "Member 'FCampCharaLookAdjust::SphereReverseConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightColorConfig) == 0x000534, "Member 'FCampCharaLookAdjust::RimLightColorConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMinConfig) == 0x000544, "Member 'FCampCharaLookAdjust::RimLightWidthMinConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RimLightWidthMaxConfig) == 0x000548, "Member 'FCampCharaLookAdjust::RimLightWidthMaxConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColorConfig) == 0x00054C, "Member 'FCampCharaLookAdjust::RTShadowColorConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, RTShadowColor_BlendConfig) == 0x00055C, "Member 'FCampCharaLookAdjust::RTShadowColor_BlendConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureTopColorConfig) == 0x000560, "Member 'FCampCharaLookAdjust::GaussMaskTextureTopColorConfig' has a wrong offset!");
static_assert(offsetof(FCampCharaLookAdjust, GaussMaskTextureBottomColorConfig) == 0x000564, "Member 'FCampCharaLookAdjust::GaussMaskTextureBottomColorConfig' has a wrong offset!");

// ScriptStruct xrd777.CampHologramTableRow
// 0x0078 (0x0080 - 0x0008)
struct FCampHologramTableRow final : public FTableRowBase
{
public:
	float                                         ScaleGradient_Holo;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Holog_Frame;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexA_EndRot;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexA_EndU;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexA_EndV;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexA_Scale;                                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexA_StartRot;                                     // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexA_StartU;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexA_StartV;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexB_EndRot;                                       // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexB_EndU;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexB_EndV;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexB_Scale;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexB_StartRot;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexB_StartU;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexB_StartV;                                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexC_EndRot;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexC_EndU;                                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexC_EndV;                                         // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexC_Scale;                                        // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexC_StartRot;                                     // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexC_StartU;                                       // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexC_StartV;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexD_EndRot;                                       // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexD_EndU;                                         // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexD_EndV;                                         // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexD_Scale;                                        // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexD_StartRot;                                     // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexD_StartU;                                       // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexD_StartV;                                       // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampHologramTableRow) == 0x000008, "Wrong alignment on FCampHologramTableRow");
static_assert(sizeof(FCampHologramTableRow) == 0x000080, "Wrong size on FCampHologramTableRow");
static_assert(offsetof(FCampHologramTableRow, ScaleGradient_Holo) == 0x000008, "Member 'FCampHologramTableRow::ScaleGradient_Holo' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, Holog_Frame) == 0x00000C, "Member 'FCampHologramTableRow::Holog_Frame' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexA_EndRot) == 0x000010, "Member 'FCampHologramTableRow::TexA_EndRot' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexA_EndU) == 0x000014, "Member 'FCampHologramTableRow::TexA_EndU' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexA_EndV) == 0x000018, "Member 'FCampHologramTableRow::TexA_EndV' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexA_Scale) == 0x00001C, "Member 'FCampHologramTableRow::TexA_Scale' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexA_StartRot) == 0x000020, "Member 'FCampHologramTableRow::TexA_StartRot' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexA_StartU) == 0x000024, "Member 'FCampHologramTableRow::TexA_StartU' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexA_StartV) == 0x000028, "Member 'FCampHologramTableRow::TexA_StartV' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexB_EndRot) == 0x00002C, "Member 'FCampHologramTableRow::TexB_EndRot' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexB_EndU) == 0x000030, "Member 'FCampHologramTableRow::TexB_EndU' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexB_EndV) == 0x000034, "Member 'FCampHologramTableRow::TexB_EndV' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexB_Scale) == 0x000038, "Member 'FCampHologramTableRow::TexB_Scale' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexB_StartRot) == 0x00003C, "Member 'FCampHologramTableRow::TexB_StartRot' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexB_StartU) == 0x000040, "Member 'FCampHologramTableRow::TexB_StartU' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexB_StartV) == 0x000044, "Member 'FCampHologramTableRow::TexB_StartV' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexC_EndRot) == 0x000048, "Member 'FCampHologramTableRow::TexC_EndRot' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexC_EndU) == 0x00004C, "Member 'FCampHologramTableRow::TexC_EndU' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexC_EndV) == 0x000050, "Member 'FCampHologramTableRow::TexC_EndV' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexC_Scale) == 0x000054, "Member 'FCampHologramTableRow::TexC_Scale' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexC_StartRot) == 0x000058, "Member 'FCampHologramTableRow::TexC_StartRot' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexC_StartU) == 0x00005C, "Member 'FCampHologramTableRow::TexC_StartU' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexC_StartV) == 0x000060, "Member 'FCampHologramTableRow::TexC_StartV' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexD_EndRot) == 0x000064, "Member 'FCampHologramTableRow::TexD_EndRot' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexD_EndU) == 0x000068, "Member 'FCampHologramTableRow::TexD_EndU' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexD_EndV) == 0x00006C, "Member 'FCampHologramTableRow::TexD_EndV' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexD_Scale) == 0x000070, "Member 'FCampHologramTableRow::TexD_Scale' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexD_StartRot) == 0x000074, "Member 'FCampHologramTableRow::TexD_StartRot' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexD_StartU) == 0x000078, "Member 'FCampHologramTableRow::TexD_StartU' has a wrong offset!");
static_assert(offsetof(FCampHologramTableRow, TexD_StartV) == 0x00007C, "Member 'FCampHologramTableRow::TexD_StartV' has a wrong offset!");

// ScriptStruct xrd777.CampCameraTableRow
// 0x0030 (0x0038 - 0x0008)
struct FCampCameraTableRow final : public FTableRowBase
{
public:
	struct FVector                                CameraPos;                                         // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CameraRot;                                         // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CharaPos;                                          // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CharaRot;                                          // 0x002C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampCameraTableRow) == 0x000008, "Wrong alignment on FCampCameraTableRow");
static_assert(sizeof(FCampCameraTableRow) == 0x000038, "Wrong size on FCampCameraTableRow");
static_assert(offsetof(FCampCameraTableRow, CameraPos) == 0x000008, "Member 'FCampCameraTableRow::CameraPos' has a wrong offset!");
static_assert(offsetof(FCampCameraTableRow, CameraRot) == 0x000014, "Member 'FCampCameraTableRow::CameraRot' has a wrong offset!");
static_assert(offsetof(FCampCameraTableRow, CharaPos) == 0x000020, "Member 'FCampCameraTableRow::CharaPos' has a wrong offset!");
static_assert(offsetof(FCampCameraTableRow, CharaRot) == 0x00002C, "Member 'FCampCameraTableRow::CharaRot' has a wrong offset!");

// ScriptStruct xrd777.CampParamTableCommonRow
// 0x04D0 (0x04D8 - 0x0008)
struct FCampParamTableCommonRow final : public FTableRowBase
{
public:
	EOneAnimType                                  ListAllSlideAnimType;                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ListAllSlideFrame;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ListAllSlideBackFrame;                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  Edit_List_Cursor_Anim_Type;                        // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Edit_List_Cursor_Slide_Frame;                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  Edit_List_Party_RedCursor_Anim_Type;               // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Edit_List_Party_RedCursor_Slide_Frame;             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  Edit_List_Commu_RedCursor_Anim_Type;               // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Edit_List_Commu_RedCursor_Slide_Frame;             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ListRedSlideAnimType;                              // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ListRedSlideFrame;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ListRedSlideWait;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ListRedSlideBackFrame;                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HPSPFlashFrame;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  TabShakeAnimType;                                  // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TabShakeFrame;                                     // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  TabLoopAnimType;                                   // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TabLoopFrame;                                      // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CampOKScaleAnimType;                               // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CampOKScaleFrame;                                  // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CampOKScaleWait;                                   // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CampOKEndScale;                                    // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CampOKInScaleAnimType;                             // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CampOKInScaleFrame;                                // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CampOKInScaleWait;                                 // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CampOKInEndScale;                                  // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CampOKCaptureScale;                                // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  PartyPanelInFlagSlideAnimType;                     // 0x0074(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PartyPanelInFlagSlideFrame;                        // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PartyPanelInFlagSlideBackFrame;                    // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  WipeChangeMaskAAnimType;                           // 0x0080(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        WipeChangeMaskAFrame;                              // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  WipeChangeMaskBAnimType;                           // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        WipeChangeMaskBFrame;                              // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        WipeChangeMaskBWait;                               // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WipeChangeCaptureScale;                            // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        WipeCloseMaskAFrame;                               // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        WipeCloseMaskBWait;                                // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  SuitekiAnimType;                                   // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SuitekiFrame;                                      // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HighpassBrightThreshold;                           // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HighpassBrightScale;                               // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 AoItaColorHigh;                                    // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 AoItaColorMid;                                     // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 AoItaColorLow;                                     // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GradAUpColorHigh;                                  // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GradADownColorHigh;                                // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GradBUpColorHigh;                                  // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GradBDownColorHigh;                                // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GradAUpColorMid;                                   // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GradADownColorMid;                                 // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GradBUpColorMid;                                   // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GradBDownColorMid;                                 // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GradAUpColorLow;                                   // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GradADownColorLow;                                 // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GradBUpColorLow;                                   // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 GradBDownColorLow;                                 // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HeroCaptureBgColor;                                // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIGaussType                                  HeroGaussType;                                     // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HeroGaussHorizontal;                               // 0x00F1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HeroGaussVertical;                                 // 0x00F2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3[0x1];                                       // 0x00F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeroGaussScale;                                    // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroBlurPrev1Offset;                               // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HeroBlurPrev1Alpha;                                // 0x00FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeroBlurPrev2Offset;                               // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HeroBlurPrev2Alpha;                                // 0x0104(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        NamiOneFrame;                                      // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NamiAlpha;                                         // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIGaussType                                  NamiGaussType;                                     // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiTopAOfsPos;                                    // 0x0114(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiTopAScale;                                     // 0x011C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiTopAColor;                                     // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiTopAAddBlend;                                  // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiTopBOfsPos;                                    // 0x012C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiTopBScale;                                     // 0x0134(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiTopBColor;                                     // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiTopBAddBlend;                                  // 0x0140(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiSkillAOfsPos;                                  // 0x0144(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiSkillAScale;                                   // 0x014C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiSkillAColor;                                   // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiSkillAAddBlend;                                // 0x0158(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiSkillBOfsPos;                                  // 0x015C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiSkillBScale;                                   // 0x0164(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiSkillBColor;                                   // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiSkillBAddBlend;                                // 0x0170(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiItemAOfsPos;                                   // 0x0174(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiItemAScale;                                    // 0x017C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiItemAColor;                                    // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiItemAAddBlend;                                 // 0x0188(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiItemBOfsPos;                                   // 0x018C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiItemBScale;                                    // 0x0194(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiItemBColor;                                    // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiItemBAddBlend;                                 // 0x01A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiEquipAOfsPos;                                  // 0x01A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiEquipAScale;                                   // 0x01AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiEquipAColor;                                   // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiEquipAAddBlend;                                // 0x01B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiEquipBOfsPos;                                  // 0x01BC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiEquipBScale;                                   // 0x01C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiEquipBColor;                                   // 0x01CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiEquipBAddBlend;                                // 0x01D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiPersonaAOfsPos;                                // 0x01D4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiPersonaAScale;                                 // 0x01DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiPersonaAColor;                                 // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiPersonaAAddBlend;                              // 0x01E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiPersonaBOfsPos;                                // 0x01EC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiPersonaBScale;                                 // 0x01F4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiPersonaBColor;                                 // 0x01FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiPersonaBAddBlend;                              // 0x0200(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiStatusAOfsPos;                                 // 0x0204(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiStatusAScale;                                  // 0x020C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiStatusAColor;                                  // 0x0214(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiStatusAAddBlend;                               // 0x0218(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiStatusBOfsPos;                                 // 0x021C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiStatusBScale;                                  // 0x0224(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiStatusBColor;                                  // 0x022C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiStatusBAddBlend;                               // 0x0230(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x3];                                      // 0x0231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiQuestAOfsPos;                                  // 0x0234(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiQuestAScale;                                   // 0x023C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiQuestAColor;                                   // 0x0244(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiQuestAAddBlend;                                // 0x0248(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0x3];                                      // 0x0249(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiQuestBOfsPos;                                  // 0x024C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiQuestBScale;                                   // 0x0254(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiQuestBColor;                                   // 0x025C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiQuestBAddBlend;                                // 0x0260(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiCommuAOfsPos;                                  // 0x0264(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiCommuAScale;                                   // 0x026C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiCommuAColor;                                   // 0x0274(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiCommuAAddBlend;                                // 0x0278(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiCommuBOfsPos;                                  // 0x027C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiCommuBScale;                                   // 0x0284(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiCommuBColor;                                   // 0x028C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiCommuBAddBlend;                                // 0x0290(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiCalendarAOfsPos;                               // 0x0294(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiCalendarAScale;                                // 0x029C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiCalendarAColor;                                // 0x02A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiCalendarAAddBlend;                             // 0x02A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiCalendarBOfsPos;                               // 0x02AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiCalendarBScale;                                // 0x02B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiCalendarBColor;                                // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiCalendarBAddBlend;                             // 0x02C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiSystemAOfsPos;                                 // 0x02C4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiSystemAScale;                                  // 0x02CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiSystemAColor;                                  // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiSystemAAddBlend;                               // 0x02D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiSystemBOfsPos;                                 // 0x02DC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiSystemBScale;                                  // 0x02E4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiSystemBColor;                                  // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiSystemBAddBlend;                               // 0x02F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiTutorialAOfsPos;                               // 0x02F4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiTutorialAScale;                                // 0x02FC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiTutorialAColor;                                // 0x0304(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiTutorialAAddBlend;                             // 0x0308(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiTutorialBOfsPos;                               // 0x030C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiTutorialBScale;                                // 0x0314(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiTutorialBColor;                                // 0x031C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiTutorialBAddBlend;                             // 0x0320(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_321[0x3];                                      // 0x0321(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiConfigAOfsPos;                                 // 0x0324(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiConfigAScale;                                  // 0x032C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiConfigAColor;                                  // 0x0334(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiConfigAAddBlend;                               // 0x0338(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_339[0x3];                                      // 0x0339(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              NamiConfigBOfsPos;                                 // 0x033C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NamiConfigBScale;                                  // 0x0344(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 NamiConfigBColor;                                  // 0x034C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NamiConfigBAddBlend;                               // 0x0350(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LightVecOfsTop;                                    // 0x0354(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightVecOfsSkill;                                  // 0x0364(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightVecOfsItem;                                   // 0x0374(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightVecOfsEquip;                                  // 0x0384(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightVecOfsPersona;                                // 0x0394(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightVecOfsStatus;                                 // 0x03A4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightVecOfsQuest;                                  // 0x03B4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightVecOfsCommu;                                  // 0x03C4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightVecOfsCalender;                               // 0x03D4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           LightVecOfsSystem;                                 // 0x03E4(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Edit_Key_Lock_Frame;                               // 0x03F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_GuideLine_X;                                  // 0x03F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Edit_StatusKeyLockFrame;                           // 0x03FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Edit_Root_FillColor;                               // 0x0400(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Root_Near;                                    // 0x0410(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Root_Far;                                     // 0x0414(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Edit_Skill_FillColor;                              // 0x0418(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Skill_Near;                                   // 0x0428(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Skill_Far;                                    // 0x042C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Edit_Item_FillColor;                               // 0x0430(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Item_Near;                                    // 0x0440(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Item_Far;                                     // 0x0444(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Edit_Equip_FillColor;                              // 0x0448(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Equip_Near;                                   // 0x0458(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Equip_Far;                                    // 0x045C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Edit_Status_FillColor;                             // 0x0460(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Status_Near;                                  // 0x0470(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Status_Far;                                   // 0x0474(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Edit_Quest_FillColor;                              // 0x0478(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Quest_Near;                                   // 0x0488(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Quest_Far;                                    // 0x048C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Edit_Commu_FillColor;                              // 0x0490(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Commu_Near;                                   // 0x04A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Commu_Far;                                    // 0x04A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Edit_System_FillColor;                             // 0x04A8(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_System_Near;                                  // 0x04B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_System_Far;                                   // 0x04BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Edit_Config_FillColor;                             // 0x04C0(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Config_Near;                                  // 0x04D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_Config_Far;                                   // 0x04D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampParamTableCommonRow) == 0x000008, "Wrong alignment on FCampParamTableCommonRow");
static_assert(sizeof(FCampParamTableCommonRow) == 0x0004D8, "Wrong size on FCampParamTableCommonRow");
static_assert(offsetof(FCampParamTableCommonRow, ListAllSlideAnimType) == 0x000008, "Member 'FCampParamTableCommonRow::ListAllSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, ListAllSlideFrame) == 0x00000C, "Member 'FCampParamTableCommonRow::ListAllSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, ListAllSlideBackFrame) == 0x000010, "Member 'FCampParamTableCommonRow::ListAllSlideBackFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_List_Cursor_Anim_Type) == 0x000014, "Member 'FCampParamTableCommonRow::Edit_List_Cursor_Anim_Type' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_List_Cursor_Slide_Frame) == 0x000018, "Member 'FCampParamTableCommonRow::Edit_List_Cursor_Slide_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_List_Party_RedCursor_Anim_Type) == 0x00001C, "Member 'FCampParamTableCommonRow::Edit_List_Party_RedCursor_Anim_Type' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_List_Party_RedCursor_Slide_Frame) == 0x000020, "Member 'FCampParamTableCommonRow::Edit_List_Party_RedCursor_Slide_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_List_Commu_RedCursor_Anim_Type) == 0x000024, "Member 'FCampParamTableCommonRow::Edit_List_Commu_RedCursor_Anim_Type' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_List_Commu_RedCursor_Slide_Frame) == 0x000028, "Member 'FCampParamTableCommonRow::Edit_List_Commu_RedCursor_Slide_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, ListRedSlideAnimType) == 0x00002C, "Member 'FCampParamTableCommonRow::ListRedSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, ListRedSlideFrame) == 0x000030, "Member 'FCampParamTableCommonRow::ListRedSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, ListRedSlideWait) == 0x000034, "Member 'FCampParamTableCommonRow::ListRedSlideWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, ListRedSlideBackFrame) == 0x000038, "Member 'FCampParamTableCommonRow::ListRedSlideBackFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, HPSPFlashFrame) == 0x00003C, "Member 'FCampParamTableCommonRow::HPSPFlashFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, TabShakeAnimType) == 0x000040, "Member 'FCampParamTableCommonRow::TabShakeAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, TabShakeFrame) == 0x000044, "Member 'FCampParamTableCommonRow::TabShakeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, TabLoopAnimType) == 0x000048, "Member 'FCampParamTableCommonRow::TabLoopAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, TabLoopFrame) == 0x00004C, "Member 'FCampParamTableCommonRow::TabLoopFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, CampOKScaleAnimType) == 0x000050, "Member 'FCampParamTableCommonRow::CampOKScaleAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, CampOKScaleFrame) == 0x000054, "Member 'FCampParamTableCommonRow::CampOKScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, CampOKScaleWait) == 0x000058, "Member 'FCampParamTableCommonRow::CampOKScaleWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, CampOKEndScale) == 0x00005C, "Member 'FCampParamTableCommonRow::CampOKEndScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, CampOKInScaleAnimType) == 0x000060, "Member 'FCampParamTableCommonRow::CampOKInScaleAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, CampOKInScaleFrame) == 0x000064, "Member 'FCampParamTableCommonRow::CampOKInScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, CampOKInScaleWait) == 0x000068, "Member 'FCampParamTableCommonRow::CampOKInScaleWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, CampOKInEndScale) == 0x00006C, "Member 'FCampParamTableCommonRow::CampOKInEndScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, CampOKCaptureScale) == 0x000070, "Member 'FCampParamTableCommonRow::CampOKCaptureScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, PartyPanelInFlagSlideAnimType) == 0x000074, "Member 'FCampParamTableCommonRow::PartyPanelInFlagSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, PartyPanelInFlagSlideFrame) == 0x000078, "Member 'FCampParamTableCommonRow::PartyPanelInFlagSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, PartyPanelInFlagSlideBackFrame) == 0x00007C, "Member 'FCampParamTableCommonRow::PartyPanelInFlagSlideBackFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, WipeChangeMaskAAnimType) == 0x000080, "Member 'FCampParamTableCommonRow::WipeChangeMaskAAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, WipeChangeMaskAFrame) == 0x000084, "Member 'FCampParamTableCommonRow::WipeChangeMaskAFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, WipeChangeMaskBAnimType) == 0x000088, "Member 'FCampParamTableCommonRow::WipeChangeMaskBAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, WipeChangeMaskBFrame) == 0x00008C, "Member 'FCampParamTableCommonRow::WipeChangeMaskBFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, WipeChangeMaskBWait) == 0x000090, "Member 'FCampParamTableCommonRow::WipeChangeMaskBWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, WipeChangeCaptureScale) == 0x000094, "Member 'FCampParamTableCommonRow::WipeChangeCaptureScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, WipeCloseMaskAFrame) == 0x000098, "Member 'FCampParamTableCommonRow::WipeCloseMaskAFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, WipeCloseMaskBWait) == 0x00009C, "Member 'FCampParamTableCommonRow::WipeCloseMaskBWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, SuitekiAnimType) == 0x0000A0, "Member 'FCampParamTableCommonRow::SuitekiAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, SuitekiFrame) == 0x0000A4, "Member 'FCampParamTableCommonRow::SuitekiFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, HighpassBrightThreshold) == 0x0000A8, "Member 'FCampParamTableCommonRow::HighpassBrightThreshold' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, HighpassBrightScale) == 0x0000AC, "Member 'FCampParamTableCommonRow::HighpassBrightScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, AoItaColorHigh) == 0x0000B0, "Member 'FCampParamTableCommonRow::AoItaColorHigh' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, AoItaColorMid) == 0x0000B4, "Member 'FCampParamTableCommonRow::AoItaColorMid' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, AoItaColorLow) == 0x0000B8, "Member 'FCampParamTableCommonRow::AoItaColorLow' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, GradAUpColorHigh) == 0x0000BC, "Member 'FCampParamTableCommonRow::GradAUpColorHigh' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, GradADownColorHigh) == 0x0000C0, "Member 'FCampParamTableCommonRow::GradADownColorHigh' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, GradBUpColorHigh) == 0x0000C4, "Member 'FCampParamTableCommonRow::GradBUpColorHigh' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, GradBDownColorHigh) == 0x0000C8, "Member 'FCampParamTableCommonRow::GradBDownColorHigh' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, GradAUpColorMid) == 0x0000CC, "Member 'FCampParamTableCommonRow::GradAUpColorMid' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, GradADownColorMid) == 0x0000D0, "Member 'FCampParamTableCommonRow::GradADownColorMid' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, GradBUpColorMid) == 0x0000D4, "Member 'FCampParamTableCommonRow::GradBUpColorMid' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, GradBDownColorMid) == 0x0000D8, "Member 'FCampParamTableCommonRow::GradBDownColorMid' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, GradAUpColorLow) == 0x0000DC, "Member 'FCampParamTableCommonRow::GradAUpColorLow' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, GradADownColorLow) == 0x0000E0, "Member 'FCampParamTableCommonRow::GradADownColorLow' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, GradBUpColorLow) == 0x0000E4, "Member 'FCampParamTableCommonRow::GradBUpColorLow' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, GradBDownColorLow) == 0x0000E8, "Member 'FCampParamTableCommonRow::GradBDownColorLow' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, HeroCaptureBgColor) == 0x0000EC, "Member 'FCampParamTableCommonRow::HeroCaptureBgColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, HeroGaussType) == 0x0000F0, "Member 'FCampParamTableCommonRow::HeroGaussType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, HeroGaussHorizontal) == 0x0000F1, "Member 'FCampParamTableCommonRow::HeroGaussHorizontal' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, HeroGaussVertical) == 0x0000F2, "Member 'FCampParamTableCommonRow::HeroGaussVertical' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, HeroGaussScale) == 0x0000F4, "Member 'FCampParamTableCommonRow::HeroGaussScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, HeroBlurPrev1Offset) == 0x0000F8, "Member 'FCampParamTableCommonRow::HeroBlurPrev1Offset' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, HeroBlurPrev1Alpha) == 0x0000FC, "Member 'FCampParamTableCommonRow::HeroBlurPrev1Alpha' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, HeroBlurPrev2Offset) == 0x000100, "Member 'FCampParamTableCommonRow::HeroBlurPrev2Offset' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, HeroBlurPrev2Alpha) == 0x000104, "Member 'FCampParamTableCommonRow::HeroBlurPrev2Alpha' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiOneFrame) == 0x000108, "Member 'FCampParamTableCommonRow::NamiOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiAlpha) == 0x00010C, "Member 'FCampParamTableCommonRow::NamiAlpha' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiGaussType) == 0x000110, "Member 'FCampParamTableCommonRow::NamiGaussType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTopAOfsPos) == 0x000114, "Member 'FCampParamTableCommonRow::NamiTopAOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTopAScale) == 0x00011C, "Member 'FCampParamTableCommonRow::NamiTopAScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTopAColor) == 0x000124, "Member 'FCampParamTableCommonRow::NamiTopAColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTopAAddBlend) == 0x000128, "Member 'FCampParamTableCommonRow::NamiTopAAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTopBOfsPos) == 0x00012C, "Member 'FCampParamTableCommonRow::NamiTopBOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTopBScale) == 0x000134, "Member 'FCampParamTableCommonRow::NamiTopBScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTopBColor) == 0x00013C, "Member 'FCampParamTableCommonRow::NamiTopBColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTopBAddBlend) == 0x000140, "Member 'FCampParamTableCommonRow::NamiTopBAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSkillAOfsPos) == 0x000144, "Member 'FCampParamTableCommonRow::NamiSkillAOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSkillAScale) == 0x00014C, "Member 'FCampParamTableCommonRow::NamiSkillAScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSkillAColor) == 0x000154, "Member 'FCampParamTableCommonRow::NamiSkillAColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSkillAAddBlend) == 0x000158, "Member 'FCampParamTableCommonRow::NamiSkillAAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSkillBOfsPos) == 0x00015C, "Member 'FCampParamTableCommonRow::NamiSkillBOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSkillBScale) == 0x000164, "Member 'FCampParamTableCommonRow::NamiSkillBScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSkillBColor) == 0x00016C, "Member 'FCampParamTableCommonRow::NamiSkillBColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSkillBAddBlend) == 0x000170, "Member 'FCampParamTableCommonRow::NamiSkillBAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiItemAOfsPos) == 0x000174, "Member 'FCampParamTableCommonRow::NamiItemAOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiItemAScale) == 0x00017C, "Member 'FCampParamTableCommonRow::NamiItemAScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiItemAColor) == 0x000184, "Member 'FCampParamTableCommonRow::NamiItemAColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiItemAAddBlend) == 0x000188, "Member 'FCampParamTableCommonRow::NamiItemAAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiItemBOfsPos) == 0x00018C, "Member 'FCampParamTableCommonRow::NamiItemBOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiItemBScale) == 0x000194, "Member 'FCampParamTableCommonRow::NamiItemBScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiItemBColor) == 0x00019C, "Member 'FCampParamTableCommonRow::NamiItemBColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiItemBAddBlend) == 0x0001A0, "Member 'FCampParamTableCommonRow::NamiItemBAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiEquipAOfsPos) == 0x0001A4, "Member 'FCampParamTableCommonRow::NamiEquipAOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiEquipAScale) == 0x0001AC, "Member 'FCampParamTableCommonRow::NamiEquipAScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiEquipAColor) == 0x0001B4, "Member 'FCampParamTableCommonRow::NamiEquipAColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiEquipAAddBlend) == 0x0001B8, "Member 'FCampParamTableCommonRow::NamiEquipAAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiEquipBOfsPos) == 0x0001BC, "Member 'FCampParamTableCommonRow::NamiEquipBOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiEquipBScale) == 0x0001C4, "Member 'FCampParamTableCommonRow::NamiEquipBScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiEquipBColor) == 0x0001CC, "Member 'FCampParamTableCommonRow::NamiEquipBColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiEquipBAddBlend) == 0x0001D0, "Member 'FCampParamTableCommonRow::NamiEquipBAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiPersonaAOfsPos) == 0x0001D4, "Member 'FCampParamTableCommonRow::NamiPersonaAOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiPersonaAScale) == 0x0001DC, "Member 'FCampParamTableCommonRow::NamiPersonaAScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiPersonaAColor) == 0x0001E4, "Member 'FCampParamTableCommonRow::NamiPersonaAColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiPersonaAAddBlend) == 0x0001E8, "Member 'FCampParamTableCommonRow::NamiPersonaAAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiPersonaBOfsPos) == 0x0001EC, "Member 'FCampParamTableCommonRow::NamiPersonaBOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiPersonaBScale) == 0x0001F4, "Member 'FCampParamTableCommonRow::NamiPersonaBScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiPersonaBColor) == 0x0001FC, "Member 'FCampParamTableCommonRow::NamiPersonaBColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiPersonaBAddBlend) == 0x000200, "Member 'FCampParamTableCommonRow::NamiPersonaBAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiStatusAOfsPos) == 0x000204, "Member 'FCampParamTableCommonRow::NamiStatusAOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiStatusAScale) == 0x00020C, "Member 'FCampParamTableCommonRow::NamiStatusAScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiStatusAColor) == 0x000214, "Member 'FCampParamTableCommonRow::NamiStatusAColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiStatusAAddBlend) == 0x000218, "Member 'FCampParamTableCommonRow::NamiStatusAAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiStatusBOfsPos) == 0x00021C, "Member 'FCampParamTableCommonRow::NamiStatusBOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiStatusBScale) == 0x000224, "Member 'FCampParamTableCommonRow::NamiStatusBScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiStatusBColor) == 0x00022C, "Member 'FCampParamTableCommonRow::NamiStatusBColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiStatusBAddBlend) == 0x000230, "Member 'FCampParamTableCommonRow::NamiStatusBAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiQuestAOfsPos) == 0x000234, "Member 'FCampParamTableCommonRow::NamiQuestAOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiQuestAScale) == 0x00023C, "Member 'FCampParamTableCommonRow::NamiQuestAScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiQuestAColor) == 0x000244, "Member 'FCampParamTableCommonRow::NamiQuestAColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiQuestAAddBlend) == 0x000248, "Member 'FCampParamTableCommonRow::NamiQuestAAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiQuestBOfsPos) == 0x00024C, "Member 'FCampParamTableCommonRow::NamiQuestBOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiQuestBScale) == 0x000254, "Member 'FCampParamTableCommonRow::NamiQuestBScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiQuestBColor) == 0x00025C, "Member 'FCampParamTableCommonRow::NamiQuestBColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiQuestBAddBlend) == 0x000260, "Member 'FCampParamTableCommonRow::NamiQuestBAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCommuAOfsPos) == 0x000264, "Member 'FCampParamTableCommonRow::NamiCommuAOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCommuAScale) == 0x00026C, "Member 'FCampParamTableCommonRow::NamiCommuAScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCommuAColor) == 0x000274, "Member 'FCampParamTableCommonRow::NamiCommuAColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCommuAAddBlend) == 0x000278, "Member 'FCampParamTableCommonRow::NamiCommuAAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCommuBOfsPos) == 0x00027C, "Member 'FCampParamTableCommonRow::NamiCommuBOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCommuBScale) == 0x000284, "Member 'FCampParamTableCommonRow::NamiCommuBScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCommuBColor) == 0x00028C, "Member 'FCampParamTableCommonRow::NamiCommuBColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCommuBAddBlend) == 0x000290, "Member 'FCampParamTableCommonRow::NamiCommuBAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCalendarAOfsPos) == 0x000294, "Member 'FCampParamTableCommonRow::NamiCalendarAOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCalendarAScale) == 0x00029C, "Member 'FCampParamTableCommonRow::NamiCalendarAScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCalendarAColor) == 0x0002A4, "Member 'FCampParamTableCommonRow::NamiCalendarAColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCalendarAAddBlend) == 0x0002A8, "Member 'FCampParamTableCommonRow::NamiCalendarAAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCalendarBOfsPos) == 0x0002AC, "Member 'FCampParamTableCommonRow::NamiCalendarBOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCalendarBScale) == 0x0002B4, "Member 'FCampParamTableCommonRow::NamiCalendarBScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCalendarBColor) == 0x0002BC, "Member 'FCampParamTableCommonRow::NamiCalendarBColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiCalendarBAddBlend) == 0x0002C0, "Member 'FCampParamTableCommonRow::NamiCalendarBAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSystemAOfsPos) == 0x0002C4, "Member 'FCampParamTableCommonRow::NamiSystemAOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSystemAScale) == 0x0002CC, "Member 'FCampParamTableCommonRow::NamiSystemAScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSystemAColor) == 0x0002D4, "Member 'FCampParamTableCommonRow::NamiSystemAColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSystemAAddBlend) == 0x0002D8, "Member 'FCampParamTableCommonRow::NamiSystemAAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSystemBOfsPos) == 0x0002DC, "Member 'FCampParamTableCommonRow::NamiSystemBOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSystemBScale) == 0x0002E4, "Member 'FCampParamTableCommonRow::NamiSystemBScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSystemBColor) == 0x0002EC, "Member 'FCampParamTableCommonRow::NamiSystemBColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiSystemBAddBlend) == 0x0002F0, "Member 'FCampParamTableCommonRow::NamiSystemBAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTutorialAOfsPos) == 0x0002F4, "Member 'FCampParamTableCommonRow::NamiTutorialAOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTutorialAScale) == 0x0002FC, "Member 'FCampParamTableCommonRow::NamiTutorialAScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTutorialAColor) == 0x000304, "Member 'FCampParamTableCommonRow::NamiTutorialAColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTutorialAAddBlend) == 0x000308, "Member 'FCampParamTableCommonRow::NamiTutorialAAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTutorialBOfsPos) == 0x00030C, "Member 'FCampParamTableCommonRow::NamiTutorialBOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTutorialBScale) == 0x000314, "Member 'FCampParamTableCommonRow::NamiTutorialBScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTutorialBColor) == 0x00031C, "Member 'FCampParamTableCommonRow::NamiTutorialBColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiTutorialBAddBlend) == 0x000320, "Member 'FCampParamTableCommonRow::NamiTutorialBAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiConfigAOfsPos) == 0x000324, "Member 'FCampParamTableCommonRow::NamiConfigAOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiConfigAScale) == 0x00032C, "Member 'FCampParamTableCommonRow::NamiConfigAScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiConfigAColor) == 0x000334, "Member 'FCampParamTableCommonRow::NamiConfigAColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiConfigAAddBlend) == 0x000338, "Member 'FCampParamTableCommonRow::NamiConfigAAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiConfigBOfsPos) == 0x00033C, "Member 'FCampParamTableCommonRow::NamiConfigBOfsPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiConfigBScale) == 0x000344, "Member 'FCampParamTableCommonRow::NamiConfigBScale' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiConfigBColor) == 0x00034C, "Member 'FCampParamTableCommonRow::NamiConfigBColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, NamiConfigBAddBlend) == 0x000350, "Member 'FCampParamTableCommonRow::NamiConfigBAddBlend' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, LightVecOfsTop) == 0x000354, "Member 'FCampParamTableCommonRow::LightVecOfsTop' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, LightVecOfsSkill) == 0x000364, "Member 'FCampParamTableCommonRow::LightVecOfsSkill' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, LightVecOfsItem) == 0x000374, "Member 'FCampParamTableCommonRow::LightVecOfsItem' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, LightVecOfsEquip) == 0x000384, "Member 'FCampParamTableCommonRow::LightVecOfsEquip' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, LightVecOfsPersona) == 0x000394, "Member 'FCampParamTableCommonRow::LightVecOfsPersona' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, LightVecOfsStatus) == 0x0003A4, "Member 'FCampParamTableCommonRow::LightVecOfsStatus' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, LightVecOfsQuest) == 0x0003B4, "Member 'FCampParamTableCommonRow::LightVecOfsQuest' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, LightVecOfsCommu) == 0x0003C4, "Member 'FCampParamTableCommonRow::LightVecOfsCommu' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, LightVecOfsCalender) == 0x0003D4, "Member 'FCampParamTableCommonRow::LightVecOfsCalender' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, LightVecOfsSystem) == 0x0003E4, "Member 'FCampParamTableCommonRow::LightVecOfsSystem' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Key_Lock_Frame) == 0x0003F4, "Member 'FCampParamTableCommonRow::Edit_Key_Lock_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_GuideLine_X) == 0x0003F8, "Member 'FCampParamTableCommonRow::Edit_GuideLine_X' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_StatusKeyLockFrame) == 0x0003FC, "Member 'FCampParamTableCommonRow::Edit_StatusKeyLockFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Root_FillColor) == 0x000400, "Member 'FCampParamTableCommonRow::Edit_Root_FillColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Root_Near) == 0x000410, "Member 'FCampParamTableCommonRow::Edit_Root_Near' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Root_Far) == 0x000414, "Member 'FCampParamTableCommonRow::Edit_Root_Far' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Skill_FillColor) == 0x000418, "Member 'FCampParamTableCommonRow::Edit_Skill_FillColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Skill_Near) == 0x000428, "Member 'FCampParamTableCommonRow::Edit_Skill_Near' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Skill_Far) == 0x00042C, "Member 'FCampParamTableCommonRow::Edit_Skill_Far' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Item_FillColor) == 0x000430, "Member 'FCampParamTableCommonRow::Edit_Item_FillColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Item_Near) == 0x000440, "Member 'FCampParamTableCommonRow::Edit_Item_Near' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Item_Far) == 0x000444, "Member 'FCampParamTableCommonRow::Edit_Item_Far' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Equip_FillColor) == 0x000448, "Member 'FCampParamTableCommonRow::Edit_Equip_FillColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Equip_Near) == 0x000458, "Member 'FCampParamTableCommonRow::Edit_Equip_Near' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Equip_Far) == 0x00045C, "Member 'FCampParamTableCommonRow::Edit_Equip_Far' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Status_FillColor) == 0x000460, "Member 'FCampParamTableCommonRow::Edit_Status_FillColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Status_Near) == 0x000470, "Member 'FCampParamTableCommonRow::Edit_Status_Near' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Status_Far) == 0x000474, "Member 'FCampParamTableCommonRow::Edit_Status_Far' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Quest_FillColor) == 0x000478, "Member 'FCampParamTableCommonRow::Edit_Quest_FillColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Quest_Near) == 0x000488, "Member 'FCampParamTableCommonRow::Edit_Quest_Near' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Quest_Far) == 0x00048C, "Member 'FCampParamTableCommonRow::Edit_Quest_Far' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Commu_FillColor) == 0x000490, "Member 'FCampParamTableCommonRow::Edit_Commu_FillColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Commu_Near) == 0x0004A0, "Member 'FCampParamTableCommonRow::Edit_Commu_Near' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Commu_Far) == 0x0004A4, "Member 'FCampParamTableCommonRow::Edit_Commu_Far' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_System_FillColor) == 0x0004A8, "Member 'FCampParamTableCommonRow::Edit_System_FillColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_System_Near) == 0x0004B8, "Member 'FCampParamTableCommonRow::Edit_System_Near' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_System_Far) == 0x0004BC, "Member 'FCampParamTableCommonRow::Edit_System_Far' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Config_FillColor) == 0x0004C0, "Member 'FCampParamTableCommonRow::Edit_Config_FillColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Config_Near) == 0x0004D0, "Member 'FCampParamTableCommonRow::Edit_Config_Near' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommonRow, Edit_Config_Far) == 0x0004D4, "Member 'FCampParamTableCommonRow::Edit_Config_Far' has a wrong offset!");

// ScriptStruct xrd777.DatBagEnableDataTable
// 0x0010 (0x0018 - 0x0008)
struct FDatBagEnableDataTable final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Major;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Minor;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatBagEnableDataTable) == 0x000008, "Wrong alignment on FDatBagEnableDataTable");
static_assert(sizeof(FDatBagEnableDataTable) == 0x000018, "Wrong size on FDatBagEnableDataTable");
static_assert(offsetof(FDatBagEnableDataTable, Category) == 0x000008, "Member 'FDatBagEnableDataTable::Category' has a wrong offset!");
static_assert(offsetof(FDatBagEnableDataTable, Major) == 0x000010, "Member 'FDatBagEnableDataTable::Major' has a wrong offset!");
static_assert(offsetof(FDatBagEnableDataTable, Minor) == 0x000014, "Member 'FDatBagEnableDataTable::Minor' has a wrong offset!");

// ScriptStruct xrd777.CampParamTableSystemRow
// 0x0160 (0x0168 - 0x0008)
struct FCampParamTableSystemRow final : public FTableRowBase
{
public:
	float                                         SystemTopInMenuDist;                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SystemTopInTopMenuFrame1;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SystemTopInTopMenuFrame2;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SystemTopInTopMenuRotFrame;                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  SystemTopInAoItaAnimType;                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SystemTopInAoItaFrame;                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SystemTopInAoItaWait;                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  SystemTopInTitleAnimType;                          // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SystemTopInTitleFrame;                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SystemTopInTitleWait;                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopTutorialOnPos;                            // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopTutorialOnRot;                            // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopConfigOnPos;                              // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopConfigOnRot;                              // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopDictionaryOnPos;                          // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopDictionaryOnRot;                          // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopDataloadOnPos;                            // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopDataloadOnRot;                            // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopDatasaveOnPos;                            // 0x0060(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopDatasaveOnRot;                            // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopRollbackOnPos;                            // 0x006C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopRollbackOnRot;                            // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopTitleOnPos;                               // 0x0078(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopTitleOnRot;                               // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopTutorialOffPos;                           // 0x0084(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopTutorialOffRot;                           // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopConfigOffPos;                             // 0x0090(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopConfigOffRot;                             // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopDictionaryOffPos;                         // 0x009C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopDictionaryOffRot;                         // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopDataloadOffPos;                           // 0x00A8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopDataloadOffRot;                           // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopDatasaveOffPos;                           // 0x00B4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopDatasaveOffRot;                           // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopRollbackOffPos;                           // 0x00C0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopRollbackOffRot;                           // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SystemTopTitleOffPos;                              // 0x00CC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SystemTopTitleOffRot;                              // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_Tutorial_Text_Scale;                 // 0x00D8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_Tutorial_Cursor_Scale;               // 0x00E0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_Config_Text_Scale;                   // 0x00E8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_Config_Cursor_Scale;                 // 0x00F0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_Dictionary_Text_Scale;               // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_Dictionary_Cursor_Scale;             // 0x0100(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_DataLoad_Text_Scale;                 // 0x0108(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_DataLoad_Cursor_Scale;               // 0x0110(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_DataSave_Text_Scale;                 // 0x0118(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_DataSave_Cursor_Scale;               // 0x0120(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_RollBack_Text_Scale;                 // 0x0128(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_RollBack_Cursor_Scale;               // 0x0130(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_ReturnToTitle_Text_Scale;            // 0x0138(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Edit_CursorOn_ReturnToTitle_Cursor_Scale;          // 0x0140(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_CursorOn_Tutorial_Cursor_Angle;               // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_CursorOn_Config_Cursor_Angle;                 // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_CursorOn_Dictionary_Cursor_Angle;             // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_CursorOn_DataLoad_Cursor_Angle;               // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_CursorOn_DataSave_Cursor_Angle;               // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_CursorOn_RollBack_Cursor_Angle;               // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Edit_CursorOn_ReturnToTitle_Cursor_Angle;          // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCampParamTableSystemRow) == 0x000008, "Wrong alignment on FCampParamTableSystemRow");
static_assert(sizeof(FCampParamTableSystemRow) == 0x000168, "Wrong size on FCampParamTableSystemRow");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopInMenuDist) == 0x000008, "Member 'FCampParamTableSystemRow::SystemTopInMenuDist' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopInTopMenuFrame1) == 0x00000C, "Member 'FCampParamTableSystemRow::SystemTopInTopMenuFrame1' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopInTopMenuFrame2) == 0x000010, "Member 'FCampParamTableSystemRow::SystemTopInTopMenuFrame2' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopInTopMenuRotFrame) == 0x000014, "Member 'FCampParamTableSystemRow::SystemTopInTopMenuRotFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopInAoItaAnimType) == 0x000018, "Member 'FCampParamTableSystemRow::SystemTopInAoItaAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopInAoItaFrame) == 0x00001C, "Member 'FCampParamTableSystemRow::SystemTopInAoItaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopInAoItaWait) == 0x000020, "Member 'FCampParamTableSystemRow::SystemTopInAoItaWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopInTitleAnimType) == 0x000024, "Member 'FCampParamTableSystemRow::SystemTopInTitleAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopInTitleFrame) == 0x000028, "Member 'FCampParamTableSystemRow::SystemTopInTitleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopInTitleWait) == 0x00002C, "Member 'FCampParamTableSystemRow::SystemTopInTitleWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopTutorialOnPos) == 0x000030, "Member 'FCampParamTableSystemRow::SystemTopTutorialOnPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopTutorialOnRot) == 0x000038, "Member 'FCampParamTableSystemRow::SystemTopTutorialOnRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopConfigOnPos) == 0x00003C, "Member 'FCampParamTableSystemRow::SystemTopConfigOnPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopConfigOnRot) == 0x000044, "Member 'FCampParamTableSystemRow::SystemTopConfigOnRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopDictionaryOnPos) == 0x000048, "Member 'FCampParamTableSystemRow::SystemTopDictionaryOnPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopDictionaryOnRot) == 0x000050, "Member 'FCampParamTableSystemRow::SystemTopDictionaryOnRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopDataloadOnPos) == 0x000054, "Member 'FCampParamTableSystemRow::SystemTopDataloadOnPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopDataloadOnRot) == 0x00005C, "Member 'FCampParamTableSystemRow::SystemTopDataloadOnRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopDatasaveOnPos) == 0x000060, "Member 'FCampParamTableSystemRow::SystemTopDatasaveOnPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopDatasaveOnRot) == 0x000068, "Member 'FCampParamTableSystemRow::SystemTopDatasaveOnRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopRollbackOnPos) == 0x00006C, "Member 'FCampParamTableSystemRow::SystemTopRollbackOnPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopRollbackOnRot) == 0x000074, "Member 'FCampParamTableSystemRow::SystemTopRollbackOnRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopTitleOnPos) == 0x000078, "Member 'FCampParamTableSystemRow::SystemTopTitleOnPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopTitleOnRot) == 0x000080, "Member 'FCampParamTableSystemRow::SystemTopTitleOnRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopTutorialOffPos) == 0x000084, "Member 'FCampParamTableSystemRow::SystemTopTutorialOffPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopTutorialOffRot) == 0x00008C, "Member 'FCampParamTableSystemRow::SystemTopTutorialOffRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopConfigOffPos) == 0x000090, "Member 'FCampParamTableSystemRow::SystemTopConfigOffPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopConfigOffRot) == 0x000098, "Member 'FCampParamTableSystemRow::SystemTopConfigOffRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopDictionaryOffPos) == 0x00009C, "Member 'FCampParamTableSystemRow::SystemTopDictionaryOffPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopDictionaryOffRot) == 0x0000A4, "Member 'FCampParamTableSystemRow::SystemTopDictionaryOffRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopDataloadOffPos) == 0x0000A8, "Member 'FCampParamTableSystemRow::SystemTopDataloadOffPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopDataloadOffRot) == 0x0000B0, "Member 'FCampParamTableSystemRow::SystemTopDataloadOffRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopDatasaveOffPos) == 0x0000B4, "Member 'FCampParamTableSystemRow::SystemTopDatasaveOffPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopDatasaveOffRot) == 0x0000BC, "Member 'FCampParamTableSystemRow::SystemTopDatasaveOffRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopRollbackOffPos) == 0x0000C0, "Member 'FCampParamTableSystemRow::SystemTopRollbackOffPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopRollbackOffRot) == 0x0000C8, "Member 'FCampParamTableSystemRow::SystemTopRollbackOffRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopTitleOffPos) == 0x0000CC, "Member 'FCampParamTableSystemRow::SystemTopTitleOffPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, SystemTopTitleOffRot) == 0x0000D4, "Member 'FCampParamTableSystemRow::SystemTopTitleOffRot' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_Tutorial_Text_Scale) == 0x0000D8, "Member 'FCampParamTableSystemRow::Edit_CursorOn_Tutorial_Text_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_Tutorial_Cursor_Scale) == 0x0000E0, "Member 'FCampParamTableSystemRow::Edit_CursorOn_Tutorial_Cursor_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_Config_Text_Scale) == 0x0000E8, "Member 'FCampParamTableSystemRow::Edit_CursorOn_Config_Text_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_Config_Cursor_Scale) == 0x0000F0, "Member 'FCampParamTableSystemRow::Edit_CursorOn_Config_Cursor_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_Dictionary_Text_Scale) == 0x0000F8, "Member 'FCampParamTableSystemRow::Edit_CursorOn_Dictionary_Text_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_Dictionary_Cursor_Scale) == 0x000100, "Member 'FCampParamTableSystemRow::Edit_CursorOn_Dictionary_Cursor_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_DataLoad_Text_Scale) == 0x000108, "Member 'FCampParamTableSystemRow::Edit_CursorOn_DataLoad_Text_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_DataLoad_Cursor_Scale) == 0x000110, "Member 'FCampParamTableSystemRow::Edit_CursorOn_DataLoad_Cursor_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_DataSave_Text_Scale) == 0x000118, "Member 'FCampParamTableSystemRow::Edit_CursorOn_DataSave_Text_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_DataSave_Cursor_Scale) == 0x000120, "Member 'FCampParamTableSystemRow::Edit_CursorOn_DataSave_Cursor_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_RollBack_Text_Scale) == 0x000128, "Member 'FCampParamTableSystemRow::Edit_CursorOn_RollBack_Text_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_RollBack_Cursor_Scale) == 0x000130, "Member 'FCampParamTableSystemRow::Edit_CursorOn_RollBack_Cursor_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_ReturnToTitle_Text_Scale) == 0x000138, "Member 'FCampParamTableSystemRow::Edit_CursorOn_ReturnToTitle_Text_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_ReturnToTitle_Cursor_Scale) == 0x000140, "Member 'FCampParamTableSystemRow::Edit_CursorOn_ReturnToTitle_Cursor_Scale' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_Tutorial_Cursor_Angle) == 0x000148, "Member 'FCampParamTableSystemRow::Edit_CursorOn_Tutorial_Cursor_Angle' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_Config_Cursor_Angle) == 0x00014C, "Member 'FCampParamTableSystemRow::Edit_CursorOn_Config_Cursor_Angle' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_Dictionary_Cursor_Angle) == 0x000150, "Member 'FCampParamTableSystemRow::Edit_CursorOn_Dictionary_Cursor_Angle' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_DataLoad_Cursor_Angle) == 0x000154, "Member 'FCampParamTableSystemRow::Edit_CursorOn_DataLoad_Cursor_Angle' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_DataSave_Cursor_Angle) == 0x000158, "Member 'FCampParamTableSystemRow::Edit_CursorOn_DataSave_Cursor_Angle' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_RollBack_Cursor_Angle) == 0x00015C, "Member 'FCampParamTableSystemRow::Edit_CursorOn_RollBack_Cursor_Angle' has a wrong offset!");
static_assert(offsetof(FCampParamTableSystemRow, Edit_CursorOn_ReturnToTitle_Cursor_Angle) == 0x000160, "Member 'FCampParamTableSystemRow::Edit_CursorOn_ReturnToTitle_Cursor_Angle' has a wrong offset!");

// ScriptStruct xrd777.FldCrowdWalkFollowParam
// 0x0018 (0x0018 - 0x0000)
struct FFldCrowdWalkFollowParam final
{
public:
	TSubclassOf<class AMobWalkCharaBaseCore>      MMobBpClass;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MRelativeLocation;                                 // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldCrowdWalkFollowParam) == 0x000008, "Wrong alignment on FFldCrowdWalkFollowParam");
static_assert(sizeof(FFldCrowdWalkFollowParam) == 0x000018, "Wrong size on FFldCrowdWalkFollowParam");
static_assert(offsetof(FFldCrowdWalkFollowParam, MMobBpClass) == 0x000000, "Member 'FFldCrowdWalkFollowParam::MMobBpClass' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkFollowParam, MRelativeLocation) == 0x000008, "Member 'FFldCrowdWalkFollowParam::MRelativeLocation' has a wrong offset!");

// ScriptStruct xrd777.FldCrowdWalkBpParam
// 0x0018 (0x0018 - 0x0000)
struct FFldCrowdWalkBpParam final
{
public:
	TSubclassOf<class AMobWalkCharaBaseCore>      MMobBpClass;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFldCrowdWalkFollowParam>       MFollowList;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldCrowdWalkBpParam) == 0x000008, "Wrong alignment on FFldCrowdWalkBpParam");
static_assert(sizeof(FFldCrowdWalkBpParam) == 0x000018, "Wrong size on FFldCrowdWalkBpParam");
static_assert(offsetof(FFldCrowdWalkBpParam, MMobBpClass) == 0x000000, "Member 'FFldCrowdWalkBpParam::MMobBpClass' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkBpParam, MFollowList) == 0x000008, "Member 'FFldCrowdWalkBpParam::MFollowList' has a wrong offset!");

// ScriptStruct xrd777.CampParamTableCommuRow
// 0x00A8 (0x00B0 - 0x0008)
struct FCampParamTableCommuRow final : public FTableRowBase
{
public:
	EOneAnimType                                  CommListInSilhouetteAnimType;                      // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CommListInSilhouetteFrame;                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommListInSilhouetteWait;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CommListInSilhouetteOriginal;                      // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CommListInSilhouetteTarget;                        // 0x001C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CommListInSiroItaAnimType;                         // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CommListInSiroItaFrame;                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommListInSiroItaWait;                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommListOutSiroItaFrame;                           // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CommListInListAnimType;                            // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CommListInListFrame;                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommListInListWait;                                // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommListOutListFrame;                              // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CommDetlInDetailAnimType;                          // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CommDetlInDetailFrame;                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommDetlInDetailWait;                              // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommDetlOutDetailFrame;                            // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CommDetlInDescriAnimType;                          // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CommDetlInDescriFrame;                             // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommDetlInDescriWait;                              // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CommDetlInMemberAnimType;                          // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CommDetlInMemberFrame;                             // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommDetlInMemberWait;                              // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CommDetlInBustupAnimType;                          // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CommDetlInBustupFrame;                             // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommDetlInBustupWait;                              // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommDetlBustupChangeFrame;                         // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CommuCardAnimType;                                 // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CommuCardFrameMin;                                 // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommuCardFrameMax;                                 // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommuCardWaitMin;                                  // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CommuCardWaitMax;                                  // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommuCardScaleMin;                                 // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommuCardScaleMax;                                 // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommuCardXAccMin;                                  // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommuCardXAccMax;                                  // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommuCardRotAxis1Min;                              // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommuCardRotAxis1Max;                              // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommuCardRotAxis2Min;                              // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommuCardRotAxis2Max;                              // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampParamTableCommuRow) == 0x000008, "Wrong alignment on FCampParamTableCommuRow");
static_assert(sizeof(FCampParamTableCommuRow) == 0x0000B0, "Wrong size on FCampParamTableCommuRow");
static_assert(offsetof(FCampParamTableCommuRow, CommListInSilhouetteAnimType) == 0x000008, "Member 'FCampParamTableCommuRow::CommListInSilhouetteAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommListInSilhouetteFrame) == 0x00000C, "Member 'FCampParamTableCommuRow::CommListInSilhouetteFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommListInSilhouetteWait) == 0x000010, "Member 'FCampParamTableCommuRow::CommListInSilhouetteWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommListInSilhouetteOriginal) == 0x000014, "Member 'FCampParamTableCommuRow::CommListInSilhouetteOriginal' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommListInSilhouetteTarget) == 0x00001C, "Member 'FCampParamTableCommuRow::CommListInSilhouetteTarget' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommListInSiroItaAnimType) == 0x000024, "Member 'FCampParamTableCommuRow::CommListInSiroItaAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommListInSiroItaFrame) == 0x000028, "Member 'FCampParamTableCommuRow::CommListInSiroItaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommListInSiroItaWait) == 0x00002C, "Member 'FCampParamTableCommuRow::CommListInSiroItaWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommListOutSiroItaFrame) == 0x000030, "Member 'FCampParamTableCommuRow::CommListOutSiroItaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommListInListAnimType) == 0x000034, "Member 'FCampParamTableCommuRow::CommListInListAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommListInListFrame) == 0x000038, "Member 'FCampParamTableCommuRow::CommListInListFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommListInListWait) == 0x00003C, "Member 'FCampParamTableCommuRow::CommListInListWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommListOutListFrame) == 0x000040, "Member 'FCampParamTableCommuRow::CommListOutListFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlInDetailAnimType) == 0x000044, "Member 'FCampParamTableCommuRow::CommDetlInDetailAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlInDetailFrame) == 0x000048, "Member 'FCampParamTableCommuRow::CommDetlInDetailFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlInDetailWait) == 0x00004C, "Member 'FCampParamTableCommuRow::CommDetlInDetailWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlOutDetailFrame) == 0x000050, "Member 'FCampParamTableCommuRow::CommDetlOutDetailFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlInDescriAnimType) == 0x000054, "Member 'FCampParamTableCommuRow::CommDetlInDescriAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlInDescriFrame) == 0x000058, "Member 'FCampParamTableCommuRow::CommDetlInDescriFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlInDescriWait) == 0x00005C, "Member 'FCampParamTableCommuRow::CommDetlInDescriWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlInMemberAnimType) == 0x000060, "Member 'FCampParamTableCommuRow::CommDetlInMemberAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlInMemberFrame) == 0x000064, "Member 'FCampParamTableCommuRow::CommDetlInMemberFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlInMemberWait) == 0x000068, "Member 'FCampParamTableCommuRow::CommDetlInMemberWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlInBustupAnimType) == 0x00006C, "Member 'FCampParamTableCommuRow::CommDetlInBustupAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlInBustupFrame) == 0x000070, "Member 'FCampParamTableCommuRow::CommDetlInBustupFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlInBustupWait) == 0x000074, "Member 'FCampParamTableCommuRow::CommDetlInBustupWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommDetlBustupChangeFrame) == 0x000078, "Member 'FCampParamTableCommuRow::CommDetlBustupChangeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardAnimType) == 0x00007C, "Member 'FCampParamTableCommuRow::CommuCardAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardFrameMin) == 0x000080, "Member 'FCampParamTableCommuRow::CommuCardFrameMin' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardFrameMax) == 0x000084, "Member 'FCampParamTableCommuRow::CommuCardFrameMax' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardWaitMin) == 0x000088, "Member 'FCampParamTableCommuRow::CommuCardWaitMin' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardWaitMax) == 0x00008C, "Member 'FCampParamTableCommuRow::CommuCardWaitMax' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardScaleMin) == 0x000090, "Member 'FCampParamTableCommuRow::CommuCardScaleMin' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardScaleMax) == 0x000094, "Member 'FCampParamTableCommuRow::CommuCardScaleMax' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardXAccMin) == 0x000098, "Member 'FCampParamTableCommuRow::CommuCardXAccMin' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardXAccMax) == 0x00009C, "Member 'FCampParamTableCommuRow::CommuCardXAccMax' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardRotAxis1Min) == 0x0000A0, "Member 'FCampParamTableCommuRow::CommuCardRotAxis1Min' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardRotAxis1Max) == 0x0000A4, "Member 'FCampParamTableCommuRow::CommuCardRotAxis1Max' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardRotAxis2Min) == 0x0000A8, "Member 'FCampParamTableCommuRow::CommuCardRotAxis2Min' has a wrong offset!");
static_assert(offsetof(FCampParamTableCommuRow, CommuCardRotAxis2Max) == 0x0000AC, "Member 'FCampParamTableCommuRow::CommuCardRotAxis2Max' has a wrong offset!");

// ScriptStruct xrd777.CampParamTableRankUpRow
// 0x0310 (0x0318 - 0x0008)
struct FCampParamTableRankUpRow final : public FTableRowBase
{
public:
	struct FColor                                 HumanSankakuRed;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HumanSankakuGreen;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HumanBokasiRed;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HumanBokasiGreen;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HumanPointUpLightblue;                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HumanBrainBlue;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HumanCharmBlue;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HumanCourageBlue;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 CampHumanBrainBlue;                                // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 CampHumanCharmBlue;                                // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 CampHumanCourageBlue;                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ParameterNameYellow;                               // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 CircleYellow;                                      // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HelpTextYellow;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PointUpTextStartPos;                               // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PointUpTextEndPos;                                 // 0x0048(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RankUpTextStartPos;                                // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              RankUpTextEndPos;                                  // 0x0058(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInBgSankakuFrame;                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInSankakuFrame;                               // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInAllBGFrame;                                 // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInHamonFrame;                                 // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInRankRotFrame;                               // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInRankSlideFrame;                             // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInHelpSlideFrame;                             // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInTitleSlideFrame;                            // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInBgSankakuFrameWait;                         // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInSankakuFrameWaitWhite;                      // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInSankakuFrameWaitGreen;                      // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInSankakuFrameWaitRed;                        // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInAllBGFrameWait;                             // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInHamonFrameWait;                             // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInHamonFrameWaitSecond;                       // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInHamonFrameWaitThird;                        // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInRankRotFrameWait;                           // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInRankSlideFrameWait;                         // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInHelpSlideFrameWait;                         // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInTitleSlideFrameWait;                        // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanInBgSankakuType;                              // 0x00B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanInSankakuType;                                // 0x00B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanInAllBGType;                                  // 0x00B2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanInHamonType;                                  // 0x00B3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanInRankRotType;                                // 0x00B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanInRankSlideType;                              // 0x00B5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanInHelpSlideType;                              // 0x00B6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanInTitleSlideType;                             // 0x00B7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextSlideOneFrame;                     // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextSlideTwoFrame;                     // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextSlideThreeFrame;                   // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextFadeOneFrame;                      // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextFadeTwoFrame;                      // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextFadeThreeFrame;                    // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpHamonScaleFrame;                       // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpHamonFadeFrame;                        // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleFadeOneFrame;                // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleFadeTwoFrame;                // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleFadeThreeFrame;              // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleScaleOneFrame;               // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleScaleTwoFrame;               // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleScaleThreeFrame;             // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextSlideOneFrameWait;                 // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextSlideTwoFrameWait;                 // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextSlideThreeFrameWait;               // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextFadeOneFrameWait;                  // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextFadeTwoFrameWait;                  // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextFadeThreeFrameWait;                // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpHamonScaleFrameWait;                   // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpHamonFadeFrameWait;                    // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleFadeOneFrameWait;            // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleFadeTwoFrameWait;            // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleFadeThreeFrameWait;          // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleScaleOneFrameWait;           // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleScaleTwoFrameWait;           // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleScaleThreeFrameWait;         // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanPointUpTextSlideOneType;                      // 0x0128(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanPointUpTextSlideTwoType;                      // 0x0129(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanPointUpTextSlideThreeType;                    // 0x012A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanPointUpTextFadeOneType;                       // 0x012B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanPointUpTextFadeTwoType;                       // 0x012C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanPointUpTextFadeThreeType;                     // 0x012D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanPointUpHamonScaleType;                        // 0x012E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanPointUpHamonFadeType;                         // 0x012F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanPointUpBlueCircleFadeScaleOneType;            // 0x0130(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanPointUpBlueCircleFadeScaleTwoType;            // 0x0131(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanPointUpBlueCircleFadeScaleThreeType;          // 0x0132(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_133[0x1];                                      // 0x0133(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        HumanRankUpTextSlideOneFrame;                      // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextSlideTwoFrame;                      // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextSlideThreeFrame;                    // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextFadeOneFrame;                       // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextFadeTwoFrame;                       // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextFadeThreeFrame;                     // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpHamonScaleFrame;                        // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpHamonFadeFrame;                         // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleColorOneFrame;               // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleColorTwoFrame;               // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleColorThreeFrame;             // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleScaleOneFrame;               // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleScaleTwoFrame;               // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleScaleThreeFrame;             // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextSlideOneFrameWait;                  // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextSlideTwoFrameWait;                  // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextSlideThreeFrameWait;                // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextFadeOneFrameWait;                   // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextFadeTwoFrameWait;                   // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextFadeThreeFrameWait;                 // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpHamonScaleFrameWait;                    // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpHamonFadeFrameWait;                     // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleColorOneFrameWait;           // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleColorTwoFrameWait;           // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleColorThreeFrameWait;         // 0x0194(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleScaleOneFrameWait;           // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleScaleTwoFrameWait;           // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleScaleThreeFrameWait;         // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpTextSlideOneType;                       // 0x01A4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpTextSlideTwoType;                       // 0x01A5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpTextSlideThreeType;                     // 0x01A6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpTextFadeOneType;                        // 0x01A7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpTextFadeTwoType;                        // 0x01A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpTextFadeThreeType;                      // 0x01A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpHamonScaleType;                         // 0x01AA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpHamonFadeType;                          // 0x01AB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpWhiteCircleColorOneType;                // 0x01AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpWhiteCircleColorTwoType;                // 0x01AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpWhiteCircleColorThreeType;              // 0x01AE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpWhiteCircleScaleOneType;                // 0x01AF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpWhiteCircleScaleTwoType;                // 0x01B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpWhiteCircleScaleThreeType;              // 0x01B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B2[0x2];                                      // 0x01B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        HumanRankUpAllCircleScaleFrame;                    // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpCurrentNumberFadeFrame;                 // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpNextNumberFadeSlideFrame;               // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpCurrentHelpTextFadeFrame;               // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpNextHelpTextFadeSlideFrame;             // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpMaskCircleFrame;                        // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpAllCircleScaleFrameWait;                // 0x01CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpCurrentNumberFadeFrameWait;             // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpNextNumberFadeSlideFrameWait;           // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpCurrentHelpTextFadeFrameWait;           // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpNextHelpTextFadeSlideFrameWait;         // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpMaskCircleFrameWait;                    // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpAllCircleScaleType;                     // 0x01E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpCurrentNumberFadeType;                  // 0x01E5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpNextNumberFadeSlideType;                // 0x01E6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpCurrentHelpTextFadeType;                // 0x01E7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpNextHelpTextFadeSlideType;              // 0x01E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpMaskCircleType;                         // 0x01E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EA[0x2];                                      // 0x01EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        HumanRankUpNextNumberFadeFrame;                    // 0x01EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpNextHelpTextFadeFrame;                  // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpNextNumberFadeFrameWait;                // 0x01F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpNextHelpTextFadeFrameWait;              // 0x01F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpNextNumberFadeType;                     // 0x01FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanRankUpNextHelpTextFadeType;                   // 0x01FD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FE[0x2];                                      // 0x01FE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        KeyHelpFadeInFrame;                                // 0x0200(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanKeyHelpInFrameWait;                           // 0x0204(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpFadeOutFrame;                               // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanKeyHelpOutFrameWait;                          // 0x020C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpMaskSlideOneFrame;                          // 0x0210(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpMaskSlideTwoFrame;                          // 0x0214(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpMaskSlideThreeFrame;                        // 0x0218(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpMaskSlideOneWaitFrame;                      // 0x021C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpMaskSlideTwoWaitFrame;                      // 0x0220(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpMaskSlideThreeWaitFrame;                    // 0x0224(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  KeyHelpMaskSlideOneType;                           // 0x0228(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  KeyHelpMaskSlideTwoType;                           // 0x0229(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  KeyHelpMaskSlideThreeType;                         // 0x022A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  KeyHelpMaskSlideOneWaitType;                       // 0x022B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  KeyHelpMaskSlideTwoWaitType;                       // 0x022C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  KeyHelpMaskSlideThreeWaitType;                     // 0x022D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  KeyHelpOutScaleType;                               // 0x022E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F[0x1];                                      // 0x022F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        KeyHelpOutScaleFrame;                              // 0x0230(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KeyHelpFadeOutScaleSize;                           // 0x0234(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MaxHamonShiftWaitFlame;                            // 0x0238(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxHamonScaleInFlame;                         // 0x023C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxHamonScaleInFlameWait;                     // 0x0240(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxHamonFadeInAllFlameWait;                   // 0x0244(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxHamonFadeInFlame;                          // 0x0248(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxHamonFadeInFlameWait;                      // 0x024C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxHamonFadeOutFlame;                         // 0x0250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxHamonFadeOutFlameWait;                     // 0x0254(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxHamonFadeOutLastFlame;                     // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxHamonFadeOutLastFlameWait;                 // 0x025C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanMaxHamonScaleOutType;                         // 0x0260(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_261[0x3];                                      // 0x0261(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        MaxTriangleBlurFadeInFlame;                        // 0x0264(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MaxTriangleBlurFadeInFlameWait;                    // 0x0268(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MaxTriangleBlurFadeOutFlame;                       // 0x026C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxCircleFadeInFlame;                         // 0x0270(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxCircleFadeInFlameWait;                     // 0x0274(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxCircleFadeOutFlame;                        // 0x0278(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MaxCircleFinishFlameWait;                          // 0x027C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanMaxHamonScaleType;                            // 0x0280(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanMaxHamonFadeInType;                           // 0x0281(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanMaxHamonFadeOutType;                          // 0x0282(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  MaxTriangleBlurFadeInType;                         // 0x0283(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  MaxTriangleBlurFadeOutType;                        // 0x0284(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanMaxCircleFadeInType;                          // 0x0285(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanMaxCircleFadeTwoType;                         // 0x0286(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_287[0x1];                                      // 0x0287(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        HumanCircleFadeLoop_Wait_0;                        // 0x0288(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanCircleFadeLoop_Frame_0;                       // 0x028C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanCircleFadeLoop_Wait_1;                        // 0x0290(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanCircleFadeLoop_Frame_1;                       // 0x0294(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanCircleColorLoop_Wait_0;                       // 0x0298(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanCircleColorLoop_Frame_0;                      // 0x029C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanCircleColorLoop_Wait_1;                       // 0x02A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanCircleColorLoop_Frame_1;                      // 0x02A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanCircleScaleUpLoop_Wait;                       // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanCircleScaleUpLoop_Frame;                      // 0x02AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanCircleFadeLoopType;                           // 0x02B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanCircleScaleLoopType;                          // 0x02B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanCircleColorLoopType;                          // 0x02B2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B3[0x1];                                      // 0x02B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        HumanPlusHamonFlame;                               // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanCircleLoopStartWait;                          // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutHelpSlideFrame;                            // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutTitleSlideFrame;                           // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutHamonFrame;                                // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutSankakuFrame;                              // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutRankRotFrame;                              // 0x02CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutBgSankakuFrame;                            // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutAllBgFrame;                                // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutHelpSlideFrameWait;                        // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutTitleSlideFrameWait;                       // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutHamonFrameWait;                            // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutSankakuFrameWait;                          // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutRankRotFrameWait;                          // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutBgSankakuFrameWait;                        // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutAllBgFrameWait;                            // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanOutHelpSlideType;                             // 0x02F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanOutTitleSlideType;                            // 0x02F5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanOutHamonType;                                 // 0x02F6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanOutSankakuType;                               // 0x02F7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanOutRankRotType;                               // 0x02F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanOutBgSankakuType;                             // 0x02F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanOutAllBgType;                                 // 0x02FA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanKeyHelpOutType;                               // 0x02FB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanHamonLoopScaleDownFrame;                      // 0x02FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanHamonLoopScaleUpFrameWait;                    // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanHamonLoopScaleDownType;                       // 0x0304(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        HumanHamonLoopWaitFrame;                           // 0x0308(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanHamonLoopWaitType;                            // 0x030C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        HumanHamonLoopScaleUpFrame;                        // 0x0310(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  HumanHamonLoopScaleUpType;                         // 0x0314(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCampParamTableRankUpRow) == 0x000008, "Wrong alignment on FCampParamTableRankUpRow");
static_assert(sizeof(FCampParamTableRankUpRow) == 0x000318, "Wrong size on FCampParamTableRankUpRow");
static_assert(offsetof(FCampParamTableRankUpRow, HumanSankakuRed) == 0x000008, "Member 'FCampParamTableRankUpRow::HumanSankakuRed' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanSankakuGreen) == 0x00000C, "Member 'FCampParamTableRankUpRow::HumanSankakuGreen' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanBokasiRed) == 0x000010, "Member 'FCampParamTableRankUpRow::HumanBokasiRed' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanBokasiGreen) == 0x000014, "Member 'FCampParamTableRankUpRow::HumanBokasiGreen' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpLightblue) == 0x000018, "Member 'FCampParamTableRankUpRow::HumanPointUpLightblue' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanBrainBlue) == 0x00001C, "Member 'FCampParamTableRankUpRow::HumanBrainBlue' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCharmBlue) == 0x000020, "Member 'FCampParamTableRankUpRow::HumanCharmBlue' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCourageBlue) == 0x000024, "Member 'FCampParamTableRankUpRow::HumanCourageBlue' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, CampHumanBrainBlue) == 0x000028, "Member 'FCampParamTableRankUpRow::CampHumanBrainBlue' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, CampHumanCharmBlue) == 0x00002C, "Member 'FCampParamTableRankUpRow::CampHumanCharmBlue' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, CampHumanCourageBlue) == 0x000030, "Member 'FCampParamTableRankUpRow::CampHumanCourageBlue' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, ParameterNameYellow) == 0x000034, "Member 'FCampParamTableRankUpRow::ParameterNameYellow' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, CircleYellow) == 0x000038, "Member 'FCampParamTableRankUpRow::CircleYellow' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HelpTextYellow) == 0x00003C, "Member 'FCampParamTableRankUpRow::HelpTextYellow' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, PointUpTextStartPos) == 0x000040, "Member 'FCampParamTableRankUpRow::PointUpTextStartPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, PointUpTextEndPos) == 0x000048, "Member 'FCampParamTableRankUpRow::PointUpTextEndPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, RankUpTextStartPos) == 0x000050, "Member 'FCampParamTableRankUpRow::RankUpTextStartPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, RankUpTextEndPos) == 0x000058, "Member 'FCampParamTableRankUpRow::RankUpTextEndPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInBgSankakuFrame) == 0x000060, "Member 'FCampParamTableRankUpRow::HumanInBgSankakuFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInSankakuFrame) == 0x000064, "Member 'FCampParamTableRankUpRow::HumanInSankakuFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInAllBGFrame) == 0x000068, "Member 'FCampParamTableRankUpRow::HumanInAllBGFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInHamonFrame) == 0x00006C, "Member 'FCampParamTableRankUpRow::HumanInHamonFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInRankRotFrame) == 0x000070, "Member 'FCampParamTableRankUpRow::HumanInRankRotFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInRankSlideFrame) == 0x000074, "Member 'FCampParamTableRankUpRow::HumanInRankSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInHelpSlideFrame) == 0x000078, "Member 'FCampParamTableRankUpRow::HumanInHelpSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInTitleSlideFrame) == 0x00007C, "Member 'FCampParamTableRankUpRow::HumanInTitleSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInBgSankakuFrameWait) == 0x000080, "Member 'FCampParamTableRankUpRow::HumanInBgSankakuFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInSankakuFrameWaitWhite) == 0x000084, "Member 'FCampParamTableRankUpRow::HumanInSankakuFrameWaitWhite' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInSankakuFrameWaitGreen) == 0x000088, "Member 'FCampParamTableRankUpRow::HumanInSankakuFrameWaitGreen' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInSankakuFrameWaitRed) == 0x00008C, "Member 'FCampParamTableRankUpRow::HumanInSankakuFrameWaitRed' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInAllBGFrameWait) == 0x000090, "Member 'FCampParamTableRankUpRow::HumanInAllBGFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInHamonFrameWait) == 0x000094, "Member 'FCampParamTableRankUpRow::HumanInHamonFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInHamonFrameWaitSecond) == 0x000098, "Member 'FCampParamTableRankUpRow::HumanInHamonFrameWaitSecond' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInHamonFrameWaitThird) == 0x00009C, "Member 'FCampParamTableRankUpRow::HumanInHamonFrameWaitThird' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInRankRotFrameWait) == 0x0000A0, "Member 'FCampParamTableRankUpRow::HumanInRankRotFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInRankSlideFrameWait) == 0x0000A4, "Member 'FCampParamTableRankUpRow::HumanInRankSlideFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInHelpSlideFrameWait) == 0x0000A8, "Member 'FCampParamTableRankUpRow::HumanInHelpSlideFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInTitleSlideFrameWait) == 0x0000AC, "Member 'FCampParamTableRankUpRow::HumanInTitleSlideFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInBgSankakuType) == 0x0000B0, "Member 'FCampParamTableRankUpRow::HumanInBgSankakuType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInSankakuType) == 0x0000B1, "Member 'FCampParamTableRankUpRow::HumanInSankakuType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInAllBGType) == 0x0000B2, "Member 'FCampParamTableRankUpRow::HumanInAllBGType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInHamonType) == 0x0000B3, "Member 'FCampParamTableRankUpRow::HumanInHamonType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInRankRotType) == 0x0000B4, "Member 'FCampParamTableRankUpRow::HumanInRankRotType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInRankSlideType) == 0x0000B5, "Member 'FCampParamTableRankUpRow::HumanInRankSlideType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInHelpSlideType) == 0x0000B6, "Member 'FCampParamTableRankUpRow::HumanInHelpSlideType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanInTitleSlideType) == 0x0000B7, "Member 'FCampParamTableRankUpRow::HumanInTitleSlideType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextSlideOneFrame) == 0x0000B8, "Member 'FCampParamTableRankUpRow::HumanPointUpTextSlideOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextSlideTwoFrame) == 0x0000BC, "Member 'FCampParamTableRankUpRow::HumanPointUpTextSlideTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextSlideThreeFrame) == 0x0000C0, "Member 'FCampParamTableRankUpRow::HumanPointUpTextSlideThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextFadeOneFrame) == 0x0000C4, "Member 'FCampParamTableRankUpRow::HumanPointUpTextFadeOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextFadeTwoFrame) == 0x0000C8, "Member 'FCampParamTableRankUpRow::HumanPointUpTextFadeTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextFadeThreeFrame) == 0x0000CC, "Member 'FCampParamTableRankUpRow::HumanPointUpTextFadeThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpHamonScaleFrame) == 0x0000D0, "Member 'FCampParamTableRankUpRow::HumanPointUpHamonScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpHamonFadeFrame) == 0x0000D4, "Member 'FCampParamTableRankUpRow::HumanPointUpHamonFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleFadeOneFrame) == 0x0000D8, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleFadeOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleFadeTwoFrame) == 0x0000DC, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleFadeTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleFadeThreeFrame) == 0x0000E0, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleFadeThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleScaleOneFrame) == 0x0000E4, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleScaleOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleScaleTwoFrame) == 0x0000E8, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleScaleTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleScaleThreeFrame) == 0x0000EC, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleScaleThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextSlideOneFrameWait) == 0x0000F0, "Member 'FCampParamTableRankUpRow::HumanPointUpTextSlideOneFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextSlideTwoFrameWait) == 0x0000F4, "Member 'FCampParamTableRankUpRow::HumanPointUpTextSlideTwoFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextSlideThreeFrameWait) == 0x0000F8, "Member 'FCampParamTableRankUpRow::HumanPointUpTextSlideThreeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextFadeOneFrameWait) == 0x0000FC, "Member 'FCampParamTableRankUpRow::HumanPointUpTextFadeOneFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextFadeTwoFrameWait) == 0x000100, "Member 'FCampParamTableRankUpRow::HumanPointUpTextFadeTwoFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextFadeThreeFrameWait) == 0x000104, "Member 'FCampParamTableRankUpRow::HumanPointUpTextFadeThreeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpHamonScaleFrameWait) == 0x000108, "Member 'FCampParamTableRankUpRow::HumanPointUpHamonScaleFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpHamonFadeFrameWait) == 0x00010C, "Member 'FCampParamTableRankUpRow::HumanPointUpHamonFadeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleFadeOneFrameWait) == 0x000110, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleFadeOneFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleFadeTwoFrameWait) == 0x000114, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleFadeTwoFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleFadeThreeFrameWait) == 0x000118, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleFadeThreeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleScaleOneFrameWait) == 0x00011C, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleScaleOneFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleScaleTwoFrameWait) == 0x000120, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleScaleTwoFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleScaleThreeFrameWait) == 0x000124, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleScaleThreeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextSlideOneType) == 0x000128, "Member 'FCampParamTableRankUpRow::HumanPointUpTextSlideOneType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextSlideTwoType) == 0x000129, "Member 'FCampParamTableRankUpRow::HumanPointUpTextSlideTwoType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextSlideThreeType) == 0x00012A, "Member 'FCampParamTableRankUpRow::HumanPointUpTextSlideThreeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextFadeOneType) == 0x00012B, "Member 'FCampParamTableRankUpRow::HumanPointUpTextFadeOneType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextFadeTwoType) == 0x00012C, "Member 'FCampParamTableRankUpRow::HumanPointUpTextFadeTwoType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpTextFadeThreeType) == 0x00012D, "Member 'FCampParamTableRankUpRow::HumanPointUpTextFadeThreeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpHamonScaleType) == 0x00012E, "Member 'FCampParamTableRankUpRow::HumanPointUpHamonScaleType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpHamonFadeType) == 0x00012F, "Member 'FCampParamTableRankUpRow::HumanPointUpHamonFadeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleFadeScaleOneType) == 0x000130, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleFadeScaleOneType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleFadeScaleTwoType) == 0x000131, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleFadeScaleTwoType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPointUpBlueCircleFadeScaleThreeType) == 0x000132, "Member 'FCampParamTableRankUpRow::HumanPointUpBlueCircleFadeScaleThreeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextSlideOneFrame) == 0x000134, "Member 'FCampParamTableRankUpRow::HumanRankUpTextSlideOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextSlideTwoFrame) == 0x000138, "Member 'FCampParamTableRankUpRow::HumanRankUpTextSlideTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextSlideThreeFrame) == 0x00013C, "Member 'FCampParamTableRankUpRow::HumanRankUpTextSlideThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextFadeOneFrame) == 0x000140, "Member 'FCampParamTableRankUpRow::HumanRankUpTextFadeOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextFadeTwoFrame) == 0x000144, "Member 'FCampParamTableRankUpRow::HumanRankUpTextFadeTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextFadeThreeFrame) == 0x000148, "Member 'FCampParamTableRankUpRow::HumanRankUpTextFadeThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpHamonScaleFrame) == 0x00014C, "Member 'FCampParamTableRankUpRow::HumanRankUpHamonScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpHamonFadeFrame) == 0x000150, "Member 'FCampParamTableRankUpRow::HumanRankUpHamonFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleColorOneFrame) == 0x000154, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleColorOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleColorTwoFrame) == 0x000158, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleColorTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleColorThreeFrame) == 0x00015C, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleColorThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleScaleOneFrame) == 0x000160, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleScaleOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleScaleTwoFrame) == 0x000164, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleScaleTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleScaleThreeFrame) == 0x000168, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleScaleThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextSlideOneFrameWait) == 0x00016C, "Member 'FCampParamTableRankUpRow::HumanRankUpTextSlideOneFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextSlideTwoFrameWait) == 0x000170, "Member 'FCampParamTableRankUpRow::HumanRankUpTextSlideTwoFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextSlideThreeFrameWait) == 0x000174, "Member 'FCampParamTableRankUpRow::HumanRankUpTextSlideThreeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextFadeOneFrameWait) == 0x000178, "Member 'FCampParamTableRankUpRow::HumanRankUpTextFadeOneFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextFadeTwoFrameWait) == 0x00017C, "Member 'FCampParamTableRankUpRow::HumanRankUpTextFadeTwoFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextFadeThreeFrameWait) == 0x000180, "Member 'FCampParamTableRankUpRow::HumanRankUpTextFadeThreeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpHamonScaleFrameWait) == 0x000184, "Member 'FCampParamTableRankUpRow::HumanRankUpHamonScaleFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpHamonFadeFrameWait) == 0x000188, "Member 'FCampParamTableRankUpRow::HumanRankUpHamonFadeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleColorOneFrameWait) == 0x00018C, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleColorOneFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleColorTwoFrameWait) == 0x000190, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleColorTwoFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleColorThreeFrameWait) == 0x000194, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleColorThreeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleScaleOneFrameWait) == 0x000198, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleScaleOneFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleScaleTwoFrameWait) == 0x00019C, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleScaleTwoFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleScaleThreeFrameWait) == 0x0001A0, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleScaleThreeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextSlideOneType) == 0x0001A4, "Member 'FCampParamTableRankUpRow::HumanRankUpTextSlideOneType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextSlideTwoType) == 0x0001A5, "Member 'FCampParamTableRankUpRow::HumanRankUpTextSlideTwoType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextSlideThreeType) == 0x0001A6, "Member 'FCampParamTableRankUpRow::HumanRankUpTextSlideThreeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextFadeOneType) == 0x0001A7, "Member 'FCampParamTableRankUpRow::HumanRankUpTextFadeOneType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextFadeTwoType) == 0x0001A8, "Member 'FCampParamTableRankUpRow::HumanRankUpTextFadeTwoType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpTextFadeThreeType) == 0x0001A9, "Member 'FCampParamTableRankUpRow::HumanRankUpTextFadeThreeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpHamonScaleType) == 0x0001AA, "Member 'FCampParamTableRankUpRow::HumanRankUpHamonScaleType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpHamonFadeType) == 0x0001AB, "Member 'FCampParamTableRankUpRow::HumanRankUpHamonFadeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleColorOneType) == 0x0001AC, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleColorOneType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleColorTwoType) == 0x0001AD, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleColorTwoType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleColorThreeType) == 0x0001AE, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleColorThreeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleScaleOneType) == 0x0001AF, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleScaleOneType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleScaleTwoType) == 0x0001B0, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleScaleTwoType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpWhiteCircleScaleThreeType) == 0x0001B1, "Member 'FCampParamTableRankUpRow::HumanRankUpWhiteCircleScaleThreeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpAllCircleScaleFrame) == 0x0001B4, "Member 'FCampParamTableRankUpRow::HumanRankUpAllCircleScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpCurrentNumberFadeFrame) == 0x0001B8, "Member 'FCampParamTableRankUpRow::HumanRankUpCurrentNumberFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpNextNumberFadeSlideFrame) == 0x0001BC, "Member 'FCampParamTableRankUpRow::HumanRankUpNextNumberFadeSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpCurrentHelpTextFadeFrame) == 0x0001C0, "Member 'FCampParamTableRankUpRow::HumanRankUpCurrentHelpTextFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpNextHelpTextFadeSlideFrame) == 0x0001C4, "Member 'FCampParamTableRankUpRow::HumanRankUpNextHelpTextFadeSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpMaskCircleFrame) == 0x0001C8, "Member 'FCampParamTableRankUpRow::HumanRankUpMaskCircleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpAllCircleScaleFrameWait) == 0x0001CC, "Member 'FCampParamTableRankUpRow::HumanRankUpAllCircleScaleFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpCurrentNumberFadeFrameWait) == 0x0001D0, "Member 'FCampParamTableRankUpRow::HumanRankUpCurrentNumberFadeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpNextNumberFadeSlideFrameWait) == 0x0001D4, "Member 'FCampParamTableRankUpRow::HumanRankUpNextNumberFadeSlideFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpCurrentHelpTextFadeFrameWait) == 0x0001D8, "Member 'FCampParamTableRankUpRow::HumanRankUpCurrentHelpTextFadeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpNextHelpTextFadeSlideFrameWait) == 0x0001DC, "Member 'FCampParamTableRankUpRow::HumanRankUpNextHelpTextFadeSlideFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpMaskCircleFrameWait) == 0x0001E0, "Member 'FCampParamTableRankUpRow::HumanRankUpMaskCircleFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpAllCircleScaleType) == 0x0001E4, "Member 'FCampParamTableRankUpRow::HumanRankUpAllCircleScaleType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpCurrentNumberFadeType) == 0x0001E5, "Member 'FCampParamTableRankUpRow::HumanRankUpCurrentNumberFadeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpNextNumberFadeSlideType) == 0x0001E6, "Member 'FCampParamTableRankUpRow::HumanRankUpNextNumberFadeSlideType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpCurrentHelpTextFadeType) == 0x0001E7, "Member 'FCampParamTableRankUpRow::HumanRankUpCurrentHelpTextFadeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpNextHelpTextFadeSlideType) == 0x0001E8, "Member 'FCampParamTableRankUpRow::HumanRankUpNextHelpTextFadeSlideType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpMaskCircleType) == 0x0001E9, "Member 'FCampParamTableRankUpRow::HumanRankUpMaskCircleType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpNextNumberFadeFrame) == 0x0001EC, "Member 'FCampParamTableRankUpRow::HumanRankUpNextNumberFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpNextHelpTextFadeFrame) == 0x0001F0, "Member 'FCampParamTableRankUpRow::HumanRankUpNextHelpTextFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpNextNumberFadeFrameWait) == 0x0001F4, "Member 'FCampParamTableRankUpRow::HumanRankUpNextNumberFadeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpNextHelpTextFadeFrameWait) == 0x0001F8, "Member 'FCampParamTableRankUpRow::HumanRankUpNextHelpTextFadeFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpNextNumberFadeType) == 0x0001FC, "Member 'FCampParamTableRankUpRow::HumanRankUpNextNumberFadeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanRankUpNextHelpTextFadeType) == 0x0001FD, "Member 'FCampParamTableRankUpRow::HumanRankUpNextHelpTextFadeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpFadeInFrame) == 0x000200, "Member 'FCampParamTableRankUpRow::KeyHelpFadeInFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanKeyHelpInFrameWait) == 0x000204, "Member 'FCampParamTableRankUpRow::HumanKeyHelpInFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpFadeOutFrame) == 0x000208, "Member 'FCampParamTableRankUpRow::KeyHelpFadeOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanKeyHelpOutFrameWait) == 0x00020C, "Member 'FCampParamTableRankUpRow::HumanKeyHelpOutFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpMaskSlideOneFrame) == 0x000210, "Member 'FCampParamTableRankUpRow::KeyHelpMaskSlideOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpMaskSlideTwoFrame) == 0x000214, "Member 'FCampParamTableRankUpRow::KeyHelpMaskSlideTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpMaskSlideThreeFrame) == 0x000218, "Member 'FCampParamTableRankUpRow::KeyHelpMaskSlideThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpMaskSlideOneWaitFrame) == 0x00021C, "Member 'FCampParamTableRankUpRow::KeyHelpMaskSlideOneWaitFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpMaskSlideTwoWaitFrame) == 0x000220, "Member 'FCampParamTableRankUpRow::KeyHelpMaskSlideTwoWaitFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpMaskSlideThreeWaitFrame) == 0x000224, "Member 'FCampParamTableRankUpRow::KeyHelpMaskSlideThreeWaitFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpMaskSlideOneType) == 0x000228, "Member 'FCampParamTableRankUpRow::KeyHelpMaskSlideOneType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpMaskSlideTwoType) == 0x000229, "Member 'FCampParamTableRankUpRow::KeyHelpMaskSlideTwoType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpMaskSlideThreeType) == 0x00022A, "Member 'FCampParamTableRankUpRow::KeyHelpMaskSlideThreeType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpMaskSlideOneWaitType) == 0x00022B, "Member 'FCampParamTableRankUpRow::KeyHelpMaskSlideOneWaitType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpMaskSlideTwoWaitType) == 0x00022C, "Member 'FCampParamTableRankUpRow::KeyHelpMaskSlideTwoWaitType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpMaskSlideThreeWaitType) == 0x00022D, "Member 'FCampParamTableRankUpRow::KeyHelpMaskSlideThreeWaitType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpOutScaleType) == 0x00022E, "Member 'FCampParamTableRankUpRow::KeyHelpOutScaleType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpOutScaleFrame) == 0x000230, "Member 'FCampParamTableRankUpRow::KeyHelpOutScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, KeyHelpFadeOutScaleSize) == 0x000234, "Member 'FCampParamTableRankUpRow::KeyHelpFadeOutScaleSize' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, MaxHamonShiftWaitFlame) == 0x000238, "Member 'FCampParamTableRankUpRow::MaxHamonShiftWaitFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonScaleInFlame) == 0x00023C, "Member 'FCampParamTableRankUpRow::HumanMaxHamonScaleInFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonScaleInFlameWait) == 0x000240, "Member 'FCampParamTableRankUpRow::HumanMaxHamonScaleInFlameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonFadeInAllFlameWait) == 0x000244, "Member 'FCampParamTableRankUpRow::HumanMaxHamonFadeInAllFlameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonFadeInFlame) == 0x000248, "Member 'FCampParamTableRankUpRow::HumanMaxHamonFadeInFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonFadeInFlameWait) == 0x00024C, "Member 'FCampParamTableRankUpRow::HumanMaxHamonFadeInFlameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonFadeOutFlame) == 0x000250, "Member 'FCampParamTableRankUpRow::HumanMaxHamonFadeOutFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonFadeOutFlameWait) == 0x000254, "Member 'FCampParamTableRankUpRow::HumanMaxHamonFadeOutFlameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonFadeOutLastFlame) == 0x000258, "Member 'FCampParamTableRankUpRow::HumanMaxHamonFadeOutLastFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonFadeOutLastFlameWait) == 0x00025C, "Member 'FCampParamTableRankUpRow::HumanMaxHamonFadeOutLastFlameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonScaleOutType) == 0x000260, "Member 'FCampParamTableRankUpRow::HumanMaxHamonScaleOutType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, MaxTriangleBlurFadeInFlame) == 0x000264, "Member 'FCampParamTableRankUpRow::MaxTriangleBlurFadeInFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, MaxTriangleBlurFadeInFlameWait) == 0x000268, "Member 'FCampParamTableRankUpRow::MaxTriangleBlurFadeInFlameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, MaxTriangleBlurFadeOutFlame) == 0x00026C, "Member 'FCampParamTableRankUpRow::MaxTriangleBlurFadeOutFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxCircleFadeInFlame) == 0x000270, "Member 'FCampParamTableRankUpRow::HumanMaxCircleFadeInFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxCircleFadeInFlameWait) == 0x000274, "Member 'FCampParamTableRankUpRow::HumanMaxCircleFadeInFlameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxCircleFadeOutFlame) == 0x000278, "Member 'FCampParamTableRankUpRow::HumanMaxCircleFadeOutFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, MaxCircleFinishFlameWait) == 0x00027C, "Member 'FCampParamTableRankUpRow::MaxCircleFinishFlameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonScaleType) == 0x000280, "Member 'FCampParamTableRankUpRow::HumanMaxHamonScaleType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonFadeInType) == 0x000281, "Member 'FCampParamTableRankUpRow::HumanMaxHamonFadeInType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxHamonFadeOutType) == 0x000282, "Member 'FCampParamTableRankUpRow::HumanMaxHamonFadeOutType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, MaxTriangleBlurFadeInType) == 0x000283, "Member 'FCampParamTableRankUpRow::MaxTriangleBlurFadeInType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, MaxTriangleBlurFadeOutType) == 0x000284, "Member 'FCampParamTableRankUpRow::MaxTriangleBlurFadeOutType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxCircleFadeInType) == 0x000285, "Member 'FCampParamTableRankUpRow::HumanMaxCircleFadeInType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanMaxCircleFadeTwoType) == 0x000286, "Member 'FCampParamTableRankUpRow::HumanMaxCircleFadeTwoType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleFadeLoop_Wait_0) == 0x000288, "Member 'FCampParamTableRankUpRow::HumanCircleFadeLoop_Wait_0' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleFadeLoop_Frame_0) == 0x00028C, "Member 'FCampParamTableRankUpRow::HumanCircleFadeLoop_Frame_0' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleFadeLoop_Wait_1) == 0x000290, "Member 'FCampParamTableRankUpRow::HumanCircleFadeLoop_Wait_1' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleFadeLoop_Frame_1) == 0x000294, "Member 'FCampParamTableRankUpRow::HumanCircleFadeLoop_Frame_1' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleColorLoop_Wait_0) == 0x000298, "Member 'FCampParamTableRankUpRow::HumanCircleColorLoop_Wait_0' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleColorLoop_Frame_0) == 0x00029C, "Member 'FCampParamTableRankUpRow::HumanCircleColorLoop_Frame_0' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleColorLoop_Wait_1) == 0x0002A0, "Member 'FCampParamTableRankUpRow::HumanCircleColorLoop_Wait_1' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleColorLoop_Frame_1) == 0x0002A4, "Member 'FCampParamTableRankUpRow::HumanCircleColorLoop_Frame_1' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleScaleUpLoop_Wait) == 0x0002A8, "Member 'FCampParamTableRankUpRow::HumanCircleScaleUpLoop_Wait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleScaleUpLoop_Frame) == 0x0002AC, "Member 'FCampParamTableRankUpRow::HumanCircleScaleUpLoop_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleFadeLoopType) == 0x0002B0, "Member 'FCampParamTableRankUpRow::HumanCircleFadeLoopType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleScaleLoopType) == 0x0002B1, "Member 'FCampParamTableRankUpRow::HumanCircleScaleLoopType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleColorLoopType) == 0x0002B2, "Member 'FCampParamTableRankUpRow::HumanCircleColorLoopType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanPlusHamonFlame) == 0x0002B4, "Member 'FCampParamTableRankUpRow::HumanPlusHamonFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanCircleLoopStartWait) == 0x0002B8, "Member 'FCampParamTableRankUpRow::HumanCircleLoopStartWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutHelpSlideFrame) == 0x0002BC, "Member 'FCampParamTableRankUpRow::HumanOutHelpSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutTitleSlideFrame) == 0x0002C0, "Member 'FCampParamTableRankUpRow::HumanOutTitleSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutHamonFrame) == 0x0002C4, "Member 'FCampParamTableRankUpRow::HumanOutHamonFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutSankakuFrame) == 0x0002C8, "Member 'FCampParamTableRankUpRow::HumanOutSankakuFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutRankRotFrame) == 0x0002CC, "Member 'FCampParamTableRankUpRow::HumanOutRankRotFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutBgSankakuFrame) == 0x0002D0, "Member 'FCampParamTableRankUpRow::HumanOutBgSankakuFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutAllBgFrame) == 0x0002D4, "Member 'FCampParamTableRankUpRow::HumanOutAllBgFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutHelpSlideFrameWait) == 0x0002D8, "Member 'FCampParamTableRankUpRow::HumanOutHelpSlideFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutTitleSlideFrameWait) == 0x0002DC, "Member 'FCampParamTableRankUpRow::HumanOutTitleSlideFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutHamonFrameWait) == 0x0002E0, "Member 'FCampParamTableRankUpRow::HumanOutHamonFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutSankakuFrameWait) == 0x0002E4, "Member 'FCampParamTableRankUpRow::HumanOutSankakuFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutRankRotFrameWait) == 0x0002E8, "Member 'FCampParamTableRankUpRow::HumanOutRankRotFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutBgSankakuFrameWait) == 0x0002EC, "Member 'FCampParamTableRankUpRow::HumanOutBgSankakuFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutAllBgFrameWait) == 0x0002F0, "Member 'FCampParamTableRankUpRow::HumanOutAllBgFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutHelpSlideType) == 0x0002F4, "Member 'FCampParamTableRankUpRow::HumanOutHelpSlideType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutTitleSlideType) == 0x0002F5, "Member 'FCampParamTableRankUpRow::HumanOutTitleSlideType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutHamonType) == 0x0002F6, "Member 'FCampParamTableRankUpRow::HumanOutHamonType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutSankakuType) == 0x0002F7, "Member 'FCampParamTableRankUpRow::HumanOutSankakuType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutRankRotType) == 0x0002F8, "Member 'FCampParamTableRankUpRow::HumanOutRankRotType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutBgSankakuType) == 0x0002F9, "Member 'FCampParamTableRankUpRow::HumanOutBgSankakuType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanOutAllBgType) == 0x0002FA, "Member 'FCampParamTableRankUpRow::HumanOutAllBgType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanKeyHelpOutType) == 0x0002FB, "Member 'FCampParamTableRankUpRow::HumanKeyHelpOutType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanHamonLoopScaleDownFrame) == 0x0002FC, "Member 'FCampParamTableRankUpRow::HumanHamonLoopScaleDownFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanHamonLoopScaleUpFrameWait) == 0x000300, "Member 'FCampParamTableRankUpRow::HumanHamonLoopScaleUpFrameWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanHamonLoopScaleDownType) == 0x000304, "Member 'FCampParamTableRankUpRow::HumanHamonLoopScaleDownType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanHamonLoopWaitFrame) == 0x000308, "Member 'FCampParamTableRankUpRow::HumanHamonLoopWaitFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanHamonLoopWaitType) == 0x00030C, "Member 'FCampParamTableRankUpRow::HumanHamonLoopWaitType' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanHamonLoopScaleUpFrame) == 0x000310, "Member 'FCampParamTableRankUpRow::HumanHamonLoopScaleUpFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableRankUpRow, HumanHamonLoopScaleUpType) == 0x000314, "Member 'FCampParamTableRankUpRow::HumanHamonLoopScaleUpType' has a wrong offset!");

// ScriptStruct xrd777.CampParamTableStatusRow
// 0x0318 (0x0320 - 0x0008)
struct FCampParamTableStatusRow final : public FTableRowBase
{
public:
	uint32                                        ListTabChangeFrame;                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatListPartyRightSideFadeOutFrame;                // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatListPartyRightSideFadeInFrame;                 // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatListKoshoLogoRotFrame;                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatListGlassCharaFrame;                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatListGlassCharaWait;                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatListBgNoiseRandFrameMin;                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatListBgNoiseRandFrameMax;                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StatListInDist;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatListInSilhouetteAnimType;                      // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatListInSilhouetteFrame;                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatListInSilhouetteWait;                          // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StatListInSilhouetteOriginal;                      // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StatListInSilhouetteTarget;                        // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatListInKoshoAnimType;                           // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatListInKoshoFrame;                              // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatListInKoshoWait;                               // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatListInTabAnimType;                             // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatListInTabFrame;                                // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatListInTabWait;                                 // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatListBgNoiseAnimType;                           // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatListBgNoiseFrame;                              // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatListBgTextAnimType;                            // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatListBgTextFrame;                               // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatListOpeListAnimType;                           // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatListOpeListFrame;                              // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StatDetailRotation;                                // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatDetailInfoSlideAnimType;                       // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatDetailInfoSlideFrame;                          // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatDetailBgNumSlideAnimType;                      // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatDetailBgNumSlideOutFrame;                      // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatDetailBgNumSlideInFrame;                       // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatDetailHanshaSlideAnimType;                     // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatDetailHanshaSlideFrame;                        // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatDetailHahenShadowSlideAnimType;                // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatDetailHahenShadowSlideFrame;                   // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatDetailCharaShadowSlideAnimType;                // 0x00A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatDetailCharaShadowSlideFrame;                   // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatDetailLeaderRotAnimType;                       // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatDetailLeaderRotOutFrame;                       // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatDetailLeaderRotInFrame;                        // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatDetailInOutlineAnimType;                       // 0x00B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatDetailInOutlineFrame;                          // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatDetailInOutlineWait;                           // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatDetailInOutlineOutFrame;                       // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatDetailPanelSlideAnimType;                      // 0x00C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatDetailPanelSlideFrame;                         // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatDetailToTheurLeaderRotFrame;                   // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  StatDetailToTheurDetailInfoSlideAnimType;          // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        StatDetailToTheurDetailInfoSlideFrame;             // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        StatDetailToTheurBgNumSlideFrame;                  // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanHamonAlphaFrameDown;                          // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanHamonAlphaFrameUp;                            // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanHamonAlphaFrameStay;                          // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanHamonAlphaInterval;                           // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HumanSankakuRed;                                   // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HumanSankakuGreen;                                 // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HumanBokasiRed;                                    // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 HumanBokasiGreen;                                  // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInBgSankakuFrame;                             // 0x00FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInSankakuFrame;                               // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInHamonFrame;                                 // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInRankRotFrame;                               // 0x0108(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInRankSlideFrame;                             // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInHelpSlideFrame;                             // 0x0110(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanInTitleSlideFrame;                            // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextSlideOneFrame;                     // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextSlideTwoFrame;                     // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextSlideThreeFrame;                   // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextFadeOneFrame;                      // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextFadeTwoFrame;                      // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpTextFadeThreeFrame;                    // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpHamonScaleFrame;                       // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpHamonFadeFrame;                        // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleFadeScaleOneFrame;           // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleFadeScaleTwoFrame;           // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPointUpBlueCircleFadeScaleThreeFrame;         // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextSlideOneFrame;                      // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextSlideTwoFrame;                      // 0x0148(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextSlideThreeFrame;                    // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextFadeOneFrame;                       // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextFadeTwoFrame;                       // 0x0154(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpTextFadeThreeFrame;                     // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpHamonScaleFrame;                        // 0x015C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpHamonFadeFrame;                         // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleColorOneFrame;               // 0x0164(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleColorTwoFrame;               // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleColorThreeFrame;             // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleScaleOneFrame;               // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleScaleTwoFrame;               // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpWhiteCircleScaleThreeFrame;             // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpAllCircleScaleFrame;                    // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpCurrentNumberFadeFrame;                 // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpNextNumberFadeSlideFrame;               // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpCurrentHelpTextFadeFrame;               // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpNextHelpTextFadeSlideFrame;             // 0x018C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanRankUpMaskCircleFrame;                        // 0x0190(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpFadeFrame;                                  // 0x0194(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpMaskSlideOneFrame;                          // 0x0198(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpMaskSlideTwoFrame;                          // 0x019C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpMaskSlideThreeFrame;                        // 0x01A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpMaskSlideOneWaitFrame;                      // 0x01A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpMaskSlideTwoWaitFrame;                      // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyHelpMaskSlideThreeWaitFrame;                    // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxHamonScaleFlame;                           // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxHamonFadeOneFlame;                         // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxHamonFadeTwoFlame;                         // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxCircleFadeOneFlame;                        // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanMaxCircleFadeTwoFlame;                        // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanCircleLoopFlame;                              // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanPlusHamonFlame;                               // 0x01C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutHelpSlideFrame;                            // 0x01CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutHamonFrame;                                // 0x01D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutSankakuFrame;                              // 0x01D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutRankRotFrame;                              // 0x01D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanOutBgSankakuFrame;                            // 0x01DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanHamonLoopScaleDownFrame;                      // 0x01E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanHamonLoopWaitFrame;                           // 0x01E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HumanHamonLoopScaleUpFrame;                        // 0x01E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  FldTheurPanelSlideAnimType;                        // 0x01EC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        FldTheurPanelSlideFrame;                           // 0x01F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        FldTheurPanelSlideWait;                            // 0x01F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        FldTheurBgNumSlideFrame;                           // 0x01F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        FldTheurBgNumSlideWait;                            // 0x01FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  FldTheurBustupSlideAnimType;                       // 0x0200(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        FldTheurBustupSlideInFrame;                        // 0x0204(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        FldTheurBustupSlideInWait;                         // 0x0208(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        FldTheurBustupSlideOutFrame;                       // 0x020C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 TheurCharaMaskColor;                               // 0x0210(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurCharaPosHero;                                 // 0x0214(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurShadowPosHero;                                // 0x021C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurCharaPosYukari;                               // 0x0224(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurShadowPosYukari;                              // 0x022C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurCharaPosJunpei;                               // 0x0234(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurShadowPosJunpei;                              // 0x023C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurCharaPosSanada;                               // 0x0244(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurShadowPosSanada;                              // 0x024C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurCharaPosMituru;                               // 0x0254(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurShadowPosMituru;                              // 0x025C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurCharaPosFuka;                                 // 0x0264(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurShadowPosFuka;                                // 0x026C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurCharaPosAegis;                                // 0x0274(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurShadowPosAegis;                               // 0x027C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurCharaPosAmada;                                // 0x0284(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurShadowPosAmada;                               // 0x028C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurCharaPosKoromaru;                             // 0x0294(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurShadowPosKoromaru;                            // 0x029C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurCharaPosAragaki;                              // 0x02A4(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              TheurShadowPosAragaki;                             // 0x02AC(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  Edit_MaskA_InAnimation_SlideIn_Type;               // 0x02B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Edit_MaskA_InAnimation_SlideIn_Frame;              // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Edit_MaskA_InAnimation_SlideIn_Delay;              // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  Edit_MaskA_OutAnimation_SlideIn_Type;              // 0x02C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Edit_MaskA_OutAnimation_SlideIn_Frame;             // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Edit_MaskA_OutAnimation_SlideIn_Delay;             // 0x02C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  Edit_MaskA_Change_SlideIn_Type;                    // 0x02CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2CD[0x3];                                      // 0x02CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Edit_MaskA_Change_SlideIn_Frame;                   // 0x02D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Edit_MaskA_Change_SlideIn_Delay;                   // 0x02D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  Edit_MaskB_InAnimation_SlideIn_Type;               // 0x02D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Edit_MaskB_InAnimation_SlideIn_Frame;              // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Edit_MaskB_InAnimation_SlideIn_Delay;              // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  Edit_MaskB_OutAnimation_SlideIn_Type;              // 0x02E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Edit_MaskB_OutAnimation_SlideIn_Frame;             // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Edit_MaskB_OutAnimation_SlideIn_Delay;             // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  Edit_MaskB_Change_SlideIn_Type;                    // 0x02F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Edit_MaskB_Change_SlideIn_Frame;                   // 0x02F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Edit_MaskB_Change_SlideIn_Delay;                   // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  Edit_CharacterShadow_InAnimation_SlideIn_Type;     // 0x02FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Edit_CharacterShadow_InAnimation_SlideIn_Frame;    // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Edit_CharacterShadow_InAnimation_SlideIn_Delay;    // 0x0304(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  Edit_CharacterShadow_Change_SlideIn_Type;          // 0x0308(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_309[0x3];                                      // 0x0309(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Edit_CharacterShadow_Change_SlideIn_Frame;         // 0x030C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Edit_CharacterShadow_Change_SlideIn_Delay;         // 0x0310(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Edit_Theurgia_Icon_Fade_In_Frame;                  // 0x0314(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Edit_Theurgia_Icon_Fade_In_Delay;                  // 0x0318(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCampParamTableStatusRow) == 0x000008, "Wrong alignment on FCampParamTableStatusRow");
static_assert(sizeof(FCampParamTableStatusRow) == 0x000320, "Wrong size on FCampParamTableStatusRow");
static_assert(offsetof(FCampParamTableStatusRow, ListTabChangeFrame) == 0x000008, "Member 'FCampParamTableStatusRow::ListTabChangeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListPartyRightSideFadeOutFrame) == 0x00000C, "Member 'FCampParamTableStatusRow::StatListPartyRightSideFadeOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListPartyRightSideFadeInFrame) == 0x000010, "Member 'FCampParamTableStatusRow::StatListPartyRightSideFadeInFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListKoshoLogoRotFrame) == 0x000014, "Member 'FCampParamTableStatusRow::StatListKoshoLogoRotFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListGlassCharaFrame) == 0x000018, "Member 'FCampParamTableStatusRow::StatListGlassCharaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListGlassCharaWait) == 0x00001C, "Member 'FCampParamTableStatusRow::StatListGlassCharaWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListBgNoiseRandFrameMin) == 0x000020, "Member 'FCampParamTableStatusRow::StatListBgNoiseRandFrameMin' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListBgNoiseRandFrameMax) == 0x000024, "Member 'FCampParamTableStatusRow::StatListBgNoiseRandFrameMax' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListInDist) == 0x000028, "Member 'FCampParamTableStatusRow::StatListInDist' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListInSilhouetteAnimType) == 0x00002C, "Member 'FCampParamTableStatusRow::StatListInSilhouetteAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListInSilhouetteFrame) == 0x000030, "Member 'FCampParamTableStatusRow::StatListInSilhouetteFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListInSilhouetteWait) == 0x000034, "Member 'FCampParamTableStatusRow::StatListInSilhouetteWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListInSilhouetteOriginal) == 0x000038, "Member 'FCampParamTableStatusRow::StatListInSilhouetteOriginal' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListInSilhouetteTarget) == 0x000040, "Member 'FCampParamTableStatusRow::StatListInSilhouetteTarget' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListInKoshoAnimType) == 0x000048, "Member 'FCampParamTableStatusRow::StatListInKoshoAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListInKoshoFrame) == 0x00004C, "Member 'FCampParamTableStatusRow::StatListInKoshoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListInKoshoWait) == 0x000050, "Member 'FCampParamTableStatusRow::StatListInKoshoWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListInTabAnimType) == 0x000054, "Member 'FCampParamTableStatusRow::StatListInTabAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListInTabFrame) == 0x000058, "Member 'FCampParamTableStatusRow::StatListInTabFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListInTabWait) == 0x00005C, "Member 'FCampParamTableStatusRow::StatListInTabWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListBgNoiseAnimType) == 0x000060, "Member 'FCampParamTableStatusRow::StatListBgNoiseAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListBgNoiseFrame) == 0x000064, "Member 'FCampParamTableStatusRow::StatListBgNoiseFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListBgTextAnimType) == 0x000068, "Member 'FCampParamTableStatusRow::StatListBgTextAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListBgTextFrame) == 0x00006C, "Member 'FCampParamTableStatusRow::StatListBgTextFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListOpeListAnimType) == 0x000070, "Member 'FCampParamTableStatusRow::StatListOpeListAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatListOpeListFrame) == 0x000074, "Member 'FCampParamTableStatusRow::StatListOpeListFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailRotation) == 0x000078, "Member 'FCampParamTableStatusRow::StatDetailRotation' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailInfoSlideAnimType) == 0x00007C, "Member 'FCampParamTableStatusRow::StatDetailInfoSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailInfoSlideFrame) == 0x000080, "Member 'FCampParamTableStatusRow::StatDetailInfoSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailBgNumSlideAnimType) == 0x000084, "Member 'FCampParamTableStatusRow::StatDetailBgNumSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailBgNumSlideOutFrame) == 0x000088, "Member 'FCampParamTableStatusRow::StatDetailBgNumSlideOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailBgNumSlideInFrame) == 0x00008C, "Member 'FCampParamTableStatusRow::StatDetailBgNumSlideInFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailHanshaSlideAnimType) == 0x000090, "Member 'FCampParamTableStatusRow::StatDetailHanshaSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailHanshaSlideFrame) == 0x000094, "Member 'FCampParamTableStatusRow::StatDetailHanshaSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailHahenShadowSlideAnimType) == 0x000098, "Member 'FCampParamTableStatusRow::StatDetailHahenShadowSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailHahenShadowSlideFrame) == 0x00009C, "Member 'FCampParamTableStatusRow::StatDetailHahenShadowSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailCharaShadowSlideAnimType) == 0x0000A0, "Member 'FCampParamTableStatusRow::StatDetailCharaShadowSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailCharaShadowSlideFrame) == 0x0000A4, "Member 'FCampParamTableStatusRow::StatDetailCharaShadowSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailLeaderRotAnimType) == 0x0000A8, "Member 'FCampParamTableStatusRow::StatDetailLeaderRotAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailLeaderRotOutFrame) == 0x0000AC, "Member 'FCampParamTableStatusRow::StatDetailLeaderRotOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailLeaderRotInFrame) == 0x0000B0, "Member 'FCampParamTableStatusRow::StatDetailLeaderRotInFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailInOutlineAnimType) == 0x0000B4, "Member 'FCampParamTableStatusRow::StatDetailInOutlineAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailInOutlineFrame) == 0x0000B8, "Member 'FCampParamTableStatusRow::StatDetailInOutlineFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailInOutlineWait) == 0x0000BC, "Member 'FCampParamTableStatusRow::StatDetailInOutlineWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailInOutlineOutFrame) == 0x0000C0, "Member 'FCampParamTableStatusRow::StatDetailInOutlineOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailPanelSlideAnimType) == 0x0000C4, "Member 'FCampParamTableStatusRow::StatDetailPanelSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailPanelSlideFrame) == 0x0000C8, "Member 'FCampParamTableStatusRow::StatDetailPanelSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailToTheurLeaderRotFrame) == 0x0000CC, "Member 'FCampParamTableStatusRow::StatDetailToTheurLeaderRotFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailToTheurDetailInfoSlideAnimType) == 0x0000D0, "Member 'FCampParamTableStatusRow::StatDetailToTheurDetailInfoSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailToTheurDetailInfoSlideFrame) == 0x0000D4, "Member 'FCampParamTableStatusRow::StatDetailToTheurDetailInfoSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, StatDetailToTheurBgNumSlideFrame) == 0x0000D8, "Member 'FCampParamTableStatusRow::StatDetailToTheurBgNumSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanHamonAlphaFrameDown) == 0x0000DC, "Member 'FCampParamTableStatusRow::HumanHamonAlphaFrameDown' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanHamonAlphaFrameUp) == 0x0000E0, "Member 'FCampParamTableStatusRow::HumanHamonAlphaFrameUp' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanHamonAlphaFrameStay) == 0x0000E4, "Member 'FCampParamTableStatusRow::HumanHamonAlphaFrameStay' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanHamonAlphaInterval) == 0x0000E8, "Member 'FCampParamTableStatusRow::HumanHamonAlphaInterval' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanSankakuRed) == 0x0000EC, "Member 'FCampParamTableStatusRow::HumanSankakuRed' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanSankakuGreen) == 0x0000F0, "Member 'FCampParamTableStatusRow::HumanSankakuGreen' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanBokasiRed) == 0x0000F4, "Member 'FCampParamTableStatusRow::HumanBokasiRed' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanBokasiGreen) == 0x0000F8, "Member 'FCampParamTableStatusRow::HumanBokasiGreen' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanInBgSankakuFrame) == 0x0000FC, "Member 'FCampParamTableStatusRow::HumanInBgSankakuFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanInSankakuFrame) == 0x000100, "Member 'FCampParamTableStatusRow::HumanInSankakuFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanInHamonFrame) == 0x000104, "Member 'FCampParamTableStatusRow::HumanInHamonFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanInRankRotFrame) == 0x000108, "Member 'FCampParamTableStatusRow::HumanInRankRotFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanInRankSlideFrame) == 0x00010C, "Member 'FCampParamTableStatusRow::HumanInRankSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanInHelpSlideFrame) == 0x000110, "Member 'FCampParamTableStatusRow::HumanInHelpSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanInTitleSlideFrame) == 0x000114, "Member 'FCampParamTableStatusRow::HumanInTitleSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanPointUpTextSlideOneFrame) == 0x000118, "Member 'FCampParamTableStatusRow::HumanPointUpTextSlideOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanPointUpTextSlideTwoFrame) == 0x00011C, "Member 'FCampParamTableStatusRow::HumanPointUpTextSlideTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanPointUpTextSlideThreeFrame) == 0x000120, "Member 'FCampParamTableStatusRow::HumanPointUpTextSlideThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanPointUpTextFadeOneFrame) == 0x000124, "Member 'FCampParamTableStatusRow::HumanPointUpTextFadeOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanPointUpTextFadeTwoFrame) == 0x000128, "Member 'FCampParamTableStatusRow::HumanPointUpTextFadeTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanPointUpTextFadeThreeFrame) == 0x00012C, "Member 'FCampParamTableStatusRow::HumanPointUpTextFadeThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanPointUpHamonScaleFrame) == 0x000130, "Member 'FCampParamTableStatusRow::HumanPointUpHamonScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanPointUpHamonFadeFrame) == 0x000134, "Member 'FCampParamTableStatusRow::HumanPointUpHamonFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanPointUpBlueCircleFadeScaleOneFrame) == 0x000138, "Member 'FCampParamTableStatusRow::HumanPointUpBlueCircleFadeScaleOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanPointUpBlueCircleFadeScaleTwoFrame) == 0x00013C, "Member 'FCampParamTableStatusRow::HumanPointUpBlueCircleFadeScaleTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanPointUpBlueCircleFadeScaleThreeFrame) == 0x000140, "Member 'FCampParamTableStatusRow::HumanPointUpBlueCircleFadeScaleThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpTextSlideOneFrame) == 0x000144, "Member 'FCampParamTableStatusRow::HumanRankUpTextSlideOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpTextSlideTwoFrame) == 0x000148, "Member 'FCampParamTableStatusRow::HumanRankUpTextSlideTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpTextSlideThreeFrame) == 0x00014C, "Member 'FCampParamTableStatusRow::HumanRankUpTextSlideThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpTextFadeOneFrame) == 0x000150, "Member 'FCampParamTableStatusRow::HumanRankUpTextFadeOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpTextFadeTwoFrame) == 0x000154, "Member 'FCampParamTableStatusRow::HumanRankUpTextFadeTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpTextFadeThreeFrame) == 0x000158, "Member 'FCampParamTableStatusRow::HumanRankUpTextFadeThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpHamonScaleFrame) == 0x00015C, "Member 'FCampParamTableStatusRow::HumanRankUpHamonScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpHamonFadeFrame) == 0x000160, "Member 'FCampParamTableStatusRow::HumanRankUpHamonFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpWhiteCircleColorOneFrame) == 0x000164, "Member 'FCampParamTableStatusRow::HumanRankUpWhiteCircleColorOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpWhiteCircleColorTwoFrame) == 0x000168, "Member 'FCampParamTableStatusRow::HumanRankUpWhiteCircleColorTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpWhiteCircleColorThreeFrame) == 0x00016C, "Member 'FCampParamTableStatusRow::HumanRankUpWhiteCircleColorThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpWhiteCircleScaleOneFrame) == 0x000170, "Member 'FCampParamTableStatusRow::HumanRankUpWhiteCircleScaleOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpWhiteCircleScaleTwoFrame) == 0x000174, "Member 'FCampParamTableStatusRow::HumanRankUpWhiteCircleScaleTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpWhiteCircleScaleThreeFrame) == 0x000178, "Member 'FCampParamTableStatusRow::HumanRankUpWhiteCircleScaleThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpAllCircleScaleFrame) == 0x00017C, "Member 'FCampParamTableStatusRow::HumanRankUpAllCircleScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpCurrentNumberFadeFrame) == 0x000180, "Member 'FCampParamTableStatusRow::HumanRankUpCurrentNumberFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpNextNumberFadeSlideFrame) == 0x000184, "Member 'FCampParamTableStatusRow::HumanRankUpNextNumberFadeSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpCurrentHelpTextFadeFrame) == 0x000188, "Member 'FCampParamTableStatusRow::HumanRankUpCurrentHelpTextFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpNextHelpTextFadeSlideFrame) == 0x00018C, "Member 'FCampParamTableStatusRow::HumanRankUpNextHelpTextFadeSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanRankUpMaskCircleFrame) == 0x000190, "Member 'FCampParamTableStatusRow::HumanRankUpMaskCircleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, KeyHelpFadeFrame) == 0x000194, "Member 'FCampParamTableStatusRow::KeyHelpFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, KeyHelpMaskSlideOneFrame) == 0x000198, "Member 'FCampParamTableStatusRow::KeyHelpMaskSlideOneFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, KeyHelpMaskSlideTwoFrame) == 0x00019C, "Member 'FCampParamTableStatusRow::KeyHelpMaskSlideTwoFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, KeyHelpMaskSlideThreeFrame) == 0x0001A0, "Member 'FCampParamTableStatusRow::KeyHelpMaskSlideThreeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, KeyHelpMaskSlideOneWaitFrame) == 0x0001A4, "Member 'FCampParamTableStatusRow::KeyHelpMaskSlideOneWaitFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, KeyHelpMaskSlideTwoWaitFrame) == 0x0001A8, "Member 'FCampParamTableStatusRow::KeyHelpMaskSlideTwoWaitFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, KeyHelpMaskSlideThreeWaitFrame) == 0x0001AC, "Member 'FCampParamTableStatusRow::KeyHelpMaskSlideThreeWaitFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanMaxHamonScaleFlame) == 0x0001B0, "Member 'FCampParamTableStatusRow::HumanMaxHamonScaleFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanMaxHamonFadeOneFlame) == 0x0001B4, "Member 'FCampParamTableStatusRow::HumanMaxHamonFadeOneFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanMaxHamonFadeTwoFlame) == 0x0001B8, "Member 'FCampParamTableStatusRow::HumanMaxHamonFadeTwoFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanMaxCircleFadeOneFlame) == 0x0001BC, "Member 'FCampParamTableStatusRow::HumanMaxCircleFadeOneFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanMaxCircleFadeTwoFlame) == 0x0001C0, "Member 'FCampParamTableStatusRow::HumanMaxCircleFadeTwoFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanCircleLoopFlame) == 0x0001C4, "Member 'FCampParamTableStatusRow::HumanCircleLoopFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanPlusHamonFlame) == 0x0001C8, "Member 'FCampParamTableStatusRow::HumanPlusHamonFlame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanOutHelpSlideFrame) == 0x0001CC, "Member 'FCampParamTableStatusRow::HumanOutHelpSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanOutHamonFrame) == 0x0001D0, "Member 'FCampParamTableStatusRow::HumanOutHamonFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanOutSankakuFrame) == 0x0001D4, "Member 'FCampParamTableStatusRow::HumanOutSankakuFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanOutRankRotFrame) == 0x0001D8, "Member 'FCampParamTableStatusRow::HumanOutRankRotFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanOutBgSankakuFrame) == 0x0001DC, "Member 'FCampParamTableStatusRow::HumanOutBgSankakuFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanHamonLoopScaleDownFrame) == 0x0001E0, "Member 'FCampParamTableStatusRow::HumanHamonLoopScaleDownFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanHamonLoopWaitFrame) == 0x0001E4, "Member 'FCampParamTableStatusRow::HumanHamonLoopWaitFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, HumanHamonLoopScaleUpFrame) == 0x0001E8, "Member 'FCampParamTableStatusRow::HumanHamonLoopScaleUpFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, FldTheurPanelSlideAnimType) == 0x0001EC, "Member 'FCampParamTableStatusRow::FldTheurPanelSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, FldTheurPanelSlideFrame) == 0x0001F0, "Member 'FCampParamTableStatusRow::FldTheurPanelSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, FldTheurPanelSlideWait) == 0x0001F4, "Member 'FCampParamTableStatusRow::FldTheurPanelSlideWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, FldTheurBgNumSlideFrame) == 0x0001F8, "Member 'FCampParamTableStatusRow::FldTheurBgNumSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, FldTheurBgNumSlideWait) == 0x0001FC, "Member 'FCampParamTableStatusRow::FldTheurBgNumSlideWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, FldTheurBustupSlideAnimType) == 0x000200, "Member 'FCampParamTableStatusRow::FldTheurBustupSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, FldTheurBustupSlideInFrame) == 0x000204, "Member 'FCampParamTableStatusRow::FldTheurBustupSlideInFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, FldTheurBustupSlideInWait) == 0x000208, "Member 'FCampParamTableStatusRow::FldTheurBustupSlideInWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, FldTheurBustupSlideOutFrame) == 0x00020C, "Member 'FCampParamTableStatusRow::FldTheurBustupSlideOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurCharaMaskColor) == 0x000210, "Member 'FCampParamTableStatusRow::TheurCharaMaskColor' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurCharaPosHero) == 0x000214, "Member 'FCampParamTableStatusRow::TheurCharaPosHero' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurShadowPosHero) == 0x00021C, "Member 'FCampParamTableStatusRow::TheurShadowPosHero' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurCharaPosYukari) == 0x000224, "Member 'FCampParamTableStatusRow::TheurCharaPosYukari' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurShadowPosYukari) == 0x00022C, "Member 'FCampParamTableStatusRow::TheurShadowPosYukari' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurCharaPosJunpei) == 0x000234, "Member 'FCampParamTableStatusRow::TheurCharaPosJunpei' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurShadowPosJunpei) == 0x00023C, "Member 'FCampParamTableStatusRow::TheurShadowPosJunpei' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurCharaPosSanada) == 0x000244, "Member 'FCampParamTableStatusRow::TheurCharaPosSanada' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurShadowPosSanada) == 0x00024C, "Member 'FCampParamTableStatusRow::TheurShadowPosSanada' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurCharaPosMituru) == 0x000254, "Member 'FCampParamTableStatusRow::TheurCharaPosMituru' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurShadowPosMituru) == 0x00025C, "Member 'FCampParamTableStatusRow::TheurShadowPosMituru' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurCharaPosFuka) == 0x000264, "Member 'FCampParamTableStatusRow::TheurCharaPosFuka' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurShadowPosFuka) == 0x00026C, "Member 'FCampParamTableStatusRow::TheurShadowPosFuka' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurCharaPosAegis) == 0x000274, "Member 'FCampParamTableStatusRow::TheurCharaPosAegis' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurShadowPosAegis) == 0x00027C, "Member 'FCampParamTableStatusRow::TheurShadowPosAegis' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurCharaPosAmada) == 0x000284, "Member 'FCampParamTableStatusRow::TheurCharaPosAmada' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurShadowPosAmada) == 0x00028C, "Member 'FCampParamTableStatusRow::TheurShadowPosAmada' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurCharaPosKoromaru) == 0x000294, "Member 'FCampParamTableStatusRow::TheurCharaPosKoromaru' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurShadowPosKoromaru) == 0x00029C, "Member 'FCampParamTableStatusRow::TheurShadowPosKoromaru' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurCharaPosAragaki) == 0x0002A4, "Member 'FCampParamTableStatusRow::TheurCharaPosAragaki' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, TheurShadowPosAragaki) == 0x0002AC, "Member 'FCampParamTableStatusRow::TheurShadowPosAragaki' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskA_InAnimation_SlideIn_Type) == 0x0002B4, "Member 'FCampParamTableStatusRow::Edit_MaskA_InAnimation_SlideIn_Type' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskA_InAnimation_SlideIn_Frame) == 0x0002B8, "Member 'FCampParamTableStatusRow::Edit_MaskA_InAnimation_SlideIn_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskA_InAnimation_SlideIn_Delay) == 0x0002BC, "Member 'FCampParamTableStatusRow::Edit_MaskA_InAnimation_SlideIn_Delay' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskA_OutAnimation_SlideIn_Type) == 0x0002C0, "Member 'FCampParamTableStatusRow::Edit_MaskA_OutAnimation_SlideIn_Type' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskA_OutAnimation_SlideIn_Frame) == 0x0002C4, "Member 'FCampParamTableStatusRow::Edit_MaskA_OutAnimation_SlideIn_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskA_OutAnimation_SlideIn_Delay) == 0x0002C8, "Member 'FCampParamTableStatusRow::Edit_MaskA_OutAnimation_SlideIn_Delay' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskA_Change_SlideIn_Type) == 0x0002CC, "Member 'FCampParamTableStatusRow::Edit_MaskA_Change_SlideIn_Type' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskA_Change_SlideIn_Frame) == 0x0002D0, "Member 'FCampParamTableStatusRow::Edit_MaskA_Change_SlideIn_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskA_Change_SlideIn_Delay) == 0x0002D4, "Member 'FCampParamTableStatusRow::Edit_MaskA_Change_SlideIn_Delay' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskB_InAnimation_SlideIn_Type) == 0x0002D8, "Member 'FCampParamTableStatusRow::Edit_MaskB_InAnimation_SlideIn_Type' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskB_InAnimation_SlideIn_Frame) == 0x0002DC, "Member 'FCampParamTableStatusRow::Edit_MaskB_InAnimation_SlideIn_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskB_InAnimation_SlideIn_Delay) == 0x0002E0, "Member 'FCampParamTableStatusRow::Edit_MaskB_InAnimation_SlideIn_Delay' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskB_OutAnimation_SlideIn_Type) == 0x0002E4, "Member 'FCampParamTableStatusRow::Edit_MaskB_OutAnimation_SlideIn_Type' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskB_OutAnimation_SlideIn_Frame) == 0x0002E8, "Member 'FCampParamTableStatusRow::Edit_MaskB_OutAnimation_SlideIn_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskB_OutAnimation_SlideIn_Delay) == 0x0002EC, "Member 'FCampParamTableStatusRow::Edit_MaskB_OutAnimation_SlideIn_Delay' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskB_Change_SlideIn_Type) == 0x0002F0, "Member 'FCampParamTableStatusRow::Edit_MaskB_Change_SlideIn_Type' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskB_Change_SlideIn_Frame) == 0x0002F4, "Member 'FCampParamTableStatusRow::Edit_MaskB_Change_SlideIn_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_MaskB_Change_SlideIn_Delay) == 0x0002F8, "Member 'FCampParamTableStatusRow::Edit_MaskB_Change_SlideIn_Delay' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_CharacterShadow_InAnimation_SlideIn_Type) == 0x0002FC, "Member 'FCampParamTableStatusRow::Edit_CharacterShadow_InAnimation_SlideIn_Type' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_CharacterShadow_InAnimation_SlideIn_Frame) == 0x000300, "Member 'FCampParamTableStatusRow::Edit_CharacterShadow_InAnimation_SlideIn_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_CharacterShadow_InAnimation_SlideIn_Delay) == 0x000304, "Member 'FCampParamTableStatusRow::Edit_CharacterShadow_InAnimation_SlideIn_Delay' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_CharacterShadow_Change_SlideIn_Type) == 0x000308, "Member 'FCampParamTableStatusRow::Edit_CharacterShadow_Change_SlideIn_Type' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_CharacterShadow_Change_SlideIn_Frame) == 0x00030C, "Member 'FCampParamTableStatusRow::Edit_CharacterShadow_Change_SlideIn_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_CharacterShadow_Change_SlideIn_Delay) == 0x000310, "Member 'FCampParamTableStatusRow::Edit_CharacterShadow_Change_SlideIn_Delay' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_Theurgia_Icon_Fade_In_Frame) == 0x000314, "Member 'FCampParamTableStatusRow::Edit_Theurgia_Icon_Fade_In_Frame' has a wrong offset!");
static_assert(offsetof(FCampParamTableStatusRow, Edit_Theurgia_Icon_Fade_In_Delay) == 0x000318, "Member 'FCampParamTableStatusRow::Edit_Theurgia_Icon_Fade_In_Delay' has a wrong offset!");

// ScriptStruct xrd777.DatDataOffDataTable
// 0x0010 (0x0018 - 0x0008)
struct FDatDataOffDataTable final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Major;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Minor;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatDataOffDataTable) == 0x000008, "Wrong alignment on FDatDataOffDataTable");
static_assert(sizeof(FDatDataOffDataTable) == 0x000018, "Wrong size on FDatDataOffDataTable");
static_assert(offsetof(FDatDataOffDataTable, Category) == 0x000008, "Member 'FDatDataOffDataTable::Category' has a wrong offset!");
static_assert(offsetof(FDatDataOffDataTable, Major) == 0x000010, "Member 'FDatDataOffDataTable::Major' has a wrong offset!");
static_assert(offsetof(FDatDataOffDataTable, Minor) == 0x000014, "Member 'FDatDataOffDataTable::Minor' has a wrong offset!");

// ScriptStruct xrd777.CampParamTablePersonaRow
// 0x00B0 (0x00B8 - 0x0008)
struct FCampParamTablePersonaRow final : public FTableRowBase
{
public:
	EOneAnimType                                  PersonaEquipScaleAnimType;                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PersonaEquipScaleFrame;                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PersonaEquipScaleWait;                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  PersonaEquipRotAnimType;                           // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PersonaEquipRotFrame;                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PersonaEquipRotWait;                               // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  PersonaEquipSlideAnimType;                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PersonaEquipSlideFrame;                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PersonaEquipSlideWait;                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PersonaLightSpeed;                                 // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PersonaWaveSpeed;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  PersonaArcanaFadeAnimType;                         // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PersonaArcanaFadeFrame;                            // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PersonaInDist;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  PersonaInSilhouetteAnimType;                       // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PersonaInSilhouetteFrame;                          // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PersonaInSilhouetteWait;                           // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PersonaInSilhouetteOriginal;                       // 0x004C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PersonaInSilhouetteTarget;                         // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  PersonaInPersonaAnimType;                          // 0x005C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PersonaInPersonaFrame;                             // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PersonaInPersonaWait;                              // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PersonaInPersonaDist;                              // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  PersonaInSiroItaAnimType;                          // 0x006C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PersonaInSiroItaFrame;                             // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PersonaInSiroItaWait;                              // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  PersonaInTitleAnimType;                            // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PersonaInTitleFrame;                               // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PersonaInTitleWait;                                // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  PersonaInListAnimType;                             // 0x0084(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85[0x3];                                       // 0x0085(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PersonaInListFrame;                                // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PersonaInListWait;                                 // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  PersonaInArcanaAnimType;                           // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PersonaInArcanaFrame;                              // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PersonaInArcanaWait;                               // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ItemPerListInAnimType;                             // 0x009C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemPerListInFrame;                                // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ItemPerListInWait;                                 // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ItemPerListInBackFrame;                            // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ItemPerListInBgAnimType;                           // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemPerListInBgFrame;                              // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ItemPerListInBgBackFrame;                          // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampParamTablePersonaRow) == 0x000008, "Wrong alignment on FCampParamTablePersonaRow");
static_assert(sizeof(FCampParamTablePersonaRow) == 0x0000B8, "Wrong size on FCampParamTablePersonaRow");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaEquipScaleAnimType) == 0x000008, "Member 'FCampParamTablePersonaRow::PersonaEquipScaleAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaEquipScaleFrame) == 0x00000C, "Member 'FCampParamTablePersonaRow::PersonaEquipScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaEquipScaleWait) == 0x000010, "Member 'FCampParamTablePersonaRow::PersonaEquipScaleWait' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaEquipRotAnimType) == 0x000014, "Member 'FCampParamTablePersonaRow::PersonaEquipRotAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaEquipRotFrame) == 0x000018, "Member 'FCampParamTablePersonaRow::PersonaEquipRotFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaEquipRotWait) == 0x00001C, "Member 'FCampParamTablePersonaRow::PersonaEquipRotWait' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaEquipSlideAnimType) == 0x000020, "Member 'FCampParamTablePersonaRow::PersonaEquipSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaEquipSlideFrame) == 0x000024, "Member 'FCampParamTablePersonaRow::PersonaEquipSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaEquipSlideWait) == 0x000028, "Member 'FCampParamTablePersonaRow::PersonaEquipSlideWait' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaLightSpeed) == 0x00002C, "Member 'FCampParamTablePersonaRow::PersonaLightSpeed' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaWaveSpeed) == 0x000030, "Member 'FCampParamTablePersonaRow::PersonaWaveSpeed' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaArcanaFadeAnimType) == 0x000034, "Member 'FCampParamTablePersonaRow::PersonaArcanaFadeAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaArcanaFadeFrame) == 0x000038, "Member 'FCampParamTablePersonaRow::PersonaArcanaFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInDist) == 0x00003C, "Member 'FCampParamTablePersonaRow::PersonaInDist' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInSilhouetteAnimType) == 0x000040, "Member 'FCampParamTablePersonaRow::PersonaInSilhouetteAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInSilhouetteFrame) == 0x000044, "Member 'FCampParamTablePersonaRow::PersonaInSilhouetteFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInSilhouetteWait) == 0x000048, "Member 'FCampParamTablePersonaRow::PersonaInSilhouetteWait' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInSilhouetteOriginal) == 0x00004C, "Member 'FCampParamTablePersonaRow::PersonaInSilhouetteOriginal' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInSilhouetteTarget) == 0x000054, "Member 'FCampParamTablePersonaRow::PersonaInSilhouetteTarget' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInPersonaAnimType) == 0x00005C, "Member 'FCampParamTablePersonaRow::PersonaInPersonaAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInPersonaFrame) == 0x000060, "Member 'FCampParamTablePersonaRow::PersonaInPersonaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInPersonaWait) == 0x000064, "Member 'FCampParamTablePersonaRow::PersonaInPersonaWait' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInPersonaDist) == 0x000068, "Member 'FCampParamTablePersonaRow::PersonaInPersonaDist' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInSiroItaAnimType) == 0x00006C, "Member 'FCampParamTablePersonaRow::PersonaInSiroItaAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInSiroItaFrame) == 0x000070, "Member 'FCampParamTablePersonaRow::PersonaInSiroItaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInSiroItaWait) == 0x000074, "Member 'FCampParamTablePersonaRow::PersonaInSiroItaWait' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInTitleAnimType) == 0x000078, "Member 'FCampParamTablePersonaRow::PersonaInTitleAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInTitleFrame) == 0x00007C, "Member 'FCampParamTablePersonaRow::PersonaInTitleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInTitleWait) == 0x000080, "Member 'FCampParamTablePersonaRow::PersonaInTitleWait' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInListAnimType) == 0x000084, "Member 'FCampParamTablePersonaRow::PersonaInListAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInListFrame) == 0x000088, "Member 'FCampParamTablePersonaRow::PersonaInListFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInListWait) == 0x00008C, "Member 'FCampParamTablePersonaRow::PersonaInListWait' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInArcanaAnimType) == 0x000090, "Member 'FCampParamTablePersonaRow::PersonaInArcanaAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInArcanaFrame) == 0x000094, "Member 'FCampParamTablePersonaRow::PersonaInArcanaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, PersonaInArcanaWait) == 0x000098, "Member 'FCampParamTablePersonaRow::PersonaInArcanaWait' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, ItemPerListInAnimType) == 0x00009C, "Member 'FCampParamTablePersonaRow::ItemPerListInAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, ItemPerListInFrame) == 0x0000A0, "Member 'FCampParamTablePersonaRow::ItemPerListInFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, ItemPerListInWait) == 0x0000A4, "Member 'FCampParamTablePersonaRow::ItemPerListInWait' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, ItemPerListInBackFrame) == 0x0000A8, "Member 'FCampParamTablePersonaRow::ItemPerListInBackFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, ItemPerListInBgAnimType) == 0x0000AC, "Member 'FCampParamTablePersonaRow::ItemPerListInBgAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, ItemPerListInBgFrame) == 0x0000B0, "Member 'FCampParamTablePersonaRow::ItemPerListInBgFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTablePersonaRow, ItemPerListInBgBackFrame) == 0x0000B4, "Member 'FCampParamTablePersonaRow::ItemPerListInBgBackFrame' has a wrong offset!");

// ScriptStruct xrd777.CampParamTableEquipRow
// 0x0178 (0x0180 - 0x0008)
struct FCampParamTableEquipRow final : public FTableRowBase
{
public:
	EOneAnimType                                  CategoChangeOutAnimType;                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CategoChangeOutFrame;                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CategoChangeInAnimType;                            // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CategoChangeInFrame;                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  EquipListChangeOutAnimType;                        // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        EquipListChangeOutFrame;                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  EquipListChangeInAnimType;                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        EquipListChangeInFrame;                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  EquipListEquipChangeOutAnimType;                   // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        EquipListEquipChangeOutFrame;                      // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  EquipListEquipChangeInAnimType;                    // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        EquipListEquipChangeInFrame;                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipListParamArrowSelectFrame;                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipListParamArrowLoopFrame;                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipCompChangeInInfoWait;                         // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EquipInPartyPanelDist;                             // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  EquipInSilhouetteAnimType;                         // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        EquipInSilhouetteFrame;                            // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipInSilhouetteWait;                             // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EquipInSilhouetteOriginal;                         // 0x0054(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EquipInSilhouetteTarget;                           // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  EquipInSiroItaAnimType;                            // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        EquipInSiroItaFrame;                               // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipInSiroItaWait;                                // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  EquipInAoItaAnimType;                              // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        EquipInAoItaFrame;                                 // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipInAoItaWait;                                  // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  EquipInTitleAnimType;                              // 0x007C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        EquipInTitleFrame;                                 // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipInTitleWait;                                  // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  EquipInBgPlusAnimType;                             // 0x0088(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        EquipInBgPlusFrame;                                // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipInBgPlusWait;                                 // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EquipInCharaEquipDist;                             // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  EquipInCharaEquipSlideAnimType;                    // 0x0098(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        EquipInCharaEquipSlideFrame;                       // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipInCharaEquipSlideWait;                        // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipInCharaEquipSlideInterval;                    // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipInCharaEquipFadeFrame;                        // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipInPartyPanelWait;                             // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ToCateCharaEquipFadeFrame;                         // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ToCateSiroItaAnimType;                             // 0x00B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ToCateSiroItaFrame;                                // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ToCateSiroItaWait;                                 // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CategoInSelPartySlideAnimType;                     // 0x00C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CategoInSelPartySlideFrame;                        // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CategoInSelPartyFadeFrame;                         // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CategoInBgPlusAnimType;                            // 0x00CC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CategoInBgPlusFrame;                               // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CategoInBgPlusWait;                                // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CategoInTabSlideAnimType;                          // 0x00D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CategoInTabSlideFrame;                             // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CategoInCategoryDist;                              // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CategoInCategorySlideAnimType;                     // 0x00E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CategoInCategorySlideFrame;                        // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CategoInCategorySlideInterval;                     // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CategoInCategoryFadeFrame;                         // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  BackCateSelPartyOutAnimType;                       // 0x00F4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        BackCateSelPartyOutFrame;                          // 0x00F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  BackCateSiroItaAnimType;                           // 0x00FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        BackCateSiroItaFrame;                              // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ToListCharaEquipOutFrame;                          // 0x0104(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ToListSiroItaAnimType;                             // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ToListSiroItaFrame;                                // 0x010C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ListInPartyExBgSlideAnimType;                      // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ListInPartyExBgSlideFrame;                         // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ListInPartyExInfoFadeFrame;                        // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ListInEquipListDist;                               // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ListInEquipListSlideAnimType;                      // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ListInEquipListSlideFrame;                         // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ListInEquipListSlideWait;                          // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ListInEquipListFadeFrame;                          // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        BackEquipListOutFrame;                             // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ToCompBg1ScaleAnimType;                            // 0x0134(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ToCompBg1ScaleFrame;                               // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ToCompBg1ScaleWait;                                // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ToCompBg2ScaleFrame;                               // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ToCompBg2ScaleWait;                                // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CompInSelectListSlideAnimType;                     // 0x0148(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CompInSelectListSlideFrame;                        // 0x014C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CompInSelectListSlideWait;                         // 0x0150(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CompInScrollBarSlideAnimType;                      // 0x0154(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_155[0x3];                                      // 0x0155(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CompInScrollBarSlideFrame;                         // 0x0158(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CompInArrowSlideAnimType;                          // 0x015C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CompInArrowSlideFrame;                             // 0x0160(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  CompInDetailSlideAnimType;                         // 0x0164(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        CompInDetailSlideFrame;                            // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        BackEquipCompOutFrame;                             // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  BackCompBgScaleAnimType;                           // 0x0170(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        BackCompBgScaleFrame;                              // 0x0174(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        BackCompBgScaleWait;                               // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCampParamTableEquipRow) == 0x000008, "Wrong alignment on FCampParamTableEquipRow");
static_assert(sizeof(FCampParamTableEquipRow) == 0x000180, "Wrong size on FCampParamTableEquipRow");
static_assert(offsetof(FCampParamTableEquipRow, CategoChangeOutAnimType) == 0x000008, "Member 'FCampParamTableEquipRow::CategoChangeOutAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoChangeOutFrame) == 0x00000C, "Member 'FCampParamTableEquipRow::CategoChangeOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoChangeInAnimType) == 0x000010, "Member 'FCampParamTableEquipRow::CategoChangeInAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoChangeInFrame) == 0x000014, "Member 'FCampParamTableEquipRow::CategoChangeInFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipListChangeOutAnimType) == 0x000018, "Member 'FCampParamTableEquipRow::EquipListChangeOutAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipListChangeOutFrame) == 0x00001C, "Member 'FCampParamTableEquipRow::EquipListChangeOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipListChangeInAnimType) == 0x000020, "Member 'FCampParamTableEquipRow::EquipListChangeInAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipListChangeInFrame) == 0x000024, "Member 'FCampParamTableEquipRow::EquipListChangeInFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipListEquipChangeOutAnimType) == 0x000028, "Member 'FCampParamTableEquipRow::EquipListEquipChangeOutAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipListEquipChangeOutFrame) == 0x00002C, "Member 'FCampParamTableEquipRow::EquipListEquipChangeOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipListEquipChangeInAnimType) == 0x000030, "Member 'FCampParamTableEquipRow::EquipListEquipChangeInAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipListEquipChangeInFrame) == 0x000034, "Member 'FCampParamTableEquipRow::EquipListEquipChangeInFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipListParamArrowSelectFrame) == 0x000038, "Member 'FCampParamTableEquipRow::EquipListParamArrowSelectFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipListParamArrowLoopFrame) == 0x00003C, "Member 'FCampParamTableEquipRow::EquipListParamArrowLoopFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipCompChangeInInfoWait) == 0x000040, "Member 'FCampParamTableEquipRow::EquipCompChangeInInfoWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInPartyPanelDist) == 0x000044, "Member 'FCampParamTableEquipRow::EquipInPartyPanelDist' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInSilhouetteAnimType) == 0x000048, "Member 'FCampParamTableEquipRow::EquipInSilhouetteAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInSilhouetteFrame) == 0x00004C, "Member 'FCampParamTableEquipRow::EquipInSilhouetteFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInSilhouetteWait) == 0x000050, "Member 'FCampParamTableEquipRow::EquipInSilhouetteWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInSilhouetteOriginal) == 0x000054, "Member 'FCampParamTableEquipRow::EquipInSilhouetteOriginal' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInSilhouetteTarget) == 0x00005C, "Member 'FCampParamTableEquipRow::EquipInSilhouetteTarget' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInSiroItaAnimType) == 0x000064, "Member 'FCampParamTableEquipRow::EquipInSiroItaAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInSiroItaFrame) == 0x000068, "Member 'FCampParamTableEquipRow::EquipInSiroItaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInSiroItaWait) == 0x00006C, "Member 'FCampParamTableEquipRow::EquipInSiroItaWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInAoItaAnimType) == 0x000070, "Member 'FCampParamTableEquipRow::EquipInAoItaAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInAoItaFrame) == 0x000074, "Member 'FCampParamTableEquipRow::EquipInAoItaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInAoItaWait) == 0x000078, "Member 'FCampParamTableEquipRow::EquipInAoItaWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInTitleAnimType) == 0x00007C, "Member 'FCampParamTableEquipRow::EquipInTitleAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInTitleFrame) == 0x000080, "Member 'FCampParamTableEquipRow::EquipInTitleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInTitleWait) == 0x000084, "Member 'FCampParamTableEquipRow::EquipInTitleWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInBgPlusAnimType) == 0x000088, "Member 'FCampParamTableEquipRow::EquipInBgPlusAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInBgPlusFrame) == 0x00008C, "Member 'FCampParamTableEquipRow::EquipInBgPlusFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInBgPlusWait) == 0x000090, "Member 'FCampParamTableEquipRow::EquipInBgPlusWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInCharaEquipDist) == 0x000094, "Member 'FCampParamTableEquipRow::EquipInCharaEquipDist' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInCharaEquipSlideAnimType) == 0x000098, "Member 'FCampParamTableEquipRow::EquipInCharaEquipSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInCharaEquipSlideFrame) == 0x00009C, "Member 'FCampParamTableEquipRow::EquipInCharaEquipSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInCharaEquipSlideWait) == 0x0000A0, "Member 'FCampParamTableEquipRow::EquipInCharaEquipSlideWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInCharaEquipSlideInterval) == 0x0000A4, "Member 'FCampParamTableEquipRow::EquipInCharaEquipSlideInterval' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInCharaEquipFadeFrame) == 0x0000A8, "Member 'FCampParamTableEquipRow::EquipInCharaEquipFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, EquipInPartyPanelWait) == 0x0000AC, "Member 'FCampParamTableEquipRow::EquipInPartyPanelWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ToCateCharaEquipFadeFrame) == 0x0000B0, "Member 'FCampParamTableEquipRow::ToCateCharaEquipFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ToCateSiroItaAnimType) == 0x0000B4, "Member 'FCampParamTableEquipRow::ToCateSiroItaAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ToCateSiroItaFrame) == 0x0000B8, "Member 'FCampParamTableEquipRow::ToCateSiroItaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ToCateSiroItaWait) == 0x0000BC, "Member 'FCampParamTableEquipRow::ToCateSiroItaWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInSelPartySlideAnimType) == 0x0000C0, "Member 'FCampParamTableEquipRow::CategoInSelPartySlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInSelPartySlideFrame) == 0x0000C4, "Member 'FCampParamTableEquipRow::CategoInSelPartySlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInSelPartyFadeFrame) == 0x0000C8, "Member 'FCampParamTableEquipRow::CategoInSelPartyFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInBgPlusAnimType) == 0x0000CC, "Member 'FCampParamTableEquipRow::CategoInBgPlusAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInBgPlusFrame) == 0x0000D0, "Member 'FCampParamTableEquipRow::CategoInBgPlusFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInBgPlusWait) == 0x0000D4, "Member 'FCampParamTableEquipRow::CategoInBgPlusWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInTabSlideAnimType) == 0x0000D8, "Member 'FCampParamTableEquipRow::CategoInTabSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInTabSlideFrame) == 0x0000DC, "Member 'FCampParamTableEquipRow::CategoInTabSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInCategoryDist) == 0x0000E0, "Member 'FCampParamTableEquipRow::CategoInCategoryDist' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInCategorySlideAnimType) == 0x0000E4, "Member 'FCampParamTableEquipRow::CategoInCategorySlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInCategorySlideFrame) == 0x0000E8, "Member 'FCampParamTableEquipRow::CategoInCategorySlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInCategorySlideInterval) == 0x0000EC, "Member 'FCampParamTableEquipRow::CategoInCategorySlideInterval' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CategoInCategoryFadeFrame) == 0x0000F0, "Member 'FCampParamTableEquipRow::CategoInCategoryFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, BackCateSelPartyOutAnimType) == 0x0000F4, "Member 'FCampParamTableEquipRow::BackCateSelPartyOutAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, BackCateSelPartyOutFrame) == 0x0000F8, "Member 'FCampParamTableEquipRow::BackCateSelPartyOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, BackCateSiroItaAnimType) == 0x0000FC, "Member 'FCampParamTableEquipRow::BackCateSiroItaAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, BackCateSiroItaFrame) == 0x000100, "Member 'FCampParamTableEquipRow::BackCateSiroItaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ToListCharaEquipOutFrame) == 0x000104, "Member 'FCampParamTableEquipRow::ToListCharaEquipOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ToListSiroItaAnimType) == 0x000108, "Member 'FCampParamTableEquipRow::ToListSiroItaAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ToListSiroItaFrame) == 0x00010C, "Member 'FCampParamTableEquipRow::ToListSiroItaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ListInPartyExBgSlideAnimType) == 0x000110, "Member 'FCampParamTableEquipRow::ListInPartyExBgSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ListInPartyExBgSlideFrame) == 0x000114, "Member 'FCampParamTableEquipRow::ListInPartyExBgSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ListInPartyExInfoFadeFrame) == 0x000118, "Member 'FCampParamTableEquipRow::ListInPartyExInfoFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ListInEquipListDist) == 0x00011C, "Member 'FCampParamTableEquipRow::ListInEquipListDist' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ListInEquipListSlideAnimType) == 0x000120, "Member 'FCampParamTableEquipRow::ListInEquipListSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ListInEquipListSlideFrame) == 0x000124, "Member 'FCampParamTableEquipRow::ListInEquipListSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ListInEquipListSlideWait) == 0x000128, "Member 'FCampParamTableEquipRow::ListInEquipListSlideWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ListInEquipListFadeFrame) == 0x00012C, "Member 'FCampParamTableEquipRow::ListInEquipListFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, BackEquipListOutFrame) == 0x000130, "Member 'FCampParamTableEquipRow::BackEquipListOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ToCompBg1ScaleAnimType) == 0x000134, "Member 'FCampParamTableEquipRow::ToCompBg1ScaleAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ToCompBg1ScaleFrame) == 0x000138, "Member 'FCampParamTableEquipRow::ToCompBg1ScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ToCompBg1ScaleWait) == 0x00013C, "Member 'FCampParamTableEquipRow::ToCompBg1ScaleWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ToCompBg2ScaleFrame) == 0x000140, "Member 'FCampParamTableEquipRow::ToCompBg2ScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, ToCompBg2ScaleWait) == 0x000144, "Member 'FCampParamTableEquipRow::ToCompBg2ScaleWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CompInSelectListSlideAnimType) == 0x000148, "Member 'FCampParamTableEquipRow::CompInSelectListSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CompInSelectListSlideFrame) == 0x00014C, "Member 'FCampParamTableEquipRow::CompInSelectListSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CompInSelectListSlideWait) == 0x000150, "Member 'FCampParamTableEquipRow::CompInSelectListSlideWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CompInScrollBarSlideAnimType) == 0x000154, "Member 'FCampParamTableEquipRow::CompInScrollBarSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CompInScrollBarSlideFrame) == 0x000158, "Member 'FCampParamTableEquipRow::CompInScrollBarSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CompInArrowSlideAnimType) == 0x00015C, "Member 'FCampParamTableEquipRow::CompInArrowSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CompInArrowSlideFrame) == 0x000160, "Member 'FCampParamTableEquipRow::CompInArrowSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CompInDetailSlideAnimType) == 0x000164, "Member 'FCampParamTableEquipRow::CompInDetailSlideAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, CompInDetailSlideFrame) == 0x000168, "Member 'FCampParamTableEquipRow::CompInDetailSlideFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, BackEquipCompOutFrame) == 0x00016C, "Member 'FCampParamTableEquipRow::BackEquipCompOutFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, BackCompBgScaleAnimType) == 0x000170, "Member 'FCampParamTableEquipRow::BackCompBgScaleAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, BackCompBgScaleFrame) == 0x000174, "Member 'FCampParamTableEquipRow::BackCompBgScaleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableEquipRow, BackCompBgScaleWait) == 0x000178, "Member 'FCampParamTableEquipRow::BackCompBgScaleWait' has a wrong offset!");

// ScriptStruct xrd777.CampParamTableItemRow
// 0x0050 (0x0058 - 0x0008)
struct FCampParamTableItemRow final : public FTableRowBase
{
public:
	float                                         ItemInDist;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ItemSilhouetteAnimType;                            // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemSilhouetteFrame;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ItemSilhouetteWait;                                // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ItemSilhouetteOriginal;                            // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ItemSilhouetteTarget;                              // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ItemSiroItaAnimType;                               // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemSiroItaFrame;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ItemSiroItaWait;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ItemTitleAnimType;                                 // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemTitleFrame;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ItemTitleWait;                                     // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ItemListAnimType;                                  // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemListFrame;                                     // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ItemListWait;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  ItemTabAnimType;                                   // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemTabFrame;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ItemTabWait;                                       // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampParamTableItemRow) == 0x000008, "Wrong alignment on FCampParamTableItemRow");
static_assert(sizeof(FCampParamTableItemRow) == 0x000058, "Wrong size on FCampParamTableItemRow");
static_assert(offsetof(FCampParamTableItemRow, ItemInDist) == 0x000008, "Member 'FCampParamTableItemRow::ItemInDist' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemSilhouetteAnimType) == 0x00000C, "Member 'FCampParamTableItemRow::ItemSilhouetteAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemSilhouetteFrame) == 0x000010, "Member 'FCampParamTableItemRow::ItemSilhouetteFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemSilhouetteWait) == 0x000014, "Member 'FCampParamTableItemRow::ItemSilhouetteWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemSilhouetteOriginal) == 0x000018, "Member 'FCampParamTableItemRow::ItemSilhouetteOriginal' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemSilhouetteTarget) == 0x000020, "Member 'FCampParamTableItemRow::ItemSilhouetteTarget' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemSiroItaAnimType) == 0x000028, "Member 'FCampParamTableItemRow::ItemSiroItaAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemSiroItaFrame) == 0x00002C, "Member 'FCampParamTableItemRow::ItemSiroItaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemSiroItaWait) == 0x000030, "Member 'FCampParamTableItemRow::ItemSiroItaWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemTitleAnimType) == 0x000034, "Member 'FCampParamTableItemRow::ItemTitleAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemTitleFrame) == 0x000038, "Member 'FCampParamTableItemRow::ItemTitleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemTitleWait) == 0x00003C, "Member 'FCampParamTableItemRow::ItemTitleWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemListAnimType) == 0x000040, "Member 'FCampParamTableItemRow::ItemListAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemListFrame) == 0x000044, "Member 'FCampParamTableItemRow::ItemListFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemListWait) == 0x000048, "Member 'FCampParamTableItemRow::ItemListWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemTabAnimType) == 0x00004C, "Member 'FCampParamTableItemRow::ItemTabAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemTabFrame) == 0x000050, "Member 'FCampParamTableItemRow::ItemTabFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableItemRow, ItemTabWait) == 0x000054, "Member 'FCampParamTableItemRow::ItemTabWait' has a wrong offset!");

// ScriptStruct xrd777.CampParamTableSkillRow
// 0x0078 (0x0080 - 0x0008)
struct FCampParamTableSkillRow final : public FTableRowBase
{
public:
	float                                         SkillInDist;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  SkillSilhouetteAnimType;                           // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SkillSilhouetteFrame;                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SkillSilhouetteWait;                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SkillSilhouetteOriginal;                           // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              SkillSilhouetteTarget;                             // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  SkillSiroItaAnimType;                              // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SkillSiroItaFrame;                                 // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SkillSiroItaWait;                                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  SkillTitleAnimType;                                // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SkillTitleFrame;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SkillTitleWait;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  SkillListAnimType;                                 // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SkillListFrame;                                    // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SkillListWait;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  SkillPartyAnimType;                                // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SkillPartyFrame;                                   // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SkillPartyWait;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SkillPartyFadeFrame;                               // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SkillPartyInterval;                                // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  GunRefRotAnimType;                                 // 0x0060(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        GunRefInFrame;                                     // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        GunRefInWait;                                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        GunRefNextFrame;                                   // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GunRefPos;                                         // 0x0070(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GunRefOffset;                                      // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCampParamTableSkillRow) == 0x000008, "Wrong alignment on FCampParamTableSkillRow");
static_assert(sizeof(FCampParamTableSkillRow) == 0x000080, "Wrong size on FCampParamTableSkillRow");
static_assert(offsetof(FCampParamTableSkillRow, SkillInDist) == 0x000008, "Member 'FCampParamTableSkillRow::SkillInDist' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillSilhouetteAnimType) == 0x00000C, "Member 'FCampParamTableSkillRow::SkillSilhouetteAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillSilhouetteFrame) == 0x000010, "Member 'FCampParamTableSkillRow::SkillSilhouetteFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillSilhouetteWait) == 0x000014, "Member 'FCampParamTableSkillRow::SkillSilhouetteWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillSilhouetteOriginal) == 0x000018, "Member 'FCampParamTableSkillRow::SkillSilhouetteOriginal' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillSilhouetteTarget) == 0x000020, "Member 'FCampParamTableSkillRow::SkillSilhouetteTarget' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillSiroItaAnimType) == 0x000028, "Member 'FCampParamTableSkillRow::SkillSiroItaAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillSiroItaFrame) == 0x00002C, "Member 'FCampParamTableSkillRow::SkillSiroItaFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillSiroItaWait) == 0x000030, "Member 'FCampParamTableSkillRow::SkillSiroItaWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillTitleAnimType) == 0x000034, "Member 'FCampParamTableSkillRow::SkillTitleAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillTitleFrame) == 0x000038, "Member 'FCampParamTableSkillRow::SkillTitleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillTitleWait) == 0x00003C, "Member 'FCampParamTableSkillRow::SkillTitleWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillListAnimType) == 0x000040, "Member 'FCampParamTableSkillRow::SkillListAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillListFrame) == 0x000044, "Member 'FCampParamTableSkillRow::SkillListFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillListWait) == 0x000048, "Member 'FCampParamTableSkillRow::SkillListWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillPartyAnimType) == 0x00004C, "Member 'FCampParamTableSkillRow::SkillPartyAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillPartyFrame) == 0x000050, "Member 'FCampParamTableSkillRow::SkillPartyFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillPartyWait) == 0x000054, "Member 'FCampParamTableSkillRow::SkillPartyWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillPartyFadeFrame) == 0x000058, "Member 'FCampParamTableSkillRow::SkillPartyFadeFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, SkillPartyInterval) == 0x00005C, "Member 'FCampParamTableSkillRow::SkillPartyInterval' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, GunRefRotAnimType) == 0x000060, "Member 'FCampParamTableSkillRow::GunRefRotAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, GunRefInFrame) == 0x000064, "Member 'FCampParamTableSkillRow::GunRefInFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, GunRefInWait) == 0x000068, "Member 'FCampParamTableSkillRow::GunRefInWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, GunRefNextFrame) == 0x00006C, "Member 'FCampParamTableSkillRow::GunRefNextFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, GunRefPos) == 0x000070, "Member 'FCampParamTableSkillRow::GunRefPos' has a wrong offset!");
static_assert(offsetof(FCampParamTableSkillRow, GunRefOffset) == 0x000078, "Member 'FCampParamTableSkillRow::GunRefOffset' has a wrong offset!");

// ScriptStruct xrd777.DarkHourWork
// 0x00C0 (0x00C0 - 0x0000)
struct FDarkHourWork final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMesh*                          SkeletalMesh;                                      // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAppAnimCtrl*                           PAnimCtrl;                                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            PSkyBoxMesh;                                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStaticMeshActor*                       PSkyBoxMeshActor;                                  // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   PSkyBoxMeshCompo;                                  // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PLoadMaterial;                                     // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MMateInst;                                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           PMpc;                                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x28];                                      // 0x0060(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AUISceneCapture>            UISceneCaptureClass;                               // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AUISceneCapture*                        PUISceneCapture2D;                                 // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAssetLoader*                           PAssetLoader;                                      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x20];                                      // 0x00A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDarkHourWork) == 0x000008, "Wrong alignment on FDarkHourWork");
static_assert(sizeof(FDarkHourWork) == 0x0000C0, "Wrong size on FDarkHourWork");
static_assert(offsetof(FDarkHourWork, SkeletalMesh) == 0x000020, "Member 'FDarkHourWork::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FDarkHourWork, PAnimCtrl) == 0x000028, "Member 'FDarkHourWork::PAnimCtrl' has a wrong offset!");
static_assert(offsetof(FDarkHourWork, PSkyBoxMesh) == 0x000030, "Member 'FDarkHourWork::PSkyBoxMesh' has a wrong offset!");
static_assert(offsetof(FDarkHourWork, PSkyBoxMeshActor) == 0x000038, "Member 'FDarkHourWork::PSkyBoxMeshActor' has a wrong offset!");
static_assert(offsetof(FDarkHourWork, PSkyBoxMeshCompo) == 0x000040, "Member 'FDarkHourWork::PSkyBoxMeshCompo' has a wrong offset!");
static_assert(offsetof(FDarkHourWork, PLoadMaterial) == 0x000048, "Member 'FDarkHourWork::PLoadMaterial' has a wrong offset!");
static_assert(offsetof(FDarkHourWork, MMateInst) == 0x000050, "Member 'FDarkHourWork::MMateInst' has a wrong offset!");
static_assert(offsetof(FDarkHourWork, PMpc) == 0x000058, "Member 'FDarkHourWork::PMpc' has a wrong offset!");
static_assert(offsetof(FDarkHourWork, UISceneCaptureClass) == 0x000088, "Member 'FDarkHourWork::UISceneCaptureClass' has a wrong offset!");
static_assert(offsetof(FDarkHourWork, PUISceneCapture2D) == 0x000090, "Member 'FDarkHourWork::PUISceneCapture2D' has a wrong offset!");
static_assert(offsetof(FDarkHourWork, PAssetLoader) == 0x000098, "Member 'FDarkHourWork::PAssetLoader' has a wrong offset!");

// ScriptStruct xrd777.CampParamTableTopRow
// 0x0040 (0x0048 - 0x0008)
struct FCampParamTableTopRow final : public FTableRowBase
{
public:
	float                                         TopInDist;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopInMenuDist;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  TopInTitleAnimType;                                // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TopInTitleFrame;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TopInTitleWait;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  TopInMenuAnimType;                                 // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TopInMenuFrame;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TopInMenuWait;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TopInMenuInterval;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  TopInWhiteCursorAnimType;                          // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TopInWhiteCursorFrame;                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TopInWhiteCursorWait;                              // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOneAnimType                                  TopInRedCursorAnimType;                            // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        TopInRedCursorFrame;                               // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TopInRedCursorWait;                                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Edit_Top_Reselect_Key_Lock_Frame;                  // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampParamTableTopRow) == 0x000008, "Wrong alignment on FCampParamTableTopRow");
static_assert(sizeof(FCampParamTableTopRow) == 0x000048, "Wrong size on FCampParamTableTopRow");
static_assert(offsetof(FCampParamTableTopRow, TopInDist) == 0x000008, "Member 'FCampParamTableTopRow::TopInDist' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInMenuDist) == 0x00000C, "Member 'FCampParamTableTopRow::TopInMenuDist' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInTitleAnimType) == 0x000010, "Member 'FCampParamTableTopRow::TopInTitleAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInTitleFrame) == 0x000014, "Member 'FCampParamTableTopRow::TopInTitleFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInTitleWait) == 0x000018, "Member 'FCampParamTableTopRow::TopInTitleWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInMenuAnimType) == 0x00001C, "Member 'FCampParamTableTopRow::TopInMenuAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInMenuFrame) == 0x000020, "Member 'FCampParamTableTopRow::TopInMenuFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInMenuWait) == 0x000024, "Member 'FCampParamTableTopRow::TopInMenuWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInMenuInterval) == 0x000028, "Member 'FCampParamTableTopRow::TopInMenuInterval' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInWhiteCursorAnimType) == 0x00002C, "Member 'FCampParamTableTopRow::TopInWhiteCursorAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInWhiteCursorFrame) == 0x000030, "Member 'FCampParamTableTopRow::TopInWhiteCursorFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInWhiteCursorWait) == 0x000034, "Member 'FCampParamTableTopRow::TopInWhiteCursorWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInRedCursorAnimType) == 0x000038, "Member 'FCampParamTableTopRow::TopInRedCursorAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInRedCursorFrame) == 0x00003C, "Member 'FCampParamTableTopRow::TopInRedCursorFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, TopInRedCursorWait) == 0x000040, "Member 'FCampParamTableTopRow::TopInRedCursorWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableTopRow, Edit_Top_Reselect_Key_Lock_Frame) == 0x000044, "Member 'FCampParamTableTopRow::Edit_Top_Reselect_Key_Lock_Frame' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonTBoxPacDataTable
// 0x0008 (0x0010 - 0x0008)
struct FFldDungeonTBoxPacDataTable final : public FTableRowBase
{
public:
	uint32                                        PacID;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TboxID;                                            // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability;                                       // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldDungeonTBoxPacDataTable) == 0x000008, "Wrong alignment on FFldDungeonTBoxPacDataTable");
static_assert(sizeof(FFldDungeonTBoxPacDataTable) == 0x000010, "Wrong size on FFldDungeonTBoxPacDataTable");
static_assert(offsetof(FFldDungeonTBoxPacDataTable, PacID) == 0x000008, "Member 'FFldDungeonTBoxPacDataTable::PacID' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxPacDataTable, TboxID) == 0x00000C, "Member 'FFldDungeonTBoxPacDataTable::TboxID' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxPacDataTable, Probability) == 0x00000E, "Member 'FFldDungeonTBoxPacDataTable::Probability' has a wrong offset!");

// ScriptStruct xrd777.CampParamTableHologRow
// 0x0010 (0x0018 - 0x0008)
struct FCampParamTableHologRow final : public FTableRowBase
{
public:
	EOneAnimType                                  HologAnimType;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        HologTransFrame;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HologTransWait;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HologColorWait;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCampParamTableHologRow) == 0x000008, "Wrong alignment on FCampParamTableHologRow");
static_assert(sizeof(FCampParamTableHologRow) == 0x000018, "Wrong size on FCampParamTableHologRow");
static_assert(offsetof(FCampParamTableHologRow, HologAnimType) == 0x000008, "Member 'FCampParamTableHologRow::HologAnimType' has a wrong offset!");
static_assert(offsetof(FCampParamTableHologRow, HologTransFrame) == 0x00000C, "Member 'FCampParamTableHologRow::HologTransFrame' has a wrong offset!");
static_assert(offsetof(FCampParamTableHologRow, HologTransWait) == 0x000010, "Member 'FCampParamTableHologRow::HologTransWait' has a wrong offset!");
static_assert(offsetof(FCampParamTableHologRow, HologColorWait) == 0x000014, "Member 'FCampParamTableHologRow::HologColorWait' has a wrong offset!");

// ScriptStruct xrd777.CampParamTableRow
// 0x0008 (0x0010 - 0x0008)
struct FCampParamTableRow final : public FTableRowBase
{
public:
	uint32                                        Dummy;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCampParamTableRow) == 0x000008, "Wrong alignment on FCampParamTableRow");
static_assert(sizeof(FCampParamTableRow) == 0x000010, "Wrong size on FCampParamTableRow");
static_assert(offsetof(FCampParamTableRow, Dummy) == 0x000008, "Member 'FCampParamTableRow::Dummy' has a wrong offset!");

// ScriptStruct xrd777.CldBindingData
// 0x0040 (0x0040 - 0x0000)
struct FCldBindingData final
{
public:
	class FString                                 MBindingTag;                                       // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MAssetPath;                                        // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MNpcSkeltonID;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         MCostumeID;                                        // 0x0024(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         MAnimSlotID;                                       // 0x0026(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MIsBag;                                            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 MBpClass;                                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 MActor;                                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCldBindingData) == 0x000008, "Wrong alignment on FCldBindingData");
static_assert(sizeof(FCldBindingData) == 0x000040, "Wrong size on FCldBindingData");
static_assert(offsetof(FCldBindingData, MBindingTag) == 0x000000, "Member 'FCldBindingData::MBindingTag' has a wrong offset!");
static_assert(offsetof(FCldBindingData, MAssetPath) == 0x000010, "Member 'FCldBindingData::MAssetPath' has a wrong offset!");
static_assert(offsetof(FCldBindingData, MNpcSkeltonID) == 0x000020, "Member 'FCldBindingData::MNpcSkeltonID' has a wrong offset!");
static_assert(offsetof(FCldBindingData, MCostumeID) == 0x000024, "Member 'FCldBindingData::MCostumeID' has a wrong offset!");
static_assert(offsetof(FCldBindingData, MAnimSlotID) == 0x000026, "Member 'FCldBindingData::MAnimSlotID' has a wrong offset!");
static_assert(offsetof(FCldBindingData, MIsBag) == 0x000028, "Member 'FCldBindingData::MIsBag' has a wrong offset!");
static_assert(offsetof(FCldBindingData, MBpClass) == 0x000030, "Member 'FCldBindingData::MBpClass' has a wrong offset!");
static_assert(offsetof(FCldBindingData, MActor) == 0x000038, "Member 'FCldBindingData::MActor' has a wrong offset!");

// ScriptStruct xrd777.FadeStatus
// 0x0020 (0x0020 - 0x0000)
struct FFadeStatus final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UFadeProgramBase*                       Program;                                           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFadeStatus) == 0x000008, "Wrong alignment on FFadeStatus");
static_assert(sizeof(FFadeStatus) == 0x000020, "Wrong size on FFadeStatus");
static_assert(offsetof(FFadeStatus, Program) == 0x000018, "Member 'FFadeStatus::Program' has a wrong offset!");

// ScriptStruct xrd777.CldBindingEventActorTag
// 0x0030 (0x0030 - 0x0000)
struct FCldBindingEventActorTag final
{
public:
	class FString                                 MAssetName;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MBindingTag;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MNpcSkeltonID;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         MCostumeID;                                        // 0x0024(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         MAnimSlotID;                                       // 0x0026(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MIsBag;                                            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCldBindingEventActorTag) == 0x000008, "Wrong alignment on FCldBindingEventActorTag");
static_assert(sizeof(FCldBindingEventActorTag) == 0x000030, "Wrong size on FCldBindingEventActorTag");
static_assert(offsetof(FCldBindingEventActorTag, MAssetName) == 0x000000, "Member 'FCldBindingEventActorTag::MAssetName' has a wrong offset!");
static_assert(offsetof(FCldBindingEventActorTag, MBindingTag) == 0x000010, "Member 'FCldBindingEventActorTag::MBindingTag' has a wrong offset!");
static_assert(offsetof(FCldBindingEventActorTag, MNpcSkeltonID) == 0x000020, "Member 'FCldBindingEventActorTag::MNpcSkeltonID' has a wrong offset!");
static_assert(offsetof(FCldBindingEventActorTag, MCostumeID) == 0x000024, "Member 'FCldBindingEventActorTag::MCostumeID' has a wrong offset!");
static_assert(offsetof(FCldBindingEventActorTag, MAnimSlotID) == 0x000026, "Member 'FCldBindingEventActorTag::MAnimSlotID' has a wrong offset!");
static_assert(offsetof(FCldBindingEventActorTag, MIsBag) == 0x000028, "Member 'FCldBindingEventActorTag::MIsBag' has a wrong offset!");

// ScriptStruct xrd777.CldBindingEventParam
// 0x0030 (0x0030 - 0x0000)
struct FCldBindingEventParam final
{
public:
	int32                                         MEventMajorID;                                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MEventMinorID;                                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCldBindingEventActorTag>       MActorTags;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int16                                         MMsgRef;                                           // 0x0018(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MPictureDefs;                                      // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCldBindingEventParam) == 0x000008, "Wrong alignment on FCldBindingEventParam");
static_assert(sizeof(FCldBindingEventParam) == 0x000030, "Wrong size on FCldBindingEventParam");
static_assert(offsetof(FCldBindingEventParam, MEventMajorID) == 0x000000, "Member 'FCldBindingEventParam::MEventMajorID' has a wrong offset!");
static_assert(offsetof(FCldBindingEventParam, MEventMinorID) == 0x000004, "Member 'FCldBindingEventParam::MEventMinorID' has a wrong offset!");
static_assert(offsetof(FCldBindingEventParam, MActorTags) == 0x000008, "Member 'FCldBindingEventParam::MActorTags' has a wrong offset!");
static_assert(offsetof(FCldBindingEventParam, MMsgRef) == 0x000018, "Member 'FCldBindingEventParam::MMsgRef' has a wrong offset!");
static_assert(offsetof(FCldBindingEventParam, MPictureDefs) == 0x000020, "Member 'FCldBindingEventParam::MPictureDefs' has a wrong offset!");

// ScriptStruct xrd777.CldDateMessage
// 0x0014 (0x0014 - 0x0000)
struct FCldDateMessage final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TotalDay;                                          // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Month;                                             // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Day;                                               // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldDateMsgPeriod                             Period;                                            // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        MsgLabel;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VisibleFlag;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCldDateMessage) == 0x000004, "Wrong alignment on FCldDateMessage");
static_assert(sizeof(FCldDateMessage) == 0x000014, "Wrong size on FCldDateMessage");
static_assert(offsetof(FCldDateMessage, Key) == 0x000000, "Member 'FCldDateMessage::Key' has a wrong offset!");
static_assert(offsetof(FCldDateMessage, TotalDay) == 0x000004, "Member 'FCldDateMessage::TotalDay' has a wrong offset!");
static_assert(offsetof(FCldDateMessage, Month) == 0x000006, "Member 'FCldDateMessage::Month' has a wrong offset!");
static_assert(offsetof(FCldDateMessage, Day) == 0x000007, "Member 'FCldDateMessage::Day' has a wrong offset!");
static_assert(offsetof(FCldDateMessage, Period) == 0x000008, "Member 'FCldDateMessage::Period' has a wrong offset!");
static_assert(offsetof(FCldDateMessage, MsgLabel) == 0x00000C, "Member 'FCldDateMessage::MsgLabel' has a wrong offset!");
static_assert(offsetof(FCldDateMessage, VisibleFlag) == 0x000010, "Member 'FCldDateMessage::VisibleFlag' has a wrong offset!");

// ScriptStruct xrd777.CldDateMessageMonth
// 0x0010 (0x0010 - 0x0000)
struct FCldDateMessageMonth final
{
public:
	TArray<struct FCldDateMessage>                Data;                                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCldDateMessageMonth) == 0x000008, "Wrong alignment on FCldDateMessageMonth");
static_assert(sizeof(FCldDateMessageMonth) == 0x000010, "Wrong size on FCldDateMessageMonth");
static_assert(offsetof(FCldDateMessageMonth, Data) == 0x000000, "Member 'FCldDateMessageMonth::Data' has a wrong offset!");

// ScriptStruct xrd777.CldDateTableItem
// 0x0006 (0x0006 - 0x0000)
struct FCldDateTableItem final
{
public:
	uint8                                         Month;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Day;                                               // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MoonAge;                                           // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHoliday;                                         // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPublicHoliday;                                   // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldDateColor                                 NumColorType;                                      // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCldDateTableItem) == 0x000001, "Wrong alignment on FCldDateTableItem");
static_assert(sizeof(FCldDateTableItem) == 0x000006, "Wrong size on FCldDateTableItem");
static_assert(offsetof(FCldDateTableItem, Month) == 0x000000, "Member 'FCldDateTableItem::Month' has a wrong offset!");
static_assert(offsetof(FCldDateTableItem, Day) == 0x000001, "Member 'FCldDateTableItem::Day' has a wrong offset!");
static_assert(offsetof(FCldDateTableItem, MoonAge) == 0x000002, "Member 'FCldDateTableItem::MoonAge' has a wrong offset!");
static_assert(offsetof(FCldDateTableItem, IsHoliday) == 0x000003, "Member 'FCldDateTableItem::IsHoliday' has a wrong offset!");
static_assert(offsetof(FCldDateTableItem, IsPublicHoliday) == 0x000004, "Member 'FCldDateTableItem::IsPublicHoliday' has a wrong offset!");
static_assert(offsetof(FCldDateTableItem, NumColorType) == 0x000005, "Member 'FCldDateTableItem::NumColorType' has a wrong offset!");

// ScriptStruct xrd777.EquipItemInfo
// 0x0014 (0x0014 - 0x0000)
struct alignas(0x04) FEquipItemInfo final
{
public:
	uint8                                         Pad_0[0x14];                                       // 0x0000(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEquipItemInfo) == 0x000004, "Wrong alignment on FEquipItemInfo");
static_assert(sizeof(FEquipItemInfo) == 0x000014, "Wrong size on FEquipItemInfo");

// ScriptStruct xrd777.SelectSkillData
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x02) FSelectSkillData final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSelectSkillData) == 0x000002, "Wrong alignment on FSelectSkillData");
static_assert(sizeof(FSelectSkillData) == 0x000004, "Wrong size on FSelectSkillData");

// ScriptStruct xrd777.ChristmasEventRow
// 0x0010 (0x0018 - 0x0008)
struct FChristmasEventRow final : public FTableRowBase
{
public:
	int16                                         Major;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Minor;                                             // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Flag;                                              // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChristmasEventRow) == 0x000008, "Wrong alignment on FChristmasEventRow");
static_assert(sizeof(FChristmasEventRow) == 0x000018, "Wrong size on FChristmasEventRow");
static_assert(offsetof(FChristmasEventRow, Major) == 0x000008, "Member 'FChristmasEventRow::Major' has a wrong offset!");
static_assert(offsetof(FChristmasEventRow, Minor) == 0x00000A, "Member 'FChristmasEventRow::Minor' has a wrong offset!");
static_assert(offsetof(FChristmasEventRow, Flag) == 0x00000C, "Member 'FChristmasEventRow::Flag' has a wrong offset!");

// ScriptStruct xrd777.MoviesEventRow
// 0x0020 (0x0028 - 0x0008)
struct FMoviesEventRow final : public FTableRowBase
{
public:
	int8                                          Month;                                             // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          Day;                                               // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ArcanaID;                                          // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MailID;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Major;                                             // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Minor;                                             // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          CommunityRankMin;                                  // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          CommunityRankMax;                                  // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   OffFlag;                                           // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMoviesEventRow) == 0x000008, "Wrong alignment on FMoviesEventRow");
static_assert(sizeof(FMoviesEventRow) == 0x000028, "Wrong size on FMoviesEventRow");
static_assert(offsetof(FMoviesEventRow, Month) == 0x000008, "Member 'FMoviesEventRow::Month' has a wrong offset!");
static_assert(offsetof(FMoviesEventRow, Day) == 0x000009, "Member 'FMoviesEventRow::Day' has a wrong offset!");
static_assert(offsetof(FMoviesEventRow, ArcanaID) == 0x00000C, "Member 'FMoviesEventRow::ArcanaID' has a wrong offset!");
static_assert(offsetof(FMoviesEventRow, MailID) == 0x000014, "Member 'FMoviesEventRow::MailID' has a wrong offset!");
static_assert(offsetof(FMoviesEventRow, Major) == 0x000018, "Member 'FMoviesEventRow::Major' has a wrong offset!");
static_assert(offsetof(FMoviesEventRow, Minor) == 0x00001A, "Member 'FMoviesEventRow::Minor' has a wrong offset!");
static_assert(offsetof(FMoviesEventRow, CommunityRankMin) == 0x00001C, "Member 'FMoviesEventRow::CommunityRankMin' has a wrong offset!");
static_assert(offsetof(FMoviesEventRow, CommunityRankMax) == 0x00001D, "Member 'FMoviesEventRow::CommunityRankMax' has a wrong offset!");
static_assert(offsetof(FMoviesEventRow, OffFlag) == 0x000020, "Member 'FMoviesEventRow::OffFlag' has a wrong offset!");

// ScriptStruct xrd777.UniqCoefficientRow
// 0x0018 (0x0020 - 0x0008)
struct FUniqCoefficientRow final : public FTableRowBase
{
public:
	class FName                                   Type;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Flag;                                              // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Coefficient;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUniqCoefficientRow) == 0x000008, "Wrong alignment on FUniqCoefficientRow");
static_assert(sizeof(FUniqCoefficientRow) == 0x000020, "Wrong size on FUniqCoefficientRow");
static_assert(offsetof(FUniqCoefficientRow, Type) == 0x000008, "Member 'FUniqCoefficientRow::Type' has a wrong offset!");
static_assert(offsetof(FUniqCoefficientRow, Flag) == 0x000010, "Member 'FUniqCoefficientRow::Flag' has a wrong offset!");
static_assert(offsetof(FUniqCoefficientRow, Coefficient) == 0x000018, "Member 'FUniqCoefficientRow::Coefficient' has a wrong offset!");

// ScriptStruct xrd777.HolidayScheduleRow
// 0x0020 (0x0028 - 0x0008)
struct FHolidayScheduleRow final : public FTableRowBase
{
public:
	int32                                         Month;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ArcanaID_A;                                        // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ArcanaID_B;                                        // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ArcanaID_C;                                        // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHolidayScheduleRow) == 0x000008, "Wrong alignment on FHolidayScheduleRow");
static_assert(sizeof(FHolidayScheduleRow) == 0x000028, "Wrong size on FHolidayScheduleRow");
static_assert(offsetof(FHolidayScheduleRow, Month) == 0x000008, "Member 'FHolidayScheduleRow::Month' has a wrong offset!");
static_assert(offsetof(FHolidayScheduleRow, Day) == 0x00000C, "Member 'FHolidayScheduleRow::Day' has a wrong offset!");
static_assert(offsetof(FHolidayScheduleRow, ArcanaID_A) == 0x000010, "Member 'FHolidayScheduleRow::ArcanaID_A' has a wrong offset!");
static_assert(offsetof(FHolidayScheduleRow, ArcanaID_B) == 0x000018, "Member 'FHolidayScheduleRow::ArcanaID_B' has a wrong offset!");
static_assert(offsetof(FHolidayScheduleRow, ArcanaID_C) == 0x000020, "Member 'FHolidayScheduleRow::ArcanaID_C' has a wrong offset!");

// ScriptStruct xrd777.HeroParameterPointRow
// 0x0010 (0x0018 - 0x0008)
struct FHeroParameterPointRow final : public FTableRowBase
{
public:
	int32                                         BrainPoint;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharmPoint;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CouragePoint;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHeroParameterPointRow) == 0x000008, "Wrong alignment on FHeroParameterPointRow");
static_assert(sizeof(FHeroParameterPointRow) == 0x000018, "Wrong size on FHeroParameterPointRow");
static_assert(offsetof(FHeroParameterPointRow, BrainPoint) == 0x000008, "Member 'FHeroParameterPointRow::BrainPoint' has a wrong offset!");
static_assert(offsetof(FHeroParameterPointRow, CharmPoint) == 0x00000C, "Member 'FHeroParameterPointRow::CharmPoint' has a wrong offset!");
static_assert(offsetof(FHeroParameterPointRow, CouragePoint) == 0x000010, "Member 'FHeroParameterPointRow::CouragePoint' has a wrong offset!");

// ScriptStruct xrd777.NotRankUpEventRow
// 0x0010 (0x0018 - 0x0008)
struct FNotRankUpEventRow final : public FTableRowBase
{
public:
	int32                                         Rank;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Major;                                             // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Minor;                                             // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNotRankUpEventRow) == 0x000008, "Wrong alignment on FNotRankUpEventRow");
static_assert(sizeof(FNotRankUpEventRow) == 0x000018, "Wrong size on FNotRankUpEventRow");
static_assert(offsetof(FNotRankUpEventRow, Rank) == 0x000008, "Member 'FNotRankUpEventRow::Rank' has a wrong offset!");
static_assert(offsetof(FNotRankUpEventRow, Major) == 0x00000C, "Member 'FNotRankUpEventRow::Major' has a wrong offset!");
static_assert(offsetof(FNotRankUpEventRow, Minor) == 0x00000E, "Member 'FNotRankUpEventRow::Minor' has a wrong offset!");
static_assert(offsetof(FNotRankUpEventRow, Comment) == 0x000010, "Member 'FNotRankUpEventRow::Comment' has a wrong offset!");

// ScriptStruct xrd777.SummerFestivalEventData
// 0x0010 (0x0010 - 0x0000)
struct FSummerFestivalEventData final
{
public:
	int32                                         MailID;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Major;                                             // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         Minor;                                             // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OnFlag;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OffFlag;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSummerFestivalEventData) == 0x000004, "Wrong alignment on FSummerFestivalEventData");
static_assert(sizeof(FSummerFestivalEventData) == 0x000010, "Wrong size on FSummerFestivalEventData");
static_assert(offsetof(FSummerFestivalEventData, MailID) == 0x000000, "Member 'FSummerFestivalEventData::MailID' has a wrong offset!");
static_assert(offsetof(FSummerFestivalEventData, Major) == 0x000004, "Member 'FSummerFestivalEventData::Major' has a wrong offset!");
static_assert(offsetof(FSummerFestivalEventData, Minor) == 0x000006, "Member 'FSummerFestivalEventData::Minor' has a wrong offset!");
static_assert(offsetof(FSummerFestivalEventData, OnFlag) == 0x000008, "Member 'FSummerFestivalEventData::OnFlag' has a wrong offset!");
static_assert(offsetof(FSummerFestivalEventData, OffFlag) == 0x00000C, "Member 'FSummerFestivalEventData::OffFlag' has a wrong offset!");

// ScriptStruct xrd777.CommunityPresentTable
// 0x0010 (0x0010 - 0x0000)
struct FCommunityPresentTable final
{
public:
	TArray<struct FCommunityPresentData>          Datas;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityPresentTable) == 0x000008, "Wrong alignment on FCommunityPresentTable");
static_assert(sizeof(FCommunityPresentTable) == 0x000010, "Wrong size on FCommunityPresentTable");
static_assert(offsetof(FCommunityPresentTable, Datas) == 0x000000, "Member 'FCommunityPresentTable::Datas' has a wrong offset!");

// ScriptStruct xrd777.UniqCoefficient
// 0x0050 (0x0050 - 0x0000)
struct FUniqCoefficient final
{
public:
	TMap<int32, struct FCoefficientInfo>          DataMap;                                           // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUniqCoefficient) == 0x000008, "Wrong alignment on FUniqCoefficient");
static_assert(sizeof(FUniqCoefficient) == 0x000050, "Wrong size on FUniqCoefficient");
static_assert(offsetof(FUniqCoefficient, DataMap) == 0x000000, "Member 'FUniqCoefficient::DataMap' has a wrong offset!");

// ScriptStruct xrd777.VeveMessage
// 0x0008 (0x0010 - 0x0008)
struct FVeveMessage final : public FTableRowBase
{
public:
	class FName                                   Message;                                           // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVeveMessage) == 0x000008, "Wrong alignment on FVeveMessage");
static_assert(sizeof(FVeveMessage) == 0x000010, "Wrong size on FVeveMessage");
static_assert(offsetof(FVeveMessage, Message) == 0x000008, "Member 'FVeveMessage::Message' has a wrong offset!");

// ScriptStruct xrd777.HolidayEventDataTable
// 0x0010 (0x0010 - 0x0000)
struct FHolidayEventDataTable final
{
public:
	TArray<struct FHolidayEventData>              Datas;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHolidayEventDataTable) == 0x000008, "Wrong alignment on FHolidayEventDataTable");
static_assert(sizeof(FHolidayEventDataTable) == 0x000010, "Wrong size on FHolidayEventDataTable");
static_assert(offsetof(FHolidayEventDataTable, Datas) == 0x000000, "Member 'FHolidayEventDataTable::Datas' has a wrong offset!");

// ScriptStruct xrd777.CommunityNameFormat
// 0x0038 (0x0040 - 0x0008)
struct FCommunityNameFormat final : public FTableRowBase
{
public:
	class FName                                   CommunityName;                                     // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CampDispCommunityCharacterNameA;                   // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CampDispCommunityCharacterNameB;                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCFirstNameA;                                     // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCLastNameA;                                      // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCFirstNameB;                                     // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NPCLastNameB;                                      // 0x0038(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityNameFormat) == 0x000008, "Wrong alignment on FCommunityNameFormat");
static_assert(sizeof(FCommunityNameFormat) == 0x000040, "Wrong size on FCommunityNameFormat");
static_assert(offsetof(FCommunityNameFormat, CommunityName) == 0x000008, "Member 'FCommunityNameFormat::CommunityName' has a wrong offset!");
static_assert(offsetof(FCommunityNameFormat, CampDispCommunityCharacterNameA) == 0x000010, "Member 'FCommunityNameFormat::CampDispCommunityCharacterNameA' has a wrong offset!");
static_assert(offsetof(FCommunityNameFormat, CampDispCommunityCharacterNameB) == 0x000018, "Member 'FCommunityNameFormat::CampDispCommunityCharacterNameB' has a wrong offset!");
static_assert(offsetof(FCommunityNameFormat, NPCFirstNameA) == 0x000020, "Member 'FCommunityNameFormat::NPCFirstNameA' has a wrong offset!");
static_assert(offsetof(FCommunityNameFormat, NPCLastNameA) == 0x000028, "Member 'FCommunityNameFormat::NPCLastNameA' has a wrong offset!");
static_assert(offsetof(FCommunityNameFormat, NPCFirstNameB) == 0x000030, "Member 'FCommunityNameFormat::NPCFirstNameB' has a wrong offset!");
static_assert(offsetof(FCommunityNameFormat, NPCLastNameB) == 0x000038, "Member 'FCommunityNameFormat::NPCLastNameB' has a wrong offset!");

// ScriptStruct xrd777.HeroParameterTable
// 0x0010 (0x0010 - 0x0000)
struct FHeroParameterTable final
{
public:
	TArray<int32>                                 Points;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeroParameterTable) == 0x000008, "Wrong alignment on FHeroParameterTable");
static_assert(sizeof(FHeroParameterTable) == 0x000010, "Wrong size on FHeroParameterTable");
static_assert(offsetof(FHeroParameterTable, Points) == 0x000000, "Member 'FHeroParameterTable::Points' has a wrong offset!");

// ScriptStruct xrd777.CommunityEventData
// 0x000C (0x000C - 0x0000)
struct FCommunityEventData final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Major;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityEventData) == 0x000004, "Wrong alignment on FCommunityEventData");
static_assert(sizeof(FCommunityEventData) == 0x00000C, "Wrong size on FCommunityEventData");
static_assert(offsetof(FCommunityEventData, Rank) == 0x000000, "Member 'FCommunityEventData::Rank' has a wrong offset!");
static_assert(offsetof(FCommunityEventData, Major) == 0x000004, "Member 'FCommunityEventData::Major' has a wrong offset!");
static_assert(offsetof(FCommunityEventData, Minor) == 0x000008, "Member 'FCommunityEventData::Minor' has a wrong offset!");

// ScriptStruct xrd777.CommunityEventTable
// 0x0030 (0x0030 - 0x0000)
struct FCommunityEventTable final
{
public:
	TArray<struct FCommunityEventData>            NotRankUpTable;                                    // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCommunityRankUpEventData>      RankUpTable;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCommunityRankUpEventData>      LoverRankUpTable;                                  // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityEventTable) == 0x000008, "Wrong alignment on FCommunityEventTable");
static_assert(sizeof(FCommunityEventTable) == 0x000030, "Wrong size on FCommunityEventTable");
static_assert(offsetof(FCommunityEventTable, NotRankUpTable) == 0x000000, "Member 'FCommunityEventTable::NotRankUpTable' has a wrong offset!");
static_assert(offsetof(FCommunityEventTable, RankUpTable) == 0x000010, "Member 'FCommunityEventTable::RankUpTable' has a wrong offset!");
static_assert(offsetof(FCommunityEventTable, LoverRankUpTable) == 0x000020, "Member 'FCommunityEventTable::LoverRankUpTable' has a wrong offset!");

// ScriptStruct xrd777.CommunityNPCInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FCommunityNPCInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunityNPCInfo) == 0x000008, "Wrong alignment on FCommunityNPCInfo");
static_assert(sizeof(FCommunityNPCInfo) == 0x000028, "Wrong size on FCommunityNPCInfo");

// ScriptStruct xrd777.CommunityHandleSaveData_t
// 0x00C8 (0x00C8 - 0x0000)
struct alignas(0x02) FCommunityHandleSaveData_t final
{
public:
	uint8                                         Pad_0[0xC8];                                       // 0x0000(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunityHandleSaveData_t) == 0x000002, "Wrong alignment on FCommunityHandleSaveData_t");
static_assert(sizeof(FCommunityHandleSaveData_t) == 0x0000C8, "Wrong size on FCommunityHandleSaveData_t");

// ScriptStruct xrd777.CommunitySaveData_t
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x02) FCommunitySaveData_t final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunitySaveData_t) == 0x000002, "Wrong alignment on FCommunitySaveData_t");
static_assert(sizeof(FCommunitySaveData_t) == 0x000008, "Wrong size on FCommunitySaveData_t");

// ScriptStruct xrd777.DatPlayerNameOne
// 0x0020 (0x0020 - 0x0000)
struct FDatPlayerNameOne final
{
public:
	int32                                         MPlayerID;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   MName;                                             // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatPlayerNameOne) == 0x000008, "Wrong alignment on FDatPlayerNameOne");
static_assert(sizeof(FDatPlayerNameOne) == 0x000020, "Wrong size on FDatPlayerNameOne");
static_assert(offsetof(FDatPlayerNameOne, MPlayerID) == 0x000000, "Member 'FDatPlayerNameOne::MPlayerID' has a wrong offset!");
static_assert(offsetof(FDatPlayerNameOne, MName) == 0x000008, "Member 'FDatPlayerNameOne::MName' has a wrong offset!");

// ScriptStruct xrd777.DatName2Table
// 0x0048 (0x0050 - 0x0008)
struct FDatName2Table final : public FTableRowBase
{
public:
	class FText                                   Name1;                                             // 0x0008(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Name2;                                             // 0x0020(0x0018)(Edit, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0038(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatName2Table) == 0x000008, "Wrong alignment on FDatName2Table");
static_assert(sizeof(FDatName2Table) == 0x000050, "Wrong size on FDatName2Table");
static_assert(offsetof(FDatName2Table, Name1) == 0x000008, "Member 'FDatName2Table::Name1' has a wrong offset!");
static_assert(offsetof(FDatName2Table, Name2) == 0x000020, "Member 'FDatName2Table::Name2' has a wrong offset!");
static_assert(offsetof(FDatName2Table, Comment) == 0x000038, "Member 'FDatName2Table::Comment' has a wrong offset!");

// ScriptStruct xrd777.DatDefineTable
// 0x0020 (0x0028 - 0x0008)
struct FDatDefineTable final : public FTableRowBase
{
public:
	uint32                                        Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Comment;                                           // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatDefineTable) == 0x000008, "Wrong alignment on FDatDefineTable");
static_assert(sizeof(FDatDefineTable) == 0x000028, "Wrong size on FDatDefineTable");
static_assert(offsetof(FDatDefineTable, Value) == 0x000008, "Member 'FDatDefineTable::Value' has a wrong offset!");
static_assert(offsetof(FDatDefineTable, Comment) == 0x000010, "Member 'FDatDefineTable::Comment' has a wrong offset!");

// ScriptStruct xrd777.DictionarySortTableRow
// 0x0038 (0x0040 - 0x0008)
struct FDictionarySortTableRow final : public FTableRowBase
{
public:
	int32                                         SortID;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TextureNames;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   OpenFlagName;                                      // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0028(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDictionarySortTableRow) == 0x000008, "Wrong alignment on FDictionarySortTableRow");
static_assert(sizeof(FDictionarySortTableRow) == 0x000040, "Wrong size on FDictionarySortTableRow");
static_assert(offsetof(FDictionarySortTableRow, SortID) == 0x000008, "Member 'FDictionarySortTableRow::SortID' has a wrong offset!");
static_assert(offsetof(FDictionarySortTableRow, TextureNames) == 0x000010, "Member 'FDictionarySortTableRow::TextureNames' has a wrong offset!");
static_assert(offsetof(FDictionarySortTableRow, OpenFlagName) == 0x000020, "Member 'FDictionarySortTableRow::OpenFlagName' has a wrong offset!");
static_assert(offsetof(FDictionarySortTableRow, Comment) == 0x000028, "Member 'FDictionarySortTableRow::Comment' has a wrong offset!");

// ScriptStruct xrd777.DatDlcDungeonBgmTableData
// 0x0020 (0x0028 - 0x0008)
struct FDatDlcDungeonBgmTableData final : public FTableRowBase
{
public:
	uint32                                        BandleID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SerialNumber;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Title;                                             // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CueId;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ControlNumber;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Sort;                                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatDlcDungeonBgmTableData) == 0x000008, "Wrong alignment on FDatDlcDungeonBgmTableData");
static_assert(sizeof(FDatDlcDungeonBgmTableData) == 0x000028, "Wrong size on FDatDlcDungeonBgmTableData");
static_assert(offsetof(FDatDlcDungeonBgmTableData, BandleID) == 0x000008, "Member 'FDatDlcDungeonBgmTableData::BandleID' has a wrong offset!");
static_assert(offsetof(FDatDlcDungeonBgmTableData, SerialNumber) == 0x00000C, "Member 'FDatDlcDungeonBgmTableData::SerialNumber' has a wrong offset!");
static_assert(offsetof(FDatDlcDungeonBgmTableData, Title) == 0x000010, "Member 'FDatDlcDungeonBgmTableData::Title' has a wrong offset!");
static_assert(offsetof(FDatDlcDungeonBgmTableData, CueId) == 0x000018, "Member 'FDatDlcDungeonBgmTableData::CueId' has a wrong offset!");
static_assert(offsetof(FDatDlcDungeonBgmTableData, ControlNumber) == 0x00001C, "Member 'FDatDlcDungeonBgmTableData::ControlNumber' has a wrong offset!");
static_assert(offsetof(FDatDlcDungeonBgmTableData, Sort) == 0x000020, "Member 'FDatDlcDungeonBgmTableData::Sort' has a wrong offset!");

// ScriptStruct xrd777.DatPersonaCombineAdjustDataTable
// 0x0028 (0x0030 - 0x0008)
struct FDatPersonaCombineAdjustDataTable final : public FTableRowBase
{
public:
	uint32                                        PersonaID;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransX;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransY;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransZ;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationX;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationY;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationZ;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleZ;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatPersonaCombineAdjustDataTable) == 0x000008, "Wrong alignment on FDatPersonaCombineAdjustDataTable");
static_assert(sizeof(FDatPersonaCombineAdjustDataTable) == 0x000030, "Wrong size on FDatPersonaCombineAdjustDataTable");
static_assert(offsetof(FDatPersonaCombineAdjustDataTable, PersonaID) == 0x000008, "Member 'FDatPersonaCombineAdjustDataTable::PersonaID' has a wrong offset!");
static_assert(offsetof(FDatPersonaCombineAdjustDataTable, TransX) == 0x00000C, "Member 'FDatPersonaCombineAdjustDataTable::TransX' has a wrong offset!");
static_assert(offsetof(FDatPersonaCombineAdjustDataTable, TransY) == 0x000010, "Member 'FDatPersonaCombineAdjustDataTable::TransY' has a wrong offset!");
static_assert(offsetof(FDatPersonaCombineAdjustDataTable, TransZ) == 0x000014, "Member 'FDatPersonaCombineAdjustDataTable::TransZ' has a wrong offset!");
static_assert(offsetof(FDatPersonaCombineAdjustDataTable, RotationX) == 0x000018, "Member 'FDatPersonaCombineAdjustDataTable::RotationX' has a wrong offset!");
static_assert(offsetof(FDatPersonaCombineAdjustDataTable, RotationY) == 0x00001C, "Member 'FDatPersonaCombineAdjustDataTable::RotationY' has a wrong offset!");
static_assert(offsetof(FDatPersonaCombineAdjustDataTable, RotationZ) == 0x000020, "Member 'FDatPersonaCombineAdjustDataTable::RotationZ' has a wrong offset!");
static_assert(offsetof(FDatPersonaCombineAdjustDataTable, ScaleX) == 0x000024, "Member 'FDatPersonaCombineAdjustDataTable::ScaleX' has a wrong offset!");
static_assert(offsetof(FDatPersonaCombineAdjustDataTable, ScaleY) == 0x000028, "Member 'FDatPersonaCombineAdjustDataTable::ScaleY' has a wrong offset!");
static_assert(offsetof(FDatPersonaCombineAdjustDataTable, ScaleZ) == 0x00002C, "Member 'FDatPersonaCombineAdjustDataTable::ScaleZ' has a wrong offset!");

// ScriptStruct xrd777.DatAssetOverWriteEventDataTable
// 0x0018 (0x0020 - 0x0008)
struct FDatAssetOverWriteEventDataTable final : public FTableRowBase
{
public:
	class FName                                   Category;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Major;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Minor;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ProcNo;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDatAssetOverWriteEventDataTable) == 0x000008, "Wrong alignment on FDatAssetOverWriteEventDataTable");
static_assert(sizeof(FDatAssetOverWriteEventDataTable) == 0x000020, "Wrong size on FDatAssetOverWriteEventDataTable");
static_assert(offsetof(FDatAssetOverWriteEventDataTable, Category) == 0x000008, "Member 'FDatAssetOverWriteEventDataTable::Category' has a wrong offset!");
static_assert(offsetof(FDatAssetOverWriteEventDataTable, Major) == 0x000010, "Member 'FDatAssetOverWriteEventDataTable::Major' has a wrong offset!");
static_assert(offsetof(FDatAssetOverWriteEventDataTable, Minor) == 0x000014, "Member 'FDatAssetOverWriteEventDataTable::Minor' has a wrong offset!");
static_assert(offsetof(FDatAssetOverWriteEventDataTable, ProcNo) == 0x000018, "Member 'FDatAssetOverWriteEventDataTable::ProcNo' has a wrong offset!");

// ScriptStruct xrd777.CurveVectorAnimation
// 0x0008 (0x0030 - 0x0028)
struct FCurveVectorAnimation final : public FBaseCurveAnimation
{
public:
	class UCurveVector*                           M_pCurveVector;                                    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FCurveVectorAnimation) == 0x000008, "Wrong alignment on FCurveVectorAnimation");
static_assert(sizeof(FCurveVectorAnimation) == 0x000030, "Wrong size on FCurveVectorAnimation");
static_assert(offsetof(FCurveVectorAnimation, M_pCurveVector) == 0x000028, "Member 'FCurveVectorAnimation::M_pCurveVector' has a wrong offset!");

// ScriptStruct xrd777.PgBtlResultWipe
// 0x00D0 (0x00D0 - 0x0000)
struct FPgBtlResultWipe final
{
public:
	struct FCurveVectorAnimation                  M_curveFadeOutBlack;                               // 0x0000(0x0030)(NativeAccessSpecifierPublic)
	struct FCurveVectorAnimation                  M_curveFadeOutBlue;                                // 0x0030(0x0030)(NativeAccessSpecifierPublic)
	struct FCurveVectorAnimation                  M_curveFadeInBlack;                                // 0x0060(0x0030)(NativeAccessSpecifierPublic)
	TArray<class UBtlGuiDrawObjectPrimitive*>     ObjList;                                           // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UBattleResultWatcher*                   M_Watcher;                                         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              CenterOffset;                                      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Offset1;                                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Offset2;                                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Offset3;                                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bLoading;                                        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bLoaded;                                         // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          M_bMainLoaded;                                     // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB[0x5];                                       // 0x00CB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPgBtlResultWipe) == 0x000008, "Wrong alignment on FPgBtlResultWipe");
static_assert(sizeof(FPgBtlResultWipe) == 0x0000D0, "Wrong size on FPgBtlResultWipe");
static_assert(offsetof(FPgBtlResultWipe, M_curveFadeOutBlack) == 0x000000, "Member 'FPgBtlResultWipe::M_curveFadeOutBlack' has a wrong offset!");
static_assert(offsetof(FPgBtlResultWipe, M_curveFadeOutBlue) == 0x000030, "Member 'FPgBtlResultWipe::M_curveFadeOutBlue' has a wrong offset!");
static_assert(offsetof(FPgBtlResultWipe, M_curveFadeInBlack) == 0x000060, "Member 'FPgBtlResultWipe::M_curveFadeInBlack' has a wrong offset!");
static_assert(offsetof(FPgBtlResultWipe, ObjList) == 0x000090, "Member 'FPgBtlResultWipe::ObjList' has a wrong offset!");
static_assert(offsetof(FPgBtlResultWipe, M_Watcher) == 0x0000A0, "Member 'FPgBtlResultWipe::M_Watcher' has a wrong offset!");
static_assert(offsetof(FPgBtlResultWipe, CenterOffset) == 0x0000A8, "Member 'FPgBtlResultWipe::CenterOffset' has a wrong offset!");
static_assert(offsetof(FPgBtlResultWipe, Offset1) == 0x0000B0, "Member 'FPgBtlResultWipe::Offset1' has a wrong offset!");
static_assert(offsetof(FPgBtlResultWipe, Offset2) == 0x0000B8, "Member 'FPgBtlResultWipe::Offset2' has a wrong offset!");
static_assert(offsetof(FPgBtlResultWipe, Offset3) == 0x0000C0, "Member 'FPgBtlResultWipe::Offset3' has a wrong offset!");
static_assert(offsetof(FPgBtlResultWipe, M_bLoading) == 0x0000C8, "Member 'FPgBtlResultWipe::M_bLoading' has a wrong offset!");
static_assert(offsetof(FPgBtlResultWipe, M_bLoaded) == 0x0000C9, "Member 'FPgBtlResultWipe::M_bLoaded' has a wrong offset!");
static_assert(offsetof(FPgBtlResultWipe, M_bMainLoaded) == 0x0000CA, "Member 'FPgBtlResultWipe::M_bMainLoaded' has a wrong offset!");

// ScriptStruct xrd777.VelvetWipe
// 0x2418 (0x2418 - 0x0000)
struct FVelvetWipe final
{
public:
	class UAssetLoader*                           M_pLoader;                                         // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USprAsset*                              M_pSpr;                                            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGetUIParameter                        M_uip;                                             // 0x0010(0x0078)(NativeAccessSpecifierPublic)
	class UDataTable*                             M_pVelvetWipeDT;                                   // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveVectorAnimation                  M_curveOpenAnim;                                   // 0x0090(0x0030)(NativeAccessSpecifierPublic)
	struct FCurveVectorAnimation                  M_curveFadeInAnim;                                 // 0x00C0(0x0030)(NativeAccessSpecifierPublic)
	struct FCurveVectorAnimation                  M_curveSpeedAnim;                                  // 0x00F0(0x0030)(NativeAccessSpecifierPublic)
	struct FCurveVectorAnimation                  M_curveCenterDoorSpeedAnim;                        // 0x0120(0x0030)(NativeAccessSpecifierPublic)
	class UTexture*                               M_pCaptureTex;                                     // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x22C0];                                   // 0x0158(0x22C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVelvetWipe) == 0x000008, "Wrong alignment on FVelvetWipe");
static_assert(sizeof(FVelvetWipe) == 0x002418, "Wrong size on FVelvetWipe");
static_assert(offsetof(FVelvetWipe, M_pLoader) == 0x000000, "Member 'FVelvetWipe::M_pLoader' has a wrong offset!");
static_assert(offsetof(FVelvetWipe, M_pSpr) == 0x000008, "Member 'FVelvetWipe::M_pSpr' has a wrong offset!");
static_assert(offsetof(FVelvetWipe, M_uip) == 0x000010, "Member 'FVelvetWipe::M_uip' has a wrong offset!");
static_assert(offsetof(FVelvetWipe, M_pVelvetWipeDT) == 0x000088, "Member 'FVelvetWipe::M_pVelvetWipeDT' has a wrong offset!");
static_assert(offsetof(FVelvetWipe, M_curveOpenAnim) == 0x000090, "Member 'FVelvetWipe::M_curveOpenAnim' has a wrong offset!");
static_assert(offsetof(FVelvetWipe, M_curveFadeInAnim) == 0x0000C0, "Member 'FVelvetWipe::M_curveFadeInAnim' has a wrong offset!");
static_assert(offsetof(FVelvetWipe, M_curveSpeedAnim) == 0x0000F0, "Member 'FVelvetWipe::M_curveSpeedAnim' has a wrong offset!");
static_assert(offsetof(FVelvetWipe, M_curveCenterDoorSpeedAnim) == 0x000120, "Member 'FVelvetWipe::M_curveCenterDoorSpeedAnim' has a wrong offset!");
static_assert(offsetof(FVelvetWipe, M_pCaptureTex) == 0x000150, "Member 'FVelvetWipe::M_pCaptureTex' has a wrong offset!");

// ScriptStruct xrd777.VelvetWipeTableRow
// 0x0298 (0x02A0 - 0x0008)
struct FVelvetWipeTableRow final : public FTableRowBase
{
public:
	struct FVector                                StartRectPos;                                      // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectV1;                                       // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectV2;                                       // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectV3;                                       // 0x002C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectV4;                                       // 0x0038(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectPos;                                        // 0x0044(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectV1;                                         // 0x0050(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectV2;                                         // 0x005C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectV3;                                         // 0x0068(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectV4;                                         // 0x0074(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectPosEv;                                    // 0x0080(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectV1Ev;                                     // 0x008C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectV2Ev;                                     // 0x0098(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectV3Ev;                                     // 0x00A4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectV4Ev;                                     // 0x00B0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectPosEv;                                      // 0x00BC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectV1Ev;                                       // 0x00C8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectV2Ev;                                       // 0x00D4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectV3Ev;                                       // 0x00E0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectV4Ev;                                       // 0x00EC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectPos_Out;                                  // 0x00F8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectV1_Out;                                   // 0x0104(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectV2_Out;                                   // 0x0110(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectV3_Out;                                   // 0x011C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartRectV4_Out;                                   // 0x0128(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectPos_Out;                                    // 0x0134(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectV1_Out;                                     // 0x0140(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectV2_Out;                                     // 0x014C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectV3_Out;                                     // 0x0158(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndRectV4_Out;                                     // 0x0164(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorLeftStartV1;                               // 0x0170(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorLeftStartV2;                               // 0x017C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorLeftStartV3;                               // 0x0188(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorLeftStartV4;                               // 0x0194(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorLeftShadowStartV3;                         // 0x01A0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorLeftShadowStartV4;                         // 0x01AC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorRightStartV1;                              // 0x01B8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorRightStartV2;                              // 0x01C4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorRightStartV3;                              // 0x01D0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorRightStartV4;                              // 0x01DC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorRightShadowStartV3;                        // 0x01E8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorRightShadowStartV4;                        // 0x01F4(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorLeftEndV1;                                 // 0x0200(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorLeftEndV2;                                 // 0x020C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorLeftEndV3;                                 // 0x0218(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorLeftEndV4;                                 // 0x0224(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorLeftShadowEndV3;                           // 0x0230(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorLeftShadowEndV4;                           // 0x023C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorRightEndV1;                                // 0x0248(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorRightEndV2;                                // 0x0254(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorRightEndV3;                                // 0x0260(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorRightEndV4;                                // 0x026C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorRightShadowEndV3;                          // 0x0278(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SideDoorRightShadowEndV4;                          // 0x0284(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartRectFadeFrame;                                // 0x0290(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartRectFadeFrame_Out;                            // 0x0294(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlontLightAdjustY;                                 // 0x0298(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVelvetWipeTableRow) == 0x000008, "Wrong alignment on FVelvetWipeTableRow");
static_assert(sizeof(FVelvetWipeTableRow) == 0x0002A0, "Wrong size on FVelvetWipeTableRow");
static_assert(offsetof(FVelvetWipeTableRow, StartRectPos) == 0x000008, "Member 'FVelvetWipeTableRow::StartRectPos' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectV1) == 0x000014, "Member 'FVelvetWipeTableRow::StartRectV1' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectV2) == 0x000020, "Member 'FVelvetWipeTableRow::StartRectV2' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectV3) == 0x00002C, "Member 'FVelvetWipeTableRow::StartRectV3' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectV4) == 0x000038, "Member 'FVelvetWipeTableRow::StartRectV4' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectPos) == 0x000044, "Member 'FVelvetWipeTableRow::EndRectPos' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectV1) == 0x000050, "Member 'FVelvetWipeTableRow::EndRectV1' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectV2) == 0x00005C, "Member 'FVelvetWipeTableRow::EndRectV2' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectV3) == 0x000068, "Member 'FVelvetWipeTableRow::EndRectV3' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectV4) == 0x000074, "Member 'FVelvetWipeTableRow::EndRectV4' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectPosEv) == 0x000080, "Member 'FVelvetWipeTableRow::StartRectPosEv' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectV1Ev) == 0x00008C, "Member 'FVelvetWipeTableRow::StartRectV1Ev' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectV2Ev) == 0x000098, "Member 'FVelvetWipeTableRow::StartRectV2Ev' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectV3Ev) == 0x0000A4, "Member 'FVelvetWipeTableRow::StartRectV3Ev' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectV4Ev) == 0x0000B0, "Member 'FVelvetWipeTableRow::StartRectV4Ev' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectPosEv) == 0x0000BC, "Member 'FVelvetWipeTableRow::EndRectPosEv' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectV1Ev) == 0x0000C8, "Member 'FVelvetWipeTableRow::EndRectV1Ev' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectV2Ev) == 0x0000D4, "Member 'FVelvetWipeTableRow::EndRectV2Ev' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectV3Ev) == 0x0000E0, "Member 'FVelvetWipeTableRow::EndRectV3Ev' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectV4Ev) == 0x0000EC, "Member 'FVelvetWipeTableRow::EndRectV4Ev' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectPos_Out) == 0x0000F8, "Member 'FVelvetWipeTableRow::StartRectPos_Out' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectV1_Out) == 0x000104, "Member 'FVelvetWipeTableRow::StartRectV1_Out' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectV2_Out) == 0x000110, "Member 'FVelvetWipeTableRow::StartRectV2_Out' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectV3_Out) == 0x00011C, "Member 'FVelvetWipeTableRow::StartRectV3_Out' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectV4_Out) == 0x000128, "Member 'FVelvetWipeTableRow::StartRectV4_Out' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectPos_Out) == 0x000134, "Member 'FVelvetWipeTableRow::EndRectPos_Out' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectV1_Out) == 0x000140, "Member 'FVelvetWipeTableRow::EndRectV1_Out' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectV2_Out) == 0x00014C, "Member 'FVelvetWipeTableRow::EndRectV2_Out' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectV3_Out) == 0x000158, "Member 'FVelvetWipeTableRow::EndRectV3_Out' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, EndRectV4_Out) == 0x000164, "Member 'FVelvetWipeTableRow::EndRectV4_Out' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorLeftStartV1) == 0x000170, "Member 'FVelvetWipeTableRow::SideDoorLeftStartV1' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorLeftStartV2) == 0x00017C, "Member 'FVelvetWipeTableRow::SideDoorLeftStartV2' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorLeftStartV3) == 0x000188, "Member 'FVelvetWipeTableRow::SideDoorLeftStartV3' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorLeftStartV4) == 0x000194, "Member 'FVelvetWipeTableRow::SideDoorLeftStartV4' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorLeftShadowStartV3) == 0x0001A0, "Member 'FVelvetWipeTableRow::SideDoorLeftShadowStartV3' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorLeftShadowStartV4) == 0x0001AC, "Member 'FVelvetWipeTableRow::SideDoorLeftShadowStartV4' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorRightStartV1) == 0x0001B8, "Member 'FVelvetWipeTableRow::SideDoorRightStartV1' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorRightStartV2) == 0x0001C4, "Member 'FVelvetWipeTableRow::SideDoorRightStartV2' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorRightStartV3) == 0x0001D0, "Member 'FVelvetWipeTableRow::SideDoorRightStartV3' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorRightStartV4) == 0x0001DC, "Member 'FVelvetWipeTableRow::SideDoorRightStartV4' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorRightShadowStartV3) == 0x0001E8, "Member 'FVelvetWipeTableRow::SideDoorRightShadowStartV3' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorRightShadowStartV4) == 0x0001F4, "Member 'FVelvetWipeTableRow::SideDoorRightShadowStartV4' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorLeftEndV1) == 0x000200, "Member 'FVelvetWipeTableRow::SideDoorLeftEndV1' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorLeftEndV2) == 0x00020C, "Member 'FVelvetWipeTableRow::SideDoorLeftEndV2' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorLeftEndV3) == 0x000218, "Member 'FVelvetWipeTableRow::SideDoorLeftEndV3' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorLeftEndV4) == 0x000224, "Member 'FVelvetWipeTableRow::SideDoorLeftEndV4' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorLeftShadowEndV3) == 0x000230, "Member 'FVelvetWipeTableRow::SideDoorLeftShadowEndV3' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorLeftShadowEndV4) == 0x00023C, "Member 'FVelvetWipeTableRow::SideDoorLeftShadowEndV4' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorRightEndV1) == 0x000248, "Member 'FVelvetWipeTableRow::SideDoorRightEndV1' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorRightEndV2) == 0x000254, "Member 'FVelvetWipeTableRow::SideDoorRightEndV2' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorRightEndV3) == 0x000260, "Member 'FVelvetWipeTableRow::SideDoorRightEndV3' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorRightEndV4) == 0x00026C, "Member 'FVelvetWipeTableRow::SideDoorRightEndV4' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorRightShadowEndV3) == 0x000278, "Member 'FVelvetWipeTableRow::SideDoorRightShadowEndV3' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, SideDoorRightShadowEndV4) == 0x000284, "Member 'FVelvetWipeTableRow::SideDoorRightShadowEndV4' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectFadeFrame) == 0x000290, "Member 'FVelvetWipeTableRow::StartRectFadeFrame' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, StartRectFadeFrame_Out) == 0x000294, "Member 'FVelvetWipeTableRow::StartRectFadeFrame_Out' has a wrong offset!");
static_assert(offsetof(FVelvetWipeTableRow, FlontLightAdjustY) == 0x000298, "Member 'FVelvetWipeTableRow::FlontLightAdjustY' has a wrong offset!");

// ScriptStruct xrd777.FadeProperties
// 0x0010 (0x0010 - 0x0000)
struct FFadeProperties final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RenderTargetOt;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CaptureTargetOt;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCapture;                                        // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFadeProperties) == 0x000004, "Wrong alignment on FFadeProperties");
static_assert(sizeof(FFadeProperties) == 0x000010, "Wrong size on FFadeProperties");
static_assert(offsetof(FFadeProperties, Frame) == 0x000000, "Member 'FFadeProperties::Frame' has a wrong offset!");
static_assert(offsetof(FFadeProperties, RenderTargetOt) == 0x000004, "Member 'FFadeProperties::RenderTargetOt' has a wrong offset!");
static_assert(offsetof(FFadeProperties, CaptureTargetOt) == 0x000008, "Member 'FFadeProperties::CaptureTargetOt' has a wrong offset!");
static_assert(offsetof(FFadeProperties, UseCapture) == 0x00000C, "Member 'FFadeProperties::UseCapture' has a wrong offset!");

// ScriptStruct xrd777.FileNameList
// 0x0028 (0x0030 - 0x0008)
struct FFileNameList final : public FTableRowBase
{
public:
	class FString                                 Path;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Chunk;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFileNameList) == 0x000008, "Wrong alignment on FFileNameList");
static_assert(sizeof(FFileNameList) == 0x000030, "Wrong size on FFileNameList");
static_assert(offsetof(FFileNameList, Path) == 0x000008, "Member 'FFileNameList::Path' has a wrong offset!");
static_assert(offsetof(FFileNameList, Name) == 0x000018, "Member 'FFileNameList::Name' has a wrong offset!");
static_assert(offsetof(FFileNameList, Chunk) == 0x000028, "Member 'FFileNameList::Chunk' has a wrong offset!");

// ScriptStruct xrd777.FldIconDispData
// 0x0020 (0x0020 - 0x0000)
struct FFldIconDispData final
{
public:
	bool                                          MSet;                                              // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AFldHitCharacter*                       MCharaActor;                                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFldHitActor*                           MHitActor;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MTimer;                                            // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MEndTime;                                          // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldIconDispData) == 0x000008, "Wrong alignment on FFldIconDispData");
static_assert(sizeof(FFldIconDispData) == 0x000020, "Wrong size on FFldIconDispData");
static_assert(offsetof(FFldIconDispData, MSet) == 0x000000, "Member 'FFldIconDispData::MSet' has a wrong offset!");
static_assert(offsetof(FFldIconDispData, MCharaActor) == 0x000008, "Member 'FFldIconDispData::MCharaActor' has a wrong offset!");
static_assert(offsetof(FFldIconDispData, MHitActor) == 0x000010, "Member 'FFldIconDispData::MHitActor' has a wrong offset!");
static_assert(offsetof(FFldIconDispData, MTimer) == 0x000018, "Member 'FFldIconDispData::MTimer' has a wrong offset!");
static_assert(offsetof(FFldIconDispData, MEndTime) == 0x00001C, "Member 'FFldIconDispData::MEndTime' has a wrong offset!");

// ScriptStruct xrd777.FldAnimalParam
// 0x0014 (0x0014 - 0x0000)
struct FFldAnimalParam final
{
public:
	float                                         MWalkSpeed;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MRunSpeed;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MRotSpeed;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MIdleTimeFix;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MIdleTimeRnd;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldAnimalParam) == 0x000004, "Wrong alignment on FFldAnimalParam");
static_assert(sizeof(FFldAnimalParam) == 0x000014, "Wrong size on FFldAnimalParam");
static_assert(offsetof(FFldAnimalParam, MWalkSpeed) == 0x000000, "Member 'FFldAnimalParam::MWalkSpeed' has a wrong offset!");
static_assert(offsetof(FFldAnimalParam, MRunSpeed) == 0x000004, "Member 'FFldAnimalParam::MRunSpeed' has a wrong offset!");
static_assert(offsetof(FFldAnimalParam, MRotSpeed) == 0x000008, "Member 'FFldAnimalParam::MRotSpeed' has a wrong offset!");
static_assert(offsetof(FFldAnimalParam, MIdleTimeFix) == 0x00000C, "Member 'FFldAnimalParam::MIdleTimeFix' has a wrong offset!");
static_assert(offsetof(FFldAnimalParam, MIdleTimeRnd) == 0x000010, "Member 'FFldAnimalParam::MIdleTimeRnd' has a wrong offset!");

// ScriptStruct xrd777.FldBgmTableRow
// 0x0030 (0x0038 - 0x0008)
struct FFldBgmTableRow final : public FTableRowBase
{
public:
	int32                                         BgmId;                                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GayaVoiceAssetID;                                  // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GayaVoiceCueID;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMajor;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinor;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartMonth;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartDay;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndMonth;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndDay;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flag;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldBgmTableRow) == 0x000008, "Wrong alignment on FFldBgmTableRow");
static_assert(sizeof(FFldBgmTableRow) == 0x000038, "Wrong size on FFldBgmTableRow");
static_assert(offsetof(FFldBgmTableRow, BgmId) == 0x000008, "Member 'FFldBgmTableRow::BgmId' has a wrong offset!");
static_assert(offsetof(FFldBgmTableRow, GayaVoiceAssetID) == 0x00000C, "Member 'FFldBgmTableRow::GayaVoiceAssetID' has a wrong offset!");
static_assert(offsetof(FFldBgmTableRow, GayaVoiceCueID) == 0x000010, "Member 'FFldBgmTableRow::GayaVoiceCueID' has a wrong offset!");
static_assert(offsetof(FFldBgmTableRow, FieldMajor) == 0x000014, "Member 'FFldBgmTableRow::FieldMajor' has a wrong offset!");
static_assert(offsetof(FFldBgmTableRow, FieldMinor) == 0x000018, "Member 'FFldBgmTableRow::FieldMinor' has a wrong offset!");
static_assert(offsetof(FFldBgmTableRow, StartMonth) == 0x00001C, "Member 'FFldBgmTableRow::StartMonth' has a wrong offset!");
static_assert(offsetof(FFldBgmTableRow, StartDay) == 0x000020, "Member 'FFldBgmTableRow::StartDay' has a wrong offset!");
static_assert(offsetof(FFldBgmTableRow, EndMonth) == 0x000024, "Member 'FFldBgmTableRow::EndMonth' has a wrong offset!");
static_assert(offsetof(FFldBgmTableRow, EndDay) == 0x000028, "Member 'FFldBgmTableRow::EndDay' has a wrong offset!");
static_assert(offsetof(FFldBgmTableRow, Time) == 0x00002C, "Member 'FFldBgmTableRow::Time' has a wrong offset!");
static_assert(offsetof(FFldBgmTableRow, Flag) == 0x000030, "Member 'FFldBgmTableRow::Flag' has a wrong offset!");

// ScriptStruct xrd777.ldCameraLockAtParam
// 0x000C (0x000C - 0x0000)
struct FLdCameraLockAtParam final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinLimitAngle;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLimitAngle;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLdCameraLockAtParam) == 0x000004, "Wrong alignment on FLdCameraLockAtParam");
static_assert(sizeof(FLdCameraLockAtParam) == 0x00000C, "Wrong size on FLdCameraLockAtParam");
static_assert(offsetof(FLdCameraLockAtParam, bEnable) == 0x000000, "Member 'FLdCameraLockAtParam::bEnable' has a wrong offset!");
static_assert(offsetof(FLdCameraLockAtParam, MinLimitAngle) == 0x000004, "Member 'FLdCameraLockAtParam::MinLimitAngle' has a wrong offset!");
static_assert(offsetof(FLdCameraLockAtParam, MaxLimitAngle) == 0x000008, "Member 'FLdCameraLockAtParam::MaxLimitAngle' has a wrong offset!");

// ScriptStruct xrd777.ldCameraSlopeParam
// 0x0008 (0x0024 - 0x001C)
struct FLdCameraSlopeParam final : public FLdCameraRotParam
{
public:
	float                                         Margin;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Pitch;                                             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLdCameraSlopeParam) == 0x000004, "Wrong alignment on FLdCameraSlopeParam");
static_assert(sizeof(FLdCameraSlopeParam) == 0x000024, "Wrong size on FLdCameraSlopeParam");
static_assert(offsetof(FLdCameraSlopeParam, Margin) == 0x00001C, "Member 'FLdCameraSlopeParam::Margin' has a wrong offset!");
static_assert(offsetof(FLdCameraSlopeParam, Pitch) == 0x000020, "Member 'FLdCameraSlopeParam::Pitch' has a wrong offset!");

// ScriptStruct xrd777.ldCameraParam
// 0x001C (0x001C - 0x0000)
struct alignas(0x04) FLdCameraParam final
{
public:
	uint8                                         Pad_0[0x1C];                                       // 0x0000(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLdCameraParam) == 0x000004, "Wrong alignment on FLdCameraParam");
static_assert(sizeof(FLdCameraParam) == 0x00001C, "Wrong size on FLdCameraParam");

// ScriptStruct xrd777.FldPartnerData
// 0x0010 (0x0010 - 0x0000)
struct FFldPartnerData final
{
public:
	float                                         TrackingBeginDistance;                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingNearDistance;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingUpdateDistance;                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AvoidPlayerDistance;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPartnerData) == 0x000004, "Wrong alignment on FFldPartnerData");
static_assert(sizeof(FFldPartnerData) == 0x000010, "Wrong size on FFldPartnerData");
static_assert(offsetof(FFldPartnerData, TrackingBeginDistance) == 0x000000, "Member 'FFldPartnerData::TrackingBeginDistance' has a wrong offset!");
static_assert(offsetof(FFldPartnerData, TrackingNearDistance) == 0x000004, "Member 'FFldPartnerData::TrackingNearDistance' has a wrong offset!");
static_assert(offsetof(FFldPartnerData, TrackingUpdateDistance) == 0x000008, "Member 'FFldPartnerData::TrackingUpdateDistance' has a wrong offset!");
static_assert(offsetof(FFldPartnerData, AvoidPlayerDistance) == 0x00000C, "Member 'FFldPartnerData::AvoidPlayerDistance' has a wrong offset!");

// ScriptStruct xrd777.FldCharEffectParam
// 0x0040 (0x0040 - 0x0000)
struct FFldCharEffectParam final
{
public:
	class UNiagaraSystem*                         Asset;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldCharEffectParam) == 0x000010, "Wrong alignment on FFldCharEffectParam");
static_assert(sizeof(FFldCharEffectParam) == 0x000040, "Wrong size on FFldCharEffectParam");
static_assert(offsetof(FFldCharEffectParam, Asset) == 0x000000, "Member 'FFldCharEffectParam::Asset' has a wrong offset!");
static_assert(offsetof(FFldCharEffectParam, SocketName) == 0x000008, "Member 'FFldCharEffectParam::SocketName' has a wrong offset!");
static_assert(offsetof(FFldCharEffectParam, Transform) == 0x000010, "Member 'FFldCharEffectParam::Transform' has a wrong offset!");

// ScriptStruct xrd777.FldPlayerHolder
// 0x0018 (0x0018 - 0x0000)
struct FFldPlayerHolder final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFldPlayerComp*                         PlayerComp;                                        // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UFldPlayerDungeonComp*                  DungeonComp;                                       // 0x0010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FFldPlayerHolder) == 0x000008, "Wrong alignment on FFldPlayerHolder");
static_assert(sizeof(FFldPlayerHolder) == 0x000018, "Wrong size on FFldPlayerHolder");
static_assert(offsetof(FFldPlayerHolder, Pawn) == 0x000000, "Member 'FFldPlayerHolder::Pawn' has a wrong offset!");
static_assert(offsetof(FFldPlayerHolder, PlayerComp) == 0x000008, "Member 'FFldPlayerHolder::PlayerComp' has a wrong offset!");
static_assert(offsetof(FFldPlayerHolder, DungeonComp) == 0x000010, "Member 'FFldPlayerHolder::DungeonComp' has a wrong offset!");

// ScriptStruct xrd777.FldEnemyHolder
// 0x0010 (0x0010 - 0x0000)
struct FFldEnemyHolder final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFldEnemyComp*                          EnemyComp;                                         // 0x0008(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FFldEnemyHolder) == 0x000008, "Wrong alignment on FFldEnemyHolder");
static_assert(sizeof(FFldEnemyHolder) == 0x000010, "Wrong size on FFldEnemyHolder");
static_assert(offsetof(FFldEnemyHolder, Actor) == 0x000000, "Member 'FFldEnemyHolder::Actor' has a wrong offset!");
static_assert(offsetof(FFldEnemyHolder, EnemyComp) == 0x000008, "Member 'FFldEnemyHolder::EnemyComp' has a wrong offset!");

// ScriptStruct xrd777.FldCmmNpcLayoutTableRow
// 0x0098 (0x00A0 - 0x0008)
struct FFldCmmNpcLayoutTableRow final : public FTableRowBase
{
public:
	int32                                         FieldMajor;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinor;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldParts;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeType;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyfreeEventID;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UniqueId;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ArcanaID;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldCmmNpcType                                Type;                                              // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldHitCharaIconType                          IconType;                                          // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFldHitCharaIconParam>          ChangeIcons;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NameIndex;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OnFlagName;                                        // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OffFlagName;                                       // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CharaTrans;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTransform                             IconTran;                                          // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          NotMapInfo;                                        // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0xF];                                       // 0x0091(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldCmmNpcLayoutTableRow) == 0x000010, "Wrong alignment on FFldCmmNpcLayoutTableRow");
static_assert(sizeof(FFldCmmNpcLayoutTableRow) == 0x0000A0, "Wrong size on FFldCmmNpcLayoutTableRow");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, FieldMajor) == 0x000008, "Member 'FFldCmmNpcLayoutTableRow::FieldMajor' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, FieldMinor) == 0x00000C, "Member 'FFldCmmNpcLayoutTableRow::FieldMinor' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, FieldParts) == 0x000010, "Member 'FFldCmmNpcLayoutTableRow::FieldParts' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, TimeType) == 0x000014, "Member 'FFldCmmNpcLayoutTableRow::TimeType' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, KeyfreeEventID) == 0x000018, "Member 'FFldCmmNpcLayoutTableRow::KeyfreeEventID' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, UniqueId) == 0x00001C, "Member 'FFldCmmNpcLayoutTableRow::UniqueId' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, ArcanaID) == 0x000020, "Member 'FFldCmmNpcLayoutTableRow::ArcanaID' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, Type) == 0x000024, "Member 'FFldCmmNpcLayoutTableRow::Type' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, IconType) == 0x000025, "Member 'FFldCmmNpcLayoutTableRow::IconType' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, ChangeIcons) == 0x000028, "Member 'FFldCmmNpcLayoutTableRow::ChangeIcons' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, NameIndex) == 0x000038, "Member 'FFldCmmNpcLayoutTableRow::NameIndex' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, OnFlagName) == 0x00003C, "Member 'FFldCmmNpcLayoutTableRow::OnFlagName' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, OffFlagName) == 0x000044, "Member 'FFldCmmNpcLayoutTableRow::OffFlagName' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, CharaTrans) == 0x000050, "Member 'FFldCmmNpcLayoutTableRow::CharaTrans' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, IconTran) == 0x000060, "Member 'FFldCmmNpcLayoutTableRow::IconTran' has a wrong offset!");
static_assert(offsetof(FFldCmmNpcLayoutTableRow, NotMapInfo) == 0x000090, "Member 'FFldCmmNpcLayoutTableRow::NotMapInfo' has a wrong offset!");

// ScriptStruct xrd777.FldCrowdWalkRouteTimer
// 0x0020 (0x0020 - 0x0000)
struct FFldCrowdWalkRouteTimer final
{
public:
	float                                         MTimer_;                                           // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MLoopTime_;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldCrowdRoutePtn                             MRoutePattern;                                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MPointList;                                        // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldCrowdWalkRouteTimer) == 0x000008, "Wrong alignment on FFldCrowdWalkRouteTimer");
static_assert(sizeof(FFldCrowdWalkRouteTimer) == 0x000020, "Wrong size on FFldCrowdWalkRouteTimer");
static_assert(offsetof(FFldCrowdWalkRouteTimer, MTimer_) == 0x000000, "Member 'FFldCrowdWalkRouteTimer::MTimer_' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkRouteTimer, MLoopTime_) == 0x000004, "Member 'FFldCrowdWalkRouteTimer::MLoopTime_' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkRouteTimer, MRoutePattern) == 0x000008, "Member 'FFldCrowdWalkRouteTimer::MRoutePattern' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkRouteTimer, MPointList) == 0x000010, "Member 'FFldCrowdWalkRouteTimer::MPointList' has a wrong offset!");

// ScriptStruct xrd777.FldCrowdWalkInitRow
// 0x0020 (0x0028 - 0x0008)
struct FFldCrowdWalkInitRow final : public FTableRowBase
{
public:
	int32                                         FieldMajorID;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinorID;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeasonType;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeType;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFldCrowdWalkInitActorData>     ActorArray;                                        // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldCrowdWalkInitRow) == 0x000008, "Wrong alignment on FFldCrowdWalkInitRow");
static_assert(sizeof(FFldCrowdWalkInitRow) == 0x000028, "Wrong size on FFldCrowdWalkInitRow");
static_assert(offsetof(FFldCrowdWalkInitRow, FieldMajorID) == 0x000008, "Member 'FFldCrowdWalkInitRow::FieldMajorID' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkInitRow, FieldMinorID) == 0x00000C, "Member 'FFldCrowdWalkInitRow::FieldMinorID' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkInitRow, SeasonType) == 0x000010, "Member 'FFldCrowdWalkInitRow::SeasonType' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkInitRow, TimeType) == 0x000014, "Member 'FFldCrowdWalkInitRow::TimeType' has a wrong offset!");
static_assert(offsetof(FFldCrowdWalkInitRow, ActorArray) == 0x000018, "Member 'FFldCrowdWalkInitRow::ActorArray' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonEncountPacDataAssetRecord
// 0x0028 (0x0028 - 0x0000)
struct FFldDungeonEncountPacDataAssetRecord final
{
public:
	uint16                                        EncNo1;                                            // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability1;                                      // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo2;                                            // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability2;                                      // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo3;                                            // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability3;                                      // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo4;                                            // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability4;                                      // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo5;                                            // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability5;                                      // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo6;                                            // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability6;                                      // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo7;                                            // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability7;                                      // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncNo8;                                            // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability8;                                      // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order1;                                            // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order2;                                            // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order3;                                            // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order4;                                            // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order5;                                            // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order6;                                            // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order7;                                            // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Order8;                                            // 0x0027(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldDungeonEncountPacDataAssetRecord) == 0x000002, "Wrong alignment on FFldDungeonEncountPacDataAssetRecord");
static_assert(sizeof(FFldDungeonEncountPacDataAssetRecord) == 0x000028, "Wrong size on FFldDungeonEncountPacDataAssetRecord");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, EncNo1) == 0x000000, "Member 'FFldDungeonEncountPacDataAssetRecord::EncNo1' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Probability1) == 0x000002, "Member 'FFldDungeonEncountPacDataAssetRecord::Probability1' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, EncNo2) == 0x000004, "Member 'FFldDungeonEncountPacDataAssetRecord::EncNo2' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Probability2) == 0x000006, "Member 'FFldDungeonEncountPacDataAssetRecord::Probability2' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, EncNo3) == 0x000008, "Member 'FFldDungeonEncountPacDataAssetRecord::EncNo3' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Probability3) == 0x00000A, "Member 'FFldDungeonEncountPacDataAssetRecord::Probability3' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, EncNo4) == 0x00000C, "Member 'FFldDungeonEncountPacDataAssetRecord::EncNo4' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Probability4) == 0x00000E, "Member 'FFldDungeonEncountPacDataAssetRecord::Probability4' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, EncNo5) == 0x000010, "Member 'FFldDungeonEncountPacDataAssetRecord::EncNo5' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Probability5) == 0x000012, "Member 'FFldDungeonEncountPacDataAssetRecord::Probability5' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, EncNo6) == 0x000014, "Member 'FFldDungeonEncountPacDataAssetRecord::EncNo6' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Probability6) == 0x000016, "Member 'FFldDungeonEncountPacDataAssetRecord::Probability6' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, EncNo7) == 0x000018, "Member 'FFldDungeonEncountPacDataAssetRecord::EncNo7' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Probability7) == 0x00001A, "Member 'FFldDungeonEncountPacDataAssetRecord::Probability7' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, EncNo8) == 0x00001C, "Member 'FFldDungeonEncountPacDataAssetRecord::EncNo8' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Probability8) == 0x00001E, "Member 'FFldDungeonEncountPacDataAssetRecord::Probability8' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Order1) == 0x000020, "Member 'FFldDungeonEncountPacDataAssetRecord::Order1' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Order2) == 0x000021, "Member 'FFldDungeonEncountPacDataAssetRecord::Order2' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Order3) == 0x000022, "Member 'FFldDungeonEncountPacDataAssetRecord::Order3' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Order4) == 0x000023, "Member 'FFldDungeonEncountPacDataAssetRecord::Order4' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Order5) == 0x000024, "Member 'FFldDungeonEncountPacDataAssetRecord::Order5' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Order6) == 0x000025, "Member 'FFldDungeonEncountPacDataAssetRecord::Order6' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Order7) == 0x000026, "Member 'FFldDungeonEncountPacDataAssetRecord::Order7' has a wrong offset!");
static_assert(offsetof(FFldDungeonEncountPacDataAssetRecord, Order8) == 0x000027, "Member 'FFldDungeonEncountPacDataAssetRecord::Order8' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonTBoxPacDataAssetRecord
// 0x0008 (0x0008 - 0x0000)
struct FFldDungeonTBoxPacDataAssetRecord final
{
public:
	uint32                                        PacID;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TboxID;                                            // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Probability;                                       // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldDungeonTBoxPacDataAssetRecord) == 0x000004, "Wrong alignment on FFldDungeonTBoxPacDataAssetRecord");
static_assert(sizeof(FFldDungeonTBoxPacDataAssetRecord) == 0x000008, "Wrong size on FFldDungeonTBoxPacDataAssetRecord");
static_assert(offsetof(FFldDungeonTBoxPacDataAssetRecord, PacID) == 0x000000, "Member 'FFldDungeonTBoxPacDataAssetRecord::PacID' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxPacDataAssetRecord, TboxID) == 0x000004, "Member 'FFldDungeonTBoxPacDataAssetRecord::TboxID' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxPacDataAssetRecord, Probability) == 0x000006, "Member 'FFldDungeonTBoxPacDataAssetRecord::Probability' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonTBoxItemDataAssetRecord
// 0x0004 (0x0004 - 0x0000)
struct FFldDungeonTBoxItemDataAssetRecord final
{
public:
	uint16                                        ItemId;                                            // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ItemNum;                                           // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldDungeonTBoxItemDataAssetRecord) == 0x000002, "Wrong alignment on FFldDungeonTBoxItemDataAssetRecord");
static_assert(sizeof(FFldDungeonTBoxItemDataAssetRecord) == 0x000004, "Wrong size on FFldDungeonTBoxItemDataAssetRecord");
static_assert(offsetof(FFldDungeonTBoxItemDataAssetRecord, ItemId) == 0x000000, "Member 'FFldDungeonTBoxItemDataAssetRecord::ItemId' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxItemDataAssetRecord, ItemNum) == 0x000002, "Member 'FFldDungeonTBoxItemDataAssetRecord::ItemNum' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonTBoxItemDataTable
// 0x0008 (0x0010 - 0x0008)
struct FFldDungeonTBoxItemDataTable final : public FTableRowBase
{
public:
	uint16                                        ItemId;                                            // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ItemNum;                                           // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldDungeonTBoxItemDataTable) == 0x000008, "Wrong alignment on FFldDungeonTBoxItemDataTable");
static_assert(sizeof(FFldDungeonTBoxItemDataTable) == 0x000010, "Wrong size on FFldDungeonTBoxItemDataTable");
static_assert(offsetof(FFldDungeonTBoxItemDataTable, ItemId) == 0x000008, "Member 'FFldDungeonTBoxItemDataTable::ItemId' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxItemDataTable, ItemNum) == 0x00000A, "Member 'FFldDungeonTBoxItemDataTable::ItemNum' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonTBoxTypeDataAssetRecord
// 0x0024 (0x0024 - 0x0000)
struct FFldDungeonTBoxTypeDataAssetRecord final
{
public:
	uint16                                        RareMin;                                           // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        RareMax;                                           // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        JewelryMin;                                        // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        JewelryMax;                                        // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PrimFieldMin;                                      // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PrimFieldMax;                                      // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal1Min;                                         // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal1Max;                                         // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal2Min;                                         // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal2Max;                                         // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal3Min;                                         // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal3Max;                                         // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal4Min;                                         // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal4Max;                                         // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal5Min;                                         // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal5Max;                                         // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal6Min;                                         // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal6Max;                                         // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldDungeonTBoxTypeDataAssetRecord) == 0x000002, "Wrong alignment on FFldDungeonTBoxTypeDataAssetRecord");
static_assert(sizeof(FFldDungeonTBoxTypeDataAssetRecord) == 0x000024, "Wrong size on FFldDungeonTBoxTypeDataAssetRecord");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, RareMin) == 0x000000, "Member 'FFldDungeonTBoxTypeDataAssetRecord::RareMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, RareMax) == 0x000002, "Member 'FFldDungeonTBoxTypeDataAssetRecord::RareMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, JewelryMin) == 0x000004, "Member 'FFldDungeonTBoxTypeDataAssetRecord::JewelryMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, JewelryMax) == 0x000006, "Member 'FFldDungeonTBoxTypeDataAssetRecord::JewelryMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, PrimFieldMin) == 0x000008, "Member 'FFldDungeonTBoxTypeDataAssetRecord::PrimFieldMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, PrimFieldMax) == 0x00000A, "Member 'FFldDungeonTBoxTypeDataAssetRecord::PrimFieldMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, Medal1Min) == 0x00000C, "Member 'FFldDungeonTBoxTypeDataAssetRecord::Medal1Min' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, Medal1Max) == 0x00000E, "Member 'FFldDungeonTBoxTypeDataAssetRecord::Medal1Max' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, Medal2Min) == 0x000010, "Member 'FFldDungeonTBoxTypeDataAssetRecord::Medal2Min' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, Medal2Max) == 0x000012, "Member 'FFldDungeonTBoxTypeDataAssetRecord::Medal2Max' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, Medal3Min) == 0x000014, "Member 'FFldDungeonTBoxTypeDataAssetRecord::Medal3Min' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, Medal3Max) == 0x000016, "Member 'FFldDungeonTBoxTypeDataAssetRecord::Medal3Max' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, Medal4Min) == 0x000018, "Member 'FFldDungeonTBoxTypeDataAssetRecord::Medal4Min' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, Medal4Max) == 0x00001A, "Member 'FFldDungeonTBoxTypeDataAssetRecord::Medal4Max' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, Medal5Min) == 0x00001C, "Member 'FFldDungeonTBoxTypeDataAssetRecord::Medal5Min' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, Medal5Max) == 0x00001E, "Member 'FFldDungeonTBoxTypeDataAssetRecord::Medal5Max' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, Medal6Min) == 0x000020, "Member 'FFldDungeonTBoxTypeDataAssetRecord::Medal6Min' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataAssetRecord, Medal6Max) == 0x000022, "Member 'FFldDungeonTBoxTypeDataAssetRecord::Medal6Max' has a wrong offset!");

// ScriptStruct xrd777.FootIKTraceResult
// 0x0020 (0x0020 - 0x0000)
struct FFootIKTraceResult final
{
public:
	bool                                          bResultHit;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HitLocation;                                       // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Offset;                                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               FootRotation;                                      // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootIKTraceResult) == 0x000004, "Wrong alignment on FFootIKTraceResult");
static_assert(sizeof(FFootIKTraceResult) == 0x000020, "Wrong size on FFootIKTraceResult");
static_assert(offsetof(FFootIKTraceResult, bResultHit) == 0x000000, "Member 'FFootIKTraceResult::bResultHit' has a wrong offset!");
static_assert(offsetof(FFootIKTraceResult, HitLocation) == 0x000004, "Member 'FFootIKTraceResult::HitLocation' has a wrong offset!");
static_assert(offsetof(FFootIKTraceResult, Offset) == 0x000010, "Member 'FFootIKTraceResult::Offset' has a wrong offset!");
static_assert(offsetof(FFootIKTraceResult, FootRotation) == 0x000014, "Member 'FFootIKTraceResult::FootRotation' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonTBoxTypeDataTable
// 0x0028 (0x0030 - 0x0008)
struct FFldDungeonTBoxTypeDataTable final : public FTableRowBase
{
public:
	uint16                                        RareMin;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        RareMax;                                           // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        JewelryMin;                                        // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        JewelryMax;                                        // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PrimFieldMin;                                      // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PrimFieldMax;                                      // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal1Min;                                         // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal1Max;                                         // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal2Min;                                         // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal2Max;                                         // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal3Min;                                         // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal3Max;                                         // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal4Min;                                         // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal4Max;                                         // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal5Min;                                         // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal5Max;                                         // 0x0026(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal6Min;                                         // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal6Max;                                         // 0x002A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldDungeonTBoxTypeDataTable) == 0x000008, "Wrong alignment on FFldDungeonTBoxTypeDataTable");
static_assert(sizeof(FFldDungeonTBoxTypeDataTable) == 0x000030, "Wrong size on FFldDungeonTBoxTypeDataTable");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, RareMin) == 0x000008, "Member 'FFldDungeonTBoxTypeDataTable::RareMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, RareMax) == 0x00000A, "Member 'FFldDungeonTBoxTypeDataTable::RareMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, JewelryMin) == 0x00000C, "Member 'FFldDungeonTBoxTypeDataTable::JewelryMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, JewelryMax) == 0x00000E, "Member 'FFldDungeonTBoxTypeDataTable::JewelryMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, PrimFieldMin) == 0x000010, "Member 'FFldDungeonTBoxTypeDataTable::PrimFieldMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, PrimFieldMax) == 0x000012, "Member 'FFldDungeonTBoxTypeDataTable::PrimFieldMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, Medal1Min) == 0x000014, "Member 'FFldDungeonTBoxTypeDataTable::Medal1Min' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, Medal1Max) == 0x000016, "Member 'FFldDungeonTBoxTypeDataTable::Medal1Max' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, Medal2Min) == 0x000018, "Member 'FFldDungeonTBoxTypeDataTable::Medal2Min' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, Medal2Max) == 0x00001A, "Member 'FFldDungeonTBoxTypeDataTable::Medal2Max' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, Medal3Min) == 0x00001C, "Member 'FFldDungeonTBoxTypeDataTable::Medal3Min' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, Medal3Max) == 0x00001E, "Member 'FFldDungeonTBoxTypeDataTable::Medal3Max' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, Medal4Min) == 0x000020, "Member 'FFldDungeonTBoxTypeDataTable::Medal4Min' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, Medal4Max) == 0x000022, "Member 'FFldDungeonTBoxTypeDataTable::Medal4Max' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, Medal5Min) == 0x000024, "Member 'FFldDungeonTBoxTypeDataTable::Medal5Min' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, Medal5Max) == 0x000026, "Member 'FFldDungeonTBoxTypeDataTable::Medal5Max' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, Medal6Min) == 0x000028, "Member 'FFldDungeonTBoxTypeDataTable::Medal6Min' has a wrong offset!");
static_assert(offsetof(FFldDungeonTBoxTypeDataTable, Medal6Max) == 0x00002A, "Member 'FFldDungeonTBoxTypeDataTable::Medal6Max' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonFloorDataAssetRecord
// 0x0074 (0x0074 - 0x0000)
struct FFldDungeonFloorDataAssetRecord final
{
public:
	uint32                                        Flags;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        FieldMajor;                                        // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        FieldMinor;                                        // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Major;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Minor;                                             // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AreaNo;                                            // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnvID;                                             // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartMin;                                           // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartMax;                                           // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartSelTable;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnemyMin;                                          // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnemyMax;                                          // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StrongEnemyProbability;                            // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StrongEnemyMax;                                    // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RareEnemyProbability;                              // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RareEnemyMax;                                      // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopNormalNormal;                                 // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopNormalStrong;                                 // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopNormalRare;                                   // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopStrongNormal;                                 // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopStrongStrong;                                 // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopStrongRare;                                   // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopRareNormal;                                   // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopRareStrong;                                   // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopRareRare;                                     // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Reaper;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncountPack;                                       // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        StrongEncountPack;                                 // 0x0026(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PinchEncountPack;                                  // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PinchStrongEncountPack;                            // 0x002A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        RareEncountPack;                                   // 0x002C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ContinousEncount1;                                 // 0x002E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ContinousEncount2;                                 // 0x0030(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DoorGroup;                                         // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DoorProbability;                                   // 0x0033(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ReturnDevProbability;                              // 0x0034(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TboxMin;                                           // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TboxMax;                                           // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TboxType;                                          // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MoneyProbability;                                  // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MoneyMin;                                          // 0x003A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MoneyMax;                                          // 0x003C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TboxPack;                                          // 0x003E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        RareTboxPack;                                      // 0x0040(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        JewelryTboxPack;                                   // 0x0042(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PrimFieldTboxPack;                                 // 0x0044(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal1TboxPack;                                    // 0x0046(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal2TboxPack;                                    // 0x0048(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal3TboxPack;                                    // 0x004A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal4TboxPack;                                    // 0x004C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal5TboxPack;                                    // 0x004E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal6TboxPack;                                    // 0x0050(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorTboxPack;                                      // 0x0052(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorRareTboxPack;                                  // 0x0054(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorJewelryTboxPack;                               // 0x0056(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorPrimFieldTboxPack;                             // 0x0058(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorMedal1TboxPack;                                // 0x005A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorMedal2TboxPack;                                // 0x005C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorMedal3TboxPack;                                // 0x005E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorMedal4TboxPack;                                // 0x0060(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorMedal5TboxPack;                                // 0x0062(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorMedal6TboxPack;                                // 0x0064(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        MissingPersonID;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MissingBuildID;                                    // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ScrFileNo;                                         // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldDungeonFloorDataAssetRecord) == 0x000004, "Wrong alignment on FFldDungeonFloorDataAssetRecord");
static_assert(sizeof(FFldDungeonFloorDataAssetRecord) == 0x000074, "Wrong size on FFldDungeonFloorDataAssetRecord");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, Flags) == 0x000000, "Member 'FFldDungeonFloorDataAssetRecord::Flags' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, FieldMajor) == 0x000004, "Member 'FFldDungeonFloorDataAssetRecord::FieldMajor' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, FieldMinor) == 0x000006, "Member 'FFldDungeonFloorDataAssetRecord::FieldMinor' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, Major) == 0x000008, "Member 'FFldDungeonFloorDataAssetRecord::Major' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, Minor) == 0x00000A, "Member 'FFldDungeonFloorDataAssetRecord::Minor' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, AreaNo) == 0x00000C, "Member 'FFldDungeonFloorDataAssetRecord::AreaNo' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, EnvID) == 0x00000D, "Member 'FFldDungeonFloorDataAssetRecord::EnvID' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, PartMin) == 0x00000E, "Member 'FFldDungeonFloorDataAssetRecord::PartMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, PartMax) == 0x00000F, "Member 'FFldDungeonFloorDataAssetRecord::PartMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, PartSelTable) == 0x000010, "Member 'FFldDungeonFloorDataAssetRecord::PartSelTable' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, EnemyMin) == 0x000011, "Member 'FFldDungeonFloorDataAssetRecord::EnemyMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, EnemyMax) == 0x000012, "Member 'FFldDungeonFloorDataAssetRecord::EnemyMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, StrongEnemyProbability) == 0x000013, "Member 'FFldDungeonFloorDataAssetRecord::StrongEnemyProbability' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, StrongEnemyMax) == 0x000014, "Member 'FFldDungeonFloorDataAssetRecord::StrongEnemyMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RareEnemyProbability) == 0x000015, "Member 'FFldDungeonFloorDataAssetRecord::RareEnemyProbability' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RareEnemyMax) == 0x000016, "Member 'FFldDungeonFloorDataAssetRecord::RareEnemyMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RepopNormalNormal) == 0x000017, "Member 'FFldDungeonFloorDataAssetRecord::RepopNormalNormal' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RepopNormalStrong) == 0x000018, "Member 'FFldDungeonFloorDataAssetRecord::RepopNormalStrong' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RepopNormalRare) == 0x000019, "Member 'FFldDungeonFloorDataAssetRecord::RepopNormalRare' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RepopStrongNormal) == 0x00001A, "Member 'FFldDungeonFloorDataAssetRecord::RepopStrongNormal' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RepopStrongStrong) == 0x00001B, "Member 'FFldDungeonFloorDataAssetRecord::RepopStrongStrong' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RepopStrongRare) == 0x00001C, "Member 'FFldDungeonFloorDataAssetRecord::RepopStrongRare' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RepopRareNormal) == 0x00001D, "Member 'FFldDungeonFloorDataAssetRecord::RepopRareNormal' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RepopRareStrong) == 0x00001E, "Member 'FFldDungeonFloorDataAssetRecord::RepopRareStrong' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RepopRareRare) == 0x00001F, "Member 'FFldDungeonFloorDataAssetRecord::RepopRareRare' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, Reaper) == 0x000020, "Member 'FFldDungeonFloorDataAssetRecord::Reaper' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, EncountPack) == 0x000024, "Member 'FFldDungeonFloorDataAssetRecord::EncountPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, StrongEncountPack) == 0x000026, "Member 'FFldDungeonFloorDataAssetRecord::StrongEncountPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, PinchEncountPack) == 0x000028, "Member 'FFldDungeonFloorDataAssetRecord::PinchEncountPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, PinchStrongEncountPack) == 0x00002A, "Member 'FFldDungeonFloorDataAssetRecord::PinchStrongEncountPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RareEncountPack) == 0x00002C, "Member 'FFldDungeonFloorDataAssetRecord::RareEncountPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, ContinousEncount1) == 0x00002E, "Member 'FFldDungeonFloorDataAssetRecord::ContinousEncount1' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, ContinousEncount2) == 0x000030, "Member 'FFldDungeonFloorDataAssetRecord::ContinousEncount2' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, DoorGroup) == 0x000032, "Member 'FFldDungeonFloorDataAssetRecord::DoorGroup' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, DoorProbability) == 0x000033, "Member 'FFldDungeonFloorDataAssetRecord::DoorProbability' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, ReturnDevProbability) == 0x000034, "Member 'FFldDungeonFloorDataAssetRecord::ReturnDevProbability' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, TboxMin) == 0x000036, "Member 'FFldDungeonFloorDataAssetRecord::TboxMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, TboxMax) == 0x000037, "Member 'FFldDungeonFloorDataAssetRecord::TboxMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, TboxType) == 0x000038, "Member 'FFldDungeonFloorDataAssetRecord::TboxType' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, MoneyProbability) == 0x000039, "Member 'FFldDungeonFloorDataAssetRecord::MoneyProbability' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, MoneyMin) == 0x00003A, "Member 'FFldDungeonFloorDataAssetRecord::MoneyMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, MoneyMax) == 0x00003C, "Member 'FFldDungeonFloorDataAssetRecord::MoneyMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, TboxPack) == 0x00003E, "Member 'FFldDungeonFloorDataAssetRecord::TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, RareTboxPack) == 0x000040, "Member 'FFldDungeonFloorDataAssetRecord::RareTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, JewelryTboxPack) == 0x000042, "Member 'FFldDungeonFloorDataAssetRecord::JewelryTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, PrimFieldTboxPack) == 0x000044, "Member 'FFldDungeonFloorDataAssetRecord::PrimFieldTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, Medal1TboxPack) == 0x000046, "Member 'FFldDungeonFloorDataAssetRecord::Medal1TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, Medal2TboxPack) == 0x000048, "Member 'FFldDungeonFloorDataAssetRecord::Medal2TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, Medal3TboxPack) == 0x00004A, "Member 'FFldDungeonFloorDataAssetRecord::Medal3TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, Medal4TboxPack) == 0x00004C, "Member 'FFldDungeonFloorDataAssetRecord::Medal4TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, Medal5TboxPack) == 0x00004E, "Member 'FFldDungeonFloorDataAssetRecord::Medal5TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, Medal6TboxPack) == 0x000050, "Member 'FFldDungeonFloorDataAssetRecord::Medal6TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, DoorTboxPack) == 0x000052, "Member 'FFldDungeonFloorDataAssetRecord::DoorTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, DoorRareTboxPack) == 0x000054, "Member 'FFldDungeonFloorDataAssetRecord::DoorRareTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, DoorJewelryTboxPack) == 0x000056, "Member 'FFldDungeonFloorDataAssetRecord::DoorJewelryTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, DoorPrimFieldTboxPack) == 0x000058, "Member 'FFldDungeonFloorDataAssetRecord::DoorPrimFieldTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, DoorMedal1TboxPack) == 0x00005A, "Member 'FFldDungeonFloorDataAssetRecord::DoorMedal1TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, DoorMedal2TboxPack) == 0x00005C, "Member 'FFldDungeonFloorDataAssetRecord::DoorMedal2TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, DoorMedal3TboxPack) == 0x00005E, "Member 'FFldDungeonFloorDataAssetRecord::DoorMedal3TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, DoorMedal4TboxPack) == 0x000060, "Member 'FFldDungeonFloorDataAssetRecord::DoorMedal4TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, DoorMedal5TboxPack) == 0x000062, "Member 'FFldDungeonFloorDataAssetRecord::DoorMedal5TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, DoorMedal6TboxPack) == 0x000064, "Member 'FFldDungeonFloorDataAssetRecord::DoorMedal6TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, MissingPersonID) == 0x000068, "Member 'FFldDungeonFloorDataAssetRecord::MissingPersonID' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, MissingBuildID) == 0x00006C, "Member 'FFldDungeonFloorDataAssetRecord::MissingBuildID' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataAssetRecord, ScrFileNo) == 0x000070, "Member 'FFldDungeonFloorDataAssetRecord::ScrFileNo' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonFloorDataTable
// 0x0078 (0x0080 - 0x0008)
struct FFldDungeonFloorDataTable final : public FTableRowBase
{
public:
	uint32                                        Flags;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        FieldMajor;                                        // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        FieldMinor;                                        // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Major;                                             // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Minor;                                             // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AreaNo;                                            // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnvID;                                             // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartMin;                                           // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartMax;                                           // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PartSelTable;                                      // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnemyMin;                                          // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EnemyMax;                                          // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StrongEnemyProbability;                            // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StrongEnemyMax;                                    // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RareEnemyProbability;                              // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RareEnemyMax;                                      // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopNormalNormal;                                 // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopNormalStrong;                                 // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopNormalRare;                                   // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopStrongNormal;                                 // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopStrongStrong;                                 // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopStrongRare;                                   // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopRareNormal;                                   // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopRareStrong;                                   // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RepopRareRare;                                     // 0x0027(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Reaper;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EncountPack;                                       // 0x002C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        StrongEncountPack;                                 // 0x002E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PinchEncountPack;                                  // 0x0030(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PinchStrongEncountPack;                            // 0x0032(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        RareEncountPack;                                   // 0x0034(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ContinousEncount1;                                 // 0x0036(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ContinousEncount2;                                 // 0x0038(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DoorGroup;                                         // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DoorProbability;                                   // 0x003B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ReturnDevProbability;                              // 0x003C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TboxMin;                                           // 0x003E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TboxMax;                                           // 0x003F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TboxType;                                          // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MoneyProbability;                                  // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MoneyMin;                                          // 0x0042(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MoneyMax;                                          // 0x0044(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TboxPack;                                          // 0x0046(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        RareTboxPack;                                      // 0x0048(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        JewelryTboxPack;                                   // 0x004A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        PrimFieldTboxPack;                                 // 0x004C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal1TboxPack;                                    // 0x004E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal2TboxPack;                                    // 0x0050(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal3TboxPack;                                    // 0x0052(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal4TboxPack;                                    // 0x0054(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal5TboxPack;                                    // 0x0056(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Medal6TboxPack;                                    // 0x0058(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorTboxPack;                                      // 0x005A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorRareTboxPack;                                  // 0x005C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorJewelryTboxPack;                               // 0x005E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorPrimFieldTboxPack;                             // 0x0060(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorMedal1TboxPack;                                // 0x0062(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorMedal2TboxPack;                                // 0x0064(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorMedal3TboxPack;                                // 0x0066(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorMedal4TboxPack;                                // 0x0068(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorMedal5TboxPack;                                // 0x006A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        DoorMedal6TboxPack;                                // 0x006C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        MissingPersonID;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MissingBuildID;                                    // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ScrFileNo;                                         // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldDungeonFloorDataTable) == 0x000008, "Wrong alignment on FFldDungeonFloorDataTable");
static_assert(sizeof(FFldDungeonFloorDataTable) == 0x000080, "Wrong size on FFldDungeonFloorDataTable");
static_assert(offsetof(FFldDungeonFloorDataTable, Flags) == 0x000008, "Member 'FFldDungeonFloorDataTable::Flags' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, FieldMajor) == 0x00000C, "Member 'FFldDungeonFloorDataTable::FieldMajor' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, FieldMinor) == 0x00000E, "Member 'FFldDungeonFloorDataTable::FieldMinor' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, Major) == 0x000010, "Member 'FFldDungeonFloorDataTable::Major' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, Minor) == 0x000012, "Member 'FFldDungeonFloorDataTable::Minor' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, AreaNo) == 0x000014, "Member 'FFldDungeonFloorDataTable::AreaNo' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, EnvID) == 0x000015, "Member 'FFldDungeonFloorDataTable::EnvID' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, PartMin) == 0x000016, "Member 'FFldDungeonFloorDataTable::PartMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, PartMax) == 0x000017, "Member 'FFldDungeonFloorDataTable::PartMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, PartSelTable) == 0x000018, "Member 'FFldDungeonFloorDataTable::PartSelTable' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, EnemyMin) == 0x000019, "Member 'FFldDungeonFloorDataTable::EnemyMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, EnemyMax) == 0x00001A, "Member 'FFldDungeonFloorDataTable::EnemyMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, StrongEnemyProbability) == 0x00001B, "Member 'FFldDungeonFloorDataTable::StrongEnemyProbability' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, StrongEnemyMax) == 0x00001C, "Member 'FFldDungeonFloorDataTable::StrongEnemyMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RareEnemyProbability) == 0x00001D, "Member 'FFldDungeonFloorDataTable::RareEnemyProbability' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RareEnemyMax) == 0x00001E, "Member 'FFldDungeonFloorDataTable::RareEnemyMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RepopNormalNormal) == 0x00001F, "Member 'FFldDungeonFloorDataTable::RepopNormalNormal' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RepopNormalStrong) == 0x000020, "Member 'FFldDungeonFloorDataTable::RepopNormalStrong' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RepopNormalRare) == 0x000021, "Member 'FFldDungeonFloorDataTable::RepopNormalRare' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RepopStrongNormal) == 0x000022, "Member 'FFldDungeonFloorDataTable::RepopStrongNormal' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RepopStrongStrong) == 0x000023, "Member 'FFldDungeonFloorDataTable::RepopStrongStrong' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RepopStrongRare) == 0x000024, "Member 'FFldDungeonFloorDataTable::RepopStrongRare' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RepopRareNormal) == 0x000025, "Member 'FFldDungeonFloorDataTable::RepopRareNormal' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RepopRareStrong) == 0x000026, "Member 'FFldDungeonFloorDataTable::RepopRareStrong' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RepopRareRare) == 0x000027, "Member 'FFldDungeonFloorDataTable::RepopRareRare' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, Reaper) == 0x000028, "Member 'FFldDungeonFloorDataTable::Reaper' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, EncountPack) == 0x00002C, "Member 'FFldDungeonFloorDataTable::EncountPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, StrongEncountPack) == 0x00002E, "Member 'FFldDungeonFloorDataTable::StrongEncountPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, PinchEncountPack) == 0x000030, "Member 'FFldDungeonFloorDataTable::PinchEncountPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, PinchStrongEncountPack) == 0x000032, "Member 'FFldDungeonFloorDataTable::PinchStrongEncountPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RareEncountPack) == 0x000034, "Member 'FFldDungeonFloorDataTable::RareEncountPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, ContinousEncount1) == 0x000036, "Member 'FFldDungeonFloorDataTable::ContinousEncount1' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, ContinousEncount2) == 0x000038, "Member 'FFldDungeonFloorDataTable::ContinousEncount2' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, DoorGroup) == 0x00003A, "Member 'FFldDungeonFloorDataTable::DoorGroup' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, DoorProbability) == 0x00003B, "Member 'FFldDungeonFloorDataTable::DoorProbability' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, ReturnDevProbability) == 0x00003C, "Member 'FFldDungeonFloorDataTable::ReturnDevProbability' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, TboxMin) == 0x00003E, "Member 'FFldDungeonFloorDataTable::TboxMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, TboxMax) == 0x00003F, "Member 'FFldDungeonFloorDataTable::TboxMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, TboxType) == 0x000040, "Member 'FFldDungeonFloorDataTable::TboxType' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, MoneyProbability) == 0x000041, "Member 'FFldDungeonFloorDataTable::MoneyProbability' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, MoneyMin) == 0x000042, "Member 'FFldDungeonFloorDataTable::MoneyMin' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, MoneyMax) == 0x000044, "Member 'FFldDungeonFloorDataTable::MoneyMax' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, TboxPack) == 0x000046, "Member 'FFldDungeonFloorDataTable::TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, RareTboxPack) == 0x000048, "Member 'FFldDungeonFloorDataTable::RareTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, JewelryTboxPack) == 0x00004A, "Member 'FFldDungeonFloorDataTable::JewelryTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, PrimFieldTboxPack) == 0x00004C, "Member 'FFldDungeonFloorDataTable::PrimFieldTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, Medal1TboxPack) == 0x00004E, "Member 'FFldDungeonFloorDataTable::Medal1TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, Medal2TboxPack) == 0x000050, "Member 'FFldDungeonFloorDataTable::Medal2TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, Medal3TboxPack) == 0x000052, "Member 'FFldDungeonFloorDataTable::Medal3TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, Medal4TboxPack) == 0x000054, "Member 'FFldDungeonFloorDataTable::Medal4TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, Medal5TboxPack) == 0x000056, "Member 'FFldDungeonFloorDataTable::Medal5TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, Medal6TboxPack) == 0x000058, "Member 'FFldDungeonFloorDataTable::Medal6TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, DoorTboxPack) == 0x00005A, "Member 'FFldDungeonFloorDataTable::DoorTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, DoorRareTboxPack) == 0x00005C, "Member 'FFldDungeonFloorDataTable::DoorRareTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, DoorJewelryTboxPack) == 0x00005E, "Member 'FFldDungeonFloorDataTable::DoorJewelryTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, DoorPrimFieldTboxPack) == 0x000060, "Member 'FFldDungeonFloorDataTable::DoorPrimFieldTboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, DoorMedal1TboxPack) == 0x000062, "Member 'FFldDungeonFloorDataTable::DoorMedal1TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, DoorMedal2TboxPack) == 0x000064, "Member 'FFldDungeonFloorDataTable::DoorMedal2TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, DoorMedal3TboxPack) == 0x000066, "Member 'FFldDungeonFloorDataTable::DoorMedal3TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, DoorMedal4TboxPack) == 0x000068, "Member 'FFldDungeonFloorDataTable::DoorMedal4TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, DoorMedal5TboxPack) == 0x00006A, "Member 'FFldDungeonFloorDataTable::DoorMedal5TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, DoorMedal6TboxPack) == 0x00006C, "Member 'FFldDungeonFloorDataTable::DoorMedal6TboxPack' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, MissingPersonID) == 0x000070, "Member 'FFldDungeonFloorDataTable::MissingPersonID' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, MissingBuildID) == 0x000074, "Member 'FFldDungeonFloorDataTable::MissingBuildID' has a wrong offset!");
static_assert(offsetof(FFldDungeonFloorDataTable, ScrFileNo) == 0x000078, "Member 'FFldDungeonFloorDataTable::ScrFileNo' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonLayoutCombDataAssetRecord
// 0x0020 (0x0020 - 0x0000)
struct FFldDungeonLayoutCombDataAssetRecord final
{
public:
	uint16                                        Prio;                                              // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Index;                                             // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_0_no;                                        // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_0_dir;                                       // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_0_y;                                         // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_1_no;                                        // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_1_dir;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_1_y;                                         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_2_no;                                        // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_2_dir;                                       // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_2_y;                                         // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_0_no;                                        // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_0_dir;                                       // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_0_y;                                         // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_1_no;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_1_dir;                                       // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_1_y;                                         // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_2_no;                                        // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_2_dir;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_2_y;                                         // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_0_no;                                        // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_0_dir;                                       // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_0_y;                                         // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_1_no;                                        // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_1_dir;                                       // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_1_y;                                         // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_2_no;                                        // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_2_dir;                                       // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_2_y;                                         // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldDungeonLayoutCombDataAssetRecord) == 0x000002, "Wrong alignment on FFldDungeonLayoutCombDataAssetRecord");
static_assert(sizeof(FFldDungeonLayoutCombDataAssetRecord) == 0x000020, "Wrong size on FFldDungeonLayoutCombDataAssetRecord");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Prio) == 0x000000, "Member 'FFldDungeonLayoutCombDataAssetRecord::Prio' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Index) == 0x000002, "Member 'FFldDungeonLayoutCombDataAssetRecord::Index' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data0_0_no) == 0x000004, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data0_0_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data0_0_dir) == 0x000005, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data0_0_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data0_0_y) == 0x000006, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data0_0_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data0_1_no) == 0x000007, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data0_1_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data0_1_dir) == 0x000008, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data0_1_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data0_1_y) == 0x000009, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data0_1_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data0_2_no) == 0x00000A, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data0_2_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data0_2_dir) == 0x00000B, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data0_2_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data0_2_y) == 0x00000C, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data0_2_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data1_0_no) == 0x00000D, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data1_0_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data1_0_dir) == 0x00000E, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data1_0_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data1_0_y) == 0x00000F, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data1_0_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data1_1_no) == 0x000010, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data1_1_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data1_1_dir) == 0x000011, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data1_1_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data1_1_y) == 0x000012, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data1_1_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data1_2_no) == 0x000013, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data1_2_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data1_2_dir) == 0x000014, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data1_2_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data1_2_y) == 0x000015, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data1_2_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data2_0_no) == 0x000016, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data2_0_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data2_0_dir) == 0x000017, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data2_0_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data2_0_y) == 0x000018, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data2_0_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data2_1_no) == 0x000019, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data2_1_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data2_1_dir) == 0x00001A, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data2_1_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data2_1_y) == 0x00001B, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data2_1_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data2_2_no) == 0x00001C, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data2_2_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data2_2_dir) == 0x00001D, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data2_2_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataAssetRecord, Data2_2_y) == 0x00001E, "Member 'FFldDungeonLayoutCombDataAssetRecord::Data2_2_y' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonLayoutCombDataTable
// 0x0020 (0x0028 - 0x0008)
struct FFldDungeonLayoutCombDataTable final : public FTableRowBase
{
public:
	uint16                                        Prio;                                              // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Index;                                             // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_0_no;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_0_dir;                                       // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_0_y;                                         // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_1_no;                                        // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_1_dir;                                       // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_1_y;                                         // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_2_no;                                        // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_2_dir;                                       // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data0_2_y;                                         // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_0_no;                                        // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_0_dir;                                       // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_0_y;                                         // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_1_no;                                        // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_1_dir;                                       // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_1_y;                                         // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_2_no;                                        // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_2_dir;                                       // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data1_2_y;                                         // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_0_no;                                        // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_0_dir;                                       // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_0_y;                                         // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_1_no;                                        // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_1_dir;                                       // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_1_y;                                         // 0x0023(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_2_no;                                        // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_2_dir;                                       // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Data2_2_y;                                         // 0x0026(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27[0x1];                                       // 0x0027(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldDungeonLayoutCombDataTable) == 0x000008, "Wrong alignment on FFldDungeonLayoutCombDataTable");
static_assert(sizeof(FFldDungeonLayoutCombDataTable) == 0x000028, "Wrong size on FFldDungeonLayoutCombDataTable");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Prio) == 0x000008, "Member 'FFldDungeonLayoutCombDataTable::Prio' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Index) == 0x00000A, "Member 'FFldDungeonLayoutCombDataTable::Index' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data0_0_no) == 0x00000C, "Member 'FFldDungeonLayoutCombDataTable::Data0_0_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data0_0_dir) == 0x00000D, "Member 'FFldDungeonLayoutCombDataTable::Data0_0_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data0_0_y) == 0x00000E, "Member 'FFldDungeonLayoutCombDataTable::Data0_0_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data0_1_no) == 0x00000F, "Member 'FFldDungeonLayoutCombDataTable::Data0_1_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data0_1_dir) == 0x000010, "Member 'FFldDungeonLayoutCombDataTable::Data0_1_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data0_1_y) == 0x000011, "Member 'FFldDungeonLayoutCombDataTable::Data0_1_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data0_2_no) == 0x000012, "Member 'FFldDungeonLayoutCombDataTable::Data0_2_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data0_2_dir) == 0x000013, "Member 'FFldDungeonLayoutCombDataTable::Data0_2_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data0_2_y) == 0x000014, "Member 'FFldDungeonLayoutCombDataTable::Data0_2_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data1_0_no) == 0x000015, "Member 'FFldDungeonLayoutCombDataTable::Data1_0_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data1_0_dir) == 0x000016, "Member 'FFldDungeonLayoutCombDataTable::Data1_0_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data1_0_y) == 0x000017, "Member 'FFldDungeonLayoutCombDataTable::Data1_0_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data1_1_no) == 0x000018, "Member 'FFldDungeonLayoutCombDataTable::Data1_1_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data1_1_dir) == 0x000019, "Member 'FFldDungeonLayoutCombDataTable::Data1_1_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data1_1_y) == 0x00001A, "Member 'FFldDungeonLayoutCombDataTable::Data1_1_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data1_2_no) == 0x00001B, "Member 'FFldDungeonLayoutCombDataTable::Data1_2_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data1_2_dir) == 0x00001C, "Member 'FFldDungeonLayoutCombDataTable::Data1_2_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data1_2_y) == 0x00001D, "Member 'FFldDungeonLayoutCombDataTable::Data1_2_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data2_0_no) == 0x00001E, "Member 'FFldDungeonLayoutCombDataTable::Data2_0_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data2_0_dir) == 0x00001F, "Member 'FFldDungeonLayoutCombDataTable::Data2_0_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data2_0_y) == 0x000020, "Member 'FFldDungeonLayoutCombDataTable::Data2_0_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data2_1_no) == 0x000021, "Member 'FFldDungeonLayoutCombDataTable::Data2_1_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data2_1_dir) == 0x000022, "Member 'FFldDungeonLayoutCombDataTable::Data2_1_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data2_1_y) == 0x000023, "Member 'FFldDungeonLayoutCombDataTable::Data2_1_y' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data2_2_no) == 0x000024, "Member 'FFldDungeonLayoutCombDataTable::Data2_2_no' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data2_2_dir) == 0x000025, "Member 'FFldDungeonLayoutCombDataTable::Data2_2_dir' has a wrong offset!");
static_assert(offsetof(FFldDungeonLayoutCombDataTable, Data2_2_y) == 0x000026, "Member 'FFldDungeonLayoutCombDataTable::Data2_2_y' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonPartsSelDataAssetRecord
// 0x0024 (0x0024 - 0x0000)
struct FFldDungeonPartsSelDataAssetRecord final
{
public:
	uint8                                         Parts01;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts02;                                           // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts03;                                           // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts04;                                           // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts05;                                           // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts06;                                           // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts07;                                           // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts08;                                           // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PrimBit01;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PrimBit02;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PrimBit03;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ScndBit01;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ScndBit02;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ScndBit03;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrimNum;                                           // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Room;                                              // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RoomMax;                                           // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldDungeonPartsSelDataAssetRecord) == 0x000004, "Wrong alignment on FFldDungeonPartsSelDataAssetRecord");
static_assert(sizeof(FFldDungeonPartsSelDataAssetRecord) == 0x000024, "Wrong size on FFldDungeonPartsSelDataAssetRecord");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, Parts01) == 0x000000, "Member 'FFldDungeonPartsSelDataAssetRecord::Parts01' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, Parts02) == 0x000001, "Member 'FFldDungeonPartsSelDataAssetRecord::Parts02' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, Parts03) == 0x000002, "Member 'FFldDungeonPartsSelDataAssetRecord::Parts03' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, Parts04) == 0x000003, "Member 'FFldDungeonPartsSelDataAssetRecord::Parts04' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, Parts05) == 0x000004, "Member 'FFldDungeonPartsSelDataAssetRecord::Parts05' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, Parts06) == 0x000005, "Member 'FFldDungeonPartsSelDataAssetRecord::Parts06' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, Parts07) == 0x000006, "Member 'FFldDungeonPartsSelDataAssetRecord::Parts07' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, Parts08) == 0x000007, "Member 'FFldDungeonPartsSelDataAssetRecord::Parts08' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, PrimBit01) == 0x000008, "Member 'FFldDungeonPartsSelDataAssetRecord::PrimBit01' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, PrimBit02) == 0x00000C, "Member 'FFldDungeonPartsSelDataAssetRecord::PrimBit02' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, PrimBit03) == 0x000010, "Member 'FFldDungeonPartsSelDataAssetRecord::PrimBit03' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, ScndBit01) == 0x000014, "Member 'FFldDungeonPartsSelDataAssetRecord::ScndBit01' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, ScndBit02) == 0x000018, "Member 'FFldDungeonPartsSelDataAssetRecord::ScndBit02' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, ScndBit03) == 0x00001C, "Member 'FFldDungeonPartsSelDataAssetRecord::ScndBit03' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, PrimNum) == 0x000020, "Member 'FFldDungeonPartsSelDataAssetRecord::PrimNum' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, Room) == 0x000021, "Member 'FFldDungeonPartsSelDataAssetRecord::Room' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataAssetRecord, RoomMax) == 0x000022, "Member 'FFldDungeonPartsSelDataAssetRecord::RoomMax' has a wrong offset!");

// ScriptStruct xrd777.AtlHandwritingNiagaraRequestAbsoluteFlag
// 0x0003 (0x0003 - 0x0000)
struct FAtlHandwritingNiagaraRequestAbsoluteFlag final
{
public:
	bool                                          bAbsoluteLocation;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsoluteRotation;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsoluteScale;                                    // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtlHandwritingNiagaraRequestAbsoluteFlag) == 0x000001, "Wrong alignment on FAtlHandwritingNiagaraRequestAbsoluteFlag");
static_assert(sizeof(FAtlHandwritingNiagaraRequestAbsoluteFlag) == 0x000003, "Wrong size on FAtlHandwritingNiagaraRequestAbsoluteFlag");
static_assert(offsetof(FAtlHandwritingNiagaraRequestAbsoluteFlag, bAbsoluteLocation) == 0x000000, "Member 'FAtlHandwritingNiagaraRequestAbsoluteFlag::bAbsoluteLocation' has a wrong offset!");
static_assert(offsetof(FAtlHandwritingNiagaraRequestAbsoluteFlag, bAbsoluteRotation) == 0x000001, "Member 'FAtlHandwritingNiagaraRequestAbsoluteFlag::bAbsoluteRotation' has a wrong offset!");
static_assert(offsetof(FAtlHandwritingNiagaraRequestAbsoluteFlag, bAbsoluteScale) == 0x000002, "Member 'FAtlHandwritingNiagaraRequestAbsoluteFlag::bAbsoluteScale' has a wrong offset!");

// ScriptStruct xrd777.FldDungeonPartsSelDataTable
// 0x0028 (0x0030 - 0x0008)
struct FFldDungeonPartsSelDataTable final : public FTableRowBase
{
public:
	uint8                                         Parts01;                                           // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts02;                                           // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts03;                                           // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts04;                                           // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts05;                                           // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts06;                                           // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts07;                                           // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Parts08;                                           // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PrimBit01;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PrimBit02;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PrimBit03;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ScndBit01;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ScndBit02;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ScndBit03;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PrimNum;                                           // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Room;                                              // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RoomMax;                                           // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldDungeonPartsSelDataTable) == 0x000008, "Wrong alignment on FFldDungeonPartsSelDataTable");
static_assert(sizeof(FFldDungeonPartsSelDataTable) == 0x000030, "Wrong size on FFldDungeonPartsSelDataTable");
static_assert(offsetof(FFldDungeonPartsSelDataTable, Parts01) == 0x000008, "Member 'FFldDungeonPartsSelDataTable::Parts01' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, Parts02) == 0x000009, "Member 'FFldDungeonPartsSelDataTable::Parts02' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, Parts03) == 0x00000A, "Member 'FFldDungeonPartsSelDataTable::Parts03' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, Parts04) == 0x00000B, "Member 'FFldDungeonPartsSelDataTable::Parts04' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, Parts05) == 0x00000C, "Member 'FFldDungeonPartsSelDataTable::Parts05' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, Parts06) == 0x00000D, "Member 'FFldDungeonPartsSelDataTable::Parts06' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, Parts07) == 0x00000E, "Member 'FFldDungeonPartsSelDataTable::Parts07' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, Parts08) == 0x00000F, "Member 'FFldDungeonPartsSelDataTable::Parts08' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, PrimBit01) == 0x000010, "Member 'FFldDungeonPartsSelDataTable::PrimBit01' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, PrimBit02) == 0x000014, "Member 'FFldDungeonPartsSelDataTable::PrimBit02' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, PrimBit03) == 0x000018, "Member 'FFldDungeonPartsSelDataTable::PrimBit03' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, ScndBit01) == 0x00001C, "Member 'FFldDungeonPartsSelDataTable::ScndBit01' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, ScndBit02) == 0x000020, "Member 'FFldDungeonPartsSelDataTable::ScndBit02' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, ScndBit03) == 0x000024, "Member 'FFldDungeonPartsSelDataTable::ScndBit03' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, PrimNum) == 0x000028, "Member 'FFldDungeonPartsSelDataTable::PrimNum' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, Room) == 0x000029, "Member 'FFldDungeonPartsSelDataTable::Room' has a wrong offset!");
static_assert(offsetof(FFldDungeonPartsSelDataTable, RoomMax) == 0x00002A, "Member 'FFldDungeonPartsSelDataTable::RoomMax' has a wrong offset!");

// ScriptStruct xrd777.FldDoorAnimationData
// 0x0018 (0x0018 - 0x0000)
struct FFldDoorAnimationData final
{
public:
	class UAnimationAsset*                        MActionAsset;                                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimationAsset*                        MWaitAsset;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MCharaMotionID;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldDoorAnimationData) == 0x000008, "Wrong alignment on FFldDoorAnimationData");
static_assert(sizeof(FFldDoorAnimationData) == 0x000018, "Wrong size on FFldDoorAnimationData");
static_assert(offsetof(FFldDoorAnimationData, MActionAsset) == 0x000000, "Member 'FFldDoorAnimationData::MActionAsset' has a wrong offset!");
static_assert(offsetof(FFldDoorAnimationData, MWaitAsset) == 0x000008, "Member 'FFldDoorAnimationData::MWaitAsset' has a wrong offset!");
static_assert(offsetof(FFldDoorAnimationData, MCharaMotionID) == 0x000010, "Member 'FFldDoorAnimationData::MCharaMotionID' has a wrong offset!");

// ScriptStruct xrd777.EvtAdxSoundFadePayload
// 0x0014 (0x0014 - 0x0000)
struct FEvtAdxSoundFadePayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtAdxSoundFadeType                          Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Time;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetVolume;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtAdxSoundFadePayload) == 0x000004, "Wrong alignment on FEvtAdxSoundFadePayload");
static_assert(sizeof(FEvtAdxSoundFadePayload) == 0x000014, "Wrong size on FEvtAdxSoundFadePayload");
static_assert(offsetof(FEvtAdxSoundFadePayload, EventName) == 0x000000, "Member 'FEvtAdxSoundFadePayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundFadePayload, Type) == 0x000008, "Member 'FEvtAdxSoundFadePayload::Type' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundFadePayload, Time) == 0x00000C, "Member 'FEvtAdxSoundFadePayload::Time' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundFadePayload, TargetVolume) == 0x000010, "Member 'FEvtAdxSoundFadePayload::TargetVolume' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtAdxSoundFadeSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtAdxSoundFadeSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtAdxSoundFadePayload>        KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtAdxSoundFadeSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtAdxSoundFadeSectionData");
static_assert(sizeof(FMovieSceneEvtAdxSoundFadeSectionData) == 0x000088, "Wrong size on FMovieSceneEvtAdxSoundFadeSectionData");
static_assert(offsetof(FMovieSceneEvtAdxSoundFadeSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtAdxSoundFadeSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtAdxSoundFadeSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtAdxSoundFadeSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.DungeonAssignFlagsData
// 0x0010 (0x0010 - 0x0000)
struct FDungeonAssignFlagsData final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FlagName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonAssignFlagsData) == 0x000004, "Wrong alignment on FDungeonAssignFlagsData");
static_assert(sizeof(FDungeonAssignFlagsData) == 0x000010, "Wrong size on FDungeonAssignFlagsData");
static_assert(offsetof(FDungeonAssignFlagsData, Tag) == 0x000000, "Member 'FDungeonAssignFlagsData::Tag' has a wrong offset!");
static_assert(offsetof(FDungeonAssignFlagsData, FlagName) == 0x000008, "Member 'FDungeonAssignFlagsData::FlagName' has a wrong offset!");

// ScriptStruct xrd777.DungeonFloorFlagsData
// 0x0018 (0x0018 - 0x0000)
struct FDungeonFloorFlagsData final
{
public:
	uint32                                        FloorNo;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDungeonAssignFlagsData>        AssignFlagList;                                    // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonFloorFlagsData) == 0x000008, "Wrong alignment on FDungeonFloorFlagsData");
static_assert(sizeof(FDungeonFloorFlagsData) == 0x000018, "Wrong size on FDungeonFloorFlagsData");
static_assert(offsetof(FDungeonFloorFlagsData, FloorNo) == 0x000000, "Member 'FDungeonFloorFlagsData::FloorNo' has a wrong offset!");
static_assert(offsetof(FDungeonFloorFlagsData, AssignFlagList) == 0x000008, "Member 'FDungeonFloorFlagsData::AssignFlagList' has a wrong offset!");

// ScriptStruct xrd777.DungeonFloorFlagsDataTableRow
// 0x0010 (0x0018 - 0x0008)
struct FDungeonFloorFlagsDataTableRow final : public FTableRowBase
{
public:
	TArray<struct FDungeonFloorFlagsData>         Data;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonFloorFlagsDataTableRow) == 0x000008, "Wrong alignment on FDungeonFloorFlagsDataTableRow");
static_assert(sizeof(FDungeonFloorFlagsDataTableRow) == 0x000018, "Wrong size on FDungeonFloorFlagsDataTableRow");
static_assert(offsetof(FDungeonFloorFlagsDataTableRow, Data) == 0x000008, "Member 'FDungeonFloorFlagsDataTableRow::Data' has a wrong offset!");

// ScriptStruct xrd777.SelData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSelData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSelData) == 0x000008, "Wrong alignment on FSelData");
static_assert(sizeof(FSelData) == 0x000020, "Wrong size on FSelData");

// ScriptStruct xrd777.DungeonFloorFlagsIDData
// 0x000C (0x000C - 0x0000)
struct FDungeonFloorFlagsIDData final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ID;                                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonFloorFlagsIDData) == 0x000004, "Wrong alignment on FDungeonFloorFlagsIDData");
static_assert(sizeof(FDungeonFloorFlagsIDData) == 0x00000C, "Wrong size on FDungeonFloorFlagsIDData");
static_assert(offsetof(FDungeonFloorFlagsIDData, Tag) == 0x000000, "Member 'FDungeonFloorFlagsIDData::Tag' has a wrong offset!");
static_assert(offsetof(FDungeonFloorFlagsIDData, ID) == 0x000008, "Member 'FDungeonFloorFlagsIDData::ID' has a wrong offset!");

// ScriptStruct xrd777.GWFlagType
// 0x0020 (0x0028 - 0x0008)
struct FGWFlagType final : public FTableRowBase
{
public:
	uint32                                        Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Offset;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGWFlagType) == 0x000008, "Wrong alignment on FGWFlagType");
static_assert(sizeof(FGWFlagType) == 0x000028, "Wrong size on FGWFlagType");
static_assert(offsetof(FGWFlagType, Value) == 0x000008, "Member 'FGWFlagType::Value' has a wrong offset!");
static_assert(offsetof(FGWFlagType, Offset) == 0x00000C, "Member 'FGWFlagType::Offset' has a wrong offset!");
static_assert(offsetof(FGWFlagType, Comment) == 0x000010, "Member 'FGWFlagType::Comment' has a wrong offset!");

// ScriptStruct xrd777.DungeonTrophyValue
// 0x0014 (0x0014 - 0x0000)
struct FDungeonTrophyValue final
{
public:
	class FName                                   CounterName;                                       // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CountMax;                                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonTrophyValue) == 0x000004, "Wrong alignment on FDungeonTrophyValue");
static_assert(sizeof(FDungeonTrophyValue) == 0x000014, "Wrong size on FDungeonTrophyValue");
static_assert(offsetof(FDungeonTrophyValue, CounterName) == 0x000000, "Member 'FDungeonTrophyValue::CounterName' has a wrong offset!");
static_assert(offsetof(FDungeonTrophyValue, Name) == 0x000008, "Member 'FDungeonTrophyValue::Name' has a wrong offset!");
static_assert(offsetof(FDungeonTrophyValue, CountMax) == 0x000010, "Member 'FDungeonTrophyValue::CountMax' has a wrong offset!");

// ScriptStruct xrd777.DungeonUROParamData
// 0x0010 (0x0010 - 0x0000)
struct FDungeonUROParamData final
{
public:
	TArray<float>                                 ThresholdSizeList;                                 // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonUROParamData) == 0x000008, "Wrong alignment on FDungeonUROParamData");
static_assert(sizeof(FDungeonUROParamData) == 0x000010, "Wrong size on FDungeonUROParamData");
static_assert(offsetof(FDungeonUROParamData, ThresholdSizeList) == 0x000000, "Member 'FDungeonUROParamData::ThresholdSizeList' has a wrong offset!");

// ScriptStruct xrd777.DungeonResetData
// 0x0010 (0x0010 - 0x0000)
struct FDungeonResetData final
{
public:
	EDungeonResetDataType                         DataType;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DataName;                                          // 0x0004(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DataState;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonResetData) == 0x000004, "Wrong alignment on FDungeonResetData");
static_assert(sizeof(FDungeonResetData) == 0x000010, "Wrong size on FDungeonResetData");
static_assert(offsetof(FDungeonResetData, DataType) == 0x000000, "Member 'FDungeonResetData::DataType' has a wrong offset!");
static_assert(offsetof(FDungeonResetData, DataName) == 0x000004, "Member 'FDungeonResetData::DataName' has a wrong offset!");
static_assert(offsetof(FDungeonResetData, DataState) == 0x00000C, "Member 'FDungeonResetData::DataState' has a wrong offset!");

// ScriptStruct xrd777.DungeonResetList
// 0x0010 (0x0010 - 0x0000)
struct FDungeonResetList final
{
public:
	TArray<struct FDungeonResetData>              ResetData;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonResetList) == 0x000008, "Wrong alignment on FDungeonResetList");
static_assert(sizeof(FDungeonResetList) == 0x000010, "Wrong size on FDungeonResetList");
static_assert(offsetof(FDungeonResetList, ResetData) == 0x000000, "Member 'FDungeonResetList::ResetData' has a wrong offset!");

// ScriptStruct xrd777.DungeonPartConnectInfoData
// 0x0004 (0x0004 - 0x0000)
struct FDungeonPartConnectInfoData final
{
public:
	bool                                          ConnectUp;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConnectLeft;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConnectDown;                                       // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ConnectRight;                                      // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonPartConnectInfoData) == 0x000001, "Wrong alignment on FDungeonPartConnectInfoData");
static_assert(sizeof(FDungeonPartConnectInfoData) == 0x000004, "Wrong size on FDungeonPartConnectInfoData");
static_assert(offsetof(FDungeonPartConnectInfoData, ConnectUp) == 0x000000, "Member 'FDungeonPartConnectInfoData::ConnectUp' has a wrong offset!");
static_assert(offsetof(FDungeonPartConnectInfoData, ConnectLeft) == 0x000001, "Member 'FDungeonPartConnectInfoData::ConnectLeft' has a wrong offset!");
static_assert(offsetof(FDungeonPartConnectInfoData, ConnectDown) == 0x000002, "Member 'FDungeonPartConnectInfoData::ConnectDown' has a wrong offset!");
static_assert(offsetof(FDungeonPartConnectInfoData, ConnectRight) == 0x000003, "Member 'FDungeonPartConnectInfoData::ConnectRight' has a wrong offset!");

// ScriptStruct xrd777.DungeonLightAttenuationData
// 0x0008 (0x0008 - 0x0000)
struct FDungeonLightAttenuationData final
{
public:
	float                                         StartDist;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDist;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonLightAttenuationData) == 0x000004, "Wrong alignment on FDungeonLightAttenuationData");
static_assert(sizeof(FDungeonLightAttenuationData) == 0x000008, "Wrong size on FDungeonLightAttenuationData");
static_assert(offsetof(FDungeonLightAttenuationData, StartDist) == 0x000000, "Member 'FDungeonLightAttenuationData::StartDist' has a wrong offset!");
static_assert(offsetof(FDungeonLightAttenuationData, EndDist) == 0x000004, "Member 'FDungeonLightAttenuationData::EndDist' has a wrong offset!");

// ScriptStruct xrd777.DungeonBrokenObjData
// 0x0004 (0x0004 - 0x0000)
struct FDungeonBrokenObjData final
{
public:
	int32                                         FragmentProbability;                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonBrokenObjData) == 0x000004, "Wrong alignment on FDungeonBrokenObjData");
static_assert(sizeof(FDungeonBrokenObjData) == 0x000004, "Wrong size on FDungeonBrokenObjData");
static_assert(offsetof(FDungeonBrokenObjData, FragmentProbability) == 0x000000, "Member 'FDungeonBrokenObjData::FragmentProbability' has a wrong offset!");

// ScriptStruct xrd777.DungeonEnemyModelIDData
// 0x0008 (0x0008 - 0x0000)
struct FDungeonEnemyModelIDData final
{
public:
	int32                                         MajorId;                                           // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorId;                                           // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonEnemyModelIDData) == 0x000004, "Wrong alignment on FDungeonEnemyModelIDData");
static_assert(sizeof(FDungeonEnemyModelIDData) == 0x000008, "Wrong size on FDungeonEnemyModelIDData");
static_assert(offsetof(FDungeonEnemyModelIDData, MajorId) == 0x000000, "Member 'FDungeonEnemyModelIDData::MajorId' has a wrong offset!");
static_assert(offsetof(FDungeonEnemyModelIDData, MinorId) == 0x000004, "Member 'FDungeonEnemyModelIDData::MinorId' has a wrong offset!");

// ScriptStruct xrd777.DungeonEnemyModelParamData
// 0x000C (0x000C - 0x0000)
struct FDungeonEnemyModelParamData final
{
public:
	float                                         ScaleX;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleZ;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonEnemyModelParamData) == 0x000004, "Wrong alignment on FDungeonEnemyModelParamData");
static_assert(sizeof(FDungeonEnemyModelParamData) == 0x00000C, "Wrong size on FDungeonEnemyModelParamData");
static_assert(offsetof(FDungeonEnemyModelParamData, ScaleX) == 0x000000, "Member 'FDungeonEnemyModelParamData::ScaleX' has a wrong offset!");
static_assert(offsetof(FDungeonEnemyModelParamData, ScaleY) == 0x000004, "Member 'FDungeonEnemyModelParamData::ScaleY' has a wrong offset!");
static_assert(offsetof(FDungeonEnemyModelParamData, ScaleZ) == 0x000008, "Member 'FDungeonEnemyModelParamData::ScaleZ' has a wrong offset!");

// ScriptStruct xrd777.DungeonMDoorPacIdData
// 0x000C (0x000C - 0x0000)
struct FDungeonMDoorPacIdData final
{
public:
	int32                                         FbdPackIdBaseWeighting;                            // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FbdPackIdRevisedWeighting;                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FbdPackIdRevisedWeightingOfHuman;                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonMDoorPacIdData) == 0x000004, "Wrong alignment on FDungeonMDoorPacIdData");
static_assert(sizeof(FDungeonMDoorPacIdData) == 0x00000C, "Wrong size on FDungeonMDoorPacIdData");
static_assert(offsetof(FDungeonMDoorPacIdData, FbdPackIdBaseWeighting) == 0x000000, "Member 'FDungeonMDoorPacIdData::FbdPackIdBaseWeighting' has a wrong offset!");
static_assert(offsetof(FDungeonMDoorPacIdData, FbdPackIdRevisedWeighting) == 0x000004, "Member 'FDungeonMDoorPacIdData::FbdPackIdRevisedWeighting' has a wrong offset!");
static_assert(offsetof(FDungeonMDoorPacIdData, FbdPackIdRevisedWeightingOfHuman) == 0x000008, "Member 'FDungeonMDoorPacIdData::FbdPackIdRevisedWeightingOfHuman' has a wrong offset!");

// ScriptStruct xrd777.DungeonPathGroupList
// 0x0010 (0x0010 - 0x0000)
struct FDungeonPathGroupList final
{
public:
	TArray<struct FDungeonPathList>               GroupList;                                         // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonPathGroupList) == 0x000008, "Wrong alignment on FDungeonPathGroupList");
static_assert(sizeof(FDungeonPathGroupList) == 0x000010, "Wrong size on FDungeonPathGroupList");
static_assert(offsetof(FDungeonPathGroupList, GroupList) == 0x000000, "Member 'FDungeonPathGroupList::GroupList' has a wrong offset!");

// ScriptStruct xrd777.DungeonParamDataTableRow
// 0x03E0 (0x03E8 - 0x0008)
struct FDungeonParamDataTableRow final : public FTableRowBase
{
public:
	TMap<EDungeonTrophyType, struct FDungeonTrophyValue> TrophyValue;                                       // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<EDungeonResetTiming, struct FDungeonResetList> ResetTimingData;                                   // 0x0058(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<EPartType, struct FDungeonPartConnectInfoData> PartConnectInfo;                                   // 0x00A8(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FDungeonPartOpenInfoData               PartOpenInfo;                                      // 0x00F8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TMap<int32, struct FDungeonLightAttenuationData> PartLightAttenuationData;                          // 0x0100(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FDungeonLightAttenuationData           ObjectLightAttenuationData;                        // 0x0150(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FDungeonUROParamData                   PartUROParamData;                                  // 0x0158(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FDungeonUROParamData                   ObjectUROParamData;                                // 0x0168(0x0010)(Edit, NativeAccessSpecifierPublic)
	struct FDungeonBrokenObjData                  BrokenObjData;                                     // 0x0178(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDungeonFDoorAppearanceData            FDoorAppearanceData;                               // 0x0180(0x0028)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FDungeonEnemyModelIDData>  EnemyModelID;                                      // 0x01A8(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FDungeonEnemyModelParamData> EnemyModelParamData;                               // 0x01F8(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            MDoorBuildID;                                      // 0x0248(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FDungeonMDoorEncountIDData> MDoorEncountID;                                    // 0x0298(0x0050)(Edit, NativeAccessSpecifierPublic)
	struct FDungeonMDoorPacIdData                 MDoorPacIdData;                                    // 0x02E8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, EDungeonMisNpcType>               MisNpcType;                                        // 0x02F8(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<EDungeonPathType, struct FDungeonPathGroupList> DataPath;                                          // 0x0348(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<EDungeonLevelPathType, struct FDungeonPathList> LevelPath;                                         // 0x0398(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonParamDataTableRow) == 0x000008, "Wrong alignment on FDungeonParamDataTableRow");
static_assert(sizeof(FDungeonParamDataTableRow) == 0x0003E8, "Wrong size on FDungeonParamDataTableRow");
static_assert(offsetof(FDungeonParamDataTableRow, TrophyValue) == 0x000008, "Member 'FDungeonParamDataTableRow::TrophyValue' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, ResetTimingData) == 0x000058, "Member 'FDungeonParamDataTableRow::ResetTimingData' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, PartConnectInfo) == 0x0000A8, "Member 'FDungeonParamDataTableRow::PartConnectInfo' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, PartOpenInfo) == 0x0000F8, "Member 'FDungeonParamDataTableRow::PartOpenInfo' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, PartLightAttenuationData) == 0x000100, "Member 'FDungeonParamDataTableRow::PartLightAttenuationData' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, ObjectLightAttenuationData) == 0x000150, "Member 'FDungeonParamDataTableRow::ObjectLightAttenuationData' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, PartUROParamData) == 0x000158, "Member 'FDungeonParamDataTableRow::PartUROParamData' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, ObjectUROParamData) == 0x000168, "Member 'FDungeonParamDataTableRow::ObjectUROParamData' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, BrokenObjData) == 0x000178, "Member 'FDungeonParamDataTableRow::BrokenObjData' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, FDoorAppearanceData) == 0x000180, "Member 'FDungeonParamDataTableRow::FDoorAppearanceData' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, EnemyModelID) == 0x0001A8, "Member 'FDungeonParamDataTableRow::EnemyModelID' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, EnemyModelParamData) == 0x0001F8, "Member 'FDungeonParamDataTableRow::EnemyModelParamData' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, MDoorBuildID) == 0x000248, "Member 'FDungeonParamDataTableRow::MDoorBuildID' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, MDoorEncountID) == 0x000298, "Member 'FDungeonParamDataTableRow::MDoorEncountID' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, MDoorPacIdData) == 0x0002E8, "Member 'FDungeonParamDataTableRow::MDoorPacIdData' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, MisNpcType) == 0x0002F8, "Member 'FDungeonParamDataTableRow::MisNpcType' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, DataPath) == 0x000348, "Member 'FDungeonParamDataTableRow::DataPath' has a wrong offset!");
static_assert(offsetof(FDungeonParamDataTableRow, LevelPath) == 0x000398, "Member 'FDungeonParamDataTableRow::LevelPath' has a wrong offset!");

// ScriptStruct xrd777.UIMailAnimParams
// 0x0034 (0x0034 - 0x0000)
struct FUIMailAnimParams final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsePos;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseColor;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseAngle;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseValue;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StartPos;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndPos;                                            // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 StartColor;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 EndColor;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAngle;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIMailAnimParams) == 0x000004, "Wrong alignment on FUIMailAnimParams");
static_assert(sizeof(FUIMailAnimParams) == 0x000034, "Wrong size on FUIMailAnimParams");
static_assert(offsetof(FUIMailAnimParams, StartFrame) == 0x000000, "Member 'FUIMailAnimParams::StartFrame' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, EndFrame) == 0x000004, "Member 'FUIMailAnimParams::EndFrame' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, bIsUsePos) == 0x000008, "Member 'FUIMailAnimParams::bIsUsePos' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, bIsUseColor) == 0x000009, "Member 'FUIMailAnimParams::bIsUseColor' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, bIsUseAngle) == 0x00000A, "Member 'FUIMailAnimParams::bIsUseAngle' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, bIsUseValue) == 0x00000B, "Member 'FUIMailAnimParams::bIsUseValue' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, StartPos) == 0x00000C, "Member 'FUIMailAnimParams::StartPos' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, EndPos) == 0x000014, "Member 'FUIMailAnimParams::EndPos' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, StartColor) == 0x00001C, "Member 'FUIMailAnimParams::StartColor' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, EndColor) == 0x000020, "Member 'FUIMailAnimParams::EndColor' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, StartAngle) == 0x000024, "Member 'FUIMailAnimParams::StartAngle' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, EndAngle) == 0x000028, "Member 'FUIMailAnimParams::EndAngle' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, StartValue) == 0x00002C, "Member 'FUIMailAnimParams::StartValue' has a wrong offset!");
static_assert(offsetof(FUIMailAnimParams, EndValue) == 0x000030, "Member 'FUIMailAnimParams::EndValue' has a wrong offset!");

// ScriptStruct xrd777.EvtAdxSoundPayload
// 0x0018 (0x0018 - 0x0000)
struct FEvtAdxSoundPayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMajorID;                                     // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtSoundCategoryType                         EvtSoundCategoryType;                              // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtAdxTrackSoundOperationType                EvtAdxSoundOperationType;                          // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhileHighSpeed;                               // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEvtAdxSoundPayload) == 0x000004, "Wrong alignment on FEvtAdxSoundPayload");
static_assert(sizeof(FEvtAdxSoundPayload) == 0x000018, "Wrong size on FEvtAdxSoundPayload");
static_assert(offsetof(FEvtAdxSoundPayload, EventName) == 0x000000, "Member 'FEvtAdxSoundPayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundPayload, PlayerMajorID) == 0x000008, "Member 'FEvtAdxSoundPayload::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundPayload, PlayerMinorID) == 0x00000C, "Member 'FEvtAdxSoundPayload::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundPayload, CueId) == 0x000010, "Member 'FEvtAdxSoundPayload::CueId' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundPayload, EvtSoundCategoryType) == 0x000014, "Member 'FEvtAdxSoundPayload::EvtSoundCategoryType' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundPayload, EvtAdxSoundOperationType) == 0x000015, "Member 'FEvtAdxSoundPayload::EvtAdxSoundOperationType' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundPayload, bStopWhileHighSpeed) == 0x000016, "Member 'FEvtAdxSoundPayload::bStopWhileHighSpeed' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtConditionalBranchData
// 0x0028 (0x0028 - 0x0000)
struct FMovieSceneEvtConditionalBranchData final
{
public:
	EEvtConditionalBranchType                     ConditionalType;                                   // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ConditionalNo;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionalValue;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtConditionalBranchCompType                 CompareType;                                       // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectBindingID             EvtManagerBindingID;                               // 0x0010(0x0018)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvtConditionalBranchData) == 0x000004, "Wrong alignment on FMovieSceneEvtConditionalBranchData");
static_assert(sizeof(FMovieSceneEvtConditionalBranchData) == 0x000028, "Wrong size on FMovieSceneEvtConditionalBranchData");
static_assert(offsetof(FMovieSceneEvtConditionalBranchData, ConditionalType) == 0x000000, "Member 'FMovieSceneEvtConditionalBranchData::ConditionalType' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtConditionalBranchData, ConditionalNo) == 0x000004, "Member 'FMovieSceneEvtConditionalBranchData::ConditionalNo' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtConditionalBranchData, ConditionalValue) == 0x000008, "Member 'FMovieSceneEvtConditionalBranchData::ConditionalValue' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtConditionalBranchData, CompareType) == 0x00000C, "Member 'FMovieSceneEvtConditionalBranchData::CompareType' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtConditionalBranchData, EvtManagerBindingID) == 0x000010, "Member 'FMovieSceneEvtConditionalBranchData::EvtManagerBindingID' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtAdxSoundFadeSectionTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieSceneEvtAdxSoundFadeSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtAdxSoundFadeSectionData  EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00BC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtAdxSoundFadeSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtAdxSoundFadeSectionTemplate");
static_assert(sizeof(FMovieSceneEvtAdxSoundFadeSectionTemplate) == 0x0000E8, "Wrong size on FMovieSceneEvtAdxSoundFadeSectionTemplate");
static_assert(offsetof(FMovieSceneEvtAdxSoundFadeSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtAdxSoundFadeSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtAdxSoundFadeSectionTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtAdxSoundFadeSectionTemplate::EventReceivers' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtAdxSoundFadeSectionTemplate, CondBranchData) == 0x0000BC, "Member 'FMovieSceneEvtAdxSoundFadeSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.StaffRollText
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FStaffRollText final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStaffRollText) == 0x000008, "Wrong alignment on FStaffRollText");
static_assert(sizeof(FStaffRollText) == 0x000038, "Wrong size on FStaffRollText");

// ScriptStruct xrd777.EvtAdxSoundManagePayload
// 0x0024 (0x0024 - 0x0000)
struct FEvtAdxSoundManagePayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtSoundManageOperationType                  EvtAdxSoundManageOperationType;                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Month;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldTimeZone                                  TimeZone;                                          // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ControlId;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlValue;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControlFrame;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtAdxSoundManagePayload) == 0x000004, "Wrong alignment on FEvtAdxSoundManagePayload");
static_assert(sizeof(FEvtAdxSoundManagePayload) == 0x000024, "Wrong size on FEvtAdxSoundManagePayload");
static_assert(offsetof(FEvtAdxSoundManagePayload, EventName) == 0x000000, "Member 'FEvtAdxSoundManagePayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundManagePayload, EvtAdxSoundManageOperationType) == 0x000008, "Member 'FEvtAdxSoundManagePayload::EvtAdxSoundManageOperationType' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundManagePayload, Month) == 0x00000C, "Member 'FEvtAdxSoundManagePayload::Month' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundManagePayload, Day) == 0x000010, "Member 'FEvtAdxSoundManagePayload::Day' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundManagePayload, TimeZone) == 0x000014, "Member 'FEvtAdxSoundManagePayload::TimeZone' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundManagePayload, ControlId) == 0x000018, "Member 'FEvtAdxSoundManagePayload::ControlId' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundManagePayload, ControlValue) == 0x00001C, "Member 'FEvtAdxSoundManagePayload::ControlValue' has a wrong offset!");
static_assert(offsetof(FEvtAdxSoundManagePayload, ControlFrame) == 0x000020, "Member 'FEvtAdxSoundManagePayload::ControlFrame' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtAdxSoundManageSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtAdxSoundManageSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtAdxSoundManagePayload>      KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtAdxSoundManageSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtAdxSoundManageSectionData");
static_assert(sizeof(FMovieSceneEvtAdxSoundManageSectionData) == 0x000088, "Wrong size on FMovieSceneEvtAdxSoundManageSectionData");
static_assert(offsetof(FMovieSceneEvtAdxSoundManageSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtAdxSoundManageSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtAdxSoundManageSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtAdxSoundManageSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtAdxSoundManageSectionTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieSceneEvtAdxSoundManageSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtAdxSoundManageSectionData EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00BC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtAdxSoundManageSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtAdxSoundManageSectionTemplate");
static_assert(sizeof(FMovieSceneEvtAdxSoundManageSectionTemplate) == 0x0000E8, "Wrong size on FMovieSceneEvtAdxSoundManageSectionTemplate");
static_assert(offsetof(FMovieSceneEvtAdxSoundManageSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtAdxSoundManageSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtAdxSoundManageSectionTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtAdxSoundManageSectionTemplate::EventReceivers' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtAdxSoundManageSectionTemplate, CondBranchData) == 0x0000BC, "Member 'FMovieSceneEvtAdxSoundManageSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.EvtCharaHandwritingPayload
// 0x0040 (0x0040 - 0x0000)
struct FEvtCharaHandwritingPayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtCharaHandwritingSpawnOwnerType            OwnerType;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttached;                                         // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtlEvtHandwritingType                        HandwritingType;                                   // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BoneName;                                          // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraOffset;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtCharaHandwritingPayload) == 0x000008, "Wrong alignment on FEvtCharaHandwritingPayload");
static_assert(sizeof(FEvtCharaHandwritingPayload) == 0x000040, "Wrong size on FEvtCharaHandwritingPayload");
static_assert(offsetof(FEvtCharaHandwritingPayload, EventName) == 0x000000, "Member 'FEvtCharaHandwritingPayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtCharaHandwritingPayload, OwnerType) == 0x000008, "Member 'FEvtCharaHandwritingPayload::OwnerType' has a wrong offset!");
static_assert(offsetof(FEvtCharaHandwritingPayload, bAttached) == 0x000009, "Member 'FEvtCharaHandwritingPayload::bAttached' has a wrong offset!");
static_assert(offsetof(FEvtCharaHandwritingPayload, HandwritingType) == 0x00000A, "Member 'FEvtCharaHandwritingPayload::HandwritingType' has a wrong offset!");
static_assert(offsetof(FEvtCharaHandwritingPayload, Location) == 0x00000C, "Member 'FEvtCharaHandwritingPayload::Location' has a wrong offset!");
static_assert(offsetof(FEvtCharaHandwritingPayload, Scale) == 0x000018, "Member 'FEvtCharaHandwritingPayload::Scale' has a wrong offset!");
static_assert(offsetof(FEvtCharaHandwritingPayload, BoneName) == 0x000028, "Member 'FEvtCharaHandwritingPayload::BoneName' has a wrong offset!");
static_assert(offsetof(FEvtCharaHandwritingPayload, LoopCount) == 0x000038, "Member 'FEvtCharaHandwritingPayload::LoopCount' has a wrong offset!");
static_assert(offsetof(FEvtCharaHandwritingPayload, CameraOffset) == 0x00003C, "Member 'FEvtCharaHandwritingPayload::CameraOffset' has a wrong offset!");

// ScriptStruct xrd777.EvtCharaAnimationPayload
// 0x0040 (0x0040 - 0x0000)
struct FEvtCharaAnimationPayload final
{
public:
	class UAnimSequenceBase*                      Animation;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotName;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtCharaAnimationSlotType                    SlotType;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartOffset;                                       // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffset;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendIn;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOut;                                          // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtCharaAnimationType                        CharaAnimationType;                                // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtlSlotMultiAnimationParam>    AnimArray;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtCharaAnimationPayload) == 0x000008, "Wrong alignment on FEvtCharaAnimationPayload");
static_assert(sizeof(FEvtCharaAnimationPayload) == 0x000040, "Wrong size on FEvtCharaAnimationPayload");
static_assert(offsetof(FEvtCharaAnimationPayload, Animation) == 0x000000, "Member 'FEvtCharaAnimationPayload::Animation' has a wrong offset!");
static_assert(offsetof(FEvtCharaAnimationPayload, SlotName) == 0x000008, "Member 'FEvtCharaAnimationPayload::SlotName' has a wrong offset!");
static_assert(offsetof(FEvtCharaAnimationPayload, SlotType) == 0x000010, "Member 'FEvtCharaAnimationPayload::SlotType' has a wrong offset!");
static_assert(offsetof(FEvtCharaAnimationPayload, StartOffset) == 0x000014, "Member 'FEvtCharaAnimationPayload::StartOffset' has a wrong offset!");
static_assert(offsetof(FEvtCharaAnimationPayload, EndOffset) == 0x000018, "Member 'FEvtCharaAnimationPayload::EndOffset' has a wrong offset!");
static_assert(offsetof(FEvtCharaAnimationPayload, BlendIn) == 0x00001C, "Member 'FEvtCharaAnimationPayload::BlendIn' has a wrong offset!");
static_assert(offsetof(FEvtCharaAnimationPayload, BlendOut) == 0x000020, "Member 'FEvtCharaAnimationPayload::BlendOut' has a wrong offset!");
static_assert(offsetof(FEvtCharaAnimationPayload, PlayRate) == 0x000024, "Member 'FEvtCharaAnimationPayload::PlayRate' has a wrong offset!");
static_assert(offsetof(FEvtCharaAnimationPayload, CharaAnimationType) == 0x000028, "Member 'FEvtCharaAnimationPayload::CharaAnimationType' has a wrong offset!");
static_assert(offsetof(FEvtCharaAnimationPayload, AnimArray) == 0x000030, "Member 'FEvtCharaAnimationPayload::AnimArray' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaAnimationSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtCharaAnimationSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtCharaAnimationPayload>      KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaAnimationSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaAnimationSectionData");
static_assert(sizeof(FMovieSceneEvtCharaAnimationSectionData) == 0x000088, "Wrong size on FMovieSceneEvtCharaAnimationSectionData");
static_assert(offsetof(FMovieSceneEvtCharaAnimationSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtCharaAnimationSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaAnimationSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtCharaAnimationSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaPackAnimationSectionTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieSceneEvtCharaPackAnimationSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtCharaPackAnimationSectionData EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00BC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaPackAnimationSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaPackAnimationSectionTemplate");
static_assert(sizeof(FMovieSceneEvtCharaPackAnimationSectionTemplate) == 0x0000E8, "Wrong size on FMovieSceneEvtCharaPackAnimationSectionTemplate");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtCharaPackAnimationSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationSectionTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtCharaPackAnimationSectionTemplate::EventReceivers' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPackAnimationSectionTemplate, CondBranchData) == 0x0000BC, "Member 'FMovieSceneEvtCharaPackAnimationSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.DungeonPartFDoorTypeDataTableRow
// 0x0018 (0x0020 - 0x0008)
struct FDungeonPartFDoorTypeDataTableRow final : public FTableRowBase
{
public:
	TArray<struct FDungeonPartVariationData>      TypeList;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         VarNo;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDungeonPartFDoorTypeDataTableRow) == 0x000008, "Wrong alignment on FDungeonPartFDoorTypeDataTableRow");
static_assert(sizeof(FDungeonPartFDoorTypeDataTableRow) == 0x000020, "Wrong size on FDungeonPartFDoorTypeDataTableRow");
static_assert(offsetof(FDungeonPartFDoorTypeDataTableRow, TypeList) == 0x000008, "Member 'FDungeonPartFDoorTypeDataTableRow::TypeList' has a wrong offset!");
static_assert(offsetof(FDungeonPartFDoorTypeDataTableRow, VarNo) == 0x000018, "Member 'FDungeonPartFDoorTypeDataTableRow::VarNo' has a wrong offset!");

// ScriptStruct xrd777.DungeonPartVariationDataTableRow
// 0x0030 (0x0038 - 0x0008)
struct FDungeonPartVariationDataTableRow final : public FTableRowBase
{
public:
	TArray<struct FDungeonPartVariationData>      VarNoList;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDungeonPartVariationData>      FixedVarNoList;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FDungeonPartVariationData>      MonadVarNoList;                                    // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonPartVariationDataTableRow) == 0x000008, "Wrong alignment on FDungeonPartVariationDataTableRow");
static_assert(sizeof(FDungeonPartVariationDataTableRow) == 0x000038, "Wrong size on FDungeonPartVariationDataTableRow");
static_assert(offsetof(FDungeonPartVariationDataTableRow, VarNoList) == 0x000008, "Member 'FDungeonPartVariationDataTableRow::VarNoList' has a wrong offset!");
static_assert(offsetof(FDungeonPartVariationDataTableRow, FixedVarNoList) == 0x000018, "Member 'FDungeonPartVariationDataTableRow::FixedVarNoList' has a wrong offset!");
static_assert(offsetof(FDungeonPartVariationDataTableRow, MonadVarNoList) == 0x000028, "Member 'FDungeonPartVariationDataTableRow::MonadVarNoList' has a wrong offset!");

// ScriptStruct xrd777.DungeonUIDrawDataTable
// 0x0050 (0x0058 - 0x0008)
struct FDungeonUIDrawDataTable final : public FTableRowBase
{
public:
	TMap<int32, struct FDungeonUIDrawData>        DrawData;                                          // 0x0008(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonUIDrawDataTable) == 0x000008, "Wrong alignment on FDungeonUIDrawDataTable");
static_assert(sizeof(FDungeonUIDrawDataTable) == 0x000058, "Wrong size on FDungeonUIDrawDataTable");
static_assert(offsetof(FDungeonUIDrawDataTable, DrawData) == 0x000008, "Member 'FDungeonUIDrawDataTable::DrawData' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtDialogueOptionsSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtDialogueOptionsSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtDialogueOptionsPayload>     KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtDialogueOptionsSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtDialogueOptionsSectionData");
static_assert(sizeof(FMovieSceneEvtDialogueOptionsSectionData) == 0x000088, "Wrong size on FMovieSceneEvtDialogueOptionsSectionData");
static_assert(offsetof(FMovieSceneEvtDialogueOptionsSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtDialogueOptionsSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtDialogueOptionsSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtDialogueOptionsSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.EvtCharaOperationControllerPayload
// 0x0014 (0x0014 - 0x0000)
struct FEvtCharaOperationControllerPayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtCharaOperationType                        OperationID;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtCharaOperationFootStepLabelType           FootStepLabelType;                                 // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FootStepLabelName;                                 // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtCharaOperationControllerPayload) == 0x000004, "Wrong alignment on FEvtCharaOperationControllerPayload");
static_assert(sizeof(FEvtCharaOperationControllerPayload) == 0x000014, "Wrong size on FEvtCharaOperationControllerPayload");
static_assert(offsetof(FEvtCharaOperationControllerPayload, EventName) == 0x000000, "Member 'FEvtCharaOperationControllerPayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtCharaOperationControllerPayload, OperationID) == 0x000008, "Member 'FEvtCharaOperationControllerPayload::OperationID' has a wrong offset!");
static_assert(offsetof(FEvtCharaOperationControllerPayload, FootStepLabelType) == 0x000009, "Member 'FEvtCharaOperationControllerPayload::FootStepLabelType' has a wrong offset!");
static_assert(offsetof(FEvtCharaOperationControllerPayload, FootStepLabelName) == 0x00000C, "Member 'FEvtCharaOperationControllerPayload::FootStepLabelName' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaOperationControllerSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtCharaOperationControllerSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtCharaOperationControllerPayload> KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaOperationControllerSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaOperationControllerSectionData");
static_assert(sizeof(FMovieSceneEvtCharaOperationControllerSectionData) == 0x000088, "Wrong size on FMovieSceneEvtCharaOperationControllerSectionData");
static_assert(offsetof(FMovieSceneEvtCharaOperationControllerSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtCharaOperationControllerSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaOperationControllerSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtCharaOperationControllerSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaOperationControllerSectionTemplate
// 0x00B8 (0x00D8 - 0x0020)
struct FMovieSceneEvtCharaOperationControllerSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtCharaOperationControllerSectionData EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00AC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaOperationControllerSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaOperationControllerSectionTemplate");
static_assert(sizeof(FMovieSceneEvtCharaOperationControllerSectionTemplate) == 0x0000D8, "Wrong size on FMovieSceneEvtCharaOperationControllerSectionTemplate");
static_assert(offsetof(FMovieSceneEvtCharaOperationControllerSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtCharaOperationControllerSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaOperationControllerSectionTemplate, CondBranchData) == 0x0000AC, "Member 'FMovieSceneEvtCharaOperationControllerSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.EvtCharaPropAttachPayload
// 0x003C (0x003C - 0x0000)
struct FEvtCharaPropAttachPayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtlEvtPropAttachType                         PropAttachType;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectBindingID             PropActorBindingID;                                // 0x000C(0x0018)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             PropActorDetachPointBindingID;                     // 0x0024(0x0018)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtCharaPropAttachPayload) == 0x000004, "Wrong alignment on FEvtCharaPropAttachPayload");
static_assert(sizeof(FEvtCharaPropAttachPayload) == 0x00003C, "Wrong size on FEvtCharaPropAttachPayload");
static_assert(offsetof(FEvtCharaPropAttachPayload, EventName) == 0x000000, "Member 'FEvtCharaPropAttachPayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtCharaPropAttachPayload, PropAttachType) == 0x000008, "Member 'FEvtCharaPropAttachPayload::PropAttachType' has a wrong offset!");
static_assert(offsetof(FEvtCharaPropAttachPayload, PropActorBindingID) == 0x00000C, "Member 'FEvtCharaPropAttachPayload::PropActorBindingID' has a wrong offset!");
static_assert(offsetof(FEvtCharaPropAttachPayload, PropActorDetachPointBindingID) == 0x000024, "Member 'FEvtCharaPropAttachPayload::PropActorDetachPointBindingID' has a wrong offset!");

// ScriptStruct xrd777.FldEnemyFootprint
// 0x0014 (0x0014 - 0x0000)
struct FFldEnemyFootprint final
{
public:
	float                                         Length;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                BeforLocation;                                     // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldEnemyFootprint) == 0x000004, "Wrong alignment on FFldEnemyFootprint");
static_assert(sizeof(FFldEnemyFootprint) == 0x000014, "Wrong size on FFldEnemyFootprint");
static_assert(offsetof(FFldEnemyFootprint, Length) == 0x000000, "Member 'FFldEnemyFootprint::Length' has a wrong offset!");
static_assert(offsetof(FFldEnemyFootprint, Scale) == 0x000004, "Member 'FFldEnemyFootprint::Scale' has a wrong offset!");
static_assert(offsetof(FFldEnemyFootprint, BeforLocation) == 0x000008, "Member 'FFldEnemyFootprint::BeforLocation' has a wrong offset!");

// ScriptStruct xrd777.FldEnemySkillReactionParam
// 0x0002 (0x0002 - 0x0000)
struct FFldEnemySkillReactionParam final
{
public:
	bool                                          bJamming;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPressure;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldEnemySkillReactionParam) == 0x000001, "Wrong alignment on FFldEnemySkillReactionParam");
static_assert(sizeof(FFldEnemySkillReactionParam) == 0x000002, "Wrong size on FFldEnemySkillReactionParam");
static_assert(offsetof(FFldEnemySkillReactionParam, bJamming) == 0x000000, "Member 'FFldEnemySkillReactionParam::bJamming' has a wrong offset!");
static_assert(offsetof(FFldEnemySkillReactionParam, bPressure) == 0x000001, "Member 'FFldEnemySkillReactionParam::bPressure' has a wrong offset!");

// ScriptStruct xrd777.FldEnemySkillReaction
// 0x0008 (0x0008 - 0x0000)
struct FFldEnemySkillReaction final
{
public:
	struct FFldEnemySkillReactionParam            Normal;                                            // 0x0000(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySkillReactionParam            Strong;                                            // 0x0002(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySkillReactionParam            Rare;                                              // 0x0004(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySkillReactionParam            Death;                                             // 0x0006(0x0002)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldEnemySkillReaction) == 0x000001, "Wrong alignment on FFldEnemySkillReaction");
static_assert(sizeof(FFldEnemySkillReaction) == 0x000008, "Wrong size on FFldEnemySkillReaction");
static_assert(offsetof(FFldEnemySkillReaction, Normal) == 0x000000, "Member 'FFldEnemySkillReaction::Normal' has a wrong offset!");
static_assert(offsetof(FFldEnemySkillReaction, Strong) == 0x000002, "Member 'FFldEnemySkillReaction::Strong' has a wrong offset!");
static_assert(offsetof(FFldEnemySkillReaction, Rare) == 0x000004, "Member 'FFldEnemySkillReaction::Rare' has a wrong offset!");
static_assert(offsetof(FFldEnemySkillReaction, Death) == 0x000006, "Member 'FFldEnemySkillReaction::Death' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaPackFaceAnimationSectionTemplate
// 0x00B8 (0x00D8 - 0x0020)
struct FMovieSceneEvtCharaPackFaceAnimationSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtCharaPackFaceAnimationSectionData EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00AC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaPackFaceAnimationSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaPackFaceAnimationSectionTemplate");
static_assert(sizeof(FMovieSceneEvtCharaPackFaceAnimationSectionTemplate) == 0x0000D8, "Wrong size on FMovieSceneEvtCharaPackFaceAnimationSectionTemplate");
static_assert(offsetof(FMovieSceneEvtCharaPackFaceAnimationSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtCharaPackFaceAnimationSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPackFaceAnimationSectionTemplate, CondBranchData) == 0x0000AC, "Member 'FMovieSceneEvtCharaPackFaceAnimationSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.FldEnemyReaperParam
// 0x0030 (0x0030 - 0x0000)
struct FFldEnemyReaperParam final
{
public:
	float                                         TrackingSpeed;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackStartDistance;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackPreparationTime;                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackBlendOut;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackWaitTime;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockAtPlayerRotSpeed;                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitBoxOffset;                                      // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitBoxExtent;                                      // 0x0024(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldEnemyReaperParam) == 0x000004, "Wrong alignment on FFldEnemyReaperParam");
static_assert(sizeof(FFldEnemyReaperParam) == 0x000030, "Wrong size on FFldEnemyReaperParam");
static_assert(offsetof(FFldEnemyReaperParam, TrackingSpeed) == 0x000000, "Member 'FFldEnemyReaperParam::TrackingSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyReaperParam, AttackStartDistance) == 0x000004, "Member 'FFldEnemyReaperParam::AttackStartDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyReaperParam, AttackPreparationTime) == 0x000008, "Member 'FFldEnemyReaperParam::AttackPreparationTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyReaperParam, AttackBlendOut) == 0x00000C, "Member 'FFldEnemyReaperParam::AttackBlendOut' has a wrong offset!");
static_assert(offsetof(FFldEnemyReaperParam, AttackWaitTime) == 0x000010, "Member 'FFldEnemyReaperParam::AttackWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyReaperParam, LockAtPlayerRotSpeed) == 0x000014, "Member 'FFldEnemyReaperParam::LockAtPlayerRotSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyReaperParam, HitBoxOffset) == 0x000018, "Member 'FFldEnemyReaperParam::HitBoxOffset' has a wrong offset!");
static_assert(offsetof(FFldEnemyReaperParam, HitBoxExtent) == 0x000024, "Member 'FFldEnemyReaperParam::HitBoxExtent' has a wrong offset!");

// ScriptStruct xrd777.FldEnemySearchParam
// 0x0008 (0x0008 - 0x0000)
struct FFldEnemySearchParam final
{
public:
	float                                         Range;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldEnemySearchParam) == 0x000004, "Wrong alignment on FFldEnemySearchParam");
static_assert(sizeof(FFldEnemySearchParam) == 0x000008, "Wrong size on FFldEnemySearchParam");
static_assert(offsetof(FFldEnemySearchParam, Range) == 0x000000, "Member 'FFldEnemySearchParam::Range' has a wrong offset!");
static_assert(offsetof(FFldEnemySearchParam, Angle) == 0x000004, "Member 'FFldEnemySearchParam::Angle' has a wrong offset!");

// ScriptStruct xrd777.FldEnemyRareParam
// 0x0060 (0x0060 - 0x0000)
struct FFldEnemyRareParam final
{
public:
	float                                         MovementRange;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   NormalSearch;                                      // 0x0004(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerNearSearch;                                  // 0x000C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerDashSearch;                                  // 0x0014(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerFindingSearch;                               // 0x001C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerShootSerach;                                 // 0x0024(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFldEnemyLoiterParam>           LoiterSpeed;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         LoiterWaitTime;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiscoverWaitTime;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeSpeed;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeRotSpeed;                                    // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeTime;                                        // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnInterval;                                   // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnDistance;                                   // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldEnemyRareParam) == 0x000008, "Wrong alignment on FFldEnemyRareParam");
static_assert(sizeof(FFldEnemyRareParam) == 0x000060, "Wrong size on FFldEnemyRareParam");
static_assert(offsetof(FFldEnemyRareParam, MovementRange) == 0x000000, "Member 'FFldEnemyRareParam::MovementRange' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, NormalSearch) == 0x000004, "Member 'FFldEnemyRareParam::NormalSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, PlayerNearSearch) == 0x00000C, "Member 'FFldEnemyRareParam::PlayerNearSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, PlayerDashSearch) == 0x000014, "Member 'FFldEnemyRareParam::PlayerDashSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, PlayerFindingSearch) == 0x00001C, "Member 'FFldEnemyRareParam::PlayerFindingSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, PlayerShootSerach) == 0x000024, "Member 'FFldEnemyRareParam::PlayerShootSerach' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, LoiterSpeed) == 0x000030, "Member 'FFldEnemyRareParam::LoiterSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, LoiterWaitTime) == 0x000040, "Member 'FFldEnemyRareParam::LoiterWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, DiscoverWaitTime) == 0x000044, "Member 'FFldEnemyRareParam::DiscoverWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, EscapeSpeed) == 0x000048, "Member 'FFldEnemyRareParam::EscapeSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, EscapeRotSpeed) == 0x00004C, "Member 'FFldEnemyRareParam::EscapeRotSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, EscapeTime) == 0x000050, "Member 'FFldEnemyRareParam::EscapeTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, RespawnInterval) == 0x000054, "Member 'FFldEnemyRareParam::RespawnInterval' has a wrong offset!");
static_assert(offsetof(FFldEnemyRareParam, RespawnDistance) == 0x000058, "Member 'FFldEnemyRareParam::RespawnDistance' has a wrong offset!");

// ScriptStruct xrd777.FldEnemyConditionFearParam
// 0x0098 (0x0098 - 0x0000)
struct FFldEnemyConditionFearParam final
{
public:
	float                                         MovementRange;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   NormalSearch;                                      // 0x0004(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerNearSearch;                                  // 0x000C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerDashSearch;                                  // 0x0014(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerFindingSearch;                               // 0x001C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerShootSerach;                                 // 0x0024(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFldEnemyLoiterParam>           LoiterSpeed;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         LoiterWaitTime;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiscoverWaitTime;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingAngle;                                     // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingSpeed;                                     // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingTime;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackBlendOut;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinceTime;                                         // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WinceDistance;                                     // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeSpeed;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeRotSpeed;                                    // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeDistance;                                    // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeMinimumTime;                                 // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LostWaitTime;                                      // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnInterval;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnDistance;                                   // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VanishSpawnDistance;                               // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitBoxOffset;                                      // 0x0080(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitBoxExtent;                                      // 0x008C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldEnemyConditionFearParam) == 0x000008, "Wrong alignment on FFldEnemyConditionFearParam");
static_assert(sizeof(FFldEnemyConditionFearParam) == 0x000098, "Wrong size on FFldEnemyConditionFearParam");
static_assert(offsetof(FFldEnemyConditionFearParam, MovementRange) == 0x000000, "Member 'FFldEnemyConditionFearParam::MovementRange' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, NormalSearch) == 0x000004, "Member 'FFldEnemyConditionFearParam::NormalSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, PlayerNearSearch) == 0x00000C, "Member 'FFldEnemyConditionFearParam::PlayerNearSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, PlayerDashSearch) == 0x000014, "Member 'FFldEnemyConditionFearParam::PlayerDashSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, PlayerFindingSearch) == 0x00001C, "Member 'FFldEnemyConditionFearParam::PlayerFindingSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, PlayerShootSerach) == 0x000024, "Member 'FFldEnemyConditionFearParam::PlayerShootSerach' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, LoiterSpeed) == 0x000030, "Member 'FFldEnemyConditionFearParam::LoiterSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, LoiterWaitTime) == 0x000040, "Member 'FFldEnemyConditionFearParam::LoiterWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, DiscoverWaitTime) == 0x000044, "Member 'FFldEnemyConditionFearParam::DiscoverWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, TrackingAngle) == 0x000048, "Member 'FFldEnemyConditionFearParam::TrackingAngle' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, TrackingSpeed) == 0x00004C, "Member 'FFldEnemyConditionFearParam::TrackingSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, TrackingTime) == 0x000050, "Member 'FFldEnemyConditionFearParam::TrackingTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, AttackBlendOut) == 0x000054, "Member 'FFldEnemyConditionFearParam::AttackBlendOut' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, WinceTime) == 0x000058, "Member 'FFldEnemyConditionFearParam::WinceTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, WinceDistance) == 0x00005C, "Member 'FFldEnemyConditionFearParam::WinceDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, EscapeSpeed) == 0x000060, "Member 'FFldEnemyConditionFearParam::EscapeSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, EscapeRotSpeed) == 0x000064, "Member 'FFldEnemyConditionFearParam::EscapeRotSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, EscapeDistance) == 0x000068, "Member 'FFldEnemyConditionFearParam::EscapeDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, EscapeMinimumTime) == 0x00006C, "Member 'FFldEnemyConditionFearParam::EscapeMinimumTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, LostWaitTime) == 0x000070, "Member 'FFldEnemyConditionFearParam::LostWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, RespawnInterval) == 0x000074, "Member 'FFldEnemyConditionFearParam::RespawnInterval' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, RespawnDistance) == 0x000078, "Member 'FFldEnemyConditionFearParam::RespawnDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, VanishSpawnDistance) == 0x00007C, "Member 'FFldEnemyConditionFearParam::VanishSpawnDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, HitBoxOffset) == 0x000080, "Member 'FFldEnemyConditionFearParam::HitBoxOffset' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionFearParam, HitBoxExtent) == 0x00008C, "Member 'FFldEnemyConditionFearParam::HitBoxExtent' has a wrong offset!");

// ScriptStruct xrd777.FldEnemyConditionConfusionParam
// 0x00A0 (0x00A0 - 0x0000)
struct FFldEnemyConditionConfusionParam final
{
public:
	float                                         MovementRange;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   NormalSearch;                                      // 0x0004(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerNearSearch;                                  // 0x000C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerDashSearch;                                  // 0x0014(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerFindingSearch;                               // 0x001C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerShootSerach;                                 // 0x0024(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFldEnemyLoiterParam>           LoiterSpeed;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         LoiterWaitTime;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiscoverWaitTime;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFldEnemyLoiterParam                   TrackingSpeed;                                     // 0x0048(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         TrackingTime;                                      // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingSearchAngle;                               // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackBlendOut;                                    // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackPlayRate;                                    // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackRotMin;                                      // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AttackRotMax;                                      // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackRotSpeed;                                    // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackRigidTime;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LostWaitTime;                                      // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnInterval;                                   // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnDistance;                                   // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VanishSpawnDistance;                               // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitBoxOffset;                                      // 0x0088(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitBoxExtent;                                      // 0x0094(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldEnemyConditionConfusionParam) == 0x000008, "Wrong alignment on FFldEnemyConditionConfusionParam");
static_assert(sizeof(FFldEnemyConditionConfusionParam) == 0x0000A0, "Wrong size on FFldEnemyConditionConfusionParam");
static_assert(offsetof(FFldEnemyConditionConfusionParam, MovementRange) == 0x000000, "Member 'FFldEnemyConditionConfusionParam::MovementRange' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, NormalSearch) == 0x000004, "Member 'FFldEnemyConditionConfusionParam::NormalSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, PlayerNearSearch) == 0x00000C, "Member 'FFldEnemyConditionConfusionParam::PlayerNearSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, PlayerDashSearch) == 0x000014, "Member 'FFldEnemyConditionConfusionParam::PlayerDashSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, PlayerFindingSearch) == 0x00001C, "Member 'FFldEnemyConditionConfusionParam::PlayerFindingSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, PlayerShootSerach) == 0x000024, "Member 'FFldEnemyConditionConfusionParam::PlayerShootSerach' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, LoiterSpeed) == 0x000030, "Member 'FFldEnemyConditionConfusionParam::LoiterSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, LoiterWaitTime) == 0x000040, "Member 'FFldEnemyConditionConfusionParam::LoiterWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, DiscoverWaitTime) == 0x000044, "Member 'FFldEnemyConditionConfusionParam::DiscoverWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, TrackingSpeed) == 0x000048, "Member 'FFldEnemyConditionConfusionParam::TrackingSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, TrackingTime) == 0x000058, "Member 'FFldEnemyConditionConfusionParam::TrackingTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, TrackingSearchAngle) == 0x00005C, "Member 'FFldEnemyConditionConfusionParam::TrackingSearchAngle' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, AttackBlendOut) == 0x000060, "Member 'FFldEnemyConditionConfusionParam::AttackBlendOut' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, AttackPlayRate) == 0x000064, "Member 'FFldEnemyConditionConfusionParam::AttackPlayRate' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, AttackRotMin) == 0x000068, "Member 'FFldEnemyConditionConfusionParam::AttackRotMin' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, AttackRotMax) == 0x00006C, "Member 'FFldEnemyConditionConfusionParam::AttackRotMax' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, AttackRotSpeed) == 0x000070, "Member 'FFldEnemyConditionConfusionParam::AttackRotSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, AttackRigidTime) == 0x000074, "Member 'FFldEnemyConditionConfusionParam::AttackRigidTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, LostWaitTime) == 0x000078, "Member 'FFldEnemyConditionConfusionParam::LostWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, RespawnInterval) == 0x00007C, "Member 'FFldEnemyConditionConfusionParam::RespawnInterval' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, RespawnDistance) == 0x000080, "Member 'FFldEnemyConditionConfusionParam::RespawnDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, VanishSpawnDistance) == 0x000084, "Member 'FFldEnemyConditionConfusionParam::VanishSpawnDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, HitBoxOffset) == 0x000088, "Member 'FFldEnemyConditionConfusionParam::HitBoxOffset' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionConfusionParam, HitBoxExtent) == 0x000094, "Member 'FFldEnemyConditionConfusionParam::HitBoxExtent' has a wrong offset!");

// ScriptStruct xrd777.FldEnemyConditionAngerParam
// 0x0090 (0x0090 - 0x0000)
struct FFldEnemyConditionAngerParam final
{
public:
	float                                         MovementRange;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   NormalSearch;                                      // 0x0004(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerNearSearch;                                  // 0x000C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerDashSearch;                                  // 0x0014(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerFindingSearch;                               // 0x001C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerShootSerach;                                 // 0x0024(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFldEnemyLoiterParam>           LoiterSpeed;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         LoiterWaitTime;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiscoverTime;                                      // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingTime;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingRotSpeed;                                  // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackSpeed;                                       // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackRotSpeed;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackSearchAngle;                                 // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InertiaRunningTime;                                // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingTime;                                       // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LostWaitTime;                                      // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnInterval;                                   // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnDistance;                                   // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VanishSpawnDistance;                               // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitBoxOffset;                                      // 0x0074(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitBoxExtent;                                      // 0x0080(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldEnemyConditionAngerParam) == 0x000008, "Wrong alignment on FFldEnemyConditionAngerParam");
static_assert(sizeof(FFldEnemyConditionAngerParam) == 0x000090, "Wrong size on FFldEnemyConditionAngerParam");
static_assert(offsetof(FFldEnemyConditionAngerParam, MovementRange) == 0x000000, "Member 'FFldEnemyConditionAngerParam::MovementRange' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, NormalSearch) == 0x000004, "Member 'FFldEnemyConditionAngerParam::NormalSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, PlayerNearSearch) == 0x00000C, "Member 'FFldEnemyConditionAngerParam::PlayerNearSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, PlayerDashSearch) == 0x000014, "Member 'FFldEnemyConditionAngerParam::PlayerDashSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, PlayerFindingSearch) == 0x00001C, "Member 'FFldEnemyConditionAngerParam::PlayerFindingSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, PlayerShootSerach) == 0x000024, "Member 'FFldEnemyConditionAngerParam::PlayerShootSerach' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, LoiterSpeed) == 0x000030, "Member 'FFldEnemyConditionAngerParam::LoiterSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, LoiterWaitTime) == 0x000040, "Member 'FFldEnemyConditionAngerParam::LoiterWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, DiscoverTime) == 0x000044, "Member 'FFldEnemyConditionAngerParam::DiscoverTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, TrackingTime) == 0x000048, "Member 'FFldEnemyConditionAngerParam::TrackingTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, TrackingRotSpeed) == 0x00004C, "Member 'FFldEnemyConditionAngerParam::TrackingRotSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, AttackSpeed) == 0x000050, "Member 'FFldEnemyConditionAngerParam::AttackSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, AttackRotSpeed) == 0x000054, "Member 'FFldEnemyConditionAngerParam::AttackRotSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, AttackSearchAngle) == 0x000058, "Member 'FFldEnemyConditionAngerParam::AttackSearchAngle' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, InertiaRunningTime) == 0x00005C, "Member 'FFldEnemyConditionAngerParam::InertiaRunningTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, BrakingTime) == 0x000060, "Member 'FFldEnemyConditionAngerParam::BrakingTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, LostWaitTime) == 0x000064, "Member 'FFldEnemyConditionAngerParam::LostWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, RespawnInterval) == 0x000068, "Member 'FFldEnemyConditionAngerParam::RespawnInterval' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, RespawnDistance) == 0x00006C, "Member 'FFldEnemyConditionAngerParam::RespawnDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, VanishSpawnDistance) == 0x000070, "Member 'FFldEnemyConditionAngerParam::VanishSpawnDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, HitBoxOffset) == 0x000074, "Member 'FFldEnemyConditionAngerParam::HitBoxOffset' has a wrong offset!");
static_assert(offsetof(FFldEnemyConditionAngerParam, HitBoxExtent) == 0x000080, "Member 'FFldEnemyConditionAngerParam::HitBoxExtent' has a wrong offset!");

// ScriptStruct xrd777.EvtDialoguePayload
// 0x0050 (0x0050 - 0x0000)
struct FEvtDialoguePayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageNo;                                         // 0x0008(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageMajorID;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageMinorID;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageSubID;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessagePageID;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBmdAsset*                              BmdAsset;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMessageRefAffected;                               // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseSequencer;                                   // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventMessageID;                                    // 0x002C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeqEventMessageID;                                 // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithSelect;                                       // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectID;                                          // 0x0038(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectMessageMajorID;                              // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectMessageMinorID;                              // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectMessageSubID;                                // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectResponceToLocalDataID;                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEvtDialoguePayload) == 0x000008, "Wrong alignment on FEvtDialoguePayload");
static_assert(sizeof(FEvtDialoguePayload) == 0x000050, "Wrong size on FEvtDialoguePayload");
static_assert(offsetof(FEvtDialoguePayload, EventName) == 0x000000, "Member 'FEvtDialoguePayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, MessageNo) == 0x000008, "Member 'FEvtDialoguePayload::MessageNo' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, MessageMajorID) == 0x00000C, "Member 'FEvtDialoguePayload::MessageMajorID' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, MessageMinorID) == 0x000010, "Member 'FEvtDialoguePayload::MessageMinorID' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, MessageSubID) == 0x000014, "Member 'FEvtDialoguePayload::MessageSubID' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, MessagePageID) == 0x000018, "Member 'FEvtDialoguePayload::MessagePageID' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, BmdAsset) == 0x000020, "Member 'FEvtDialoguePayload::BmdAsset' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, bMessageRefAffected) == 0x000028, "Member 'FEvtDialoguePayload::bMessageRefAffected' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, bPauseSequencer) == 0x000029, "Member 'FEvtDialoguePayload::bPauseSequencer' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, EventMessageID) == 0x00002C, "Member 'FEvtDialoguePayload::EventMessageID' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, SeqEventMessageID) == 0x000030, "Member 'FEvtDialoguePayload::SeqEventMessageID' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, bWithSelect) == 0x000034, "Member 'FEvtDialoguePayload::bWithSelect' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, SelectID) == 0x000038, "Member 'FEvtDialoguePayload::SelectID' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, SelectMessageMajorID) == 0x00003C, "Member 'FEvtDialoguePayload::SelectMessageMajorID' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, SelectMessageMinorID) == 0x000040, "Member 'FEvtDialoguePayload::SelectMessageMinorID' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, SelectMessageSubID) == 0x000044, "Member 'FEvtDialoguePayload::SelectMessageSubID' has a wrong offset!");
static_assert(offsetof(FEvtDialoguePayload, SelectResponceToLocalDataID) == 0x000048, "Member 'FEvtDialoguePayload::SelectResponceToLocalDataID' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtDialogueSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtDialogueSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtDialoguePayload>            KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtDialogueSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtDialogueSectionData");
static_assert(sizeof(FMovieSceneEvtDialogueSectionData) == 0x000088, "Wrong size on FMovieSceneEvtDialogueSectionData");
static_assert(offsetof(FMovieSceneEvtDialogueSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtDialogueSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtDialogueSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtDialogueSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.FldEnemyNormalParam
// 0x0098 (0x0098 - 0x0000)
struct FFldEnemyNormalParam final
{
public:
	float                                         MovementRange;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   NormalSearch;                                      // 0x0004(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerNearSearch;                                  // 0x000C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerDashSearch;                                  // 0x0014(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerFindingSearch;                               // 0x001C(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FFldEnemySearchParam                   PlayerShootSerach;                                 // 0x0024(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFldEnemyLoiterParam>           LoiterSpeed;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         LoiterWaitTime;                                    // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingSpeed;                                     // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackingTime;                                      // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackBlendOut;                                    // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiscoverWaitTime;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LostWiatTime;                                      // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeSpeed;                                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeTime;                                        // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeWaitTime;                                    // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeResetDistance;                               // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeVanishDistance;                              // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscapeForceVanishDistance;                         // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnInterval;                                   // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RespawnDistance;                                   // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VanishSpawnDistance;                               // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitBoxOffset;                                      // 0x007C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HitBoxExtent;                                      // 0x0088(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldEnemyNormalParam) == 0x000008, "Wrong alignment on FFldEnemyNormalParam");
static_assert(sizeof(FFldEnemyNormalParam) == 0x000098, "Wrong size on FFldEnemyNormalParam");
static_assert(offsetof(FFldEnemyNormalParam, MovementRange) == 0x000000, "Member 'FFldEnemyNormalParam::MovementRange' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, NormalSearch) == 0x000004, "Member 'FFldEnemyNormalParam::NormalSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, PlayerNearSearch) == 0x00000C, "Member 'FFldEnemyNormalParam::PlayerNearSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, PlayerDashSearch) == 0x000014, "Member 'FFldEnemyNormalParam::PlayerDashSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, PlayerFindingSearch) == 0x00001C, "Member 'FFldEnemyNormalParam::PlayerFindingSearch' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, PlayerShootSerach) == 0x000024, "Member 'FFldEnemyNormalParam::PlayerShootSerach' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, LoiterSpeed) == 0x000030, "Member 'FFldEnemyNormalParam::LoiterSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, LoiterWaitTime) == 0x000040, "Member 'FFldEnemyNormalParam::LoiterWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, TrackingSpeed) == 0x000044, "Member 'FFldEnemyNormalParam::TrackingSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, TrackingTime) == 0x000048, "Member 'FFldEnemyNormalParam::TrackingTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, AttackBlendOut) == 0x00004C, "Member 'FFldEnemyNormalParam::AttackBlendOut' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, DiscoverWaitTime) == 0x000050, "Member 'FFldEnemyNormalParam::DiscoverWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, LostWiatTime) == 0x000054, "Member 'FFldEnemyNormalParam::LostWiatTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, EscapeSpeed) == 0x000058, "Member 'FFldEnemyNormalParam::EscapeSpeed' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, EscapeTime) == 0x00005C, "Member 'FFldEnemyNormalParam::EscapeTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, EscapeWaitTime) == 0x000060, "Member 'FFldEnemyNormalParam::EscapeWaitTime' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, EscapeResetDistance) == 0x000064, "Member 'FFldEnemyNormalParam::EscapeResetDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, EscapeVanishDistance) == 0x000068, "Member 'FFldEnemyNormalParam::EscapeVanishDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, EscapeForceVanishDistance) == 0x00006C, "Member 'FFldEnemyNormalParam::EscapeForceVanishDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, RespawnInterval) == 0x000070, "Member 'FFldEnemyNormalParam::RespawnInterval' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, RespawnDistance) == 0x000074, "Member 'FFldEnemyNormalParam::RespawnDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, VanishSpawnDistance) == 0x000078, "Member 'FFldEnemyNormalParam::VanishSpawnDistance' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, HitBoxOffset) == 0x00007C, "Member 'FFldEnemyNormalParam::HitBoxOffset' has a wrong offset!");
static_assert(offsetof(FFldEnemyNormalParam, HitBoxExtent) == 0x000088, "Member 'FFldEnemyNormalParam::HitBoxExtent' has a wrong offset!");

// ScriptStruct xrd777.FldEnemyFootprintAsset
// 0x0010 (0x0010 - 0x0000)
struct FFldEnemyFootprintAsset final
{
public:
	class UMaterialInterface*                     Color;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     Normal;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldEnemyFootprintAsset) == 0x000008, "Wrong alignment on FFldEnemyFootprintAsset");
static_assert(sizeof(FFldEnemyFootprintAsset) == 0x000010, "Wrong size on FFldEnemyFootprintAsset");
static_assert(offsetof(FFldEnemyFootprintAsset, Color) == 0x000000, "Member 'FFldEnemyFootprintAsset::Color' has a wrong offset!");
static_assert(offsetof(FFldEnemyFootprintAsset, Normal) == 0x000008, "Member 'FFldEnemyFootprintAsset::Normal' has a wrong offset!");

// ScriptStruct xrd777.FldHitActorEachPlayerProc
// 0x0018 (0x0018 - 0x0000)
struct FFldHitActorEachPlayerProc final
{
public:
	int32                                         MPlayerID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AUtlProcActor>              MProcActor;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MKeyLock;                                          // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldHitActorEachPlayerProc) == 0x000008, "Wrong alignment on FFldHitActorEachPlayerProc");
static_assert(sizeof(FFldHitActorEachPlayerProc) == 0x000018, "Wrong size on FFldHitActorEachPlayerProc");
static_assert(offsetof(FFldHitActorEachPlayerProc, MPlayerID) == 0x000000, "Member 'FFldHitActorEachPlayerProc::MPlayerID' has a wrong offset!");
static_assert(offsetof(FFldHitActorEachPlayerProc, MProcActor) == 0x000008, "Member 'FFldHitActorEachPlayerProc::MProcActor' has a wrong offset!");
static_assert(offsetof(FFldHitActorEachPlayerProc, MKeyLock) == 0x000010, "Member 'FFldHitActorEachPlayerProc::MKeyLock' has a wrong offset!");

// ScriptStruct xrd777.FldHitCitLookParam
// 0x0008 (0x0010 - 0x0008)
struct FFldHitCitLookParam final : public FFldHitCitTimeParam
{
public:
	class AFldLocalActor*                         MTargetActer;                                      // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldHitCitLookParam) == 0x000008, "Wrong alignment on FFldHitCitLookParam");
static_assert(sizeof(FFldHitCitLookParam) == 0x000010, "Wrong size on FFldHitCitLookParam");
static_assert(offsetof(FFldHitCitLookParam, MTargetActer) == 0x000008, "Member 'FFldHitCitLookParam::MTargetActer' has a wrong offset!");

// ScriptStruct xrd777.FldHitInfo
// 0x0008 (0x0008 - 0x0000)
struct FFldHitInfo final
{
public:
	int32                                         MArcanaID;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MCmmLevel;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldHitInfo) == 0x000004, "Wrong alignment on FFldHitInfo");
static_assert(sizeof(FFldHitInfo) == 0x000008, "Wrong size on FFldHitInfo");
static_assert(offsetof(FFldHitInfo, MArcanaID) == 0x000000, "Member 'FFldHitInfo::MArcanaID' has a wrong offset!");
static_assert(offsetof(FFldHitInfo, MCmmLevel) == 0x000004, "Member 'FFldHitInfo::MCmmLevel' has a wrong offset!");

// ScriptStruct xrd777.FldHitPartnerProcs
// 0x0010 (0x0010 - 0x0000)
struct FFldHitPartnerProcs final
{
public:
	TSubclassOf<class AUtlProcActor>              Talk;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AUtlProcActor>              Assemble;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldHitPartnerProcs) == 0x000008, "Wrong alignment on FFldHitPartnerProcs");
static_assert(sizeof(FFldHitPartnerProcs) == 0x000010, "Wrong size on FFldHitPartnerProcs");
static_assert(offsetof(FFldHitPartnerProcs, Talk) == 0x000000, "Member 'FFldHitPartnerProcs::Talk' has a wrong offset!");
static_assert(offsetof(FFldHitPartnerProcs, Assemble) == 0x000008, "Member 'FFldHitPartnerProcs::Assemble' has a wrong offset!");

// ScriptStruct xrd777.FldLoadLevelListData
// 0x0128 (0x0130 - 0x0008)
struct FFldLoadLevelListData final : public FTableRowBase
{
public:
	int32                                         FieldMajor;                                        // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinor;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Bg;                                                // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lighting_NOON;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lighting_EVENING;                                  // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lighting_NIGHT;                                    // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Lighting_SHADOW;                                   // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Sound;                                             // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AreaChange;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Hit;                                               // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Hit_SHADOW;                                        // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         NPC;                                               // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Npc_NOON;                                          // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Npc_EVENING;                                       // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Npc_NIGHT;                                         // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Npc_SHADOW;                                        // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Cmm_NOON;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Cmm_EVENING;                                       // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Cmm_NIGHT;                                         // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         CrowdTarget;                                       // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldLoadLevelListData) == 0x000008, "Wrong alignment on FFldLoadLevelListData");
static_assert(sizeof(FFldLoadLevelListData) == 0x000130, "Wrong size on FFldLoadLevelListData");
static_assert(offsetof(FFldLoadLevelListData, FieldMajor) == 0x000008, "Member 'FFldLoadLevelListData::FieldMajor' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, FieldMinor) == 0x00000C, "Member 'FFldLoadLevelListData::FieldMinor' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Bg) == 0x000010, "Member 'FFldLoadLevelListData::Bg' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Lighting_NOON) == 0x000020, "Member 'FFldLoadLevelListData::Lighting_NOON' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Lighting_EVENING) == 0x000030, "Member 'FFldLoadLevelListData::Lighting_EVENING' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Lighting_NIGHT) == 0x000040, "Member 'FFldLoadLevelListData::Lighting_NIGHT' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Lighting_SHADOW) == 0x000050, "Member 'FFldLoadLevelListData::Lighting_SHADOW' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Sound) == 0x000060, "Member 'FFldLoadLevelListData::Sound' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, AreaChange) == 0x000070, "Member 'FFldLoadLevelListData::AreaChange' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Hit) == 0x000080, "Member 'FFldLoadLevelListData::Hit' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Hit_SHADOW) == 0x000090, "Member 'FFldLoadLevelListData::Hit_SHADOW' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, NPC) == 0x0000A0, "Member 'FFldLoadLevelListData::NPC' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Npc_NOON) == 0x0000B0, "Member 'FFldLoadLevelListData::Npc_NOON' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Npc_EVENING) == 0x0000C0, "Member 'FFldLoadLevelListData::Npc_EVENING' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Npc_NIGHT) == 0x0000D0, "Member 'FFldLoadLevelListData::Npc_NIGHT' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Npc_SHADOW) == 0x0000E0, "Member 'FFldLoadLevelListData::Npc_SHADOW' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Cmm_NOON) == 0x0000F0, "Member 'FFldLoadLevelListData::Cmm_NOON' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Cmm_EVENING) == 0x000100, "Member 'FFldLoadLevelListData::Cmm_EVENING' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, Cmm_NIGHT) == 0x000110, "Member 'FFldLoadLevelListData::Cmm_NIGHT' has a wrong offset!");
static_assert(offsetof(FFldLoadLevelListData, CrowdTarget) == 0x000120, "Member 'FFldLoadLevelListData::CrowdTarget' has a wrong offset!");

// ScriptStruct xrd777.FldLmapData_NPC
// 0x0018 (0x0018 - 0x0000)
struct FFldLmapData_NPC final
{
public:
	EFldLmapData_NpcType                          MType;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MName;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldLmapData_NPC) == 0x000008, "Wrong alignment on FFldLmapData_NPC");
static_assert(sizeof(FFldLmapData_NPC) == 0x000018, "Wrong size on FFldLmapData_NPC");
static_assert(offsetof(FFldLmapData_NPC, MType) == 0x000000, "Member 'FFldLmapData_NPC::MType' has a wrong offset!");
static_assert(offsetof(FFldLmapData_NPC, MName) == 0x000008, "Member 'FFldLmapData_NPC::MName' has a wrong offset!");

// ScriptStruct xrd777.FldLmapData
// 0x0050 (0x0050 - 0x0000)
struct FFldLmapData final
{
public:
	TArray<struct FFldLmapData_CMM>               MCmmList;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFldLmapData_NPC>               MMaleQuestList;                                    // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFldLmapData_NPC>               MDormitoryList;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFldLmapData_NPC>               MKoromaruList;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFldLmapData_QUEST>             MQuestList;                                        // 0x0040(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldLmapData) == 0x000008, "Wrong alignment on FFldLmapData");
static_assert(sizeof(FFldLmapData) == 0x000050, "Wrong size on FFldLmapData");
static_assert(offsetof(FFldLmapData, MCmmList) == 0x000000, "Member 'FFldLmapData::MCmmList' has a wrong offset!");
static_assert(offsetof(FFldLmapData, MMaleQuestList) == 0x000010, "Member 'FFldLmapData::MMaleQuestList' has a wrong offset!");
static_assert(offsetof(FFldLmapData, MDormitoryList) == 0x000020, "Member 'FFldLmapData::MDormitoryList' has a wrong offset!");
static_assert(offsetof(FFldLmapData, MKoromaruList) == 0x000030, "Member 'FFldLmapData::MKoromaruList' has a wrong offset!");
static_assert(offsetof(FFldLmapData, MQuestList) == 0x000040, "Member 'FFldLmapData::MQuestList' has a wrong offset!");

// ScriptStruct xrd777.FldMailOrderTableRow
// 0x0030 (0x0038 - 0x0008)
struct FFldMailOrderTableRow final : public FTableRowBase
{
public:
	int32                                         DataIndex;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyMonth;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuyDay;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReceiveMonth;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReceiveDay;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemA_ID;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemA_Num;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OneWordMsgID;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemB_ID;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemB_Num;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Price;                                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcID;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldMailOrderTableRow) == 0x000008, "Wrong alignment on FFldMailOrderTableRow");
static_assert(sizeof(FFldMailOrderTableRow) == 0x000038, "Wrong size on FFldMailOrderTableRow");
static_assert(offsetof(FFldMailOrderTableRow, DataIndex) == 0x000008, "Member 'FFldMailOrderTableRow::DataIndex' has a wrong offset!");
static_assert(offsetof(FFldMailOrderTableRow, BuyMonth) == 0x00000C, "Member 'FFldMailOrderTableRow::BuyMonth' has a wrong offset!");
static_assert(offsetof(FFldMailOrderTableRow, BuyDay) == 0x000010, "Member 'FFldMailOrderTableRow::BuyDay' has a wrong offset!");
static_assert(offsetof(FFldMailOrderTableRow, ReceiveMonth) == 0x000014, "Member 'FFldMailOrderTableRow::ReceiveMonth' has a wrong offset!");
static_assert(offsetof(FFldMailOrderTableRow, ReceiveDay) == 0x000018, "Member 'FFldMailOrderTableRow::ReceiveDay' has a wrong offset!");
static_assert(offsetof(FFldMailOrderTableRow, ItemA_ID) == 0x00001C, "Member 'FFldMailOrderTableRow::ItemA_ID' has a wrong offset!");
static_assert(offsetof(FFldMailOrderTableRow, ItemA_Num) == 0x000020, "Member 'FFldMailOrderTableRow::ItemA_Num' has a wrong offset!");
static_assert(offsetof(FFldMailOrderTableRow, OneWordMsgID) == 0x000024, "Member 'FFldMailOrderTableRow::OneWordMsgID' has a wrong offset!");
static_assert(offsetof(FFldMailOrderTableRow, ItemB_ID) == 0x000028, "Member 'FFldMailOrderTableRow::ItemB_ID' has a wrong offset!");
static_assert(offsetof(FFldMailOrderTableRow, ItemB_Num) == 0x00002C, "Member 'FFldMailOrderTableRow::ItemB_Num' has a wrong offset!");
static_assert(offsetof(FFldMailOrderTableRow, Price) == 0x000030, "Member 'FFldMailOrderTableRow::Price' has a wrong offset!");
static_assert(offsetof(FFldMailOrderTableRow, ProcID) == 0x000034, "Member 'FFldMailOrderTableRow::ProcID' has a wrong offset!");

// ScriptStruct xrd777.FldMiniMapData_NPC
// 0x0050 (0x0050 - 0x0000)
struct FFldMiniMapData_NPC final
{
public:
	EFldMiniMapType_NPC                           MType;                                             // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MTransform;                                        // 0x0010(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 MCharactor;                                        // 0x0040(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldMiniMapData_NPC) == 0x000010, "Wrong alignment on FFldMiniMapData_NPC");
static_assert(sizeof(FFldMiniMapData_NPC) == 0x000050, "Wrong size on FFldMiniMapData_NPC");
static_assert(offsetof(FFldMiniMapData_NPC, MType) == 0x000000, "Member 'FFldMiniMapData_NPC::MType' has a wrong offset!");
static_assert(offsetof(FFldMiniMapData_NPC, MTransform) == 0x000010, "Member 'FFldMiniMapData_NPC::MTransform' has a wrong offset!");
static_assert(offsetof(FFldMiniMapData_NPC, MCharactor) == 0x000040, "Member 'FFldMiniMapData_NPC::MCharactor' has a wrong offset!");

// ScriptStruct xrd777.FldMiniMapData
// 0x0020 (0x0020 - 0x0000)
struct FFldMiniMapData final
{
public:
	TArray<struct FFldMiniMapData_NPC>            MNpcList;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FFldMiniMapData_Target>         MTargetList;                                       // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldMiniMapData) == 0x000008, "Wrong alignment on FFldMiniMapData");
static_assert(sizeof(FFldMiniMapData) == 0x000020, "Wrong size on FFldMiniMapData");
static_assert(offsetof(FFldMiniMapData, MNpcList) == 0x000000, "Member 'FFldMiniMapData::MNpcList' has a wrong offset!");
static_assert(offsetof(FFldMiniMapData, MTargetList) == 0x000010, "Member 'FFldMiniMapData::MTargetList' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaAnimationSectionTemplate
// 0x00B8 (0x00D8 - 0x0020)
struct FMovieSceneEvtCharaAnimationSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtCharaAnimationSectionData EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00AC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaAnimationSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaAnimationSectionTemplate");
static_assert(sizeof(FMovieSceneEvtCharaAnimationSectionTemplate) == 0x0000D8, "Wrong size on FMovieSceneEvtCharaAnimationSectionTemplate");
static_assert(offsetof(FMovieSceneEvtCharaAnimationSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtCharaAnimationSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaAnimationSectionTemplate, CondBranchData) == 0x0000AC, "Member 'FMovieSceneEvtCharaAnimationSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.FldNpcCompPropsParam
// 0x0050 (0x0050 - 0x0000)
struct FFldNpcCompPropsParam final
{
public:
	int32                                         MMajorID;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MMinorID;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MAddTransform;                                     // 0x0010(0x0030)(Edit, BlueprintVisible, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          MMotionAttached;                                   // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldNpcCompPropsParam) == 0x000010, "Wrong alignment on FFldNpcCompPropsParam");
static_assert(sizeof(FFldNpcCompPropsParam) == 0x000050, "Wrong size on FFldNpcCompPropsParam");
static_assert(offsetof(FFldNpcCompPropsParam, MMajorID) == 0x000000, "Member 'FFldNpcCompPropsParam::MMajorID' has a wrong offset!");
static_assert(offsetof(FFldNpcCompPropsParam, MMinorID) == 0x000004, "Member 'FFldNpcCompPropsParam::MMinorID' has a wrong offset!");
static_assert(offsetof(FFldNpcCompPropsParam, MAddTransform) == 0x000010, "Member 'FFldNpcCompPropsParam::MAddTransform' has a wrong offset!");
static_assert(offsetof(FFldNpcCompPropsParam, MMotionAttached) == 0x000040, "Member 'FFldNpcCompPropsParam::MMotionAttached' has a wrong offset!");

// ScriptStruct xrd777.FldNpcLayoutData
// 0x0090 (0x0090 - 0x0000)
struct FFldNpcLayoutData final
{
public:
	int32                                         MMajorID;                                          // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MMinorID;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MFieldPartsID;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldNpcActorType                              MType;                                             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldHitCharaIconType                          MIconType;                                         // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFldHitCharaIconParam>          MChangeIcons;                                      // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         MNameIndex;                                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MOnFlagName;                                       // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MOffFlagName;                                      // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     MCharaTrans;                                       // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MIconTran;                                         // 0x0050(0x0030)(IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNotMapInfo;                                       // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldNpcLayoutData) == 0x000010, "Wrong alignment on FFldNpcLayoutData");
static_assert(sizeof(FFldNpcLayoutData) == 0x000090, "Wrong size on FFldNpcLayoutData");
static_assert(offsetof(FFldNpcLayoutData, MMajorID) == 0x000000, "Member 'FFldNpcLayoutData::MMajorID' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutData, MMinorID) == 0x000004, "Member 'FFldNpcLayoutData::MMinorID' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutData, MFieldPartsID) == 0x000008, "Member 'FFldNpcLayoutData::MFieldPartsID' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutData, MType) == 0x00000C, "Member 'FFldNpcLayoutData::MType' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutData, MIconType) == 0x00000D, "Member 'FFldNpcLayoutData::MIconType' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutData, MChangeIcons) == 0x000010, "Member 'FFldNpcLayoutData::MChangeIcons' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutData, MNameIndex) == 0x000020, "Member 'FFldNpcLayoutData::MNameIndex' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutData, MOnFlagName) == 0x000024, "Member 'FFldNpcLayoutData::MOnFlagName' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutData, MOffFlagName) == 0x00002C, "Member 'FFldNpcLayoutData::MOffFlagName' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutData, MCharaTrans) == 0x000038, "Member 'FFldNpcLayoutData::MCharaTrans' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutData, MIconTran) == 0x000050, "Member 'FFldNpcLayoutData::MIconTran' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutData, bNotMapInfo) == 0x000080, "Member 'FFldNpcLayoutData::bNotMapInfo' has a wrong offset!");

// ScriptStruct xrd777.FldNpcLayoutList
// 0x0020 (0x0020 - 0x0000)
struct FFldNpcLayoutList final
{
public:
	int32                                         MFieldMajor;                                       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MFieldMinor;                                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MTimeType;                                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MKeyfreeEventID;                                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFldNpcLayoutData>              MDataList;                                         // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldNpcLayoutList) == 0x000008, "Wrong alignment on FFldNpcLayoutList");
static_assert(sizeof(FFldNpcLayoutList) == 0x000020, "Wrong size on FFldNpcLayoutList");
static_assert(offsetof(FFldNpcLayoutList, MFieldMajor) == 0x000000, "Member 'FFldNpcLayoutList::MFieldMajor' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutList, MFieldMinor) == 0x000004, "Member 'FFldNpcLayoutList::MFieldMinor' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutList, MTimeType) == 0x000008, "Member 'FFldNpcLayoutList::MTimeType' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutList, MKeyfreeEventID) == 0x00000C, "Member 'FFldNpcLayoutList::MKeyfreeEventID' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutList, MDataList) == 0x000010, "Member 'FFldNpcLayoutList::MDataList' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaAnimationParams
// 0x0008 (0x0008 - 0x0000)
struct FMovieSceneEvtCharaAnimationParams final
{
public:
	class UAnimSequenceBase*                      AnimationAsset;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvtCharaAnimationParams) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaAnimationParams");
static_assert(sizeof(FMovieSceneEvtCharaAnimationParams) == 0x000008, "Wrong size on FMovieSceneEvtCharaAnimationParams");
static_assert(offsetof(FMovieSceneEvtCharaAnimationParams, AnimationAsset) == 0x000000, "Member 'FMovieSceneEvtCharaAnimationParams::AnimationAsset' has a wrong offset!");

// ScriptStruct xrd777.FldNpcLayoutTableRow
// 0x0098 (0x00A0 - 0x0008)
struct FFldNpcLayoutTableRow final : public FTableRowBase
{
public:
	int32                                         FieldMajor;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinor;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldParts;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeType;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyfreeEventID;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MajorId;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorId;                                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldNpcActorType                              Type;                                              // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldHitCharaIconType                          IconType;                                          // 0x0025(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFldHitCharaIconParam>          ChangeIcons;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NameIndex;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OnFlagName;                                        // 0x003C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OffFlagName;                                       // 0x0044(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTransform>                     CharaTrans;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FTransform                             IconTran;                                          // 0x0060(0x0030)(Edit, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          NotMapInfo;                                        // 0x0090(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0xF];                                       // 0x0091(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldNpcLayoutTableRow) == 0x000010, "Wrong alignment on FFldNpcLayoutTableRow");
static_assert(sizeof(FFldNpcLayoutTableRow) == 0x0000A0, "Wrong size on FFldNpcLayoutTableRow");
static_assert(offsetof(FFldNpcLayoutTableRow, FieldMajor) == 0x000008, "Member 'FFldNpcLayoutTableRow::FieldMajor' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, FieldMinor) == 0x00000C, "Member 'FFldNpcLayoutTableRow::FieldMinor' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, FieldParts) == 0x000010, "Member 'FFldNpcLayoutTableRow::FieldParts' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, TimeType) == 0x000014, "Member 'FFldNpcLayoutTableRow::TimeType' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, KeyfreeEventID) == 0x000018, "Member 'FFldNpcLayoutTableRow::KeyfreeEventID' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, MajorId) == 0x00001C, "Member 'FFldNpcLayoutTableRow::MajorId' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, MinorId) == 0x000020, "Member 'FFldNpcLayoutTableRow::MinorId' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, Type) == 0x000024, "Member 'FFldNpcLayoutTableRow::Type' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, IconType) == 0x000025, "Member 'FFldNpcLayoutTableRow::IconType' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, ChangeIcons) == 0x000028, "Member 'FFldNpcLayoutTableRow::ChangeIcons' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, NameIndex) == 0x000038, "Member 'FFldNpcLayoutTableRow::NameIndex' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, OnFlagName) == 0x00003C, "Member 'FFldNpcLayoutTableRow::OnFlagName' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, OffFlagName) == 0x000044, "Member 'FFldNpcLayoutTableRow::OffFlagName' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, CharaTrans) == 0x000050, "Member 'FFldNpcLayoutTableRow::CharaTrans' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, IconTran) == 0x000060, "Member 'FFldNpcLayoutTableRow::IconTran' has a wrong offset!");
static_assert(offsetof(FFldNpcLayoutTableRow, NotMapInfo) == 0x000090, "Member 'FFldNpcLayoutTableRow::NotMapInfo' has a wrong offset!");

// ScriptStruct xrd777.FldPersonalMotionData
// 0x0018 (0x0018 - 0x0000)
struct FFldPersonalMotionData final
{
public:
	int32                                         MotionID;                                          // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsBag;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFldPmtCostumeDataCore>         DailyCostumes;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPersonalMotionData) == 0x000008, "Wrong alignment on FFldPersonalMotionData");
static_assert(sizeof(FFldPersonalMotionData) == 0x000018, "Wrong size on FFldPersonalMotionData");
static_assert(offsetof(FFldPersonalMotionData, MotionID) == 0x000000, "Member 'FFldPersonalMotionData::MotionID' has a wrong offset!");
static_assert(offsetof(FFldPersonalMotionData, IsBag) == 0x000004, "Member 'FFldPersonalMotionData::IsBag' has a wrong offset!");
static_assert(offsetof(FFldPersonalMotionData, DailyCostumes) == 0x000008, "Member 'FFldPersonalMotionData::DailyCostumes' has a wrong offset!");

// ScriptStruct xrd777.FldPersonalMotionTableRow
// 0x0020 (0x0028 - 0x0008)
struct FFldPersonalMotionTableRow final : public FTableRowBase
{
public:
	int32                                         OnFlag;                                            // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffFlag;                                           // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MotionID;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IsBag;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFldPmtCostumeDataCore>         DailyCostumes;                                     // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldPersonalMotionTableRow) == 0x000008, "Wrong alignment on FFldPersonalMotionTableRow");
static_assert(sizeof(FFldPersonalMotionTableRow) == 0x000028, "Wrong size on FFldPersonalMotionTableRow");
static_assert(offsetof(FFldPersonalMotionTableRow, OnFlag) == 0x000008, "Member 'FFldPersonalMotionTableRow::OnFlag' has a wrong offset!");
static_assert(offsetof(FFldPersonalMotionTableRow, OffFlag) == 0x00000C, "Member 'FFldPersonalMotionTableRow::OffFlag' has a wrong offset!");
static_assert(offsetof(FFldPersonalMotionTableRow, MotionID) == 0x000010, "Member 'FFldPersonalMotionTableRow::MotionID' has a wrong offset!");
static_assert(offsetof(FFldPersonalMotionTableRow, IsBag) == 0x000014, "Member 'FFldPersonalMotionTableRow::IsBag' has a wrong offset!");
static_assert(offsetof(FFldPersonalMotionTableRow, DailyCostumes) == 0x000018, "Member 'FFldPersonalMotionTableRow::DailyCostumes' has a wrong offset!");

// ScriptStruct xrd777.ldPlayerInputInterpolation
// 0x0044 (0x0044 - 0x0000)
struct FLdPlayerInputInterpolation final
{
public:
	struct FVector                                Begin;                                             // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                End;                                               // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18[0x20];                                      // 0x0018(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Distance;                                          // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Yaw;                                               // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         Frame;                                             // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FLdPlayerInputInterpolation) == 0x000004, "Wrong alignment on FLdPlayerInputInterpolation");
static_assert(sizeof(FLdPlayerInputInterpolation) == 0x000044, "Wrong size on FLdPlayerInputInterpolation");
static_assert(offsetof(FLdPlayerInputInterpolation, Begin) == 0x000000, "Member 'FLdPlayerInputInterpolation::Begin' has a wrong offset!");
static_assert(offsetof(FLdPlayerInputInterpolation, End) == 0x00000C, "Member 'FLdPlayerInputInterpolation::End' has a wrong offset!");
static_assert(offsetof(FLdPlayerInputInterpolation, Distance) == 0x000038, "Member 'FLdPlayerInputInterpolation::Distance' has a wrong offset!");
static_assert(offsetof(FLdPlayerInputInterpolation, Yaw) == 0x00003C, "Member 'FLdPlayerInputInterpolation::Yaw' has a wrong offset!");
static_assert(offsetof(FLdPlayerInputInterpolation, Frame) == 0x000040, "Member 'FLdPlayerInputInterpolation::Frame' has a wrong offset!");

// ScriptStruct xrd777.FldShortcutData
// 0x0030 (0x0030 - 0x0000)
struct FFldShortcutData final
{
public:
	int16                                         MShortcutIndex;                                    // 0x0000(0x0002)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MName;                                             // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MEnable;                                           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x17];                                      // 0x0019(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFldShortcutData) == 0x000008, "Wrong alignment on FFldShortcutData");
static_assert(sizeof(FFldShortcutData) == 0x000030, "Wrong size on FFldShortcutData");
static_assert(offsetof(FFldShortcutData, MShortcutIndex) == 0x000000, "Member 'FFldShortcutData::MShortcutIndex' has a wrong offset!");
static_assert(offsetof(FFldShortcutData, MName) == 0x000008, "Member 'FFldShortcutData::MName' has a wrong offset!");
static_assert(offsetof(FFldShortcutData, MEnable) == 0x000018, "Member 'FFldShortcutData::MEnable' has a wrong offset!");

// ScriptStruct xrd777.FldSortieMemberTableRow
// 0x0018 (0x0020 - 0x0008)
struct FFldSortieMemberTableRow final : public FTableRowBase
{
public:
	int32                                         Flag;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Enables;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldSortieMemberTableRow) == 0x000008, "Wrong alignment on FFldSortieMemberTableRow");
static_assert(sizeof(FFldSortieMemberTableRow) == 0x000020, "Wrong size on FFldSortieMemberTableRow");
static_assert(offsetof(FFldSortieMemberTableRow, Flag) == 0x000008, "Member 'FFldSortieMemberTableRow::Flag' has a wrong offset!");
static_assert(offsetof(FFldSortieMemberTableRow, Enables) == 0x000010, "Member 'FFldSortieMemberTableRow::Enables' has a wrong offset!");

// ScriptStruct xrd777.FldTemporalAATableRow
// 0x0010 (0x0018 - 0x0008)
struct FFldTemporalAATableRow final : public FTableRowBase
{
public:
	int32                                         FieldMajorID;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinorID;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplesValue;                                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameWeight;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFldTemporalAATableRow) == 0x000008, "Wrong alignment on FFldTemporalAATableRow");
static_assert(sizeof(FFldTemporalAATableRow) == 0x000018, "Wrong size on FFldTemporalAATableRow");
static_assert(offsetof(FFldTemporalAATableRow, FieldMajorID) == 0x000008, "Member 'FFldTemporalAATableRow::FieldMajorID' has a wrong offset!");
static_assert(offsetof(FFldTemporalAATableRow, FieldMinorID) == 0x00000C, "Member 'FFldTemporalAATableRow::FieldMinorID' has a wrong offset!");
static_assert(offsetof(FFldTemporalAATableRow, SamplesValue) == 0x000010, "Member 'FFldTemporalAATableRow::SamplesValue' has a wrong offset!");
static_assert(offsetof(FFldTemporalAATableRow, FrameWeight) == 0x000014, "Member 'FFldTemporalAATableRow::FrameWeight' has a wrong offset!");

// ScriptStruct xrd777.FrameBufferCaptureDebugWork
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FFrameBufferCaptureDebugWork final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFrameBufferCaptureDebugWork) == 0x000008, "Wrong alignment on FFrameBufferCaptureDebugWork");
static_assert(sizeof(FFrameBufferCaptureDebugWork) == 0x000018, "Wrong size on FFrameBufferCaptureDebugWork");

// ScriptStruct xrd777.GenSelListItemElement
// 0x0008 (0x0010 - 0x0008)
struct FGenSelListItemElement final : public FGenSelListElementInterface
{
public:
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenSelListItemElement) == 0x000008, "Wrong alignment on FGenSelListItemElement");
static_assert(sizeof(FGenSelListItemElement) == 0x000010, "Wrong size on FGenSelListItemElement");

// ScriptStruct xrd777.GenSelListShopElement
// 0x0000 (0x0028 - 0x0028)
struct FGenSelListShopElement final : public FGenSelListMsgElement
{
};
static_assert(alignof(FGenSelListShopElement) == 0x000008, "Wrong alignment on FGenSelListShopElement");
static_assert(sizeof(FGenSelListShopElement) == 0x000028, "Wrong size on FGenSelListShopElement");

// ScriptStruct xrd777.GWHashBase
// 0x0010 (0x0010 - 0x0000)
struct FGWHashBase final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Hash;                                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Value;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGWHashBase) == 0x000004, "Wrong alignment on FGWHashBase");
static_assert(sizeof(FGWHashBase) == 0x000010, "Wrong size on FGWHashBase");
static_assert(offsetof(FGWHashBase, Name) == 0x000000, "Member 'FGWHashBase::Name' has a wrong offset!");
static_assert(offsetof(FGWHashBase, Hash) == 0x000008, "Member 'FGWHashBase::Hash' has a wrong offset!");
static_assert(offsetof(FGWHashBase, Value) == 0x00000C, "Member 'FGWHashBase::Value' has a wrong offset!");

// ScriptStruct xrd777.AtlHandwritingNiagaraRequestParam
// 0x0038 (0x0038 - 0x0000)
struct FAtlHandwritingNiagaraRequestParam final
{
public:
	int32                                         LoopCount;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraOffset;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0014(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlHandwritingNiagaraRequestAbsoluteFlag SpawnedWorldAbsoluteFlag;                          // 0x002C(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAtlHandwritingNiagaraRequestAbsoluteFlag SpawnedAttachAbsoluteFlag;                         // 0x002F(0x0003)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlHandwritingNiagaraRequestParam) == 0x000004, "Wrong alignment on FAtlHandwritingNiagaraRequestParam");
static_assert(sizeof(FAtlHandwritingNiagaraRequestParam) == 0x000038, "Wrong size on FAtlHandwritingNiagaraRequestParam");
static_assert(offsetof(FAtlHandwritingNiagaraRequestParam, LoopCount) == 0x000000, "Member 'FAtlHandwritingNiagaraRequestParam::LoopCount' has a wrong offset!");
static_assert(offsetof(FAtlHandwritingNiagaraRequestParam, CameraOffset) == 0x000004, "Member 'FAtlHandwritingNiagaraRequestParam::CameraOffset' has a wrong offset!");
static_assert(offsetof(FAtlHandwritingNiagaraRequestParam, Location) == 0x000008, "Member 'FAtlHandwritingNiagaraRequestParam::Location' has a wrong offset!");
static_assert(offsetof(FAtlHandwritingNiagaraRequestParam, Rotation) == 0x000014, "Member 'FAtlHandwritingNiagaraRequestParam::Rotation' has a wrong offset!");
static_assert(offsetof(FAtlHandwritingNiagaraRequestParam, Scale) == 0x000020, "Member 'FAtlHandwritingNiagaraRequestParam::Scale' has a wrong offset!");
static_assert(offsetof(FAtlHandwritingNiagaraRequestParam, SpawnedWorldAbsoluteFlag) == 0x00002C, "Member 'FAtlHandwritingNiagaraRequestParam::SpawnedWorldAbsoluteFlag' has a wrong offset!");
static_assert(offsetof(FAtlHandwritingNiagaraRequestParam, SpawnedAttachAbsoluteFlag) == 0x00002F, "Member 'FAtlHandwritingNiagaraRequestParam::SpawnedAttachAbsoluteFlag' has a wrong offset!");

// ScriptStruct xrd777.FootIKSetupParam
// 0x0020 (0x0020 - 0x0000)
struct FFootIKSetupParam final
{
public:
	float                                         TraceDistance;                                     // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceOffset;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootAdjustOffset;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftFootSocketName;                                // 0x000C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightFootSocketName;                               // 0x0014(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityThreshold;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootIKSetupParam) == 0x000004, "Wrong alignment on FFootIKSetupParam");
static_assert(sizeof(FFootIKSetupParam) == 0x000020, "Wrong size on FFootIKSetupParam");
static_assert(offsetof(FFootIKSetupParam, TraceDistance) == 0x000000, "Member 'FFootIKSetupParam::TraceDistance' has a wrong offset!");
static_assert(offsetof(FFootIKSetupParam, TraceOffset) == 0x000004, "Member 'FFootIKSetupParam::TraceOffset' has a wrong offset!");
static_assert(offsetof(FFootIKSetupParam, FootAdjustOffset) == 0x000008, "Member 'FFootIKSetupParam::FootAdjustOffset' has a wrong offset!");
static_assert(offsetof(FFootIKSetupParam, LeftFootSocketName) == 0x00000C, "Member 'FFootIKSetupParam::LeftFootSocketName' has a wrong offset!");
static_assert(offsetof(FFootIKSetupParam, RightFootSocketName) == 0x000014, "Member 'FFootIKSetupParam::RightFootSocketName' has a wrong offset!");
static_assert(offsetof(FFootIKSetupParam, VelocityThreshold) == 0x00001C, "Member 'FFootIKSetupParam::VelocityThreshold' has a wrong offset!");

// ScriptStruct xrd777.MsgItemInfo
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMsgItemInfo final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMsgItemInfo) == 0x000008, "Wrong alignment on FMsgItemInfo");
static_assert(sizeof(FMsgItemInfo) == 0x000010, "Wrong size on FMsgItemInfo");

// ScriptStruct xrd777.StaffRollOneLineData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FStaffRollOneLineData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStaffRollOneLineData) == 0x000008, "Wrong alignment on FStaffRollOneLineData");
static_assert(sizeof(FStaffRollOneLineData) == 0x000018, "Wrong size on FStaffRollOneLineData");

// ScriptStruct xrd777.LocalizeStaffRollStruct
// 0x0040 (0x0048 - 0x0008)
struct FLocalizeStaffRollStruct final : public FTableRowBase
{
public:
	class FString                                 Name1;                                             // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name2;                                             // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name3;                                             // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tag;                                               // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameNum;                                           // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprID;                                             // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLocalizeStaffRollStruct) == 0x000008, "Wrong alignment on FLocalizeStaffRollStruct");
static_assert(sizeof(FLocalizeStaffRollStruct) == 0x000048, "Wrong size on FLocalizeStaffRollStruct");
static_assert(offsetof(FLocalizeStaffRollStruct, Name1) == 0x000008, "Member 'FLocalizeStaffRollStruct::Name1' has a wrong offset!");
static_assert(offsetof(FLocalizeStaffRollStruct, Name2) == 0x000018, "Member 'FLocalizeStaffRollStruct::Name2' has a wrong offset!");
static_assert(offsetof(FLocalizeStaffRollStruct, Name3) == 0x000028, "Member 'FLocalizeStaffRollStruct::Name3' has a wrong offset!");
static_assert(offsetof(FLocalizeStaffRollStruct, Tag) == 0x000038, "Member 'FLocalizeStaffRollStruct::Tag' has a wrong offset!");
static_assert(offsetof(FLocalizeStaffRollStruct, NameNum) == 0x00003C, "Member 'FLocalizeStaffRollStruct::NameNum' has a wrong offset!");
static_assert(offsetof(FLocalizeStaffRollStruct, SprID) == 0x000040, "Member 'FLocalizeStaffRollStruct::SprID' has a wrong offset!");

// ScriptStruct xrd777.UIMailListItem
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FUIMailListItem final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIMailListItem) == 0x000008, "Wrong alignment on FUIMailListItem");
static_assert(sizeof(FUIMailListItem) == 0x000020, "Wrong size on FUIMailListItem");

// ScriptStruct xrd777.MovieSceneEvtAdxSoundSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtAdxSoundSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtAdxSoundPayload>            KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtAdxSoundSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtAdxSoundSectionData");
static_assert(sizeof(FMovieSceneEvtAdxSoundSectionData) == 0x000088, "Wrong size on FMovieSceneEvtAdxSoundSectionData");
static_assert(offsetof(FMovieSceneEvtAdxSoundSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtAdxSoundSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtAdxSoundSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtAdxSoundSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtAdxSoundSectionTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieSceneEvtAdxSoundSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtAdxSoundSectionData      EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00BC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtAdxSoundSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtAdxSoundSectionTemplate");
static_assert(sizeof(FMovieSceneEvtAdxSoundSectionTemplate) == 0x0000E8, "Wrong size on FMovieSceneEvtAdxSoundSectionTemplate");
static_assert(offsetof(FMovieSceneEvtAdxSoundSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtAdxSoundSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtAdxSoundSectionTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtAdxSoundSectionTemplate::EventReceivers' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtAdxSoundSectionTemplate, CondBranchData) == 0x0000BC, "Member 'FMovieSceneEvtAdxSoundSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaAnimationParameters
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMovieSceneEvtCharaAnimationParameters final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaAnimationParameters) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaAnimationParameters");
static_assert(sizeof(FMovieSceneEvtCharaAnimationParameters) == 0x000028, "Wrong size on FMovieSceneEvtCharaAnimationParameters");

// ScriptStruct xrd777.MovieSceneEvtCharaHandwritingSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtCharaHandwritingSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtCharaHandwritingPayload>    KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaHandwritingSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaHandwritingSectionData");
static_assert(sizeof(FMovieSceneEvtCharaHandwritingSectionData) == 0x000088, "Wrong size on FMovieSceneEvtCharaHandwritingSectionData");
static_assert(offsetof(FMovieSceneEvtCharaHandwritingSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtCharaHandwritingSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaHandwritingSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtCharaHandwritingSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaHandwritingSectionTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieSceneEvtCharaHandwritingSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtCharaHandwritingSectionData EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00BC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaHandwritingSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaHandwritingSectionTemplate");
static_assert(sizeof(FMovieSceneEvtCharaHandwritingSectionTemplate) == 0x0000E8, "Wrong size on FMovieSceneEvtCharaHandwritingSectionTemplate");
static_assert(offsetof(FMovieSceneEvtCharaHandwritingSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtCharaHandwritingSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaHandwritingSectionTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtCharaHandwritingSectionTemplate::EventReceivers' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaHandwritingSectionTemplate, CondBranchData) == 0x0000BC, "Member 'FMovieSceneEvtCharaHandwritingSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaPackFaceAnimationParams
// 0x0008 (0x0008 - 0x0000)
struct FMovieSceneEvtCharaPackFaceAnimationParams final
{
public:
	class UAnimSequenceBase*                      AnimationAsset;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovieSceneEvtCharaPackFaceAnimationParams) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaPackFaceAnimationParams");
static_assert(sizeof(FMovieSceneEvtCharaPackFaceAnimationParams) == 0x000008, "Wrong size on FMovieSceneEvtCharaPackFaceAnimationParams");
static_assert(offsetof(FMovieSceneEvtCharaPackFaceAnimationParams, AnimationAsset) == 0x000000, "Member 'FMovieSceneEvtCharaPackFaceAnimationParams::AnimationAsset' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaPropAttachSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtCharaPropAttachSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtCharaPropAttachPayload>     KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaPropAttachSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaPropAttachSectionData");
static_assert(sizeof(FMovieSceneEvtCharaPropAttachSectionData) == 0x000088, "Wrong size on FMovieSceneEvtCharaPropAttachSectionData");
static_assert(offsetof(FMovieSceneEvtCharaPropAttachSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtCharaPropAttachSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPropAttachSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtCharaPropAttachSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtCharaPropAttachSectionTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieSceneEvtCharaPropAttachSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtCharaPropAttachSectionData EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00BC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtCharaPropAttachSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtCharaPropAttachSectionTemplate");
static_assert(sizeof(FMovieSceneEvtCharaPropAttachSectionTemplate) == 0x0000E8, "Wrong size on FMovieSceneEvtCharaPropAttachSectionTemplate");
static_assert(offsetof(FMovieSceneEvtCharaPropAttachSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtCharaPropAttachSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPropAttachSectionTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtCharaPropAttachSectionTemplate::EventReceivers' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtCharaPropAttachSectionTemplate, CondBranchData) == 0x0000BC, "Member 'FMovieSceneEvtCharaPropAttachSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtDialogueOptionsSectionTemplate
// 0x00A0 (0x00C0 - 0x0020)
struct FMovieSceneEvtDialogueOptionsSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtDialogueOptionsSectionData EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtDialogueOptionsSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtDialogueOptionsSectionTemplate");
static_assert(sizeof(FMovieSceneEvtDialogueOptionsSectionTemplate) == 0x0000C0, "Wrong size on FMovieSceneEvtDialogueOptionsSectionTemplate");
static_assert(offsetof(FMovieSceneEvtDialogueOptionsSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtDialogueOptionsSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtDialogueOptionsSectionTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtDialogueOptionsSectionTemplate::EventReceivers' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtDialogueSectionTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieSceneEvtDialogueSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtDialogueSectionData      EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00BC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtDialogueSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtDialogueSectionTemplate");
static_assert(sizeof(FMovieSceneEvtDialogueSectionTemplate) == 0x0000E8, "Wrong size on FMovieSceneEvtDialogueSectionTemplate");
static_assert(offsetof(FMovieSceneEvtDialogueSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtDialogueSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtDialogueSectionTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtDialogueSectionTemplate::EventReceivers' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtDialogueSectionTemplate, CondBranchData) == 0x0000BC, "Member 'FMovieSceneEvtDialogueSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.EvtFadeScreenPayload
// 0x0018 (0x0018 - 0x0000)
struct FEvtFadeScreenPayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtFadeScreenType                            FadeScreenType;                                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FadeType;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FadeFrame;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorR;                                            // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorG;                                            // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ColorB;                                            // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEvtFadeScreenPayload) == 0x000004, "Wrong alignment on FEvtFadeScreenPayload");
static_assert(sizeof(FEvtFadeScreenPayload) == 0x000018, "Wrong size on FEvtFadeScreenPayload");
static_assert(offsetof(FEvtFadeScreenPayload, EventName) == 0x000000, "Member 'FEvtFadeScreenPayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtFadeScreenPayload, FadeScreenType) == 0x000008, "Member 'FEvtFadeScreenPayload::FadeScreenType' has a wrong offset!");
static_assert(offsetof(FEvtFadeScreenPayload, FadeType) == 0x00000C, "Member 'FEvtFadeScreenPayload::FadeType' has a wrong offset!");
static_assert(offsetof(FEvtFadeScreenPayload, FadeFrame) == 0x000010, "Member 'FEvtFadeScreenPayload::FadeFrame' has a wrong offset!");
static_assert(offsetof(FEvtFadeScreenPayload, ColorR) == 0x000014, "Member 'FEvtFadeScreenPayload::ColorR' has a wrong offset!");
static_assert(offsetof(FEvtFadeScreenPayload, ColorG) == 0x000015, "Member 'FEvtFadeScreenPayload::ColorG' has a wrong offset!");
static_assert(offsetof(FEvtFadeScreenPayload, ColorB) == 0x000016, "Member 'FEvtFadeScreenPayload::ColorB' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtFadeScreenSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtFadeScreenSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtFadeScreenPayload>          KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtFadeScreenSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtFadeScreenSectionData");
static_assert(sizeof(FMovieSceneEvtFadeScreenSectionData) == 0x000088, "Wrong size on FMovieSceneEvtFadeScreenSectionData");
static_assert(offsetof(FMovieSceneEvtFadeScreenSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtFadeScreenSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtFadeScreenSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtFadeScreenSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtFadeScreenSectionTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieSceneEvtFadeScreenSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtFadeScreenSectionData    EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00BC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtFadeScreenSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtFadeScreenSectionTemplate");
static_assert(sizeof(FMovieSceneEvtFadeScreenSectionTemplate) == 0x0000E8, "Wrong size on FMovieSceneEvtFadeScreenSectionTemplate");
static_assert(offsetof(FMovieSceneEvtFadeScreenSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtFadeScreenSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtFadeScreenSectionTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtFadeScreenSectionTemplate::EventReceivers' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtFadeScreenSectionTemplate, CondBranchData) == 0x0000BC, "Member 'FMovieSceneEvtFadeScreenSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.EvtFieldAnimationPayload
// 0x0010 (0x0010 - 0x0000)
struct FEvtFieldAnimationPayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimId;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEvtFieldAnimationPayload) == 0x000004, "Wrong alignment on FEvtFieldAnimationPayload");
static_assert(sizeof(FEvtFieldAnimationPayload) == 0x000010, "Wrong size on FEvtFieldAnimationPayload");
static_assert(offsetof(FEvtFieldAnimationPayload, EventName) == 0x000000, "Member 'FEvtFieldAnimationPayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtFieldAnimationPayload, AnimId) == 0x000008, "Member 'FEvtFieldAnimationPayload::AnimId' has a wrong offset!");
static_assert(offsetof(FEvtFieldAnimationPayload, bLoop) == 0x00000C, "Member 'FEvtFieldAnimationPayload::bLoop' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtFieldAnimationSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtFieldAnimationSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtFieldAnimationPayload>      KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtFieldAnimationSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtFieldAnimationSectionData");
static_assert(sizeof(FMovieSceneEvtFieldAnimationSectionData) == 0x000088, "Wrong size on FMovieSceneEvtFieldAnimationSectionData");
static_assert(offsetof(FMovieSceneEvtFieldAnimationSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtFieldAnimationSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtFieldAnimationSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtFieldAnimationSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtFieldAnimationSectionTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieSceneEvtFieldAnimationSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtFieldAnimationSectionData EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00BC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtFieldAnimationSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtFieldAnimationSectionTemplate");
static_assert(sizeof(FMovieSceneEvtFieldAnimationSectionTemplate) == 0x0000E8, "Wrong size on FMovieSceneEvtFieldAnimationSectionTemplate");
static_assert(offsetof(FMovieSceneEvtFieldAnimationSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtFieldAnimationSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtFieldAnimationSectionTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtFieldAnimationSectionTemplate::EventReceivers' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtFieldAnimationSectionTemplate, CondBranchData) == 0x0000BC, "Member 'FMovieSceneEvtFieldAnimationSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.EvtMessageSubtitlePayload
// 0x0048 (0x0048 - 0x0000)
struct FEvtMessageSubtitlePayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMessage;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MessageMajorID;                                    // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageMinorID;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessageSubID;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MessagePageID;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBmdAsset*                              BmdAsset;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMessageRefAffected;                               // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DrawFrame;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseSequencer;                                   // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithSelect;                                       // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectID;                                          // 0x0034(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectMessageMajorID;                              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectMessageMinorID;                              // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectMessageSubID;                                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectResponceToLocalDataID;                       // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtMessageSubtitlePayload) == 0x000008, "Wrong alignment on FEvtMessageSubtitlePayload");
static_assert(sizeof(FEvtMessageSubtitlePayload) == 0x000048, "Wrong size on FEvtMessageSubtitlePayload");
static_assert(offsetof(FEvtMessageSubtitlePayload, EventName) == 0x000000, "Member 'FEvtMessageSubtitlePayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, bUseMessage) == 0x000008, "Member 'FEvtMessageSubtitlePayload::bUseMessage' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, MessageMajorID) == 0x00000C, "Member 'FEvtMessageSubtitlePayload::MessageMajorID' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, MessageMinorID) == 0x000010, "Member 'FEvtMessageSubtitlePayload::MessageMinorID' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, MessageSubID) == 0x000014, "Member 'FEvtMessageSubtitlePayload::MessageSubID' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, MessagePageID) == 0x000018, "Member 'FEvtMessageSubtitlePayload::MessagePageID' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, BmdAsset) == 0x000020, "Member 'FEvtMessageSubtitlePayload::BmdAsset' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, bMessageRefAffected) == 0x000028, "Member 'FEvtMessageSubtitlePayload::bMessageRefAffected' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, DrawFrame) == 0x00002C, "Member 'FEvtMessageSubtitlePayload::DrawFrame' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, bPauseSequencer) == 0x000030, "Member 'FEvtMessageSubtitlePayload::bPauseSequencer' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, bWithSelect) == 0x000031, "Member 'FEvtMessageSubtitlePayload::bWithSelect' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, SelectID) == 0x000034, "Member 'FEvtMessageSubtitlePayload::SelectID' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, SelectMessageMajorID) == 0x000038, "Member 'FEvtMessageSubtitlePayload::SelectMessageMajorID' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, SelectMessageMinorID) == 0x00003C, "Member 'FEvtMessageSubtitlePayload::SelectMessageMinorID' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, SelectMessageSubID) == 0x000040, "Member 'FEvtMessageSubtitlePayload::SelectMessageSubID' has a wrong offset!");
static_assert(offsetof(FEvtMessageSubtitlePayload, SelectResponceToLocalDataID) == 0x000044, "Member 'FEvtMessageSubtitlePayload::SelectResponceToLocalDataID' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtMessageSubtitleSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtMessageSubtitleSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtMessageSubtitlePayload>     KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtMessageSubtitleSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtMessageSubtitleSectionData");
static_assert(sizeof(FMovieSceneEvtMessageSubtitleSectionData) == 0x000088, "Wrong size on FMovieSceneEvtMessageSubtitleSectionData");
static_assert(offsetof(FMovieSceneEvtMessageSubtitleSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtMessageSubtitleSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtMessageSubtitleSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtMessageSubtitleSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtMessageSubtitleSectionTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieSceneEvtMessageSubtitleSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtMessageSubtitleSectionData EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00BC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtMessageSubtitleSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtMessageSubtitleSectionTemplate");
static_assert(sizeof(FMovieSceneEvtMessageSubtitleSectionTemplate) == 0x0000E8, "Wrong size on FMovieSceneEvtMessageSubtitleSectionTemplate");
static_assert(offsetof(FMovieSceneEvtMessageSubtitleSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtMessageSubtitleSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtMessageSubtitleSectionTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtMessageSubtitleSectionTemplate::EventReceivers' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtMessageSubtitleSectionTemplate, CondBranchData) == 0x0000BC, "Member 'FMovieSceneEvtMessageSubtitleSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.EvtMoviePayload
// 0x0014 (0x0014 - 0x0000)
struct FEvtMoviePayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtMovieOperation                            Operation;                                         // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SeekFrame;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtMoviePayload) == 0x000004, "Wrong alignment on FEvtMoviePayload");
static_assert(sizeof(FEvtMoviePayload) == 0x000014, "Wrong size on FEvtMoviePayload");
static_assert(offsetof(FEvtMoviePayload, EventName) == 0x000000, "Member 'FEvtMoviePayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtMoviePayload, ID) == 0x000008, "Member 'FEvtMoviePayload::ID' has a wrong offset!");
static_assert(offsetof(FEvtMoviePayload, Operation) == 0x00000C, "Member 'FEvtMoviePayload::Operation' has a wrong offset!");
static_assert(offsetof(FEvtMoviePayload, SeekFrame) == 0x000010, "Member 'FEvtMoviePayload::SeekFrame' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtMovieSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtMovieSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtMoviePayload>               KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtMovieSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtMovieSectionData");
static_assert(sizeof(FMovieSceneEvtMovieSectionData) == 0x000088, "Wrong size on FMovieSceneEvtMovieSectionData");
static_assert(offsetof(FMovieSceneEvtMovieSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtMovieSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtMovieSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtMovieSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtMovieTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieSceneEvtMovieTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtMovieSectionData         EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00BC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtMovieTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtMovieTemplate");
static_assert(sizeof(FMovieSceneEvtMovieTemplate) == 0x0000E8, "Wrong size on FMovieSceneEvtMovieTemplate");
static_assert(offsetof(FMovieSceneEvtMovieTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtMovieTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtMovieTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtMovieTemplate::EventReceivers' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtMovieTemplate, CondBranchData) == 0x0000BC, "Member 'FMovieSceneEvtMovieTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.EvtScriptPayload
// 0x0028 (0x0028 - 0x0000)
struct FEvtScriptPayload final
{
public:
	class FName                                   EventName;                                         // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcNo;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBfAsset*                               BfAsset;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPauseSequencer;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBmdAssetInBfAsset;                             // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBmdAsset*                              BmdAsset;                                          // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtScriptPayload) == 0x000008, "Wrong alignment on FEvtScriptPayload");
static_assert(sizeof(FEvtScriptPayload) == 0x000028, "Wrong size on FEvtScriptPayload");
static_assert(offsetof(FEvtScriptPayload, EventName) == 0x000000, "Member 'FEvtScriptPayload::EventName' has a wrong offset!");
static_assert(offsetof(FEvtScriptPayload, ProcNo) == 0x000008, "Member 'FEvtScriptPayload::ProcNo' has a wrong offset!");
static_assert(offsetof(FEvtScriptPayload, BfAsset) == 0x000010, "Member 'FEvtScriptPayload::BfAsset' has a wrong offset!");
static_assert(offsetof(FEvtScriptPayload, bPauseSequencer) == 0x000018, "Member 'FEvtScriptPayload::bPauseSequencer' has a wrong offset!");
static_assert(offsetof(FEvtScriptPayload, bUseBmdAssetInBfAsset) == 0x000019, "Member 'FEvtScriptPayload::bUseBmdAssetInBfAsset' has a wrong offset!");
static_assert(offsetof(FEvtScriptPayload, BmdAsset) == 0x000020, "Member 'FEvtScriptPayload::BmdAsset' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtScriptSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtScriptSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtScriptPayload>              KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtScriptSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtScriptSectionData");
static_assert(sizeof(FMovieSceneEvtScriptSectionData) == 0x000088, "Wrong size on FMovieSceneEvtScriptSectionData");
static_assert(offsetof(FMovieSceneEvtScriptSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtScriptSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtScriptSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtScriptSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtScriptSectionTemplate
// 0x00C8 (0x00E8 - 0x0020)
struct FMovieSceneEvtScriptSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtScriptSectionData        EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneObjectBindingID>     EventReceivers;                                    // 0x00A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00BC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtScriptSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtScriptSectionTemplate");
static_assert(sizeof(FMovieSceneEvtScriptSectionTemplate) == 0x0000E8, "Wrong size on FMovieSceneEvtScriptSectionTemplate");
static_assert(offsetof(FMovieSceneEvtScriptSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtScriptSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtScriptSectionTemplate, EventReceivers) == 0x0000A8, "Member 'FMovieSceneEvtScriptSectionTemplate::EventReceivers' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtScriptSectionTemplate, CondBranchData) == 0x0000BC, "Member 'FMovieSceneEvtScriptSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.EvtSeqControllerPayload
// 0x0014 (0x0014 - 0x0000)
struct FEvtSeqControllerPayload final
{
public:
	EEvtSeqControllerOperation                    Operation;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClosedEventMessageID;                              // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpToSec;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraBlendTime;                                   // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextTransitionLightScenarioIndex;                  // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtSeqControllerPayload) == 0x000004, "Wrong alignment on FEvtSeqControllerPayload");
static_assert(sizeof(FEvtSeqControllerPayload) == 0x000014, "Wrong size on FEvtSeqControllerPayload");
static_assert(offsetof(FEvtSeqControllerPayload, Operation) == 0x000000, "Member 'FEvtSeqControllerPayload::Operation' has a wrong offset!");
static_assert(offsetof(FEvtSeqControllerPayload, ClosedEventMessageID) == 0x000004, "Member 'FEvtSeqControllerPayload::ClosedEventMessageID' has a wrong offset!");
static_assert(offsetof(FEvtSeqControllerPayload, JumpToSec) == 0x000008, "Member 'FEvtSeqControllerPayload::JumpToSec' has a wrong offset!");
static_assert(offsetof(FEvtSeqControllerPayload, CameraBlendTime) == 0x00000C, "Member 'FEvtSeqControllerPayload::CameraBlendTime' has a wrong offset!");
static_assert(offsetof(FEvtSeqControllerPayload, NextTransitionLightScenarioIndex) == 0x000010, "Member 'FEvtSeqControllerPayload::NextTransitionLightScenarioIndex' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtSeqControllerSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtSeqControllerSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtSeqControllerPayload>       KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtSeqControllerSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtSeqControllerSectionData");
static_assert(sizeof(FMovieSceneEvtSeqControllerSectionData) == 0x000088, "Wrong size on FMovieSceneEvtSeqControllerSectionData");
static_assert(offsetof(FMovieSceneEvtSeqControllerSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtSeqControllerSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtSeqControllerSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtSeqControllerSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtSeqControllerSectionTemplate
// 0x00B8 (0x00D8 - 0x0020)
struct FMovieSceneEvtSeqControllerSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtSeqControllerSectionData EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00AC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtSeqControllerSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtSeqControllerSectionTemplate");
static_assert(sizeof(FMovieSceneEvtSeqControllerSectionTemplate) == 0x0000D8, "Wrong size on FMovieSceneEvtSeqControllerSectionTemplate");
static_assert(offsetof(FMovieSceneEvtSeqControllerSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtSeqControllerSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtSeqControllerSectionTemplate, CondBranchData) == 0x0000AC, "Member 'FMovieSceneEvtSeqControllerSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.EvtSeqTimeJumpControllerPayload
// 0x0001 (0x0001 - 0x0000)
struct FEvtSeqTimeJumpControllerPayload final
{
public:
	EEvtSeqTimeJumpControllerOperation            Operation;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvtSeqTimeJumpControllerPayload) == 0x000001, "Wrong alignment on FEvtSeqTimeJumpControllerPayload");
static_assert(sizeof(FEvtSeqTimeJumpControllerPayload) == 0x000001, "Wrong size on FEvtSeqTimeJumpControllerPayload");
static_assert(offsetof(FEvtSeqTimeJumpControllerPayload, Operation) == 0x000000, "Member 'FEvtSeqTimeJumpControllerPayload::Operation' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtSeqTimeJumpControllerSectionData
// 0x0080 (0x0088 - 0x0008)
struct FMovieSceneEvtSeqTimeJumpControllerSectionData final : public FMovieSceneChannel
{
public:
	TArray<struct FFrameNumber>                   Times;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FEvtSeqTimeJumpControllerPayload> KeyValues;                                         // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x60];                                      // 0x0028(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtSeqTimeJumpControllerSectionData) == 0x000008, "Wrong alignment on FMovieSceneEvtSeqTimeJumpControllerSectionData");
static_assert(sizeof(FMovieSceneEvtSeqTimeJumpControllerSectionData) == 0x000088, "Wrong size on FMovieSceneEvtSeqTimeJumpControllerSectionData");
static_assert(offsetof(FMovieSceneEvtSeqTimeJumpControllerSectionData, Times) == 0x000008, "Member 'FMovieSceneEvtSeqTimeJumpControllerSectionData::Times' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtSeqTimeJumpControllerSectionData, KeyValues) == 0x000018, "Member 'FMovieSceneEvtSeqTimeJumpControllerSectionData::KeyValues' has a wrong offset!");

// ScriptStruct xrd777.MovieSceneEvtSeqTimeJumpControllerSectionTemplate
// 0x00B8 (0x00D8 - 0x0020)
struct FMovieSceneEvtSeqTimeJumpControllerSectionTemplate final : public FMovieSceneEvalTemplate
{
public:
	struct FMovieSceneEvtSeqTimeJumpControllerSectionData EventData;                                         // 0x0020(0x0088)(NativeAccessSpecifierPublic)
	uint8                                         bFireEventsWhenForwards : 1;                       // 0x00A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bFireEventsWhenBackwards : 1;                      // 0x00A8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvtConditionalBranchData    CondBranchData;                                    // 0x00AC(0x0028)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovieSceneEvtSeqTimeJumpControllerSectionTemplate) == 0x000008, "Wrong alignment on FMovieSceneEvtSeqTimeJumpControllerSectionTemplate");
static_assert(sizeof(FMovieSceneEvtSeqTimeJumpControllerSectionTemplate) == 0x0000D8, "Wrong size on FMovieSceneEvtSeqTimeJumpControllerSectionTemplate");
static_assert(offsetof(FMovieSceneEvtSeqTimeJumpControllerSectionTemplate, EventData) == 0x000020, "Member 'FMovieSceneEvtSeqTimeJumpControllerSectionTemplate::EventData' has a wrong offset!");
static_assert(offsetof(FMovieSceneEvtSeqTimeJumpControllerSectionTemplate, CondBranchData) == 0x0000AC, "Member 'FMovieSceneEvtSeqTimeJumpControllerSectionTemplate::CondBranchData' has a wrong offset!");

// ScriptStruct xrd777.NameNumberPairTable
// 0x0018 (0x0020 - 0x0008)
struct FNameNumberPairTable final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Number;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNameNumberPairTable) == 0x000008, "Wrong alignment on FNameNumberPairTable");
static_assert(sizeof(FNameNumberPairTable) == 0x000020, "Wrong size on FNameNumberPairTable");
static_assert(offsetof(FNameNumberPairTable, Name) == 0x000008, "Member 'FNameNumberPairTable::Name' has a wrong offset!");
static_assert(offsetof(FNameNumberPairTable, Number) == 0x000018, "Member 'FNameNumberPairTable::Number' has a wrong offset!");

// ScriptStruct xrd777.LicenseDataTables
// 0x0010 (0x0018 - 0x0008)
struct FLicenseDataTables final : public FTableRowBase
{
public:
	class FString                                 Contents;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLicenseDataTables) == 0x000008, "Wrong alignment on FLicenseDataTables");
static_assert(sizeof(FLicenseDataTables) == 0x000018, "Wrong size on FLicenseDataTables");
static_assert(offsetof(FLicenseDataTables, Contents) == 0x000008, "Member 'FLicenseDataTables::Contents' has a wrong offset!");

// ScriptStruct xrd777.LicenseTextOneLineData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FLicenseTextOneLineData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLicenseTextOneLineData) == 0x000008, "Wrong alignment on FLicenseTextOneLineData");
static_assert(sizeof(FLicenseTextOneLineData) == 0x000028, "Wrong size on FLicenseTextOneLineData");

// ScriptStruct xrd777.LicenseTextData
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FLicenseTextData final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLicenseTextData) == 0x000008, "Wrong alignment on FLicenseTextData");
static_assert(sizeof(FLicenseTextData) == 0x000020, "Wrong size on FLicenseTextData");

// ScriptStruct xrd777.SaveLoadAnimParams
// 0x0034 (0x0034 - 0x0000)
struct FSaveLoadAnimParams final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsePos;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseColor;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseAngle;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseValue;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StartPos;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndPos;                                            // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 StartColor;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 EndColor;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAngle;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveLoadAnimParams) == 0x000004, "Wrong alignment on FSaveLoadAnimParams");
static_assert(sizeof(FSaveLoadAnimParams) == 0x000034, "Wrong size on FSaveLoadAnimParams");
static_assert(offsetof(FSaveLoadAnimParams, StartFrame) == 0x000000, "Member 'FSaveLoadAnimParams::StartFrame' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, EndFrame) == 0x000004, "Member 'FSaveLoadAnimParams::EndFrame' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, bIsUsePos) == 0x000008, "Member 'FSaveLoadAnimParams::bIsUsePos' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, bIsUseColor) == 0x000009, "Member 'FSaveLoadAnimParams::bIsUseColor' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, bIsUseAngle) == 0x00000A, "Member 'FSaveLoadAnimParams::bIsUseAngle' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, bIsUseValue) == 0x00000B, "Member 'FSaveLoadAnimParams::bIsUseValue' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, StartPos) == 0x00000C, "Member 'FSaveLoadAnimParams::StartPos' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, EndPos) == 0x000014, "Member 'FSaveLoadAnimParams::EndPos' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, StartColor) == 0x00001C, "Member 'FSaveLoadAnimParams::StartColor' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, EndColor) == 0x000020, "Member 'FSaveLoadAnimParams::EndColor' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, StartAngle) == 0x000024, "Member 'FSaveLoadAnimParams::StartAngle' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, EndAngle) == 0x000028, "Member 'FSaveLoadAnimParams::EndAngle' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, StartValue) == 0x00002C, "Member 'FSaveLoadAnimParams::StartValue' has a wrong offset!");
static_assert(offsetof(FSaveLoadAnimParams, EndValue) == 0x000030, "Member 'FSaveLoadAnimParams::EndValue' has a wrong offset!");

// ScriptStruct xrd777.SoundAppFieldControlBlock
// 0x0040 (0x0040 - 0x0000)
struct FSoundAppFieldControlBlock final
{
public:
	bool                                          MIsSetup;                                          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MReadBank;                                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   MPlayerType;                                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MPlayerNum;                                        // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MFileName;                                         // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        MRestartFlags;                                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MRestartQueIds;                                    // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSoundAppFieldControlBlock) == 0x000008, "Wrong alignment on FSoundAppFieldControlBlock");
static_assert(sizeof(FSoundAppFieldControlBlock) == 0x000040, "Wrong size on FSoundAppFieldControlBlock");
static_assert(offsetof(FSoundAppFieldControlBlock, MIsSetup) == 0x000000, "Member 'FSoundAppFieldControlBlock::MIsSetup' has a wrong offset!");
static_assert(offsetof(FSoundAppFieldControlBlock, MReadBank) == 0x000004, "Member 'FSoundAppFieldControlBlock::MReadBank' has a wrong offset!");
static_assert(offsetof(FSoundAppFieldControlBlock, MPlayerType) == 0x000008, "Member 'FSoundAppFieldControlBlock::MPlayerType' has a wrong offset!");
static_assert(offsetof(FSoundAppFieldControlBlock, MPlayerNum) == 0x00000C, "Member 'FSoundAppFieldControlBlock::MPlayerNum' has a wrong offset!");
static_assert(offsetof(FSoundAppFieldControlBlock, MFileName) == 0x000010, "Member 'FSoundAppFieldControlBlock::MFileName' has a wrong offset!");
static_assert(offsetof(FSoundAppFieldControlBlock, MRestartFlags) == 0x000020, "Member 'FSoundAppFieldControlBlock::MRestartFlags' has a wrong offset!");
static_assert(offsetof(FSoundAppFieldControlBlock, MRestartQueIds) == 0x000028, "Member 'FSoundAppFieldControlBlock::MRestartQueIds' has a wrong offset!");

// ScriptStruct xrd777.DatDlcBgmTableData
// 0x0020 (0x0028 - 0x0008)
struct FDatDlcBgmTableData final : public FTableRowBase
{
public:
	uint32                                        BandleID;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SerialNumber;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Title;                                             // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Offset;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ControlNumber;                                     // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Sort;                                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDatDlcBgmTableData) == 0x000008, "Wrong alignment on FDatDlcBgmTableData");
static_assert(sizeof(FDatDlcBgmTableData) == 0x000028, "Wrong size on FDatDlcBgmTableData");
static_assert(offsetof(FDatDlcBgmTableData, BandleID) == 0x000008, "Member 'FDatDlcBgmTableData::BandleID' has a wrong offset!");
static_assert(offsetof(FDatDlcBgmTableData, SerialNumber) == 0x00000C, "Member 'FDatDlcBgmTableData::SerialNumber' has a wrong offset!");
static_assert(offsetof(FDatDlcBgmTableData, Title) == 0x000010, "Member 'FDatDlcBgmTableData::Title' has a wrong offset!");
static_assert(offsetof(FDatDlcBgmTableData, Offset) == 0x000018, "Member 'FDatDlcBgmTableData::Offset' has a wrong offset!");
static_assert(offsetof(FDatDlcBgmTableData, ControlNumber) == 0x00001C, "Member 'FDatDlcBgmTableData::ControlNumber' has a wrong offset!");
static_assert(offsetof(FDatDlcBgmTableData, Sort) == 0x000020, "Member 'FDatDlcBgmTableData::Sort' has a wrong offset!");
static_assert(offsetof(FDatDlcBgmTableData, Result) == 0x000024, "Member 'FDatDlcBgmTableData::Result' has a wrong offset!");

// ScriptStruct xrd777.StaffRollTableData
// 0x0080 (0x0080 - 0x0000)
struct FStaffRollTableData final
{
public:
	int32                                         StaffRollIndex;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FirstColumnName;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecondColumnName;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThirdColumnName;                                   // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ForthColumnName;                                   // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Ficolor;                                           // 0x0048(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Scolor;                                            // 0x004C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Tcolor;                                            // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Focolor;                                           // 0x0054(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Fistyle;                                           // 0x0058(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Sstyle;                                            // 0x0059(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Tstyle;                                            // 0x005A(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Fostyle;                                           // 0x005B(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Fisize;                                            // 0x005C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Ssize;                                             // 0x005D(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Tsize;                                             // 0x005E(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Fosize;                                            // 0x005F(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Command;                                           // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SecondCommand;                                     // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ThirdCommand;                                      // 0x0062(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ForthCommand;                                      // 0x0063(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LineCount;                                         // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LineCommand;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EmptyCount;                                        // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartWaitSeconds;                                  // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FinishSeconds;                                     // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastSeconds;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStaffRollTableData) == 0x000008, "Wrong alignment on FStaffRollTableData");
static_assert(sizeof(FStaffRollTableData) == 0x000080, "Wrong size on FStaffRollTableData");
static_assert(offsetof(FStaffRollTableData, StaffRollIndex) == 0x000000, "Member 'FStaffRollTableData::StaffRollIndex' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, FirstColumnName) == 0x000008, "Member 'FStaffRollTableData::FirstColumnName' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, SecondColumnName) == 0x000018, "Member 'FStaffRollTableData::SecondColumnName' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, ThirdColumnName) == 0x000028, "Member 'FStaffRollTableData::ThirdColumnName' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, ForthColumnName) == 0x000038, "Member 'FStaffRollTableData::ForthColumnName' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Ficolor) == 0x000048, "Member 'FStaffRollTableData::Ficolor' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Scolor) == 0x00004C, "Member 'FStaffRollTableData::Scolor' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Tcolor) == 0x000050, "Member 'FStaffRollTableData::Tcolor' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Focolor) == 0x000054, "Member 'FStaffRollTableData::Focolor' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Fistyle) == 0x000058, "Member 'FStaffRollTableData::Fistyle' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Sstyle) == 0x000059, "Member 'FStaffRollTableData::Sstyle' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Tstyle) == 0x00005A, "Member 'FStaffRollTableData::Tstyle' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Fostyle) == 0x00005B, "Member 'FStaffRollTableData::Fostyle' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Fisize) == 0x00005C, "Member 'FStaffRollTableData::Fisize' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Ssize) == 0x00005D, "Member 'FStaffRollTableData::Ssize' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Tsize) == 0x00005E, "Member 'FStaffRollTableData::Tsize' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Fosize) == 0x00005F, "Member 'FStaffRollTableData::Fosize' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, Command) == 0x000060, "Member 'FStaffRollTableData::Command' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, SecondCommand) == 0x000061, "Member 'FStaffRollTableData::SecondCommand' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, ThirdCommand) == 0x000062, "Member 'FStaffRollTableData::ThirdCommand' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, ForthCommand) == 0x000063, "Member 'FStaffRollTableData::ForthCommand' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, LineCount) == 0x000064, "Member 'FStaffRollTableData::LineCount' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, LineCommand) == 0x000068, "Member 'FStaffRollTableData::LineCommand' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, EmptyCount) == 0x00006C, "Member 'FStaffRollTableData::EmptyCount' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, StartWaitSeconds) == 0x000070, "Member 'FStaffRollTableData::StartWaitSeconds' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, FinishSeconds) == 0x000074, "Member 'FStaffRollTableData::FinishSeconds' has a wrong offset!");
static_assert(offsetof(FStaffRollTableData, LastSeconds) == 0x000078, "Member 'FStaffRollTableData::LastSeconds' has a wrong offset!");

// ScriptStruct xrd777.StaffRollTables
// 0x0100 (0x0108 - 0x0008)
struct FStaffRollTables final : public FTableRowBase
{
public:
	class FString                                 FirstColumnName;                                   // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecondColumnName;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThirdColumnName;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ForthColumnName;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ficolor;                                           // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Scolor;                                            // 0x0058(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tcolor;                                            // 0x0068(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Focolor;                                           // 0x0078(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Fistyle;                                           // 0x0088(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Sstyle;                                            // 0x0098(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tstyle;                                            // 0x00A8(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Fostyle;                                           // 0x00B8(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Fisize;                                            // 0x00C8(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ssize;                                             // 0x00D8(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tsize;                                             // 0x00E8(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Fosize;                                            // 0x00F8(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStaffRollTables) == 0x000008, "Wrong alignment on FStaffRollTables");
static_assert(sizeof(FStaffRollTables) == 0x000108, "Wrong size on FStaffRollTables");
static_assert(offsetof(FStaffRollTables, FirstColumnName) == 0x000008, "Member 'FStaffRollTables::FirstColumnName' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, SecondColumnName) == 0x000018, "Member 'FStaffRollTables::SecondColumnName' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, ThirdColumnName) == 0x000028, "Member 'FStaffRollTables::ThirdColumnName' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, ForthColumnName) == 0x000038, "Member 'FStaffRollTables::ForthColumnName' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, Ficolor) == 0x000048, "Member 'FStaffRollTables::Ficolor' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, Scolor) == 0x000058, "Member 'FStaffRollTables::Scolor' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, Tcolor) == 0x000068, "Member 'FStaffRollTables::Tcolor' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, Focolor) == 0x000078, "Member 'FStaffRollTables::Focolor' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, Fistyle) == 0x000088, "Member 'FStaffRollTables::Fistyle' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, Sstyle) == 0x000098, "Member 'FStaffRollTables::Sstyle' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, Tstyle) == 0x0000A8, "Member 'FStaffRollTables::Tstyle' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, Fostyle) == 0x0000B8, "Member 'FStaffRollTables::Fostyle' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, Fisize) == 0x0000C8, "Member 'FStaffRollTables::Fisize' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, Ssize) == 0x0000D8, "Member 'FStaffRollTables::Ssize' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, Tsize) == 0x0000E8, "Member 'FStaffRollTables::Tsize' has a wrong offset!");
static_assert(offsetof(FStaffRollTables, Fosize) == 0x0000F8, "Member 'FStaffRollTables::Fosize' has a wrong offset!");

// ScriptStruct xrd777.TitleSelectListTableRow
// 0x0070 (0x0078 - 0x0008)
struct FTitleSelectListTableRow final : public FTableRowBase
{
public:
	int32                                         StretchFrame;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShrinkFrame;                                       // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShrinkWaitFrame;                                   // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextInAnimAddWaitFrame;                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlurPlateAddWidth;                                 // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitMaskAnimFrame;                                 // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCountWaitFrame;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CursorMoveFrame;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StretchFrame_Diff;                                 // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShrinkFrame_Diff;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShrinkWaitFrame_Diff;                              // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextInAnimAddWaitFrame_Diff;                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BlurPlateAddWidth_Diff;                            // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitMaskAnimFrame_Diff;                            // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemCountWaitFrame_Diff;                           // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CursorMoveFrame_Diff;                              // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NAKAMI_IN_OK_MASK_FRAME;                           // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NAKAMI_OUT_OK_MASK_FRAME;                          // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NAKAMI_IN_RECT_ANIM_FRAME;                         // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NAKAMI_WAIT_OUT_OK_FRAME;                          // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NAKAMI_LOOP_PLAY_WAIT_FRAME;                       // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NAKAMI_IN_OK_MASK_FRAME_Diff;                      // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NAKAMI_OUT_OK_MASK_FRAME_Diff;                     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NAKAMI_IN_RECT_ANIM_FRAME_Diff;                    // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NAKAMI_WAIT_OUT_OK_FRAME_Diff;                     // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NAKAMI_LOOP_PLAY_WAIT_FRAME_Diff;                  // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 TextSpriteInvalidColor;                            // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 TextEdgeSpriteInvalidColor;                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTitleSelectListTableRow) == 0x000008, "Wrong alignment on FTitleSelectListTableRow");
static_assert(sizeof(FTitleSelectListTableRow) == 0x000078, "Wrong size on FTitleSelectListTableRow");
static_assert(offsetof(FTitleSelectListTableRow, StretchFrame) == 0x000008, "Member 'FTitleSelectListTableRow::StretchFrame' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, ShrinkFrame) == 0x00000C, "Member 'FTitleSelectListTableRow::ShrinkFrame' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, ShrinkWaitFrame) == 0x000010, "Member 'FTitleSelectListTableRow::ShrinkWaitFrame' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, TextInAnimAddWaitFrame) == 0x000014, "Member 'FTitleSelectListTableRow::TextInAnimAddWaitFrame' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, BlurPlateAddWidth) == 0x000018, "Member 'FTitleSelectListTableRow::BlurPlateAddWidth' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, WaitMaskAnimFrame) == 0x00001C, "Member 'FTitleSelectListTableRow::WaitMaskAnimFrame' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, ItemCountWaitFrame) == 0x000020, "Member 'FTitleSelectListTableRow::ItemCountWaitFrame' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, CursorMoveFrame) == 0x000024, "Member 'FTitleSelectListTableRow::CursorMoveFrame' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, StretchFrame_Diff) == 0x000028, "Member 'FTitleSelectListTableRow::StretchFrame_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, ShrinkFrame_Diff) == 0x00002C, "Member 'FTitleSelectListTableRow::ShrinkFrame_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, ShrinkWaitFrame_Diff) == 0x000030, "Member 'FTitleSelectListTableRow::ShrinkWaitFrame_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, TextInAnimAddWaitFrame_Diff) == 0x000034, "Member 'FTitleSelectListTableRow::TextInAnimAddWaitFrame_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, BlurPlateAddWidth_Diff) == 0x000038, "Member 'FTitleSelectListTableRow::BlurPlateAddWidth_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, WaitMaskAnimFrame_Diff) == 0x00003C, "Member 'FTitleSelectListTableRow::WaitMaskAnimFrame_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, ItemCountWaitFrame_Diff) == 0x000040, "Member 'FTitleSelectListTableRow::ItemCountWaitFrame_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, CursorMoveFrame_Diff) == 0x000044, "Member 'FTitleSelectListTableRow::CursorMoveFrame_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, NAKAMI_IN_OK_MASK_FRAME) == 0x000048, "Member 'FTitleSelectListTableRow::NAKAMI_IN_OK_MASK_FRAME' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, NAKAMI_OUT_OK_MASK_FRAME) == 0x00004C, "Member 'FTitleSelectListTableRow::NAKAMI_OUT_OK_MASK_FRAME' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, NAKAMI_IN_RECT_ANIM_FRAME) == 0x000050, "Member 'FTitleSelectListTableRow::NAKAMI_IN_RECT_ANIM_FRAME' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, NAKAMI_WAIT_OUT_OK_FRAME) == 0x000054, "Member 'FTitleSelectListTableRow::NAKAMI_WAIT_OUT_OK_FRAME' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, NAKAMI_LOOP_PLAY_WAIT_FRAME) == 0x000058, "Member 'FTitleSelectListTableRow::NAKAMI_LOOP_PLAY_WAIT_FRAME' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, NAKAMI_IN_OK_MASK_FRAME_Diff) == 0x00005C, "Member 'FTitleSelectListTableRow::NAKAMI_IN_OK_MASK_FRAME_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, NAKAMI_OUT_OK_MASK_FRAME_Diff) == 0x000060, "Member 'FTitleSelectListTableRow::NAKAMI_OUT_OK_MASK_FRAME_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, NAKAMI_IN_RECT_ANIM_FRAME_Diff) == 0x000064, "Member 'FTitleSelectListTableRow::NAKAMI_IN_RECT_ANIM_FRAME_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, NAKAMI_WAIT_OUT_OK_FRAME_Diff) == 0x000068, "Member 'FTitleSelectListTableRow::NAKAMI_WAIT_OUT_OK_FRAME_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, NAKAMI_LOOP_PLAY_WAIT_FRAME_Diff) == 0x00006C, "Member 'FTitleSelectListTableRow::NAKAMI_LOOP_PLAY_WAIT_FRAME_Diff' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, TextSpriteInvalidColor) == 0x000070, "Member 'FTitleSelectListTableRow::TextSpriteInvalidColor' has a wrong offset!");
static_assert(offsetof(FTitleSelectListTableRow, TextEdgeSpriteInvalidColor) == 0x000074, "Member 'FTitleSelectListTableRow::TextEdgeSpriteInvalidColor' has a wrong offset!");

// ScriptStruct xrd777.TitleUITableRow
// 0x0078 (0x0080 - 0x0008)
struct FTitleUITableRow final : public FTableRowBase
{
public:
	int32                                         LogoFadeInFrame;                                   // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LogoAtlusCrossFadeFrame;                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LogoAtlusWaitFrame;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LogoMaskOutFrame;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogoAtlusVisibleTime;                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogoVisibleTime;                                   // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CautionFadeInFrame;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CautionVisibleFrame;                               // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CautionFadeOutFrame;                               // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PressAnyButtonVisibleFrame;                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PressAnyButtonWaitAnimFrame;                       // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PressAnyButtonSpeedFrame;                          // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CopyLightAndLogoVisibleWaitFrame;                  // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CopyLightAndLogoSpeedFrame;                        // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PressAnyUICloseFrame;                              // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectListAnimWaitFrame;                           // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleSelectListRootX;                              // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleSelectListRootY;                              // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PressWaitTimeout;                                  // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectTimeout;                                     // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogoAtlusWidthM;                                   // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogoAtlusHeightM;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Logo2ProWidthM;                                    // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Logo2ProHeightM;                                   // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogoUe4WidthM;                                     // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogoUe4HeightM;                                    // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LogoCloseAnimDEC;                                  // 0x0070(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CautionSkipWaitTime;                               // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PleaseWaitFadeInWaitTime;                          // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTitleUITableRow) == 0x000008, "Wrong alignment on FTitleUITableRow");
static_assert(sizeof(FTitleUITableRow) == 0x000080, "Wrong size on FTitleUITableRow");
static_assert(offsetof(FTitleUITableRow, LogoFadeInFrame) == 0x000008, "Member 'FTitleUITableRow::LogoFadeInFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, LogoAtlusCrossFadeFrame) == 0x00000C, "Member 'FTitleUITableRow::LogoAtlusCrossFadeFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, LogoAtlusWaitFrame) == 0x000010, "Member 'FTitleUITableRow::LogoAtlusWaitFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, LogoMaskOutFrame) == 0x000014, "Member 'FTitleUITableRow::LogoMaskOutFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, LogoAtlusVisibleTime) == 0x000018, "Member 'FTitleUITableRow::LogoAtlusVisibleTime' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, LogoVisibleTime) == 0x00001C, "Member 'FTitleUITableRow::LogoVisibleTime' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, CautionFadeInFrame) == 0x000020, "Member 'FTitleUITableRow::CautionFadeInFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, CautionVisibleFrame) == 0x000024, "Member 'FTitleUITableRow::CautionVisibleFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, CautionFadeOutFrame) == 0x000028, "Member 'FTitleUITableRow::CautionFadeOutFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, PressAnyButtonVisibleFrame) == 0x00002C, "Member 'FTitleUITableRow::PressAnyButtonVisibleFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, PressAnyButtonWaitAnimFrame) == 0x000030, "Member 'FTitleUITableRow::PressAnyButtonWaitAnimFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, PressAnyButtonSpeedFrame) == 0x000034, "Member 'FTitleUITableRow::PressAnyButtonSpeedFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, CopyLightAndLogoVisibleWaitFrame) == 0x000038, "Member 'FTitleUITableRow::CopyLightAndLogoVisibleWaitFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, CopyLightAndLogoSpeedFrame) == 0x00003C, "Member 'FTitleUITableRow::CopyLightAndLogoSpeedFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, PressAnyUICloseFrame) == 0x000040, "Member 'FTitleUITableRow::PressAnyUICloseFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, SelectListAnimWaitFrame) == 0x000044, "Member 'FTitleUITableRow::SelectListAnimWaitFrame' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, TitleSelectListRootX) == 0x000048, "Member 'FTitleUITableRow::TitleSelectListRootX' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, TitleSelectListRootY) == 0x00004C, "Member 'FTitleUITableRow::TitleSelectListRootY' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, PressWaitTimeout) == 0x000050, "Member 'FTitleUITableRow::PressWaitTimeout' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, SelectTimeout) == 0x000054, "Member 'FTitleUITableRow::SelectTimeout' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, LogoAtlusWidthM) == 0x000058, "Member 'FTitleUITableRow::LogoAtlusWidthM' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, LogoAtlusHeightM) == 0x00005C, "Member 'FTitleUITableRow::LogoAtlusHeightM' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, Logo2ProWidthM) == 0x000060, "Member 'FTitleUITableRow::Logo2ProWidthM' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, Logo2ProHeightM) == 0x000064, "Member 'FTitleUITableRow::Logo2ProHeightM' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, LogoUe4WidthM) == 0x000068, "Member 'FTitleUITableRow::LogoUe4WidthM' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, LogoUe4HeightM) == 0x00006C, "Member 'FTitleUITableRow::LogoUe4HeightM' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, LogoCloseAnimDEC) == 0x000070, "Member 'FTitleUITableRow::LogoCloseAnimDEC' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, CautionSkipWaitTime) == 0x000074, "Member 'FTitleUITableRow::CautionSkipWaitTime' has a wrong offset!");
static_assert(offsetof(FTitleUITableRow, PleaseWaitFadeInWaitTime) == 0x000078, "Member 'FTitleUITableRow::PleaseWaitFadeInWaitTime' has a wrong offset!");

// ScriptStruct xrd777.TutorialSortTableExtRow
// 0x0008 (0x0010 - 0x0008)
struct FTutorialSortTableExtRow final : public FTableRowBase
{
public:
	class FName                                   UseAstreaTex;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialSortTableExtRow) == 0x000008, "Wrong alignment on FTutorialSortTableExtRow");
static_assert(sizeof(FTutorialSortTableExtRow) == 0x000010, "Wrong size on FTutorialSortTableExtRow");
static_assert(offsetof(FTutorialSortTableExtRow, UseAstreaTex) == 0x000008, "Member 'FTutorialSortTableExtRow::UseAstreaTex' has a wrong offset!");

// ScriptStruct xrd777.TutorialSortTableRow
// 0x0038 (0x0040 - 0x0008)
struct FTutorialSortTableRow final : public FTableRowBase
{
public:
	int32                                         SortID;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TextureNames;                                      // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   OpenFlagName;                                      // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Comment;                                           // 0x0028(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialSortTableRow) == 0x000008, "Wrong alignment on FTutorialSortTableRow");
static_assert(sizeof(FTutorialSortTableRow) == 0x000040, "Wrong size on FTutorialSortTableRow");
static_assert(offsetof(FTutorialSortTableRow, SortID) == 0x000008, "Member 'FTutorialSortTableRow::SortID' has a wrong offset!");
static_assert(offsetof(FTutorialSortTableRow, TextureNames) == 0x000010, "Member 'FTutorialSortTableRow::TextureNames' has a wrong offset!");
static_assert(offsetof(FTutorialSortTableRow, OpenFlagName) == 0x000020, "Member 'FTutorialSortTableRow::OpenFlagName' has a wrong offset!");
static_assert(offsetof(FTutorialSortTableRow, Comment) == 0x000028, "Member 'FTutorialSortTableRow::Comment' has a wrong offset!");

// ScriptStruct xrd777.TutorialTableData
// 0x0030 (0x0030 - 0x0000)
struct FTutorialTableData final
{
public:
	int32                                         TutorialID;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortID;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OpenFlagID;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextureNames;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialTableData) == 0x000008, "Wrong alignment on FTutorialTableData");
static_assert(sizeof(FTutorialTableData) == 0x000030, "Wrong size on FTutorialTableData");
static_assert(offsetof(FTutorialTableData, TutorialID) == 0x000000, "Member 'FTutorialTableData::TutorialID' has a wrong offset!");
static_assert(offsetof(FTutorialTableData, SortID) == 0x000004, "Member 'FTutorialTableData::SortID' has a wrong offset!");
static_assert(offsetof(FTutorialTableData, OpenFlagID) == 0x000008, "Member 'FTutorialTableData::OpenFlagID' has a wrong offset!");
static_assert(offsetof(FTutorialTableData, Title) == 0x000010, "Member 'FTutorialTableData::Title' has a wrong offset!");
static_assert(offsetof(FTutorialTableData, TextureNames) == 0x000020, "Member 'FTutorialTableData::TextureNames' has a wrong offset!");

// ScriptStruct xrd777.TutorialTables
// 0x0010 (0x0010 - 0x0000)
struct FTutorialTables final
{
public:
	TArray<struct FTutorialTableData>             Datas;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialTables) == 0x000008, "Wrong alignment on FTutorialTables");
static_assert(sizeof(FTutorialTables) == 0x000010, "Wrong size on FTutorialTables");
static_assert(offsetof(FTutorialTables, Datas) == 0x000000, "Member 'FTutorialTables::Datas' has a wrong offset!");

// ScriptStruct xrd777.UIAccessInfoLayoutParam
// 0x0008 (0x0010 - 0x0008)
struct FUIAccessInfoLayoutParam final : public FTableRowBase
{
public:
	EAccessInfoCarNoDisplayType                   CarNoDisplayType;                                  // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAccessInfoPlaceNameWidthType                 PlaceNameWidthType;                                // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedCharacterWidth;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIAccessInfoLayoutParam) == 0x000008, "Wrong alignment on FUIAccessInfoLayoutParam");
static_assert(sizeof(FUIAccessInfoLayoutParam) == 0x000010, "Wrong size on FUIAccessInfoLayoutParam");
static_assert(offsetof(FUIAccessInfoLayoutParam, CarNoDisplayType) == 0x000008, "Member 'FUIAccessInfoLayoutParam::CarNoDisplayType' has a wrong offset!");
static_assert(offsetof(FUIAccessInfoLayoutParam, PlaceNameWidthType) == 0x000009, "Member 'FUIAccessInfoLayoutParam::PlaceNameWidthType' has a wrong offset!");
static_assert(offsetof(FUIAccessInfoLayoutParam, FixedCharacterWidth) == 0x00000C, "Member 'FUIAccessInfoLayoutParam::FixedCharacterWidth' has a wrong offset!");

// ScriptStruct xrd777.AssistSpriteItem
// 0x0028 (0x0028 - 0x0000)
struct FAssistSpriteItem final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UBustupObject*                          BustupObject;                                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USprAsset*                              Sprite;                                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssistSpriteItem) == 0x000008, "Wrong alignment on FAssistSpriteItem");
static_assert(sizeof(FAssistSpriteItem) == 0x000028, "Wrong size on FAssistSpriteItem");
static_assert(offsetof(FAssistSpriteItem, BustupObject) == 0x000018, "Member 'FAssistSpriteItem::BustupObject' has a wrong offset!");
static_assert(offsetof(FAssistSpriteItem, Sprite) == 0x000020, "Member 'FAssistSpriteItem::Sprite' has a wrong offset!");

// ScriptStruct xrd777.BattleHeadPanel
// 0x3380 (0x4020 - 0x0CA0)
struct FBattleHeadPanel final : public FBaseHeadPanel
{
public:
	uint8                                         Pad_CA0[0x628];                                    // 0x0CA0(0x0628)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               MaterialSmokeInst;                                 // 0x12C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MaterialSmokeInstGrey;                             // 0x12D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D8[0x2D48];                                  // 0x12D8(0x2D48)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBattleHeadPanel) == 0x000010, "Wrong alignment on FBattleHeadPanel");
static_assert(sizeof(FBattleHeadPanel) == 0x004020, "Wrong size on FBattleHeadPanel");
static_assert(offsetof(FBattleHeadPanel, MaterialSmokeInst) == 0x0012C8, "Member 'FBattleHeadPanel::MaterialSmokeInst' has a wrong offset!");
static_assert(offsetof(FBattleHeadPanel, MaterialSmokeInstGrey) == 0x0012D0, "Member 'FBattleHeadPanel::MaterialSmokeInstGrey' has a wrong offset!");

// ScriptStruct xrd777.CampHeadPanel
// 0x0040 (0x0CE0 - 0x0CA0)
struct FCampHeadPanel final : public FBaseHeadPanel
{
public:
	uint8                                         Pad_CA0[0x40];                                     // 0x0CA0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCampHeadPanel) == 0x000010, "Wrong alignment on FCampHeadPanel");
static_assert(sizeof(FCampHeadPanel) == 0x000CE0, "Wrong size on FCampHeadPanel");

// ScriptStruct xrd777.AnimeWork_t
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x04) FAnimeWork_t final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnimeWork_t) == 0x000004, "Wrong alignment on FAnimeWork_t");
static_assert(sizeof(FAnimeWork_t) == 0x000020, "Wrong size on FAnimeWork_t");

// ScriptStruct xrd777.UICmpCalendarDrawStringItem
// 0x0010 (0x0018 - 0x0008)
struct FUICmpCalendarDrawStringItem final : public FTableRowBase
{
public:
	class FName                                   String;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Comment;                                           // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUICmpCalendarDrawStringItem) == 0x000008, "Wrong alignment on FUICmpCalendarDrawStringItem");
static_assert(sizeof(FUICmpCalendarDrawStringItem) == 0x000018, "Wrong size on FUICmpCalendarDrawStringItem");
static_assert(offsetof(FUICmpCalendarDrawStringItem, String) == 0x000008, "Member 'FUICmpCalendarDrawStringItem::String' has a wrong offset!");
static_assert(offsetof(FUICmpCalendarDrawStringItem, Comment) == 0x000010, "Member 'FUICmpCalendarDrawStringItem::Comment' has a wrong offset!");

// ScriptStruct xrd777.UICmpCalendarDrawEditParameterItem
// 0x0020 (0x0028 - 0x0008)
struct FUICmpCalendarDrawEditParameterItem final : public FTableRowBase
{
public:
	int32                                         Frame;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Comment;                                           // 0x0010(0x0018)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUICmpCalendarDrawEditParameterItem) == 0x000008, "Wrong alignment on FUICmpCalendarDrawEditParameterItem");
static_assert(sizeof(FUICmpCalendarDrawEditParameterItem) == 0x000028, "Wrong size on FUICmpCalendarDrawEditParameterItem");
static_assert(offsetof(FUICmpCalendarDrawEditParameterItem, Frame) == 0x000008, "Member 'FUICmpCalendarDrawEditParameterItem::Frame' has a wrong offset!");
static_assert(offsetof(FUICmpCalendarDrawEditParameterItem, Comment) == 0x000010, "Member 'FUICmpCalendarDrawEditParameterItem::Comment' has a wrong offset!");

// ScriptStruct xrd777.ConfigAnimParams
// 0x0034 (0x0034 - 0x0000)
struct FConfigAnimParams final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsePos;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseColor;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseAngle;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseValue;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StartPos;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndPos;                                            // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 StartColor;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 EndColor;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAngle;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConfigAnimParams) == 0x000004, "Wrong alignment on FConfigAnimParams");
static_assert(sizeof(FConfigAnimParams) == 0x000034, "Wrong size on FConfigAnimParams");
static_assert(offsetof(FConfigAnimParams, StartFrame) == 0x000000, "Member 'FConfigAnimParams::StartFrame' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, EndFrame) == 0x000004, "Member 'FConfigAnimParams::EndFrame' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, bIsUsePos) == 0x000008, "Member 'FConfigAnimParams::bIsUsePos' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, bIsUseColor) == 0x000009, "Member 'FConfigAnimParams::bIsUseColor' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, bIsUseAngle) == 0x00000A, "Member 'FConfigAnimParams::bIsUseAngle' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, bIsUseValue) == 0x00000B, "Member 'FConfigAnimParams::bIsUseValue' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, StartPos) == 0x00000C, "Member 'FConfigAnimParams::StartPos' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, EndPos) == 0x000014, "Member 'FConfigAnimParams::EndPos' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, StartColor) == 0x00001C, "Member 'FConfigAnimParams::StartColor' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, EndColor) == 0x000020, "Member 'FConfigAnimParams::EndColor' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, StartAngle) == 0x000024, "Member 'FConfigAnimParams::StartAngle' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, EndAngle) == 0x000028, "Member 'FConfigAnimParams::EndAngle' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, StartValue) == 0x00002C, "Member 'FConfigAnimParams::StartValue' has a wrong offset!");
static_assert(offsetof(FConfigAnimParams, EndValue) == 0x000030, "Member 'FConfigAnimParams::EndValue' has a wrong offset!");

// ScriptStruct xrd777.CurveLinearColorAnimation
// 0x0008 (0x0030 - 0x0028)
struct FCurveLinearColorAnimation final : public FBaseCurveAnimation
{
public:
	class UCurveLinearColor*                      M_pCurveLinearColor;                               // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FCurveLinearColorAnimation) == 0x000008, "Wrong alignment on FCurveLinearColorAnimation");
static_assert(sizeof(FCurveLinearColorAnimation) == 0x000030, "Wrong size on FCurveLinearColorAnimation");
static_assert(offsetof(FCurveLinearColorAnimation, M_pCurveLinearColor) == 0x000028, "Member 'FCurveLinearColorAnimation::M_pCurveLinearColor' has a wrong offset!");

// ScriptStruct xrd777.CurveFloatAnimation
// 0x0008 (0x0030 - 0x0028)
struct FCurveFloatAnimation final : public FBaseCurveAnimation
{
public:
	class UCurveFloat*                            M_pCurveFloat;                                     // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FCurveFloatAnimation) == 0x000008, "Wrong alignment on FCurveFloatAnimation");
static_assert(sizeof(FCurveFloatAnimation) == 0x000030, "Wrong size on FCurveFloatAnimation");
static_assert(offsetof(FCurveFloatAnimation, M_pCurveFloat) == 0x000028, "Member 'FCurveFloatAnimation::M_pCurveFloat' has a wrong offset!");

// ScriptStruct xrd777.HiddenArbeitData
// 0x0014 (0x0014 - 0x0000)
struct FHiddenArbeitData final
{
public:
	int32                                         Month;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDay;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArbeitOrderableTime                          TimeZone;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visibility;                                        // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        EnableFlag;                                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHiddenArbeitData) == 0x000004, "Wrong alignment on FHiddenArbeitData");
static_assert(sizeof(FHiddenArbeitData) == 0x000014, "Wrong size on FHiddenArbeitData");
static_assert(offsetof(FHiddenArbeitData, Month) == 0x000000, "Member 'FHiddenArbeitData::Month' has a wrong offset!");
static_assert(offsetof(FHiddenArbeitData, Day) == 0x000004, "Member 'FHiddenArbeitData::Day' has a wrong offset!");
static_assert(offsetof(FHiddenArbeitData, TotalDay) == 0x000008, "Member 'FHiddenArbeitData::TotalDay' has a wrong offset!");
static_assert(offsetof(FHiddenArbeitData, TimeZone) == 0x00000C, "Member 'FHiddenArbeitData::TimeZone' has a wrong offset!");
static_assert(offsetof(FHiddenArbeitData, Visibility) == 0x00000D, "Member 'FHiddenArbeitData::Visibility' has a wrong offset!");
static_assert(offsetof(FHiddenArbeitData, EnableFlag) == 0x000010, "Member 'FHiddenArbeitData::EnableFlag' has a wrong offset!");

// ScriptStruct xrd777.ArbeitInfo
// 0x0018 (0x0018 - 0x0000)
struct FArbeitInfo final
{
public:
	uint32                                        HelpMSGLabel;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArbeitOrderableTime                          OrderableTimes;                                    // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OrderableWeeks;                                    // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        UnlockFLG;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        UnlockDayCNT;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        HiddenFLG;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HolidayWork;                                       // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArbeitInfo) == 0x000004, "Wrong alignment on FArbeitInfo");
static_assert(sizeof(FArbeitInfo) == 0x000018, "Wrong size on FArbeitInfo");
static_assert(offsetof(FArbeitInfo, HelpMSGLabel) == 0x000000, "Member 'FArbeitInfo::HelpMSGLabel' has a wrong offset!");
static_assert(offsetof(FArbeitInfo, OrderableTimes) == 0x000004, "Member 'FArbeitInfo::OrderableTimes' has a wrong offset!");
static_assert(offsetof(FArbeitInfo, OrderableWeeks) == 0x000005, "Member 'FArbeitInfo::OrderableWeeks' has a wrong offset!");
static_assert(offsetof(FArbeitInfo, UnlockFLG) == 0x000008, "Member 'FArbeitInfo::UnlockFLG' has a wrong offset!");
static_assert(offsetof(FArbeitInfo, UnlockDayCNT) == 0x00000C, "Member 'FArbeitInfo::UnlockDayCNT' has a wrong offset!");
static_assert(offsetof(FArbeitInfo, HiddenFLG) == 0x000010, "Member 'FArbeitInfo::HiddenFLG' has a wrong offset!");
static_assert(offsetof(FArbeitInfo, HolidayWork) == 0x000014, "Member 'FArbeitInfo::HolidayWork' has a wrong offset!");

// ScriptStruct xrd777.GenSelItemLineupItem
// 0x0008 (0x0008 - 0x0000)
struct FGenSelItemLineupItem final
{
public:
	uint16                                        ItemId;                                            // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        VisibleFlag;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenSelItemLineupItem) == 0x000004, "Wrong alignment on FGenSelItemLineupItem");
static_assert(sizeof(FGenSelItemLineupItem) == 0x000008, "Wrong size on FGenSelItemLineupItem");
static_assert(offsetof(FGenSelItemLineupItem, ItemId) == 0x000000, "Member 'FGenSelItemLineupItem::ItemId' has a wrong offset!");
static_assert(offsetof(FGenSelItemLineupItem, VisibleFlag) == 0x000004, "Member 'FGenSelItemLineupItem::VisibleFlag' has a wrong offset!");

// ScriptStruct xrd777.GenSelItemLineup
// 0x0010 (0x0010 - 0x0000)
struct FGenSelItemLineup final
{
public:
	TArray<struct FGenSelItemLineupItem>          Data;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenSelItemLineup) == 0x000008, "Wrong alignment on FGenSelItemLineup");
static_assert(sizeof(FGenSelItemLineup) == 0x000010, "Wrong size on FGenSelItemLineup");
static_assert(offsetof(FGenSelItemLineup, Data) == 0x000000, "Member 'FGenSelItemLineup::Data' has a wrong offset!");

// ScriptStruct xrd777.GenSelItemDefine
// 0x0038 (0x0038 - 0x0000)
struct FGenSelItemDefine final
{
public:
	int32                                         DefineValue;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefineName;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleText;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommentText;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenSelItemDefine) == 0x000008, "Wrong alignment on FGenSelItemDefine");
static_assert(sizeof(FGenSelItemDefine) == 0x000038, "Wrong size on FGenSelItemDefine");
static_assert(offsetof(FGenSelItemDefine, DefineValue) == 0x000000, "Member 'FGenSelItemDefine::DefineValue' has a wrong offset!");
static_assert(offsetof(FGenSelItemDefine, DefineName) == 0x000008, "Member 'FGenSelItemDefine::DefineName' has a wrong offset!");
static_assert(offsetof(FGenSelItemDefine, TitleText) == 0x000018, "Member 'FGenSelItemDefine::TitleText' has a wrong offset!");
static_assert(offsetof(FGenSelItemDefine, CommentText) == 0x000028, "Member 'FGenSelItemDefine::CommentText' has a wrong offset!");

// ScriptStruct xrd777.ModelCaptureEnvironment
// 0x0020 (0x0020 - 0x0000)
struct FModelCaptureEnvironment final
{
public:
	TArray<struct FCollectionScalarParameter>     ScalarParameters;                                  // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCollectionVectorParameter>     VectorParameters;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModelCaptureEnvironment) == 0x000008, "Wrong alignment on FModelCaptureEnvironment");
static_assert(sizeof(FModelCaptureEnvironment) == 0x000020, "Wrong size on FModelCaptureEnvironment");
static_assert(offsetof(FModelCaptureEnvironment, ScalarParameters) == 0x000000, "Member 'FModelCaptureEnvironment::ScalarParameters' has a wrong offset!");
static_assert(offsetof(FModelCaptureEnvironment, VectorParameters) == 0x000010, "Member 'FModelCaptureEnvironment::VectorParameters' has a wrong offset!");

// ScriptStruct xrd777.ModelCaptureLayoutItem
// 0x0058 (0x0058 - 0x0000)
struct FModelCaptureLayoutItem final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RotationOffset;                                    // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOV;                                               // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotationLocal;                                    // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bYawLimit;                                         // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         YawMinusLimit;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawPlusLimit;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimationType                                AnimType;                                          // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FModelCaptureEnvironment               Environment;                                       // 0x0038(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FModelCaptureLayoutItem) == 0x000008, "Wrong alignment on FModelCaptureLayoutItem");
static_assert(sizeof(FModelCaptureLayoutItem) == 0x000058, "Wrong size on FModelCaptureLayoutItem");
static_assert(offsetof(FModelCaptureLayoutItem, Location) == 0x000000, "Member 'FModelCaptureLayoutItem::Location' has a wrong offset!");
static_assert(offsetof(FModelCaptureLayoutItem, Rotation) == 0x00000C, "Member 'FModelCaptureLayoutItem::Rotation' has a wrong offset!");
static_assert(offsetof(FModelCaptureLayoutItem, RotationOffset) == 0x000018, "Member 'FModelCaptureLayoutItem::RotationOffset' has a wrong offset!");
static_assert(offsetof(FModelCaptureLayoutItem, FOV) == 0x000024, "Member 'FModelCaptureLayoutItem::FOV' has a wrong offset!");
static_assert(offsetof(FModelCaptureLayoutItem, bRotationLocal) == 0x000028, "Member 'FModelCaptureLayoutItem::bRotationLocal' has a wrong offset!");
static_assert(offsetof(FModelCaptureLayoutItem, bYawLimit) == 0x000029, "Member 'FModelCaptureLayoutItem::bYawLimit' has a wrong offset!");
static_assert(offsetof(FModelCaptureLayoutItem, YawMinusLimit) == 0x00002C, "Member 'FModelCaptureLayoutItem::YawMinusLimit' has a wrong offset!");
static_assert(offsetof(FModelCaptureLayoutItem, YawPlusLimit) == 0x000030, "Member 'FModelCaptureLayoutItem::YawPlusLimit' has a wrong offset!");
static_assert(offsetof(FModelCaptureLayoutItem, AnimType) == 0x000034, "Member 'FModelCaptureLayoutItem::AnimType' has a wrong offset!");
static_assert(offsetof(FModelCaptureLayoutItem, Environment) == 0x000038, "Member 'FModelCaptureLayoutItem::Environment' has a wrong offset!");

// ScriptStruct xrd777.CmmProfileItem
// 0x0060 (0x0060 - 0x0000)
struct FCmmProfileItem final
{
public:
	uint16                                        PCID;                                              // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        DisappearID;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NameMsgNo;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<ECmmProfileMsgType, int32>               ProfileMsgNo;                                      // 0x0010(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCmmProfileItem) == 0x000008, "Wrong alignment on FCmmProfileItem");
static_assert(sizeof(FCmmProfileItem) == 0x000060, "Wrong size on FCmmProfileItem");
static_assert(offsetof(FCmmProfileItem, PCID) == 0x000000, "Member 'FCmmProfileItem::PCID' has a wrong offset!");
static_assert(offsetof(FCmmProfileItem, DisappearID) == 0x000004, "Member 'FCmmProfileItem::DisappearID' has a wrong offset!");
static_assert(offsetof(FCmmProfileItem, NameMsgNo) == 0x000008, "Member 'FCmmProfileItem::NameMsgNo' has a wrong offset!");
static_assert(offsetof(FCmmProfileItem, ProfileMsgNo) == 0x000010, "Member 'FCmmProfileItem::ProfileMsgNo' has a wrong offset!");

// ScriptStruct xrd777.VelvetRoomQuestRequest
// 0x0010 (0x0010 - 0x0000)
struct FVelvetRoomQuestRequest final
{
public:
	EQuestRequestType                             Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestRequestPersonaType                      PersonaType;                                       // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestRequestOption                           OPTION;                                            // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ID;                                                // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Value;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Penalty;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVelvetRoomQuestRequest) == 0x000004, "Wrong alignment on FVelvetRoomQuestRequest");
static_assert(sizeof(FVelvetRoomQuestRequest) == 0x000010, "Wrong size on FVelvetRoomQuestRequest");
static_assert(offsetof(FVelvetRoomQuestRequest, Type) == 0x000000, "Member 'FVelvetRoomQuestRequest::Type' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestRequest, PersonaType) == 0x000001, "Member 'FVelvetRoomQuestRequest::PersonaType' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestRequest, OPTION) == 0x000002, "Member 'FVelvetRoomQuestRequest::OPTION' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestRequest, ID) == 0x000004, "Member 'FVelvetRoomQuestRequest::ID' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestRequest, Value) == 0x000008, "Member 'FVelvetRoomQuestRequest::Value' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestRequest, Penalty) == 0x00000C, "Member 'FVelvetRoomQuestRequest::Penalty' has a wrong offset!");

// ScriptStruct xrd777.VelvetRoomQuestReward
// 0x0008 (0x0008 - 0x0000)
struct FVelvetRoomQuestReward final
{
public:
	uint16                                        ItemId;                                            // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ItemNum;                                           // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Money;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVelvetRoomQuestReward) == 0x000004, "Wrong alignment on FVelvetRoomQuestReward");
static_assert(sizeof(FVelvetRoomQuestReward) == 0x000008, "Wrong size on FVelvetRoomQuestReward");
static_assert(offsetof(FVelvetRoomQuestReward, ItemId) == 0x000000, "Member 'FVelvetRoomQuestReward::ItemId' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestReward, ItemNum) == 0x000002, "Member 'FVelvetRoomQuestReward::ItemNum' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestReward, Money) == 0x000004, "Member 'FVelvetRoomQuestReward::Money' has a wrong offset!");

// ScriptStruct xrd777.VelvetRoomQuestItem
// 0x0048 (0x0048 - 0x0000)
struct FVelvetRoomQuestItem final
{
public:
	TArray<uint16>                                OpenNo;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         StartMonth;                                        // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartDay;                                          // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndMonth;                                          // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndDay;                                            // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OpenFlag;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ReceivedFlag;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EndFlag;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rank;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVelvetRoomQuestRequest                Request;                                           // 0x0024(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVelvetRoomQuestReward                 Reward;                                            // 0x0034(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint32                                        InfoDisplay;                                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OrderTalkID;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        QuestIndex;                                        // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVelvetRoomQuestItem) == 0x000008, "Wrong alignment on FVelvetRoomQuestItem");
static_assert(sizeof(FVelvetRoomQuestItem) == 0x000048, "Wrong size on FVelvetRoomQuestItem");
static_assert(offsetof(FVelvetRoomQuestItem, OpenNo) == 0x000000, "Member 'FVelvetRoomQuestItem::OpenNo' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, StartMonth) == 0x000010, "Member 'FVelvetRoomQuestItem::StartMonth' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, StartDay) == 0x000011, "Member 'FVelvetRoomQuestItem::StartDay' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, EndMonth) == 0x000012, "Member 'FVelvetRoomQuestItem::EndMonth' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, EndDay) == 0x000013, "Member 'FVelvetRoomQuestItem::EndDay' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, OpenFlag) == 0x000014, "Member 'FVelvetRoomQuestItem::OpenFlag' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, ReceivedFlag) == 0x000018, "Member 'FVelvetRoomQuestItem::ReceivedFlag' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, EndFlag) == 0x00001C, "Member 'FVelvetRoomQuestItem::EndFlag' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, Rank) == 0x000020, "Member 'FVelvetRoomQuestItem::Rank' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, Request) == 0x000024, "Member 'FVelvetRoomQuestItem::Request' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, Reward) == 0x000034, "Member 'FVelvetRoomQuestItem::Reward' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, InfoDisplay) == 0x00003C, "Member 'FVelvetRoomQuestItem::InfoDisplay' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, OrderTalkID) == 0x000040, "Member 'FVelvetRoomQuestItem::OrderTalkID' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestItem, QuestIndex) == 0x000044, "Member 'FVelvetRoomQuestItem::QuestIndex' has a wrong offset!");

// ScriptStruct xrd777.SkillPowerUpItem
// 0x0008 (0x0008 - 0x0000)
struct FSkillPowerUpItem final
{
public:
	uint16                                        OldSkill;                                          // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        NewSkill;                                          // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        LevelLimit;                                        // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillPowerUpItem) == 0x000002, "Wrong alignment on FSkillPowerUpItem");
static_assert(sizeof(FSkillPowerUpItem) == 0x000008, "Wrong size on FSkillPowerUpItem");
static_assert(offsetof(FSkillPowerUpItem, OldSkill) == 0x000000, "Member 'FSkillPowerUpItem::OldSkill' has a wrong offset!");
static_assert(offsetof(FSkillPowerUpItem, NewSkill) == 0x000002, "Member 'FSkillPowerUpItem::NewSkill' has a wrong offset!");
static_assert(offsetof(FSkillPowerUpItem, LevelLimit) == 0x000004, "Member 'FSkillPowerUpItem::LevelLimit' has a wrong offset!");

// ScriptStruct xrd777.SkillPackItem
// 0x0008 (0x0008 - 0x0000)
struct FSkillPackItem final
{
public:
	uint16                                        Rank;                                              // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill;                                             // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Weight;                                            // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillPackItem) == 0x000002, "Wrong alignment on FSkillPackItem");
static_assert(sizeof(FSkillPackItem) == 0x000008, "Wrong size on FSkillPackItem");
static_assert(offsetof(FSkillPackItem, Rank) == 0x000000, "Member 'FSkillPackItem::Rank' has a wrong offset!");
static_assert(offsetof(FSkillPackItem, Skill) == 0x000002, "Member 'FSkillPackItem::Skill' has a wrong offset!");
static_assert(offsetof(FSkillPackItem, Weight) == 0x000004, "Member 'FSkillPackItem::Weight' has a wrong offset!");

// ScriptStruct xrd777.SkillPackItems
// 0x0010 (0x0010 - 0x0000)
struct FSkillPackItems final
{
public:
	TArray<struct FSkillPackItem>                 Items;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillPackItems) == 0x000008, "Wrong alignment on FSkillPackItems");
static_assert(sizeof(FSkillPackItems) == 0x000010, "Wrong size on FSkillPackItems");
static_assert(offsetof(FSkillPackItems, Items) == 0x000000, "Member 'FSkillPackItems::Items' has a wrong offset!");

// ScriptStruct xrd777.SkillChangeItem
// 0x0002 (0x0002 - 0x0000)
struct FSkillChangeItem final
{
public:
	uint16                                        SkillPack;                                         // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillChangeItem) == 0x000002, "Wrong alignment on FSkillChangeItem");
static_assert(sizeof(FSkillChangeItem) == 0x000002, "Wrong size on FSkillChangeItem");
static_assert(offsetof(FSkillChangeItem, SkillPack) == 0x000000, "Member 'FSkillChangeItem::SkillPack' has a wrong offset!");

// ScriptStruct xrd777.CombineCounterItem
// 0x0008 (0x0008 - 0x0000)
struct FCombineCounterItem final
{
public:
	uint16                                        Num;                                               // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ConceptionRate;                                    // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillChangeRate;                                   // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AccidentRate;                                      // 0x0006(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombineCounterItem) == 0x000002, "Wrong alignment on FCombineCounterItem");
static_assert(sizeof(FCombineCounterItem) == 0x000008, "Wrong size on FCombineCounterItem");
static_assert(offsetof(FCombineCounterItem, Num) == 0x000000, "Member 'FCombineCounterItem::Num' has a wrong offset!");
static_assert(offsetof(FCombineCounterItem, ConceptionRate) == 0x000002, "Member 'FCombineCounterItem::ConceptionRate' has a wrong offset!");
static_assert(offsetof(FCombineCounterItem, SkillChangeRate) == 0x000004, "Member 'FCombineCounterItem::SkillChangeRate' has a wrong offset!");
static_assert(offsetof(FCombineCounterItem, AccidentRate) == 0x000006, "Member 'FCombineCounterItem::AccidentRate' has a wrong offset!");

// ScriptStruct xrd777.MoonAgeProbabilityItem
// 0x0008 (0x0008 - 0x0000)
struct FMoonAgeProbabilityItem final
{
public:
	uint16                                        ConceptionRate;                                    // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillChangeRate;                                   // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AccidentRate;                                      // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoonAgeProbabilityItem) == 0x000002, "Wrong alignment on FMoonAgeProbabilityItem");
static_assert(sizeof(FMoonAgeProbabilityItem) == 0x000008, "Wrong size on FMoonAgeProbabilityItem");
static_assert(offsetof(FMoonAgeProbabilityItem, ConceptionRate) == 0x000000, "Member 'FMoonAgeProbabilityItem::ConceptionRate' has a wrong offset!");
static_assert(offsetof(FMoonAgeProbabilityItem, SkillChangeRate) == 0x000002, "Member 'FMoonAgeProbabilityItem::SkillChangeRate' has a wrong offset!");
static_assert(offsetof(FMoonAgeProbabilityItem, AccidentRate) == 0x000004, "Member 'FMoonAgeProbabilityItem::AccidentRate' has a wrong offset!");

// ScriptStruct xrd777.CommunityRankItem
// 0x0004 (0x0004 - 0x0000)
struct FCommunityRankItem final
{
public:
	uint16                                        Bonus;                                             // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        HighBonus;                                         // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCommunityRankItem) == 0x000002, "Wrong alignment on FCommunityRankItem");
static_assert(sizeof(FCommunityRankItem) == 0x000004, "Wrong size on FCommunityRankItem");
static_assert(offsetof(FCommunityRankItem, Bonus) == 0x000000, "Member 'FCommunityRankItem::Bonus' has a wrong offset!");
static_assert(offsetof(FCommunityRankItem, HighBonus) == 0x000002, "Member 'FCommunityRankItem::HighBonus' has a wrong offset!");

// ScriptStruct xrd777.PersonaConfigItem
// 0x000C (0x000C - 0x0000)
struct FPersonaConfigItem final
{
public:
	int32                                         BirthMsgNo;                                        // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ToneType;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        VoicePack;                                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonaConfigItem) == 0x000004, "Wrong alignment on FPersonaConfigItem");
static_assert(sizeof(FPersonaConfigItem) == 0x00000C, "Wrong size on FPersonaConfigItem");
static_assert(offsetof(FPersonaConfigItem, BirthMsgNo) == 0x000000, "Member 'FPersonaConfigItem::BirthMsgNo' has a wrong offset!");
static_assert(offsetof(FPersonaConfigItem, ToneType) == 0x000004, "Member 'FPersonaConfigItem::ToneType' has a wrong offset!");
static_assert(offsetof(FPersonaConfigItem, VoicePack) == 0x000008, "Member 'FPersonaConfigItem::VoicePack' has a wrong offset!");

// ScriptStruct xrd777.SkillLimitItem
// 0x0002 (0x0002 - 0x0000)
struct FSkillLimitItem final
{
public:
	uint8                                         TotalSkillNum;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InheritanceSkillNum;                               // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillLimitItem) == 0x000001, "Wrong alignment on FSkillLimitItem");
static_assert(sizeof(FSkillLimitItem) == 0x000002, "Wrong size on FSkillLimitItem");
static_assert(offsetof(FSkillLimitItem, TotalSkillNum) == 0x000000, "Member 'FSkillLimitItem::TotalSkillNum' has a wrong offset!");
static_assert(offsetof(FSkillLimitItem, InheritanceSkillNum) == 0x000001, "Member 'FSkillLimitItem::InheritanceSkillNum' has a wrong offset!");

// ScriptStruct xrd777.SkillAffinityItem
// 0x0004 (0x0004 - 0x0000)
struct FSkillAffinityItem final
{
public:
	uint32                                        Bit;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillAffinityItem) == 0x000004, "Wrong alignment on FSkillAffinityItem");
static_assert(sizeof(FSkillAffinityItem) == 0x000004, "Wrong size on FSkillAffinityItem");
static_assert(offsetof(FSkillAffinityItem, Bit) == 0x000000, "Member 'FSkillAffinityItem::Bit' has a wrong offset!");

// ScriptStruct xrd777.PersonaLiftItem
// 0x000C (0x000C - 0x0000)
struct FPersonaLiftItem final
{
public:
	uint16                                        PersonaID;                                         // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        OrFlag;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AndFlag;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonaLiftItem) == 0x000004, "Wrong alignment on FPersonaLiftItem");
static_assert(sizeof(FPersonaLiftItem) == 0x00000C, "Wrong size on FPersonaLiftItem");
static_assert(offsetof(FPersonaLiftItem, PersonaID) == 0x000000, "Member 'FPersonaLiftItem::PersonaID' has a wrong offset!");
static_assert(offsetof(FPersonaLiftItem, OrFlag) == 0x000004, "Member 'FPersonaLiftItem::OrFlag' has a wrong offset!");
static_assert(offsetof(FPersonaLiftItem, AndFlag) == 0x000008, "Member 'FPersonaLiftItem::AndFlag' has a wrong offset!");

// ScriptStruct xrd777.SpecialSpreadItem
// 0x0010 (0x0010 - 0x0000)
struct FSpecialSpreadItem final
{
public:
	uint16                                        ResultID;                                          // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SourceID[0x6];                                     // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Index;                                             // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialSpreadItem) == 0x000002, "Wrong alignment on FSpecialSpreadItem");
static_assert(sizeof(FSpecialSpreadItem) == 0x000010, "Wrong size on FSpecialSpreadItem");
static_assert(offsetof(FSpecialSpreadItem, ResultID) == 0x000000, "Member 'FSpecialSpreadItem::ResultID' has a wrong offset!");
static_assert(offsetof(FSpecialSpreadItem, SourceID) == 0x000002, "Member 'FSpecialSpreadItem::SourceID' has a wrong offset!");
static_assert(offsetof(FSpecialSpreadItem, Index) == 0x00000E, "Member 'FSpecialSpreadItem::Index' has a wrong offset!");

// ScriptStruct xrd777.NormalSpreadItem
// 0x0010 (0x0010 - 0x0000)
struct FNormalSpreadItem final
{
public:
	TArray<uint8>                                 Races;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNormalSpreadItem) == 0x000008, "Wrong alignment on FNormalSpreadItem");
static_assert(sizeof(FNormalSpreadItem) == 0x000010, "Wrong size on FNormalSpreadItem");
static_assert(offsetof(FNormalSpreadItem, Races) == 0x000000, "Member 'FNormalSpreadItem::Races' has a wrong offset!");

// ScriptStruct xrd777.WeaponShopAwardData
// 0x0010 (0x0010 - 0x0000)
struct FWeaponShopAwardData final
{
public:
	uint16                                        MaxArrivedFloor;                                   // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TotalDefeatedEnemies;                              // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardFlag;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AwardItemID;                                       // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AwardItemNum;                                      // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AwardMoney;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponShopAwardData) == 0x000004, "Wrong alignment on FWeaponShopAwardData");
static_assert(sizeof(FWeaponShopAwardData) == 0x000010, "Wrong size on FWeaponShopAwardData");
static_assert(offsetof(FWeaponShopAwardData, MaxArrivedFloor) == 0x000000, "Member 'FWeaponShopAwardData::MaxArrivedFloor' has a wrong offset!");
static_assert(offsetof(FWeaponShopAwardData, TotalDefeatedEnemies) == 0x000002, "Member 'FWeaponShopAwardData::TotalDefeatedEnemies' has a wrong offset!");
static_assert(offsetof(FWeaponShopAwardData, AwardFlag) == 0x000004, "Member 'FWeaponShopAwardData::AwardFlag' has a wrong offset!");
static_assert(offsetof(FWeaponShopAwardData, AwardItemID) == 0x000008, "Member 'FWeaponShopAwardData::AwardItemID' has a wrong offset!");
static_assert(offsetof(FWeaponShopAwardData, AwardItemNum) == 0x00000A, "Member 'FWeaponShopAwardData::AwardItemNum' has a wrong offset!");
static_assert(offsetof(FWeaponShopAwardData, AwardMoney) == 0x00000C, "Member 'FWeaponShopAwardData::AwardMoney' has a wrong offset!");

// ScriptStruct xrd777.DisappearItem
// 0x0024 (0x0024 - 0x0000)
struct FDisappearItem final
{
public:
	uint8                                         StartMonth;                                        // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartDays;                                         // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LimitMonth;                                        // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LimitDays;                                         // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActiveFlag;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessFlag;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FailedFlag;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NpcFlag;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoOnFlag;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AwardFlag;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AwardItemID;                                       // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AwardItemNum;                                      // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AwardMoney;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisappearItem) == 0x000004, "Wrong alignment on FDisappearItem");
static_assert(sizeof(FDisappearItem) == 0x000024, "Wrong size on FDisappearItem");
static_assert(offsetof(FDisappearItem, StartMonth) == 0x000000, "Member 'FDisappearItem::StartMonth' has a wrong offset!");
static_assert(offsetof(FDisappearItem, StartDays) == 0x000001, "Member 'FDisappearItem::StartDays' has a wrong offset!");
static_assert(offsetof(FDisappearItem, LimitMonth) == 0x000002, "Member 'FDisappearItem::LimitMonth' has a wrong offset!");
static_assert(offsetof(FDisappearItem, LimitDays) == 0x000003, "Member 'FDisappearItem::LimitDays' has a wrong offset!");
static_assert(offsetof(FDisappearItem, ActiveFlag) == 0x000004, "Member 'FDisappearItem::ActiveFlag' has a wrong offset!");
static_assert(offsetof(FDisappearItem, SuccessFlag) == 0x000008, "Member 'FDisappearItem::SuccessFlag' has a wrong offset!");
static_assert(offsetof(FDisappearItem, FailedFlag) == 0x00000C, "Member 'FDisappearItem::FailedFlag' has a wrong offset!");
static_assert(offsetof(FDisappearItem, NpcFlag) == 0x000010, "Member 'FDisappearItem::NpcFlag' has a wrong offset!");
static_assert(offsetof(FDisappearItem, InfoOnFlag) == 0x000014, "Member 'FDisappearItem::InfoOnFlag' has a wrong offset!");
static_assert(offsetof(FDisappearItem, AwardFlag) == 0x000018, "Member 'FDisappearItem::AwardFlag' has a wrong offset!");
static_assert(offsetof(FDisappearItem, AwardItemID) == 0x00001C, "Member 'FDisappearItem::AwardItemID' has a wrong offset!");
static_assert(offsetof(FDisappearItem, AwardItemNum) == 0x00001E, "Member 'FDisappearItem::AwardItemNum' has a wrong offset!");
static_assert(offsetof(FDisappearItem, AwardMoney) == 0x000020, "Member 'FDisappearItem::AwardMoney' has a wrong offset!");

// ScriptStruct xrd777.MailIncomingItem
// 0x0080 (0x0080 - 0x0000)
struct FMailIncomingItem final
{
public:
	uint16                                        ID;                                                // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SenderID;                                          // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Group;                                             // 0x0004(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMailCategory                                 Category;                                          // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartMonth;                                        // 0x0007(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartDays;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndMonth;                                          // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndDays;                                           // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMailTime                                     ReceiveTime;                                       // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         WeekFlag;                                          // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bWeekday : 1;                                      // 0x000D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHoliday : 1;                                      // 0x000D(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRankUp : 1;                                       // 0x000D(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bOnlyOnce : 1;                                     // 0x000D(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ArcanaID;                                          // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMailCondition                                ArcanaCondition;                                   // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rank;                                              // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InviteCounter;                                     // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CounterID;                                         // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMailCondition                                CounterCondition;                                  // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CounterValue;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MailBmdFileName;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SenderLabelID;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TitleLabelID;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BodyLabelID;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ScriptBfFileName;                                  // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScriptBmdFileName;                                 // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EnableFlags;                                       // 0x0060(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 DisableFlags;                                      // 0x0070(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMailIncomingItem) == 0x000008, "Wrong alignment on FMailIncomingItem");
static_assert(sizeof(FMailIncomingItem) == 0x000080, "Wrong size on FMailIncomingItem");
static_assert(offsetof(FMailIncomingItem, ID) == 0x000000, "Member 'FMailIncomingItem::ID' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, SenderID) == 0x000002, "Member 'FMailIncomingItem::SenderID' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, Group) == 0x000004, "Member 'FMailIncomingItem::Group' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, Category) == 0x000006, "Member 'FMailIncomingItem::Category' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, StartMonth) == 0x000007, "Member 'FMailIncomingItem::StartMonth' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, StartDays) == 0x000008, "Member 'FMailIncomingItem::StartDays' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, EndMonth) == 0x000009, "Member 'FMailIncomingItem::EndMonth' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, EndDays) == 0x00000A, "Member 'FMailIncomingItem::EndDays' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, ReceiveTime) == 0x00000B, "Member 'FMailIncomingItem::ReceiveTime' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, WeekFlag) == 0x00000C, "Member 'FMailIncomingItem::WeekFlag' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, ArcanaID) == 0x00000E, "Member 'FMailIncomingItem::ArcanaID' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, ArcanaCondition) == 0x00000F, "Member 'FMailIncomingItem::ArcanaCondition' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, Rank) == 0x000010, "Member 'FMailIncomingItem::Rank' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, InviteCounter) == 0x000011, "Member 'FMailIncomingItem::InviteCounter' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, CounterID) == 0x000014, "Member 'FMailIncomingItem::CounterID' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, CounterCondition) == 0x000018, "Member 'FMailIncomingItem::CounterCondition' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, CounterValue) == 0x00001C, "Member 'FMailIncomingItem::CounterValue' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, MailBmdFileName) == 0x000020, "Member 'FMailIncomingItem::MailBmdFileName' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, SenderLabelID) == 0x000030, "Member 'FMailIncomingItem::SenderLabelID' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, TitleLabelID) == 0x000034, "Member 'FMailIncomingItem::TitleLabelID' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, BodyLabelID) == 0x000038, "Member 'FMailIncomingItem::BodyLabelID' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, ScriptBfFileName) == 0x000040, "Member 'FMailIncomingItem::ScriptBfFileName' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, ScriptBmdFileName) == 0x000050, "Member 'FMailIncomingItem::ScriptBmdFileName' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, EnableFlags) == 0x000060, "Member 'FMailIncomingItem::EnableFlags' has a wrong offset!");
static_assert(offsetof(FMailIncomingItem, DisableFlags) == 0x000070, "Member 'FMailIncomingItem::DisableFlags' has a wrong offset!");

// ScriptStruct xrd777.SupportBustupParam
// 0x0030 (0x0030 - 0x0000)
struct FSupportBustupParam final
{
public:
	uint16                                        CharaID;                                           // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Pose;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetLeft_X;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetLeft_Y;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskOffsetLeft_Y;                                  // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetRight_X;                                     // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetRight_Y;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskOffsetRight_Y;                                 // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSupportBustupParam) == 0x000008, "Wrong alignment on FSupportBustupParam");
static_assert(sizeof(FSupportBustupParam) == 0x000030, "Wrong size on FSupportBustupParam");
static_assert(offsetof(FSupportBustupParam, CharaID) == 0x000000, "Member 'FSupportBustupParam::CharaID' has a wrong offset!");
static_assert(offsetof(FSupportBustupParam, Pose) == 0x000008, "Member 'FSupportBustupParam::Pose' has a wrong offset!");
static_assert(offsetof(FSupportBustupParam, OffsetLeft_X) == 0x000018, "Member 'FSupportBustupParam::OffsetLeft_X' has a wrong offset!");
static_assert(offsetof(FSupportBustupParam, OffsetLeft_Y) == 0x00001C, "Member 'FSupportBustupParam::OffsetLeft_Y' has a wrong offset!");
static_assert(offsetof(FSupportBustupParam, MaskOffsetLeft_Y) == 0x000020, "Member 'FSupportBustupParam::MaskOffsetLeft_Y' has a wrong offset!");
static_assert(offsetof(FSupportBustupParam, OffsetRight_X) == 0x000024, "Member 'FSupportBustupParam::OffsetRight_X' has a wrong offset!");
static_assert(offsetof(FSupportBustupParam, OffsetRight_Y) == 0x000028, "Member 'FSupportBustupParam::OffsetRight_Y' has a wrong offset!");
static_assert(offsetof(FSupportBustupParam, MaskOffsetRight_Y) == 0x00002C, "Member 'FSupportBustupParam::MaskOffsetRight_Y' has a wrong offset!");

// ScriptStruct xrd777.BustupGradation
// 0x0028 (0x0028 - 0x0000)
struct FBustupGradation final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowPosition;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowColorR;                                      // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowColorG;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowColorB;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowColorA;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Desaturation;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextureNo;                                         // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBustupGradation) == 0x000004, "Wrong alignment on FBustupGradation");
static_assert(sizeof(FBustupGradation) == 0x000028, "Wrong size on FBustupGradation");
static_assert(offsetof(FBustupGradation, Angle) == 0x000000, "Member 'FBustupGradation::Angle' has a wrong offset!");
static_assert(offsetof(FBustupGradation, ShadowPosition) == 0x000004, "Member 'FBustupGradation::ShadowPosition' has a wrong offset!");
static_assert(offsetof(FBustupGradation, Range) == 0x000008, "Member 'FBustupGradation::Range' has a wrong offset!");
static_assert(offsetof(FBustupGradation, ShadowColorR) == 0x00000C, "Member 'FBustupGradation::ShadowColorR' has a wrong offset!");
static_assert(offsetof(FBustupGradation, ShadowColorG) == 0x000010, "Member 'FBustupGradation::ShadowColorG' has a wrong offset!");
static_assert(offsetof(FBustupGradation, ShadowColorB) == 0x000014, "Member 'FBustupGradation::ShadowColorB' has a wrong offset!");
static_assert(offsetof(FBustupGradation, ShadowColorA) == 0x000018, "Member 'FBustupGradation::ShadowColorA' has a wrong offset!");
static_assert(offsetof(FBustupGradation, Desaturation) == 0x00001C, "Member 'FBustupGradation::Desaturation' has a wrong offset!");
static_assert(offsetof(FBustupGradation, Brightness) == 0x000020, "Member 'FBustupGradation::Brightness' has a wrong offset!");
static_assert(offsetof(FBustupGradation, TextureNo) == 0x000024, "Member 'FBustupGradation::TextureNo' has a wrong offset!");

// ScriptStruct xrd777.BustupEnvironment
// 0x0020 (0x0020 - 0x0000)
struct FBustupEnvironment final
{
public:
	TArray<uint8>                                 No;                                                // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 HeroNo;                                            // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBustupEnvironment) == 0x000008, "Wrong alignment on FBustupEnvironment");
static_assert(sizeof(FBustupEnvironment) == 0x000020, "Wrong size on FBustupEnvironment");
static_assert(offsetof(FBustupEnvironment, No) == 0x000000, "Member 'FBustupEnvironment::No' has a wrong offset!");
static_assert(offsetof(FBustupEnvironment, HeroNo) == 0x000010, "Member 'FBustupEnvironment::HeroNo' has a wrong offset!");

// ScriptStruct xrd777.BustupEnvironmentBG
// 0x0050 (0x0050 - 0x0000)
struct FBustupEnvironmentBG final
{
public:
	TMap<int32, struct FBustupEnvironment>        Bg;                                                // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBustupEnvironmentBG) == 0x000008, "Wrong alignment on FBustupEnvironmentBG");
static_assert(sizeof(FBustupEnvironmentBG) == 0x000050, "Wrong size on FBustupEnvironmentBG");
static_assert(offsetof(FBustupEnvironmentBG, Bg) == 0x000000, "Member 'FBustupEnvironmentBG::Bg' has a wrong offset!");

// ScriptStruct xrd777.BustupAnim
// 0x000C (0x000C - 0x0000)
struct FBustupAnim final
{
public:
	uint8                                         Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Random;                                            // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBustupAnim) == 0x000004, "Wrong alignment on FBustupAnim");
static_assert(sizeof(FBustupAnim) == 0x00000C, "Wrong size on FBustupAnim");
static_assert(offsetof(FBustupAnim, Type) == 0x000000, "Member 'FBustupAnim::Type' has a wrong offset!");
static_assert(offsetof(FBustupAnim, Duration) == 0x000004, "Member 'FBustupAnim::Duration' has a wrong offset!");
static_assert(offsetof(FBustupAnim, Random) == 0x000008, "Member 'FBustupAnim::Random' has a wrong offset!");

// ScriptStruct xrd777.BustupMouthAnim
// 0x0010 (0x0010 - 0x0000)
struct FBustupMouthAnim final
{
public:
	TArray<struct FBustupAnim>                    Anim;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBustupMouthAnim) == 0x000008, "Wrong alignment on FBustupMouthAnim");
static_assert(sizeof(FBustupMouthAnim) == 0x000010, "Wrong size on FBustupMouthAnim");
static_assert(offsetof(FBustupMouthAnim, Anim) == 0x000000, "Member 'FBustupMouthAnim::Anim' has a wrong offset!");

// ScriptStruct xrd777.BustupParts
// 0x0040 (0x0040 - 0x0000)
struct FBustupParts final
{
public:
	class FString                                 Pose;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        EyePartsID;                                        // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MouthPartsID;                                      // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEyeAnim : 1;                                      // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bMouthAnim : 1;                                    // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         InBetween;                                         // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EyeX;                                              // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeY;                                              // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouthX;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouthY;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlushX;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlushY;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweatX;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweatY;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetX;                                           // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetY;                                           // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBustupParts) == 0x000008, "Wrong alignment on FBustupParts");
static_assert(sizeof(FBustupParts) == 0x000040, "Wrong size on FBustupParts");
static_assert(offsetof(FBustupParts, Pose) == 0x000000, "Member 'FBustupParts::Pose' has a wrong offset!");
static_assert(offsetof(FBustupParts, EyePartsID) == 0x000010, "Member 'FBustupParts::EyePartsID' has a wrong offset!");
static_assert(offsetof(FBustupParts, MouthPartsID) == 0x000012, "Member 'FBustupParts::MouthPartsID' has a wrong offset!");
static_assert(offsetof(FBustupParts, InBetween) == 0x000015, "Member 'FBustupParts::InBetween' has a wrong offset!");
static_assert(offsetof(FBustupParts, EyeX) == 0x000018, "Member 'FBustupParts::EyeX' has a wrong offset!");
static_assert(offsetof(FBustupParts, EyeY) == 0x00001C, "Member 'FBustupParts::EyeY' has a wrong offset!");
static_assert(offsetof(FBustupParts, MouthX) == 0x000020, "Member 'FBustupParts::MouthX' has a wrong offset!");
static_assert(offsetof(FBustupParts, MouthY) == 0x000024, "Member 'FBustupParts::MouthY' has a wrong offset!");
static_assert(offsetof(FBustupParts, BlushX) == 0x000028, "Member 'FBustupParts::BlushX' has a wrong offset!");
static_assert(offsetof(FBustupParts, BlushY) == 0x00002C, "Member 'FBustupParts::BlushY' has a wrong offset!");
static_assert(offsetof(FBustupParts, SweatX) == 0x000030, "Member 'FBustupParts::SweatX' has a wrong offset!");
static_assert(offsetof(FBustupParts, SweatY) == 0x000034, "Member 'FBustupParts::SweatY' has a wrong offset!");
static_assert(offsetof(FBustupParts, OffsetX) == 0x000038, "Member 'FBustupParts::OffsetX' has a wrong offset!");
static_assert(offsetof(FBustupParts, OffsetY) == 0x00003C, "Member 'FBustupParts::OffsetY' has a wrong offset!");

// ScriptStruct xrd777.BustupPoseOffset
// 0x0050 (0x0050 - 0x0000)
struct FBustupPoseOffset final
{
public:
	TMap<class FString, struct FBustupParts>      PoseOffsets;                                       // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBustupPoseOffset) == 0x000008, "Wrong alignment on FBustupPoseOffset");
static_assert(sizeof(FBustupPoseOffset) == 0x000050, "Wrong size on FBustupPoseOffset");
static_assert(offsetof(FBustupPoseOffset, PoseOffsets) == 0x000000, "Member 'FBustupPoseOffset::PoseOffsets' has a wrong offset!");

// ScriptStruct xrd777.BustupCloth
// 0x0050 (0x0050 - 0x0000)
struct FBustupCloth final
{
public:
	TMap<int32, struct FBustupParts>              Clothes;                                           // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBustupCloth) == 0x000008, "Wrong alignment on FBustupCloth");
static_assert(sizeof(FBustupCloth) == 0x000050, "Wrong size on FBustupCloth");
static_assert(offsetof(FBustupCloth, Clothes) == 0x000000, "Member 'FBustupCloth::Clothes' has a wrong offset!");

// ScriptStruct xrd777.BustupFace
// 0x0050 (0x0050 - 0x0000)
struct FBustupFace final
{
public:
	TMap<int32, struct FBustupCloth>              Faces;                                             // 0x0000(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBustupFace) == 0x000008, "Wrong alignment on FBustupFace");
static_assert(sizeof(FBustupFace) == 0x000050, "Wrong size on FBustupFace");
static_assert(offsetof(FBustupFace, Faces) == 0x000000, "Member 'FBustupFace::Faces' has a wrong offset!");

// ScriptStruct xrd777.SimpleShopLineup
// 0x000C (0x000C - 0x0000)
struct FSimpleShopLineup final
{
public:
	uint16                                        ItemId;                                            // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SellWeekFlag;                                      // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LiftMonth;                                         // 0x0003(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LiftDays;                                          // 0x0004(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Stock;                                             // 0x0005(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ResetWeekFlag;                                     // 0x0006(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OpenFlag;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleShopLineup) == 0x000004, "Wrong alignment on FSimpleShopLineup");
static_assert(sizeof(FSimpleShopLineup) == 0x00000C, "Wrong size on FSimpleShopLineup");
static_assert(offsetof(FSimpleShopLineup, ItemId) == 0x000000, "Member 'FSimpleShopLineup::ItemId' has a wrong offset!");
static_assert(offsetof(FSimpleShopLineup, SellWeekFlag) == 0x000002, "Member 'FSimpleShopLineup::SellWeekFlag' has a wrong offset!");
static_assert(offsetof(FSimpleShopLineup, LiftMonth) == 0x000003, "Member 'FSimpleShopLineup::LiftMonth' has a wrong offset!");
static_assert(offsetof(FSimpleShopLineup, LiftDays) == 0x000004, "Member 'FSimpleShopLineup::LiftDays' has a wrong offset!");
static_assert(offsetof(FSimpleShopLineup, Stock) == 0x000005, "Member 'FSimpleShopLineup::Stock' has a wrong offset!");
static_assert(offsetof(FSimpleShopLineup, ResetWeekFlag) == 0x000006, "Member 'FSimpleShopLineup::ResetWeekFlag' has a wrong offset!");
static_assert(offsetof(FSimpleShopLineup, OpenFlag) == 0x000008, "Member 'FSimpleShopLineup::OpenFlag' has a wrong offset!");

// ScriptStruct xrd777.SimpleShopData
// 0x0010 (0x0010 - 0x0000)
struct FSimpleShopData final
{
public:
	TArray<struct FSimpleShopLineup>              Data;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleShopData) == 0x000008, "Wrong alignment on FSimpleShopData");
static_assert(sizeof(FSimpleShopData) == 0x000010, "Wrong size on FSimpleShopData");
static_assert(offsetof(FSimpleShopData, Data) == 0x000000, "Member 'FSimpleShopData::Data' has a wrong offset!");

// ScriptStruct xrd777.AntiqueShopTradeItem
// 0x0004 (0x0004 - 0x0000)
struct FAntiqueShopTradeItem final
{
public:
	uint16                                        ItemId;                                            // 0x0000(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ItemNum;                                           // 0x0002(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAntiqueShopTradeItem) == 0x000002, "Wrong alignment on FAntiqueShopTradeItem");
static_assert(sizeof(FAntiqueShopTradeItem) == 0x000004, "Wrong size on FAntiqueShopTradeItem");
static_assert(offsetof(FAntiqueShopTradeItem, ItemId) == 0x000000, "Member 'FAntiqueShopTradeItem::ItemId' has a wrong offset!");
static_assert(offsetof(FAntiqueShopTradeItem, ItemNum) == 0x000002, "Member 'FAntiqueShopTradeItem::ItemNum' has a wrong offset!");

// ScriptStruct xrd777.AntiqueShopEquipCombineResult
// 0x0014 (0x0020 - 0x000C)
struct FAntiqueShopEquipCombineResult final : public FShopLineUpListBase
{
public:
	uint16                                        BaseItemID;                                        // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAntiqueShopTradeItem>          TradeItems;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAntiqueShopEquipCombineResult) == 0x000008, "Wrong alignment on FAntiqueShopEquipCombineResult");
static_assert(sizeof(FAntiqueShopEquipCombineResult) == 0x000020, "Wrong size on FAntiqueShopEquipCombineResult");
static_assert(offsetof(FAntiqueShopEquipCombineResult, BaseItemID) == 0x00000C, "Member 'FAntiqueShopEquipCombineResult::BaseItemID' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineResult, TradeItems) == 0x000010, "Member 'FAntiqueShopEquipCombineResult::TradeItems' has a wrong offset!");

// ScriptStruct xrd777.AntiqueShopEquipCombineSource
// 0x0000 (0x000C - 0x000C)
struct FAntiqueShopEquipCombineSource final : public FShopLineUpListBase
{
};
static_assert(alignof(FAntiqueShopEquipCombineSource) == 0x000004, "Wrong alignment on FAntiqueShopEquipCombineSource");
static_assert(sizeof(FAntiqueShopEquipCombineSource) == 0x00000C, "Wrong size on FAntiqueShopEquipCombineSource");

// ScriptStruct xrd777.AntiqueShopLineUpList
// 0x0014 (0x0020 - 0x000C)
struct FAntiqueShopLineUpList final : public FShopLineUpListBase
{
public:
	uint16                                        Type;                                              // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAntiqueShopTradeItem>          TradeItems;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAntiqueShopLineUpList) == 0x000008, "Wrong alignment on FAntiqueShopLineUpList");
static_assert(sizeof(FAntiqueShopLineUpList) == 0x000020, "Wrong size on FAntiqueShopLineUpList");
static_assert(offsetof(FAntiqueShopLineUpList, Type) == 0x00000C, "Member 'FAntiqueShopLineUpList::Type' has a wrong offset!");
static_assert(offsetof(FAntiqueShopLineUpList, TradeItems) == 0x000010, "Member 'FAntiqueShopLineUpList::TradeItems' has a wrong offset!");

// ScriptStruct xrd777.WeaponShopLineUpList
// 0x0000 (0x000C - 0x000C)
struct FWeaponShopLineUpList final : public FShopLineUpListBase
{
};
static_assert(alignof(FWeaponShopLineUpList) == 0x000004, "Wrong alignment on FWeaponShopLineUpList");
static_assert(sizeof(FWeaponShopLineUpList) == 0x00000C, "Wrong size on FWeaponShopLineUpList");

// ScriptStruct xrd777.CommonItemList
// 0x0040 (0x0040 - 0x0000)
struct FCommonItemList final
{
public:
	class FString                                 ItemDef;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SortNum;                                           // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        BtlSortNum;                                        // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ItemType;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        UsePlaceID;                                        // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Tier;                                              // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Hp;                                                // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Sp;                                                // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Strength;                                          // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Magic;                                             // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Endurance;                                         // 0x0026(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Agility;                                           // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Luck;                                              // 0x002A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x002C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Price;                                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x0038(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommonItemList) == 0x000008, "Wrong alignment on FCommonItemList");
static_assert(sizeof(FCommonItemList) == 0x000040, "Wrong size on FCommonItemList");
static_assert(offsetof(FCommonItemList, ItemDef) == 0x000000, "Member 'FCommonItemList::ItemDef' has a wrong offset!");
static_assert(offsetof(FCommonItemList, SortNum) == 0x000010, "Member 'FCommonItemList::SortNum' has a wrong offset!");
static_assert(offsetof(FCommonItemList, BtlSortNum) == 0x000012, "Member 'FCommonItemList::BtlSortNum' has a wrong offset!");
static_assert(offsetof(FCommonItemList, ItemType) == 0x000014, "Member 'FCommonItemList::ItemType' has a wrong offset!");
static_assert(offsetof(FCommonItemList, UsePlaceID) == 0x000018, "Member 'FCommonItemList::UsePlaceID' has a wrong offset!");
static_assert(offsetof(FCommonItemList, Rarity) == 0x00001A, "Member 'FCommonItemList::Rarity' has a wrong offset!");
static_assert(offsetof(FCommonItemList, Tier) == 0x00001C, "Member 'FCommonItemList::Tier' has a wrong offset!");
static_assert(offsetof(FCommonItemList, Hp) == 0x00001E, "Member 'FCommonItemList::Hp' has a wrong offset!");
static_assert(offsetof(FCommonItemList, Sp) == 0x000020, "Member 'FCommonItemList::Sp' has a wrong offset!");
static_assert(offsetof(FCommonItemList, Strength) == 0x000022, "Member 'FCommonItemList::Strength' has a wrong offset!");
static_assert(offsetof(FCommonItemList, Magic) == 0x000024, "Member 'FCommonItemList::Magic' has a wrong offset!");
static_assert(offsetof(FCommonItemList, Endurance) == 0x000026, "Member 'FCommonItemList::Endurance' has a wrong offset!");
static_assert(offsetof(FCommonItemList, Agility) == 0x000028, "Member 'FCommonItemList::Agility' has a wrong offset!");
static_assert(offsetof(FCommonItemList, Luck) == 0x00002A, "Member 'FCommonItemList::Luck' has a wrong offset!");
static_assert(offsetof(FCommonItemList, SkillId) == 0x00002C, "Member 'FCommonItemList::SkillId' has a wrong offset!");
static_assert(offsetof(FCommonItemList, Price) == 0x000030, "Member 'FCommonItemList::Price' has a wrong offset!");
static_assert(offsetof(FCommonItemList, SellPrice) == 0x000034, "Member 'FCommonItemList::SellPrice' has a wrong offset!");
static_assert(offsetof(FCommonItemList, GetFLG) == 0x000038, "Member 'FCommonItemList::GetFLG' has a wrong offset!");

// ScriptStruct xrd777.CostumeItemList
// 0x0030 (0x0030 - 0x0000)
struct FCostumeItemList final
{
public:
	class FString                                 ItemDef;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SortNum;                                           // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipID;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Price;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ReflectType;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        CostumeID;                                         // 0x002C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCostumeItemList) == 0x000008, "Wrong alignment on FCostumeItemList");
static_assert(sizeof(FCostumeItemList) == 0x000030, "Wrong size on FCostumeItemList");
static_assert(offsetof(FCostumeItemList, ItemDef) == 0x000000, "Member 'FCostumeItemList::ItemDef' has a wrong offset!");
static_assert(offsetof(FCostumeItemList, SortNum) == 0x000010, "Member 'FCostumeItemList::SortNum' has a wrong offset!");
static_assert(offsetof(FCostumeItemList, ItemType) == 0x000014, "Member 'FCostumeItemList::ItemType' has a wrong offset!");
static_assert(offsetof(FCostumeItemList, EquipID) == 0x000018, "Member 'FCostumeItemList::EquipID' has a wrong offset!");
static_assert(offsetof(FCostumeItemList, Price) == 0x00001C, "Member 'FCostumeItemList::Price' has a wrong offset!");
static_assert(offsetof(FCostumeItemList, SellPrice) == 0x000020, "Member 'FCostumeItemList::SellPrice' has a wrong offset!");
static_assert(offsetof(FCostumeItemList, GetFLG) == 0x000024, "Member 'FCostumeItemList::GetFLG' has a wrong offset!");
static_assert(offsetof(FCostumeItemList, ReflectType) == 0x000028, "Member 'FCostumeItemList::ReflectType' has a wrong offset!");
static_assert(offsetof(FCostumeItemList, CostumeID) == 0x00002C, "Member 'FCostumeItemList::CostumeID' has a wrong offset!");

// ScriptStruct xrd777.MaterialItemList
// 0x0028 (0x0028 - 0x0000)
struct FMaterialItemList final
{
public:
	class FString                                 ItemDef;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SortNum;                                           // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Price;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaterialItemList) == 0x000008, "Wrong alignment on FMaterialItemList");
static_assert(sizeof(FMaterialItemList) == 0x000028, "Wrong size on FMaterialItemList");
static_assert(offsetof(FMaterialItemList, ItemDef) == 0x000000, "Member 'FMaterialItemList::ItemDef' has a wrong offset!");
static_assert(offsetof(FMaterialItemList, SortNum) == 0x000010, "Member 'FMaterialItemList::SortNum' has a wrong offset!");
static_assert(offsetof(FMaterialItemList, ItemType) == 0x000014, "Member 'FMaterialItemList::ItemType' has a wrong offset!");
static_assert(offsetof(FMaterialItemList, Rarity) == 0x000018, "Member 'FMaterialItemList::Rarity' has a wrong offset!");
static_assert(offsetof(FMaterialItemList, Price) == 0x00001C, "Member 'FMaterialItemList::Price' has a wrong offset!");
static_assert(offsetof(FMaterialItemList, SellPrice) == 0x000020, "Member 'FMaterialItemList::SellPrice' has a wrong offset!");
static_assert(offsetof(FMaterialItemList, GetFLG) == 0x000024, "Member 'FMaterialItemList::GetFLG' has a wrong offset!");

// ScriptStruct xrd777.EvitemItemList
// 0x0018 (0x0018 - 0x0000)
struct FEvitemItemList final
{
public:
	class FString                                 ItemDef;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SortNum;                                           // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvitemItemList) == 0x000008, "Wrong alignment on FEvitemItemList");
static_assert(sizeof(FEvitemItemList) == 0x000018, "Wrong size on FEvitemItemList");
static_assert(offsetof(FEvitemItemList, ItemDef) == 0x000000, "Member 'FEvitemItemList::ItemDef' has a wrong offset!");
static_assert(offsetof(FEvitemItemList, SortNum) == 0x000010, "Member 'FEvitemItemList::SortNum' has a wrong offset!");
static_assert(offsetof(FEvitemItemList, ItemType) == 0x000014, "Member 'FEvitemItemList::ItemType' has a wrong offset!");

// ScriptStruct xrd777.SkillcardItemList
// 0x0030 (0x0030 - 0x0000)
struct FSkillcardItemList final
{
public:
	class FString                                 ItemDef;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SortNum;                                           // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Tier;                                              // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Price;                                             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillcardItemList) == 0x000008, "Wrong alignment on FSkillcardItemList");
static_assert(sizeof(FSkillcardItemList) == 0x000030, "Wrong size on FSkillcardItemList");
static_assert(offsetof(FSkillcardItemList, ItemDef) == 0x000000, "Member 'FSkillcardItemList::ItemDef' has a wrong offset!");
static_assert(offsetof(FSkillcardItemList, SortNum) == 0x000010, "Member 'FSkillcardItemList::SortNum' has a wrong offset!");
static_assert(offsetof(FSkillcardItemList, ItemType) == 0x000014, "Member 'FSkillcardItemList::ItemType' has a wrong offset!");
static_assert(offsetof(FSkillcardItemList, Rarity) == 0x000018, "Member 'FSkillcardItemList::Rarity' has a wrong offset!");
static_assert(offsetof(FSkillcardItemList, Tier) == 0x00001A, "Member 'FSkillcardItemList::Tier' has a wrong offset!");
static_assert(offsetof(FSkillcardItemList, SkillId) == 0x00001C, "Member 'FSkillcardItemList::SkillId' has a wrong offset!");
static_assert(offsetof(FSkillcardItemList, Price) == 0x000020, "Member 'FSkillcardItemList::Price' has a wrong offset!");
static_assert(offsetof(FSkillcardItemList, SellPrice) == 0x000024, "Member 'FSkillcardItemList::SellPrice' has a wrong offset!");
static_assert(offsetof(FSkillcardItemList, GetFLG) == 0x000028, "Member 'FSkillcardItemList::GetFLG' has a wrong offset!");

// ScriptStruct xrd777.AccsItemList
// 0x0038 (0x0038 - 0x0000)
struct FAccsItemList final
{
public:
	class FString                                 ItemDef;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SortNum;                                           // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipID;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Tier;                                              // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Strength;                                          // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Magic;                                             // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Endurance;                                         // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Agility;                                           // 0x0026(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Luck;                                              // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x002A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Price;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x0034(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccsItemList) == 0x000008, "Wrong alignment on FAccsItemList");
static_assert(sizeof(FAccsItemList) == 0x000038, "Wrong size on FAccsItemList");
static_assert(offsetof(FAccsItemList, ItemDef) == 0x000000, "Member 'FAccsItemList::ItemDef' has a wrong offset!");
static_assert(offsetof(FAccsItemList, SortNum) == 0x000010, "Member 'FAccsItemList::SortNum' has a wrong offset!");
static_assert(offsetof(FAccsItemList, ItemType) == 0x000014, "Member 'FAccsItemList::ItemType' has a wrong offset!");
static_assert(offsetof(FAccsItemList, EquipID) == 0x000018, "Member 'FAccsItemList::EquipID' has a wrong offset!");
static_assert(offsetof(FAccsItemList, Rarity) == 0x00001C, "Member 'FAccsItemList::Rarity' has a wrong offset!");
static_assert(offsetof(FAccsItemList, Tier) == 0x00001E, "Member 'FAccsItemList::Tier' has a wrong offset!");
static_assert(offsetof(FAccsItemList, Strength) == 0x000020, "Member 'FAccsItemList::Strength' has a wrong offset!");
static_assert(offsetof(FAccsItemList, Magic) == 0x000022, "Member 'FAccsItemList::Magic' has a wrong offset!");
static_assert(offsetof(FAccsItemList, Endurance) == 0x000024, "Member 'FAccsItemList::Endurance' has a wrong offset!");
static_assert(offsetof(FAccsItemList, Agility) == 0x000026, "Member 'FAccsItemList::Agility' has a wrong offset!");
static_assert(offsetof(FAccsItemList, Luck) == 0x000028, "Member 'FAccsItemList::Luck' has a wrong offset!");
static_assert(offsetof(FAccsItemList, SkillId) == 0x00002A, "Member 'FAccsItemList::SkillId' has a wrong offset!");
static_assert(offsetof(FAccsItemList, Price) == 0x00002C, "Member 'FAccsItemList::Price' has a wrong offset!");
static_assert(offsetof(FAccsItemList, SellPrice) == 0x000030, "Member 'FAccsItemList::SellPrice' has a wrong offset!");
static_assert(offsetof(FAccsItemList, GetFLG) == 0x000034, "Member 'FAccsItemList::GetFLG' has a wrong offset!");

// ScriptStruct xrd777.ShoesItemList
// 0x0040 (0x0040 - 0x0000)
struct FShoesItemList final
{
public:
	class FString                                 ItemDef;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SortNum;                                           // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipID;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Tier;                                              // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Evasion;                                           // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Strength;                                          // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Magic;                                             // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Endurance;                                         // 0x0026(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Agility;                                           // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Luck;                                              // 0x002A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x002C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Price;                                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x0038(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShoesItemList) == 0x000008, "Wrong alignment on FShoesItemList");
static_assert(sizeof(FShoesItemList) == 0x000040, "Wrong size on FShoesItemList");
static_assert(offsetof(FShoesItemList, ItemDef) == 0x000000, "Member 'FShoesItemList::ItemDef' has a wrong offset!");
static_assert(offsetof(FShoesItemList, SortNum) == 0x000010, "Member 'FShoesItemList::SortNum' has a wrong offset!");
static_assert(offsetof(FShoesItemList, ItemType) == 0x000014, "Member 'FShoesItemList::ItemType' has a wrong offset!");
static_assert(offsetof(FShoesItemList, EquipID) == 0x000018, "Member 'FShoesItemList::EquipID' has a wrong offset!");
static_assert(offsetof(FShoesItemList, Rarity) == 0x00001C, "Member 'FShoesItemList::Rarity' has a wrong offset!");
static_assert(offsetof(FShoesItemList, Tier) == 0x00001E, "Member 'FShoesItemList::Tier' has a wrong offset!");
static_assert(offsetof(FShoesItemList, Evasion) == 0x000020, "Member 'FShoesItemList::Evasion' has a wrong offset!");
static_assert(offsetof(FShoesItemList, Strength) == 0x000022, "Member 'FShoesItemList::Strength' has a wrong offset!");
static_assert(offsetof(FShoesItemList, Magic) == 0x000024, "Member 'FShoesItemList::Magic' has a wrong offset!");
static_assert(offsetof(FShoesItemList, Endurance) == 0x000026, "Member 'FShoesItemList::Endurance' has a wrong offset!");
static_assert(offsetof(FShoesItemList, Agility) == 0x000028, "Member 'FShoesItemList::Agility' has a wrong offset!");
static_assert(offsetof(FShoesItemList, Luck) == 0x00002A, "Member 'FShoesItemList::Luck' has a wrong offset!");
static_assert(offsetof(FShoesItemList, SkillId) == 0x00002C, "Member 'FShoesItemList::SkillId' has a wrong offset!");
static_assert(offsetof(FShoesItemList, Price) == 0x000030, "Member 'FShoesItemList::Price' has a wrong offset!");
static_assert(offsetof(FShoesItemList, SellPrice) == 0x000034, "Member 'FShoesItemList::SellPrice' has a wrong offset!");
static_assert(offsetof(FShoesItemList, GetFLG) == 0x000038, "Member 'FShoesItemList::GetFLG' has a wrong offset!");

// ScriptStruct xrd777.ArmorItemList
// 0x0040 (0x0040 - 0x0000)
struct FArmorItemList final
{
public:
	class FString                                 ItemDef;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SortNum;                                           // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipID;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Tier;                                              // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Defence;                                           // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Strength;                                          // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Magic;                                             // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Endurance;                                         // 0x0026(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Agility;                                           // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Luck;                                              // 0x002A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x002C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Price;                                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x0038(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArmorItemList) == 0x000008, "Wrong alignment on FArmorItemList");
static_assert(sizeof(FArmorItemList) == 0x000040, "Wrong size on FArmorItemList");
static_assert(offsetof(FArmorItemList, ItemDef) == 0x000000, "Member 'FArmorItemList::ItemDef' has a wrong offset!");
static_assert(offsetof(FArmorItemList, SortNum) == 0x000010, "Member 'FArmorItemList::SortNum' has a wrong offset!");
static_assert(offsetof(FArmorItemList, ItemType) == 0x000014, "Member 'FArmorItemList::ItemType' has a wrong offset!");
static_assert(offsetof(FArmorItemList, EquipID) == 0x000018, "Member 'FArmorItemList::EquipID' has a wrong offset!");
static_assert(offsetof(FArmorItemList, Rarity) == 0x00001C, "Member 'FArmorItemList::Rarity' has a wrong offset!");
static_assert(offsetof(FArmorItemList, Tier) == 0x00001E, "Member 'FArmorItemList::Tier' has a wrong offset!");
static_assert(offsetof(FArmorItemList, Defence) == 0x000020, "Member 'FArmorItemList::Defence' has a wrong offset!");
static_assert(offsetof(FArmorItemList, Strength) == 0x000022, "Member 'FArmorItemList::Strength' has a wrong offset!");
static_assert(offsetof(FArmorItemList, Magic) == 0x000024, "Member 'FArmorItemList::Magic' has a wrong offset!");
static_assert(offsetof(FArmorItemList, Endurance) == 0x000026, "Member 'FArmorItemList::Endurance' has a wrong offset!");
static_assert(offsetof(FArmorItemList, Agility) == 0x000028, "Member 'FArmorItemList::Agility' has a wrong offset!");
static_assert(offsetof(FArmorItemList, Luck) == 0x00002A, "Member 'FArmorItemList::Luck' has a wrong offset!");
static_assert(offsetof(FArmorItemList, SkillId) == 0x00002C, "Member 'FArmorItemList::SkillId' has a wrong offset!");
static_assert(offsetof(FArmorItemList, Price) == 0x000030, "Member 'FArmorItemList::Price' has a wrong offset!");
static_assert(offsetof(FArmorItemList, SellPrice) == 0x000034, "Member 'FArmorItemList::SellPrice' has a wrong offset!");
static_assert(offsetof(FArmorItemList, GetFLG) == 0x000038, "Member 'FArmorItemList::GetFLG' has a wrong offset!");

// ScriptStruct xrd777.WeaponItemList
// 0x0048 (0x0048 - 0x0000)
struct FWeaponItemList final
{
public:
	class FString                                 ItemDef;                                           // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SortNum;                                           // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        WeaponType;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipID;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AttrID;                                            // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Tier;                                              // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Attack;                                            // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Accuracy;                                          // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Strength;                                          // 0x0026(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Magic;                                             // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Endurance;                                         // 0x002A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Agility;                                           // 0x002C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Luck;                                              // 0x002E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x0030(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Price;                                             // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x003C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ModelID;                                           // 0x003E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flags;                                             // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponItemList) == 0x000008, "Wrong alignment on FWeaponItemList");
static_assert(sizeof(FWeaponItemList) == 0x000048, "Wrong size on FWeaponItemList");
static_assert(offsetof(FWeaponItemList, ItemDef) == 0x000000, "Member 'FWeaponItemList::ItemDef' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, SortNum) == 0x000010, "Member 'FWeaponItemList::SortNum' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, WeaponType) == 0x000014, "Member 'FWeaponItemList::WeaponType' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, EquipID) == 0x000018, "Member 'FWeaponItemList::EquipID' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, AttrID) == 0x00001C, "Member 'FWeaponItemList::AttrID' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, Rarity) == 0x00001E, "Member 'FWeaponItemList::Rarity' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, Tier) == 0x000020, "Member 'FWeaponItemList::Tier' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, Attack) == 0x000022, "Member 'FWeaponItemList::Attack' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, Accuracy) == 0x000024, "Member 'FWeaponItemList::Accuracy' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, Strength) == 0x000026, "Member 'FWeaponItemList::Strength' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, Magic) == 0x000028, "Member 'FWeaponItemList::Magic' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, Endurance) == 0x00002A, "Member 'FWeaponItemList::Endurance' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, Agility) == 0x00002C, "Member 'FWeaponItemList::Agility' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, Luck) == 0x00002E, "Member 'FWeaponItemList::Luck' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, SkillId) == 0x000030, "Member 'FWeaponItemList::SkillId' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, Price) == 0x000034, "Member 'FWeaponItemList::Price' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, SellPrice) == 0x000038, "Member 'FWeaponItemList::SellPrice' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, GetFLG) == 0x00003C, "Member 'FWeaponItemList::GetFLG' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, ModelID) == 0x00003E, "Member 'FWeaponItemList::ModelID' has a wrong offset!");
static_assert(offsetof(FWeaponItemList, Flags) == 0x000040, "Member 'FWeaponItemList::Flags' has a wrong offset!");

// ScriptStruct xrd777.DayChangeRipple
// 0x0030 (0x0030 - 0x0000)
struct FDayChangeRipple final
{
public:
	struct FCurveLinearColorAnimation             CurveRipple;                                       // 0x0000(0x0030)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FDayChangeRipple) == 0x000008, "Wrong alignment on FDayChangeRipple");
static_assert(sizeof(FDayChangeRipple) == 0x000030, "Wrong size on FDayChangeRipple");
static_assert(offsetof(FDayChangeRipple, CurveRipple) == 0x000000, "Member 'FDayChangeRipple::CurveRipple' has a wrong offset!");

// ScriptStruct xrd777.TestDebugNishidaBase
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FTestDebugNishidaBase
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTestDebugNishidaBase) == 0x000004, "Wrong alignment on FTestDebugNishidaBase");
static_assert(sizeof(FTestDebugNishidaBase) == 0x000004, "Wrong size on FTestDebugNishidaBase");

// ScriptStruct xrd777.TestDebugNishida
// 0x00AC (0x00B0 - 0x0004)
struct FTestDebugNishida final : public FTestDebugNishidaBase
{
public:
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGetUIParameter                        Uip;                                               // 0x0008(0x0078)(NativeAccessSpecifierPublic)
	struct FCurveFloatAnimation                   CurveIceYScale;                                    // 0x0080(0x0030)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FTestDebugNishida) == 0x000008, "Wrong alignment on FTestDebugNishida");
static_assert(sizeof(FTestDebugNishida) == 0x0000B0, "Wrong size on FTestDebugNishida");
static_assert(offsetof(FTestDebugNishida, Uip) == 0x000008, "Member 'FTestDebugNishida::Uip' has a wrong offset!");
static_assert(offsetof(FTestDebugNishida, CurveIceYScale) == 0x000080, "Member 'FTestDebugNishida::CurveIceYScale' has a wrong offset!");

// ScriptStruct xrd777.UIDungeonTransferHazeParam
// 0x002C (0x002C - 0x0000)
struct FUIDungeonTransferHazeParam final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationSecond;                                    // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIDungeonTransferHazeDrawMode                DrawMode;                                          // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PresetNo;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIDungeonTransferHazeParam) == 0x000004, "Wrong alignment on FUIDungeonTransferHazeParam");
static_assert(sizeof(FUIDungeonTransferHazeParam) == 0x00002C, "Wrong size on FUIDungeonTransferHazeParam");
static_assert(offsetof(FUIDungeonTransferHazeParam, Num) == 0x000000, "Member 'FUIDungeonTransferHazeParam::Num' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferHazeParam, Pos) == 0x000004, "Member 'FUIDungeonTransferHazeParam::Pos' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferHazeParam, Scale) == 0x000010, "Member 'FUIDungeonTransferHazeParam::Scale' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferHazeParam, Alpha) == 0x00001C, "Member 'FUIDungeonTransferHazeParam::Alpha' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferHazeParam, RotationSecond) == 0x000020, "Member 'FUIDungeonTransferHazeParam::RotationSecond' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferHazeParam, DrawMode) == 0x000024, "Member 'FUIDungeonTransferHazeParam::DrawMode' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferHazeParam, PresetNo) == 0x000028, "Member 'FUIDungeonTransferHazeParam::PresetNo' has a wrong offset!");

// ScriptStruct xrd777.UIDungeonTransferCloudPreset
// 0x000C (0x000C - 0x0000)
struct FUIDungeonTransferCloudPreset final
{
public:
	int32                                         SprNo;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIDungeonTransferCloudDrawMode               DrawMode;                                          // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUIDungeonTransferCloudPreset) == 0x000004, "Wrong alignment on FUIDungeonTransferCloudPreset");
static_assert(sizeof(FUIDungeonTransferCloudPreset) == 0x00000C, "Wrong size on FUIDungeonTransferCloudPreset");
static_assert(offsetof(FUIDungeonTransferCloudPreset, SprNo) == 0x000000, "Member 'FUIDungeonTransferCloudPreset::SprNo' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferCloudPreset, Speed) == 0x000004, "Member 'FUIDungeonTransferCloudPreset::Speed' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferCloudPreset, DrawMode) == 0x000008, "Member 'FUIDungeonTransferCloudPreset::DrawMode' has a wrong offset!");

// ScriptStruct xrd777.UIDungeonTransferCloudSetPos
// 0x002C (0x002C - 0x0000)
struct FUIDungeonTransferCloudSetPos final
{
public:
	struct FVector                                Pos;                                               // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Color;                                             // 0x000C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x001C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PresetNo;                                          // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIDungeonTransferCloudSetPos) == 0x000004, "Wrong alignment on FUIDungeonTransferCloudSetPos");
static_assert(sizeof(FUIDungeonTransferCloudSetPos) == 0x00002C, "Wrong size on FUIDungeonTransferCloudSetPos");
static_assert(offsetof(FUIDungeonTransferCloudSetPos, Pos) == 0x000000, "Member 'FUIDungeonTransferCloudSetPos::Pos' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferCloudSetPos, Color) == 0x00000C, "Member 'FUIDungeonTransferCloudSetPos::Color' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferCloudSetPos, Alpha) == 0x000018, "Member 'FUIDungeonTransferCloudSetPos::Alpha' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferCloudSetPos, Scale) == 0x00001C, "Member 'FUIDungeonTransferCloudSetPos::Scale' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferCloudSetPos, PresetNo) == 0x000028, "Member 'FUIDungeonTransferCloudSetPos::PresetNo' has a wrong offset!");

// ScriptStruct xrd777.DungeonTransferPosAssist
// 0x0080 (0x0088 - 0x0008)
struct FDungeonTransferPosAssist final : public FTableRowBase
{
public:
	struct FVector                                FloorListEntrancePosDif;                           // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InfoMissExclamationColorRed;                       // 0x0014(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InfoMissExclamationRedPosdef;                      // 0x0020(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InfoMissExclamationRedRotation;                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfoMissExclamationFrameMove;                      // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FUIDungeonTransferHazeParam>    HazeParam;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         HazeAppearVanishRarion;                            // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HazeNum;                                           // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HazeInitRMin;                                      // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HazeInitRMax;                                      // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUIDungeonTransferCloudPreset>  CloudPreset;                                       // 0x0058(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUIDungeonTransferCloudSetPos>  CloudParam;                                        // 0x0068(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 CloudAllPos;                                       // 0x0078(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDungeonTransferPosAssist) == 0x000008, "Wrong alignment on FDungeonTransferPosAssist");
static_assert(sizeof(FDungeonTransferPosAssist) == 0x000088, "Wrong size on FDungeonTransferPosAssist");
static_assert(offsetof(FDungeonTransferPosAssist, FloorListEntrancePosDif) == 0x000008, "Member 'FDungeonTransferPosAssist::FloorListEntrancePosDif' has a wrong offset!");
static_assert(offsetof(FDungeonTransferPosAssist, InfoMissExclamationColorRed) == 0x000014, "Member 'FDungeonTransferPosAssist::InfoMissExclamationColorRed' has a wrong offset!");
static_assert(offsetof(FDungeonTransferPosAssist, InfoMissExclamationRedPosdef) == 0x000020, "Member 'FDungeonTransferPosAssist::InfoMissExclamationRedPosdef' has a wrong offset!");
static_assert(offsetof(FDungeonTransferPosAssist, InfoMissExclamationRedRotation) == 0x00002C, "Member 'FDungeonTransferPosAssist::InfoMissExclamationRedRotation' has a wrong offset!");
static_assert(offsetof(FDungeonTransferPosAssist, InfoMissExclamationFrameMove) == 0x000030, "Member 'FDungeonTransferPosAssist::InfoMissExclamationFrameMove' has a wrong offset!");
static_assert(offsetof(FDungeonTransferPosAssist, HazeParam) == 0x000038, "Member 'FDungeonTransferPosAssist::HazeParam' has a wrong offset!");
static_assert(offsetof(FDungeonTransferPosAssist, HazeAppearVanishRarion) == 0x000048, "Member 'FDungeonTransferPosAssist::HazeAppearVanishRarion' has a wrong offset!");
static_assert(offsetof(FDungeonTransferPosAssist, HazeNum) == 0x00004C, "Member 'FDungeonTransferPosAssist::HazeNum' has a wrong offset!");
static_assert(offsetof(FDungeonTransferPosAssist, HazeInitRMin) == 0x000050, "Member 'FDungeonTransferPosAssist::HazeInitRMin' has a wrong offset!");
static_assert(offsetof(FDungeonTransferPosAssist, HazeInitRMax) == 0x000054, "Member 'FDungeonTransferPosAssist::HazeInitRMax' has a wrong offset!");
static_assert(offsetof(FDungeonTransferPosAssist, CloudPreset) == 0x000058, "Member 'FDungeonTransferPosAssist::CloudPreset' has a wrong offset!");
static_assert(offsetof(FDungeonTransferPosAssist, CloudParam) == 0x000068, "Member 'FDungeonTransferPosAssist::CloudParam' has a wrong offset!");
static_assert(offsetof(FDungeonTransferPosAssist, CloudAllPos) == 0x000078, "Member 'FDungeonTransferPosAssist::CloudAllPos' has a wrong offset!");

// ScriptStruct xrd777.UIDungeonTransferCloudParam
// 0x0020 (0x0020 - 0x0000)
struct FUIDungeonTransferCloudParam final
{
public:
	int32                                         SprNo;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0004(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0010(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIDungeonTransferCloudParam) == 0x000004, "Wrong alignment on FUIDungeonTransferCloudParam");
static_assert(sizeof(FUIDungeonTransferCloudParam) == 0x000020, "Wrong size on FUIDungeonTransferCloudParam");
static_assert(offsetof(FUIDungeonTransferCloudParam, SprNo) == 0x000000, "Member 'FUIDungeonTransferCloudParam::SprNo' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferCloudParam, Pos) == 0x000004, "Member 'FUIDungeonTransferCloudParam::Pos' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferCloudParam, Scale) == 0x000010, "Member 'FUIDungeonTransferCloudParam::Scale' has a wrong offset!");
static_assert(offsetof(FUIDungeonTransferCloudParam, Speed) == 0x00001C, "Member 'FUIDungeonTransferCloudParam::Speed' has a wrong offset!");

// ScriptStruct xrd777.FieldHeadPanel
// 0x0250 (0x0EF0 - 0x0CA0)
struct FFieldHeadPanel final : public FBaseHeadPanel
{
public:
	uint8                                         Pad_CA0[0x250];                                    // 0x0CA0(0x0250)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFieldHeadPanel) == 0x000010, "Wrong alignment on FFieldHeadPanel");
static_assert(sizeof(FFieldHeadPanel) == 0x000EF0, "Wrong size on FFieldHeadPanel");

// ScriptStruct xrd777.GameOverPoemContent
// 0x0080 (0x0080 - 0x0000)
struct FGameOverPoemContent final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               M_pEfTex;                                          // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               M_pNormalTex;                                      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               PMatNormal;                                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               PMatEf;                                            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameOverPoemContent) == 0x000008, "Wrong alignment on FGameOverPoemContent");
static_assert(sizeof(FGameOverPoemContent) == 0x000080, "Wrong size on FGameOverPoemContent");
static_assert(offsetof(FGameOverPoemContent, M_pEfTex) == 0x000060, "Member 'FGameOverPoemContent::M_pEfTex' has a wrong offset!");
static_assert(offsetof(FGameOverPoemContent, M_pNormalTex) == 0x000068, "Member 'FGameOverPoemContent::M_pNormalTex' has a wrong offset!");
static_assert(offsetof(FGameOverPoemContent, PMatNormal) == 0x000070, "Member 'FGameOverPoemContent::PMatNormal' has a wrong offset!");
static_assert(offsetof(FGameOverPoemContent, PMatEf) == 0x000078, "Member 'FGameOverPoemContent::PMatEf' has a wrong offset!");

// ScriptStruct xrd777.GenSelDrawInfo
// 0x0020 (0x0020 - 0x0000)
struct FGenSelDrawInfo final
{
public:
	class UGenericSelectSystemBase*               System;                                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x18];                                       // 0x0008(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGenSelDrawInfo) == 0x000008, "Wrong alignment on FGenSelDrawInfo");
static_assert(sizeof(FGenSelDrawInfo) == 0x000020, "Wrong size on FGenSelDrawInfo");
static_assert(offsetof(FGenSelDrawInfo, System) == 0x000000, "Member 'FGenSelDrawInfo::System' has a wrong offset!");

// ScriptStruct xrd777.GenericSelectCharacterTextureItem
// 0x0010 (0x0010 - 0x0000)
struct FGenericSelectCharacterTextureItem final
{
public:
	uint32                                        CharacterId;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               PTexture;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenericSelectCharacterTextureItem) == 0x000008, "Wrong alignment on FGenericSelectCharacterTextureItem");
static_assert(sizeof(FGenericSelectCharacterTextureItem) == 0x000010, "Wrong size on FGenericSelectCharacterTextureItem");
static_assert(offsetof(FGenericSelectCharacterTextureItem, CharacterId) == 0x000000, "Member 'FGenericSelectCharacterTextureItem::CharacterId' has a wrong offset!");
static_assert(offsetof(FGenericSelectCharacterTextureItem, PTexture) == 0x000008, "Member 'FGenericSelectCharacterTextureItem::PTexture' has a wrong offset!");

// ScriptStruct xrd777.PointUpNote
// 0x02E0 (0x02E0 - 0x0000)
struct alignas(0x08) FPointUpNote final
{
public:
	uint8                                         Pad_0[0x2E0];                                      // 0x0000(0x02E0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPointUpNote) == 0x000008, "Wrong alignment on FPointUpNote");
static_assert(sizeof(FPointUpNote) == 0x0002E0, "Wrong size on FPointUpNote");

// ScriptStruct xrd777.CommunityPointDraw
// 0x08C8 (0x08C8 - 0x0000)
struct FCommunityPointDraw final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointUpNote                           TagNote[0x3];                                      // 0x0008(0x02E0)(NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      PRankUpEffectComponent;                            // 0x08A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B0[0x18];                                     // 0x08B0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunityPointDraw) == 0x000008, "Wrong alignment on FCommunityPointDraw");
static_assert(sizeof(FCommunityPointDraw) == 0x0008C8, "Wrong size on FCommunityPointDraw");
static_assert(offsetof(FCommunityPointDraw, TagNote) == 0x000008, "Member 'FCommunityPointDraw::TagNote' has a wrong offset!");
static_assert(offsetof(FCommunityPointDraw, PRankUpEffectComponent) == 0x0008A8, "Member 'FCommunityPointDraw::PRankUpEffectComponent' has a wrong offset!");

// ScriptStruct xrd777.ShortcutItem
// 0x00F0 (0x00F0 - 0x0000)
struct alignas(0x10) FShortcutItem final
{
public:
	struct FFldShortcutData                       Data;                                              // 0x0000(0x0030)(NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0xC0];                                      // 0x0030(0x00C0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShortcutItem) == 0x000010, "Wrong alignment on FShortcutItem");
static_assert(sizeof(FShortcutItem) == 0x0000F0, "Wrong size on FShortcutItem");
static_assert(offsetof(FShortcutItem, Data) == 0x000000, "Member 'FShortcutItem::Data' has a wrong offset!");

// ScriptStruct xrd777.ItemGetTableRow
// 0x0018 (0x0020 - 0x0008)
struct FItemGetTableRow final : public FTableRowBase
{
public:
	int32                                         OutWaitFrame;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaruPekeBounceFrame;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param1;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param2;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param3;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param4;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemGetTableRow) == 0x000008, "Wrong alignment on FItemGetTableRow");
static_assert(sizeof(FItemGetTableRow) == 0x000020, "Wrong size on FItemGetTableRow");
static_assert(offsetof(FItemGetTableRow, OutWaitFrame) == 0x000008, "Member 'FItemGetTableRow::OutWaitFrame' has a wrong offset!");
static_assert(offsetof(FItemGetTableRow, MaruPekeBounceFrame) == 0x00000C, "Member 'FItemGetTableRow::MaruPekeBounceFrame' has a wrong offset!");
static_assert(offsetof(FItemGetTableRow, Param1) == 0x000010, "Member 'FItemGetTableRow::Param1' has a wrong offset!");
static_assert(offsetof(FItemGetTableRow, Param2) == 0x000014, "Member 'FItemGetTableRow::Param2' has a wrong offset!");
static_assert(offsetof(FItemGetTableRow, Param3) == 0x000018, "Member 'FItemGetTableRow::Param3' has a wrong offset!");
static_assert(offsetof(FItemGetTableRow, Param4) == 0x00001C, "Member 'FItemGetTableRow::Param4' has a wrong offset!");

// ScriptStruct xrd777.SpecialKeyHelpTable
// 0x0020 (0x0028 - 0x0008)
struct FSpecialKeyHelpTable final : public FTableRowBase
{
public:
	int32                                         IN_OK_MASK_FRAME;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OUT_OK_MASK_FRAME;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IN_RECT_ANIM_FRAME;                                // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WAIT_OUT_OK_FRAME;                                 // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FADE_IN_FRAME;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FADE_OUT_FRAME;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MARU_PEKE_BOUNCE_FRAME;                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NEXT_ANIM_FRAME;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialKeyHelpTable) == 0x000008, "Wrong alignment on FSpecialKeyHelpTable");
static_assert(sizeof(FSpecialKeyHelpTable) == 0x000028, "Wrong size on FSpecialKeyHelpTable");
static_assert(offsetof(FSpecialKeyHelpTable, IN_OK_MASK_FRAME) == 0x000008, "Member 'FSpecialKeyHelpTable::IN_OK_MASK_FRAME' has a wrong offset!");
static_assert(offsetof(FSpecialKeyHelpTable, OUT_OK_MASK_FRAME) == 0x00000C, "Member 'FSpecialKeyHelpTable::OUT_OK_MASK_FRAME' has a wrong offset!");
static_assert(offsetof(FSpecialKeyHelpTable, IN_RECT_ANIM_FRAME) == 0x000010, "Member 'FSpecialKeyHelpTable::IN_RECT_ANIM_FRAME' has a wrong offset!");
static_assert(offsetof(FSpecialKeyHelpTable, WAIT_OUT_OK_FRAME) == 0x000014, "Member 'FSpecialKeyHelpTable::WAIT_OUT_OK_FRAME' has a wrong offset!");
static_assert(offsetof(FSpecialKeyHelpTable, FADE_IN_FRAME) == 0x000018, "Member 'FSpecialKeyHelpTable::FADE_IN_FRAME' has a wrong offset!");
static_assert(offsetof(FSpecialKeyHelpTable, FADE_OUT_FRAME) == 0x00001C, "Member 'FSpecialKeyHelpTable::FADE_OUT_FRAME' has a wrong offset!");
static_assert(offsetof(FSpecialKeyHelpTable, MARU_PEKE_BOUNCE_FRAME) == 0x000020, "Member 'FSpecialKeyHelpTable::MARU_PEKE_BOUNCE_FRAME' has a wrong offset!");
static_assert(offsetof(FSpecialKeyHelpTable, NEXT_ANIM_FRAME) == 0x000024, "Member 'FSpecialKeyHelpTable::NEXT_ANIM_FRAME' has a wrong offset!");

// ScriptStruct xrd777.SupportPartyPanelTableRow
// 0x0030 (0x0038 - 0x0008)
struct FSupportPartyPanelTableRow final : public FTableRowBase
{
public:
	int32                                         InFrame;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutFrame;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveFrame;                                         // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param1;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param2;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param3;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param4;                                            // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param5;                                            // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param6;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param7;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param8;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSupportPartyPanelTableRow) == 0x000008, "Wrong alignment on FSupportPartyPanelTableRow");
static_assert(sizeof(FSupportPartyPanelTableRow) == 0x000038, "Wrong size on FSupportPartyPanelTableRow");
static_assert(offsetof(FSupportPartyPanelTableRow, InFrame) == 0x000008, "Member 'FSupportPartyPanelTableRow::InFrame' has a wrong offset!");
static_assert(offsetof(FSupportPartyPanelTableRow, OutFrame) == 0x00000C, "Member 'FSupportPartyPanelTableRow::OutFrame' has a wrong offset!");
static_assert(offsetof(FSupportPartyPanelTableRow, WaveFrame) == 0x000010, "Member 'FSupportPartyPanelTableRow::WaveFrame' has a wrong offset!");
static_assert(offsetof(FSupportPartyPanelTableRow, Param1) == 0x000014, "Member 'FSupportPartyPanelTableRow::Param1' has a wrong offset!");
static_assert(offsetof(FSupportPartyPanelTableRow, Param2) == 0x000018, "Member 'FSupportPartyPanelTableRow::Param2' has a wrong offset!");
static_assert(offsetof(FSupportPartyPanelTableRow, Param3) == 0x00001C, "Member 'FSupportPartyPanelTableRow::Param3' has a wrong offset!");
static_assert(offsetof(FSupportPartyPanelTableRow, Param4) == 0x000020, "Member 'FSupportPartyPanelTableRow::Param4' has a wrong offset!");
static_assert(offsetof(FSupportPartyPanelTableRow, Param5) == 0x000024, "Member 'FSupportPartyPanelTableRow::Param5' has a wrong offset!");
static_assert(offsetof(FSupportPartyPanelTableRow, Param6) == 0x000028, "Member 'FSupportPartyPanelTableRow::Param6' has a wrong offset!");
static_assert(offsetof(FSupportPartyPanelTableRow, Param7) == 0x00002C, "Member 'FSupportPartyPanelTableRow::Param7' has a wrong offset!");
static_assert(offsetof(FSupportPartyPanelTableRow, Param8) == 0x000030, "Member 'FSupportPartyPanelTableRow::Param8' has a wrong offset!");

// ScriptStruct xrd777.MissingParamTableRow
// 0x00F0 (0x00F8 - 0x0008)
struct FMissingParamTableRow final : public FTableRowBase
{
public:
	int32                                         PlateQuestInAllFrame;                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlateQuestInStartFrame;                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlateChangeAllFrame;                               // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlateChangeStartFrame;                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlateChangeOutAllFrame;                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlateChangeOutStartFrame;                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListChangeAllFrame;                                // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListChangeStartFrame;                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlphaBGNoCampAllFrame;                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AlphaBGNoCampStartFrame;                           // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGPlateNoCampAllFrame;                             // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGPlateNoCampStartFrame;                           // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissingPlateNoCampAllFrame;                        // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MissingPlateNoCampStartFrame;                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListNoCampAllFrame;                                // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListNoCampStartFrame;                              // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInPlateAllFrame;                             // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInPlateStartFrame;                           // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInInfoAllFrame;                              // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInInfoStartFrame;                            // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInCursorAllFrame;                            // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInCursorStartFrame;                          // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInMoreInfoAllFrame;                          // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInMoreInfoStartFrame;                        // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInNotSelectAllFrame;                         // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInNotSelectStartFrame;                       // 0x006C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInCompleteAllFrame;                          // 0x0070(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInCompleteStartFrame;                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutPlateAllFrame;                            // 0x0078(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutPlateStartFrame;                          // 0x007C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutInfoAllFrame;                             // 0x0080(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutInfoStartFrame;                           // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutCursorAllFrame;                           // 0x0088(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutCursorStartFrame;                         // 0x008C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutMoreInfoAllFrame;                         // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutMoreInfoStartFrame;                       // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutNotSelectAllFrame;                        // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutNotSelectStartFrame;                      // 0x009C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutCompleteAllFrame;                         // 0x00A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutCompleteStartFrame;                       // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailShowPrevContentFrame;                        // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailChangeInfoAllFrame;                          // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailChangeInfoStartFrame;                        // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailChangeCompleteAllFrame;                      // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailChangeCompleteStartFrame;                    // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortPrevAllFrame;                                  // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortPrevStartFrame;                                // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNewAllFrame;                                   // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortNewStartFrame;                                 // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortListAllFrame;                                  // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortListStartFrame;                                // 0x00D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlateWhenMissingX;                                 // 0x00D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlateWhenMissingY;                                 // 0x00D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlateWhenQuestX;                                   // 0x00DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlateWhenQuestY;                                   // 0x00E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlateInY;                                          // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TatumiY;                                           // 0x00E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CursorRedInAllFrame;                               // 0x00EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CursorRedInStartFrame;                             // 0x00F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMissingParamTableRow) == 0x000008, "Wrong alignment on FMissingParamTableRow");
static_assert(sizeof(FMissingParamTableRow) == 0x0000F8, "Wrong size on FMissingParamTableRow");
static_assert(offsetof(FMissingParamTableRow, PlateQuestInAllFrame) == 0x000008, "Member 'FMissingParamTableRow::PlateQuestInAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, PlateQuestInStartFrame) == 0x00000C, "Member 'FMissingParamTableRow::PlateQuestInStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, PlateChangeAllFrame) == 0x000010, "Member 'FMissingParamTableRow::PlateChangeAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, PlateChangeStartFrame) == 0x000014, "Member 'FMissingParamTableRow::PlateChangeStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, PlateChangeOutAllFrame) == 0x000018, "Member 'FMissingParamTableRow::PlateChangeOutAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, PlateChangeOutStartFrame) == 0x00001C, "Member 'FMissingParamTableRow::PlateChangeOutStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, ListChangeAllFrame) == 0x000020, "Member 'FMissingParamTableRow::ListChangeAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, ListChangeStartFrame) == 0x000024, "Member 'FMissingParamTableRow::ListChangeStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, AlphaBGNoCampAllFrame) == 0x000028, "Member 'FMissingParamTableRow::AlphaBGNoCampAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, AlphaBGNoCampStartFrame) == 0x00002C, "Member 'FMissingParamTableRow::AlphaBGNoCampStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, BGPlateNoCampAllFrame) == 0x000030, "Member 'FMissingParamTableRow::BGPlateNoCampAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, BGPlateNoCampStartFrame) == 0x000034, "Member 'FMissingParamTableRow::BGPlateNoCampStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, MissingPlateNoCampAllFrame) == 0x000038, "Member 'FMissingParamTableRow::MissingPlateNoCampAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, MissingPlateNoCampStartFrame) == 0x00003C, "Member 'FMissingParamTableRow::MissingPlateNoCampStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, ListNoCampAllFrame) == 0x000040, "Member 'FMissingParamTableRow::ListNoCampAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, ListNoCampStartFrame) == 0x000044, "Member 'FMissingParamTableRow::ListNoCampStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailInPlateAllFrame) == 0x000048, "Member 'FMissingParamTableRow::DetailInPlateAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailInPlateStartFrame) == 0x00004C, "Member 'FMissingParamTableRow::DetailInPlateStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailInInfoAllFrame) == 0x000050, "Member 'FMissingParamTableRow::DetailInInfoAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailInInfoStartFrame) == 0x000054, "Member 'FMissingParamTableRow::DetailInInfoStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailInCursorAllFrame) == 0x000058, "Member 'FMissingParamTableRow::DetailInCursorAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailInCursorStartFrame) == 0x00005C, "Member 'FMissingParamTableRow::DetailInCursorStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailInMoreInfoAllFrame) == 0x000060, "Member 'FMissingParamTableRow::DetailInMoreInfoAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailInMoreInfoStartFrame) == 0x000064, "Member 'FMissingParamTableRow::DetailInMoreInfoStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailInNotSelectAllFrame) == 0x000068, "Member 'FMissingParamTableRow::DetailInNotSelectAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailInNotSelectStartFrame) == 0x00006C, "Member 'FMissingParamTableRow::DetailInNotSelectStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailInCompleteAllFrame) == 0x000070, "Member 'FMissingParamTableRow::DetailInCompleteAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailInCompleteStartFrame) == 0x000074, "Member 'FMissingParamTableRow::DetailInCompleteStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailOutPlateAllFrame) == 0x000078, "Member 'FMissingParamTableRow::DetailOutPlateAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailOutPlateStartFrame) == 0x00007C, "Member 'FMissingParamTableRow::DetailOutPlateStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailOutInfoAllFrame) == 0x000080, "Member 'FMissingParamTableRow::DetailOutInfoAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailOutInfoStartFrame) == 0x000084, "Member 'FMissingParamTableRow::DetailOutInfoStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailOutCursorAllFrame) == 0x000088, "Member 'FMissingParamTableRow::DetailOutCursorAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailOutCursorStartFrame) == 0x00008C, "Member 'FMissingParamTableRow::DetailOutCursorStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailOutMoreInfoAllFrame) == 0x000090, "Member 'FMissingParamTableRow::DetailOutMoreInfoAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailOutMoreInfoStartFrame) == 0x000094, "Member 'FMissingParamTableRow::DetailOutMoreInfoStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailOutNotSelectAllFrame) == 0x000098, "Member 'FMissingParamTableRow::DetailOutNotSelectAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailOutNotSelectStartFrame) == 0x00009C, "Member 'FMissingParamTableRow::DetailOutNotSelectStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailOutCompleteAllFrame) == 0x0000A0, "Member 'FMissingParamTableRow::DetailOutCompleteAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailOutCompleteStartFrame) == 0x0000A4, "Member 'FMissingParamTableRow::DetailOutCompleteStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailShowPrevContentFrame) == 0x0000A8, "Member 'FMissingParamTableRow::DetailShowPrevContentFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailChangeInfoAllFrame) == 0x0000AC, "Member 'FMissingParamTableRow::DetailChangeInfoAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailChangeInfoStartFrame) == 0x0000B0, "Member 'FMissingParamTableRow::DetailChangeInfoStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailChangeCompleteAllFrame) == 0x0000B4, "Member 'FMissingParamTableRow::DetailChangeCompleteAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, DetailChangeCompleteStartFrame) == 0x0000B8, "Member 'FMissingParamTableRow::DetailChangeCompleteStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, SortPrevAllFrame) == 0x0000BC, "Member 'FMissingParamTableRow::SortPrevAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, SortPrevStartFrame) == 0x0000C0, "Member 'FMissingParamTableRow::SortPrevStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, SortNewAllFrame) == 0x0000C4, "Member 'FMissingParamTableRow::SortNewAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, SortNewStartFrame) == 0x0000C8, "Member 'FMissingParamTableRow::SortNewStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, SortListAllFrame) == 0x0000CC, "Member 'FMissingParamTableRow::SortListAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, SortListStartFrame) == 0x0000D0, "Member 'FMissingParamTableRow::SortListStartFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, PlateWhenMissingX) == 0x0000D4, "Member 'FMissingParamTableRow::PlateWhenMissingX' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, PlateWhenMissingY) == 0x0000D8, "Member 'FMissingParamTableRow::PlateWhenMissingY' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, PlateWhenQuestX) == 0x0000DC, "Member 'FMissingParamTableRow::PlateWhenQuestX' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, PlateWhenQuestY) == 0x0000E0, "Member 'FMissingParamTableRow::PlateWhenQuestY' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, PlateInY) == 0x0000E4, "Member 'FMissingParamTableRow::PlateInY' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, TatumiY) == 0x0000E8, "Member 'FMissingParamTableRow::TatumiY' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, CursorRedInAllFrame) == 0x0000EC, "Member 'FMissingParamTableRow::CursorRedInAllFrame' has a wrong offset!");
static_assert(offsetof(FMissingParamTableRow, CursorRedInStartFrame) == 0x0000F0, "Member 'FMissingParamTableRow::CursorRedInStartFrame' has a wrong offset!");

// ScriptStruct xrd777.UINameEntryAnimParams
// 0x0034 (0x0034 - 0x0000)
struct FUINameEntryAnimParams final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsePos;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseColor;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseAngle;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseValue;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StartPos;                                          // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndPos;                                            // 0x0014(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 StartColor;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 EndColor;                                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAngle;                                          // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUINameEntryAnimParams) == 0x000004, "Wrong alignment on FUINameEntryAnimParams");
static_assert(sizeof(FUINameEntryAnimParams) == 0x000034, "Wrong size on FUINameEntryAnimParams");
static_assert(offsetof(FUINameEntryAnimParams, StartFrame) == 0x000000, "Member 'FUINameEntryAnimParams::StartFrame' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, EndFrame) == 0x000004, "Member 'FUINameEntryAnimParams::EndFrame' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, bIsUsePos) == 0x000008, "Member 'FUINameEntryAnimParams::bIsUsePos' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, bIsUseColor) == 0x000009, "Member 'FUINameEntryAnimParams::bIsUseColor' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, bIsUseAngle) == 0x00000A, "Member 'FUINameEntryAnimParams::bIsUseAngle' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, bIsUseValue) == 0x00000B, "Member 'FUINameEntryAnimParams::bIsUseValue' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, StartPos) == 0x00000C, "Member 'FUINameEntryAnimParams::StartPos' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, EndPos) == 0x000014, "Member 'FUINameEntryAnimParams::EndPos' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, StartColor) == 0x00001C, "Member 'FUINameEntryAnimParams::StartColor' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, EndColor) == 0x000020, "Member 'FUINameEntryAnimParams::EndColor' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, StartAngle) == 0x000024, "Member 'FUINameEntryAnimParams::StartAngle' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, EndAngle) == 0x000028, "Member 'FUINameEntryAnimParams::EndAngle' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, StartValue) == 0x00002C, "Member 'FUINameEntryAnimParams::StartValue' has a wrong offset!");
static_assert(offsetof(FUINameEntryAnimParams, EndValue) == 0x000030, "Member 'FUINameEntryAnimParams::EndValue' has a wrong offset!");

// ScriptStruct xrd777.UIParameter
// 0x0028 (0x0028 - 0x0000)
struct FUIParameter final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Info;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIParameter) == 0x000008, "Wrong alignment on FUIParameter");
static_assert(sizeof(FUIParameter) == 0x000028, "Wrong size on FUIParameter");
static_assert(offsetof(FUIParameter, Value) == 0x000000, "Member 'FUIParameter::Value' has a wrong offset!");
static_assert(offsetof(FUIParameter, Key) == 0x000008, "Member 'FUIParameter::Key' has a wrong offset!");
static_assert(offsetof(FUIParameter, Info) == 0x000018, "Member 'FUIParameter::Info' has a wrong offset!");

// ScriptStruct xrd777.PersonaStatusListItem
// 0x0130 (0x0130 - 0x0000)
struct alignas(0x08) FPersonaStatusListItem final
{
public:
	uint8                                         Pad_0[0x130];                                      // 0x0000(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPersonaStatusListItem) == 0x000008, "Wrong alignment on FPersonaStatusListItem");
static_assert(sizeof(FPersonaStatusListItem) == 0x000130, "Wrong size on FPersonaStatusListItem");

// ScriptStruct xrd777.RequestParamTableRow
// 0x0028 (0x0030 - 0x0008)
struct FRequestParamTableRow final : public FTableRowBase
{
public:
	int32                                         InFrame;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutFrame;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailInFrame;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailOutFrame;                                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListInFrame;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListOutFrame;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AllCampFirstInWaitFrame;                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AllElizFirstInWaitFrame;                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListFirstInWaitFrame;                              // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRequestParamTableRow) == 0x000008, "Wrong alignment on FRequestParamTableRow");
static_assert(sizeof(FRequestParamTableRow) == 0x000030, "Wrong size on FRequestParamTableRow");
static_assert(offsetof(FRequestParamTableRow, InFrame) == 0x000008, "Member 'FRequestParamTableRow::InFrame' has a wrong offset!");
static_assert(offsetof(FRequestParamTableRow, OutFrame) == 0x00000C, "Member 'FRequestParamTableRow::OutFrame' has a wrong offset!");
static_assert(offsetof(FRequestParamTableRow, DetailInFrame) == 0x000010, "Member 'FRequestParamTableRow::DetailInFrame' has a wrong offset!");
static_assert(offsetof(FRequestParamTableRow, DetailOutFrame) == 0x000014, "Member 'FRequestParamTableRow::DetailOutFrame' has a wrong offset!");
static_assert(offsetof(FRequestParamTableRow, ListInFrame) == 0x000018, "Member 'FRequestParamTableRow::ListInFrame' has a wrong offset!");
static_assert(offsetof(FRequestParamTableRow, ListOutFrame) == 0x00001C, "Member 'FRequestParamTableRow::ListOutFrame' has a wrong offset!");
static_assert(offsetof(FRequestParamTableRow, AllCampFirstInWaitFrame) == 0x000020, "Member 'FRequestParamTableRow::AllCampFirstInWaitFrame' has a wrong offset!");
static_assert(offsetof(FRequestParamTableRow, AllElizFirstInWaitFrame) == 0x000024, "Member 'FRequestParamTableRow::AllElizFirstInWaitFrame' has a wrong offset!");
static_assert(offsetof(FRequestParamTableRow, ListFirstInWaitFrame) == 0x000028, "Member 'FRequestParamTableRow::ListFirstInWaitFrame' has a wrong offset!");

// ScriptStruct xrd777.SeedLotteryTableItem
// 0x0018 (0x0020 - 0x0008)
struct FSeedLotteryTableItem final : public FTableRowBase
{
public:
	int32                                         Key;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ItemId;                                            // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Cost;                                              // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rate;                                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        RwdItemID;                                         // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RwdNum;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSeedLotteryTableItem) == 0x000008, "Wrong alignment on FSeedLotteryTableItem");
static_assert(sizeof(FSeedLotteryTableItem) == 0x000020, "Wrong size on FSeedLotteryTableItem");
static_assert(offsetof(FSeedLotteryTableItem, Key) == 0x000008, "Member 'FSeedLotteryTableItem::Key' has a wrong offset!");
static_assert(offsetof(FSeedLotteryTableItem, ItemId) == 0x00000C, "Member 'FSeedLotteryTableItem::ItemId' has a wrong offset!");
static_assert(offsetof(FSeedLotteryTableItem, Cost) == 0x000010, "Member 'FSeedLotteryTableItem::Cost' has a wrong offset!");
static_assert(offsetof(FSeedLotteryTableItem, Rate) == 0x000014, "Member 'FSeedLotteryTableItem::Rate' has a wrong offset!");
static_assert(offsetof(FSeedLotteryTableItem, RwdItemID) == 0x000018, "Member 'FSeedLotteryTableItem::RwdItemID' has a wrong offset!");
static_assert(offsetof(FSeedLotteryTableItem, RwdNum) == 0x00001C, "Member 'FSeedLotteryTableItem::RwdNum' has a wrong offset!");

// ScriptStruct xrd777.UITextTable
// 0x0030 (0x0038 - 0x0008)
struct FUITextTable final : public FTableRowBase
{
public:
	class FString                                 KewWord;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUITextTable) == 0x000008, "Wrong alignment on FUITextTable");
static_assert(sizeof(FUITextTable) == 0x000038, "Wrong size on FUITextTable");
static_assert(offsetof(FUITextTable, KewWord) == 0x000008, "Member 'FUITextTable::KewWord' has a wrong offset!");
static_assert(offsetof(FUITextTable, Text) == 0x000018, "Member 'FUITextTable::Text' has a wrong offset!");
static_assert(offsetof(FUITextTable, Comment) == 0x000028, "Member 'FUITextTable::Comment' has a wrong offset!");

// ScriptStruct xrd777.PoetryRipplesParam
// 0x0008 (0x0010 - 0x0008)
struct FPoetryRipplesParam final : public FTableRowBase
{
public:
	float                                         PosX;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoetryRipplesParam) == 0x000008, "Wrong alignment on FPoetryRipplesParam");
static_assert(sizeof(FPoetryRipplesParam) == 0x000010, "Wrong size on FPoetryRipplesParam");
static_assert(offsetof(FPoetryRipplesParam, PosX) == 0x000008, "Member 'FPoetryRipplesParam::PosX' has a wrong offset!");
static_assert(offsetof(FPoetryRipplesParam, PosY) == 0x00000C, "Member 'FPoetryRipplesParam::PosY' has a wrong offset!");

// ScriptStruct xrd777.PoetryTexturePath
// 0x0030 (0x0030 - 0x0000)
struct FPoetryTexturePath final
{
public:
	class FString                                 Blur;                                              // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Ef;                                                // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Normal;                                            // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoetryTexturePath) == 0x000008, "Wrong alignment on FPoetryTexturePath");
static_assert(sizeof(FPoetryTexturePath) == 0x000030, "Wrong size on FPoetryTexturePath");
static_assert(offsetof(FPoetryTexturePath, Blur) == 0x000000, "Member 'FPoetryTexturePath::Blur' has a wrong offset!");
static_assert(offsetof(FPoetryTexturePath, Ef) == 0x000010, "Member 'FPoetryTexturePath::Ef' has a wrong offset!");
static_assert(offsetof(FPoetryTexturePath, Normal) == 0x000020, "Member 'FPoetryTexturePath::Normal' has a wrong offset!");

// ScriptStruct xrd777.PoetryParamTable
// 0x0040 (0x0048 - 0x0008)
struct FPoetryParamTable final : public FTableRowBase
{
public:
	struct FPoetryTexturePath                     Type;                                              // 0x0008(0x0030)(Edit, NativeAccessSpecifierPublic)
	float                                         PosX;                                              // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DrawPoint;                                         // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextureNum;                                        // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Scale;                                             // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPoetryParamTable) == 0x000008, "Wrong alignment on FPoetryParamTable");
static_assert(sizeof(FPoetryParamTable) == 0x000048, "Wrong size on FPoetryParamTable");
static_assert(offsetof(FPoetryParamTable, Type) == 0x000008, "Member 'FPoetryParamTable::Type' has a wrong offset!");
static_assert(offsetof(FPoetryParamTable, PosX) == 0x000038, "Member 'FPoetryParamTable::PosX' has a wrong offset!");
static_assert(offsetof(FPoetryParamTable, PosY) == 0x00003C, "Member 'FPoetryParamTable::PosY' has a wrong offset!");
static_assert(offsetof(FPoetryParamTable, DrawPoint) == 0x000040, "Member 'FPoetryParamTable::DrawPoint' has a wrong offset!");
static_assert(offsetof(FPoetryParamTable, TextureNum) == 0x000041, "Member 'FPoetryParamTable::TextureNum' has a wrong offset!");
static_assert(offsetof(FPoetryParamTable, Scale) == 0x000044, "Member 'FPoetryParamTable::Scale' has a wrong offset!");

// ScriptStruct xrd777.AddContentsNameDispTable
// 0x0018 (0x0020 - 0x0008)
struct FAddContentsNameDispTable final : public FTableRowBase
{
public:
	uint16                                        ItemId;                                            // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Category;                                          // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Comment;                                           // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAddContentsNameDispTable) == 0x000008, "Wrong alignment on FAddContentsNameDispTable");
static_assert(sizeof(FAddContentsNameDispTable) == 0x000020, "Wrong size on FAddContentsNameDispTable");
static_assert(offsetof(FAddContentsNameDispTable, ItemId) == 0x000008, "Member 'FAddContentsNameDispTable::ItemId' has a wrong offset!");
static_assert(offsetof(FAddContentsNameDispTable, Category) == 0x00000A, "Member 'FAddContentsNameDispTable::Category' has a wrong offset!");
static_assert(offsetof(FAddContentsNameDispTable, Comment) == 0x000010, "Member 'FAddContentsNameDispTable::Comment' has a wrong offset!");

// ScriptStruct xrd777.AddContentTable
// 0x0048 (0x0050 - 0x0008)
struct FAddContentTable final : public FTableRowBase
{
public:
	uint16                                        CategoryID;                                        // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ItemId[0xA];                                       // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ItemNum[0xA];                                      // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ActiveFlag;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        GetFlag;                                           // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NewFlag;                                           // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GdkStoreId;                                        // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAddContentTable) == 0x000008, "Wrong alignment on FAddContentTable");
static_assert(sizeof(FAddContentTable) == 0x000050, "Wrong size on FAddContentTable");
static_assert(offsetof(FAddContentTable, CategoryID) == 0x000008, "Member 'FAddContentTable::CategoryID' has a wrong offset!");
static_assert(offsetof(FAddContentTable, ItemId) == 0x00000A, "Member 'FAddContentTable::ItemId' has a wrong offset!");
static_assert(offsetof(FAddContentTable, ItemNum) == 0x00001E, "Member 'FAddContentTable::ItemNum' has a wrong offset!");
static_assert(offsetof(FAddContentTable, ActiveFlag) == 0x000034, "Member 'FAddContentTable::ActiveFlag' has a wrong offset!");
static_assert(offsetof(FAddContentTable, GetFlag) == 0x000038, "Member 'FAddContentTable::GetFlag' has a wrong offset!");
static_assert(offsetof(FAddContentTable, NewFlag) == 0x00003C, "Member 'FAddContentTable::NewFlag' has a wrong offset!");
static_assert(offsetof(FAddContentTable, GdkStoreId) == 0x000040, "Member 'FAddContentTable::GdkStoreId' has a wrong offset!");

// ScriptStruct xrd777.AddContentsBundleNameTable
// 0x0010 (0x0018 - 0x0008)
struct FAddContentsBundleNameTable final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAddContentsBundleNameTable) == 0x000008, "Wrong alignment on FAddContentsBundleNameTable");
static_assert(sizeof(FAddContentsBundleNameTable) == 0x000018, "Wrong size on FAddContentsBundleNameTable");
static_assert(offsetof(FAddContentsBundleNameTable, Name) == 0x000008, "Member 'FAddContentsBundleNameTable::Name' has a wrong offset!");

// ScriptStruct xrd777.WordSortTable
// 0x0008 (0x0010 - 0x0008)
struct FWordSortTable final : public FTableRowBase
{
public:
	uint16                                        PersonaID;                                         // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Value;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWordSortTable) == 0x000008, "Wrong alignment on FWordSortTable");
static_assert(sizeof(FWordSortTable) == 0x000010, "Wrong size on FWordSortTable");
static_assert(offsetof(FWordSortTable, PersonaID) == 0x000008, "Member 'FWordSortTable::PersonaID' has a wrong offset!");
static_assert(offsetof(FWordSortTable, Value) == 0x00000C, "Member 'FWordSortTable::Value' has a wrong offset!");

// ScriptStruct xrd777.DLCPersonaCombineBirthTable
// 0x0008 (0x0010 - 0x0008)
struct FDLCPersonaCombineBirthTable final : public FTableRowBase
{
public:
	uint16                                        Value;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Flag;                                              // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDLCPersonaCombineBirthTable) == 0x000008, "Wrong alignment on FDLCPersonaCombineBirthTable");
static_assert(sizeof(FDLCPersonaCombineBirthTable) == 0x000010, "Wrong size on FDLCPersonaCombineBirthTable");
static_assert(offsetof(FDLCPersonaCombineBirthTable, Value) == 0x000008, "Member 'FDLCPersonaCombineBirthTable::Value' has a wrong offset!");
static_assert(offsetof(FDLCPersonaCombineBirthTable, Flag) == 0x00000C, "Member 'FDLCPersonaCombineBirthTable::Flag' has a wrong offset!");

// ScriptStruct xrd777.HiddenArbeitTableItem
// 0x0020 (0x0028 - 0x0008)
struct FHiddenArbeitTableItem final : public FTableRowBase
{
public:
	int32                                         Month;                                             // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArbeitOrderableTime                          TimeZone;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visibility;                                        // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EnableFlag;                                        // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHiddenArbeitTableItem) == 0x000008, "Wrong alignment on FHiddenArbeitTableItem");
static_assert(sizeof(FHiddenArbeitTableItem) == 0x000028, "Wrong size on FHiddenArbeitTableItem");
static_assert(offsetof(FHiddenArbeitTableItem, Month) == 0x000008, "Member 'FHiddenArbeitTableItem::Month' has a wrong offset!");
static_assert(offsetof(FHiddenArbeitTableItem, Day) == 0x00000C, "Member 'FHiddenArbeitTableItem::Day' has a wrong offset!");
static_assert(offsetof(FHiddenArbeitTableItem, TimeZone) == 0x000010, "Member 'FHiddenArbeitTableItem::TimeZone' has a wrong offset!");
static_assert(offsetof(FHiddenArbeitTableItem, Visibility) == 0x000011, "Member 'FHiddenArbeitTableItem::Visibility' has a wrong offset!");
static_assert(offsetof(FHiddenArbeitTableItem, EnableFlag) == 0x000018, "Member 'FHiddenArbeitTableItem::EnableFlag' has a wrong offset!");

// ScriptStruct xrd777.ArbeitInfoTableItem
// 0x0068 (0x0070 - 0x0008)
struct FArbeitInfoTableItem final : public FTableRowBase
{
public:
	class FName                                   DefineName;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name;                                              // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HelpMSGLabel;                                      // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Afternoon;                                         // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Evening;                                           // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sun;                                               // 0x002A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Mon;                                               // 0x002B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Tue;                                               // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Wed;                                               // 0x002D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Thu;                                               // 0x002E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Fri;                                               // 0x002F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sat;                                               // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UnlockFLG;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnlockDayCNT;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HiddenFLG;                                         // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HolidayWork;                                       // 0x0068(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArbeitInfoTableItem) == 0x000008, "Wrong alignment on FArbeitInfoTableItem");
static_assert(sizeof(FArbeitInfoTableItem) == 0x000070, "Wrong size on FArbeitInfoTableItem");
static_assert(offsetof(FArbeitInfoTableItem, DefineName) == 0x000008, "Member 'FArbeitInfoTableItem::DefineName' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, Name) == 0x000010, "Member 'FArbeitInfoTableItem::Name' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, HelpMSGLabel) == 0x000018, "Member 'FArbeitInfoTableItem::HelpMSGLabel' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, Afternoon) == 0x000028, "Member 'FArbeitInfoTableItem::Afternoon' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, Evening) == 0x000029, "Member 'FArbeitInfoTableItem::Evening' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, Sun) == 0x00002A, "Member 'FArbeitInfoTableItem::Sun' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, Mon) == 0x00002B, "Member 'FArbeitInfoTableItem::Mon' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, Tue) == 0x00002C, "Member 'FArbeitInfoTableItem::Tue' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, Wed) == 0x00002D, "Member 'FArbeitInfoTableItem::Wed' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, Thu) == 0x00002E, "Member 'FArbeitInfoTableItem::Thu' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, Fri) == 0x00002F, "Member 'FArbeitInfoTableItem::Fri' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, Sat) == 0x000030, "Member 'FArbeitInfoTableItem::Sat' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, UnlockFLG) == 0x000038, "Member 'FArbeitInfoTableItem::UnlockFLG' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, UnlockDayCNT) == 0x000048, "Member 'FArbeitInfoTableItem::UnlockDayCNT' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, HiddenFLG) == 0x000058, "Member 'FArbeitInfoTableItem::HiddenFLG' has a wrong offset!");
static_assert(offsetof(FArbeitInfoTableItem, HolidayWork) == 0x000068, "Member 'FArbeitInfoTableItem::HolidayWork' has a wrong offset!");

// ScriptStruct xrd777.GenSelItemLineupTable
// 0x0020 (0x0028 - 0x0008)
struct FGenSelItemLineupTable final : public FTableRowBase
{
public:
	class FString                                 ItemId;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VisibleFlag;                                       // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenSelItemLineupTable) == 0x000008, "Wrong alignment on FGenSelItemLineupTable");
static_assert(sizeof(FGenSelItemLineupTable) == 0x000028, "Wrong size on FGenSelItemLineupTable");
static_assert(offsetof(FGenSelItemLineupTable, ItemId) == 0x000008, "Member 'FGenSelItemLineupTable::ItemId' has a wrong offset!");
static_assert(offsetof(FGenSelItemLineupTable, VisibleFlag) == 0x000018, "Member 'FGenSelItemLineupTable::VisibleFlag' has a wrong offset!");

// ScriptStruct xrd777.GenSelItemDefineTable
// 0x0038 (0x0040 - 0x0008)
struct FGenSelItemDefineTable final : public FTableRowBase
{
public:
	int32                                         DefineValue;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DefineName;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleText;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommentText;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenSelItemDefineTable) == 0x000008, "Wrong alignment on FGenSelItemDefineTable");
static_assert(sizeof(FGenSelItemDefineTable) == 0x000040, "Wrong size on FGenSelItemDefineTable");
static_assert(offsetof(FGenSelItemDefineTable, DefineValue) == 0x000008, "Member 'FGenSelItemDefineTable::DefineValue' has a wrong offset!");
static_assert(offsetof(FGenSelItemDefineTable, DefineName) == 0x000010, "Member 'FGenSelItemDefineTable::DefineName' has a wrong offset!");
static_assert(offsetof(FGenSelItemDefineTable, TitleText) == 0x000020, "Member 'FGenSelItemDefineTable::TitleText' has a wrong offset!");
static_assert(offsetof(FGenSelItemDefineTable, CommentText) == 0x000030, "Member 'FGenSelItemDefineTable::CommentText' has a wrong offset!");

// ScriptStruct xrd777.CmmProfileTable
// 0x0068 (0x0070 - 0x0008)
struct FCmmProfileTable final : public FTableRowBase
{
public:
	class FString                                 PCID;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        DisappearID;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NameMsgLabel;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileMsgLabel;                                   // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileMsgLabel_Reverse;                           // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileMsgLabel_Missing;                           // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProfileMsgLabel_Lost;                              // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCmmProfileTable) == 0x000008, "Wrong alignment on FCmmProfileTable");
static_assert(sizeof(FCmmProfileTable) == 0x000070, "Wrong size on FCmmProfileTable");
static_assert(offsetof(FCmmProfileTable, PCID) == 0x000008, "Member 'FCmmProfileTable::PCID' has a wrong offset!");
static_assert(offsetof(FCmmProfileTable, DisappearID) == 0x000018, "Member 'FCmmProfileTable::DisappearID' has a wrong offset!");
static_assert(offsetof(FCmmProfileTable, NameMsgLabel) == 0x000020, "Member 'FCmmProfileTable::NameMsgLabel' has a wrong offset!");
static_assert(offsetof(FCmmProfileTable, ProfileMsgLabel) == 0x000030, "Member 'FCmmProfileTable::ProfileMsgLabel' has a wrong offset!");
static_assert(offsetof(FCmmProfileTable, ProfileMsgLabel_Reverse) == 0x000040, "Member 'FCmmProfileTable::ProfileMsgLabel_Reverse' has a wrong offset!");
static_assert(offsetof(FCmmProfileTable, ProfileMsgLabel_Missing) == 0x000050, "Member 'FCmmProfileTable::ProfileMsgLabel_Missing' has a wrong offset!");
static_assert(offsetof(FCmmProfileTable, ProfileMsgLabel_Lost) == 0x000060, "Member 'FCmmProfileTable::ProfileMsgLabel_Lost' has a wrong offset!");

// ScriptStruct xrd777.VelvetRoomQuestTable
// 0x0040 (0x0048 - 0x0008)
struct FVelvetRoomQuestTable final : public FTableRowBase
{
public:
	uint16                                        OpenNo_1;                                          // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        OpenNo_2;                                          // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        OpenNo_3;                                          // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartMonth;                                        // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartDay;                                          // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndMonth;                                          // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndDay;                                            // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        OpenFlag;                                          // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ReceivedFlag;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EndFlag;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rank;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RequestType;                                       // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PersonaType;                                       // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ID;                                                // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Value;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OPTION;                                            // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x1];                                       // 0x002D(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        RewardItemID;                                      // 0x002E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        RewardItemNum;                                     // 0x0030(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        RewardMoney;                                       // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        InfoDisplay;                                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OrderTalkID;                                       // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        QuestIndex;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVelvetRoomQuestTable) == 0x000008, "Wrong alignment on FVelvetRoomQuestTable");
static_assert(sizeof(FVelvetRoomQuestTable) == 0x000048, "Wrong size on FVelvetRoomQuestTable");
static_assert(offsetof(FVelvetRoomQuestTable, OpenNo_1) == 0x000008, "Member 'FVelvetRoomQuestTable::OpenNo_1' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, OpenNo_2) == 0x00000A, "Member 'FVelvetRoomQuestTable::OpenNo_2' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, OpenNo_3) == 0x00000C, "Member 'FVelvetRoomQuestTable::OpenNo_3' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, StartMonth) == 0x00000E, "Member 'FVelvetRoomQuestTable::StartMonth' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, StartDay) == 0x00000F, "Member 'FVelvetRoomQuestTable::StartDay' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, EndMonth) == 0x000010, "Member 'FVelvetRoomQuestTable::EndMonth' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, EndDay) == 0x000011, "Member 'FVelvetRoomQuestTable::EndDay' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, OpenFlag) == 0x000014, "Member 'FVelvetRoomQuestTable::OpenFlag' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, ReceivedFlag) == 0x000018, "Member 'FVelvetRoomQuestTable::ReceivedFlag' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, EndFlag) == 0x00001C, "Member 'FVelvetRoomQuestTable::EndFlag' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, Rank) == 0x000020, "Member 'FVelvetRoomQuestTable::Rank' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, RequestType) == 0x000021, "Member 'FVelvetRoomQuestTable::RequestType' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, PersonaType) == 0x000022, "Member 'FVelvetRoomQuestTable::PersonaType' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, ID) == 0x000024, "Member 'FVelvetRoomQuestTable::ID' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, Value) == 0x000028, "Member 'FVelvetRoomQuestTable::Value' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, OPTION) == 0x00002C, "Member 'FVelvetRoomQuestTable::OPTION' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, RewardItemID) == 0x00002E, "Member 'FVelvetRoomQuestTable::RewardItemID' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, RewardItemNum) == 0x000030, "Member 'FVelvetRoomQuestTable::RewardItemNum' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, RewardMoney) == 0x000034, "Member 'FVelvetRoomQuestTable::RewardMoney' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, InfoDisplay) == 0x000038, "Member 'FVelvetRoomQuestTable::InfoDisplay' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, OrderTalkID) == 0x00003C, "Member 'FVelvetRoomQuestTable::OrderTalkID' has a wrong offset!");
static_assert(offsetof(FVelvetRoomQuestTable, QuestIndex) == 0x000040, "Member 'FVelvetRoomQuestTable::QuestIndex' has a wrong offset!");

// ScriptStruct xrd777.CombineMiscTable
// 0x0038 (0x0040 - 0x0008)
struct FCombineMiscTable final : public FTableRowBase
{
public:
	float                                         AccidentBaseRate;                                  // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FoolAccidentRate;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         AccidentMinLv;                                     // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int16                                         AccidentMaxLv;                                     // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillChangeBaseRate;                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillBuildUpRate;                                  // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillChange1;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillChange2;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillChange3;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillWeight2Down;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillWeight1Down;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillWeightEven;                                   // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillWeight1Up;                                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillWeight2Up;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCombineMiscTable) == 0x000008, "Wrong alignment on FCombineMiscTable");
static_assert(sizeof(FCombineMiscTable) == 0x000040, "Wrong size on FCombineMiscTable");
static_assert(offsetof(FCombineMiscTable, AccidentBaseRate) == 0x000008, "Member 'FCombineMiscTable::AccidentBaseRate' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, FoolAccidentRate) == 0x00000C, "Member 'FCombineMiscTable::FoolAccidentRate' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, AccidentMinLv) == 0x000010, "Member 'FCombineMiscTable::AccidentMinLv' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, AccidentMaxLv) == 0x000012, "Member 'FCombineMiscTable::AccidentMaxLv' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, SkillChangeBaseRate) == 0x000014, "Member 'FCombineMiscTable::SkillChangeBaseRate' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, SkillBuildUpRate) == 0x000018, "Member 'FCombineMiscTable::SkillBuildUpRate' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, SkillChange1) == 0x00001C, "Member 'FCombineMiscTable::SkillChange1' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, SkillChange2) == 0x000020, "Member 'FCombineMiscTable::SkillChange2' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, SkillChange3) == 0x000024, "Member 'FCombineMiscTable::SkillChange3' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, SkillWeight2Down) == 0x000028, "Member 'FCombineMiscTable::SkillWeight2Down' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, SkillWeight1Down) == 0x00002C, "Member 'FCombineMiscTable::SkillWeight1Down' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, SkillWeightEven) == 0x000030, "Member 'FCombineMiscTable::SkillWeightEven' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, SkillWeight1Up) == 0x000034, "Member 'FCombineMiscTable::SkillWeight1Up' has a wrong offset!");
static_assert(offsetof(FCombineMiscTable, SkillWeight2Up) == 0x000038, "Member 'FCombineMiscTable::SkillWeight2Up' has a wrong offset!");

// ScriptStruct xrd777.SkillPowerUpTable
// 0x0008 (0x0010 - 0x0008)
struct FSkillPowerUpTable final : public FTableRowBase
{
public:
	uint16                                        OldSkill;                                          // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        NewSkill;                                          // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        LevelLimit;                                        // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillPowerUpTable) == 0x000008, "Wrong alignment on FSkillPowerUpTable");
static_assert(sizeof(FSkillPowerUpTable) == 0x000010, "Wrong size on FSkillPowerUpTable");
static_assert(offsetof(FSkillPowerUpTable, OldSkill) == 0x000008, "Member 'FSkillPowerUpTable::OldSkill' has a wrong offset!");
static_assert(offsetof(FSkillPowerUpTable, NewSkill) == 0x00000A, "Member 'FSkillPowerUpTable::NewSkill' has a wrong offset!");
static_assert(offsetof(FSkillPowerUpTable, LevelLimit) == 0x00000C, "Member 'FSkillPowerUpTable::LevelLimit' has a wrong offset!");

// ScriptStruct xrd777.SkillPackTable
// 0x0040 (0x0048 - 0x0008)
struct FSkillPackTable final : public FTableRowBase
{
public:
	uint16                                        Rank_1;                                            // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill_1;                                           // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Weight_1;                                          // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rank_2;                                            // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill_2;                                           // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Weight_2;                                          // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rank_3;                                            // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill_3;                                           // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Weight_3;                                          // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rank_4;                                            // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill_4;                                           // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Weight_4;                                          // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rank_5;                                            // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill_5;                                           // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Weight_5;                                          // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rank_6;                                            // 0x0026(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill_6;                                           // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Weight_6;                                          // 0x002A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rank_7;                                            // 0x002C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill_7;                                           // 0x002E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Weight_7;                                          // 0x0030(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rank_8;                                            // 0x0032(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill_8;                                           // 0x0034(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Weight_8;                                          // 0x0036(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rank_9;                                            // 0x0038(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill_9;                                           // 0x003A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Weight_9;                                          // 0x003C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rank_10;                                           // 0x003E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Skill_10;                                          // 0x0040(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Weight_10;                                         // 0x0042(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillPackTable) == 0x000008, "Wrong alignment on FSkillPackTable");
static_assert(sizeof(FSkillPackTable) == 0x000048, "Wrong size on FSkillPackTable");
static_assert(offsetof(FSkillPackTable, Rank_1) == 0x000008, "Member 'FSkillPackTable::Rank_1' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Skill_1) == 0x00000A, "Member 'FSkillPackTable::Skill_1' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Weight_1) == 0x00000C, "Member 'FSkillPackTable::Weight_1' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Rank_2) == 0x00000E, "Member 'FSkillPackTable::Rank_2' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Skill_2) == 0x000010, "Member 'FSkillPackTable::Skill_2' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Weight_2) == 0x000012, "Member 'FSkillPackTable::Weight_2' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Rank_3) == 0x000014, "Member 'FSkillPackTable::Rank_3' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Skill_3) == 0x000016, "Member 'FSkillPackTable::Skill_3' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Weight_3) == 0x000018, "Member 'FSkillPackTable::Weight_3' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Rank_4) == 0x00001A, "Member 'FSkillPackTable::Rank_4' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Skill_4) == 0x00001C, "Member 'FSkillPackTable::Skill_4' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Weight_4) == 0x00001E, "Member 'FSkillPackTable::Weight_4' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Rank_5) == 0x000020, "Member 'FSkillPackTable::Rank_5' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Skill_5) == 0x000022, "Member 'FSkillPackTable::Skill_5' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Weight_5) == 0x000024, "Member 'FSkillPackTable::Weight_5' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Rank_6) == 0x000026, "Member 'FSkillPackTable::Rank_6' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Skill_6) == 0x000028, "Member 'FSkillPackTable::Skill_6' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Weight_6) == 0x00002A, "Member 'FSkillPackTable::Weight_6' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Rank_7) == 0x00002C, "Member 'FSkillPackTable::Rank_7' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Skill_7) == 0x00002E, "Member 'FSkillPackTable::Skill_7' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Weight_7) == 0x000030, "Member 'FSkillPackTable::Weight_7' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Rank_8) == 0x000032, "Member 'FSkillPackTable::Rank_8' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Skill_8) == 0x000034, "Member 'FSkillPackTable::Skill_8' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Weight_8) == 0x000036, "Member 'FSkillPackTable::Weight_8' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Rank_9) == 0x000038, "Member 'FSkillPackTable::Rank_9' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Skill_9) == 0x00003A, "Member 'FSkillPackTable::Skill_9' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Weight_9) == 0x00003C, "Member 'FSkillPackTable::Weight_9' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Rank_10) == 0x00003E, "Member 'FSkillPackTable::Rank_10' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Skill_10) == 0x000040, "Member 'FSkillPackTable::Skill_10' has a wrong offset!");
static_assert(offsetof(FSkillPackTable, Weight_10) == 0x000042, "Member 'FSkillPackTable::Weight_10' has a wrong offset!");

// ScriptStruct xrd777.SkillChangeTable
// 0x0008 (0x0010 - 0x0008)
struct FSkillChangeTable final : public FTableRowBase
{
public:
	uint16                                        SkillPack;                                         // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillChangeTable) == 0x000008, "Wrong alignment on FSkillChangeTable");
static_assert(sizeof(FSkillChangeTable) == 0x000010, "Wrong size on FSkillChangeTable");
static_assert(offsetof(FSkillChangeTable, SkillPack) == 0x000008, "Member 'FSkillChangeTable::SkillPack' has a wrong offset!");

// ScriptStruct xrd777.CombineCounterTable
// 0x0008 (0x0010 - 0x0008)
struct FCombineCounterTable final : public FTableRowBase
{
public:
	uint16                                        Num;                                               // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ConceptionRate;                                    // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillChangeRate;                                   // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AccidentRate;                                      // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCombineCounterTable) == 0x000008, "Wrong alignment on FCombineCounterTable");
static_assert(sizeof(FCombineCounterTable) == 0x000010, "Wrong size on FCombineCounterTable");
static_assert(offsetof(FCombineCounterTable, Num) == 0x000008, "Member 'FCombineCounterTable::Num' has a wrong offset!");
static_assert(offsetof(FCombineCounterTable, ConceptionRate) == 0x00000A, "Member 'FCombineCounterTable::ConceptionRate' has a wrong offset!");
static_assert(offsetof(FCombineCounterTable, SkillChangeRate) == 0x00000C, "Member 'FCombineCounterTable::SkillChangeRate' has a wrong offset!");
static_assert(offsetof(FCombineCounterTable, AccidentRate) == 0x00000E, "Member 'FCombineCounterTable::AccidentRate' has a wrong offset!");

// ScriptStruct xrd777.MoonAgeProbabilityTable
// 0x0008 (0x0010 - 0x0008)
struct FMoonAgeProbabilityTable final : public FTableRowBase
{
public:
	uint16                                        ConceptionRate;                                    // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillChangeRate;                                   // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AccidentRate;                                      // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMoonAgeProbabilityTable) == 0x000008, "Wrong alignment on FMoonAgeProbabilityTable");
static_assert(sizeof(FMoonAgeProbabilityTable) == 0x000010, "Wrong size on FMoonAgeProbabilityTable");
static_assert(offsetof(FMoonAgeProbabilityTable, ConceptionRate) == 0x000008, "Member 'FMoonAgeProbabilityTable::ConceptionRate' has a wrong offset!");
static_assert(offsetof(FMoonAgeProbabilityTable, SkillChangeRate) == 0x00000A, "Member 'FMoonAgeProbabilityTable::SkillChangeRate' has a wrong offset!");
static_assert(offsetof(FMoonAgeProbabilityTable, AccidentRate) == 0x00000C, "Member 'FMoonAgeProbabilityTable::AccidentRate' has a wrong offset!");

// ScriptStruct xrd777.CommunityRankTable
// 0x0008 (0x0010 - 0x0008)
struct FCommunityRankTable final : public FTableRowBase
{
public:
	uint16                                        Bonus;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        HighBonus;                                         // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommunityRankTable) == 0x000008, "Wrong alignment on FCommunityRankTable");
static_assert(sizeof(FCommunityRankTable) == 0x000010, "Wrong size on FCommunityRankTable");
static_assert(offsetof(FCommunityRankTable, Bonus) == 0x000008, "Member 'FCommunityRankTable::Bonus' has a wrong offset!");
static_assert(offsetof(FCommunityRankTable, HighBonus) == 0x00000A, "Member 'FCommunityRankTable::HighBonus' has a wrong offset!");

// ScriptStruct xrd777.PersonaConfigTable
// 0x0030 (0x0038 - 0x0008)
struct FPersonaConfigTable final : public FTableRowBase
{
public:
	class FString                                 BirthMsg;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ToneType;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VoicePack;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPersonaConfigTable) == 0x000008, "Wrong alignment on FPersonaConfigTable");
static_assert(sizeof(FPersonaConfigTable) == 0x000038, "Wrong size on FPersonaConfigTable");
static_assert(offsetof(FPersonaConfigTable, BirthMsg) == 0x000008, "Member 'FPersonaConfigTable::BirthMsg' has a wrong offset!");
static_assert(offsetof(FPersonaConfigTable, ToneType) == 0x000018, "Member 'FPersonaConfigTable::ToneType' has a wrong offset!");
static_assert(offsetof(FPersonaConfigTable, VoicePack) == 0x000028, "Member 'FPersonaConfigTable::VoicePack' has a wrong offset!");

// ScriptStruct xrd777.SkillLimitTable
// 0x0008 (0x0010 - 0x0008)
struct FSkillLimitTable final : public FTableRowBase
{
public:
	uint8                                         TotalSkillNum;                                     // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InheritanceSkillNum;                               // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillLimitTable) == 0x000008, "Wrong alignment on FSkillLimitTable");
static_assert(sizeof(FSkillLimitTable) == 0x000010, "Wrong size on FSkillLimitTable");
static_assert(offsetof(FSkillLimitTable, TotalSkillNum) == 0x000008, "Member 'FSkillLimitTable::TotalSkillNum' has a wrong offset!");
static_assert(offsetof(FSkillLimitTable, InheritanceSkillNum) == 0x000009, "Member 'FSkillLimitTable::InheritanceSkillNum' has a wrong offset!");

// ScriptStruct xrd777.SkillAffinityTable
// 0x0008 (0x0010 - 0x0008)
struct FSkillAffinityTable final : public FTableRowBase
{
public:
	uint8                                         Slash : 1;                                         // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Strike : 1;                                        // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pierce : 1;                                        // 0x0008(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Fire : 1;                                          // 0x0008(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Ice : 1;                                           // 0x0008(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Electric : 1;                                      // 0x0008(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Wind : 1;                                          // 0x0008(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Almighty : 1;                                      // 0x0008(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Light : 1;                                         // 0x0009(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Dark : 1;                                          // 0x0009(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Charm : 1;                                         // 0x0009(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Poison : 1;                                        // 0x0009(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Upset : 1;                                         // 0x0009(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Panic : 1;                                         // 0x0009(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Fear : 1;                                          // 0x0009(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Anger : 1;                                         // 0x0009(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Recovery : 1;                                      // 0x000A(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Support : 1;                                       // 0x000A(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Special : 1;                                       // 0x000A(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillAffinityTable) == 0x000008, "Wrong alignment on FSkillAffinityTable");
static_assert(sizeof(FSkillAffinityTable) == 0x000010, "Wrong size on FSkillAffinityTable");

// ScriptStruct xrd777.PersonaLiftTable
// 0x0010 (0x0018 - 0x0008)
struct FPersonaLiftTable final : public FTableRowBase
{
public:
	uint16                                        Value;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        OrFlag;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AndFlag;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPersonaLiftTable) == 0x000008, "Wrong alignment on FPersonaLiftTable");
static_assert(sizeof(FPersonaLiftTable) == 0x000018, "Wrong size on FPersonaLiftTable");
static_assert(offsetof(FPersonaLiftTable, Value) == 0x000008, "Member 'FPersonaLiftTable::Value' has a wrong offset!");
static_assert(offsetof(FPersonaLiftTable, OrFlag) == 0x00000C, "Member 'FPersonaLiftTable::OrFlag' has a wrong offset!");
static_assert(offsetof(FPersonaLiftTable, AndFlag) == 0x000010, "Member 'FPersonaLiftTable::AndFlag' has a wrong offset!");

// ScriptStruct xrd777.SpecialSpreadTable
// 0x0010 (0x0018 - 0x0008)
struct FSpecialSpreadTable final : public FTableRowBase
{
public:
	uint16                                        Value;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatPerVal_1;                                       // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatPerVal_2;                                       // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatPerVal_3;                                       // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatPerVal_4;                                       // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatPerVal_5;                                       // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatPerVal_6;                                       // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpecialSpreadTable) == 0x000008, "Wrong alignment on FSpecialSpreadTable");
static_assert(sizeof(FSpecialSpreadTable) == 0x000018, "Wrong size on FSpecialSpreadTable");
static_assert(offsetof(FSpecialSpreadTable, Value) == 0x000008, "Member 'FSpecialSpreadTable::Value' has a wrong offset!");
static_assert(offsetof(FSpecialSpreadTable, MatPerVal_1) == 0x00000A, "Member 'FSpecialSpreadTable::MatPerVal_1' has a wrong offset!");
static_assert(offsetof(FSpecialSpreadTable, MatPerVal_2) == 0x00000C, "Member 'FSpecialSpreadTable::MatPerVal_2' has a wrong offset!");
static_assert(offsetof(FSpecialSpreadTable, MatPerVal_3) == 0x00000E, "Member 'FSpecialSpreadTable::MatPerVal_3' has a wrong offset!");
static_assert(offsetof(FSpecialSpreadTable, MatPerVal_4) == 0x000010, "Member 'FSpecialSpreadTable::MatPerVal_4' has a wrong offset!");
static_assert(offsetof(FSpecialSpreadTable, MatPerVal_5) == 0x000012, "Member 'FSpecialSpreadTable::MatPerVal_5' has a wrong offset!");
static_assert(offsetof(FSpecialSpreadTable, MatPerVal_6) == 0x000014, "Member 'FSpecialSpreadTable::MatPerVal_6' has a wrong offset!");

// ScriptStruct xrd777.NormalSpreadTable
// 0x0018 (0x0020 - 0x0008)
struct FNormalSpreadTable final : public FTableRowBase
{
public:
	uint8                                         FOOL;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MAGICIA;                                           // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PRIESTE;                                           // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EMPRESS;                                           // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EMPEROR;                                           // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HIEROPH;                                           // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LOVERS;                                            // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CHARIOT;                                           // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         JUSTICE;                                           // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HERMIT;                                            // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FORTUNE;                                           // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         STRENGT;                                           // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         HANGEDM;                                           // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Death;                                             // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TEMPERA;                                           // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DEVIL;                                             // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TOWER;                                             // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         STAR;                                              // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MOON;                                              // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Sun;                                               // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         JUDGEME;                                           // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         World;                                             // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNormalSpreadTable) == 0x000008, "Wrong alignment on FNormalSpreadTable");
static_assert(sizeof(FNormalSpreadTable) == 0x000020, "Wrong size on FNormalSpreadTable");
static_assert(offsetof(FNormalSpreadTable, FOOL) == 0x000008, "Member 'FNormalSpreadTable::FOOL' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, MAGICIA) == 0x000009, "Member 'FNormalSpreadTable::MAGICIA' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, PRIESTE) == 0x00000A, "Member 'FNormalSpreadTable::PRIESTE' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, EMPRESS) == 0x00000B, "Member 'FNormalSpreadTable::EMPRESS' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, EMPEROR) == 0x00000C, "Member 'FNormalSpreadTable::EMPEROR' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, HIEROPH) == 0x00000D, "Member 'FNormalSpreadTable::HIEROPH' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, LOVERS) == 0x00000E, "Member 'FNormalSpreadTable::LOVERS' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, CHARIOT) == 0x00000F, "Member 'FNormalSpreadTable::CHARIOT' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, JUSTICE) == 0x000010, "Member 'FNormalSpreadTable::JUSTICE' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, HERMIT) == 0x000011, "Member 'FNormalSpreadTable::HERMIT' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, FORTUNE) == 0x000012, "Member 'FNormalSpreadTable::FORTUNE' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, STRENGT) == 0x000013, "Member 'FNormalSpreadTable::STRENGT' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, HANGEDM) == 0x000014, "Member 'FNormalSpreadTable::HANGEDM' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, Death) == 0x000015, "Member 'FNormalSpreadTable::Death' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, TEMPERA) == 0x000016, "Member 'FNormalSpreadTable::TEMPERA' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, DEVIL) == 0x000017, "Member 'FNormalSpreadTable::DEVIL' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, TOWER) == 0x000018, "Member 'FNormalSpreadTable::TOWER' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, STAR) == 0x000019, "Member 'FNormalSpreadTable::STAR' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, MOON) == 0x00001A, "Member 'FNormalSpreadTable::MOON' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, Sun) == 0x00001B, "Member 'FNormalSpreadTable::Sun' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, JUDGEME) == 0x00001C, "Member 'FNormalSpreadTable::JUDGEME' has a wrong offset!");
static_assert(offsetof(FNormalSpreadTable, World) == 0x00001D, "Member 'FNormalSpreadTable::World' has a wrong offset!");

// ScriptStruct xrd777.WeaponShopAwardTable
// 0x0020 (0x0028 - 0x0008)
struct FWeaponShopAwardTable final : public FTableRowBase
{
public:
	uint16                                        ID;                                                // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MaxArrivedFloor;                                   // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        TotalDefeatedEnemies;                              // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AwardFlag;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AwardItemID;                                       // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AwardItemNum;                                      // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AwardMoney;                                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeaponShopAwardTable) == 0x000008, "Wrong alignment on FWeaponShopAwardTable");
static_assert(sizeof(FWeaponShopAwardTable) == 0x000028, "Wrong size on FWeaponShopAwardTable");
static_assert(offsetof(FWeaponShopAwardTable, ID) == 0x000008, "Member 'FWeaponShopAwardTable::ID' has a wrong offset!");
static_assert(offsetof(FWeaponShopAwardTable, MaxArrivedFloor) == 0x00000A, "Member 'FWeaponShopAwardTable::MaxArrivedFloor' has a wrong offset!");
static_assert(offsetof(FWeaponShopAwardTable, TotalDefeatedEnemies) == 0x00000C, "Member 'FWeaponShopAwardTable::TotalDefeatedEnemies' has a wrong offset!");
static_assert(offsetof(FWeaponShopAwardTable, AwardFlag) == 0x000010, "Member 'FWeaponShopAwardTable::AwardFlag' has a wrong offset!");
static_assert(offsetof(FWeaponShopAwardTable, AwardItemID) == 0x000020, "Member 'FWeaponShopAwardTable::AwardItemID' has a wrong offset!");
static_assert(offsetof(FWeaponShopAwardTable, AwardItemNum) == 0x000022, "Member 'FWeaponShopAwardTable::AwardItemNum' has a wrong offset!");
static_assert(offsetof(FWeaponShopAwardTable, AwardMoney) == 0x000024, "Member 'FWeaponShopAwardTable::AwardMoney' has a wrong offset!");

// ScriptStruct xrd777.DisappearTable
// 0x0070 (0x0078 - 0x0008)
struct FDisappearTable final : public FTableRowBase
{
public:
	uint16                                        DisappearID;                                       // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartMonth;                                        // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartDays;                                         // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LimitMonth;                                        // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LimitDays;                                         // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActiveFlag;                                        // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SuccessFlag;                                       // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FailedFlag;                                        // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NpcFlag;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InfoOnFlag;                                        // 0x0050(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AwardFlag;                                         // 0x0060(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AwardItemID;                                       // 0x0070(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AwardItemNum;                                      // 0x0072(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AwardMoney;                                        // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisappearTable) == 0x000008, "Wrong alignment on FDisappearTable");
static_assert(sizeof(FDisappearTable) == 0x000078, "Wrong size on FDisappearTable");
static_assert(offsetof(FDisappearTable, DisappearID) == 0x000008, "Member 'FDisappearTable::DisappearID' has a wrong offset!");
static_assert(offsetof(FDisappearTable, StartMonth) == 0x00000A, "Member 'FDisappearTable::StartMonth' has a wrong offset!");
static_assert(offsetof(FDisappearTable, StartDays) == 0x00000B, "Member 'FDisappearTable::StartDays' has a wrong offset!");
static_assert(offsetof(FDisappearTable, LimitMonth) == 0x00000C, "Member 'FDisappearTable::LimitMonth' has a wrong offset!");
static_assert(offsetof(FDisappearTable, LimitDays) == 0x00000D, "Member 'FDisappearTable::LimitDays' has a wrong offset!");
static_assert(offsetof(FDisappearTable, ActiveFlag) == 0x000010, "Member 'FDisappearTable::ActiveFlag' has a wrong offset!");
static_assert(offsetof(FDisappearTable, SuccessFlag) == 0x000020, "Member 'FDisappearTable::SuccessFlag' has a wrong offset!");
static_assert(offsetof(FDisappearTable, FailedFlag) == 0x000030, "Member 'FDisappearTable::FailedFlag' has a wrong offset!");
static_assert(offsetof(FDisappearTable, NpcFlag) == 0x000040, "Member 'FDisappearTable::NpcFlag' has a wrong offset!");
static_assert(offsetof(FDisappearTable, InfoOnFlag) == 0x000050, "Member 'FDisappearTable::InfoOnFlag' has a wrong offset!");
static_assert(offsetof(FDisappearTable, AwardFlag) == 0x000060, "Member 'FDisappearTable::AwardFlag' has a wrong offset!");
static_assert(offsetof(FDisappearTable, AwardItemID) == 0x000070, "Member 'FDisappearTable::AwardItemID' has a wrong offset!");
static_assert(offsetof(FDisappearTable, AwardItemNum) == 0x000072, "Member 'FDisappearTable::AwardItemNum' has a wrong offset!");
static_assert(offsetof(FDisappearTable, AwardMoney) == 0x000074, "Member 'FDisappearTable::AwardMoney' has a wrong offset!");

// ScriptStruct xrd777.MailIncomingTable
// 0x00F0 (0x00F8 - 0x0008)
struct FMailIncomingTable final : public FTableRowBase
{
public:
	uint16                                        MailID;                                            // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SenderID;                                          // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Group;                                             // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Category;                                          // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartMonth;                                        // 0x000F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartDays;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndMonth;                                          // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndDays;                                           // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReceiveTime;                                       // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Sun : 1;                                           // 0x0014(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Mon : 1;                                           // 0x0014(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Tue : 1;                                           // 0x0014(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Wed : 1;                                           // 0x0014(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Thr : 1;                                           // 0x0014(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Fri : 1;                                           // 0x0014(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Sat : 1;                                           // 0x0014(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Weekday : 1;                                       // 0x0014(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Holiday : 1;                                       // 0x0015(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         RankUp : 1;                                        // 0x0015(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         OnlyOnce : 1;                                      // 0x0015(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ArcanaID;                                          // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ArcanaCondition;                                   // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Rank;                                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InviteCounter;                                     // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CounterID;                                         // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CounterCondition;                                  // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CounterValue;                                      // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MailBmdFileName;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderLabel;                                       // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleLabel;                                        // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BodyLabel;                                         // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScriptBfFileName;                                  // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ScriptBmdFileName;                                 // 0x0088(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnableFlag0;                                       // 0x0098(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnableFlag1;                                       // 0x00A8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EnableFlag2;                                       // 0x00B8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisableFlag0;                                      // 0x00C8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisableFlag1;                                      // 0x00D8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisableFlag2;                                      // 0x00E8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMailIncomingTable) == 0x000008, "Wrong alignment on FMailIncomingTable");
static_assert(sizeof(FMailIncomingTable) == 0x0000F8, "Wrong size on FMailIncomingTable");
static_assert(offsetof(FMailIncomingTable, MailID) == 0x000008, "Member 'FMailIncomingTable::MailID' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, SenderID) == 0x00000A, "Member 'FMailIncomingTable::SenderID' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, Group) == 0x00000C, "Member 'FMailIncomingTable::Group' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, Category) == 0x00000E, "Member 'FMailIncomingTable::Category' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, StartMonth) == 0x00000F, "Member 'FMailIncomingTable::StartMonth' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, StartDays) == 0x000010, "Member 'FMailIncomingTable::StartDays' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, EndMonth) == 0x000011, "Member 'FMailIncomingTable::EndMonth' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, EndDays) == 0x000012, "Member 'FMailIncomingTable::EndDays' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, ReceiveTime) == 0x000013, "Member 'FMailIncomingTable::ReceiveTime' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, ArcanaID) == 0x000016, "Member 'FMailIncomingTable::ArcanaID' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, ArcanaCondition) == 0x000017, "Member 'FMailIncomingTable::ArcanaCondition' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, Rank) == 0x000018, "Member 'FMailIncomingTable::Rank' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, InviteCounter) == 0x000019, "Member 'FMailIncomingTable::InviteCounter' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, CounterID) == 0x000020, "Member 'FMailIncomingTable::CounterID' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, CounterCondition) == 0x000030, "Member 'FMailIncomingTable::CounterCondition' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, CounterValue) == 0x000034, "Member 'FMailIncomingTable::CounterValue' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, MailBmdFileName) == 0x000038, "Member 'FMailIncomingTable::MailBmdFileName' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, SenderLabel) == 0x000048, "Member 'FMailIncomingTable::SenderLabel' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, TitleLabel) == 0x000058, "Member 'FMailIncomingTable::TitleLabel' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, BodyLabel) == 0x000068, "Member 'FMailIncomingTable::BodyLabel' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, ScriptBfFileName) == 0x000078, "Member 'FMailIncomingTable::ScriptBfFileName' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, ScriptBmdFileName) == 0x000088, "Member 'FMailIncomingTable::ScriptBmdFileName' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, EnableFlag0) == 0x000098, "Member 'FMailIncomingTable::EnableFlag0' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, EnableFlag1) == 0x0000A8, "Member 'FMailIncomingTable::EnableFlag1' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, EnableFlag2) == 0x0000B8, "Member 'FMailIncomingTable::EnableFlag2' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, DisableFlag0) == 0x0000C8, "Member 'FMailIncomingTable::DisableFlag0' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, DisableFlag1) == 0x0000D8, "Member 'FMailIncomingTable::DisableFlag1' has a wrong offset!");
static_assert(offsetof(FMailIncomingTable, DisableFlag2) == 0x0000E8, "Member 'FMailIncomingTable::DisableFlag2' has a wrong offset!");

// ScriptStruct xrd777.SupportBustupTable
// 0x0030 (0x0038 - 0x0008)
struct FSupportBustupTable final : public FTableRowBase
{
public:
	uint16                                        CharaID;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Pose;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetLeft_X;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetLeft_Y;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskOffsetLeft_Y;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetRight_X;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetRight_Y;                                     // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaskOffsetRight_Y;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSupportBustupTable) == 0x000008, "Wrong alignment on FSupportBustupTable");
static_assert(sizeof(FSupportBustupTable) == 0x000038, "Wrong size on FSupportBustupTable");
static_assert(offsetof(FSupportBustupTable, CharaID) == 0x000008, "Member 'FSupportBustupTable::CharaID' has a wrong offset!");
static_assert(offsetof(FSupportBustupTable, Pose) == 0x000010, "Member 'FSupportBustupTable::Pose' has a wrong offset!");
static_assert(offsetof(FSupportBustupTable, OffsetLeft_X) == 0x000020, "Member 'FSupportBustupTable::OffsetLeft_X' has a wrong offset!");
static_assert(offsetof(FSupportBustupTable, OffsetLeft_Y) == 0x000024, "Member 'FSupportBustupTable::OffsetLeft_Y' has a wrong offset!");
static_assert(offsetof(FSupportBustupTable, MaskOffsetLeft_Y) == 0x000028, "Member 'FSupportBustupTable::MaskOffsetLeft_Y' has a wrong offset!");
static_assert(offsetof(FSupportBustupTable, OffsetRight_X) == 0x00002C, "Member 'FSupportBustupTable::OffsetRight_X' has a wrong offset!");
static_assert(offsetof(FSupportBustupTable, OffsetRight_Y) == 0x000030, "Member 'FSupportBustupTable::OffsetRight_Y' has a wrong offset!");
static_assert(offsetof(FSupportBustupTable, MaskOffsetRight_Y) == 0x000034, "Member 'FSupportBustupTable::MaskOffsetRight_Y' has a wrong offset!");

// ScriptStruct xrd777.BustupAnimTable
// 0x0008 (0x0010 - 0x0008)
struct FBustupAnimTable final : public FTableRowBase
{
public:
	uint8                                         Type;                                              // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        Frame;                                             // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Random;                                            // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBustupAnimTable) == 0x000008, "Wrong alignment on FBustupAnimTable");
static_assert(sizeof(FBustupAnimTable) == 0x000010, "Wrong size on FBustupAnimTable");
static_assert(offsetof(FBustupAnimTable, Type) == 0x000008, "Member 'FBustupAnimTable::Type' has a wrong offset!");
static_assert(offsetof(FBustupAnimTable, Frame) == 0x00000C, "Member 'FBustupAnimTable::Frame' has a wrong offset!");
static_assert(offsetof(FBustupAnimTable, Random) == 0x00000E, "Member 'FBustupAnimTable::Random' has a wrong offset!");

// ScriptStruct xrd777.BustupGradationTable
// 0x0030 (0x0038 - 0x0008)
struct FBustupGradationTable final : public FTableRowBase
{
public:
	uint8                                         Environment;                                       // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Angle;                                             // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowPosition;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowColorR;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowColorG;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowColorB;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowColorA;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Desaturation;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Brightness;                                        // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextureNo;                                         // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBustupGradationTable) == 0x000008, "Wrong alignment on FBustupGradationTable");
static_assert(sizeof(FBustupGradationTable) == 0x000038, "Wrong size on FBustupGradationTable");
static_assert(offsetof(FBustupGradationTable, Environment) == 0x000008, "Member 'FBustupGradationTable::Environment' has a wrong offset!");
static_assert(offsetof(FBustupGradationTable, Angle) == 0x00000C, "Member 'FBustupGradationTable::Angle' has a wrong offset!");
static_assert(offsetof(FBustupGradationTable, ShadowPosition) == 0x000010, "Member 'FBustupGradationTable::ShadowPosition' has a wrong offset!");
static_assert(offsetof(FBustupGradationTable, Range) == 0x000014, "Member 'FBustupGradationTable::Range' has a wrong offset!");
static_assert(offsetof(FBustupGradationTable, ShadowColorR) == 0x000018, "Member 'FBustupGradationTable::ShadowColorR' has a wrong offset!");
static_assert(offsetof(FBustupGradationTable, ShadowColorG) == 0x00001C, "Member 'FBustupGradationTable::ShadowColorG' has a wrong offset!");
static_assert(offsetof(FBustupGradationTable, ShadowColorB) == 0x000020, "Member 'FBustupGradationTable::ShadowColorB' has a wrong offset!");
static_assert(offsetof(FBustupGradationTable, ShadowColorA) == 0x000024, "Member 'FBustupGradationTable::ShadowColorA' has a wrong offset!");
static_assert(offsetof(FBustupGradationTable, Desaturation) == 0x000028, "Member 'FBustupGradationTable::Desaturation' has a wrong offset!");
static_assert(offsetof(FBustupGradationTable, Brightness) == 0x00002C, "Member 'FBustupGradationTable::Brightness' has a wrong offset!");
static_assert(offsetof(FBustupGradationTable, TextureNo) == 0x000030, "Member 'FBustupGradationTable::TextureNo' has a wrong offset!");

// ScriptStruct xrd777.BustupEnvironmentTable
// 0x0020 (0x0028 - 0x0008)
struct FBustupEnvironmentTable final : public FTableRowBase
{
public:
	int32                                         BGMajor;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BGMinor;                                           // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EarlyMorning;                                      // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Morning;                                           // 0x0011(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AM;                                                // 0x0012(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Noon;                                              // 0x0013(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PM;                                                // 0x0014(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AfterSchool;                                       // 0x0015(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Night;                                             // 0x0016(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Shadow;                                            // 0x0017(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Midnight;                                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EarlyMorningHero;                                  // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MorningHero;                                       // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AMHero;                                            // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NoonHero;                                          // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PMHero;                                            // 0x001D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AfterSchoolHero;                                   // 0x001E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NightHero;                                         // 0x001F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ShadowHero;                                        // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MidnightHero;                                      // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBustupEnvironmentTable) == 0x000008, "Wrong alignment on FBustupEnvironmentTable");
static_assert(sizeof(FBustupEnvironmentTable) == 0x000028, "Wrong size on FBustupEnvironmentTable");
static_assert(offsetof(FBustupEnvironmentTable, BGMajor) == 0x000008, "Member 'FBustupEnvironmentTable::BGMajor' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, BGMinor) == 0x00000C, "Member 'FBustupEnvironmentTable::BGMinor' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, EarlyMorning) == 0x000010, "Member 'FBustupEnvironmentTable::EarlyMorning' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, Morning) == 0x000011, "Member 'FBustupEnvironmentTable::Morning' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, AM) == 0x000012, "Member 'FBustupEnvironmentTable::AM' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, Noon) == 0x000013, "Member 'FBustupEnvironmentTable::Noon' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, PM) == 0x000014, "Member 'FBustupEnvironmentTable::PM' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, AfterSchool) == 0x000015, "Member 'FBustupEnvironmentTable::AfterSchool' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, Night) == 0x000016, "Member 'FBustupEnvironmentTable::Night' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, Shadow) == 0x000017, "Member 'FBustupEnvironmentTable::Shadow' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, Midnight) == 0x000018, "Member 'FBustupEnvironmentTable::Midnight' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, EarlyMorningHero) == 0x000019, "Member 'FBustupEnvironmentTable::EarlyMorningHero' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, MorningHero) == 0x00001A, "Member 'FBustupEnvironmentTable::MorningHero' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, AMHero) == 0x00001B, "Member 'FBustupEnvironmentTable::AMHero' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, NoonHero) == 0x00001C, "Member 'FBustupEnvironmentTable::NoonHero' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, PMHero) == 0x00001D, "Member 'FBustupEnvironmentTable::PMHero' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, AfterSchoolHero) == 0x00001E, "Member 'FBustupEnvironmentTable::AfterSchoolHero' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, NightHero) == 0x00001F, "Member 'FBustupEnvironmentTable::NightHero' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, ShadowHero) == 0x000020, "Member 'FBustupEnvironmentTable::ShadowHero' has a wrong offset!");
static_assert(offsetof(FBustupEnvironmentTable, MidnightHero) == 0x000021, "Member 'FBustupEnvironmentTable::MidnightHero' has a wrong offset!");

// ScriptStruct xrd777.BustupOffsetTable
// 0x0040 (0x0048 - 0x0008)
struct FBustupOffsetTable final : public FTableRowBase
{
public:
	uint16                                        CharaID;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Pose;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeX;                                              // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EyeY;                                              // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouthX;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouthY;                                            // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlushX;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlushY;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweatX;                                            // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SweatY;                                            // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetX;                                           // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OffsetY;                                           // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBustupOffsetTable) == 0x000008, "Wrong alignment on FBustupOffsetTable");
static_assert(sizeof(FBustupOffsetTable) == 0x000048, "Wrong size on FBustupOffsetTable");
static_assert(offsetof(FBustupOffsetTable, CharaID) == 0x000008, "Member 'FBustupOffsetTable::CharaID' has a wrong offset!");
static_assert(offsetof(FBustupOffsetTable, Pose) == 0x000010, "Member 'FBustupOffsetTable::Pose' has a wrong offset!");
static_assert(offsetof(FBustupOffsetTable, EyeX) == 0x000020, "Member 'FBustupOffsetTable::EyeX' has a wrong offset!");
static_assert(offsetof(FBustupOffsetTable, EyeY) == 0x000024, "Member 'FBustupOffsetTable::EyeY' has a wrong offset!");
static_assert(offsetof(FBustupOffsetTable, MouthX) == 0x000028, "Member 'FBustupOffsetTable::MouthX' has a wrong offset!");
static_assert(offsetof(FBustupOffsetTable, MouthY) == 0x00002C, "Member 'FBustupOffsetTable::MouthY' has a wrong offset!");
static_assert(offsetof(FBustupOffsetTable, BlushX) == 0x000030, "Member 'FBustupOffsetTable::BlushX' has a wrong offset!");
static_assert(offsetof(FBustupOffsetTable, BlushY) == 0x000034, "Member 'FBustupOffsetTable::BlushY' has a wrong offset!");
static_assert(offsetof(FBustupOffsetTable, SweatX) == 0x000038, "Member 'FBustupOffsetTable::SweatX' has a wrong offset!");
static_assert(offsetof(FBustupOffsetTable, SweatY) == 0x00003C, "Member 'FBustupOffsetTable::SweatY' has a wrong offset!");
static_assert(offsetof(FBustupOffsetTable, OffsetX) == 0x000040, "Member 'FBustupOffsetTable::OffsetX' has a wrong offset!");
static_assert(offsetof(FBustupOffsetTable, OffsetY) == 0x000044, "Member 'FBustupOffsetTable::OffsetY' has a wrong offset!");

// ScriptStruct xrd777.BustupParamTable
// 0x0020 (0x0028 - 0x0008)
struct FBustupParamTable final : public FTableRowBase
{
public:
	uint16                                        CharaID;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        FaceID;                                            // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ClothID;                                           // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Pose;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EyeAnim;                                           // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MouthAnim;                                         // 0x0021(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         InBetween;                                         // 0x0022(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBustupParamTable) == 0x000008, "Wrong alignment on FBustupParamTable");
static_assert(sizeof(FBustupParamTable) == 0x000028, "Wrong size on FBustupParamTable");
static_assert(offsetof(FBustupParamTable, CharaID) == 0x000008, "Member 'FBustupParamTable::CharaID' has a wrong offset!");
static_assert(offsetof(FBustupParamTable, FaceID) == 0x00000A, "Member 'FBustupParamTable::FaceID' has a wrong offset!");
static_assert(offsetof(FBustupParamTable, ClothID) == 0x00000C, "Member 'FBustupParamTable::ClothID' has a wrong offset!");
static_assert(offsetof(FBustupParamTable, Pose) == 0x000010, "Member 'FBustupParamTable::Pose' has a wrong offset!");
static_assert(offsetof(FBustupParamTable, EyeAnim) == 0x000020, "Member 'FBustupParamTable::EyeAnim' has a wrong offset!");
static_assert(offsetof(FBustupParamTable, MouthAnim) == 0x000021, "Member 'FBustupParamTable::MouthAnim' has a wrong offset!");
static_assert(offsetof(FBustupParamTable, InBetween) == 0x000022, "Member 'FBustupParamTable::InBetween' has a wrong offset!");

// ScriptStruct xrd777.MiniMapInfoTable
// 0x0020 (0x0028 - 0x0008)
struct FMiniMapInfoTable final : public FTableRowBase
{
public:
	class FString                                 FieldID;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DegreeAngle;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Hide;                                              // 0x0020(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VLScale;                                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMiniMapInfoTable) == 0x000008, "Wrong alignment on FMiniMapInfoTable");
static_assert(sizeof(FMiniMapInfoTable) == 0x000028, "Wrong size on FMiniMapInfoTable");
static_assert(offsetof(FMiniMapInfoTable, FieldID) == 0x000008, "Member 'FMiniMapInfoTable::FieldID' has a wrong offset!");
static_assert(offsetof(FMiniMapInfoTable, Scale) == 0x000018, "Member 'FMiniMapInfoTable::Scale' has a wrong offset!");
static_assert(offsetof(FMiniMapInfoTable, DegreeAngle) == 0x00001C, "Member 'FMiniMapInfoTable::DegreeAngle' has a wrong offset!");
static_assert(offsetof(FMiniMapInfoTable, Hide) == 0x000020, "Member 'FMiniMapInfoTable::Hide' has a wrong offset!");
static_assert(offsetof(FMiniMapInfoTable, VLScale) == 0x000024, "Member 'FMiniMapInfoTable::VLScale' has a wrong offset!");

// ScriptStruct xrd777.MiniMapOffsetTable
// 0x0018 (0x0020 - 0x0008)
struct FMiniMapOffsetTable final : public FTableRowBase
{
public:
	class FString                                 FieldID;                                           // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetX;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OffsetY;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMiniMapOffsetTable) == 0x000008, "Wrong alignment on FMiniMapOffsetTable");
static_assert(sizeof(FMiniMapOffsetTable) == 0x000020, "Wrong size on FMiniMapOffsetTable");
static_assert(offsetof(FMiniMapOffsetTable, FieldID) == 0x000008, "Member 'FMiniMapOffsetTable::FieldID' has a wrong offset!");
static_assert(offsetof(FMiniMapOffsetTable, OffsetX) == 0x000018, "Member 'FMiniMapOffsetTable::OffsetX' has a wrong offset!");
static_assert(offsetof(FMiniMapOffsetTable, OffsetY) == 0x00001C, "Member 'FMiniMapOffsetTable::OffsetY' has a wrong offset!");

// ScriptStruct xrd777.TownMapDetailTextTable
// 0x0010 (0x0018 - 0x0008)
struct FTownMapDetailTextTable final : public FTableRowBase
{
public:
	class FString                                 DetailText;                                        // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTownMapDetailTextTable) == 0x000008, "Wrong alignment on FTownMapDetailTextTable");
static_assert(sizeof(FTownMapDetailTextTable) == 0x000018, "Wrong size on FTownMapDetailTextTable");
static_assert(offsetof(FTownMapDetailTextTable, DetailText) == 0x000008, "Member 'FTownMapDetailTextTable::DetailText' has a wrong offset!");

// ScriptStruct xrd777.TownMapInfoNameTable
// 0x0030 (0x0038 - 0x0008)
struct FTownMapInfoNameTable final : public FTableRowBase
{
public:
	class FString                                 TextLabel;                                         // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTownMapInfoNameTable) == 0x000008, "Wrong alignment on FTownMapInfoNameTable");
static_assert(sizeof(FTownMapInfoNameTable) == 0x000038, "Wrong size on FTownMapInfoNameTable");
static_assert(offsetof(FTownMapInfoNameTable, TextLabel) == 0x000008, "Member 'FTownMapInfoNameTable::TextLabel' has a wrong offset!");
static_assert(offsetof(FTownMapInfoNameTable, Text) == 0x000018, "Member 'FTownMapInfoNameTable::Text' has a wrong offset!");
static_assert(offsetof(FTownMapInfoNameTable, Comment) == 0x000028, "Member 'FTownMapInfoNameTable::Comment' has a wrong offset!");

// ScriptStruct xrd777.TownMapInfoTable
// 0x0070 (0x0078 - 0x0008)
struct FTownMapInfoTable final : public FTableRowBase
{
public:
	class FString                                 LocationName;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocationNo;                                        // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CategoryName;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryNo;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconName;                                          // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprType;                                           // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprNo;                                             // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Noon;                                              // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Night;                                             // 0x0051(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HideFlag;                                          // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextLabel;                                         // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTownMapInfoTable) == 0x000008, "Wrong alignment on FTownMapInfoTable");
static_assert(sizeof(FTownMapInfoTable) == 0x000078, "Wrong size on FTownMapInfoTable");
static_assert(offsetof(FTownMapInfoTable, LocationName) == 0x000008, "Member 'FTownMapInfoTable::LocationName' has a wrong offset!");
static_assert(offsetof(FTownMapInfoTable, LocationNo) == 0x000018, "Member 'FTownMapInfoTable::LocationNo' has a wrong offset!");
static_assert(offsetof(FTownMapInfoTable, CategoryName) == 0x000020, "Member 'FTownMapInfoTable::CategoryName' has a wrong offset!");
static_assert(offsetof(FTownMapInfoTable, CategoryNo) == 0x000030, "Member 'FTownMapInfoTable::CategoryNo' has a wrong offset!");
static_assert(offsetof(FTownMapInfoTable, IconName) == 0x000038, "Member 'FTownMapInfoTable::IconName' has a wrong offset!");
static_assert(offsetof(FTownMapInfoTable, SprType) == 0x000048, "Member 'FTownMapInfoTable::SprType' has a wrong offset!");
static_assert(offsetof(FTownMapInfoTable, SprNo) == 0x00004C, "Member 'FTownMapInfoTable::SprNo' has a wrong offset!");
static_assert(offsetof(FTownMapInfoTable, Noon) == 0x000050, "Member 'FTownMapInfoTable::Noon' has a wrong offset!");
static_assert(offsetof(FTownMapInfoTable, Night) == 0x000051, "Member 'FTownMapInfoTable::Night' has a wrong offset!");
static_assert(offsetof(FTownMapInfoTable, HideFlag) == 0x000058, "Member 'FTownMapInfoTable::HideFlag' has a wrong offset!");
static_assert(offsetof(FTownMapInfoTable, TextLabel) == 0x000068, "Member 'FTownMapInfoTable::TextLabel' has a wrong offset!");

// ScriptStruct xrd777.TownMapTimeTable
// 0x0080 (0x0088 - 0x0008)
struct FTownMapTimeTable final : public FTableRowBase
{
public:
	class FString                                 TownName;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Noon;                                              // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NoonVisibleFlag;                                   // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NoonHideFlag1;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NoonHideFlag2;                                     // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Night;                                             // 0x0050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NightVisibleFlag;                                  // 0x0058(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NightHideFlag1;                                    // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NightHideFlag2;                                    // 0x0078(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTownMapTimeTable) == 0x000008, "Wrong alignment on FTownMapTimeTable");
static_assert(sizeof(FTownMapTimeTable) == 0x000088, "Wrong size on FTownMapTimeTable");
static_assert(offsetof(FTownMapTimeTable, TownName) == 0x000008, "Member 'FTownMapTimeTable::TownName' has a wrong offset!");
static_assert(offsetof(FTownMapTimeTable, Noon) == 0x000018, "Member 'FTownMapTimeTable::Noon' has a wrong offset!");
static_assert(offsetof(FTownMapTimeTable, NoonVisibleFlag) == 0x000020, "Member 'FTownMapTimeTable::NoonVisibleFlag' has a wrong offset!");
static_assert(offsetof(FTownMapTimeTable, NoonHideFlag1) == 0x000030, "Member 'FTownMapTimeTable::NoonHideFlag1' has a wrong offset!");
static_assert(offsetof(FTownMapTimeTable, NoonHideFlag2) == 0x000040, "Member 'FTownMapTimeTable::NoonHideFlag2' has a wrong offset!");
static_assert(offsetof(FTownMapTimeTable, Night) == 0x000050, "Member 'FTownMapTimeTable::Night' has a wrong offset!");
static_assert(offsetof(FTownMapTimeTable, NightVisibleFlag) == 0x000058, "Member 'FTownMapTimeTable::NightVisibleFlag' has a wrong offset!");
static_assert(offsetof(FTownMapTimeTable, NightHideFlag1) == 0x000068, "Member 'FTownMapTimeTable::NightHideFlag1' has a wrong offset!");
static_assert(offsetof(FTownMapTimeTable, NightHideFlag2) == 0x000078, "Member 'FTownMapTimeTable::NightHideFlag2' has a wrong offset!");

// ScriptStruct xrd777.TownMapRestrictionsTable
// 0x0030 (0x0038 - 0x0008)
struct FTownMapRestrictionsTable final : public FTableRowBase
{
public:
	int32                                         KeyfreeEventID;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CloseLMap;                                         // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DestinationA;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestinationB;                                      // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestinationC;                                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestinationD;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestinationE;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DestinationF;                                      // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AfterMove;                                         // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTownMapRestrictionsTable) == 0x000008, "Wrong alignment on FTownMapRestrictionsTable");
static_assert(sizeof(FTownMapRestrictionsTable) == 0x000038, "Wrong size on FTownMapRestrictionsTable");
static_assert(offsetof(FTownMapRestrictionsTable, KeyfreeEventID) == 0x000008, "Member 'FTownMapRestrictionsTable::KeyfreeEventID' has a wrong offset!");
static_assert(offsetof(FTownMapRestrictionsTable, CloseLMap) == 0x00000C, "Member 'FTownMapRestrictionsTable::CloseLMap' has a wrong offset!");
static_assert(offsetof(FTownMapRestrictionsTable, DestinationA) == 0x000010, "Member 'FTownMapRestrictionsTable::DestinationA' has a wrong offset!");
static_assert(offsetof(FTownMapRestrictionsTable, DestinationB) == 0x000014, "Member 'FTownMapRestrictionsTable::DestinationB' has a wrong offset!");
static_assert(offsetof(FTownMapRestrictionsTable, DestinationC) == 0x000018, "Member 'FTownMapRestrictionsTable::DestinationC' has a wrong offset!");
static_assert(offsetof(FTownMapRestrictionsTable, DestinationD) == 0x00001C, "Member 'FTownMapRestrictionsTable::DestinationD' has a wrong offset!");
static_assert(offsetof(FTownMapRestrictionsTable, DestinationE) == 0x000020, "Member 'FTownMapRestrictionsTable::DestinationE' has a wrong offset!");
static_assert(offsetof(FTownMapRestrictionsTable, DestinationF) == 0x000024, "Member 'FTownMapRestrictionsTable::DestinationF' has a wrong offset!");
static_assert(offsetof(FTownMapRestrictionsTable, AfterMove) == 0x000028, "Member 'FTownMapRestrictionsTable::AfterMove' has a wrong offset!");

// ScriptStruct xrd777.MiniMapIconList
// 0x0048 (0x0050 - 0x0008)
struct FMiniMapIconList final : public FTableRowBase
{
public:
	class FString                                 IconName;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprType;                                           // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprNo;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DegreeAngle;                                       // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VisibleFlag;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisableFlag;                                       // 0x0040(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMiniMapIconList) == 0x000008, "Wrong alignment on FMiniMapIconList");
static_assert(sizeof(FMiniMapIconList) == 0x000050, "Wrong size on FMiniMapIconList");
static_assert(offsetof(FMiniMapIconList, IconName) == 0x000008, "Member 'FMiniMapIconList::IconName' has a wrong offset!");
static_assert(offsetof(FMiniMapIconList, SprType) == 0x000018, "Member 'FMiniMapIconList::SprType' has a wrong offset!");
static_assert(offsetof(FMiniMapIconList, SprNo) == 0x00001C, "Member 'FMiniMapIconList::SprNo' has a wrong offset!");
static_assert(offsetof(FMiniMapIconList, X) == 0x000020, "Member 'FMiniMapIconList::X' has a wrong offset!");
static_assert(offsetof(FMiniMapIconList, Y) == 0x000024, "Member 'FMiniMapIconList::Y' has a wrong offset!");
static_assert(offsetof(FMiniMapIconList, DegreeAngle) == 0x000028, "Member 'FMiniMapIconList::DegreeAngle' has a wrong offset!");
static_assert(offsetof(FMiniMapIconList, VisibleFlag) == 0x000030, "Member 'FMiniMapIconList::VisibleFlag' has a wrong offset!");
static_assert(offsetof(FMiniMapIconList, DisableFlag) == 0x000040, "Member 'FMiniMapIconList::DisableFlag' has a wrong offset!");

// ScriptStruct xrd777.SuggestionList
// 0x0070 (0x0078 - 0x0008)
struct FSuggestionList final : public FTableRowBase
{
public:
	class FString                                 Category;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TextLabel;                                         // 0x0018(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VisibleFlag;                                       // 0x0028(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HideFlag;                                          // 0x0038(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReferenceGlobalCounter;                            // 0x0048(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartValue;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndValue;                                          // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimationFlag;                                     // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SuggestionFlag;                                    // 0x0068(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSuggestionList) == 0x000008, "Wrong alignment on FSuggestionList");
static_assert(sizeof(FSuggestionList) == 0x000078, "Wrong size on FSuggestionList");
static_assert(offsetof(FSuggestionList, Category) == 0x000008, "Member 'FSuggestionList::Category' has a wrong offset!");
static_assert(offsetof(FSuggestionList, TextLabel) == 0x000018, "Member 'FSuggestionList::TextLabel' has a wrong offset!");
static_assert(offsetof(FSuggestionList, VisibleFlag) == 0x000028, "Member 'FSuggestionList::VisibleFlag' has a wrong offset!");
static_assert(offsetof(FSuggestionList, HideFlag) == 0x000038, "Member 'FSuggestionList::HideFlag' has a wrong offset!");
static_assert(offsetof(FSuggestionList, ReferenceGlobalCounter) == 0x000048, "Member 'FSuggestionList::ReferenceGlobalCounter' has a wrong offset!");
static_assert(offsetof(FSuggestionList, StartValue) == 0x000058, "Member 'FSuggestionList::StartValue' has a wrong offset!");
static_assert(offsetof(FSuggestionList, EndValue) == 0x00005C, "Member 'FSuggestionList::EndValue' has a wrong offset!");
static_assert(offsetof(FSuggestionList, AnimationFlag) == 0x000060, "Member 'FSuggestionList::AnimationFlag' has a wrong offset!");
static_assert(offsetof(FSuggestionList, SuggestionFlag) == 0x000068, "Member 'FSuggestionList::SuggestionFlag' has a wrong offset!");

// ScriptStruct xrd777.FontAdjustmentList
// 0x0020 (0x0028 - 0x0008)
struct FFontAdjustmentList final : public FTableRowBase
{
public:
	int32                                         Code;                                              // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Font;                                              // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Left_Adjustment;                                   // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Right_Adjustment;                                  // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFontAdjustmentList) == 0x000008, "Wrong alignment on FFontAdjustmentList");
static_assert(sizeof(FFontAdjustmentList) == 0x000028, "Wrong size on FFontAdjustmentList");
static_assert(offsetof(FFontAdjustmentList, Code) == 0x000008, "Member 'FFontAdjustmentList::Code' has a wrong offset!");
static_assert(offsetof(FFontAdjustmentList, Font) == 0x000010, "Member 'FFontAdjustmentList::Font' has a wrong offset!");
static_assert(offsetof(FFontAdjustmentList, Left_Adjustment) == 0x000020, "Member 'FFontAdjustmentList::Left_Adjustment' has a wrong offset!");
static_assert(offsetof(FFontAdjustmentList, Right_Adjustment) == 0x000024, "Member 'FFontAdjustmentList::Right_Adjustment' has a wrong offset!");

// ScriptStruct xrd777.SimpleShopTable
// 0x0028 (0x0030 - 0x0008)
struct FSimpleShopTable final : public FTableRowBase
{
public:
	class FString                                 ItemId;                                            // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SellSun : 1;                                       // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         SellMon : 1;                                       // 0x0018(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         SellTue : 1;                                       // 0x0018(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         SellWed : 1;                                       // 0x0018(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         SellThr : 1;                                       // 0x0018(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         SellFri : 1;                                       // 0x0018(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         SellSat : 1;                                       // 0x0018(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         LiftMonth;                                         // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LiftDays;                                          // 0x001A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Stock;                                             // 0x001B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ResetSun : 1;                                      // 0x001C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ResetMon : 1;                                      // 0x001C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ResetTue : 1;                                      // 0x001C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ResetWed : 1;                                      // 0x001C(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ResetThr : 1;                                      // 0x001C(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ResetFri : 1;                                      // 0x001C(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ResetSat : 1;                                      // 0x001C(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OpenFlag;                                          // 0x0020(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSimpleShopTable) == 0x000008, "Wrong alignment on FSimpleShopTable");
static_assert(sizeof(FSimpleShopTable) == 0x000030, "Wrong size on FSimpleShopTable");
static_assert(offsetof(FSimpleShopTable, ItemId) == 0x000008, "Member 'FSimpleShopTable::ItemId' has a wrong offset!");
static_assert(offsetof(FSimpleShopTable, LiftMonth) == 0x000019, "Member 'FSimpleShopTable::LiftMonth' has a wrong offset!");
static_assert(offsetof(FSimpleShopTable, LiftDays) == 0x00001A, "Member 'FSimpleShopTable::LiftDays' has a wrong offset!");
static_assert(offsetof(FSimpleShopTable, Stock) == 0x00001B, "Member 'FSimpleShopTable::Stock' has a wrong offset!");
static_assert(offsetof(FSimpleShopTable, OpenFlag) == 0x000020, "Member 'FSimpleShopTable::OpenFlag' has a wrong offset!");

// ScriptStruct xrd777.AntiqueShopEquipCombineResultTable
// 0x0018 (0x0020 - 0x0008)
struct FAntiqueShopEquipCombineResultTable final : public FTableRowBase
{
public:
	uint16                                        Value;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        BaseItemValue;                                     // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatItemValue_1;                                    // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatItemNum_1;                                      // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatItemValue_2;                                    // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatItemNum_2;                                      // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatItemValue_3;                                    // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatItemNum_3;                                      // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SaleMonth;                                         // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SaleDay;                                           // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OpenFLG;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAntiqueShopEquipCombineResultTable) == 0x000008, "Wrong alignment on FAntiqueShopEquipCombineResultTable");
static_assert(sizeof(FAntiqueShopEquipCombineResultTable) == 0x000020, "Wrong size on FAntiqueShopEquipCombineResultTable");
static_assert(offsetof(FAntiqueShopEquipCombineResultTable, Value) == 0x000008, "Member 'FAntiqueShopEquipCombineResultTable::Value' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineResultTable, BaseItemValue) == 0x00000A, "Member 'FAntiqueShopEquipCombineResultTable::BaseItemValue' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineResultTable, MatItemValue_1) == 0x00000C, "Member 'FAntiqueShopEquipCombineResultTable::MatItemValue_1' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineResultTable, MatItemNum_1) == 0x00000E, "Member 'FAntiqueShopEquipCombineResultTable::MatItemNum_1' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineResultTable, MatItemValue_2) == 0x000010, "Member 'FAntiqueShopEquipCombineResultTable::MatItemValue_2' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineResultTable, MatItemNum_2) == 0x000012, "Member 'FAntiqueShopEquipCombineResultTable::MatItemNum_2' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineResultTable, MatItemValue_3) == 0x000014, "Member 'FAntiqueShopEquipCombineResultTable::MatItemValue_3' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineResultTable, MatItemNum_3) == 0x000016, "Member 'FAntiqueShopEquipCombineResultTable::MatItemNum_3' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineResultTable, SaleMonth) == 0x000018, "Member 'FAntiqueShopEquipCombineResultTable::SaleMonth' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineResultTable, SaleDay) == 0x00001A, "Member 'FAntiqueShopEquipCombineResultTable::SaleDay' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineResultTable, OpenFLG) == 0x00001C, "Member 'FAntiqueShopEquipCombineResultTable::OpenFLG' has a wrong offset!");

// ScriptStruct xrd777.AntiqueShopEquipCombineSourceTable
// 0x0010 (0x0018 - 0x0008)
struct FAntiqueShopEquipCombineSourceTable final : public FTableRowBase
{
public:
	uint16                                        Value;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SaleMonth;                                         // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SaleDay;                                           // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        OpenFLG;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAntiqueShopEquipCombineSourceTable) == 0x000008, "Wrong alignment on FAntiqueShopEquipCombineSourceTable");
static_assert(sizeof(FAntiqueShopEquipCombineSourceTable) == 0x000018, "Wrong size on FAntiqueShopEquipCombineSourceTable");
static_assert(offsetof(FAntiqueShopEquipCombineSourceTable, Value) == 0x000008, "Member 'FAntiqueShopEquipCombineSourceTable::Value' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineSourceTable, SaleMonth) == 0x00000A, "Member 'FAntiqueShopEquipCombineSourceTable::SaleMonth' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineSourceTable, SaleDay) == 0x00000C, "Member 'FAntiqueShopEquipCombineSourceTable::SaleDay' has a wrong offset!");
static_assert(offsetof(FAntiqueShopEquipCombineSourceTable, OpenFLG) == 0x000010, "Member 'FAntiqueShopEquipCombineSourceTable::OpenFLG' has a wrong offset!");

// ScriptStruct xrd777.AntiqueShopLineUpListRecord
// 0x0018 (0x0020 - 0x0008)
struct FAntiqueShopLineUpListRecord final : public FTableRowBase
{
public:
	uint16                                        Value;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ListType;                                          // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatItemValue_1;                                    // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatItemNum_1;                                      // 0x000E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatItemValue_2;                                    // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatItemNum_2;                                      // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatItemValue_3;                                    // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        MatItemNum_3;                                      // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SaleMonth;                                         // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SaleDay;                                           // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OpenFLG;                                           // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAntiqueShopLineUpListRecord) == 0x000008, "Wrong alignment on FAntiqueShopLineUpListRecord");
static_assert(sizeof(FAntiqueShopLineUpListRecord) == 0x000020, "Wrong size on FAntiqueShopLineUpListRecord");
static_assert(offsetof(FAntiqueShopLineUpListRecord, Value) == 0x000008, "Member 'FAntiqueShopLineUpListRecord::Value' has a wrong offset!");
static_assert(offsetof(FAntiqueShopLineUpListRecord, ListType) == 0x00000A, "Member 'FAntiqueShopLineUpListRecord::ListType' has a wrong offset!");
static_assert(offsetof(FAntiqueShopLineUpListRecord, MatItemValue_1) == 0x00000C, "Member 'FAntiqueShopLineUpListRecord::MatItemValue_1' has a wrong offset!");
static_assert(offsetof(FAntiqueShopLineUpListRecord, MatItemNum_1) == 0x00000E, "Member 'FAntiqueShopLineUpListRecord::MatItemNum_1' has a wrong offset!");
static_assert(offsetof(FAntiqueShopLineUpListRecord, MatItemValue_2) == 0x000010, "Member 'FAntiqueShopLineUpListRecord::MatItemValue_2' has a wrong offset!");
static_assert(offsetof(FAntiqueShopLineUpListRecord, MatItemNum_2) == 0x000012, "Member 'FAntiqueShopLineUpListRecord::MatItemNum_2' has a wrong offset!");
static_assert(offsetof(FAntiqueShopLineUpListRecord, MatItemValue_3) == 0x000014, "Member 'FAntiqueShopLineUpListRecord::MatItemValue_3' has a wrong offset!");
static_assert(offsetof(FAntiqueShopLineUpListRecord, MatItemNum_3) == 0x000016, "Member 'FAntiqueShopLineUpListRecord::MatItemNum_3' has a wrong offset!");
static_assert(offsetof(FAntiqueShopLineUpListRecord, SaleMonth) == 0x000018, "Member 'FAntiqueShopLineUpListRecord::SaleMonth' has a wrong offset!");
static_assert(offsetof(FAntiqueShopLineUpListRecord, SaleDay) == 0x00001A, "Member 'FAntiqueShopLineUpListRecord::SaleDay' has a wrong offset!");
static_assert(offsetof(FAntiqueShopLineUpListRecord, OpenFLG) == 0x00001C, "Member 'FAntiqueShopLineUpListRecord::OpenFLG' has a wrong offset!");

// ScriptStruct xrd777.ItemShopLineUpListRecord
// 0x0010 (0x0018 - 0x0008)
struct FItemShopLineUpListRecord final : public FTableRowBase
{
public:
	uint16                                        Value;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SaleMonth;                                         // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SaleDay;                                           // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        OpenFLG;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemShopLineUpListRecord) == 0x000008, "Wrong alignment on FItemShopLineUpListRecord");
static_assert(sizeof(FItemShopLineUpListRecord) == 0x000018, "Wrong size on FItemShopLineUpListRecord");
static_assert(offsetof(FItemShopLineUpListRecord, Value) == 0x000008, "Member 'FItemShopLineUpListRecord::Value' has a wrong offset!");
static_assert(offsetof(FItemShopLineUpListRecord, SaleMonth) == 0x00000A, "Member 'FItemShopLineUpListRecord::SaleMonth' has a wrong offset!");
static_assert(offsetof(FItemShopLineUpListRecord, SaleDay) == 0x00000C, "Member 'FItemShopLineUpListRecord::SaleDay' has a wrong offset!");
static_assert(offsetof(FItemShopLineUpListRecord, OpenFLG) == 0x000010, "Member 'FItemShopLineUpListRecord::OpenFLG' has a wrong offset!");

// ScriptStruct xrd777.WeaponShopLineUpListRecord
// 0x0010 (0x0018 - 0x0008)
struct FWeaponShopLineUpListRecord final : public FTableRowBase
{
public:
	uint16                                        Value;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SaleMonth;                                         // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SaleDay;                                           // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        OpenFLG;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponShopLineUpListRecord) == 0x000008, "Wrong alignment on FWeaponShopLineUpListRecord");
static_assert(sizeof(FWeaponShopLineUpListRecord) == 0x000018, "Wrong size on FWeaponShopLineUpListRecord");
static_assert(offsetof(FWeaponShopLineUpListRecord, Value) == 0x000008, "Member 'FWeaponShopLineUpListRecord::Value' has a wrong offset!");
static_assert(offsetof(FWeaponShopLineUpListRecord, SaleMonth) == 0x00000A, "Member 'FWeaponShopLineUpListRecord::SaleMonth' has a wrong offset!");
static_assert(offsetof(FWeaponShopLineUpListRecord, SaleDay) == 0x00000C, "Member 'FWeaponShopLineUpListRecord::SaleDay' has a wrong offset!");
static_assert(offsetof(FWeaponShopLineUpListRecord, OpenFLG) == 0x000010, "Member 'FWeaponShopLineUpListRecord::OpenFLG' has a wrong offset!");

// ScriptStruct xrd777.ItemNameList
// 0x0010 (0x0018 - 0x0008)
struct FItemNameList final : public FTableRowBase
{
public:
	class FString                                 ItemName;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemNameList) == 0x000008, "Wrong alignment on FItemNameList");
static_assert(sizeof(FItemNameList) == 0x000018, "Wrong size on FItemNameList");
static_assert(offsetof(FItemNameList, ItemName) == 0x000008, "Member 'FItemNameList::ItemName' has a wrong offset!");

// ScriptStruct xrd777.CommonItemListRecord
// 0x0030 (0x0038 - 0x0008)
struct FCommonItemListRecord final : public FTableRowBase
{
public:
	uint16                                        SortNum;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        BtlSortNum;                                        // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ItemType;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        UsePlaceID;                                        // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Tier;                                              // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Hp;                                                // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Sp;                                                // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Strength;                                          // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Magic;                                             // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Endurance;                                         // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Agility;                                           // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Luck;                                              // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Price;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x0030(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCommonItemListRecord) == 0x000008, "Wrong alignment on FCommonItemListRecord");
static_assert(sizeof(FCommonItemListRecord) == 0x000038, "Wrong size on FCommonItemListRecord");
static_assert(offsetof(FCommonItemListRecord, SortNum) == 0x000008, "Member 'FCommonItemListRecord::SortNum' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, BtlSortNum) == 0x00000A, "Member 'FCommonItemListRecord::BtlSortNum' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, ItemType) == 0x00000C, "Member 'FCommonItemListRecord::ItemType' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, UsePlaceID) == 0x000010, "Member 'FCommonItemListRecord::UsePlaceID' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, Rarity) == 0x000012, "Member 'FCommonItemListRecord::Rarity' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, Tier) == 0x000014, "Member 'FCommonItemListRecord::Tier' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, Hp) == 0x000016, "Member 'FCommonItemListRecord::Hp' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, Sp) == 0x000018, "Member 'FCommonItemListRecord::Sp' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, Strength) == 0x00001A, "Member 'FCommonItemListRecord::Strength' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, Magic) == 0x00001C, "Member 'FCommonItemListRecord::Magic' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, Endurance) == 0x00001E, "Member 'FCommonItemListRecord::Endurance' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, Agility) == 0x000020, "Member 'FCommonItemListRecord::Agility' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, Luck) == 0x000022, "Member 'FCommonItemListRecord::Luck' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, SkillId) == 0x000024, "Member 'FCommonItemListRecord::SkillId' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, Price) == 0x000028, "Member 'FCommonItemListRecord::Price' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, SellPrice) == 0x00002C, "Member 'FCommonItemListRecord::SellPrice' has a wrong offset!");
static_assert(offsetof(FCommonItemListRecord, GetFLG) == 0x000030, "Member 'FCommonItemListRecord::GetFLG' has a wrong offset!");

// ScriptStruct xrd777.CostumeItemListRecord
// 0x0020 (0x0028 - 0x0008)
struct FCostumeItemListRecord final : public FTableRowBase
{
public:
	uint16                                        SortNum;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipID;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Price;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ReflectType;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        CostumeID;                                         // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCostumeItemListRecord) == 0x000008, "Wrong alignment on FCostumeItemListRecord");
static_assert(sizeof(FCostumeItemListRecord) == 0x000028, "Wrong size on FCostumeItemListRecord");
static_assert(offsetof(FCostumeItemListRecord, SortNum) == 0x000008, "Member 'FCostumeItemListRecord::SortNum' has a wrong offset!");
static_assert(offsetof(FCostumeItemListRecord, ItemType) == 0x00000C, "Member 'FCostumeItemListRecord::ItemType' has a wrong offset!");
static_assert(offsetof(FCostumeItemListRecord, EquipID) == 0x000010, "Member 'FCostumeItemListRecord::EquipID' has a wrong offset!");
static_assert(offsetof(FCostumeItemListRecord, Price) == 0x000014, "Member 'FCostumeItemListRecord::Price' has a wrong offset!");
static_assert(offsetof(FCostumeItemListRecord, SellPrice) == 0x000018, "Member 'FCostumeItemListRecord::SellPrice' has a wrong offset!");
static_assert(offsetof(FCostumeItemListRecord, GetFLG) == 0x00001C, "Member 'FCostumeItemListRecord::GetFLG' has a wrong offset!");
static_assert(offsetof(FCostumeItemListRecord, ReflectType) == 0x000020, "Member 'FCostumeItemListRecord::ReflectType' has a wrong offset!");
static_assert(offsetof(FCostumeItemListRecord, CostumeID) == 0x000024, "Member 'FCostumeItemListRecord::CostumeID' has a wrong offset!");

// ScriptStruct xrd777.MaterialItemListRecord
// 0x0018 (0x0020 - 0x0008)
struct FMaterialItemListRecord final : public FTableRowBase
{
public:
	uint16                                        SortNum;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Price;                                             // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaterialItemListRecord) == 0x000008, "Wrong alignment on FMaterialItemListRecord");
static_assert(sizeof(FMaterialItemListRecord) == 0x000020, "Wrong size on FMaterialItemListRecord");
static_assert(offsetof(FMaterialItemListRecord, SortNum) == 0x000008, "Member 'FMaterialItemListRecord::SortNum' has a wrong offset!");
static_assert(offsetof(FMaterialItemListRecord, ItemType) == 0x00000C, "Member 'FMaterialItemListRecord::ItemType' has a wrong offset!");
static_assert(offsetof(FMaterialItemListRecord, Rarity) == 0x000010, "Member 'FMaterialItemListRecord::Rarity' has a wrong offset!");
static_assert(offsetof(FMaterialItemListRecord, Price) == 0x000014, "Member 'FMaterialItemListRecord::Price' has a wrong offset!");
static_assert(offsetof(FMaterialItemListRecord, SellPrice) == 0x000018, "Member 'FMaterialItemListRecord::SellPrice' has a wrong offset!");
static_assert(offsetof(FMaterialItemListRecord, GetFLG) == 0x00001C, "Member 'FMaterialItemListRecord::GetFLG' has a wrong offset!");

// ScriptStruct xrd777.EvitemItemListRecord
// 0x0008 (0x0010 - 0x0008)
struct FEvitemItemListRecord final : public FTableRowBase
{
public:
	uint16                                        SortNum;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEvitemItemListRecord) == 0x000008, "Wrong alignment on FEvitemItemListRecord");
static_assert(sizeof(FEvitemItemListRecord) == 0x000010, "Wrong size on FEvitemItemListRecord");
static_assert(offsetof(FEvitemItemListRecord, SortNum) == 0x000008, "Member 'FEvitemItemListRecord::SortNum' has a wrong offset!");
static_assert(offsetof(FEvitemItemListRecord, ItemType) == 0x00000C, "Member 'FEvitemItemListRecord::ItemType' has a wrong offset!");

// ScriptStruct xrd777.SkillcardItemListRecord
// 0x0020 (0x0028 - 0x0008)
struct FSkillcardItemListRecord final : public FTableRowBase
{
public:
	uint16                                        SortNum;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x0010(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Tier;                                              // 0x0012(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Price;                                             // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillcardItemListRecord) == 0x000008, "Wrong alignment on FSkillcardItemListRecord");
static_assert(sizeof(FSkillcardItemListRecord) == 0x000028, "Wrong size on FSkillcardItemListRecord");
static_assert(offsetof(FSkillcardItemListRecord, SortNum) == 0x000008, "Member 'FSkillcardItemListRecord::SortNum' has a wrong offset!");
static_assert(offsetof(FSkillcardItemListRecord, ItemType) == 0x00000C, "Member 'FSkillcardItemListRecord::ItemType' has a wrong offset!");
static_assert(offsetof(FSkillcardItemListRecord, Rarity) == 0x000010, "Member 'FSkillcardItemListRecord::Rarity' has a wrong offset!");
static_assert(offsetof(FSkillcardItemListRecord, Tier) == 0x000012, "Member 'FSkillcardItemListRecord::Tier' has a wrong offset!");
static_assert(offsetof(FSkillcardItemListRecord, SkillId) == 0x000014, "Member 'FSkillcardItemListRecord::SkillId' has a wrong offset!");
static_assert(offsetof(FSkillcardItemListRecord, Price) == 0x000018, "Member 'FSkillcardItemListRecord::Price' has a wrong offset!");
static_assert(offsetof(FSkillcardItemListRecord, SellPrice) == 0x00001C, "Member 'FSkillcardItemListRecord::SellPrice' has a wrong offset!");
static_assert(offsetof(FSkillcardItemListRecord, GetFLG) == 0x000020, "Member 'FSkillcardItemListRecord::GetFLG' has a wrong offset!");

// ScriptStruct xrd777.AccsItemListRecord
// 0x0028 (0x0030 - 0x0008)
struct FAccsItemListRecord final : public FTableRowBase
{
public:
	uint16                                        SortNum;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipID;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Tier;                                              // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Strength;                                          // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Magic;                                             // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Endurance;                                         // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Agility;                                           // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Luck;                                              // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Price;                                             // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x002C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccsItemListRecord) == 0x000008, "Wrong alignment on FAccsItemListRecord");
static_assert(sizeof(FAccsItemListRecord) == 0x000030, "Wrong size on FAccsItemListRecord");
static_assert(offsetof(FAccsItemListRecord, SortNum) == 0x000008, "Member 'FAccsItemListRecord::SortNum' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, ItemType) == 0x00000C, "Member 'FAccsItemListRecord::ItemType' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, EquipID) == 0x000010, "Member 'FAccsItemListRecord::EquipID' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, Rarity) == 0x000014, "Member 'FAccsItemListRecord::Rarity' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, Tier) == 0x000016, "Member 'FAccsItemListRecord::Tier' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, Strength) == 0x000018, "Member 'FAccsItemListRecord::Strength' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, Magic) == 0x00001A, "Member 'FAccsItemListRecord::Magic' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, Endurance) == 0x00001C, "Member 'FAccsItemListRecord::Endurance' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, Agility) == 0x00001E, "Member 'FAccsItemListRecord::Agility' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, Luck) == 0x000020, "Member 'FAccsItemListRecord::Luck' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, SkillId) == 0x000022, "Member 'FAccsItemListRecord::SkillId' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, Price) == 0x000024, "Member 'FAccsItemListRecord::Price' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, SellPrice) == 0x000028, "Member 'FAccsItemListRecord::SellPrice' has a wrong offset!");
static_assert(offsetof(FAccsItemListRecord, GetFLG) == 0x00002C, "Member 'FAccsItemListRecord::GetFLG' has a wrong offset!");

// ScriptStruct xrd777.ShoesItemListRecord
// 0x0030 (0x0038 - 0x0008)
struct FShoesItemListRecord final : public FTableRowBase
{
public:
	uint16                                        SortNum;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipID;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Tier;                                              // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Evasion;                                           // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Strength;                                          // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Magic;                                             // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Endurance;                                         // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Agility;                                           // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Luck;                                              // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Price;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x0030(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShoesItemListRecord) == 0x000008, "Wrong alignment on FShoesItemListRecord");
static_assert(sizeof(FShoesItemListRecord) == 0x000038, "Wrong size on FShoesItemListRecord");
static_assert(offsetof(FShoesItemListRecord, SortNum) == 0x000008, "Member 'FShoesItemListRecord::SortNum' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, ItemType) == 0x00000C, "Member 'FShoesItemListRecord::ItemType' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, EquipID) == 0x000010, "Member 'FShoesItemListRecord::EquipID' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, Rarity) == 0x000014, "Member 'FShoesItemListRecord::Rarity' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, Tier) == 0x000016, "Member 'FShoesItemListRecord::Tier' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, Evasion) == 0x000018, "Member 'FShoesItemListRecord::Evasion' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, Strength) == 0x00001A, "Member 'FShoesItemListRecord::Strength' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, Magic) == 0x00001C, "Member 'FShoesItemListRecord::Magic' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, Endurance) == 0x00001E, "Member 'FShoesItemListRecord::Endurance' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, Agility) == 0x000020, "Member 'FShoesItemListRecord::Agility' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, Luck) == 0x000022, "Member 'FShoesItemListRecord::Luck' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, SkillId) == 0x000024, "Member 'FShoesItemListRecord::SkillId' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, Price) == 0x000028, "Member 'FShoesItemListRecord::Price' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, SellPrice) == 0x00002C, "Member 'FShoesItemListRecord::SellPrice' has a wrong offset!");
static_assert(offsetof(FShoesItemListRecord, GetFLG) == 0x000030, "Member 'FShoesItemListRecord::GetFLG' has a wrong offset!");

// ScriptStruct xrd777.ArmorItemListRecord
// 0x0030 (0x0038 - 0x0008)
struct FArmorItemListRecord final : public FTableRowBase
{
public:
	uint16                                        SortNum;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        ItemType;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipID;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Tier;                                              // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Defence;                                           // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Strength;                                          // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Magic;                                             // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Endurance;                                         // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Agility;                                           // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Luck;                                              // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Price;                                             // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x0030(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArmorItemListRecord) == 0x000008, "Wrong alignment on FArmorItemListRecord");
static_assert(sizeof(FArmorItemListRecord) == 0x000038, "Wrong size on FArmorItemListRecord");
static_assert(offsetof(FArmorItemListRecord, SortNum) == 0x000008, "Member 'FArmorItemListRecord::SortNum' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, ItemType) == 0x00000C, "Member 'FArmorItemListRecord::ItemType' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, EquipID) == 0x000010, "Member 'FArmorItemListRecord::EquipID' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, Rarity) == 0x000014, "Member 'FArmorItemListRecord::Rarity' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, Tier) == 0x000016, "Member 'FArmorItemListRecord::Tier' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, Defence) == 0x000018, "Member 'FArmorItemListRecord::Defence' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, Strength) == 0x00001A, "Member 'FArmorItemListRecord::Strength' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, Magic) == 0x00001C, "Member 'FArmorItemListRecord::Magic' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, Endurance) == 0x00001E, "Member 'FArmorItemListRecord::Endurance' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, Agility) == 0x000020, "Member 'FArmorItemListRecord::Agility' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, Luck) == 0x000022, "Member 'FArmorItemListRecord::Luck' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, SkillId) == 0x000024, "Member 'FArmorItemListRecord::SkillId' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, Price) == 0x000028, "Member 'FArmorItemListRecord::Price' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, SellPrice) == 0x00002C, "Member 'FArmorItemListRecord::SellPrice' has a wrong offset!");
static_assert(offsetof(FArmorItemListRecord, GetFLG) == 0x000030, "Member 'FArmorItemListRecord::GetFLG' has a wrong offset!");

// ScriptStruct xrd777.WeaponItemListRecord
// 0x0038 (0x0040 - 0x0008)
struct FWeaponItemListRecord final : public FTableRowBase
{
public:
	uint16                                        SortNum;                                           // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        WeaponType;                                        // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        EquipID;                                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        AttrID;                                            // 0x0014(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Rarity;                                            // 0x0016(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Tier;                                              // 0x0018(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Attack;                                            // 0x001A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Accuracy;                                          // 0x001C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Strength;                                          // 0x001E(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Magic;                                             // 0x0020(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Endurance;                                         // 0x0022(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Agility;                                           // 0x0024(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Luck;                                              // 0x0026(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        SkillId;                                           // 0x0028(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        Price;                                             // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SellPrice;                                         // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        GetFLG;                                            // 0x0034(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        ModelID;                                           // 0x0036(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Flags;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWeaponItemListRecord) == 0x000008, "Wrong alignment on FWeaponItemListRecord");
static_assert(sizeof(FWeaponItemListRecord) == 0x000040, "Wrong size on FWeaponItemListRecord");
static_assert(offsetof(FWeaponItemListRecord, SortNum) == 0x000008, "Member 'FWeaponItemListRecord::SortNum' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, WeaponType) == 0x00000C, "Member 'FWeaponItemListRecord::WeaponType' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, EquipID) == 0x000010, "Member 'FWeaponItemListRecord::EquipID' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, AttrID) == 0x000014, "Member 'FWeaponItemListRecord::AttrID' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, Rarity) == 0x000016, "Member 'FWeaponItemListRecord::Rarity' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, Tier) == 0x000018, "Member 'FWeaponItemListRecord::Tier' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, Attack) == 0x00001A, "Member 'FWeaponItemListRecord::Attack' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, Accuracy) == 0x00001C, "Member 'FWeaponItemListRecord::Accuracy' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, Strength) == 0x00001E, "Member 'FWeaponItemListRecord::Strength' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, Magic) == 0x000020, "Member 'FWeaponItemListRecord::Magic' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, Endurance) == 0x000022, "Member 'FWeaponItemListRecord::Endurance' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, Agility) == 0x000024, "Member 'FWeaponItemListRecord::Agility' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, Luck) == 0x000026, "Member 'FWeaponItemListRecord::Luck' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, SkillId) == 0x000028, "Member 'FWeaponItemListRecord::SkillId' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, Price) == 0x00002C, "Member 'FWeaponItemListRecord::Price' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, SellPrice) == 0x000030, "Member 'FWeaponItemListRecord::SellPrice' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, GetFLG) == 0x000034, "Member 'FWeaponItemListRecord::GetFLG' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, ModelID) == 0x000036, "Member 'FWeaponItemListRecord::ModelID' has a wrong offset!");
static_assert(offsetof(FWeaponItemListRecord, Flags) == 0x000038, "Member 'FWeaponItemListRecord::Flags' has a wrong offset!");

// ScriptStruct xrd777.TestNishidaDataTable
// 0x0008 (0x0010 - 0x0008)
struct FTestNishidaDataTable final : public FTableRowBase
{
public:
	uint16                                        Level;                                             // 0x0008(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Attack;                                            // 0x000A(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Defence;                                           // 0x000C(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTestNishidaDataTable) == 0x000008, "Wrong alignment on FTestNishidaDataTable");
static_assert(sizeof(FTestNishidaDataTable) == 0x000010, "Wrong size on FTestNishidaDataTable");
static_assert(offsetof(FTestNishidaDataTable, Level) == 0x000008, "Member 'FTestNishidaDataTable::Level' has a wrong offset!");
static_assert(offsetof(FTestNishidaDataTable, Attack) == 0x00000A, "Member 'FTestNishidaDataTable::Attack' has a wrong offset!");
static_assert(offsetof(FTestNishidaDataTable, Defence) == 0x00000C, "Member 'FTestNishidaDataTable::Defence' has a wrong offset!");

// ScriptStruct xrd777.TheurgiaUITableRow
// 0x0058 (0x0060 - 0x0008)
struct FTheurgiaUITableRow final : public FTableRowBase
{
public:
	int32                                         InFrame;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutFrame;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param1;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param2;                                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param3;                                            // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param4;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewAddX;                                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewAddY;                                           // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectNewAddX;                                     // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectNewAddY;                                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillInfo_ItiretugotonoX;                          // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillInfo_ItiretugotonoY;                          // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OKmadenoFrame;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextkaraOKmadenoFrame;                             // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddAllAngle;                                       // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddStatusKeyHelpAngle;                             // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddNEWAngle;                                       // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangeSkillArrowAnimFrame;                         // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillGetAntenTime;                                 // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PassiveSkillPersonalityStartWaitTime;              // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GetSkillCardWaitFrame;                             // 0x0058(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkillGetMoveCursorWaitTime;                        // 0x005C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTheurgiaUITableRow) == 0x000008, "Wrong alignment on FTheurgiaUITableRow");
static_assert(sizeof(FTheurgiaUITableRow) == 0x000060, "Wrong size on FTheurgiaUITableRow");
static_assert(offsetof(FTheurgiaUITableRow, InFrame) == 0x000008, "Member 'FTheurgiaUITableRow::InFrame' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, OutFrame) == 0x00000C, "Member 'FTheurgiaUITableRow::OutFrame' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, Param1) == 0x000010, "Member 'FTheurgiaUITableRow::Param1' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, Param2) == 0x000014, "Member 'FTheurgiaUITableRow::Param2' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, Param3) == 0x000018, "Member 'FTheurgiaUITableRow::Param3' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, Param4) == 0x00001C, "Member 'FTheurgiaUITableRow::Param4' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, NewAddX) == 0x000020, "Member 'FTheurgiaUITableRow::NewAddX' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, NewAddY) == 0x000024, "Member 'FTheurgiaUITableRow::NewAddY' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, SelectNewAddX) == 0x000028, "Member 'FTheurgiaUITableRow::SelectNewAddX' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, SelectNewAddY) == 0x00002C, "Member 'FTheurgiaUITableRow::SelectNewAddY' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, SkillInfo_ItiretugotonoX) == 0x000030, "Member 'FTheurgiaUITableRow::SkillInfo_ItiretugotonoX' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, SkillInfo_ItiretugotonoY) == 0x000034, "Member 'FTheurgiaUITableRow::SkillInfo_ItiretugotonoY' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, OKmadenoFrame) == 0x000038, "Member 'FTheurgiaUITableRow::OKmadenoFrame' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, NextkaraOKmadenoFrame) == 0x00003C, "Member 'FTheurgiaUITableRow::NextkaraOKmadenoFrame' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, AddAllAngle) == 0x000040, "Member 'FTheurgiaUITableRow::AddAllAngle' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, AddStatusKeyHelpAngle) == 0x000044, "Member 'FTheurgiaUITableRow::AddStatusKeyHelpAngle' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, AddNEWAngle) == 0x000048, "Member 'FTheurgiaUITableRow::AddNEWAngle' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, ChangeSkillArrowAnimFrame) == 0x00004C, "Member 'FTheurgiaUITableRow::ChangeSkillArrowAnimFrame' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, SkillGetAntenTime) == 0x000050, "Member 'FTheurgiaUITableRow::SkillGetAntenTime' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, PassiveSkillPersonalityStartWaitTime) == 0x000054, "Member 'FTheurgiaUITableRow::PassiveSkillPersonalityStartWaitTime' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, GetSkillCardWaitFrame) == 0x000058, "Member 'FTheurgiaUITableRow::GetSkillCardWaitFrame' has a wrong offset!");
static_assert(offsetof(FTheurgiaUITableRow, SkillGetMoveCursorWaitTime) == 0x00005C, "Member 'FTheurgiaUITableRow::SkillGetMoveCursorWaitTime' has a wrong offset!");

// ScriptStruct xrd777.TimeChangeUITableRow
// 0x0128 (0x0130 - 0x0008)
struct FTimeChangeUITableRow final : public FTableRowBase
{
public:
	struct FVector                                AddNextBlueBandPos_1;                              // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddNextBlueBandAngle_1;                            // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextBlueBandAnglePoint_1;                       // 0x0018(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextTimePos_1;                                  // 0x0024(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextSecondHandPos_1;                            // 0x0030(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddNextSecondHandAngle_1;                          // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextBlueBandPos_2;                              // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddNextBlueBandAngle_2;                            // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextBlueBandAnglePoint_2;                       // 0x0050(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextTimePos_2;                                  // 0x005C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextSecondHandPos_2;                            // 0x0068(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddNextSecondHandAngle_2;                          // 0x0074(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextBlueBandPos_3;                              // 0x0078(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddNextBlueBandAngle_3;                            // 0x0084(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextBlueBandAnglePoint_3;                       // 0x0088(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextTimePos_3;                                  // 0x0094(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextSecondHandPos_3;                            // 0x00A0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddNextSecondHandAngle_3;                          // 0x00AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextBlueBandPos_4;                              // 0x00B0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddNextBlueBandAngle_4;                            // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextBlueBandAnglePoint_4;                       // 0x00C0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextTimePos_4;                                  // 0x00CC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextSecondHandPos_4;                            // 0x00D8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddNextSecondHandAngle_4;                          // 0x00E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextBlueBandPos_5;                              // 0x00E8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddNextBlueBandAngle_5;                            // 0x00F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextBlueBandAnglePoint_5;                       // 0x00F8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextTimePos_5;                                  // 0x0104(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AddNextSecondHandPos_5;                            // 0x0110(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddNextSecondHandAngle_5;                          // 0x011C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NowTimeLeftSlideFrame;                             // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NowTimeLeftSlideWaitFrame;                         // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowTimeLeftSlideSize;                              // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTimeChangeUITableRow) == 0x000008, "Wrong alignment on FTimeChangeUITableRow");
static_assert(sizeof(FTimeChangeUITableRow) == 0x000130, "Wrong size on FTimeChangeUITableRow");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandPos_1) == 0x000008, "Member 'FTimeChangeUITableRow::AddNextBlueBandPos_1' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandAngle_1) == 0x000014, "Member 'FTimeChangeUITableRow::AddNextBlueBandAngle_1' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandAnglePoint_1) == 0x000018, "Member 'FTimeChangeUITableRow::AddNextBlueBandAnglePoint_1' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextTimePos_1) == 0x000024, "Member 'FTimeChangeUITableRow::AddNextTimePos_1' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextSecondHandPos_1) == 0x000030, "Member 'FTimeChangeUITableRow::AddNextSecondHandPos_1' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextSecondHandAngle_1) == 0x00003C, "Member 'FTimeChangeUITableRow::AddNextSecondHandAngle_1' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandPos_2) == 0x000040, "Member 'FTimeChangeUITableRow::AddNextBlueBandPos_2' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandAngle_2) == 0x00004C, "Member 'FTimeChangeUITableRow::AddNextBlueBandAngle_2' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandAnglePoint_2) == 0x000050, "Member 'FTimeChangeUITableRow::AddNextBlueBandAnglePoint_2' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextTimePos_2) == 0x00005C, "Member 'FTimeChangeUITableRow::AddNextTimePos_2' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextSecondHandPos_2) == 0x000068, "Member 'FTimeChangeUITableRow::AddNextSecondHandPos_2' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextSecondHandAngle_2) == 0x000074, "Member 'FTimeChangeUITableRow::AddNextSecondHandAngle_2' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandPos_3) == 0x000078, "Member 'FTimeChangeUITableRow::AddNextBlueBandPos_3' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandAngle_3) == 0x000084, "Member 'FTimeChangeUITableRow::AddNextBlueBandAngle_3' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandAnglePoint_3) == 0x000088, "Member 'FTimeChangeUITableRow::AddNextBlueBandAnglePoint_3' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextTimePos_3) == 0x000094, "Member 'FTimeChangeUITableRow::AddNextTimePos_3' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextSecondHandPos_3) == 0x0000A0, "Member 'FTimeChangeUITableRow::AddNextSecondHandPos_3' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextSecondHandAngle_3) == 0x0000AC, "Member 'FTimeChangeUITableRow::AddNextSecondHandAngle_3' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandPos_4) == 0x0000B0, "Member 'FTimeChangeUITableRow::AddNextBlueBandPos_4' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandAngle_4) == 0x0000BC, "Member 'FTimeChangeUITableRow::AddNextBlueBandAngle_4' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandAnglePoint_4) == 0x0000C0, "Member 'FTimeChangeUITableRow::AddNextBlueBandAnglePoint_4' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextTimePos_4) == 0x0000CC, "Member 'FTimeChangeUITableRow::AddNextTimePos_4' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextSecondHandPos_4) == 0x0000D8, "Member 'FTimeChangeUITableRow::AddNextSecondHandPos_4' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextSecondHandAngle_4) == 0x0000E4, "Member 'FTimeChangeUITableRow::AddNextSecondHandAngle_4' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandPos_5) == 0x0000E8, "Member 'FTimeChangeUITableRow::AddNextBlueBandPos_5' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandAngle_5) == 0x0000F4, "Member 'FTimeChangeUITableRow::AddNextBlueBandAngle_5' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextBlueBandAnglePoint_5) == 0x0000F8, "Member 'FTimeChangeUITableRow::AddNextBlueBandAnglePoint_5' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextTimePos_5) == 0x000104, "Member 'FTimeChangeUITableRow::AddNextTimePos_5' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextSecondHandPos_5) == 0x000110, "Member 'FTimeChangeUITableRow::AddNextSecondHandPos_5' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, AddNextSecondHandAngle_5) == 0x00011C, "Member 'FTimeChangeUITableRow::AddNextSecondHandAngle_5' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, NowTimeLeftSlideFrame) == 0x000120, "Member 'FTimeChangeUITableRow::NowTimeLeftSlideFrame' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, NowTimeLeftSlideWaitFrame) == 0x000124, "Member 'FTimeChangeUITableRow::NowTimeLeftSlideWaitFrame' has a wrong offset!");
static_assert(offsetof(FTimeChangeUITableRow, NowTimeLeftSlideSize) == 0x000128, "Member 'FTimeChangeUITableRow::NowTimeLeftSlideSize' has a wrong offset!");

// ScriptStruct xrd777.TownMapParamTableRow
// 0x0038 (0x0040 - 0x0008)
struct FTownMapParamTableRow final : public FTableRowBase
{
public:
	struct FVector2D                              SchoolPos;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DormitoryPos;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PolonianmallPos;                                   // 0x0018(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PortilandPos;                                      // 0x0020(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              IwatdaiPos;                                        // 0x0028(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              NaganakiPos;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugPosDraw;                                     // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TenmetuFrame;                                      // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTownMapParamTableRow) == 0x000008, "Wrong alignment on FTownMapParamTableRow");
static_assert(sizeof(FTownMapParamTableRow) == 0x000040, "Wrong size on FTownMapParamTableRow");
static_assert(offsetof(FTownMapParamTableRow, SchoolPos) == 0x000008, "Member 'FTownMapParamTableRow::SchoolPos' has a wrong offset!");
static_assert(offsetof(FTownMapParamTableRow, DormitoryPos) == 0x000010, "Member 'FTownMapParamTableRow::DormitoryPos' has a wrong offset!");
static_assert(offsetof(FTownMapParamTableRow, PolonianmallPos) == 0x000018, "Member 'FTownMapParamTableRow::PolonianmallPos' has a wrong offset!");
static_assert(offsetof(FTownMapParamTableRow, PortilandPos) == 0x000020, "Member 'FTownMapParamTableRow::PortilandPos' has a wrong offset!");
static_assert(offsetof(FTownMapParamTableRow, IwatdaiPos) == 0x000028, "Member 'FTownMapParamTableRow::IwatdaiPos' has a wrong offset!");
static_assert(offsetof(FTownMapParamTableRow, NaganakiPos) == 0x000030, "Member 'FTownMapParamTableRow::NaganakiPos' has a wrong offset!");
static_assert(offsetof(FTownMapParamTableRow, bDebugPosDraw) == 0x000038, "Member 'FTownMapParamTableRow::bDebugPosDraw' has a wrong offset!");
static_assert(offsetof(FTownMapParamTableRow, TenmetuFrame) == 0x00003C, "Member 'FTownMapParamTableRow::TenmetuFrame' has a wrong offset!");

// ScriptStruct xrd777.VelvetRoomCardWork
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FVelvetRoomCardWork final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVelvetRoomCardWork) == 0x000008, "Wrong alignment on FVelvetRoomCardWork");
static_assert(sizeof(FVelvetRoomCardWork) == 0x000028, "Wrong size on FVelvetRoomCardWork");

// ScriptStruct xrd777.VelvetRoomCardItem
// 0x002C (0x002C - 0x0000)
struct alignas(0x04) FVelvetRoomCardItem final
{
public:
	uint8                                         Pad_0[0x2C];                                       // 0x0000(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVelvetRoomCardItem) == 0x000004, "Wrong alignment on FVelvetRoomCardItem");
static_assert(sizeof(FVelvetRoomCardItem) == 0x00002C, "Wrong size on FVelvetRoomCardItem");

// ScriptStruct xrd777.UIVoiceActionAnimParams
// 0x00C0 (0x00C0 - 0x0000)
struct FUIVoiceActionAnimParams final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsePos;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseColor;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseAngle;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseValue;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseMatrix;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              StartPos;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndPos;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 StartColor;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 EndColor;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAngle;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                StartMatrix;                                       // 0x0040(0x0040)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                EndMatrix;                                         // 0x0080(0x0040)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIVoiceActionAnimParams) == 0x000010, "Wrong alignment on FUIVoiceActionAnimParams");
static_assert(sizeof(FUIVoiceActionAnimParams) == 0x0000C0, "Wrong size on FUIVoiceActionAnimParams");
static_assert(offsetof(FUIVoiceActionAnimParams, StartFrame) == 0x000000, "Member 'FUIVoiceActionAnimParams::StartFrame' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, EndFrame) == 0x000004, "Member 'FUIVoiceActionAnimParams::EndFrame' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, bIsUsePos) == 0x000008, "Member 'FUIVoiceActionAnimParams::bIsUsePos' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, bIsUseColor) == 0x000009, "Member 'FUIVoiceActionAnimParams::bIsUseColor' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, bIsUseAngle) == 0x00000A, "Member 'FUIVoiceActionAnimParams::bIsUseAngle' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, bIsUseValue) == 0x00000B, "Member 'FUIVoiceActionAnimParams::bIsUseValue' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, bIsUseMatrix) == 0x00000C, "Member 'FUIVoiceActionAnimParams::bIsUseMatrix' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, StartPos) == 0x000010, "Member 'FUIVoiceActionAnimParams::StartPos' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, EndPos) == 0x000018, "Member 'FUIVoiceActionAnimParams::EndPos' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, StartColor) == 0x000020, "Member 'FUIVoiceActionAnimParams::StartColor' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, EndColor) == 0x000024, "Member 'FUIVoiceActionAnimParams::EndColor' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, StartAngle) == 0x000028, "Member 'FUIVoiceActionAnimParams::StartAngle' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, EndAngle) == 0x00002C, "Member 'FUIVoiceActionAnimParams::EndAngle' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, StartValue) == 0x000030, "Member 'FUIVoiceActionAnimParams::StartValue' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, EndValue) == 0x000034, "Member 'FUIVoiceActionAnimParams::EndValue' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, StartMatrix) == 0x000040, "Member 'FUIVoiceActionAnimParams::StartMatrix' has a wrong offset!");
static_assert(offsetof(FUIVoiceActionAnimParams, EndMatrix) == 0x000080, "Member 'FUIVoiceActionAnimParams::EndMatrix' has a wrong offset!");

// ScriptStruct xrd777.UIVoiceAnswerAnimParams
// 0x00C0 (0x00C0 - 0x0000)
struct FUIVoiceAnswerAnimParams final
{
public:
	int32                                         StartFrame;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsePos;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseColor;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseAngle;                                       // 0x000A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseValue;                                       // 0x000B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseMatrix;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              StartPos;                                          // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndPos;                                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 StartColor;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 EndColor;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartAngle;                                        // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndAngle;                                          // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                StartMatrix;                                       // 0x0040(0x0040)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FMatrix                                EndMatrix;                                         // 0x0080(0x0040)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUIVoiceAnswerAnimParams) == 0x000010, "Wrong alignment on FUIVoiceAnswerAnimParams");
static_assert(sizeof(FUIVoiceAnswerAnimParams) == 0x0000C0, "Wrong size on FUIVoiceAnswerAnimParams");
static_assert(offsetof(FUIVoiceAnswerAnimParams, StartFrame) == 0x000000, "Member 'FUIVoiceAnswerAnimParams::StartFrame' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, EndFrame) == 0x000004, "Member 'FUIVoiceAnswerAnimParams::EndFrame' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, bIsUsePos) == 0x000008, "Member 'FUIVoiceAnswerAnimParams::bIsUsePos' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, bIsUseColor) == 0x000009, "Member 'FUIVoiceAnswerAnimParams::bIsUseColor' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, bIsUseAngle) == 0x00000A, "Member 'FUIVoiceAnswerAnimParams::bIsUseAngle' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, bIsUseValue) == 0x00000B, "Member 'FUIVoiceAnswerAnimParams::bIsUseValue' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, bIsUseMatrix) == 0x00000C, "Member 'FUIVoiceAnswerAnimParams::bIsUseMatrix' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, StartPos) == 0x000010, "Member 'FUIVoiceAnswerAnimParams::StartPos' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, EndPos) == 0x000018, "Member 'FUIVoiceAnswerAnimParams::EndPos' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, StartColor) == 0x000020, "Member 'FUIVoiceAnswerAnimParams::StartColor' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, EndColor) == 0x000024, "Member 'FUIVoiceAnswerAnimParams::EndColor' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, StartAngle) == 0x000028, "Member 'FUIVoiceAnswerAnimParams::StartAngle' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, EndAngle) == 0x00002C, "Member 'FUIVoiceAnswerAnimParams::EndAngle' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, StartValue) == 0x000030, "Member 'FUIVoiceAnswerAnimParams::StartValue' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, EndValue) == 0x000034, "Member 'FUIVoiceAnswerAnimParams::EndValue' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, StartMatrix) == 0x000040, "Member 'FUIVoiceAnswerAnimParams::StartMatrix' has a wrong offset!");
static_assert(offsetof(FUIVoiceAnswerAnimParams, EndMatrix) == 0x000080, "Member 'FUIVoiceAnswerAnimParams::EndMatrix' has a wrong offset!");

// ScriptStruct xrd777.WordTranslationTable
// 0x0020 (0x0028 - 0x0008)
struct FWordTranslationTable final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ext;                                               // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LangBits;                                          // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index;                                             // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWordTranslationTable) == 0x000008, "Wrong alignment on FWordTranslationTable");
static_assert(sizeof(FWordTranslationTable) == 0x000028, "Wrong size on FWordTranslationTable");
static_assert(offsetof(FWordTranslationTable, Name) == 0x000008, "Member 'FWordTranslationTable::Name' has a wrong offset!");
static_assert(offsetof(FWordTranslationTable, Ext) == 0x000018, "Member 'FWordTranslationTable::Ext' has a wrong offset!");
static_assert(offsetof(FWordTranslationTable, LangBits) == 0x00001C, "Member 'FWordTranslationTable::LangBits' has a wrong offset!");
static_assert(offsetof(FWordTranslationTable, Index) == 0x000020, "Member 'FWordTranslationTable::Index' has a wrong offset!");

// ScriptStruct xrd777.SaveGameHeadder
// 0x00D0 (0x00D0 - 0x0000)
struct FSaveGameHeadder final
{
public:
	class FString                                 GameName;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaveSlotName;                                      // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        UserIndex;                                         // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          FirstName[0x40];                                   // 0x0024(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          LastName[0x40];                                    // 0x0064(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Month;                                             // 0x00A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldWeek                                      Week;                                              // 0x00AC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldTimeZone                                  TimeZone;                                          // 0x00AD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FldMajorID;                                        // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FldMinorID;                                        // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FldPartsID;                                        // 0x00B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PlayerLevel;                                       // 0x00BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        Difficulty;                                        // 0x00C0(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        PlayTime;                                          // 0x00C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldMoonAge                                   Age;                                               // 0x00C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClearStatus;                                       // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveGameHeadder) == 0x000008, "Wrong alignment on FSaveGameHeadder");
static_assert(sizeof(FSaveGameHeadder) == 0x0000D0, "Wrong size on FSaveGameHeadder");
static_assert(offsetof(FSaveGameHeadder, GameName) == 0x000000, "Member 'FSaveGameHeadder::GameName' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, SaveSlotName) == 0x000010, "Member 'FSaveGameHeadder::SaveSlotName' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, UserIndex) == 0x000020, "Member 'FSaveGameHeadder::UserIndex' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, FirstName) == 0x000024, "Member 'FSaveGameHeadder::FirstName' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, LastName) == 0x000064, "Member 'FSaveGameHeadder::LastName' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, Month) == 0x0000A4, "Member 'FSaveGameHeadder::Month' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, Day) == 0x0000A8, "Member 'FSaveGameHeadder::Day' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, Week) == 0x0000AC, "Member 'FSaveGameHeadder::Week' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, TimeZone) == 0x0000AD, "Member 'FSaveGameHeadder::TimeZone' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, FldMajorID) == 0x0000B0, "Member 'FSaveGameHeadder::FldMajorID' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, FldMinorID) == 0x0000B4, "Member 'FSaveGameHeadder::FldMinorID' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, FldPartsID) == 0x0000B8, "Member 'FSaveGameHeadder::FldPartsID' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, PlayerLevel) == 0x0000BC, "Member 'FSaveGameHeadder::PlayerLevel' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, Difficulty) == 0x0000C0, "Member 'FSaveGameHeadder::Difficulty' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, PlayTime) == 0x0000C4, "Member 'FSaveGameHeadder::PlayTime' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, Age) == 0x0000C8, "Member 'FSaveGameHeadder::Age' has a wrong offset!");
static_assert(offsetof(FSaveGameHeadder, ClearStatus) == 0x0000CC, "Member 'FSaveGameHeadder::ClearStatus' has a wrong offset!");

}

