#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlPhaseVictory

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "FBtlResultSequence_structs.hpp"
#include "BP_BtlPhaseBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlPhaseVictory.BP_BtlPhaseVictory_C
// 0x0130 (0x03B8 - 0x0288)
class ABP_BtlPhaseVictory_C final : public ABP_BtlPhaseBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          ReadyForExit;                                      // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ElapsedTime;                                       // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequencePlayer*                   FinaleCamera;                                      // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlCameraManagerComponent_C*        CameraManager;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ALevelSequenceActor*                    LS_Actor;                                          // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlEventAssistant_C*                EventAssistant;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlCoreComponent*                      BtlCore;                                           // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UBP_BtlEnvironment_C*                   BtlEnvironment;                                    // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UBP_BtlEvent_C*                         BtlEvent;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMap<int32, class ABtlActor*>                 SubLocationList;                                   // 0x02D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 DebugList;                                         // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          LS;                                                // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDataTable*                             SequenceTable;                                     // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFBtlResultSequence                    Table;                                             // 0x0340(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class ULevelSequence*                         SequenceToPlay;                                    // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ULevelSequence*                         SequenceMain;                                      // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ALevelSequenceActor*                    LS_Actor_Master;                                   // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRequestedBGMFadeout;                             // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsResultStart;                                     // 0x0381(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_382[0x6];                                      // 0x0382(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             On_Request_Victory_Result;                         // 0x0388(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnRequestSkipResult;                               // 0x0398(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnRequestReleaseResource;                          // 0x03A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void On_Request_Victory_Result__DelegateSignature();
	void OnRequestSkipResult__DelegateSignature();
	void OnRequestReleaseResource__DelegateSignature();
	void ExecuteUbergraph_BP_BtlPhaseVictory(int32 EntryPoint);
	void StartPhaseInBP();
	void Request_Result();
	void Init();
	void On_Progress_Next();
	void Has_Finished_Battle_End_Event();
	void On_Fadeout_BGM();
	void ReceiveDestroyed();
	void Has_Finished_Finale_Camera();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnLoaded_D2CA3309431FABD600D3B0B1F69A7505(class UObject* Loaded);
	void OnLoaded_3CB60A6146F2A8322AC92DA1BE9C51E4(class UObject* Loaded);
	void UserConstructionScript();
	class ABtlPhase* GetNextPhaseInBP();
	void Setup();
	void AllocateMembers();
	void Setup_All_Members_Visibility();
	void HideAllEnemies();
	void LotStandIndex(class ABtlActor* Chara, int32 LocationNum);
	void HideOtherPlayers();

	bool CheckProgressNextPhaseInBP() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlPhaseVictory_C">();
	}
	static class ABP_BtlPhaseVictory_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlPhaseVictory_C>();
	}
};
static_assert(alignof(ABP_BtlPhaseVictory_C) == 0x000008, "Wrong alignment on ABP_BtlPhaseVictory_C");
static_assert(sizeof(ABP_BtlPhaseVictory_C) == 0x0003B8, "Wrong size on ABP_BtlPhaseVictory_C");
static_assert(offsetof(ABP_BtlPhaseVictory_C, UberGraphFrame) == 0x000288, "Member 'ABP_BtlPhaseVictory_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, ReadyForExit) == 0x000290, "Member 'ABP_BtlPhaseVictory_C::ReadyForExit' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, ElapsedTime) == 0x000294, "Member 'ABP_BtlPhaseVictory_C::ElapsedTime' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, FinaleCamera) == 0x000298, "Member 'ABP_BtlPhaseVictory_C::FinaleCamera' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, CameraManager) == 0x0002A0, "Member 'ABP_BtlPhaseVictory_C::CameraManager' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, LS_Actor) == 0x0002A8, "Member 'ABP_BtlPhaseVictory_C::LS_Actor' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, EventAssistant) == 0x0002B0, "Member 'ABP_BtlPhaseVictory_C::EventAssistant' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, BtlCore) == 0x0002B8, "Member 'ABP_BtlPhaseVictory_C::BtlCore' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, BtlEnvironment) == 0x0002C0, "Member 'ABP_BtlPhaseVictory_C::BtlEnvironment' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, BtlEvent) == 0x0002C8, "Member 'ABP_BtlPhaseVictory_C::BtlEvent' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, SubLocationList) == 0x0002D0, "Member 'ABP_BtlPhaseVictory_C::SubLocationList' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, DebugList) == 0x000320, "Member 'ABP_BtlPhaseVictory_C::DebugList' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, LS) == 0x000330, "Member 'ABP_BtlPhaseVictory_C::LS' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, SequenceTable) == 0x000338, "Member 'ABP_BtlPhaseVictory_C::SequenceTable' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, Table) == 0x000340, "Member 'ABP_BtlPhaseVictory_C::Table' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, SequenceToPlay) == 0x000368, "Member 'ABP_BtlPhaseVictory_C::SequenceToPlay' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, SequenceMain) == 0x000370, "Member 'ABP_BtlPhaseVictory_C::SequenceMain' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, LS_Actor_Master) == 0x000378, "Member 'ABP_BtlPhaseVictory_C::LS_Actor_Master' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, IsRequestedBGMFadeout) == 0x000380, "Member 'ABP_BtlPhaseVictory_C::IsRequestedBGMFadeout' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, IsResultStart) == 0x000381, "Member 'ABP_BtlPhaseVictory_C::IsResultStart' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, On_Request_Victory_Result) == 0x000388, "Member 'ABP_BtlPhaseVictory_C::On_Request_Victory_Result' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, OnRequestSkipResult) == 0x000398, "Member 'ABP_BtlPhaseVictory_C::OnRequestSkipResult' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseVictory_C, OnRequestReleaseResource) == 0x0003A8, "Member 'ABP_BtlPhaseVictory_C::OnRequestReleaseResource' has a wrong offset!");

}

