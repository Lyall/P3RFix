#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CriWareAdxLipSync_structs.hpp"
#include "SoundManager_structs.hpp"


namespace SDK::Params
{

// Function SoundManager.AsyncCueSheetManager.GetAtomCueSheet
// 0x0008 (0x0008 - 0x0000)
struct AsyncCueSheetManager_GetAtomCueSheet final
{
public:
	class USoundAtomCueSheet*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncCueSheetManager_GetAtomCueSheet) == 0x000008, "Wrong alignment on AsyncCueSheetManager_GetAtomCueSheet");
static_assert(sizeof(AsyncCueSheetManager_GetAtomCueSheet) == 0x000008, "Wrong size on AsyncCueSheetManager_GetAtomCueSheet");
static_assert(offsetof(AsyncCueSheetManager_GetAtomCueSheet, ReturnValue) == 0x000000, "Member 'AsyncCueSheetManager_GetAtomCueSheet::ReturnValue' has a wrong offset!");

// Function SoundManager.AsyncCueSheetManager.LoadAsync
// 0x0018 (0x0018 - 0x0000)
struct AsyncCueSheetManager_LoadAsync final
{
public:
	struct FSoftObjectPath                        PathForCueSheet;                                   // 0x0000(0x0018)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncCueSheetManager_LoadAsync) == 0x000008, "Wrong alignment on AsyncCueSheetManager_LoadAsync");
static_assert(sizeof(AsyncCueSheetManager_LoadAsync) == 0x000018, "Wrong size on AsyncCueSheetManager_LoadAsync");
static_assert(offsetof(AsyncCueSheetManager_LoadAsync, PathForCueSheet) == 0x000000, "Member 'AsyncCueSheetManager_LoadAsync::PathForCueSheet' has a wrong offset!");

// Function SoundManager.LiveLipSync.attachSoundManager
// 0x000C (0x000C - 0x0000)
struct LiveLipSync_AttachSoundManager final
{
public:
	int32                                         MajNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinNum;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LiveLipSync_AttachSoundManager) == 0x000004, "Wrong alignment on LiveLipSync_AttachSoundManager");
static_assert(sizeof(LiveLipSync_AttachSoundManager) == 0x00000C, "Wrong size on LiveLipSync_AttachSoundManager");
static_assert(offsetof(LiveLipSync_AttachSoundManager, MajNum) == 0x000000, "Member 'LiveLipSync_AttachSoundManager::MajNum' has a wrong offset!");
static_assert(offsetof(LiveLipSync_AttachSoundManager, MinNum) == 0x000004, "Member 'LiveLipSync_AttachSoundManager::MinNum' has a wrong offset!");
static_assert(offsetof(LiveLipSync_AttachSoundManager, ReturnValue) == 0x000008, "Member 'LiveLipSync_AttachSoundManager::ReturnValue' has a wrong offset!");

// Function SoundManager.LiveLipSync.detachSoundManager
// 0x000C (0x000C - 0x0000)
struct LiveLipSync_DetachSoundManager final
{
public:
	int32                                         MajNum;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinNum;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LiveLipSync_DetachSoundManager) == 0x000004, "Wrong alignment on LiveLipSync_DetachSoundManager");
static_assert(sizeof(LiveLipSync_DetachSoundManager) == 0x00000C, "Wrong size on LiveLipSync_DetachSoundManager");
static_assert(offsetof(LiveLipSync_DetachSoundManager, MajNum) == 0x000000, "Member 'LiveLipSync_DetachSoundManager::MajNum' has a wrong offset!");
static_assert(offsetof(LiveLipSync_DetachSoundManager, MinNum) == 0x000004, "Member 'LiveLipSync_DetachSoundManager::MinNum' has a wrong offset!");
static_assert(offsetof(LiveLipSync_DetachSoundManager, ReturnValue) == 0x000008, "Member 'LiveLipSync_DetachSoundManager::ReturnValue' has a wrong offset!");

// Function SoundManager.LiveLipSync.getLipsyncLiveInfo
// 0x0010 (0x0010 - 0x0000)
struct LiveLipSync_GetLipsyncLiveInfo final
{
public:
	struct FCriLipsMouthInfo                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiveLipSync_GetLipsyncLiveInfo) == 0x000004, "Wrong alignment on LiveLipSync_GetLipsyncLiveInfo");
static_assert(sizeof(LiveLipSync_GetLipsyncLiveInfo) == 0x000010, "Wrong size on LiveLipSync_GetLipsyncLiveInfo");
static_assert(offsetof(LiveLipSync_GetLipsyncLiveInfo, ReturnValue) == 0x000000, "Member 'LiveLipSync_GetLipsyncLiveInfo::ReturnValue' has a wrong offset!");

// Function SoundManager.LiveLipSync.getLipsyncLiveJapanese
// 0x0014 (0x0014 - 0x0000)
struct LiveLipSync_GetLipsyncLiveJapanese final
{
public:
	struct FCriLipsMorphTargetBlendAmountAsJapanese ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LiveLipSync_GetLipsyncLiveJapanese) == 0x000004, "Wrong alignment on LiveLipSync_GetLipsyncLiveJapanese");
static_assert(sizeof(LiveLipSync_GetLipsyncLiveJapanese) == 0x000014, "Wrong size on LiveLipSync_GetLipsyncLiveJapanese");
static_assert(offsetof(LiveLipSync_GetLipsyncLiveJapanese, ReturnValue) == 0x000000, "Member 'LiveLipSync_GetLipsyncLiveJapanese::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.getNumCuePlayingCountByName
// 0x0018 (0x0018 - 0x0000)
struct PlayAdxControl_GetNumCuePlayingCountByName final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_GetNumCuePlayingCountByName) == 0x000008, "Wrong alignment on PlayAdxControl_GetNumCuePlayingCountByName");
static_assert(sizeof(PlayAdxControl_GetNumCuePlayingCountByName) == 0x000018, "Wrong size on PlayAdxControl_GetNumCuePlayingCountByName");
static_assert(offsetof(PlayAdxControl_GetNumCuePlayingCountByName, Name_0) == 0x000000, "Member 'PlayAdxControl_GetNumCuePlayingCountByName::Name_0' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_GetNumCuePlayingCountByName, ReturnValue) == 0x000010, "Member 'PlayAdxControl_GetNumCuePlayingCountByName::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.attachLipsyncLive
// 0x000C (0x000C - 0x0000)
struct PlayAdxControl_AttachLipsyncLive final
{
public:
	int32                                         MajorNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorNum;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_AttachLipsyncLive) == 0x000004, "Wrong alignment on PlayAdxControl_AttachLipsyncLive");
static_assert(sizeof(PlayAdxControl_AttachLipsyncLive) == 0x00000C, "Wrong size on PlayAdxControl_AttachLipsyncLive");
static_assert(offsetof(PlayAdxControl_AttachLipsyncLive, MajorNum) == 0x000000, "Member 'PlayAdxControl_AttachLipsyncLive::MajorNum' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_AttachLipsyncLive, MinorNum) == 0x000004, "Member 'PlayAdxControl_AttachLipsyncLive::MinorNum' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_AttachLipsyncLive, ReturnValue) == 0x000008, "Member 'PlayAdxControl_AttachLipsyncLive::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.checkPauseSound
// 0x000C (0x000C - 0x0000)
struct PlayAdxControl_CheckPauseSound final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_CheckPauseSound) == 0x000004, "Wrong alignment on PlayAdxControl_CheckPauseSound");
static_assert(sizeof(PlayAdxControl_CheckPauseSound) == 0x00000C, "Wrong size on PlayAdxControl_CheckPauseSound");
static_assert(offsetof(PlayAdxControl_CheckPauseSound, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_CheckPauseSound::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_CheckPauseSound, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_CheckPauseSound::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_CheckPauseSound, ReturnValue) == 0x000008, "Member 'PlayAdxControl_CheckPauseSound::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.checkPlaying
// 0x000C (0x000C - 0x0000)
struct PlayAdxControl_CheckPlaying final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_CheckPlaying) == 0x000004, "Wrong alignment on PlayAdxControl_CheckPlaying");
static_assert(sizeof(PlayAdxControl_CheckPlaying) == 0x00000C, "Wrong size on PlayAdxControl_CheckPlaying");
static_assert(offsetof(PlayAdxControl_CheckPlaying, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_CheckPlaying::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_CheckPlaying, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_CheckPlaying::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_CheckPlaying, ReturnValue) == 0x000008, "Member 'PlayAdxControl_CheckPlaying::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.checkReadAcb
// 0x0018 (0x0018 - 0x0000)
struct PlayAdxControl_CheckReadAcb final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_CheckReadAcb) == 0x000008, "Wrong alignment on PlayAdxControl_CheckReadAcb");
static_assert(sizeof(PlayAdxControl_CheckReadAcb) == 0x000018, "Wrong size on PlayAdxControl_CheckReadAcb");
static_assert(offsetof(PlayAdxControl_CheckReadAcb, Filename) == 0x000000, "Member 'PlayAdxControl_CheckReadAcb::Filename' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_CheckReadAcb, ReturnValue) == 0x000010, "Member 'PlayAdxControl_CheckReadAcb::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.checkReadEnd
// 0x0008 (0x0008 - 0x0000)
struct PlayAdxControl_CheckReadEnd final
{
public:
	int32                                         bankID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_CheckReadEnd) == 0x000004, "Wrong alignment on PlayAdxControl_CheckReadEnd");
static_assert(sizeof(PlayAdxControl_CheckReadEnd) == 0x000008, "Wrong size on PlayAdxControl_CheckReadEnd");
static_assert(offsetof(PlayAdxControl_CheckReadEnd, bankID) == 0x000000, "Member 'PlayAdxControl_CheckReadEnd::bankID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_CheckReadEnd, ReturnValue) == 0x000004, "Member 'PlayAdxControl_CheckReadEnd::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.createPlayerBank
// 0x0010 (0x0010 - 0x0000)
struct PlayAdxControl_CreatePlayerBank final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMulti;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_CreatePlayerBank) == 0x000004, "Wrong alignment on PlayAdxControl_CreatePlayerBank");
static_assert(sizeof(PlayAdxControl_CreatePlayerBank) == 0x000010, "Wrong size on PlayAdxControl_CreatePlayerBank");
static_assert(offsetof(PlayAdxControl_CreatePlayerBank, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_CreatePlayerBank::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_CreatePlayerBank, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_CreatePlayerBank::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_CreatePlayerBank, IsMulti) == 0x000008, "Member 'PlayAdxControl_CreatePlayerBank::IsMulti' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_CreatePlayerBank, ReturnValue) == 0x00000C, "Member 'PlayAdxControl_CreatePlayerBank::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.detachLipsyncLive
// 0x000C (0x000C - 0x0000)
struct PlayAdxControl_DetachLipsyncLive final
{
public:
	int32                                         MajorNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorNum;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_DetachLipsyncLive) == 0x000004, "Wrong alignment on PlayAdxControl_DetachLipsyncLive");
static_assert(sizeof(PlayAdxControl_DetachLipsyncLive) == 0x00000C, "Wrong size on PlayAdxControl_DetachLipsyncLive");
static_assert(offsetof(PlayAdxControl_DetachLipsyncLive, MajorNum) == 0x000000, "Member 'PlayAdxControl_DetachLipsyncLive::MajorNum' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_DetachLipsyncLive, MinorNum) == 0x000004, "Member 'PlayAdxControl_DetachLipsyncLive::MinorNum' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_DetachLipsyncLive, ReturnValue) == 0x000008, "Member 'PlayAdxControl_DetachLipsyncLive::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.fadeInBGMCategorySoundmanager
// 0x000C (0x000C - 0x0000)
struct PlayAdxControl_FadeInBGMCategorySoundmanager final
{
public:
	int32                                         FadeInTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInVolume;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_FadeInBGMCategorySoundmanager) == 0x000004, "Wrong alignment on PlayAdxControl_FadeInBGMCategorySoundmanager");
static_assert(sizeof(PlayAdxControl_FadeInBGMCategorySoundmanager) == 0x00000C, "Wrong size on PlayAdxControl_FadeInBGMCategorySoundmanager");
static_assert(offsetof(PlayAdxControl_FadeInBGMCategorySoundmanager, FadeInTime) == 0x000000, "Member 'PlayAdxControl_FadeInBGMCategorySoundmanager::FadeInTime' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_FadeInBGMCategorySoundmanager, FadeInVolume) == 0x000004, "Member 'PlayAdxControl_FadeInBGMCategorySoundmanager::FadeInVolume' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_FadeInBGMCategorySoundmanager, ReturnValue) == 0x000008, "Member 'PlayAdxControl_FadeInBGMCategorySoundmanager::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.fadeInSndMng
// 0x000C (0x000C - 0x0000)
struct PlayAdxControl_FadeInSndMng final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FadeInTime;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_FadeInSndMng) == 0x000004, "Wrong alignment on PlayAdxControl_FadeInSndMng");
static_assert(sizeof(PlayAdxControl_FadeInSndMng) == 0x00000C, "Wrong size on PlayAdxControl_FadeInSndMng");
static_assert(offsetof(PlayAdxControl_FadeInSndMng, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_FadeInSndMng::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_FadeInSndMng, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_FadeInSndMng::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_FadeInSndMng, FadeInTime) == 0x000008, "Member 'PlayAdxControl_FadeInSndMng::FadeInTime' has a wrong offset!");

// Function SoundManager.PlayAdxControl.fadeOutBGMCategorySoundManager
// 0x000C (0x000C - 0x0000)
struct PlayAdxControl_FadeOutBGMCategorySoundManager final
{
public:
	int32                                         FadeOutTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutVolume;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_FadeOutBGMCategorySoundManager) == 0x000004, "Wrong alignment on PlayAdxControl_FadeOutBGMCategorySoundManager");
static_assert(sizeof(PlayAdxControl_FadeOutBGMCategorySoundManager) == 0x00000C, "Wrong size on PlayAdxControl_FadeOutBGMCategorySoundManager");
static_assert(offsetof(PlayAdxControl_FadeOutBGMCategorySoundManager, FadeOutTime) == 0x000000, "Member 'PlayAdxControl_FadeOutBGMCategorySoundManager::FadeOutTime' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_FadeOutBGMCategorySoundManager, FadeOutVolume) == 0x000004, "Member 'PlayAdxControl_FadeOutBGMCategorySoundManager::FadeOutVolume' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_FadeOutBGMCategorySoundManager, ReturnValue) == 0x000008, "Member 'PlayAdxControl_FadeOutBGMCategorySoundManager::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.fadeOutSndMng
// 0x000C (0x000C - 0x0000)
struct PlayAdxControl_FadeOutSndMng final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FadeOutTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_FadeOutSndMng) == 0x000004, "Wrong alignment on PlayAdxControl_FadeOutSndMng");
static_assert(sizeof(PlayAdxControl_FadeOutSndMng) == 0x00000C, "Wrong size on PlayAdxControl_FadeOutSndMng");
static_assert(offsetof(PlayAdxControl_FadeOutSndMng, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_FadeOutSndMng::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_FadeOutSndMng, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_FadeOutSndMng::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_FadeOutSndMng, FadeOutTime) == 0x000008, "Member 'PlayAdxControl_FadeOutSndMng::FadeOutTime' has a wrong offset!");

// Function SoundManager.PlayAdxControl.getIntegratedLoudness
// 0x0004 (0x0004 - 0x0000)
struct PlayAdxControl_GetIntegratedLoudness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_GetIntegratedLoudness) == 0x000004, "Wrong alignment on PlayAdxControl_GetIntegratedLoudness");
static_assert(sizeof(PlayAdxControl_GetIntegratedLoudness) == 0x000004, "Wrong size on PlayAdxControl_GetIntegratedLoudness");
static_assert(offsetof(PlayAdxControl_GetIntegratedLoudness, ReturnValue) == 0x000000, "Member 'PlayAdxControl_GetIntegratedLoudness::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.getLengthPlayerBank
// 0x0018 (0x0018 - 0x0000)
struct PlayAdxControl_GetLengthPlayerBank final
{
public:
	int32                                         MajorNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorNum;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_GetLengthPlayerBank) == 0x000008, "Wrong alignment on PlayAdxControl_GetLengthPlayerBank");
static_assert(sizeof(PlayAdxControl_GetLengthPlayerBank) == 0x000018, "Wrong size on PlayAdxControl_GetLengthPlayerBank");
static_assert(offsetof(PlayAdxControl_GetLengthPlayerBank, MajorNum) == 0x000000, "Member 'PlayAdxControl_GetLengthPlayerBank::MajorNum' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_GetLengthPlayerBank, MinorNum) == 0x000004, "Member 'PlayAdxControl_GetLengthPlayerBank::MinorNum' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_GetLengthPlayerBank, CueId) == 0x000008, "Member 'PlayAdxControl_GetLengthPlayerBank::CueId' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_GetLengthPlayerBank, ReturnValue) == 0x000010, "Member 'PlayAdxControl_GetLengthPlayerBank::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.getLengthSoundBank
// 0x0010 (0x0010 - 0x0000)
struct PlayAdxControl_GetLengthSoundBank final
{
public:
	int32                                         bankID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_GetLengthSoundBank) == 0x000008, "Wrong alignment on PlayAdxControl_GetLengthSoundBank");
static_assert(sizeof(PlayAdxControl_GetLengthSoundBank) == 0x000010, "Wrong size on PlayAdxControl_GetLengthSoundBank");
static_assert(offsetof(PlayAdxControl_GetLengthSoundBank, bankID) == 0x000000, "Member 'PlayAdxControl_GetLengthSoundBank::bankID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_GetLengthSoundBank, CueId) == 0x000004, "Member 'PlayAdxControl_GetLengthSoundBank::CueId' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_GetLengthSoundBank, ReturnValue) == 0x000008, "Member 'PlayAdxControl_GetLengthSoundBank::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.getLipsyncLiveInfo
// 0x0018 (0x0018 - 0x0000)
struct PlayAdxControl_GetLipsyncLiveInfo final
{
public:
	int32                                         MajorNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorNum;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCriLipsMouthInfo                      ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_GetLipsyncLiveInfo) == 0x000004, "Wrong alignment on PlayAdxControl_GetLipsyncLiveInfo");
static_assert(sizeof(PlayAdxControl_GetLipsyncLiveInfo) == 0x000018, "Wrong size on PlayAdxControl_GetLipsyncLiveInfo");
static_assert(offsetof(PlayAdxControl_GetLipsyncLiveInfo, MajorNum) == 0x000000, "Member 'PlayAdxControl_GetLipsyncLiveInfo::MajorNum' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_GetLipsyncLiveInfo, MinorNum) == 0x000004, "Member 'PlayAdxControl_GetLipsyncLiveInfo::MinorNum' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_GetLipsyncLiveInfo, ReturnValue) == 0x000008, "Member 'PlayAdxControl_GetLipsyncLiveInfo::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.getLipsyncLiveJapanese
// 0x001C (0x001C - 0x0000)
struct PlayAdxControl_GetLipsyncLiveJapanese final
{
public:
	int32                                         MajorNum;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorNum;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCriLipsMorphTargetBlendAmountAsJapanese ReturnValue;                                       // 0x0008(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_GetLipsyncLiveJapanese) == 0x000004, "Wrong alignment on PlayAdxControl_GetLipsyncLiveJapanese");
static_assert(sizeof(PlayAdxControl_GetLipsyncLiveJapanese) == 0x00001C, "Wrong size on PlayAdxControl_GetLipsyncLiveJapanese");
static_assert(offsetof(PlayAdxControl_GetLipsyncLiveJapanese, MajorNum) == 0x000000, "Member 'PlayAdxControl_GetLipsyncLiveJapanese::MajorNum' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_GetLipsyncLiveJapanese, MinorNum) == 0x000004, "Member 'PlayAdxControl_GetLipsyncLiveJapanese::MinorNum' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_GetLipsyncLiveJapanese, ReturnValue) == 0x000008, "Member 'PlayAdxControl_GetLipsyncLiveJapanese::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.getMomentaryLoudness
// 0x0004 (0x0004 - 0x0000)
struct PlayAdxControl_GetMomentaryLoudness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_GetMomentaryLoudness) == 0x000004, "Wrong alignment on PlayAdxControl_GetMomentaryLoudness");
static_assert(sizeof(PlayAdxControl_GetMomentaryLoudness) == 0x000004, "Wrong size on PlayAdxControl_GetMomentaryLoudness");
static_assert(offsetof(PlayAdxControl_GetMomentaryLoudness, ReturnValue) == 0x000000, "Member 'PlayAdxControl_GetMomentaryLoudness::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.getShortLoudness
// 0x0004 (0x0004 - 0x0000)
struct PlayAdxControl_GetShortLoudness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_GetShortLoudness) == 0x000004, "Wrong alignment on PlayAdxControl_GetShortLoudness");
static_assert(sizeof(PlayAdxControl_GetShortLoudness) == 0x000004, "Wrong size on PlayAdxControl_GetShortLoudness");
static_assert(offsetof(PlayAdxControl_GetShortLoudness, ReturnValue) == 0x000000, "Member 'PlayAdxControl_GetShortLoudness::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.GetTime
// 0x000C (0x000C - 0x0000)
struct PlayAdxControl_GetTime final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_GetTime) == 0x000004, "Wrong alignment on PlayAdxControl_GetTime");
static_assert(sizeof(PlayAdxControl_GetTime) == 0x00000C, "Wrong size on PlayAdxControl_GetTime");
static_assert(offsetof(PlayAdxControl_GetTime, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_GetTime::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_GetTime, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_GetTime::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_GetTime, ReturnValue) == 0x000008, "Member 'PlayAdxControl_GetTime::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.IsLoop
// 0x000C (0x000C - 0x0000)
struct PlayAdxControl_IsLoop final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_IsLoop) == 0x000004, "Wrong alignment on PlayAdxControl_IsLoop");
static_assert(sizeof(PlayAdxControl_IsLoop) == 0x00000C, "Wrong size on PlayAdxControl_IsLoop");
static_assert(offsetof(PlayAdxControl_IsLoop, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_IsLoop::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_IsLoop, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_IsLoop::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_IsLoop, ReturnValue) == 0x000008, "Member 'PlayAdxControl_IsLoop::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.pauseSound
// 0x000C (0x000C - 0x0000)
struct PlayAdxControl_PauseSound final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Flag;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_PauseSound) == 0x000004, "Wrong alignment on PlayAdxControl_PauseSound");
static_assert(sizeof(PlayAdxControl_PauseSound) == 0x00000C, "Wrong size on PlayAdxControl_PauseSound");
static_assert(offsetof(PlayAdxControl_PauseSound, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_PauseSound::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_PauseSound, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_PauseSound::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_PauseSound, Flag) == 0x000008, "Member 'PlayAdxControl_PauseSound::Flag' has a wrong offset!");

// Function SoundManager.PlayAdxControl.releasePlayerBank
// 0x0008 (0x0008 - 0x0000)
struct PlayAdxControl_ReleasePlayerBank final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_ReleasePlayerBank) == 0x000004, "Wrong alignment on PlayAdxControl_ReleasePlayerBank");
static_assert(sizeof(PlayAdxControl_ReleasePlayerBank) == 0x000008, "Wrong size on PlayAdxControl_ReleasePlayerBank");
static_assert(offsetof(PlayAdxControl_ReleasePlayerBank, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_ReleasePlayerBank::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_ReleasePlayerBank, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_ReleasePlayerBank::PlayerMinorID' has a wrong offset!");

// Function SoundManager.PlayAdxControl.requestFreeAcb
// 0x0004 (0x0004 - 0x0000)
struct PlayAdxControl_RequestFreeAcb final
{
public:
	int32                                         bankID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_RequestFreeAcb) == 0x000004, "Wrong alignment on PlayAdxControl_RequestFreeAcb");
static_assert(sizeof(PlayAdxControl_RequestFreeAcb) == 0x000004, "Wrong size on PlayAdxControl_RequestFreeAcb");
static_assert(offsetof(PlayAdxControl_RequestFreeAcb, bankID) == 0x000000, "Member 'PlayAdxControl_RequestFreeAcb::bankID' has a wrong offset!");

// Function SoundManager.PlayAdxControl.requestLoadAcb
// 0x0018 (0x0018 - 0x0000)
struct PlayAdxControl_RequestLoadAcb final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_RequestLoadAcb) == 0x000008, "Wrong alignment on PlayAdxControl_RequestLoadAcb");
static_assert(sizeof(PlayAdxControl_RequestLoadAcb) == 0x000018, "Wrong size on PlayAdxControl_RequestLoadAcb");
static_assert(offsetof(PlayAdxControl_RequestLoadAcb, Filename) == 0x000000, "Member 'PlayAdxControl_RequestLoadAcb::Filename' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_RequestLoadAcb, ReturnValue) == 0x000010, "Member 'PlayAdxControl_RequestLoadAcb::ReturnValue' has a wrong offset!");

// Function SoundManager.PlayAdxControl.requestSound
// 0x0010 (0x0010 - 0x0000)
struct PlayAdxControl_RequestSound final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForceChange;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayAdxControl_RequestSound) == 0x000004, "Wrong alignment on PlayAdxControl_RequestSound");
static_assert(sizeof(PlayAdxControl_RequestSound) == 0x000010, "Wrong size on PlayAdxControl_RequestSound");
static_assert(offsetof(PlayAdxControl_RequestSound, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_RequestSound::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_RequestSound, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_RequestSound::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_RequestSound, CueId) == 0x000008, "Member 'PlayAdxControl_RequestSound::CueId' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_RequestSound, IsForceChange) == 0x00000C, "Member 'PlayAdxControl_RequestSound::IsForceChange' has a wrong offset!");

// Function SoundManager.PlayAdxControl.setPlayerAcbBank
// 0x0010 (0x0010 - 0x0000)
struct PlayAdxControl_SetPlayerAcbBank final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerType                                   Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         bankID;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_SetPlayerAcbBank) == 0x000004, "Wrong alignment on PlayAdxControl_SetPlayerAcbBank");
static_assert(sizeof(PlayAdxControl_SetPlayerAcbBank) == 0x000010, "Wrong size on PlayAdxControl_SetPlayerAcbBank");
static_assert(offsetof(PlayAdxControl_SetPlayerAcbBank, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_SetPlayerAcbBank::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_SetPlayerAcbBank, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_SetPlayerAcbBank::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_SetPlayerAcbBank, Type) == 0x000008, "Member 'PlayAdxControl_SetPlayerAcbBank::Type' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_SetPlayerAcbBank, bankID) == 0x00000C, "Member 'PlayAdxControl_SetPlayerAcbBank::bankID' has a wrong offset!");

// Function SoundManager.PlayAdxControl.stopSound
// 0x0008 (0x0008 - 0x0000)
struct PlayAdxControl_StopSound final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_StopSound) == 0x000004, "Wrong alignment on PlayAdxControl_StopSound");
static_assert(sizeof(PlayAdxControl_StopSound) == 0x000008, "Wrong size on PlayAdxControl_StopSound");
static_assert(offsetof(PlayAdxControl_StopSound, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_StopSound::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_StopSound, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_StopSound::PlayerMinorID' has a wrong offset!");

// Function SoundManager.PlayAdxControl.stopSound_IMD
// 0x0008 (0x0008 - 0x0000)
struct PlayAdxControl_StopSound_IMD final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayAdxControl_StopSound_IMD) == 0x000004, "Wrong alignment on PlayAdxControl_StopSound_IMD");
static_assert(sizeof(PlayAdxControl_StopSound_IMD) == 0x000008, "Wrong size on PlayAdxControl_StopSound_IMD");
static_assert(offsetof(PlayAdxControl_StopSound_IMD, PlayerMajorID) == 0x000000, "Member 'PlayAdxControl_StopSound_IMD::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(PlayAdxControl_StopSound_IMD, PlayerMinorID) == 0x000004, "Member 'PlayAdxControl_StopSound_IMD::PlayerMinorID' has a wrong offset!");

// Function SoundManager.SoundManagerReadyAsyncFunction.SoundManagerReadyAsyncFunction
// 0x0020 (0x0020 - 0x0000)
struct SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayAdxControl*                        Control;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         bankID;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundManagerReadyAsyncFunction*        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction) == 0x000008, "Wrong alignment on SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction");
static_assert(sizeof(SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction) == 0x000020, "Wrong size on SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction");
static_assert(offsetof(SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction, WorldContextObject) == 0x000000, "Member 'SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction, Control) == 0x000008, "Member 'SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction::Control' has a wrong offset!");
static_assert(offsetof(SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction, bankID) == 0x000010, "Member 'SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction::bankID' has a wrong offset!");
static_assert(offsetof(SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction, ReturnValue) == 0x000018, "Member 'SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction::ReturnValue' has a wrong offset!");

// Function SoundManager.SoundManagerGameInstanceSubSystem.GetPlayAdxControl
// 0x0008 (0x0008 - 0x0000)
struct SoundManagerGameInstanceSubSystem_GetPlayAdxControl final
{
public:
	class UPlayAdxControl*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundManagerGameInstanceSubSystem_GetPlayAdxControl) == 0x000008, "Wrong alignment on SoundManagerGameInstanceSubSystem_GetPlayAdxControl");
static_assert(sizeof(SoundManagerGameInstanceSubSystem_GetPlayAdxControl) == 0x000008, "Wrong size on SoundManagerGameInstanceSubSystem_GetPlayAdxControl");
static_assert(offsetof(SoundManagerGameInstanceSubSystem_GetPlayAdxControl, ReturnValue) == 0x000000, "Member 'SoundManagerGameInstanceSubSystem_GetPlayAdxControl::ReturnValue' has a wrong offset!");

}

