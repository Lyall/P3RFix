#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FLDSky

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FLDSky.BP_FLDSky_C
// 0x02C8 (0x04E8 - 0x0220)
class ABP_FLDSky_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   S_FLD_MoonGlow;                                    // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLightMoon;                              // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_FLD_MoonSphere;                                  // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLightNight;                             // 0x0248(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   S_FLD_CloudSphere;                                 // 0x0250(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x0258(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DirectionalLightSun;                               // 0x0260(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MoonRoot;                                          // 0x0268(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_SkySphereCustom;                                // 0x0270(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Base;                                              // 0x0278(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Sky_material;                                      // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Refresh_material;                                  // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      Directional_light_actor;                           // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Colors_determined_by_sun_position;                 // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Star___;                                           // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Star____0;                                         // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___;                                               // 0x02AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         _;                                                 // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          _______;                                           // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _zI__;                                             // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZI___;                                             // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____;                                              // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Horizon_Falloff;                                   // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           _zI_____;                                          // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Zenith_Color;                                      // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Horizon_color;                                     // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_Color;                                       // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Overall_Color;                                     // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ________;                                          // 0x0318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ______8_;                                          // 0x031C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ____0;                                             // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      Horizon_color_curve;                               // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Zenith_color_curve;                                // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Cloud_color_curve;                                 // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Star_n_MU;                                         // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _n_U1;                                             // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Star_color;                                        // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _q___;                                             // 0x0350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_354[0x4];                                      // 0x0354(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Moon_Alpha;                                        // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LightIntensity;                                    // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_364[0x4];                                      // 0x0364(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      Light_Moon_Curve;                                  // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Light_Sun__Curve;                                  // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _____hS__;                                         // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ________1;                                         // 0x038C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         _____1__;                                          // 0x039C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ________2;                                         // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         _____2__;                                          // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ________3;                                         // 0x03B4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         _____3__;                                          // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Fog_Auto;                                          // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3C9[0x3];                                      // 0x03C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _______Mn;                                         // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _____Mn;                                           // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ___1___;                                           // 0x03D4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___1__;                                            // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ___2___;                                           // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___2__;                                            // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ___3___;                                           // 0x03FC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ___3__;                                            // 0x040C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           _o______;                                          // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _o_____;                                           // 0x0420(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      Fog_Far_Curve;                                     // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Light_Night__Curve;                                // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Fog_1_Curve;                                       // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Fog_2_Curve;                                       // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Fog_3_Curve;                                       // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Day;                                               // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Night;                                             // 0x0451(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ShadowTime;                                        // 0x0452(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_453[0x1];                                      // 0x0453(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _n______;                                          // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         _n_________;                                       // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _nU___;                                            // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         ________0;                                         // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _n_____;                                           // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         _____qB__;                                         // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      MoonMaskColor;                                     // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MoonGlowAlpha;                                     // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            CloudOpacity;                                      // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MoonIntensity;                                     // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _n_U2;                                             // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveLinearColor*                      EdgeColor;                                         // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      EmissiveColor;                                     // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EmissivePowerNoon;                                 // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EmissivePowerEvening;                              // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EmissivePowerNight;                                // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EmissivePowerShadow;                               // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _zI_K__;                                           // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4C9[0x3];                                      // 0x04C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           _zI___;                                            // 0x04CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         _zI____0;                                          // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          _____0;                                            // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4E1[0x3];                                      // 0x04E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         In7U;                                              // 0x04E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetExposureCompensation(float* Exposure);
	void GetDirectionalLightMoon(class ULightComponent** LightComponent);
	void UpdateNowMoonAge();
	void Reset();
	void MoonCloud();
	void FLD_EN_P();
	void RefreshMaterial();
	void UpdateSunDirection();
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void FLDSkyReset();
	void SetExposureCompensation(float Exposure);
	void ExecuteUbergraph_BP_FLDSky(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FLDSky_C">();
	}
	static class ABP_FLDSky_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FLDSky_C>();
	}
};
static_assert(alignof(ABP_FLDSky_C) == 0x000008, "Wrong alignment on ABP_FLDSky_C");
static_assert(sizeof(ABP_FLDSky_C) == 0x0004E8, "Wrong size on ABP_FLDSky_C");
static_assert(offsetof(ABP_FLDSky_C, UberGraphFrame) == 0x000220, "Member 'ABP_FLDSky_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, S_FLD_MoonGlow) == 0x000228, "Member 'ABP_FLDSky_C::S_FLD_MoonGlow' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, DirectionalLightMoon) == 0x000230, "Member 'ABP_FLDSky_C::DirectionalLightMoon' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, S_FLD_MoonSphere) == 0x000238, "Member 'ABP_FLDSky_C::S_FLD_MoonSphere' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, PostProcess) == 0x000240, "Member 'ABP_FLDSky_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, DirectionalLightNight) == 0x000248, "Member 'ABP_FLDSky_C::DirectionalLightNight' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, S_FLD_CloudSphere) == 0x000250, "Member 'ABP_FLDSky_C::S_FLD_CloudSphere' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Arrow1) == 0x000258, "Member 'ABP_FLDSky_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, DirectionalLightSun) == 0x000260, "Member 'ABP_FLDSky_C::DirectionalLightSun' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, MoonRoot) == 0x000268, "Member 'ABP_FLDSky_C::MoonRoot' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, SM_SkySphereCustom) == 0x000270, "Member 'ABP_FLDSky_C::SM_SkySphereCustom' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Base) == 0x000278, "Member 'ABP_FLDSky_C::Base' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Arrow) == 0x000280, "Member 'ABP_FLDSky_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Sky_material) == 0x000288, "Member 'ABP_FLDSky_C::Sky_material' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Refresh_material) == 0x000290, "Member 'ABP_FLDSky_C::Refresh_material' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Directional_light_actor) == 0x000298, "Member 'ABP_FLDSky_C::Directional_light_actor' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Colors_determined_by_sun_position) == 0x0002A0, "Member 'ABP_FLDSky_C::Colors_determined_by_sun_position' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Star___) == 0x0002A4, "Member 'ABP_FLDSky_C::Star___' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Star____0) == 0x0002A8, "Member 'ABP_FLDSky_C::Star____0' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ___) == 0x0002AC, "Member 'ABP_FLDSky_C::___' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _) == 0x0002B0, "Member 'ABP_FLDSky_C::_' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _______) == 0x0002B4, "Member 'ABP_FLDSky_C::_______' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _zI__) == 0x0002B8, "Member 'ABP_FLDSky_C::_zI__' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ZI___) == 0x0002BC, "Member 'ABP_FLDSky_C::ZI___' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ____) == 0x0002C0, "Member 'ABP_FLDSky_C::____' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Horizon_Falloff) == 0x0002C4, "Member 'ABP_FLDSky_C::Horizon_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _zI_____) == 0x0002C8, "Member 'ABP_FLDSky_C::_zI_____' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Zenith_Color) == 0x0002D8, "Member 'ABP_FLDSky_C::Zenith_Color' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Horizon_color) == 0x0002E8, "Member 'ABP_FLDSky_C::Horizon_color' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Cloud_Color) == 0x0002F8, "Member 'ABP_FLDSky_C::Cloud_Color' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Overall_Color) == 0x000308, "Member 'ABP_FLDSky_C::Overall_Color' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ________) == 0x000318, "Member 'ABP_FLDSky_C::________' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ______8_) == 0x00031C, "Member 'ABP_FLDSky_C::______8_' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ____0) == 0x000320, "Member 'ABP_FLDSky_C::____0' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Horizon_color_curve) == 0x000328, "Member 'ABP_FLDSky_C::Horizon_color_curve' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Zenith_color_curve) == 0x000330, "Member 'ABP_FLDSky_C::Zenith_color_curve' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Cloud_color_curve) == 0x000338, "Member 'ABP_FLDSky_C::Cloud_color_curve' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Star_n_MU) == 0x000340, "Member 'ABP_FLDSky_C::Star_n_MU' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _n_U1) == 0x000344, "Member 'ABP_FLDSky_C::_n_U1' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Star_color) == 0x000348, "Member 'ABP_FLDSky_C::Star_color' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _q___) == 0x000350, "Member 'ABP_FLDSky_C::_q___' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Moon_Alpha) == 0x000358, "Member 'ABP_FLDSky_C::Moon_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, LightIntensity) == 0x000360, "Member 'ABP_FLDSky_C::LightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Light_Moon_Curve) == 0x000368, "Member 'ABP_FLDSky_C::Light_Moon_Curve' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, LightColor) == 0x000370, "Member 'ABP_FLDSky_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Light_Sun__Curve) == 0x000380, "Member 'ABP_FLDSky_C::Light_Sun__Curve' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _____hS__) == 0x000388, "Member 'ABP_FLDSky_C::_____hS__' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ________1) == 0x00038C, "Member 'ABP_FLDSky_C::________1' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _____1__) == 0x00039C, "Member 'ABP_FLDSky_C::_____1__' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ________2) == 0x0003A0, "Member 'ABP_FLDSky_C::________2' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _____2__) == 0x0003B0, "Member 'ABP_FLDSky_C::_____2__' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ________3) == 0x0003B4, "Member 'ABP_FLDSky_C::________3' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _____3__) == 0x0003C4, "Member 'ABP_FLDSky_C::_____3__' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Fog_Auto) == 0x0003C8, "Member 'ABP_FLDSky_C::Fog_Auto' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _______Mn) == 0x0003CC, "Member 'ABP_FLDSky_C::_______Mn' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _____Mn) == 0x0003D0, "Member 'ABP_FLDSky_C::_____Mn' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ___1___) == 0x0003D4, "Member 'ABP_FLDSky_C::___1___' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ___1__) == 0x0003E4, "Member 'ABP_FLDSky_C::___1__' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ___2___) == 0x0003E8, "Member 'ABP_FLDSky_C::___2___' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ___2__) == 0x0003F8, "Member 'ABP_FLDSky_C::___2__' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ___3___) == 0x0003FC, "Member 'ABP_FLDSky_C::___3___' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ___3__) == 0x00040C, "Member 'ABP_FLDSky_C::___3__' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _o______) == 0x000410, "Member 'ABP_FLDSky_C::_o______' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _o_____) == 0x000420, "Member 'ABP_FLDSky_C::_o_____' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Fog_Far_Curve) == 0x000428, "Member 'ABP_FLDSky_C::Fog_Far_Curve' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Light_Night__Curve) == 0x000430, "Member 'ABP_FLDSky_C::Light_Night__Curve' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Fog_1_Curve) == 0x000438, "Member 'ABP_FLDSky_C::Fog_1_Curve' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Fog_2_Curve) == 0x000440, "Member 'ABP_FLDSky_C::Fog_2_Curve' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Fog_3_Curve) == 0x000448, "Member 'ABP_FLDSky_C::Fog_3_Curve' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Day) == 0x000450, "Member 'ABP_FLDSky_C::Day' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, Night) == 0x000451, "Member 'ABP_FLDSky_C::Night' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ShadowTime) == 0x000452, "Member 'ABP_FLDSky_C::ShadowTime' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _n______) == 0x000454, "Member 'ABP_FLDSky_C::_n______' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _n_________) == 0x000458, "Member 'ABP_FLDSky_C::_n_________' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _nU___) == 0x00045C, "Member 'ABP_FLDSky_C::_nU___' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, ________0) == 0x000460, "Member 'ABP_FLDSky_C::________0' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _n_____) == 0x000464, "Member 'ABP_FLDSky_C::_n_____' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _____qB__) == 0x000468, "Member 'ABP_FLDSky_C::_____qB__' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, MoonMaskColor) == 0x000470, "Member 'ABP_FLDSky_C::MoonMaskColor' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, MoonGlowAlpha) == 0x000478, "Member 'ABP_FLDSky_C::MoonGlowAlpha' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, CloudOpacity) == 0x000480, "Member 'ABP_FLDSky_C::CloudOpacity' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, MoonIntensity) == 0x000488, "Member 'ABP_FLDSky_C::MoonIntensity' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _n_U2) == 0x000490, "Member 'ABP_FLDSky_C::_n_U2' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, EdgeColor) == 0x000498, "Member 'ABP_FLDSky_C::EdgeColor' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, EmissiveColor) == 0x0004A0, "Member 'ABP_FLDSky_C::EmissiveColor' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, EmissivePowerNoon) == 0x0004A8, "Member 'ABP_FLDSky_C::EmissivePowerNoon' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, EmissivePowerEvening) == 0x0004B0, "Member 'ABP_FLDSky_C::EmissivePowerEvening' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, EmissivePowerNight) == 0x0004B8, "Member 'ABP_FLDSky_C::EmissivePowerNight' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, EmissivePowerShadow) == 0x0004C0, "Member 'ABP_FLDSky_C::EmissivePowerShadow' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _zI_K__) == 0x0004C8, "Member 'ABP_FLDSky_C::_zI_K__' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _zI___) == 0x0004CC, "Member 'ABP_FLDSky_C::_zI___' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _zI____0) == 0x0004DC, "Member 'ABP_FLDSky_C::_zI____0' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, _____0) == 0x0004E0, "Member 'ABP_FLDSky_C::_____0' has a wrong offset!");
static_assert(offsetof(ABP_FLDSky_C, In7U) == 0x0004E4, "Member 'ABP_FLDSky_C::In7U' has a wrong offset!");

}

