#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlGuiComponent

#include "Basic.hpp"

#include "Xrd777_structs.hpp"
#include "Xrd777_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlGuiComponent.BP_BtlGuiComponent_C
// 0x01C0 (0x0288 - 0x00C8)
class UBP_BtlGuiComponent_C final : public UAppActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00C8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          List_Move_Ahead;                                   // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABtlActor*>                      EnemyList;                                         // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         Target_Index;                                      // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_BtlActionManager_C*                 ActionManager;                                     // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlTargetManager_C*                 TargetsManager;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CharaCameraRoot;                                   // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlCameraManagerComponent_C*        CameraManager;                                     // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlInputComponent*                     BtlInput;                                          // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlGuiCore_C*                       GuiCore;                                           // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCompleteInitation;                               // 0x0128(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CommandID;                                         // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnDebugKill;                                       // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABtlGuiStateManager*                    StateManager;                                      // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlUICameraComponent_C*             UICamera;                                          // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PremCommandID;                                     // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABtlActor*>                      PrevTargetList;                                    // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	EBtlCommandType                               PrevCommandType;                                   // 0x0168(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              PrevActiveActor;                                   // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCreateEnemyList;                                 // 0x0178(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPromiseOK;                                       // 0x0180(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnPromiseCANCEL;                                   // 0x0190(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsFirstCreateSkillList;                            // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsFirstCreateItemList;                             // 0x01A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A2[0x2];                                      // 0x01A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NaviActionID;                                      // 0x01A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NaviPersonaID;                                     // 0x01A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              NaviTarget;                                        // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 AgeingSkillList;                                   // 0x01B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABtlActor*>                      AgeingTargetList;                                  // 0x01C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<int32>                                 StockIndexList;                                    // 0x01D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_BtlUIColorModel_C*>          UIColorModelList;                                  // 0x01E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UMaterialParameterCollection*           MPC_LineStream;                                    // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLifeStreamSet;                                   // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCallCutinModde;                                  // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UMaterialParameterCollection*           MPC_RadialBlurHLSL;                                // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterCollection*           MPC_SpeedLines;                                    // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PC_RadialBlurHLSL;                                 // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PC_SpeedLines;                                     // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultRadialBlur;                                 // 0x0238(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DefaultSpeedLines;                                 // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnAsyncLoadCompleted;                              // 0x0240(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsBtlResourceCompleted;                            // 0x0250(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_251[0x3];                                      // 0x0251(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnemyPremCommandID;                                // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABtlActor*>                      EnemyprevTargetList;                               // 0x0258(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	EBtlCommandType                               EnemyPrevCommandType;                              // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x7];                                      // 0x0269(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              EnemyPrevActiveActor;                              // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PushOptionButton;                                  // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FirstTopUIMove;                                    // 0x0279(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EBtlDataAttr                                  AttrWork;                                          // 0x027A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PersonaStatusClosing;                              // 0x027B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FukaCutinPlaying;                                  // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_27D[0x3];                                      // 0x027D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TopUIDelayFrame;                                   // 0x0280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SetupCompleted;                                    // 0x0284(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsAsyncLoadCompleted;                              // 0x0285(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRequestTutorial;                                 // 0x0286(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DelayCreateTargetList;                             // 0x0287(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnDebugKill__DelegateSignature();
	void OnPromiseOK__DelegateSignature();
	void OnPromiseCANCEL__DelegateSignature();
	void OnCallCutinModde__DelegateSignature(bool IsCutinMode);
	void OnAsyncLoadCompleted__DelegateSignature();
	void ExecuteUbergraph_BP_BtlGuiComponent(int32 EntryPoint);
	void UpdateUICamera();
	void CallClearState();
	void CallPrevState();
	void OnBindGuiState(bool Flag, int32 Number);
	void OnGUIDestroyed();
	void On_Select_Behind_Target();
	void On_Select_Next_Target();
	void On_Initiate_Gui();
	void ReceiveTick(float DeltaSeconds);
	void On_Attack_Melee_Weapon();
	void On_Enchant_Skill();
	void SetUIVisibleON();
	void SetBGVisibleON();
	void SetPlayerVisibleON();
	void SetUICaptureON();
	void SetEnemyVisibleON();
	void SetUIVisibleOFF();
	void SetBGViibleOFF();
	void SetPlayerVisibleOFF();
	void SetUICaptureOFF();
	void SetEnemyVisibleOFF();
	void DisableRush();
	void CallInputDelegate(const struct FBtlInputKey& InputKey);
	void ChangeRush();
	void OnBindCommandInfo();
	void CallDebugKill();
	void On_Bind_Input();
	void OnGuard();
	void OnRequestSkillAgeing();
	void OnRequestPrevAction();
	void On_TakeOver();
	void OnUseItem();
	void OnRush();
	void Initiation(class UBtlCoreComponent* Btl_Core, class UBP_BtlTargetManager_C* Btl_Targets, class UBP_BtlActionManager_C* Btl_Action, class UBP_BtlCameraManagerComponent_C* Btl_Camera, class UBtlInputComponent* Btl_Input, class UBP_BtlUICameraComponent_C* BtlUICamera);
	void SetCommandCamera();
	void CheckKeyboardInput();
	void StartCutinMode();
	void RefleshCutinMode();
	void BP_BtlGuiComponent_AutoGenFunc(bool NewParam);
	void SetUIVisivle(bool IsEnable);
	void SetBGVisible(bool InputPin);
	void SetPlayerVisible(bool Input_pin);
	void SetUICaptureEnable(bool InputPin);
	void SetEnemyVisible(bool Input_pin);
	void On_Gui_Setup(class UBtlCoreComponent* BtlCore_0, class UBtlInputComponent* BtlInput_0);
	void SortByList(TArray<class ABtlActor*>& InList, TArray<class ABtlActor*>* OutList);
	void SetupPartyPanelActiveActor(class ABtlActor* ActiveActor);
	void CallPromise(EBtlGuiPromise PromiseType);
	void CreateTargetList(TArray<class ABtlActor*>& ActionList, bool IsHPBar, bool NoAnimation, bool IsSillhouetteOnly, bool IsStencilEnemyOnly);
	void UpdateTargetList(TArray<class ABtlActor*>& ActionList);
	void ClearTargetList();
	void CreateTargetListWrap(bool IsHPBar, bool NoAnimation);
	void StartEventMode();
	void RefleshEventMode();
	void BindOnActCommand(class ABtlActor* BtlActor);
	void CheckIsEfficary(TArray<class ABtlActor*>& TargetList, bool RecoveryHP, bool RecoverySP, bool* Efficary);
	void SetTargetIndex(TArray<class ABtlActor*>& Array, int32* Output_Get);
	void UpdateTargetListAnim(TArray<class ABtlActor*>& ActionList, bool SkipMovingAnimation);
	void GetUIColorModelShowActor(TArray<class AActor*>* ActorList1);
	void SwitchUIColor_Silluette(bool IsUIColor);
	void SetColorSilluette(const struct FLinearColor& ColorA, const struct FLinearColor& ColorB);
	void GetTargetIndex(int32* Index_0);
	TArray<class ABtlActor*> GetTargetEnemyList();
	void SetPartyPanelVisible(bool Vidible);
	void GetUIColorModel(class ABP_BtlUIColorModel_C** Model);
	void UpdateLineStream(float DeltaTime);
	void SetSpeedLinePostProsess(float RadialBlur, float SpeedLines);
	void FindGUIActor(class FName Name_0, class ABP_BtlGuiBaseActor_C** GuiActor, bool* Sucsess);
	void AsyncLoadStart(class UBtlCoreComponent* BtlCore_0);
	void ChkAsyncLoad(bool* Completed);
	void SetUICameraLerpTime(float LerpTime);
	void SetColorSilluetteGun(const struct FLinearColor& ColorA, const struct FLinearColor& ColorB, bool Visible);
	void SetTargetInfo(class ABtlActor* Actor, bool NoAnimation);
	void ReleaseTargetInfo(bool NoAnimation);
	void SetSilluetteTheutgiaGun(bool IsTheurgiaGun);
	void GetSillhouetteCamera(class ACameraActor** SilCamera);
	void CheckSillhouetteLock(bool* Lock);
	void CheckSkillUseable(int32 SkillId, EBtlCommandType Type, bool CostCheckOnly, bool* Useable);
	void CheckSkillUseableUserList(int32 SkillId, EBtlCommandType Type, TArray<class ABtlActor*>& SendCorrespondList, bool* Useable);
	void SupportOffTargetInfo(class ABtlActor* Actor);
	void SetKeyHelp(EBtlGuiIconKeyHelp Help, bool DisableParam);
	void KeyhelpVisible(bool Visible);
	void ClearKeyHelp();
	void ClearDamagePanel();
	void ModelAsyncLoadStart(class UBtlCoreComponent* BtlCore_0);
	void ModelChkAsyncLoad(bool* Completed);
	void ModelAsyncLoadStartMainCharacter(class UBtlCoreComponent* BtlCore_0);
	void SillhouetteModelDestroy();
	void ProcDebugKill();
	void SetWeaponVisibleSilluette(bool Visible);
	void GetTuoUICommandPosOffset(struct FVector2D* CommandPos, struct FVector2D* BoundaryPos);
	void Is_Delay_Create_Target_List(bool* bOut);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlGuiComponent_C">();
	}
	static class UBP_BtlGuiComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BtlGuiComponent_C>();
	}
};
static_assert(alignof(UBP_BtlGuiComponent_C) == 0x000008, "Wrong alignment on UBP_BtlGuiComponent_C");
static_assert(sizeof(UBP_BtlGuiComponent_C) == 0x000288, "Wrong size on UBP_BtlGuiComponent_C");
static_assert(offsetof(UBP_BtlGuiComponent_C, UberGraphFrame) == 0x0000C8, "Member 'UBP_BtlGuiComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, List_Move_Ahead) == 0x0000D0, "Member 'UBP_BtlGuiComponent_C::List_Move_Ahead' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, EnemyList) == 0x0000D8, "Member 'UBP_BtlGuiComponent_C::EnemyList' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, Target_Index) == 0x0000E8, "Member 'UBP_BtlGuiComponent_C::Target_Index' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, ActionManager) == 0x0000F0, "Member 'UBP_BtlGuiComponent_C::ActionManager' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, TargetsManager) == 0x0000F8, "Member 'UBP_BtlGuiComponent_C::TargetsManager' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, BtlCore) == 0x000100, "Member 'UBP_BtlGuiComponent_C::BtlCore' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, CharaCameraRoot) == 0x000108, "Member 'UBP_BtlGuiComponent_C::CharaCameraRoot' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, CameraManager) == 0x000110, "Member 'UBP_BtlGuiComponent_C::CameraManager' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, BtlInput) == 0x000118, "Member 'UBP_BtlGuiComponent_C::BtlInput' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, GuiCore) == 0x000120, "Member 'UBP_BtlGuiComponent_C::GuiCore' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, IsCompleteInitation) == 0x000128, "Member 'UBP_BtlGuiComponent_C::IsCompleteInitation' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, CommandID) == 0x00012C, "Member 'UBP_BtlGuiComponent_C::CommandID' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, OnDebugKill) == 0x000130, "Member 'UBP_BtlGuiComponent_C::OnDebugKill' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, StateManager) == 0x000140, "Member 'UBP_BtlGuiComponent_C::StateManager' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, UICamera) == 0x000148, "Member 'UBP_BtlGuiComponent_C::UICamera' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, PremCommandID) == 0x000150, "Member 'UBP_BtlGuiComponent_C::PremCommandID' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, PrevTargetList) == 0x000158, "Member 'UBP_BtlGuiComponent_C::PrevTargetList' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, PrevCommandType) == 0x000168, "Member 'UBP_BtlGuiComponent_C::PrevCommandType' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, PrevActiveActor) == 0x000170, "Member 'UBP_BtlGuiComponent_C::PrevActiveActor' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, IsCreateEnemyList) == 0x000178, "Member 'UBP_BtlGuiComponent_C::IsCreateEnemyList' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, OnPromiseOK) == 0x000180, "Member 'UBP_BtlGuiComponent_C::OnPromiseOK' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, OnPromiseCANCEL) == 0x000190, "Member 'UBP_BtlGuiComponent_C::OnPromiseCANCEL' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, IsFirstCreateSkillList) == 0x0001A0, "Member 'UBP_BtlGuiComponent_C::IsFirstCreateSkillList' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, IsFirstCreateItemList) == 0x0001A1, "Member 'UBP_BtlGuiComponent_C::IsFirstCreateItemList' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, NaviActionID) == 0x0001A4, "Member 'UBP_BtlGuiComponent_C::NaviActionID' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, NaviPersonaID) == 0x0001A8, "Member 'UBP_BtlGuiComponent_C::NaviPersonaID' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, NaviTarget) == 0x0001B0, "Member 'UBP_BtlGuiComponent_C::NaviTarget' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, AgeingSkillList) == 0x0001B8, "Member 'UBP_BtlGuiComponent_C::AgeingSkillList' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, AgeingTargetList) == 0x0001C8, "Member 'UBP_BtlGuiComponent_C::AgeingTargetList' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, StockIndexList) == 0x0001D8, "Member 'UBP_BtlGuiComponent_C::StockIndexList' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, UIColorModelList) == 0x0001E8, "Member 'UBP_BtlGuiComponent_C::UIColorModelList' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, MPC_LineStream) == 0x0001F8, "Member 'UBP_BtlGuiComponent_C::MPC_LineStream' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, IsLifeStreamSet) == 0x000200, "Member 'UBP_BtlGuiComponent_C::IsLifeStreamSet' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, OnCallCutinModde) == 0x000208, "Member 'UBP_BtlGuiComponent_C::OnCallCutinModde' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, MPC_RadialBlurHLSL) == 0x000218, "Member 'UBP_BtlGuiComponent_C::MPC_RadialBlurHLSL' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, MPC_SpeedLines) == 0x000220, "Member 'UBP_BtlGuiComponent_C::MPC_SpeedLines' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, PC_RadialBlurHLSL) == 0x000228, "Member 'UBP_BtlGuiComponent_C::PC_RadialBlurHLSL' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, PC_SpeedLines) == 0x000230, "Member 'UBP_BtlGuiComponent_C::PC_SpeedLines' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, DefaultRadialBlur) == 0x000238, "Member 'UBP_BtlGuiComponent_C::DefaultRadialBlur' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, DefaultSpeedLines) == 0x00023C, "Member 'UBP_BtlGuiComponent_C::DefaultSpeedLines' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, OnAsyncLoadCompleted) == 0x000240, "Member 'UBP_BtlGuiComponent_C::OnAsyncLoadCompleted' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, IsBtlResourceCompleted) == 0x000250, "Member 'UBP_BtlGuiComponent_C::IsBtlResourceCompleted' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, EnemyPremCommandID) == 0x000254, "Member 'UBP_BtlGuiComponent_C::EnemyPremCommandID' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, EnemyprevTargetList) == 0x000258, "Member 'UBP_BtlGuiComponent_C::EnemyprevTargetList' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, EnemyPrevCommandType) == 0x000268, "Member 'UBP_BtlGuiComponent_C::EnemyPrevCommandType' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, EnemyPrevActiveActor) == 0x000270, "Member 'UBP_BtlGuiComponent_C::EnemyPrevActiveActor' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, PushOptionButton) == 0x000278, "Member 'UBP_BtlGuiComponent_C::PushOptionButton' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, FirstTopUIMove) == 0x000279, "Member 'UBP_BtlGuiComponent_C::FirstTopUIMove' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, AttrWork) == 0x00027A, "Member 'UBP_BtlGuiComponent_C::AttrWork' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, PersonaStatusClosing) == 0x00027B, "Member 'UBP_BtlGuiComponent_C::PersonaStatusClosing' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, FukaCutinPlaying) == 0x00027C, "Member 'UBP_BtlGuiComponent_C::FukaCutinPlaying' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, TopUIDelayFrame) == 0x000280, "Member 'UBP_BtlGuiComponent_C::TopUIDelayFrame' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, SetupCompleted) == 0x000284, "Member 'UBP_BtlGuiComponent_C::SetupCompleted' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, IsAsyncLoadCompleted) == 0x000285, "Member 'UBP_BtlGuiComponent_C::IsAsyncLoadCompleted' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, IsRequestTutorial) == 0x000286, "Member 'UBP_BtlGuiComponent_C::IsRequestTutorial' has a wrong offset!");
static_assert(offsetof(UBP_BtlGuiComponent_C, DelayCreateTargetList) == 0x000287, "Member 'UBP_BtlGuiComponent_C::DelayCreateTargetList' has a wrong offset!");

}

