#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SequencerScripting

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SequencerScripting_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"
#include "MovieSceneTracks_structs.hpp"


namespace SDK::Params
{

// Function SequencerScripting.MovieSceneBindingExtensions.AddTrack
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneBindingExtensions_AddTrack final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UMovieSceneTrack>           TrackType;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneTrack*                       ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_AddTrack) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_AddTrack");
static_assert(sizeof(MovieSceneBindingExtensions_AddTrack) == 0x000028, "Wrong size on MovieSceneBindingExtensions_AddTrack");
static_assert(offsetof(MovieSceneBindingExtensions_AddTrack, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_AddTrack::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_AddTrack, TrackType) == 0x000018, "Member 'MovieSceneBindingExtensions_AddTrack::TrackType' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_AddTrack, ReturnValue) == 0x000020, "Member 'MovieSceneBindingExtensions_AddTrack::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.FindTracksByExactType
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneBindingExtensions_FindTracksByExactType final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UMovieSceneTrack>           TrackType;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneTrack*>               ReturnValue;                                       // 0x0020(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_FindTracksByExactType) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_FindTracksByExactType");
static_assert(sizeof(MovieSceneBindingExtensions_FindTracksByExactType) == 0x000030, "Wrong size on MovieSceneBindingExtensions_FindTracksByExactType");
static_assert(offsetof(MovieSceneBindingExtensions_FindTracksByExactType, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_FindTracksByExactType::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_FindTracksByExactType, TrackType) == 0x000018, "Member 'MovieSceneBindingExtensions_FindTracksByExactType::TrackType' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_FindTracksByExactType, ReturnValue) == 0x000020, "Member 'MovieSceneBindingExtensions_FindTracksByExactType::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.FindTracksByType
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneBindingExtensions_FindTracksByType final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UMovieSceneTrack>           TrackType;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneTrack*>               ReturnValue;                                       // 0x0020(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_FindTracksByType) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_FindTracksByType");
static_assert(sizeof(MovieSceneBindingExtensions_FindTracksByType) == 0x000030, "Wrong size on MovieSceneBindingExtensions_FindTracksByType");
static_assert(offsetof(MovieSceneBindingExtensions_FindTracksByType, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_FindTracksByType::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_FindTracksByType, TrackType) == 0x000018, "Member 'MovieSceneBindingExtensions_FindTracksByType::TrackType' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_FindTracksByType, ReturnValue) == 0x000020, "Member 'MovieSceneBindingExtensions_FindTracksByType::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.GetChildPossessables
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneBindingExtensions_GetChildPossessables final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FSequencerBindingProxy>         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_GetChildPossessables) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_GetChildPossessables");
static_assert(sizeof(MovieSceneBindingExtensions_GetChildPossessables) == 0x000028, "Wrong size on MovieSceneBindingExtensions_GetChildPossessables");
static_assert(offsetof(MovieSceneBindingExtensions_GetChildPossessables, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_GetChildPossessables::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_GetChildPossessables, ReturnValue) == 0x000018, "Member 'MovieSceneBindingExtensions_GetChildPossessables::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.GetDisplayName
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneBindingExtensions_GetDisplayName final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_GetDisplayName) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_GetDisplayName");
static_assert(sizeof(MovieSceneBindingExtensions_GetDisplayName) == 0x000030, "Wrong size on MovieSceneBindingExtensions_GetDisplayName");
static_assert(offsetof(MovieSceneBindingExtensions_GetDisplayName, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_GetDisplayName::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_GetDisplayName, ReturnValue) == 0x000018, "Member 'MovieSceneBindingExtensions_GetDisplayName::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.GetId
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneBindingExtensions_GetId final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FGuid                                  ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_GetId) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_GetId");
static_assert(sizeof(MovieSceneBindingExtensions_GetId) == 0x000028, "Wrong size on MovieSceneBindingExtensions_GetId");
static_assert(offsetof(MovieSceneBindingExtensions_GetId, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_GetId::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_GetId, ReturnValue) == 0x000018, "Member 'MovieSceneBindingExtensions_GetId::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.GetName
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneBindingExtensions_GetName final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_GetName) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_GetName");
static_assert(sizeof(MovieSceneBindingExtensions_GetName) == 0x000028, "Wrong size on MovieSceneBindingExtensions_GetName");
static_assert(offsetof(MovieSceneBindingExtensions_GetName, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_GetName::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_GetName, ReturnValue) == 0x000018, "Member 'MovieSceneBindingExtensions_GetName::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.GetObjectTemplate
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneBindingExtensions_GetObjectTemplate final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_GetObjectTemplate) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_GetObjectTemplate");
static_assert(sizeof(MovieSceneBindingExtensions_GetObjectTemplate) == 0x000020, "Wrong size on MovieSceneBindingExtensions_GetObjectTemplate");
static_assert(offsetof(MovieSceneBindingExtensions_GetObjectTemplate, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_GetObjectTemplate::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_GetObjectTemplate, ReturnValue) == 0x000018, "Member 'MovieSceneBindingExtensions_GetObjectTemplate::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.GetParent
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneBindingExtensions_GetParent final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_GetParent) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_GetParent");
static_assert(sizeof(MovieSceneBindingExtensions_GetParent) == 0x000030, "Wrong size on MovieSceneBindingExtensions_GetParent");
static_assert(offsetof(MovieSceneBindingExtensions_GetParent, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_GetParent::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_GetParent, ReturnValue) == 0x000018, "Member 'MovieSceneBindingExtensions_GetParent::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.GetPossessedObjectClass
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneBindingExtensions_GetPossessedObjectClass final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_GetPossessedObjectClass) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_GetPossessedObjectClass");
static_assert(sizeof(MovieSceneBindingExtensions_GetPossessedObjectClass) == 0x000020, "Wrong size on MovieSceneBindingExtensions_GetPossessedObjectClass");
static_assert(offsetof(MovieSceneBindingExtensions_GetPossessedObjectClass, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_GetPossessedObjectClass::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_GetPossessedObjectClass, ReturnValue) == 0x000018, "Member 'MovieSceneBindingExtensions_GetPossessedObjectClass::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.GetTracks
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneBindingExtensions_GetTracks final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneTrack*>               ReturnValue;                                       // 0x0018(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_GetTracks) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_GetTracks");
static_assert(sizeof(MovieSceneBindingExtensions_GetTracks) == 0x000028, "Wrong size on MovieSceneBindingExtensions_GetTracks");
static_assert(offsetof(MovieSceneBindingExtensions_GetTracks, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_GetTracks::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_GetTracks, ReturnValue) == 0x000018, "Member 'MovieSceneBindingExtensions_GetTracks::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.IsValid
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneBindingExtensions_IsValid final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneBindingExtensions_IsValid) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_IsValid");
static_assert(sizeof(MovieSceneBindingExtensions_IsValid) == 0x000020, "Wrong size on MovieSceneBindingExtensions_IsValid");
static_assert(offsetof(MovieSceneBindingExtensions_IsValid, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_IsValid::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_IsValid, ReturnValue) == 0x000018, "Member 'MovieSceneBindingExtensions_IsValid::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.MoveBindingContents
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneBindingExtensions_MoveBindingContents final
{
public:
	struct FSequencerBindingProxy                 SourceBindingId;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 DestinationBindingId;                              // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_MoveBindingContents) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_MoveBindingContents");
static_assert(sizeof(MovieSceneBindingExtensions_MoveBindingContents) == 0x000030, "Wrong size on MovieSceneBindingExtensions_MoveBindingContents");
static_assert(offsetof(MovieSceneBindingExtensions_MoveBindingContents, SourceBindingId) == 0x000000, "Member 'MovieSceneBindingExtensions_MoveBindingContents::SourceBindingId' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_MoveBindingContents, DestinationBindingId) == 0x000018, "Member 'MovieSceneBindingExtensions_MoveBindingContents::DestinationBindingId' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.Remove
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneBindingExtensions_Remove final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_Remove) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_Remove");
static_assert(sizeof(MovieSceneBindingExtensions_Remove) == 0x000018, "Wrong size on MovieSceneBindingExtensions_Remove");
static_assert(offsetof(MovieSceneBindingExtensions_Remove, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_Remove::InBinding' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.RemoveTrack
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneBindingExtensions_RemoveTrack final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UMovieSceneTrack*                       TrackToRemove;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_RemoveTrack) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_RemoveTrack");
static_assert(sizeof(MovieSceneBindingExtensions_RemoveTrack) == 0x000020, "Wrong size on MovieSceneBindingExtensions_RemoveTrack");
static_assert(offsetof(MovieSceneBindingExtensions_RemoveTrack, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_RemoveTrack::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_RemoveTrack, TrackToRemove) == 0x000018, "Member 'MovieSceneBindingExtensions_RemoveTrack::TrackToRemove' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.SetDisplayName
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneBindingExtensions_SetDisplayName final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FText                                   InDisplayName;                                     // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_SetDisplayName) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_SetDisplayName");
static_assert(sizeof(MovieSceneBindingExtensions_SetDisplayName) == 0x000030, "Wrong size on MovieSceneBindingExtensions_SetDisplayName");
static_assert(offsetof(MovieSceneBindingExtensions_SetDisplayName, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_SetDisplayName::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_SetDisplayName, InDisplayName) == 0x000018, "Member 'MovieSceneBindingExtensions_SetDisplayName::InDisplayName' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.SetName
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneBindingExtensions_SetName final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 InName;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_SetName) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_SetName");
static_assert(sizeof(MovieSceneBindingExtensions_SetName) == 0x000028, "Wrong size on MovieSceneBindingExtensions_SetName");
static_assert(offsetof(MovieSceneBindingExtensions_SetName, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_SetName::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_SetName, InName) == 0x000018, "Member 'MovieSceneBindingExtensions_SetName::InName' has a wrong offset!");

// Function SequencerScripting.MovieSceneBindingExtensions.SetParent
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneBindingExtensions_SetParent final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 InParentBinding;                                   // 0x0018(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneBindingExtensions_SetParent) == 0x000008, "Wrong alignment on MovieSceneBindingExtensions_SetParent");
static_assert(sizeof(MovieSceneBindingExtensions_SetParent) == 0x000030, "Wrong size on MovieSceneBindingExtensions_SetParent");
static_assert(offsetof(MovieSceneBindingExtensions_SetParent, InBinding) == 0x000000, "Member 'MovieSceneBindingExtensions_SetParent::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneBindingExtensions_SetParent, InParentBinding) == 0x000018, "Member 'MovieSceneBindingExtensions_SetParent::InParentBinding' has a wrong offset!");

// Function SequencerScripting.MovieSceneEventTrackExtensions.AddEventRepeaterSection
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneEventTrackExtensions_AddEventRepeaterSection final
{
public:
	class UMovieSceneEventTrack*                  InTrack;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneEventRepeaterSection*        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneEventTrackExtensions_AddEventRepeaterSection) == 0x000008, "Wrong alignment on MovieSceneEventTrackExtensions_AddEventRepeaterSection");
static_assert(sizeof(MovieSceneEventTrackExtensions_AddEventRepeaterSection) == 0x000010, "Wrong size on MovieSceneEventTrackExtensions_AddEventRepeaterSection");
static_assert(offsetof(MovieSceneEventTrackExtensions_AddEventRepeaterSection, InTrack) == 0x000000, "Member 'MovieSceneEventTrackExtensions_AddEventRepeaterSection::InTrack' has a wrong offset!");
static_assert(offsetof(MovieSceneEventTrackExtensions_AddEventRepeaterSection, ReturnValue) == 0x000008, "Member 'MovieSceneEventTrackExtensions_AddEventRepeaterSection::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneEventTrackExtensions.AddEventTriggerSection
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneEventTrackExtensions_AddEventTriggerSection final
{
public:
	class UMovieSceneEventTrack*                  InTrack;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneEventTriggerSection*         ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneEventTrackExtensions_AddEventTriggerSection) == 0x000008, "Wrong alignment on MovieSceneEventTrackExtensions_AddEventTriggerSection");
static_assert(sizeof(MovieSceneEventTrackExtensions_AddEventTriggerSection) == 0x000010, "Wrong size on MovieSceneEventTrackExtensions_AddEventTriggerSection");
static_assert(offsetof(MovieSceneEventTrackExtensions_AddEventTriggerSection, InTrack) == 0x000000, "Member 'MovieSceneEventTrackExtensions_AddEventTriggerSection::InTrack' has a wrong offset!");
static_assert(offsetof(MovieSceneEventTrackExtensions_AddEventTriggerSection, ReturnValue) == 0x000008, "Member 'MovieSceneEventTrackExtensions_AddEventTriggerSection::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.AddChildFolder
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneFolderExtensions_AddChildFolder final
{
public:
	class UMovieSceneFolder*                      TargetFolder;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneFolder*                      FolderToAdd;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneFolderExtensions_AddChildFolder) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_AddChildFolder");
static_assert(sizeof(MovieSceneFolderExtensions_AddChildFolder) == 0x000018, "Wrong size on MovieSceneFolderExtensions_AddChildFolder");
static_assert(offsetof(MovieSceneFolderExtensions_AddChildFolder, TargetFolder) == 0x000000, "Member 'MovieSceneFolderExtensions_AddChildFolder::TargetFolder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_AddChildFolder, FolderToAdd) == 0x000008, "Member 'MovieSceneFolderExtensions_AddChildFolder::FolderToAdd' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_AddChildFolder, ReturnValue) == 0x000010, "Member 'MovieSceneFolderExtensions_AddChildFolder::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.AddChildMasterTrack
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneFolderExtensions_AddChildMasterTrack final
{
public:
	class UMovieSceneFolder*                      Folder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneTrack*                       InMasterTrack;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneFolderExtensions_AddChildMasterTrack) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_AddChildMasterTrack");
static_assert(sizeof(MovieSceneFolderExtensions_AddChildMasterTrack) == 0x000018, "Wrong size on MovieSceneFolderExtensions_AddChildMasterTrack");
static_assert(offsetof(MovieSceneFolderExtensions_AddChildMasterTrack, Folder) == 0x000000, "Member 'MovieSceneFolderExtensions_AddChildMasterTrack::Folder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_AddChildMasterTrack, InMasterTrack) == 0x000008, "Member 'MovieSceneFolderExtensions_AddChildMasterTrack::InMasterTrack' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_AddChildMasterTrack, ReturnValue) == 0x000010, "Member 'MovieSceneFolderExtensions_AddChildMasterTrack::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.AddChildObjectBinding
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneFolderExtensions_AddChildObjectBinding final
{
public:
	class UMovieSceneFolder*                      Folder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 InObjectBinding;                                   // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneFolderExtensions_AddChildObjectBinding) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_AddChildObjectBinding");
static_assert(sizeof(MovieSceneFolderExtensions_AddChildObjectBinding) == 0x000028, "Wrong size on MovieSceneFolderExtensions_AddChildObjectBinding");
static_assert(offsetof(MovieSceneFolderExtensions_AddChildObjectBinding, Folder) == 0x000000, "Member 'MovieSceneFolderExtensions_AddChildObjectBinding::Folder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_AddChildObjectBinding, InObjectBinding) == 0x000008, "Member 'MovieSceneFolderExtensions_AddChildObjectBinding::InObjectBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_AddChildObjectBinding, ReturnValue) == 0x000020, "Member 'MovieSceneFolderExtensions_AddChildObjectBinding::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.GetChildFolders
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneFolderExtensions_GetChildFolders final
{
public:
	class UMovieSceneFolder*                      Folder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneFolder*>              ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneFolderExtensions_GetChildFolders) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_GetChildFolders");
static_assert(sizeof(MovieSceneFolderExtensions_GetChildFolders) == 0x000018, "Wrong size on MovieSceneFolderExtensions_GetChildFolders");
static_assert(offsetof(MovieSceneFolderExtensions_GetChildFolders, Folder) == 0x000000, "Member 'MovieSceneFolderExtensions_GetChildFolders::Folder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_GetChildFolders, ReturnValue) == 0x000008, "Member 'MovieSceneFolderExtensions_GetChildFolders::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.GetChildMasterTracks
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneFolderExtensions_GetChildMasterTracks final
{
public:
	class UMovieSceneFolder*                      Folder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneTrack*>               ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneFolderExtensions_GetChildMasterTracks) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_GetChildMasterTracks");
static_assert(sizeof(MovieSceneFolderExtensions_GetChildMasterTracks) == 0x000018, "Wrong size on MovieSceneFolderExtensions_GetChildMasterTracks");
static_assert(offsetof(MovieSceneFolderExtensions_GetChildMasterTracks, Folder) == 0x000000, "Member 'MovieSceneFolderExtensions_GetChildMasterTracks::Folder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_GetChildMasterTracks, ReturnValue) == 0x000008, "Member 'MovieSceneFolderExtensions_GetChildMasterTracks::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.GetChildObjectBindings
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneFolderExtensions_GetChildObjectBindings final
{
public:
	class UMovieSceneFolder*                      Folder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSequencerBindingProxy>         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneFolderExtensions_GetChildObjectBindings) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_GetChildObjectBindings");
static_assert(sizeof(MovieSceneFolderExtensions_GetChildObjectBindings) == 0x000018, "Wrong size on MovieSceneFolderExtensions_GetChildObjectBindings");
static_assert(offsetof(MovieSceneFolderExtensions_GetChildObjectBindings, Folder) == 0x000000, "Member 'MovieSceneFolderExtensions_GetChildObjectBindings::Folder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_GetChildObjectBindings, ReturnValue) == 0x000008, "Member 'MovieSceneFolderExtensions_GetChildObjectBindings::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.GetFolderColor
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneFolderExtensions_GetFolderColor final
{
public:
	class UMovieSceneFolder*                      Folder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneFolderExtensions_GetFolderColor) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_GetFolderColor");
static_assert(sizeof(MovieSceneFolderExtensions_GetFolderColor) == 0x000010, "Wrong size on MovieSceneFolderExtensions_GetFolderColor");
static_assert(offsetof(MovieSceneFolderExtensions_GetFolderColor, Folder) == 0x000000, "Member 'MovieSceneFolderExtensions_GetFolderColor::Folder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_GetFolderColor, ReturnValue) == 0x000008, "Member 'MovieSceneFolderExtensions_GetFolderColor::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.GetFolderName
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneFolderExtensions_GetFolderName final
{
public:
	class UMovieSceneFolder*                      Folder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneFolderExtensions_GetFolderName) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_GetFolderName");
static_assert(sizeof(MovieSceneFolderExtensions_GetFolderName) == 0x000010, "Wrong size on MovieSceneFolderExtensions_GetFolderName");
static_assert(offsetof(MovieSceneFolderExtensions_GetFolderName, Folder) == 0x000000, "Member 'MovieSceneFolderExtensions_GetFolderName::Folder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_GetFolderName, ReturnValue) == 0x000008, "Member 'MovieSceneFolderExtensions_GetFolderName::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.RemoveChildFolder
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneFolderExtensions_RemoveChildFolder final
{
public:
	class UMovieSceneFolder*                      TargetFolder;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneFolder*                      FolderToRemove;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneFolderExtensions_RemoveChildFolder) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_RemoveChildFolder");
static_assert(sizeof(MovieSceneFolderExtensions_RemoveChildFolder) == 0x000018, "Wrong size on MovieSceneFolderExtensions_RemoveChildFolder");
static_assert(offsetof(MovieSceneFolderExtensions_RemoveChildFolder, TargetFolder) == 0x000000, "Member 'MovieSceneFolderExtensions_RemoveChildFolder::TargetFolder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_RemoveChildFolder, FolderToRemove) == 0x000008, "Member 'MovieSceneFolderExtensions_RemoveChildFolder::FolderToRemove' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_RemoveChildFolder, ReturnValue) == 0x000010, "Member 'MovieSceneFolderExtensions_RemoveChildFolder::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.RemoveChildMasterTrack
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneFolderExtensions_RemoveChildMasterTrack final
{
public:
	class UMovieSceneFolder*                      Folder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneTrack*                       InMasterTrack;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneFolderExtensions_RemoveChildMasterTrack) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_RemoveChildMasterTrack");
static_assert(sizeof(MovieSceneFolderExtensions_RemoveChildMasterTrack) == 0x000018, "Wrong size on MovieSceneFolderExtensions_RemoveChildMasterTrack");
static_assert(offsetof(MovieSceneFolderExtensions_RemoveChildMasterTrack, Folder) == 0x000000, "Member 'MovieSceneFolderExtensions_RemoveChildMasterTrack::Folder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_RemoveChildMasterTrack, InMasterTrack) == 0x000008, "Member 'MovieSceneFolderExtensions_RemoveChildMasterTrack::InMasterTrack' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_RemoveChildMasterTrack, ReturnValue) == 0x000010, "Member 'MovieSceneFolderExtensions_RemoveChildMasterTrack::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.RemoveChildObjectBinding
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneFolderExtensions_RemoveChildObjectBinding final
{
public:
	class UMovieSceneFolder*                      Folder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 InObjectBinding;                                   // 0x0008(0x0018)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneFolderExtensions_RemoveChildObjectBinding) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_RemoveChildObjectBinding");
static_assert(sizeof(MovieSceneFolderExtensions_RemoveChildObjectBinding) == 0x000028, "Wrong size on MovieSceneFolderExtensions_RemoveChildObjectBinding");
static_assert(offsetof(MovieSceneFolderExtensions_RemoveChildObjectBinding, Folder) == 0x000000, "Member 'MovieSceneFolderExtensions_RemoveChildObjectBinding::Folder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_RemoveChildObjectBinding, InObjectBinding) == 0x000008, "Member 'MovieSceneFolderExtensions_RemoveChildObjectBinding::InObjectBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_RemoveChildObjectBinding, ReturnValue) == 0x000020, "Member 'MovieSceneFolderExtensions_RemoveChildObjectBinding::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.SetFolderColor
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneFolderExtensions_SetFolderColor final
{
public:
	class UMovieSceneFolder*                      Folder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InFolderColor;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneFolderExtensions_SetFolderColor) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_SetFolderColor");
static_assert(sizeof(MovieSceneFolderExtensions_SetFolderColor) == 0x000010, "Wrong size on MovieSceneFolderExtensions_SetFolderColor");
static_assert(offsetof(MovieSceneFolderExtensions_SetFolderColor, Folder) == 0x000000, "Member 'MovieSceneFolderExtensions_SetFolderColor::Folder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_SetFolderColor, InFolderColor) == 0x000008, "Member 'MovieSceneFolderExtensions_SetFolderColor::InFolderColor' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_SetFolderColor, ReturnValue) == 0x00000C, "Member 'MovieSceneFolderExtensions_SetFolderColor::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneFolderExtensions.SetFolderName
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneFolderExtensions_SetFolderName final
{
public:
	class UMovieSceneFolder*                      Folder;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InFolderName;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneFolderExtensions_SetFolderName) == 0x000008, "Wrong alignment on MovieSceneFolderExtensions_SetFolderName");
static_assert(sizeof(MovieSceneFolderExtensions_SetFolderName) == 0x000018, "Wrong size on MovieSceneFolderExtensions_SetFolderName");
static_assert(offsetof(MovieSceneFolderExtensions_SetFolderName, Folder) == 0x000000, "Member 'MovieSceneFolderExtensions_SetFolderName::Folder' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_SetFolderName, InFolderName) == 0x000008, "Member 'MovieSceneFolderExtensions_SetFolderName::InFolderName' has a wrong offset!");
static_assert(offsetof(MovieSceneFolderExtensions_SetFolderName, ReturnValue) == 0x000010, "Member 'MovieSceneFolderExtensions_SetFolderName::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieScenePropertyTrackExtensions.GetObjectPropertyClass
// 0x0010 (0x0010 - 0x0000)
struct MovieScenePropertyTrackExtensions_GetObjectPropertyClass final
{
public:
	class UMovieSceneObjectPropertyTrack*         Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieScenePropertyTrackExtensions_GetObjectPropertyClass) == 0x000008, "Wrong alignment on MovieScenePropertyTrackExtensions_GetObjectPropertyClass");
static_assert(sizeof(MovieScenePropertyTrackExtensions_GetObjectPropertyClass) == 0x000010, "Wrong size on MovieScenePropertyTrackExtensions_GetObjectPropertyClass");
static_assert(offsetof(MovieScenePropertyTrackExtensions_GetObjectPropertyClass, Track) == 0x000000, "Member 'MovieScenePropertyTrackExtensions_GetObjectPropertyClass::Track' has a wrong offset!");
static_assert(offsetof(MovieScenePropertyTrackExtensions_GetObjectPropertyClass, ReturnValue) == 0x000008, "Member 'MovieScenePropertyTrackExtensions_GetObjectPropertyClass::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieScenePropertyTrackExtensions.GetPropertyName
// 0x0010 (0x0010 - 0x0000)
struct MovieScenePropertyTrackExtensions_GetPropertyName final
{
public:
	class UMovieScenePropertyTrack*               Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieScenePropertyTrackExtensions_GetPropertyName) == 0x000008, "Wrong alignment on MovieScenePropertyTrackExtensions_GetPropertyName");
static_assert(sizeof(MovieScenePropertyTrackExtensions_GetPropertyName) == 0x000010, "Wrong size on MovieScenePropertyTrackExtensions_GetPropertyName");
static_assert(offsetof(MovieScenePropertyTrackExtensions_GetPropertyName, Track) == 0x000000, "Member 'MovieScenePropertyTrackExtensions_GetPropertyName::Track' has a wrong offset!");
static_assert(offsetof(MovieScenePropertyTrackExtensions_GetPropertyName, ReturnValue) == 0x000008, "Member 'MovieScenePropertyTrackExtensions_GetPropertyName::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieScenePropertyTrackExtensions.GetPropertyPath
// 0x0018 (0x0018 - 0x0000)
struct MovieScenePropertyTrackExtensions_GetPropertyPath final
{
public:
	class UMovieScenePropertyTrack*               Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieScenePropertyTrackExtensions_GetPropertyPath) == 0x000008, "Wrong alignment on MovieScenePropertyTrackExtensions_GetPropertyPath");
static_assert(sizeof(MovieScenePropertyTrackExtensions_GetPropertyPath) == 0x000018, "Wrong size on MovieScenePropertyTrackExtensions_GetPropertyPath");
static_assert(offsetof(MovieScenePropertyTrackExtensions_GetPropertyPath, Track) == 0x000000, "Member 'MovieScenePropertyTrackExtensions_GetPropertyPath::Track' has a wrong offset!");
static_assert(offsetof(MovieScenePropertyTrackExtensions_GetPropertyPath, ReturnValue) == 0x000008, "Member 'MovieScenePropertyTrackExtensions_GetPropertyPath::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieScenePropertyTrackExtensions.GetUniqueTrackName
// 0x0010 (0x0010 - 0x0000)
struct MovieScenePropertyTrackExtensions_GetUniqueTrackName final
{
public:
	class UMovieScenePropertyTrack*               Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieScenePropertyTrackExtensions_GetUniqueTrackName) == 0x000008, "Wrong alignment on MovieScenePropertyTrackExtensions_GetUniqueTrackName");
static_assert(sizeof(MovieScenePropertyTrackExtensions_GetUniqueTrackName) == 0x000010, "Wrong size on MovieScenePropertyTrackExtensions_GetUniqueTrackName");
static_assert(offsetof(MovieScenePropertyTrackExtensions_GetUniqueTrackName, Track) == 0x000000, "Member 'MovieScenePropertyTrackExtensions_GetUniqueTrackName::Track' has a wrong offset!");
static_assert(offsetof(MovieScenePropertyTrackExtensions_GetUniqueTrackName, ReturnValue) == 0x000008, "Member 'MovieScenePropertyTrackExtensions_GetUniqueTrackName::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieScenePropertyTrackExtensions.SetObjectPropertyClass
// 0x0010 (0x0010 - 0x0000)
struct MovieScenePropertyTrackExtensions_SetObjectPropertyClass final
{
public:
	class UMovieSceneObjectPropertyTrack*         Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 PropertyClass;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieScenePropertyTrackExtensions_SetObjectPropertyClass) == 0x000008, "Wrong alignment on MovieScenePropertyTrackExtensions_SetObjectPropertyClass");
static_assert(sizeof(MovieScenePropertyTrackExtensions_SetObjectPropertyClass) == 0x000010, "Wrong size on MovieScenePropertyTrackExtensions_SetObjectPropertyClass");
static_assert(offsetof(MovieScenePropertyTrackExtensions_SetObjectPropertyClass, Track) == 0x000000, "Member 'MovieScenePropertyTrackExtensions_SetObjectPropertyClass::Track' has a wrong offset!");
static_assert(offsetof(MovieScenePropertyTrackExtensions_SetObjectPropertyClass, PropertyClass) == 0x000008, "Member 'MovieScenePropertyTrackExtensions_SetObjectPropertyClass::PropertyClass' has a wrong offset!");

// Function SequencerScripting.MovieScenePropertyTrackExtensions.SetPropertyNameAndPath
// 0x0020 (0x0020 - 0x0000)
struct MovieScenePropertyTrackExtensions_SetPropertyNameAndPath final
{
public:
	class UMovieScenePropertyTrack*               Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InPropertyName;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InPropertyPath;                                    // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieScenePropertyTrackExtensions_SetPropertyNameAndPath) == 0x000008, "Wrong alignment on MovieScenePropertyTrackExtensions_SetPropertyNameAndPath");
static_assert(sizeof(MovieScenePropertyTrackExtensions_SetPropertyNameAndPath) == 0x000020, "Wrong size on MovieScenePropertyTrackExtensions_SetPropertyNameAndPath");
static_assert(offsetof(MovieScenePropertyTrackExtensions_SetPropertyNameAndPath, Track) == 0x000000, "Member 'MovieScenePropertyTrackExtensions_SetPropertyNameAndPath::Track' has a wrong offset!");
static_assert(offsetof(MovieScenePropertyTrackExtensions_SetPropertyNameAndPath, InPropertyName) == 0x000008, "Member 'MovieScenePropertyTrackExtensions_SetPropertyNameAndPath::InPropertyName' has a wrong offset!");
static_assert(offsetof(MovieScenePropertyTrackExtensions_SetPropertyNameAndPath, InPropertyPath) == 0x000010, "Member 'MovieScenePropertyTrackExtensions_SetPropertyNameAndPath::InPropertyPath' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingActorReferenceKey.SetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingActorReferenceKey_SetTime final
{
public:
	struct FFrameNumber                           NewFrameNumber;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneScriptingActorReferenceKey_SetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingActorReferenceKey_SetTime");
static_assert(sizeof(MovieSceneScriptingActorReferenceKey_SetTime) == 0x00000C, "Wrong size on MovieSceneScriptingActorReferenceKey_SetTime");
static_assert(offsetof(MovieSceneScriptingActorReferenceKey_SetTime, NewFrameNumber) == 0x000000, "Member 'MovieSceneScriptingActorReferenceKey_SetTime::NewFrameNumber' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingActorReferenceKey_SetTime, SubFrame) == 0x000004, "Member 'MovieSceneScriptingActorReferenceKey_SetTime::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingActorReferenceKey_SetTime, TimeUnit) == 0x000008, "Member 'MovieSceneScriptingActorReferenceKey_SetTime::TimeUnit' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingActorReferenceKey.SetValue
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneScriptingActorReferenceKey_SetValue final
{
public:
	struct FMovieSceneObjectBindingID             InNewValue;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingActorReferenceKey_SetValue) == 0x000004, "Wrong alignment on MovieSceneScriptingActorReferenceKey_SetValue");
static_assert(sizeof(MovieSceneScriptingActorReferenceKey_SetValue) == 0x000018, "Wrong size on MovieSceneScriptingActorReferenceKey_SetValue");
static_assert(offsetof(MovieSceneScriptingActorReferenceKey_SetValue, InNewValue) == 0x000000, "Member 'MovieSceneScriptingActorReferenceKey_SetValue::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingActorReferenceKey.GetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingActorReferenceKey_GetTime final
{
public:
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameTime                             ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingActorReferenceKey_GetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingActorReferenceKey_GetTime");
static_assert(sizeof(MovieSceneScriptingActorReferenceKey_GetTime) == 0x00000C, "Wrong size on MovieSceneScriptingActorReferenceKey_GetTime");
static_assert(offsetof(MovieSceneScriptingActorReferenceKey_GetTime, TimeUnit) == 0x000000, "Member 'MovieSceneScriptingActorReferenceKey_GetTime::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingActorReferenceKey_GetTime, ReturnValue) == 0x000004, "Member 'MovieSceneScriptingActorReferenceKey_GetTime::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingActorReferenceKey.GetValue
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneScriptingActorReferenceKey_GetValue final
{
public:
	struct FMovieSceneObjectBindingID             ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingActorReferenceKey_GetValue) == 0x000004, "Wrong alignment on MovieSceneScriptingActorReferenceKey_GetValue");
static_assert(sizeof(MovieSceneScriptingActorReferenceKey_GetValue) == 0x000018, "Wrong size on MovieSceneScriptingActorReferenceKey_GetValue");
static_assert(offsetof(MovieSceneScriptingActorReferenceKey_GetValue, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingActorReferenceKey_GetValue::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingActorReferenceChannel.AddKey
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneScriptingActorReferenceChannel_AddKey final
{
public:
	struct FFrameNumber                           InTime;                                            // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             NewValue;                                          // 0x0004(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneScriptingActorReferenceKey*  ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingActorReferenceChannel_AddKey) == 0x000008, "Wrong alignment on MovieSceneScriptingActorReferenceChannel_AddKey");
static_assert(sizeof(MovieSceneScriptingActorReferenceChannel_AddKey) == 0x000030, "Wrong size on MovieSceneScriptingActorReferenceChannel_AddKey");
static_assert(offsetof(MovieSceneScriptingActorReferenceChannel_AddKey, InTime) == 0x000000, "Member 'MovieSceneScriptingActorReferenceChannel_AddKey::InTime' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingActorReferenceChannel_AddKey, NewValue) == 0x000004, "Member 'MovieSceneScriptingActorReferenceChannel_AddKey::NewValue' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingActorReferenceChannel_AddKey, SubFrame) == 0x00001C, "Member 'MovieSceneScriptingActorReferenceChannel_AddKey::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingActorReferenceChannel_AddKey, TimeUnit) == 0x000020, "Member 'MovieSceneScriptingActorReferenceChannel_AddKey::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingActorReferenceChannel_AddKey, ReturnValue) == 0x000028, "Member 'MovieSceneScriptingActorReferenceChannel_AddKey::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingActorReferenceChannel.RemoveKey
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneScriptingActorReferenceChannel_RemoveKey final
{
public:
	class UMovieSceneScriptingKey*                Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingActorReferenceChannel_RemoveKey) == 0x000008, "Wrong alignment on MovieSceneScriptingActorReferenceChannel_RemoveKey");
static_assert(sizeof(MovieSceneScriptingActorReferenceChannel_RemoveKey) == 0x000008, "Wrong size on MovieSceneScriptingActorReferenceChannel_RemoveKey");
static_assert(offsetof(MovieSceneScriptingActorReferenceChannel_RemoveKey, Key) == 0x000000, "Member 'MovieSceneScriptingActorReferenceChannel_RemoveKey::Key' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingActorReferenceChannel.SetDefault
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneScriptingActorReferenceChannel_SetDefault final
{
public:
	struct FMovieSceneObjectBindingID             InDefaultValue;                                    // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingActorReferenceChannel_SetDefault) == 0x000004, "Wrong alignment on MovieSceneScriptingActorReferenceChannel_SetDefault");
static_assert(sizeof(MovieSceneScriptingActorReferenceChannel_SetDefault) == 0x000018, "Wrong size on MovieSceneScriptingActorReferenceChannel_SetDefault");
static_assert(offsetof(MovieSceneScriptingActorReferenceChannel_SetDefault, InDefaultValue) == 0x000000, "Member 'MovieSceneScriptingActorReferenceChannel_SetDefault::InDefaultValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingActorReferenceChannel.GetDefault
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneScriptingActorReferenceChannel_GetDefault final
{
public:
	struct FMovieSceneObjectBindingID             ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingActorReferenceChannel_GetDefault) == 0x000004, "Wrong alignment on MovieSceneScriptingActorReferenceChannel_GetDefault");
static_assert(sizeof(MovieSceneScriptingActorReferenceChannel_GetDefault) == 0x000018, "Wrong size on MovieSceneScriptingActorReferenceChannel_GetDefault");
static_assert(offsetof(MovieSceneScriptingActorReferenceChannel_GetDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingActorReferenceChannel_GetDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingActorReferenceChannel.GetKeys
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneScriptingActorReferenceChannel_GetKeys final
{
public:
	TArray<class UMovieSceneScriptingKey*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingActorReferenceChannel_GetKeys) == 0x000008, "Wrong alignment on MovieSceneScriptingActorReferenceChannel_GetKeys");
static_assert(sizeof(MovieSceneScriptingActorReferenceChannel_GetKeys) == 0x000010, "Wrong size on MovieSceneScriptingActorReferenceChannel_GetKeys");
static_assert(offsetof(MovieSceneScriptingActorReferenceChannel_GetKeys, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingActorReferenceChannel_GetKeys::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingActorReferenceChannel.HasDefault
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingActorReferenceChannel_HasDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingActorReferenceChannel_HasDefault) == 0x000001, "Wrong alignment on MovieSceneScriptingActorReferenceChannel_HasDefault");
static_assert(sizeof(MovieSceneScriptingActorReferenceChannel_HasDefault) == 0x000001, "Wrong size on MovieSceneScriptingActorReferenceChannel_HasDefault");
static_assert(offsetof(MovieSceneScriptingActorReferenceChannel_HasDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingActorReferenceChannel_HasDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolKey.SetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingBoolKey_SetTime final
{
public:
	struct FFrameNumber                           NewFrameNumber;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneScriptingBoolKey_SetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingBoolKey_SetTime");
static_assert(sizeof(MovieSceneScriptingBoolKey_SetTime) == 0x00000C, "Wrong size on MovieSceneScriptingBoolKey_SetTime");
static_assert(offsetof(MovieSceneScriptingBoolKey_SetTime, NewFrameNumber) == 0x000000, "Member 'MovieSceneScriptingBoolKey_SetTime::NewFrameNumber' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingBoolKey_SetTime, SubFrame) == 0x000004, "Member 'MovieSceneScriptingBoolKey_SetTime::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingBoolKey_SetTime, TimeUnit) == 0x000008, "Member 'MovieSceneScriptingBoolKey_SetTime::TimeUnit' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolKey.SetValue
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingBoolKey_SetValue final
{
public:
	bool                                          InNewValue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingBoolKey_SetValue) == 0x000001, "Wrong alignment on MovieSceneScriptingBoolKey_SetValue");
static_assert(sizeof(MovieSceneScriptingBoolKey_SetValue) == 0x000001, "Wrong size on MovieSceneScriptingBoolKey_SetValue");
static_assert(offsetof(MovieSceneScriptingBoolKey_SetValue, InNewValue) == 0x000000, "Member 'MovieSceneScriptingBoolKey_SetValue::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolKey.GetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingBoolKey_GetTime final
{
public:
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameTime                             ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingBoolKey_GetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingBoolKey_GetTime");
static_assert(sizeof(MovieSceneScriptingBoolKey_GetTime) == 0x00000C, "Wrong size on MovieSceneScriptingBoolKey_GetTime");
static_assert(offsetof(MovieSceneScriptingBoolKey_GetTime, TimeUnit) == 0x000000, "Member 'MovieSceneScriptingBoolKey_GetTime::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingBoolKey_GetTime, ReturnValue) == 0x000004, "Member 'MovieSceneScriptingBoolKey_GetTime::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolKey.GetValue
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingBoolKey_GetValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingBoolKey_GetValue) == 0x000001, "Wrong alignment on MovieSceneScriptingBoolKey_GetValue");
static_assert(sizeof(MovieSceneScriptingBoolKey_GetValue) == 0x000001, "Wrong size on MovieSceneScriptingBoolKey_GetValue");
static_assert(offsetof(MovieSceneScriptingBoolKey_GetValue, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingBoolKey_GetValue::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolChannel.AddKey
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneScriptingBoolChannel_AddKey final
{
public:
	struct FFrameNumber                           InTime;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewValue;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SubFrame;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneScriptingBoolKey*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingBoolChannel_AddKey) == 0x000008, "Wrong alignment on MovieSceneScriptingBoolChannel_AddKey");
static_assert(sizeof(MovieSceneScriptingBoolChannel_AddKey) == 0x000018, "Wrong size on MovieSceneScriptingBoolChannel_AddKey");
static_assert(offsetof(MovieSceneScriptingBoolChannel_AddKey, InTime) == 0x000000, "Member 'MovieSceneScriptingBoolChannel_AddKey::InTime' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingBoolChannel_AddKey, NewValue) == 0x000004, "Member 'MovieSceneScriptingBoolChannel_AddKey::NewValue' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingBoolChannel_AddKey, SubFrame) == 0x000008, "Member 'MovieSceneScriptingBoolChannel_AddKey::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingBoolChannel_AddKey, TimeUnit) == 0x00000C, "Member 'MovieSceneScriptingBoolChannel_AddKey::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingBoolChannel_AddKey, ReturnValue) == 0x000010, "Member 'MovieSceneScriptingBoolChannel_AddKey::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolChannel.RemoveKey
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneScriptingBoolChannel_RemoveKey final
{
public:
	class UMovieSceneScriptingKey*                Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingBoolChannel_RemoveKey) == 0x000008, "Wrong alignment on MovieSceneScriptingBoolChannel_RemoveKey");
static_assert(sizeof(MovieSceneScriptingBoolChannel_RemoveKey) == 0x000008, "Wrong size on MovieSceneScriptingBoolChannel_RemoveKey");
static_assert(offsetof(MovieSceneScriptingBoolChannel_RemoveKey, Key) == 0x000000, "Member 'MovieSceneScriptingBoolChannel_RemoveKey::Key' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolChannel.SetDefault
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingBoolChannel_SetDefault final
{
public:
	bool                                          InDefaultValue;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingBoolChannel_SetDefault) == 0x000001, "Wrong alignment on MovieSceneScriptingBoolChannel_SetDefault");
static_assert(sizeof(MovieSceneScriptingBoolChannel_SetDefault) == 0x000001, "Wrong size on MovieSceneScriptingBoolChannel_SetDefault");
static_assert(offsetof(MovieSceneScriptingBoolChannel_SetDefault, InDefaultValue) == 0x000000, "Member 'MovieSceneScriptingBoolChannel_SetDefault::InDefaultValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolChannel.ComputeEffectiveRange
// 0x0014 (0x0014 - 0x0000)
struct MovieSceneScriptingBoolChannel_ComputeEffectiveRange final
{
public:
	struct FSequencerScriptingRange               ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingBoolChannel_ComputeEffectiveRange) == 0x000004, "Wrong alignment on MovieSceneScriptingBoolChannel_ComputeEffectiveRange");
static_assert(sizeof(MovieSceneScriptingBoolChannel_ComputeEffectiveRange) == 0x000014, "Wrong size on MovieSceneScriptingBoolChannel_ComputeEffectiveRange");
static_assert(offsetof(MovieSceneScriptingBoolChannel_ComputeEffectiveRange, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingBoolChannel_ComputeEffectiveRange::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolChannel.EvaluateKeys
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneScriptingBoolChannel_EvaluateKeys final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFrameRate                             FrameRate;                                         // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingBoolChannel_EvaluateKeys) == 0x000008, "Wrong alignment on MovieSceneScriptingBoolChannel_EvaluateKeys");
static_assert(sizeof(MovieSceneScriptingBoolChannel_EvaluateKeys) == 0x000030, "Wrong size on MovieSceneScriptingBoolChannel_EvaluateKeys");
static_assert(offsetof(MovieSceneScriptingBoolChannel_EvaluateKeys, Range) == 0x000000, "Member 'MovieSceneScriptingBoolChannel_EvaluateKeys::Range' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingBoolChannel_EvaluateKeys, FrameRate) == 0x000014, "Member 'MovieSceneScriptingBoolChannel_EvaluateKeys::FrameRate' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingBoolChannel_EvaluateKeys, ReturnValue) == 0x000020, "Member 'MovieSceneScriptingBoolChannel_EvaluateKeys::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolChannel.GetDefault
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingBoolChannel_GetDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingBoolChannel_GetDefault) == 0x000001, "Wrong alignment on MovieSceneScriptingBoolChannel_GetDefault");
static_assert(sizeof(MovieSceneScriptingBoolChannel_GetDefault) == 0x000001, "Wrong size on MovieSceneScriptingBoolChannel_GetDefault");
static_assert(offsetof(MovieSceneScriptingBoolChannel_GetDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingBoolChannel_GetDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolChannel.GetKeys
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneScriptingBoolChannel_GetKeys final
{
public:
	TArray<class UMovieSceneScriptingKey*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingBoolChannel_GetKeys) == 0x000008, "Wrong alignment on MovieSceneScriptingBoolChannel_GetKeys");
static_assert(sizeof(MovieSceneScriptingBoolChannel_GetKeys) == 0x000010, "Wrong size on MovieSceneScriptingBoolChannel_GetKeys");
static_assert(offsetof(MovieSceneScriptingBoolChannel_GetKeys, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingBoolChannel_GetKeys::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolChannel.GetNumKeys
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingBoolChannel_GetNumKeys final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingBoolChannel_GetNumKeys) == 0x000004, "Wrong alignment on MovieSceneScriptingBoolChannel_GetNumKeys");
static_assert(sizeof(MovieSceneScriptingBoolChannel_GetNumKeys) == 0x000004, "Wrong size on MovieSceneScriptingBoolChannel_GetNumKeys");
static_assert(offsetof(MovieSceneScriptingBoolChannel_GetNumKeys, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingBoolChannel_GetNumKeys::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingBoolChannel.HasDefault
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingBoolChannel_HasDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingBoolChannel_HasDefault) == 0x000001, "Wrong alignment on MovieSceneScriptingBoolChannel_HasDefault");
static_assert(sizeof(MovieSceneScriptingBoolChannel_HasDefault) == 0x000001, "Wrong size on MovieSceneScriptingBoolChannel_HasDefault");
static_assert(offsetof(MovieSceneScriptingBoolChannel_HasDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingBoolChannel_HasDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingByteKey.SetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingByteKey_SetTime final
{
public:
	struct FFrameNumber                           NewFrameNumber;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneScriptingByteKey_SetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingByteKey_SetTime");
static_assert(sizeof(MovieSceneScriptingByteKey_SetTime) == 0x00000C, "Wrong size on MovieSceneScriptingByteKey_SetTime");
static_assert(offsetof(MovieSceneScriptingByteKey_SetTime, NewFrameNumber) == 0x000000, "Member 'MovieSceneScriptingByteKey_SetTime::NewFrameNumber' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingByteKey_SetTime, SubFrame) == 0x000004, "Member 'MovieSceneScriptingByteKey_SetTime::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingByteKey_SetTime, TimeUnit) == 0x000008, "Member 'MovieSceneScriptingByteKey_SetTime::TimeUnit' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingByteKey.SetValue
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingByteKey_SetValue final
{
public:
	uint8                                         InNewValue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingByteKey_SetValue) == 0x000001, "Wrong alignment on MovieSceneScriptingByteKey_SetValue");
static_assert(sizeof(MovieSceneScriptingByteKey_SetValue) == 0x000001, "Wrong size on MovieSceneScriptingByteKey_SetValue");
static_assert(offsetof(MovieSceneScriptingByteKey_SetValue, InNewValue) == 0x000000, "Member 'MovieSceneScriptingByteKey_SetValue::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingByteKey.GetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingByteKey_GetTime final
{
public:
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameTime                             ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingByteKey_GetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingByteKey_GetTime");
static_assert(sizeof(MovieSceneScriptingByteKey_GetTime) == 0x00000C, "Wrong size on MovieSceneScriptingByteKey_GetTime");
static_assert(offsetof(MovieSceneScriptingByteKey_GetTime, TimeUnit) == 0x000000, "Member 'MovieSceneScriptingByteKey_GetTime::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingByteKey_GetTime, ReturnValue) == 0x000004, "Member 'MovieSceneScriptingByteKey_GetTime::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingByteKey.GetValue
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingByteKey_GetValue final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingByteKey_GetValue) == 0x000001, "Wrong alignment on MovieSceneScriptingByteKey_GetValue");
static_assert(sizeof(MovieSceneScriptingByteKey_GetValue) == 0x000001, "Wrong size on MovieSceneScriptingByteKey_GetValue");
static_assert(offsetof(MovieSceneScriptingByteKey_GetValue, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingByteKey_GetValue::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingByteChannel.AddKey
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneScriptingByteChannel_AddKey final
{
public:
	struct FFrameNumber                           InTime;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NewValue;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SubFrame;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneKeyInterpolation                   InInterpolation;                                   // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneScriptingByteKey*            ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingByteChannel_AddKey) == 0x000008, "Wrong alignment on MovieSceneScriptingByteChannel_AddKey");
static_assert(sizeof(MovieSceneScriptingByteChannel_AddKey) == 0x000018, "Wrong size on MovieSceneScriptingByteChannel_AddKey");
static_assert(offsetof(MovieSceneScriptingByteChannel_AddKey, InTime) == 0x000000, "Member 'MovieSceneScriptingByteChannel_AddKey::InTime' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingByteChannel_AddKey, NewValue) == 0x000004, "Member 'MovieSceneScriptingByteChannel_AddKey::NewValue' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingByteChannel_AddKey, SubFrame) == 0x000008, "Member 'MovieSceneScriptingByteChannel_AddKey::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingByteChannel_AddKey, TimeUnit) == 0x00000C, "Member 'MovieSceneScriptingByteChannel_AddKey::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingByteChannel_AddKey, InInterpolation) == 0x00000D, "Member 'MovieSceneScriptingByteChannel_AddKey::InInterpolation' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingByteChannel_AddKey, ReturnValue) == 0x000010, "Member 'MovieSceneScriptingByteChannel_AddKey::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingByteChannel.RemoveKey
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneScriptingByteChannel_RemoveKey final
{
public:
	class UMovieSceneScriptingKey*                Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingByteChannel_RemoveKey) == 0x000008, "Wrong alignment on MovieSceneScriptingByteChannel_RemoveKey");
static_assert(sizeof(MovieSceneScriptingByteChannel_RemoveKey) == 0x000008, "Wrong size on MovieSceneScriptingByteChannel_RemoveKey");
static_assert(offsetof(MovieSceneScriptingByteChannel_RemoveKey, Key) == 0x000000, "Member 'MovieSceneScriptingByteChannel_RemoveKey::Key' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingByteChannel.SetDefault
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingByteChannel_SetDefault final
{
public:
	uint8                                         InDefaultValue;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingByteChannel_SetDefault) == 0x000001, "Wrong alignment on MovieSceneScriptingByteChannel_SetDefault");
static_assert(sizeof(MovieSceneScriptingByteChannel_SetDefault) == 0x000001, "Wrong size on MovieSceneScriptingByteChannel_SetDefault");
static_assert(offsetof(MovieSceneScriptingByteChannel_SetDefault, InDefaultValue) == 0x000000, "Member 'MovieSceneScriptingByteChannel_SetDefault::InDefaultValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingByteChannel.GetDefault
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingByteChannel_GetDefault final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingByteChannel_GetDefault) == 0x000001, "Wrong alignment on MovieSceneScriptingByteChannel_GetDefault");
static_assert(sizeof(MovieSceneScriptingByteChannel_GetDefault) == 0x000001, "Wrong size on MovieSceneScriptingByteChannel_GetDefault");
static_assert(offsetof(MovieSceneScriptingByteChannel_GetDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingByteChannel_GetDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingByteChannel.GetKeys
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneScriptingByteChannel_GetKeys final
{
public:
	TArray<class UMovieSceneScriptingKey*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingByteChannel_GetKeys) == 0x000008, "Wrong alignment on MovieSceneScriptingByteChannel_GetKeys");
static_assert(sizeof(MovieSceneScriptingByteChannel_GetKeys) == 0x000010, "Wrong size on MovieSceneScriptingByteChannel_GetKeys");
static_assert(offsetof(MovieSceneScriptingByteChannel_GetKeys, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingByteChannel_GetKeys::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingByteChannel.HasDefault
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingByteChannel_HasDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingByteChannel_HasDefault) == 0x000001, "Wrong alignment on MovieSceneScriptingByteChannel_HasDefault");
static_assert(sizeof(MovieSceneScriptingByteChannel_HasDefault) == 0x000001, "Wrong size on MovieSceneScriptingByteChannel_HasDefault");
static_assert(offsetof(MovieSceneScriptingByteChannel_HasDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingByteChannel_HasDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingEventKey.SetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingEventKey_SetTime final
{
public:
	struct FFrameNumber                           NewFrameNumber;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneScriptingEventKey_SetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingEventKey_SetTime");
static_assert(sizeof(MovieSceneScriptingEventKey_SetTime) == 0x00000C, "Wrong size on MovieSceneScriptingEventKey_SetTime");
static_assert(offsetof(MovieSceneScriptingEventKey_SetTime, NewFrameNumber) == 0x000000, "Member 'MovieSceneScriptingEventKey_SetTime::NewFrameNumber' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingEventKey_SetTime, SubFrame) == 0x000004, "Member 'MovieSceneScriptingEventKey_SetTime::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingEventKey_SetTime, TimeUnit) == 0x000008, "Member 'MovieSceneScriptingEventKey_SetTime::TimeUnit' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingEventKey.SetValue
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneScriptingEventKey_SetValue final
{
public:
	struct FMovieSceneEvent                       InNewValue;                                        // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingEventKey_SetValue) == 0x000008, "Wrong alignment on MovieSceneScriptingEventKey_SetValue");
static_assert(sizeof(MovieSceneScriptingEventKey_SetValue) == 0x000028, "Wrong size on MovieSceneScriptingEventKey_SetValue");
static_assert(offsetof(MovieSceneScriptingEventKey_SetValue, InNewValue) == 0x000000, "Member 'MovieSceneScriptingEventKey_SetValue::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingEventKey.GetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingEventKey_GetTime final
{
public:
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameTime                             ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingEventKey_GetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingEventKey_GetTime");
static_assert(sizeof(MovieSceneScriptingEventKey_GetTime) == 0x00000C, "Wrong size on MovieSceneScriptingEventKey_GetTime");
static_assert(offsetof(MovieSceneScriptingEventKey_GetTime, TimeUnit) == 0x000000, "Member 'MovieSceneScriptingEventKey_GetTime::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingEventKey_GetTime, ReturnValue) == 0x000004, "Member 'MovieSceneScriptingEventKey_GetTime::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingEventKey.GetValue
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneScriptingEventKey_GetValue final
{
public:
	struct FMovieSceneEvent                       ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingEventKey_GetValue) == 0x000008, "Wrong alignment on MovieSceneScriptingEventKey_GetValue");
static_assert(sizeof(MovieSceneScriptingEventKey_GetValue) == 0x000028, "Wrong size on MovieSceneScriptingEventKey_GetValue");
static_assert(offsetof(MovieSceneScriptingEventKey_GetValue, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingEventKey_GetValue::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingEventChannel.AddKey
// 0x0040 (0x0040 - 0x0000)
struct MovieSceneScriptingEventChannel_AddKey final
{
public:
	struct FFrameNumber                           InTime;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneEvent                       NewValue;                                          // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneScriptingEventKey*           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingEventChannel_AddKey) == 0x000008, "Wrong alignment on MovieSceneScriptingEventChannel_AddKey");
static_assert(sizeof(MovieSceneScriptingEventChannel_AddKey) == 0x000040, "Wrong size on MovieSceneScriptingEventChannel_AddKey");
static_assert(offsetof(MovieSceneScriptingEventChannel_AddKey, InTime) == 0x000000, "Member 'MovieSceneScriptingEventChannel_AddKey::InTime' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingEventChannel_AddKey, NewValue) == 0x000008, "Member 'MovieSceneScriptingEventChannel_AddKey::NewValue' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingEventChannel_AddKey, SubFrame) == 0x000030, "Member 'MovieSceneScriptingEventChannel_AddKey::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingEventChannel_AddKey, TimeUnit) == 0x000034, "Member 'MovieSceneScriptingEventChannel_AddKey::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingEventChannel_AddKey, ReturnValue) == 0x000038, "Member 'MovieSceneScriptingEventChannel_AddKey::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingEventChannel.RemoveKey
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneScriptingEventChannel_RemoveKey final
{
public:
	class UMovieSceneScriptingKey*                Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingEventChannel_RemoveKey) == 0x000008, "Wrong alignment on MovieSceneScriptingEventChannel_RemoveKey");
static_assert(sizeof(MovieSceneScriptingEventChannel_RemoveKey) == 0x000008, "Wrong size on MovieSceneScriptingEventChannel_RemoveKey");
static_assert(offsetof(MovieSceneScriptingEventChannel_RemoveKey, Key) == 0x000000, "Member 'MovieSceneScriptingEventChannel_RemoveKey::Key' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingEventChannel.GetKeys
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneScriptingEventChannel_GetKeys final
{
public:
	TArray<class UMovieSceneScriptingKey*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingEventChannel_GetKeys) == 0x000008, "Wrong alignment on MovieSceneScriptingEventChannel_GetKeys");
static_assert(sizeof(MovieSceneScriptingEventChannel_GetKeys) == 0x000010, "Wrong size on MovieSceneScriptingEventChannel_GetKeys");
static_assert(offsetof(MovieSceneScriptingEventChannel_GetKeys, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingEventChannel_GetKeys::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.SetArriveTangent
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatKey_SetArriveTangent final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_SetArriveTangent) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatKey_SetArriveTangent");
static_assert(sizeof(MovieSceneScriptingFloatKey_SetArriveTangent) == 0x000004, "Wrong size on MovieSceneScriptingFloatKey_SetArriveTangent");
static_assert(offsetof(MovieSceneScriptingFloatKey_SetArriveTangent, InNewValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_SetArriveTangent::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.SetArriveTangentWeight
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatKey_SetArriveTangentWeight final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_SetArriveTangentWeight) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatKey_SetArriveTangentWeight");
static_assert(sizeof(MovieSceneScriptingFloatKey_SetArriveTangentWeight) == 0x000004, "Wrong size on MovieSceneScriptingFloatKey_SetArriveTangentWeight");
static_assert(offsetof(MovieSceneScriptingFloatKey_SetArriveTangentWeight, InNewValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_SetArriveTangentWeight::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.SetInterpolationMode
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingFloatKey_SetInterpolationMode final
{
public:
	ERichCurveInterpMode                          InNewValue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_SetInterpolationMode) == 0x000001, "Wrong alignment on MovieSceneScriptingFloatKey_SetInterpolationMode");
static_assert(sizeof(MovieSceneScriptingFloatKey_SetInterpolationMode) == 0x000001, "Wrong size on MovieSceneScriptingFloatKey_SetInterpolationMode");
static_assert(offsetof(MovieSceneScriptingFloatKey_SetInterpolationMode, InNewValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_SetInterpolationMode::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.SetLeaveTangent
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatKey_SetLeaveTangent final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_SetLeaveTangent) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatKey_SetLeaveTangent");
static_assert(sizeof(MovieSceneScriptingFloatKey_SetLeaveTangent) == 0x000004, "Wrong size on MovieSceneScriptingFloatKey_SetLeaveTangent");
static_assert(offsetof(MovieSceneScriptingFloatKey_SetLeaveTangent, InNewValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_SetLeaveTangent::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.SetLeaveTangentWeight
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatKey_SetLeaveTangentWeight final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_SetLeaveTangentWeight) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatKey_SetLeaveTangentWeight");
static_assert(sizeof(MovieSceneScriptingFloatKey_SetLeaveTangentWeight) == 0x000004, "Wrong size on MovieSceneScriptingFloatKey_SetLeaveTangentWeight");
static_assert(offsetof(MovieSceneScriptingFloatKey_SetLeaveTangentWeight, InNewValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_SetLeaveTangentWeight::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.SetTangentMode
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingFloatKey_SetTangentMode final
{
public:
	ERichCurveTangentMode                         InNewValue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_SetTangentMode) == 0x000001, "Wrong alignment on MovieSceneScriptingFloatKey_SetTangentMode");
static_assert(sizeof(MovieSceneScriptingFloatKey_SetTangentMode) == 0x000001, "Wrong size on MovieSceneScriptingFloatKey_SetTangentMode");
static_assert(offsetof(MovieSceneScriptingFloatKey_SetTangentMode, InNewValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_SetTangentMode::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.SetTangentWeightMode
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingFloatKey_SetTangentWeightMode final
{
public:
	ERichCurveTangentWeightMode                   InNewValue;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_SetTangentWeightMode) == 0x000001, "Wrong alignment on MovieSceneScriptingFloatKey_SetTangentWeightMode");
static_assert(sizeof(MovieSceneScriptingFloatKey_SetTangentWeightMode) == 0x000001, "Wrong size on MovieSceneScriptingFloatKey_SetTangentWeightMode");
static_assert(offsetof(MovieSceneScriptingFloatKey_SetTangentWeightMode, InNewValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_SetTangentWeightMode::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.SetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingFloatKey_SetTime final
{
public:
	struct FFrameNumber                           NewFrameNumber;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneScriptingFloatKey_SetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatKey_SetTime");
static_assert(sizeof(MovieSceneScriptingFloatKey_SetTime) == 0x00000C, "Wrong size on MovieSceneScriptingFloatKey_SetTime");
static_assert(offsetof(MovieSceneScriptingFloatKey_SetTime, NewFrameNumber) == 0x000000, "Member 'MovieSceneScriptingFloatKey_SetTime::NewFrameNumber' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingFloatKey_SetTime, SubFrame) == 0x000004, "Member 'MovieSceneScriptingFloatKey_SetTime::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingFloatKey_SetTime, TimeUnit) == 0x000008, "Member 'MovieSceneScriptingFloatKey_SetTime::TimeUnit' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.SetValue
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatKey_SetValue final
{
public:
	float                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_SetValue) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatKey_SetValue");
static_assert(sizeof(MovieSceneScriptingFloatKey_SetValue) == 0x000004, "Wrong size on MovieSceneScriptingFloatKey_SetValue");
static_assert(offsetof(MovieSceneScriptingFloatKey_SetValue, InNewValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_SetValue::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.GetArriveTangent
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatKey_GetArriveTangent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_GetArriveTangent) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatKey_GetArriveTangent");
static_assert(sizeof(MovieSceneScriptingFloatKey_GetArriveTangent) == 0x000004, "Wrong size on MovieSceneScriptingFloatKey_GetArriveTangent");
static_assert(offsetof(MovieSceneScriptingFloatKey_GetArriveTangent, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_GetArriveTangent::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.GetArriveTangentWeight
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatKey_GetArriveTangentWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_GetArriveTangentWeight) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatKey_GetArriveTangentWeight");
static_assert(sizeof(MovieSceneScriptingFloatKey_GetArriveTangentWeight) == 0x000004, "Wrong size on MovieSceneScriptingFloatKey_GetArriveTangentWeight");
static_assert(offsetof(MovieSceneScriptingFloatKey_GetArriveTangentWeight, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_GetArriveTangentWeight::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.GetInterpolationMode
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingFloatKey_GetInterpolationMode final
{
public:
	ERichCurveInterpMode                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_GetInterpolationMode) == 0x000001, "Wrong alignment on MovieSceneScriptingFloatKey_GetInterpolationMode");
static_assert(sizeof(MovieSceneScriptingFloatKey_GetInterpolationMode) == 0x000001, "Wrong size on MovieSceneScriptingFloatKey_GetInterpolationMode");
static_assert(offsetof(MovieSceneScriptingFloatKey_GetInterpolationMode, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_GetInterpolationMode::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.GetLeaveTangent
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatKey_GetLeaveTangent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_GetLeaveTangent) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatKey_GetLeaveTangent");
static_assert(sizeof(MovieSceneScriptingFloatKey_GetLeaveTangent) == 0x000004, "Wrong size on MovieSceneScriptingFloatKey_GetLeaveTangent");
static_assert(offsetof(MovieSceneScriptingFloatKey_GetLeaveTangent, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_GetLeaveTangent::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.GetLeaveTangentWeight
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatKey_GetLeaveTangentWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_GetLeaveTangentWeight) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatKey_GetLeaveTangentWeight");
static_assert(sizeof(MovieSceneScriptingFloatKey_GetLeaveTangentWeight) == 0x000004, "Wrong size on MovieSceneScriptingFloatKey_GetLeaveTangentWeight");
static_assert(offsetof(MovieSceneScriptingFloatKey_GetLeaveTangentWeight, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_GetLeaveTangentWeight::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.GetTangentMode
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingFloatKey_GetTangentMode final
{
public:
	ERichCurveTangentMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_GetTangentMode) == 0x000001, "Wrong alignment on MovieSceneScriptingFloatKey_GetTangentMode");
static_assert(sizeof(MovieSceneScriptingFloatKey_GetTangentMode) == 0x000001, "Wrong size on MovieSceneScriptingFloatKey_GetTangentMode");
static_assert(offsetof(MovieSceneScriptingFloatKey_GetTangentMode, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_GetTangentMode::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.GetTangentWeightMode
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingFloatKey_GetTangentWeightMode final
{
public:
	ERichCurveTangentWeightMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_GetTangentWeightMode) == 0x000001, "Wrong alignment on MovieSceneScriptingFloatKey_GetTangentWeightMode");
static_assert(sizeof(MovieSceneScriptingFloatKey_GetTangentWeightMode) == 0x000001, "Wrong size on MovieSceneScriptingFloatKey_GetTangentWeightMode");
static_assert(offsetof(MovieSceneScriptingFloatKey_GetTangentWeightMode, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_GetTangentWeightMode::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.GetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingFloatKey_GetTime final
{
public:
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameTime                             ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_GetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatKey_GetTime");
static_assert(sizeof(MovieSceneScriptingFloatKey_GetTime) == 0x00000C, "Wrong size on MovieSceneScriptingFloatKey_GetTime");
static_assert(offsetof(MovieSceneScriptingFloatKey_GetTime, TimeUnit) == 0x000000, "Member 'MovieSceneScriptingFloatKey_GetTime::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingFloatKey_GetTime, ReturnValue) == 0x000004, "Member 'MovieSceneScriptingFloatKey_GetTime::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatKey.GetValue
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatKey_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatKey_GetValue) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatKey_GetValue");
static_assert(sizeof(MovieSceneScriptingFloatKey_GetValue) == 0x000004, "Wrong size on MovieSceneScriptingFloatKey_GetValue");
static_assert(offsetof(MovieSceneScriptingFloatKey_GetValue, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatKey_GetValue::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.AddKey
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneScriptingFloatChannel_AddKey final
{
public:
	struct FFrameNumber                           InTime;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneKeyInterpolation                   InInterpolation;                                   // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneScriptingFloatKey*           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_AddKey) == 0x000008, "Wrong alignment on MovieSceneScriptingFloatChannel_AddKey");
static_assert(sizeof(MovieSceneScriptingFloatChannel_AddKey) == 0x000018, "Wrong size on MovieSceneScriptingFloatChannel_AddKey");
static_assert(offsetof(MovieSceneScriptingFloatChannel_AddKey, InTime) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_AddKey::InTime' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingFloatChannel_AddKey, NewValue) == 0x000004, "Member 'MovieSceneScriptingFloatChannel_AddKey::NewValue' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingFloatChannel_AddKey, SubFrame) == 0x000008, "Member 'MovieSceneScriptingFloatChannel_AddKey::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingFloatChannel_AddKey, TimeUnit) == 0x00000C, "Member 'MovieSceneScriptingFloatChannel_AddKey::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingFloatChannel_AddKey, InInterpolation) == 0x00000D, "Member 'MovieSceneScriptingFloatChannel_AddKey::InInterpolation' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingFloatChannel_AddKey, ReturnValue) == 0x000010, "Member 'MovieSceneScriptingFloatChannel_AddKey::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.RemoveKey
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneScriptingFloatChannel_RemoveKey final
{
public:
	class UMovieSceneScriptingKey*                Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_RemoveKey) == 0x000008, "Wrong alignment on MovieSceneScriptingFloatChannel_RemoveKey");
static_assert(sizeof(MovieSceneScriptingFloatChannel_RemoveKey) == 0x000008, "Wrong size on MovieSceneScriptingFloatChannel_RemoveKey");
static_assert(offsetof(MovieSceneScriptingFloatChannel_RemoveKey, Key) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_RemoveKey::Key' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.SetDefault
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatChannel_SetDefault final
{
public:
	float                                         InDefaultValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_SetDefault) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatChannel_SetDefault");
static_assert(sizeof(MovieSceneScriptingFloatChannel_SetDefault) == 0x000004, "Wrong size on MovieSceneScriptingFloatChannel_SetDefault");
static_assert(offsetof(MovieSceneScriptingFloatChannel_SetDefault, InDefaultValue) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_SetDefault::InDefaultValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.SetPostInfinityExtrapolation
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingFloatChannel_SetPostInfinityExtrapolation final
{
public:
	ERichCurveExtrapolation                       InExtrapolation;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_SetPostInfinityExtrapolation) == 0x000001, "Wrong alignment on MovieSceneScriptingFloatChannel_SetPostInfinityExtrapolation");
static_assert(sizeof(MovieSceneScriptingFloatChannel_SetPostInfinityExtrapolation) == 0x000001, "Wrong size on MovieSceneScriptingFloatChannel_SetPostInfinityExtrapolation");
static_assert(offsetof(MovieSceneScriptingFloatChannel_SetPostInfinityExtrapolation, InExtrapolation) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_SetPostInfinityExtrapolation::InExtrapolation' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.SetPreInfinityExtrapolation
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingFloatChannel_SetPreInfinityExtrapolation final
{
public:
	ERichCurveExtrapolation                       InExtrapolation;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_SetPreInfinityExtrapolation) == 0x000001, "Wrong alignment on MovieSceneScriptingFloatChannel_SetPreInfinityExtrapolation");
static_assert(sizeof(MovieSceneScriptingFloatChannel_SetPreInfinityExtrapolation) == 0x000001, "Wrong size on MovieSceneScriptingFloatChannel_SetPreInfinityExtrapolation");
static_assert(offsetof(MovieSceneScriptingFloatChannel_SetPreInfinityExtrapolation, InExtrapolation) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_SetPreInfinityExtrapolation::InExtrapolation' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.ComputeEffectiveRange
// 0x0014 (0x0014 - 0x0000)
struct MovieSceneScriptingFloatChannel_ComputeEffectiveRange final
{
public:
	struct FSequencerScriptingRange               ReturnValue;                                       // 0x0000(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_ComputeEffectiveRange) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatChannel_ComputeEffectiveRange");
static_assert(sizeof(MovieSceneScriptingFloatChannel_ComputeEffectiveRange) == 0x000014, "Wrong size on MovieSceneScriptingFloatChannel_ComputeEffectiveRange");
static_assert(offsetof(MovieSceneScriptingFloatChannel_ComputeEffectiveRange, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_ComputeEffectiveRange::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.EvaluateKeys
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneScriptingFloatChannel_EvaluateKeys final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FFrameRate                             FrameRate;                                         // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_EvaluateKeys) == 0x000008, "Wrong alignment on MovieSceneScriptingFloatChannel_EvaluateKeys");
static_assert(sizeof(MovieSceneScriptingFloatChannel_EvaluateKeys) == 0x000030, "Wrong size on MovieSceneScriptingFloatChannel_EvaluateKeys");
static_assert(offsetof(MovieSceneScriptingFloatChannel_EvaluateKeys, Range) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_EvaluateKeys::Range' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingFloatChannel_EvaluateKeys, FrameRate) == 0x000014, "Member 'MovieSceneScriptingFloatChannel_EvaluateKeys::FrameRate' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingFloatChannel_EvaluateKeys, ReturnValue) == 0x000020, "Member 'MovieSceneScriptingFloatChannel_EvaluateKeys::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.GetDefault
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatChannel_GetDefault final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_GetDefault) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatChannel_GetDefault");
static_assert(sizeof(MovieSceneScriptingFloatChannel_GetDefault) == 0x000004, "Wrong size on MovieSceneScriptingFloatChannel_GetDefault");
static_assert(offsetof(MovieSceneScriptingFloatChannel_GetDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_GetDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.GetKeys
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneScriptingFloatChannel_GetKeys final
{
public:
	TArray<class UMovieSceneScriptingKey*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_GetKeys) == 0x000008, "Wrong alignment on MovieSceneScriptingFloatChannel_GetKeys");
static_assert(sizeof(MovieSceneScriptingFloatChannel_GetKeys) == 0x000010, "Wrong size on MovieSceneScriptingFloatChannel_GetKeys");
static_assert(offsetof(MovieSceneScriptingFloatChannel_GetKeys, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_GetKeys::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.GetNumKeys
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingFloatChannel_GetNumKeys final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_GetNumKeys) == 0x000004, "Wrong alignment on MovieSceneScriptingFloatChannel_GetNumKeys");
static_assert(sizeof(MovieSceneScriptingFloatChannel_GetNumKeys) == 0x000004, "Wrong size on MovieSceneScriptingFloatChannel_GetNumKeys");
static_assert(offsetof(MovieSceneScriptingFloatChannel_GetNumKeys, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_GetNumKeys::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.GetPostInfinityExtrapolation
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingFloatChannel_GetPostInfinityExtrapolation final
{
public:
	ERichCurveExtrapolation                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_GetPostInfinityExtrapolation) == 0x000001, "Wrong alignment on MovieSceneScriptingFloatChannel_GetPostInfinityExtrapolation");
static_assert(sizeof(MovieSceneScriptingFloatChannel_GetPostInfinityExtrapolation) == 0x000001, "Wrong size on MovieSceneScriptingFloatChannel_GetPostInfinityExtrapolation");
static_assert(offsetof(MovieSceneScriptingFloatChannel_GetPostInfinityExtrapolation, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_GetPostInfinityExtrapolation::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.GetPreInfinityExtrapolation
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingFloatChannel_GetPreInfinityExtrapolation final
{
public:
	ERichCurveExtrapolation                       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_GetPreInfinityExtrapolation) == 0x000001, "Wrong alignment on MovieSceneScriptingFloatChannel_GetPreInfinityExtrapolation");
static_assert(sizeof(MovieSceneScriptingFloatChannel_GetPreInfinityExtrapolation) == 0x000001, "Wrong size on MovieSceneScriptingFloatChannel_GetPreInfinityExtrapolation");
static_assert(offsetof(MovieSceneScriptingFloatChannel_GetPreInfinityExtrapolation, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_GetPreInfinityExtrapolation::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingFloatChannel.HasDefault
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingFloatChannel_HasDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingFloatChannel_HasDefault) == 0x000001, "Wrong alignment on MovieSceneScriptingFloatChannel_HasDefault");
static_assert(sizeof(MovieSceneScriptingFloatChannel_HasDefault) == 0x000001, "Wrong size on MovieSceneScriptingFloatChannel_HasDefault");
static_assert(offsetof(MovieSceneScriptingFloatChannel_HasDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingFloatChannel_HasDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingIntegerKey.SetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingIntegerKey_SetTime final
{
public:
	struct FFrameNumber                           NewFrameNumber;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneScriptingIntegerKey_SetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingIntegerKey_SetTime");
static_assert(sizeof(MovieSceneScriptingIntegerKey_SetTime) == 0x00000C, "Wrong size on MovieSceneScriptingIntegerKey_SetTime");
static_assert(offsetof(MovieSceneScriptingIntegerKey_SetTime, NewFrameNumber) == 0x000000, "Member 'MovieSceneScriptingIntegerKey_SetTime::NewFrameNumber' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingIntegerKey_SetTime, SubFrame) == 0x000004, "Member 'MovieSceneScriptingIntegerKey_SetTime::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingIntegerKey_SetTime, TimeUnit) == 0x000008, "Member 'MovieSceneScriptingIntegerKey_SetTime::TimeUnit' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingIntegerKey.SetValue
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingIntegerKey_SetValue final
{
public:
	int32                                         InNewValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingIntegerKey_SetValue) == 0x000004, "Wrong alignment on MovieSceneScriptingIntegerKey_SetValue");
static_assert(sizeof(MovieSceneScriptingIntegerKey_SetValue) == 0x000004, "Wrong size on MovieSceneScriptingIntegerKey_SetValue");
static_assert(offsetof(MovieSceneScriptingIntegerKey_SetValue, InNewValue) == 0x000000, "Member 'MovieSceneScriptingIntegerKey_SetValue::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingIntegerKey.GetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingIntegerKey_GetTime final
{
public:
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameTime                             ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingIntegerKey_GetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingIntegerKey_GetTime");
static_assert(sizeof(MovieSceneScriptingIntegerKey_GetTime) == 0x00000C, "Wrong size on MovieSceneScriptingIntegerKey_GetTime");
static_assert(offsetof(MovieSceneScriptingIntegerKey_GetTime, TimeUnit) == 0x000000, "Member 'MovieSceneScriptingIntegerKey_GetTime::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingIntegerKey_GetTime, ReturnValue) == 0x000004, "Member 'MovieSceneScriptingIntegerKey_GetTime::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingIntegerKey.GetValue
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingIntegerKey_GetValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingIntegerKey_GetValue) == 0x000004, "Wrong alignment on MovieSceneScriptingIntegerKey_GetValue");
static_assert(sizeof(MovieSceneScriptingIntegerKey_GetValue) == 0x000004, "Wrong size on MovieSceneScriptingIntegerKey_GetValue");
static_assert(offsetof(MovieSceneScriptingIntegerKey_GetValue, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingIntegerKey_GetValue::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingIntegerChannel.AddKey
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneScriptingIntegerChannel_AddKey final
{
public:
	struct FFrameNumber                           InTime;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneScriptingIntegerKey*         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingIntegerChannel_AddKey) == 0x000008, "Wrong alignment on MovieSceneScriptingIntegerChannel_AddKey");
static_assert(sizeof(MovieSceneScriptingIntegerChannel_AddKey) == 0x000018, "Wrong size on MovieSceneScriptingIntegerChannel_AddKey");
static_assert(offsetof(MovieSceneScriptingIntegerChannel_AddKey, InTime) == 0x000000, "Member 'MovieSceneScriptingIntegerChannel_AddKey::InTime' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingIntegerChannel_AddKey, NewValue) == 0x000004, "Member 'MovieSceneScriptingIntegerChannel_AddKey::NewValue' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingIntegerChannel_AddKey, SubFrame) == 0x000008, "Member 'MovieSceneScriptingIntegerChannel_AddKey::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingIntegerChannel_AddKey, TimeUnit) == 0x00000C, "Member 'MovieSceneScriptingIntegerChannel_AddKey::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingIntegerChannel_AddKey, ReturnValue) == 0x000010, "Member 'MovieSceneScriptingIntegerChannel_AddKey::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingIntegerChannel.RemoveKey
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneScriptingIntegerChannel_RemoveKey final
{
public:
	class UMovieSceneScriptingKey*                Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingIntegerChannel_RemoveKey) == 0x000008, "Wrong alignment on MovieSceneScriptingIntegerChannel_RemoveKey");
static_assert(sizeof(MovieSceneScriptingIntegerChannel_RemoveKey) == 0x000008, "Wrong size on MovieSceneScriptingIntegerChannel_RemoveKey");
static_assert(offsetof(MovieSceneScriptingIntegerChannel_RemoveKey, Key) == 0x000000, "Member 'MovieSceneScriptingIntegerChannel_RemoveKey::Key' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingIntegerChannel.SetDefault
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingIntegerChannel_SetDefault final
{
public:
	int32                                         InDefaultValue;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingIntegerChannel_SetDefault) == 0x000004, "Wrong alignment on MovieSceneScriptingIntegerChannel_SetDefault");
static_assert(sizeof(MovieSceneScriptingIntegerChannel_SetDefault) == 0x000004, "Wrong size on MovieSceneScriptingIntegerChannel_SetDefault");
static_assert(offsetof(MovieSceneScriptingIntegerChannel_SetDefault, InDefaultValue) == 0x000000, "Member 'MovieSceneScriptingIntegerChannel_SetDefault::InDefaultValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingIntegerChannel.GetDefault
// 0x0004 (0x0004 - 0x0000)
struct MovieSceneScriptingIntegerChannel_GetDefault final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingIntegerChannel_GetDefault) == 0x000004, "Wrong alignment on MovieSceneScriptingIntegerChannel_GetDefault");
static_assert(sizeof(MovieSceneScriptingIntegerChannel_GetDefault) == 0x000004, "Wrong size on MovieSceneScriptingIntegerChannel_GetDefault");
static_assert(offsetof(MovieSceneScriptingIntegerChannel_GetDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingIntegerChannel_GetDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingIntegerChannel.GetKeys
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneScriptingIntegerChannel_GetKeys final
{
public:
	TArray<class UMovieSceneScriptingKey*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingIntegerChannel_GetKeys) == 0x000008, "Wrong alignment on MovieSceneScriptingIntegerChannel_GetKeys");
static_assert(sizeof(MovieSceneScriptingIntegerChannel_GetKeys) == 0x000010, "Wrong size on MovieSceneScriptingIntegerChannel_GetKeys");
static_assert(offsetof(MovieSceneScriptingIntegerChannel_GetKeys, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingIntegerChannel_GetKeys::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingIntegerChannel.HasDefault
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingIntegerChannel_HasDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingIntegerChannel_HasDefault) == 0x000001, "Wrong alignment on MovieSceneScriptingIntegerChannel_HasDefault");
static_assert(sizeof(MovieSceneScriptingIntegerChannel_HasDefault) == 0x000001, "Wrong size on MovieSceneScriptingIntegerChannel_HasDefault");
static_assert(offsetof(MovieSceneScriptingIntegerChannel_HasDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingIntegerChannel_HasDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingObjectPathKey.SetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingObjectPathKey_SetTime final
{
public:
	struct FFrameNumber                           NewFrameNumber;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneScriptingObjectPathKey_SetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingObjectPathKey_SetTime");
static_assert(sizeof(MovieSceneScriptingObjectPathKey_SetTime) == 0x00000C, "Wrong size on MovieSceneScriptingObjectPathKey_SetTime");
static_assert(offsetof(MovieSceneScriptingObjectPathKey_SetTime, NewFrameNumber) == 0x000000, "Member 'MovieSceneScriptingObjectPathKey_SetTime::NewFrameNumber' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingObjectPathKey_SetTime, SubFrame) == 0x000004, "Member 'MovieSceneScriptingObjectPathKey_SetTime::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingObjectPathKey_SetTime, TimeUnit) == 0x000008, "Member 'MovieSceneScriptingObjectPathKey_SetTime::TimeUnit' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingObjectPathKey.SetValue
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneScriptingObjectPathKey_SetValue final
{
public:
	class UObject*                                InNewValue;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingObjectPathKey_SetValue) == 0x000008, "Wrong alignment on MovieSceneScriptingObjectPathKey_SetValue");
static_assert(sizeof(MovieSceneScriptingObjectPathKey_SetValue) == 0x000008, "Wrong size on MovieSceneScriptingObjectPathKey_SetValue");
static_assert(offsetof(MovieSceneScriptingObjectPathKey_SetValue, InNewValue) == 0x000000, "Member 'MovieSceneScriptingObjectPathKey_SetValue::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingObjectPathKey.GetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingObjectPathKey_GetTime final
{
public:
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameTime                             ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingObjectPathKey_GetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingObjectPathKey_GetTime");
static_assert(sizeof(MovieSceneScriptingObjectPathKey_GetTime) == 0x00000C, "Wrong size on MovieSceneScriptingObjectPathKey_GetTime");
static_assert(offsetof(MovieSceneScriptingObjectPathKey_GetTime, TimeUnit) == 0x000000, "Member 'MovieSceneScriptingObjectPathKey_GetTime::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingObjectPathKey_GetTime, ReturnValue) == 0x000004, "Member 'MovieSceneScriptingObjectPathKey_GetTime::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingObjectPathKey.GetValue
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneScriptingObjectPathKey_GetValue final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingObjectPathKey_GetValue) == 0x000008, "Wrong alignment on MovieSceneScriptingObjectPathKey_GetValue");
static_assert(sizeof(MovieSceneScriptingObjectPathKey_GetValue) == 0x000008, "Wrong size on MovieSceneScriptingObjectPathKey_GetValue");
static_assert(offsetof(MovieSceneScriptingObjectPathKey_GetValue, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingObjectPathKey_GetValue::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingObjectPathChannel.AddKey
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneScriptingObjectPathChannel_AddKey final
{
public:
	struct FFrameNumber                           InTime;                                            // 0x0000(0x0004)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                NewValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneScriptingObjectPathKey*      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingObjectPathChannel_AddKey) == 0x000008, "Wrong alignment on MovieSceneScriptingObjectPathChannel_AddKey");
static_assert(sizeof(MovieSceneScriptingObjectPathChannel_AddKey) == 0x000020, "Wrong size on MovieSceneScriptingObjectPathChannel_AddKey");
static_assert(offsetof(MovieSceneScriptingObjectPathChannel_AddKey, InTime) == 0x000000, "Member 'MovieSceneScriptingObjectPathChannel_AddKey::InTime' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingObjectPathChannel_AddKey, NewValue) == 0x000008, "Member 'MovieSceneScriptingObjectPathChannel_AddKey::NewValue' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingObjectPathChannel_AddKey, SubFrame) == 0x000010, "Member 'MovieSceneScriptingObjectPathChannel_AddKey::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingObjectPathChannel_AddKey, TimeUnit) == 0x000014, "Member 'MovieSceneScriptingObjectPathChannel_AddKey::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingObjectPathChannel_AddKey, ReturnValue) == 0x000018, "Member 'MovieSceneScriptingObjectPathChannel_AddKey::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingObjectPathChannel.RemoveKey
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneScriptingObjectPathChannel_RemoveKey final
{
public:
	class UMovieSceneScriptingKey*                Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingObjectPathChannel_RemoveKey) == 0x000008, "Wrong alignment on MovieSceneScriptingObjectPathChannel_RemoveKey");
static_assert(sizeof(MovieSceneScriptingObjectPathChannel_RemoveKey) == 0x000008, "Wrong size on MovieSceneScriptingObjectPathChannel_RemoveKey");
static_assert(offsetof(MovieSceneScriptingObjectPathChannel_RemoveKey, Key) == 0x000000, "Member 'MovieSceneScriptingObjectPathChannel_RemoveKey::Key' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingObjectPathChannel.SetDefault
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneScriptingObjectPathChannel_SetDefault final
{
public:
	class UObject*                                InDefaultValue;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingObjectPathChannel_SetDefault) == 0x000008, "Wrong alignment on MovieSceneScriptingObjectPathChannel_SetDefault");
static_assert(sizeof(MovieSceneScriptingObjectPathChannel_SetDefault) == 0x000008, "Wrong size on MovieSceneScriptingObjectPathChannel_SetDefault");
static_assert(offsetof(MovieSceneScriptingObjectPathChannel_SetDefault, InDefaultValue) == 0x000000, "Member 'MovieSceneScriptingObjectPathChannel_SetDefault::InDefaultValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingObjectPathChannel.GetDefault
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneScriptingObjectPathChannel_GetDefault final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingObjectPathChannel_GetDefault) == 0x000008, "Wrong alignment on MovieSceneScriptingObjectPathChannel_GetDefault");
static_assert(sizeof(MovieSceneScriptingObjectPathChannel_GetDefault) == 0x000008, "Wrong size on MovieSceneScriptingObjectPathChannel_GetDefault");
static_assert(offsetof(MovieSceneScriptingObjectPathChannel_GetDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingObjectPathChannel_GetDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingObjectPathChannel.GetKeys
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneScriptingObjectPathChannel_GetKeys final
{
public:
	TArray<class UMovieSceneScriptingKey*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingObjectPathChannel_GetKeys) == 0x000008, "Wrong alignment on MovieSceneScriptingObjectPathChannel_GetKeys");
static_assert(sizeof(MovieSceneScriptingObjectPathChannel_GetKeys) == 0x000010, "Wrong size on MovieSceneScriptingObjectPathChannel_GetKeys");
static_assert(offsetof(MovieSceneScriptingObjectPathChannel_GetKeys, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingObjectPathChannel_GetKeys::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingObjectPathChannel.HasDefault
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingObjectPathChannel_HasDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingObjectPathChannel_HasDefault) == 0x000001, "Wrong alignment on MovieSceneScriptingObjectPathChannel_HasDefault");
static_assert(sizeof(MovieSceneScriptingObjectPathChannel_HasDefault) == 0x000001, "Wrong size on MovieSceneScriptingObjectPathChannel_HasDefault");
static_assert(offsetof(MovieSceneScriptingObjectPathChannel_HasDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingObjectPathChannel_HasDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingStringKey.SetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingStringKey_SetTime final
{
public:
	struct FFrameNumber                           NewFrameNumber;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneScriptingStringKey_SetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingStringKey_SetTime");
static_assert(sizeof(MovieSceneScriptingStringKey_SetTime) == 0x00000C, "Wrong size on MovieSceneScriptingStringKey_SetTime");
static_assert(offsetof(MovieSceneScriptingStringKey_SetTime, NewFrameNumber) == 0x000000, "Member 'MovieSceneScriptingStringKey_SetTime::NewFrameNumber' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingStringKey_SetTime, SubFrame) == 0x000004, "Member 'MovieSceneScriptingStringKey_SetTime::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingStringKey_SetTime, TimeUnit) == 0x000008, "Member 'MovieSceneScriptingStringKey_SetTime::TimeUnit' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingStringKey.SetValue
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneScriptingStringKey_SetValue final
{
public:
	class FString                                 InNewValue;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingStringKey_SetValue) == 0x000008, "Wrong alignment on MovieSceneScriptingStringKey_SetValue");
static_assert(sizeof(MovieSceneScriptingStringKey_SetValue) == 0x000010, "Wrong size on MovieSceneScriptingStringKey_SetValue");
static_assert(offsetof(MovieSceneScriptingStringKey_SetValue, InNewValue) == 0x000000, "Member 'MovieSceneScriptingStringKey_SetValue::InNewValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingStringKey.GetTime
// 0x000C (0x000C - 0x0000)
struct MovieSceneScriptingStringKey_GetTime final
{
public:
	ESequenceTimeUnit                             TimeUnit;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameTime                             ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingStringKey_GetTime) == 0x000004, "Wrong alignment on MovieSceneScriptingStringKey_GetTime");
static_assert(sizeof(MovieSceneScriptingStringKey_GetTime) == 0x00000C, "Wrong size on MovieSceneScriptingStringKey_GetTime");
static_assert(offsetof(MovieSceneScriptingStringKey_GetTime, TimeUnit) == 0x000000, "Member 'MovieSceneScriptingStringKey_GetTime::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingStringKey_GetTime, ReturnValue) == 0x000004, "Member 'MovieSceneScriptingStringKey_GetTime::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingStringKey.GetValue
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneScriptingStringKey_GetValue final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingStringKey_GetValue) == 0x000008, "Wrong alignment on MovieSceneScriptingStringKey_GetValue");
static_assert(sizeof(MovieSceneScriptingStringKey_GetValue) == 0x000010, "Wrong size on MovieSceneScriptingStringKey_GetValue");
static_assert(offsetof(MovieSceneScriptingStringKey_GetValue, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingStringKey_GetValue::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingStringChannel.AddKey
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneScriptingStringChannel_AddKey final
{
public:
	struct FFrameNumber                           InTime;                                            // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NewValue;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SubFrame;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESequenceTimeUnit                             TimeUnit;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneScriptingStringKey*          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingStringChannel_AddKey) == 0x000008, "Wrong alignment on MovieSceneScriptingStringChannel_AddKey");
static_assert(sizeof(MovieSceneScriptingStringChannel_AddKey) == 0x000028, "Wrong size on MovieSceneScriptingStringChannel_AddKey");
static_assert(offsetof(MovieSceneScriptingStringChannel_AddKey, InTime) == 0x000000, "Member 'MovieSceneScriptingStringChannel_AddKey::InTime' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingStringChannel_AddKey, NewValue) == 0x000008, "Member 'MovieSceneScriptingStringChannel_AddKey::NewValue' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingStringChannel_AddKey, SubFrame) == 0x000018, "Member 'MovieSceneScriptingStringChannel_AddKey::SubFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingStringChannel_AddKey, TimeUnit) == 0x00001C, "Member 'MovieSceneScriptingStringChannel_AddKey::TimeUnit' has a wrong offset!");
static_assert(offsetof(MovieSceneScriptingStringChannel_AddKey, ReturnValue) == 0x000020, "Member 'MovieSceneScriptingStringChannel_AddKey::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingStringChannel.RemoveKey
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneScriptingStringChannel_RemoveKey final
{
public:
	class UMovieSceneScriptingKey*                Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingStringChannel_RemoveKey) == 0x000008, "Wrong alignment on MovieSceneScriptingStringChannel_RemoveKey");
static_assert(sizeof(MovieSceneScriptingStringChannel_RemoveKey) == 0x000008, "Wrong size on MovieSceneScriptingStringChannel_RemoveKey");
static_assert(offsetof(MovieSceneScriptingStringChannel_RemoveKey, Key) == 0x000000, "Member 'MovieSceneScriptingStringChannel_RemoveKey::Key' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingStringChannel.SetDefault
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneScriptingStringChannel_SetDefault final
{
public:
	class FString                                 InDefaultValue;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingStringChannel_SetDefault) == 0x000008, "Wrong alignment on MovieSceneScriptingStringChannel_SetDefault");
static_assert(sizeof(MovieSceneScriptingStringChannel_SetDefault) == 0x000010, "Wrong size on MovieSceneScriptingStringChannel_SetDefault");
static_assert(offsetof(MovieSceneScriptingStringChannel_SetDefault, InDefaultValue) == 0x000000, "Member 'MovieSceneScriptingStringChannel_SetDefault::InDefaultValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingStringChannel.GetDefault
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneScriptingStringChannel_GetDefault final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingStringChannel_GetDefault) == 0x000008, "Wrong alignment on MovieSceneScriptingStringChannel_GetDefault");
static_assert(sizeof(MovieSceneScriptingStringChannel_GetDefault) == 0x000010, "Wrong size on MovieSceneScriptingStringChannel_GetDefault");
static_assert(offsetof(MovieSceneScriptingStringChannel_GetDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingStringChannel_GetDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingStringChannel.GetKeys
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneScriptingStringChannel_GetKeys final
{
public:
	TArray<class UMovieSceneScriptingKey*>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingStringChannel_GetKeys) == 0x000008, "Wrong alignment on MovieSceneScriptingStringChannel_GetKeys");
static_assert(sizeof(MovieSceneScriptingStringChannel_GetKeys) == 0x000010, "Wrong size on MovieSceneScriptingStringChannel_GetKeys");
static_assert(offsetof(MovieSceneScriptingStringChannel_GetKeys, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingStringChannel_GetKeys::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneScriptingStringChannel.HasDefault
// 0x0001 (0x0001 - 0x0000)
struct MovieSceneScriptingStringChannel_HasDefault final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneScriptingStringChannel_HasDefault) == 0x000001, "Wrong alignment on MovieSceneScriptingStringChannel_HasDefault");
static_assert(sizeof(MovieSceneScriptingStringChannel_HasDefault) == 0x000001, "Wrong size on MovieSceneScriptingStringChannel_HasDefault");
static_assert(offsetof(MovieSceneScriptingStringChannel_HasDefault, ReturnValue) == 0x000000, "Member 'MovieSceneScriptingStringChannel_HasDefault::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.FindChannelsByType
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneSectionExtensions_FindChannelsByType final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMovieSceneScriptingChannel> ChannelType;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneScriptingChannel*>    ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSectionExtensions_FindChannelsByType) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_FindChannelsByType");
static_assert(sizeof(MovieSceneSectionExtensions_FindChannelsByType) == 0x000020, "Wrong size on MovieSceneSectionExtensions_FindChannelsByType");
static_assert(offsetof(MovieSceneSectionExtensions_FindChannelsByType, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_FindChannelsByType::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_FindChannelsByType, ChannelType) == 0x000008, "Member 'MovieSceneSectionExtensions_FindChannelsByType::ChannelType' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_FindChannelsByType, ReturnValue) == 0x000010, "Member 'MovieSceneSectionExtensions_FindChannelsByType::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.GetChannels
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneSectionExtensions_GetChannels final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneScriptingChannel*>    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSectionExtensions_GetChannels) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_GetChannels");
static_assert(sizeof(MovieSceneSectionExtensions_GetChannels) == 0x000018, "Wrong size on MovieSceneSectionExtensions_GetChannels");
static_assert(offsetof(MovieSceneSectionExtensions_GetChannels, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_GetChannels::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_GetChannels, ReturnValue) == 0x000008, "Member 'MovieSceneSectionExtensions_GetChannels::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.GetEndFrame
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_GetEndFrame final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_GetEndFrame) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_GetEndFrame");
static_assert(sizeof(MovieSceneSectionExtensions_GetEndFrame) == 0x000010, "Wrong size on MovieSceneSectionExtensions_GetEndFrame");
static_assert(offsetof(MovieSceneSectionExtensions_GetEndFrame, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_GetEndFrame::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_GetEndFrame, ReturnValue) == 0x000008, "Member 'MovieSceneSectionExtensions_GetEndFrame::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.GetEndFrameSeconds
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_GetEndFrameSeconds final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_GetEndFrameSeconds) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_GetEndFrameSeconds");
static_assert(sizeof(MovieSceneSectionExtensions_GetEndFrameSeconds) == 0x000010, "Wrong size on MovieSceneSectionExtensions_GetEndFrameSeconds");
static_assert(offsetof(MovieSceneSectionExtensions_GetEndFrameSeconds, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_GetEndFrameSeconds::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_GetEndFrameSeconds, ReturnValue) == 0x000008, "Member 'MovieSceneSectionExtensions_GetEndFrameSeconds::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.GetParentSequenceFrame
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneSectionExtensions_GetParentSequenceFrame final
{
public:
	class UMovieSceneSubSection*                  Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InFrame;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMovieSceneSequence*                    ParentSequence;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_GetParentSequenceFrame) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_GetParentSequenceFrame");
static_assert(sizeof(MovieSceneSectionExtensions_GetParentSequenceFrame) == 0x000020, "Wrong size on MovieSceneSectionExtensions_GetParentSequenceFrame");
static_assert(offsetof(MovieSceneSectionExtensions_GetParentSequenceFrame, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_GetParentSequenceFrame::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_GetParentSequenceFrame, InFrame) == 0x000008, "Member 'MovieSceneSectionExtensions_GetParentSequenceFrame::InFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_GetParentSequenceFrame, ParentSequence) == 0x000010, "Member 'MovieSceneSectionExtensions_GetParentSequenceFrame::ParentSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_GetParentSequenceFrame, ReturnValue) == 0x000018, "Member 'MovieSceneSectionExtensions_GetParentSequenceFrame::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.GetStartFrame
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_GetStartFrame final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_GetStartFrame) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_GetStartFrame");
static_assert(sizeof(MovieSceneSectionExtensions_GetStartFrame) == 0x000010, "Wrong size on MovieSceneSectionExtensions_GetStartFrame");
static_assert(offsetof(MovieSceneSectionExtensions_GetStartFrame, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_GetStartFrame::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_GetStartFrame, ReturnValue) == 0x000008, "Member 'MovieSceneSectionExtensions_GetStartFrame::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.GetStartFrameSeconds
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_GetStartFrameSeconds final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_GetStartFrameSeconds) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_GetStartFrameSeconds");
static_assert(sizeof(MovieSceneSectionExtensions_GetStartFrameSeconds) == 0x000010, "Wrong size on MovieSceneSectionExtensions_GetStartFrameSeconds");
static_assert(offsetof(MovieSceneSectionExtensions_GetStartFrameSeconds, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_GetStartFrameSeconds::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_GetStartFrameSeconds, ReturnValue) == 0x000008, "Member 'MovieSceneSectionExtensions_GetStartFrameSeconds::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.HasEndFrame
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_HasEndFrame final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_HasEndFrame) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_HasEndFrame");
static_assert(sizeof(MovieSceneSectionExtensions_HasEndFrame) == 0x000010, "Wrong size on MovieSceneSectionExtensions_HasEndFrame");
static_assert(offsetof(MovieSceneSectionExtensions_HasEndFrame, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_HasEndFrame::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_HasEndFrame, ReturnValue) == 0x000008, "Member 'MovieSceneSectionExtensions_HasEndFrame::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.HasStartFrame
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_HasStartFrame final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_HasStartFrame) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_HasStartFrame");
static_assert(sizeof(MovieSceneSectionExtensions_HasStartFrame) == 0x000010, "Wrong size on MovieSceneSectionExtensions_HasStartFrame");
static_assert(offsetof(MovieSceneSectionExtensions_HasStartFrame, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_HasStartFrame::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_HasStartFrame, ReturnValue) == 0x000008, "Member 'MovieSceneSectionExtensions_HasStartFrame::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.SetEndFrame
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_SetEndFrame final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_SetEndFrame) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_SetEndFrame");
static_assert(sizeof(MovieSceneSectionExtensions_SetEndFrame) == 0x000010, "Wrong size on MovieSceneSectionExtensions_SetEndFrame");
static_assert(offsetof(MovieSceneSectionExtensions_SetEndFrame, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_SetEndFrame::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_SetEndFrame, EndFrame) == 0x000008, "Member 'MovieSceneSectionExtensions_SetEndFrame::EndFrame' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.SetEndFrameBounded
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_SetEndFrameBounded final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBounded;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_SetEndFrameBounded) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_SetEndFrameBounded");
static_assert(sizeof(MovieSceneSectionExtensions_SetEndFrameBounded) == 0x000010, "Wrong size on MovieSceneSectionExtensions_SetEndFrameBounded");
static_assert(offsetof(MovieSceneSectionExtensions_SetEndFrameBounded, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_SetEndFrameBounded::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_SetEndFrameBounded, bIsBounded) == 0x000008, "Member 'MovieSceneSectionExtensions_SetEndFrameBounded::bIsBounded' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.SetEndFrameSeconds
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_SetEndFrameSeconds final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_SetEndFrameSeconds) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_SetEndFrameSeconds");
static_assert(sizeof(MovieSceneSectionExtensions_SetEndFrameSeconds) == 0x000010, "Wrong size on MovieSceneSectionExtensions_SetEndFrameSeconds");
static_assert(offsetof(MovieSceneSectionExtensions_SetEndFrameSeconds, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_SetEndFrameSeconds::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_SetEndFrameSeconds, EndTime) == 0x000008, "Member 'MovieSceneSectionExtensions_SetEndFrameSeconds::EndTime' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.SetRange
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_SetRange final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSectionExtensions_SetRange) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_SetRange");
static_assert(sizeof(MovieSceneSectionExtensions_SetRange) == 0x000010, "Wrong size on MovieSceneSectionExtensions_SetRange");
static_assert(offsetof(MovieSceneSectionExtensions_SetRange, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_SetRange::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_SetRange, StartFrame) == 0x000008, "Member 'MovieSceneSectionExtensions_SetRange::StartFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_SetRange, EndFrame) == 0x00000C, "Member 'MovieSceneSectionExtensions_SetRange::EndFrame' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.SetRangeSeconds
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_SetRangeSeconds final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSectionExtensions_SetRangeSeconds) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_SetRangeSeconds");
static_assert(sizeof(MovieSceneSectionExtensions_SetRangeSeconds) == 0x000010, "Wrong size on MovieSceneSectionExtensions_SetRangeSeconds");
static_assert(offsetof(MovieSceneSectionExtensions_SetRangeSeconds, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_SetRangeSeconds::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_SetRangeSeconds, StartTime) == 0x000008, "Member 'MovieSceneSectionExtensions_SetRangeSeconds::StartTime' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_SetRangeSeconds, EndTime) == 0x00000C, "Member 'MovieSceneSectionExtensions_SetRangeSeconds::EndTime' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.SetStartFrame
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_SetStartFrame final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_SetStartFrame) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_SetStartFrame");
static_assert(sizeof(MovieSceneSectionExtensions_SetStartFrame) == 0x000010, "Wrong size on MovieSceneSectionExtensions_SetStartFrame");
static_assert(offsetof(MovieSceneSectionExtensions_SetStartFrame, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_SetStartFrame::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_SetStartFrame, StartFrame) == 0x000008, "Member 'MovieSceneSectionExtensions_SetStartFrame::StartFrame' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.SetStartFrameBounded
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_SetStartFrameBounded final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBounded;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_SetStartFrameBounded) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_SetStartFrameBounded");
static_assert(sizeof(MovieSceneSectionExtensions_SetStartFrameBounded) == 0x000010, "Wrong size on MovieSceneSectionExtensions_SetStartFrameBounded");
static_assert(offsetof(MovieSceneSectionExtensions_SetStartFrameBounded, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_SetStartFrameBounded::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_SetStartFrameBounded, bIsBounded) == 0x000008, "Member 'MovieSceneSectionExtensions_SetStartFrameBounded::bIsBounded' has a wrong offset!");

// Function SequencerScripting.MovieSceneSectionExtensions.SetStartFrameSeconds
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSectionExtensions_SetStartFrameSeconds final
{
public:
	class UMovieSceneSection*                     Section;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSectionExtensions_SetStartFrameSeconds) == 0x000008, "Wrong alignment on MovieSceneSectionExtensions_SetStartFrameSeconds");
static_assert(sizeof(MovieSceneSectionExtensions_SetStartFrameSeconds) == 0x000010, "Wrong size on MovieSceneSectionExtensions_SetStartFrameSeconds");
static_assert(offsetof(MovieSceneSectionExtensions_SetStartFrameSeconds, Section) == 0x000000, "Member 'MovieSceneSectionExtensions_SetStartFrameSeconds::Section' has a wrong offset!");
static_assert(offsetof(MovieSceneSectionExtensions_SetStartFrameSeconds, StartTime) == 0x000008, "Member 'MovieSceneSectionExtensions_SetStartFrameSeconds::StartTime' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.AddMarkedFrame
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneSequenceExtensions_AddMarkedFrame final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneMarkedFrame                 InMarkedFrame;                                     // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_AddMarkedFrame) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_AddMarkedFrame");
static_assert(sizeof(MovieSceneSequenceExtensions_AddMarkedFrame) == 0x000030, "Wrong size on MovieSceneSequenceExtensions_AddMarkedFrame");
static_assert(offsetof(MovieSceneSequenceExtensions_AddMarkedFrame, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_AddMarkedFrame::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_AddMarkedFrame, InMarkedFrame) == 0x000008, "Member 'MovieSceneSequenceExtensions_AddMarkedFrame::InMarkedFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_AddMarkedFrame, ReturnValue) == 0x000028, "Member 'MovieSceneSequenceExtensions_AddMarkedFrame::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.AddMasterTrack
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneSequenceExtensions_AddMasterTrack final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMovieSceneTrack>           TrackType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneTrack*                       ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_AddMasterTrack) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_AddMasterTrack");
static_assert(sizeof(MovieSceneSequenceExtensions_AddMasterTrack) == 0x000018, "Wrong size on MovieSceneSequenceExtensions_AddMasterTrack");
static_assert(offsetof(MovieSceneSequenceExtensions_AddMasterTrack, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_AddMasterTrack::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_AddMasterTrack, TrackType) == 0x000008, "Member 'MovieSceneSequenceExtensions_AddMasterTrack::TrackType' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_AddMasterTrack, ReturnValue) == 0x000010, "Member 'MovieSceneSequenceExtensions_AddMasterTrack::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.AddPossessable
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneSequenceExtensions_AddPossessable final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ObjectToPossess;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_AddPossessable) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_AddPossessable");
static_assert(sizeof(MovieSceneSequenceExtensions_AddPossessable) == 0x000028, "Wrong size on MovieSceneSequenceExtensions_AddPossessable");
static_assert(offsetof(MovieSceneSequenceExtensions_AddPossessable, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_AddPossessable::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_AddPossessable, ObjectToPossess) == 0x000008, "Member 'MovieSceneSequenceExtensions_AddPossessable::ObjectToPossess' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_AddPossessable, ReturnValue) == 0x000010, "Member 'MovieSceneSequenceExtensions_AddPossessable::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.AddRootFolderToSequence
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneSequenceExtensions_AddRootFolderToSequence final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NewFolderName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneFolder*                      ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_AddRootFolderToSequence) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_AddRootFolderToSequence");
static_assert(sizeof(MovieSceneSequenceExtensions_AddRootFolderToSequence) == 0x000020, "Wrong size on MovieSceneSequenceExtensions_AddRootFolderToSequence");
static_assert(offsetof(MovieSceneSequenceExtensions_AddRootFolderToSequence, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_AddRootFolderToSequence::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_AddRootFolderToSequence, NewFolderName) == 0x000008, "Member 'MovieSceneSequenceExtensions_AddRootFolderToSequence::NewFolderName' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_AddRootFolderToSequence, ReturnValue) == 0x000018, "Member 'MovieSceneSequenceExtensions_AddRootFolderToSequence::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.AddSpawnableFromClass
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneSequenceExtensions_AddSpawnableFromClass final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ClassToSpawn;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_AddSpawnableFromClass) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_AddSpawnableFromClass");
static_assert(sizeof(MovieSceneSequenceExtensions_AddSpawnableFromClass) == 0x000028, "Wrong size on MovieSceneSequenceExtensions_AddSpawnableFromClass");
static_assert(offsetof(MovieSceneSequenceExtensions_AddSpawnableFromClass, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_AddSpawnableFromClass::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_AddSpawnableFromClass, ClassToSpawn) == 0x000008, "Member 'MovieSceneSequenceExtensions_AddSpawnableFromClass::ClassToSpawn' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_AddSpawnableFromClass, ReturnValue) == 0x000010, "Member 'MovieSceneSequenceExtensions_AddSpawnableFromClass::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.AddSpawnableFromInstance
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneSequenceExtensions_AddSpawnableFromInstance final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ObjectToSpawn;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_AddSpawnableFromInstance) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_AddSpawnableFromInstance");
static_assert(sizeof(MovieSceneSequenceExtensions_AddSpawnableFromInstance) == 0x000028, "Wrong size on MovieSceneSequenceExtensions_AddSpawnableFromInstance");
static_assert(offsetof(MovieSceneSequenceExtensions_AddSpawnableFromInstance, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_AddSpawnableFromInstance::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_AddSpawnableFromInstance, ObjectToSpawn) == 0x000008, "Member 'MovieSceneSequenceExtensions_AddSpawnableFromInstance::ObjectToSpawn' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_AddSpawnableFromInstance, ReturnValue) == 0x000010, "Member 'MovieSceneSequenceExtensions_AddSpawnableFromInstance::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.DeleteMarkedFrame
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_DeleteMarkedFrame final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeleteIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_DeleteMarkedFrame) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_DeleteMarkedFrame");
static_assert(sizeof(MovieSceneSequenceExtensions_DeleteMarkedFrame) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_DeleteMarkedFrame");
static_assert(offsetof(MovieSceneSequenceExtensions_DeleteMarkedFrame, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_DeleteMarkedFrame::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_DeleteMarkedFrame, DeleteIndex) == 0x000008, "Member 'MovieSceneSequenceExtensions_DeleteMarkedFrame::DeleteIndex' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.DeleteMarkedFrames
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneSequenceExtensions_DeleteMarkedFrames final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_DeleteMarkedFrames) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_DeleteMarkedFrames");
static_assert(sizeof(MovieSceneSequenceExtensions_DeleteMarkedFrames) == 0x000008, "Wrong size on MovieSceneSequenceExtensions_DeleteMarkedFrames");
static_assert(offsetof(MovieSceneSequenceExtensions_DeleteMarkedFrames, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_DeleteMarkedFrames::Sequence' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.FindBindingById
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneSequenceExtensions_FindBindingById final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  BindingID;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_FindBindingById) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_FindBindingById");
static_assert(sizeof(MovieSceneSequenceExtensions_FindBindingById) == 0x000030, "Wrong size on MovieSceneSequenceExtensions_FindBindingById");
static_assert(offsetof(MovieSceneSequenceExtensions_FindBindingById, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_FindBindingById::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindBindingById, BindingID) == 0x000008, "Member 'MovieSceneSequenceExtensions_FindBindingById::BindingID' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindBindingById, ReturnValue) == 0x000018, "Member 'MovieSceneSequenceExtensions_FindBindingById::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.FindBindingByName
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneSequenceExtensions_FindBindingByName final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Name_0;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_FindBindingByName) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_FindBindingByName");
static_assert(sizeof(MovieSceneSequenceExtensions_FindBindingByName) == 0x000030, "Wrong size on MovieSceneSequenceExtensions_FindBindingByName");
static_assert(offsetof(MovieSceneSequenceExtensions_FindBindingByName, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_FindBindingByName::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindBindingByName, Name_0) == 0x000008, "Member 'MovieSceneSequenceExtensions_FindBindingByName::Name_0' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindBindingByName, ReturnValue) == 0x000018, "Member 'MovieSceneSequenceExtensions_FindBindingByName::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.FindMarkedFrameByFrameNumber
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_FindMarkedFrameByFrameNumber final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           InFrameNumber;                                     // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_FindMarkedFrameByFrameNumber) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_FindMarkedFrameByFrameNumber");
static_assert(sizeof(MovieSceneSequenceExtensions_FindMarkedFrameByFrameNumber) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_FindMarkedFrameByFrameNumber");
static_assert(offsetof(MovieSceneSequenceExtensions_FindMarkedFrameByFrameNumber, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_FindMarkedFrameByFrameNumber::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindMarkedFrameByFrameNumber, InFrameNumber) == 0x000008, "Member 'MovieSceneSequenceExtensions_FindMarkedFrameByFrameNumber::InFrameNumber' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindMarkedFrameByFrameNumber, ReturnValue) == 0x00000C, "Member 'MovieSceneSequenceExtensions_FindMarkedFrameByFrameNumber::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.FindMarkedFrameByLabel
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneSequenceExtensions_FindMarkedFrameByLabel final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InLabel;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_FindMarkedFrameByLabel) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_FindMarkedFrameByLabel");
static_assert(sizeof(MovieSceneSequenceExtensions_FindMarkedFrameByLabel) == 0x000020, "Wrong size on MovieSceneSequenceExtensions_FindMarkedFrameByLabel");
static_assert(offsetof(MovieSceneSequenceExtensions_FindMarkedFrameByLabel, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_FindMarkedFrameByLabel::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindMarkedFrameByLabel, InLabel) == 0x000008, "Member 'MovieSceneSequenceExtensions_FindMarkedFrameByLabel::InLabel' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindMarkedFrameByLabel, ReturnValue) == 0x000018, "Member 'MovieSceneSequenceExtensions_FindMarkedFrameByLabel::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.FindMasterTracksByExactType
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneSequenceExtensions_FindMasterTracksByExactType final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMovieSceneTrack>           TrackType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneTrack*>               ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_FindMasterTracksByExactType) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_FindMasterTracksByExactType");
static_assert(sizeof(MovieSceneSequenceExtensions_FindMasterTracksByExactType) == 0x000020, "Wrong size on MovieSceneSequenceExtensions_FindMasterTracksByExactType");
static_assert(offsetof(MovieSceneSequenceExtensions_FindMasterTracksByExactType, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_FindMasterTracksByExactType::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindMasterTracksByExactType, TrackType) == 0x000008, "Member 'MovieSceneSequenceExtensions_FindMasterTracksByExactType::TrackType' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindMasterTracksByExactType, ReturnValue) == 0x000010, "Member 'MovieSceneSequenceExtensions_FindMasterTracksByExactType::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.FindMasterTracksByType
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneSequenceExtensions_FindMasterTracksByType final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMovieSceneTrack>           TrackType;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneTrack*>               ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_FindMasterTracksByType) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_FindMasterTracksByType");
static_assert(sizeof(MovieSceneSequenceExtensions_FindMasterTracksByType) == 0x000020, "Wrong size on MovieSceneSequenceExtensions_FindMasterTracksByType");
static_assert(offsetof(MovieSceneSequenceExtensions_FindMasterTracksByType, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_FindMasterTracksByType::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindMasterTracksByType, TrackType) == 0x000008, "Member 'MovieSceneSequenceExtensions_FindMasterTracksByType::TrackType' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindMasterTracksByType, ReturnValue) == 0x000010, "Member 'MovieSceneSequenceExtensions_FindMasterTracksByType::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.FindNextMarkedFrame
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneSequenceExtensions_FindNextMarkedFrame final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           InFrameNumber;                                     // 0x0008(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForward;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_FindNextMarkedFrame) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_FindNextMarkedFrame");
static_assert(sizeof(MovieSceneSequenceExtensions_FindNextMarkedFrame) == 0x000018, "Wrong size on MovieSceneSequenceExtensions_FindNextMarkedFrame");
static_assert(offsetof(MovieSceneSequenceExtensions_FindNextMarkedFrame, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_FindNextMarkedFrame::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindNextMarkedFrame, InFrameNumber) == 0x000008, "Member 'MovieSceneSequenceExtensions_FindNextMarkedFrame::InFrameNumber' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindNextMarkedFrame, bForward) == 0x00000C, "Member 'MovieSceneSequenceExtensions_FindNextMarkedFrame::bForward' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_FindNextMarkedFrame, ReturnValue) == 0x000010, "Member 'MovieSceneSequenceExtensions_FindNextMarkedFrame::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetBindingID
// 0x0030 (0x0030 - 0x0000)
struct MovieSceneSequenceExtensions_GetBindingID final
{
public:
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_GetBindingID) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetBindingID");
static_assert(sizeof(MovieSceneSequenceExtensions_GetBindingID) == 0x000030, "Wrong size on MovieSceneSequenceExtensions_GetBindingID");
static_assert(offsetof(MovieSceneSequenceExtensions_GetBindingID, InBinding) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetBindingID::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetBindingID, ReturnValue) == 0x000018, "Member 'MovieSceneSequenceExtensions_GetBindingID::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetBindings
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneSequenceExtensions_GetBindings final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSequencerBindingProxy>         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_GetBindings) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetBindings");
static_assert(sizeof(MovieSceneSequenceExtensions_GetBindings) == 0x000018, "Wrong size on MovieSceneSequenceExtensions_GetBindings");
static_assert(offsetof(MovieSceneSequenceExtensions_GetBindings, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetBindings::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetBindings, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetBindings::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetClockSource
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetClockSource final
{
public:
	class UMovieSceneSequence*                    InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUpdateClockSource                            ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_GetClockSource) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetClockSource");
static_assert(sizeof(MovieSceneSequenceExtensions_GetClockSource) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetClockSource");
static_assert(offsetof(MovieSceneSequenceExtensions_GetClockSource, InSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetClockSource::InSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetClockSource, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetClockSource::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetDisplayRate
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetDisplayRate final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_GetDisplayRate) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetDisplayRate");
static_assert(sizeof(MovieSceneSequenceExtensions_GetDisplayRate) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetDisplayRate");
static_assert(offsetof(MovieSceneSequenceExtensions_GetDisplayRate, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetDisplayRate::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetDisplayRate, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetDisplayRate::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetEvaluationType
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetEvaluationType final
{
public:
	class UMovieSceneSequence*                    InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneEvaluationType                     ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_GetEvaluationType) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetEvaluationType");
static_assert(sizeof(MovieSceneSequenceExtensions_GetEvaluationType) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetEvaluationType");
static_assert(offsetof(MovieSceneSequenceExtensions_GetEvaluationType, InSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetEvaluationType::InSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetEvaluationType, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetEvaluationType::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetMarkedFrames
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneSequenceExtensions_GetMarkedFrames final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMovieSceneMarkedFrame>         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_GetMarkedFrames) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetMarkedFrames");
static_assert(sizeof(MovieSceneSequenceExtensions_GetMarkedFrames) == 0x000018, "Wrong size on MovieSceneSequenceExtensions_GetMarkedFrames");
static_assert(offsetof(MovieSceneSequenceExtensions_GetMarkedFrames, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetMarkedFrames::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetMarkedFrames, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetMarkedFrames::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetMasterTracks
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneSequenceExtensions_GetMasterTracks final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneTrack*>               ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_GetMasterTracks) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetMasterTracks");
static_assert(sizeof(MovieSceneSequenceExtensions_GetMasterTracks) == 0x000018, "Wrong size on MovieSceneSequenceExtensions_GetMasterTracks");
static_assert(offsetof(MovieSceneSequenceExtensions_GetMasterTracks, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetMasterTracks::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetMasterTracks, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetMasterTracks::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetMovieScene
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetMovieScene final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieScene*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_GetMovieScene) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetMovieScene");
static_assert(sizeof(MovieSceneSequenceExtensions_GetMovieScene) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetMovieScene");
static_assert(offsetof(MovieSceneSequenceExtensions_GetMovieScene, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetMovieScene::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetMovieScene, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetMovieScene::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetPlaybackEnd
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetPlaybackEnd final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_GetPlaybackEnd) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetPlaybackEnd");
static_assert(sizeof(MovieSceneSequenceExtensions_GetPlaybackEnd) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetPlaybackEnd");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPlaybackEnd, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetPlaybackEnd::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPlaybackEnd, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetPlaybackEnd::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetPlaybackEndSeconds
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetPlaybackEndSeconds final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_GetPlaybackEndSeconds) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetPlaybackEndSeconds");
static_assert(sizeof(MovieSceneSequenceExtensions_GetPlaybackEndSeconds) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetPlaybackEndSeconds");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPlaybackEndSeconds, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetPlaybackEndSeconds::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPlaybackEndSeconds, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetPlaybackEndSeconds::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetPlaybackRange
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneSequenceExtensions_GetPlaybackRange final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerScriptingRange               ReturnValue;                                       // 0x0008(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_GetPlaybackRange) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetPlaybackRange");
static_assert(sizeof(MovieSceneSequenceExtensions_GetPlaybackRange) == 0x000020, "Wrong size on MovieSceneSequenceExtensions_GetPlaybackRange");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPlaybackRange, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetPlaybackRange::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPlaybackRange, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetPlaybackRange::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetPlaybackStart
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetPlaybackStart final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_GetPlaybackStart) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetPlaybackStart");
static_assert(sizeof(MovieSceneSequenceExtensions_GetPlaybackStart) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetPlaybackStart");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPlaybackStart, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetPlaybackStart::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPlaybackStart, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetPlaybackStart::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetPlaybackStartSeconds
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetPlaybackStartSeconds final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_GetPlaybackStartSeconds) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetPlaybackStartSeconds");
static_assert(sizeof(MovieSceneSequenceExtensions_GetPlaybackStartSeconds) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetPlaybackStartSeconds");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPlaybackStartSeconds, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetPlaybackStartSeconds::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPlaybackStartSeconds, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetPlaybackStartSeconds::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetPortableBindingID
// 0x0040 (0x0040 - 0x0000)
struct MovieSceneSequenceExtensions_GetPortableBindingID final
{
public:
	class UMovieSceneSequence*                    MasterSequence;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneSequence*                    DestinationSequence;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0010(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_GetPortableBindingID) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetPortableBindingID");
static_assert(sizeof(MovieSceneSequenceExtensions_GetPortableBindingID) == 0x000040, "Wrong size on MovieSceneSequenceExtensions_GetPortableBindingID");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPortableBindingID, MasterSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetPortableBindingID::MasterSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPortableBindingID, DestinationSequence) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetPortableBindingID::DestinationSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPortableBindingID, InBinding) == 0x000010, "Member 'MovieSceneSequenceExtensions_GetPortableBindingID::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPortableBindingID, ReturnValue) == 0x000028, "Member 'MovieSceneSequenceExtensions_GetPortableBindingID::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetPossessables
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneSequenceExtensions_GetPossessables final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSequencerBindingProxy>         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_GetPossessables) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetPossessables");
static_assert(sizeof(MovieSceneSequenceExtensions_GetPossessables) == 0x000018, "Wrong size on MovieSceneSequenceExtensions_GetPossessables");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPossessables, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetPossessables::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetPossessables, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetPossessables::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetRootFoldersInSequence
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneSequenceExtensions_GetRootFoldersInSequence final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneFolder*>              ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_GetRootFoldersInSequence) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetRootFoldersInSequence");
static_assert(sizeof(MovieSceneSequenceExtensions_GetRootFoldersInSequence) == 0x000018, "Wrong size on MovieSceneSequenceExtensions_GetRootFoldersInSequence");
static_assert(offsetof(MovieSceneSequenceExtensions_GetRootFoldersInSequence, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetRootFoldersInSequence::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetRootFoldersInSequence, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetRootFoldersInSequence::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetSpawnables
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneSequenceExtensions_GetSpawnables final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSequencerBindingProxy>         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_GetSpawnables) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetSpawnables");
static_assert(sizeof(MovieSceneSequenceExtensions_GetSpawnables) == 0x000018, "Wrong size on MovieSceneSequenceExtensions_GetSpawnables");
static_assert(offsetof(MovieSceneSequenceExtensions_GetSpawnables, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetSpawnables::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetSpawnables, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetSpawnables::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetTickResolution
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetTickResolution final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_GetTickResolution) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetTickResolution");
static_assert(sizeof(MovieSceneSequenceExtensions_GetTickResolution) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetTickResolution");
static_assert(offsetof(MovieSceneSequenceExtensions_GetTickResolution, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetTickResolution::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetTickResolution, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetTickResolution::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetTimecodeSource
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneSequenceExtensions_GetTimecodeSource final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimecode                              ReturnValue;                                       // 0x0008(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_GetTimecodeSource) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetTimecodeSource");
static_assert(sizeof(MovieSceneSequenceExtensions_GetTimecodeSource) == 0x000020, "Wrong size on MovieSceneSequenceExtensions_GetTimecodeSource");
static_assert(offsetof(MovieSceneSequenceExtensions_GetTimecodeSource, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetTimecodeSource::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetTimecodeSource, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetTimecodeSource::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetViewRangeEnd
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetViewRangeEnd final
{
public:
	class UMovieSceneSequence*                    InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_GetViewRangeEnd) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetViewRangeEnd");
static_assert(sizeof(MovieSceneSequenceExtensions_GetViewRangeEnd) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetViewRangeEnd");
static_assert(offsetof(MovieSceneSequenceExtensions_GetViewRangeEnd, InSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetViewRangeEnd::InSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetViewRangeEnd, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetViewRangeEnd::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetViewRangeStart
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetViewRangeStart final
{
public:
	class UMovieSceneSequence*                    InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_GetViewRangeStart) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetViewRangeStart");
static_assert(sizeof(MovieSceneSequenceExtensions_GetViewRangeStart) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetViewRangeStart");
static_assert(offsetof(MovieSceneSequenceExtensions_GetViewRangeStart, InSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetViewRangeStart::InSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetViewRangeStart, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetViewRangeStart::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetWorkRangeEnd
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetWorkRangeEnd final
{
public:
	class UMovieSceneSequence*                    InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_GetWorkRangeEnd) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetWorkRangeEnd");
static_assert(sizeof(MovieSceneSequenceExtensions_GetWorkRangeEnd) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetWorkRangeEnd");
static_assert(offsetof(MovieSceneSequenceExtensions_GetWorkRangeEnd, InSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetWorkRangeEnd::InSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetWorkRangeEnd, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetWorkRangeEnd::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.GetWorkRangeStart
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_GetWorkRangeStart final
{
public:
	class UMovieSceneSequence*                    InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_GetWorkRangeStart) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_GetWorkRangeStart");
static_assert(sizeof(MovieSceneSequenceExtensions_GetWorkRangeStart) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_GetWorkRangeStart");
static_assert(offsetof(MovieSceneSequenceExtensions_GetWorkRangeStart, InSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_GetWorkRangeStart::InSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_GetWorkRangeStart, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_GetWorkRangeStart::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.IsReadOnly
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_IsReadOnly final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_IsReadOnly) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_IsReadOnly");
static_assert(sizeof(MovieSceneSequenceExtensions_IsReadOnly) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_IsReadOnly");
static_assert(offsetof(MovieSceneSequenceExtensions_IsReadOnly, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_IsReadOnly::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_IsReadOnly, ReturnValue) == 0x000008, "Member 'MovieSceneSequenceExtensions_IsReadOnly::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.LocateBoundObjects
// 0x0038 (0x0038 - 0x0000)
struct MovieSceneSequenceExtensions_LocateBoundObjects final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                Context;                                           // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UObject*>                        ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_LocateBoundObjects) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_LocateBoundObjects");
static_assert(sizeof(MovieSceneSequenceExtensions_LocateBoundObjects) == 0x000038, "Wrong size on MovieSceneSequenceExtensions_LocateBoundObjects");
static_assert(offsetof(MovieSceneSequenceExtensions_LocateBoundObjects, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_LocateBoundObjects::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_LocateBoundObjects, InBinding) == 0x000008, "Member 'MovieSceneSequenceExtensions_LocateBoundObjects::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_LocateBoundObjects, Context) == 0x000020, "Member 'MovieSceneSequenceExtensions_LocateBoundObjects::Context' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_LocateBoundObjects, ReturnValue) == 0x000028, "Member 'MovieSceneSequenceExtensions_LocateBoundObjects::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.MakeBindingID
// 0x0040 (0x0040 - 0x0000)
struct MovieSceneSequenceExtensions_MakeBindingID final
{
public:
	class UMovieSceneSequence*                    MasterSequence;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 InBinding;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EMovieSceneObjectBindingSpace                 Space;                                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMovieSceneObjectBindingID             ReturnValue;                                       // 0x0024(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_MakeBindingID) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_MakeBindingID");
static_assert(sizeof(MovieSceneSequenceExtensions_MakeBindingID) == 0x000040, "Wrong size on MovieSceneSequenceExtensions_MakeBindingID");
static_assert(offsetof(MovieSceneSequenceExtensions_MakeBindingID, MasterSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_MakeBindingID::MasterSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_MakeBindingID, InBinding) == 0x000008, "Member 'MovieSceneSequenceExtensions_MakeBindingID::InBinding' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_MakeBindingID, Space) == 0x000020, "Member 'MovieSceneSequenceExtensions_MakeBindingID::Space' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_MakeBindingID, ReturnValue) == 0x000024, "Member 'MovieSceneSequenceExtensions_MakeBindingID::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.MakeRange
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneSequenceExtensions_MakeRange final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerScriptingRange               ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_MakeRange) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_MakeRange");
static_assert(sizeof(MovieSceneSequenceExtensions_MakeRange) == 0x000028, "Wrong size on MovieSceneSequenceExtensions_MakeRange");
static_assert(offsetof(MovieSceneSequenceExtensions_MakeRange, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_MakeRange::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_MakeRange, StartFrame) == 0x000008, "Member 'MovieSceneSequenceExtensions_MakeRange::StartFrame' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_MakeRange, Duration) == 0x00000C, "Member 'MovieSceneSequenceExtensions_MakeRange::Duration' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_MakeRange, ReturnValue) == 0x000010, "Member 'MovieSceneSequenceExtensions_MakeRange::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.MakeRangeSeconds
// 0x0028 (0x0028 - 0x0000)
struct MovieSceneSequenceExtensions_MakeRangeSeconds final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerScriptingRange               ReturnValue;                                       // 0x0010(0x0014)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_MakeRangeSeconds) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_MakeRangeSeconds");
static_assert(sizeof(MovieSceneSequenceExtensions_MakeRangeSeconds) == 0x000028, "Wrong size on MovieSceneSequenceExtensions_MakeRangeSeconds");
static_assert(offsetof(MovieSceneSequenceExtensions_MakeRangeSeconds, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_MakeRangeSeconds::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_MakeRangeSeconds, StartTime) == 0x000008, "Member 'MovieSceneSequenceExtensions_MakeRangeSeconds::StartTime' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_MakeRangeSeconds, Duration) == 0x00000C, "Member 'MovieSceneSequenceExtensions_MakeRangeSeconds::Duration' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_MakeRangeSeconds, ReturnValue) == 0x000010, "Member 'MovieSceneSequenceExtensions_MakeRangeSeconds::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.RemoveMasterTrack
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneSequenceExtensions_RemoveMasterTrack final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneTrack*                       MasterTrack;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_RemoveMasterTrack) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_RemoveMasterTrack");
static_assert(sizeof(MovieSceneSequenceExtensions_RemoveMasterTrack) == 0x000018, "Wrong size on MovieSceneSequenceExtensions_RemoveMasterTrack");
static_assert(offsetof(MovieSceneSequenceExtensions_RemoveMasterTrack, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_RemoveMasterTrack::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_RemoveMasterTrack, MasterTrack) == 0x000008, "Member 'MovieSceneSequenceExtensions_RemoveMasterTrack::MasterTrack' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_RemoveMasterTrack, ReturnValue) == 0x000010, "Member 'MovieSceneSequenceExtensions_RemoveMasterTrack::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.ResolveBindingID
// 0x0038 (0x0038 - 0x0000)
struct MovieSceneSequenceExtensions_ResolveBindingID final
{
public:
	class UMovieSceneSequence*                    MasterSequence;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             InObjectBindingID;                                 // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSequencerBindingProxy                 ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_ResolveBindingID) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_ResolveBindingID");
static_assert(sizeof(MovieSceneSequenceExtensions_ResolveBindingID) == 0x000038, "Wrong size on MovieSceneSequenceExtensions_ResolveBindingID");
static_assert(offsetof(MovieSceneSequenceExtensions_ResolveBindingID, MasterSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_ResolveBindingID::MasterSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_ResolveBindingID, InObjectBindingID) == 0x000008, "Member 'MovieSceneSequenceExtensions_ResolveBindingID::InObjectBindingID' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_ResolveBindingID, ReturnValue) == 0x000020, "Member 'MovieSceneSequenceExtensions_ResolveBindingID::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetClockSource
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetClockSource final
{
public:
	class UMovieSceneSequence*                    InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUpdateClockSource                            InClockSource;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_SetClockSource) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetClockSource");
static_assert(sizeof(MovieSceneSequenceExtensions_SetClockSource) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetClockSource");
static_assert(offsetof(MovieSceneSequenceExtensions_SetClockSource, InSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetClockSource::InSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetClockSource, InClockSource) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetClockSource::InClockSource' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetDisplayRate
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetDisplayRate final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             DisplayRate;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_SetDisplayRate) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetDisplayRate");
static_assert(sizeof(MovieSceneSequenceExtensions_SetDisplayRate) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetDisplayRate");
static_assert(offsetof(MovieSceneSequenceExtensions_SetDisplayRate, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetDisplayRate::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetDisplayRate, DisplayRate) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetDisplayRate::DisplayRate' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetEvaluationType
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetEvaluationType final
{
public:
	class UMovieSceneSequence*                    InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovieSceneEvaluationType                     InEvaluationType;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_SetEvaluationType) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetEvaluationType");
static_assert(sizeof(MovieSceneSequenceExtensions_SetEvaluationType) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetEvaluationType");
static_assert(offsetof(MovieSceneSequenceExtensions_SetEvaluationType, InSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetEvaluationType::InSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetEvaluationType, InEvaluationType) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetEvaluationType::InEvaluationType' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetMarkedFrame
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetMarkedFrame final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMarkIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameNumber                           InFrameNumber;                                     // 0x000C(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_SetMarkedFrame) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetMarkedFrame");
static_assert(sizeof(MovieSceneSequenceExtensions_SetMarkedFrame) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetMarkedFrame");
static_assert(offsetof(MovieSceneSequenceExtensions_SetMarkedFrame, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetMarkedFrame::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetMarkedFrame, InMarkIndex) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetMarkedFrame::InMarkIndex' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetMarkedFrame, InFrameNumber) == 0x00000C, "Member 'MovieSceneSequenceExtensions_SetMarkedFrame::InFrameNumber' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetPlaybackEnd
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetPlaybackEnd final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_SetPlaybackEnd) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetPlaybackEnd");
static_assert(sizeof(MovieSceneSequenceExtensions_SetPlaybackEnd) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetPlaybackEnd");
static_assert(offsetof(MovieSceneSequenceExtensions_SetPlaybackEnd, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetPlaybackEnd::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetPlaybackEnd, EndFrame) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetPlaybackEnd::EndFrame' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetPlaybackEndSeconds
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetPlaybackEndSeconds final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_SetPlaybackEndSeconds) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetPlaybackEndSeconds");
static_assert(sizeof(MovieSceneSequenceExtensions_SetPlaybackEndSeconds) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetPlaybackEndSeconds");
static_assert(offsetof(MovieSceneSequenceExtensions_SetPlaybackEndSeconds, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetPlaybackEndSeconds::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetPlaybackEndSeconds, EndTime) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetPlaybackEndSeconds::EndTime' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetPlaybackStart
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetPlaybackStart final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_SetPlaybackStart) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetPlaybackStart");
static_assert(sizeof(MovieSceneSequenceExtensions_SetPlaybackStart) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetPlaybackStart");
static_assert(offsetof(MovieSceneSequenceExtensions_SetPlaybackStart, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetPlaybackStart::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetPlaybackStart, StartFrame) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetPlaybackStart::StartFrame' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetPlaybackStartSeconds
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetPlaybackStartSeconds final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_SetPlaybackStartSeconds) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetPlaybackStartSeconds");
static_assert(sizeof(MovieSceneSequenceExtensions_SetPlaybackStartSeconds) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetPlaybackStartSeconds");
static_assert(offsetof(MovieSceneSequenceExtensions_SetPlaybackStartSeconds, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetPlaybackStartSeconds::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetPlaybackStartSeconds, StartTime) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetPlaybackStartSeconds::StartTime' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetReadOnly
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetReadOnly final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInReadOnly;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_SetReadOnly) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetReadOnly");
static_assert(sizeof(MovieSceneSequenceExtensions_SetReadOnly) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetReadOnly");
static_assert(offsetof(MovieSceneSequenceExtensions_SetReadOnly, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetReadOnly::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetReadOnly, bInReadOnly) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetReadOnly::bInReadOnly' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetTickResolution
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetTickResolution final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             TickResolution;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_SetTickResolution) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetTickResolution");
static_assert(sizeof(MovieSceneSequenceExtensions_SetTickResolution) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetTickResolution");
static_assert(offsetof(MovieSceneSequenceExtensions_SetTickResolution, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetTickResolution::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetTickResolution, TickResolution) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetTickResolution::TickResolution' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetTickResolutionDirectly
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetTickResolutionDirectly final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFrameRate                             TickResolution;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_SetTickResolutionDirectly) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetTickResolutionDirectly");
static_assert(sizeof(MovieSceneSequenceExtensions_SetTickResolutionDirectly) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetTickResolutionDirectly");
static_assert(offsetof(MovieSceneSequenceExtensions_SetTickResolutionDirectly, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetTickResolutionDirectly::Sequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetTickResolutionDirectly, TickResolution) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetTickResolutionDirectly::TickResolution' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetViewRangeEnd
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetViewRangeEnd final
{
public:
	class UMovieSceneSequence*                    InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimeInSeconds;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_SetViewRangeEnd) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetViewRangeEnd");
static_assert(sizeof(MovieSceneSequenceExtensions_SetViewRangeEnd) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetViewRangeEnd");
static_assert(offsetof(MovieSceneSequenceExtensions_SetViewRangeEnd, InSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetViewRangeEnd::InSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetViewRangeEnd, EndTimeInSeconds) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetViewRangeEnd::EndTimeInSeconds' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetViewRangeStart
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetViewRangeStart final
{
public:
	class UMovieSceneSequence*                    InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTimeInSeconds;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_SetViewRangeStart) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetViewRangeStart");
static_assert(sizeof(MovieSceneSequenceExtensions_SetViewRangeStart) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetViewRangeStart");
static_assert(offsetof(MovieSceneSequenceExtensions_SetViewRangeStart, InSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetViewRangeStart::InSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetViewRangeStart, StartTimeInSeconds) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetViewRangeStart::StartTimeInSeconds' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetWorkRangeEnd
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetWorkRangeEnd final
{
public:
	class UMovieSceneSequence*                    InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndTimeInSeconds;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_SetWorkRangeEnd) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetWorkRangeEnd");
static_assert(sizeof(MovieSceneSequenceExtensions_SetWorkRangeEnd) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetWorkRangeEnd");
static_assert(offsetof(MovieSceneSequenceExtensions_SetWorkRangeEnd, InSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetWorkRangeEnd::InSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetWorkRangeEnd, EndTimeInSeconds) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetWorkRangeEnd::EndTimeInSeconds' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SetWorkRangeStart
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneSequenceExtensions_SetWorkRangeStart final
{
public:
	class UMovieSceneSequence*                    InSequence;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTimeInSeconds;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneSequenceExtensions_SetWorkRangeStart) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SetWorkRangeStart");
static_assert(sizeof(MovieSceneSequenceExtensions_SetWorkRangeStart) == 0x000010, "Wrong size on MovieSceneSequenceExtensions_SetWorkRangeStart");
static_assert(offsetof(MovieSceneSequenceExtensions_SetWorkRangeStart, InSequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SetWorkRangeStart::InSequence' has a wrong offset!");
static_assert(offsetof(MovieSceneSequenceExtensions_SetWorkRangeStart, StartTimeInSeconds) == 0x000008, "Member 'MovieSceneSequenceExtensions_SetWorkRangeStart::StartTimeInSeconds' has a wrong offset!");

// Function SequencerScripting.MovieSceneSequenceExtensions.SortMarkedFrames
// 0x0008 (0x0008 - 0x0000)
struct MovieSceneSequenceExtensions_SortMarkedFrames final
{
public:
	class UMovieSceneSequence*                    Sequence;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneSequenceExtensions_SortMarkedFrames) == 0x000008, "Wrong alignment on MovieSceneSequenceExtensions_SortMarkedFrames");
static_assert(sizeof(MovieSceneSequenceExtensions_SortMarkedFrames) == 0x000008, "Wrong size on MovieSceneSequenceExtensions_SortMarkedFrames");
static_assert(offsetof(MovieSceneSequenceExtensions_SortMarkedFrames, Sequence) == 0x000000, "Member 'MovieSceneSequenceExtensions_SortMarkedFrames::Sequence' has a wrong offset!");

// Function SequencerScripting.MovieSceneTrackExtensions.AddSection
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneTrackExtensions_AddSection final
{
public:
	class UMovieSceneTrack*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneSection*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneTrackExtensions_AddSection) == 0x000008, "Wrong alignment on MovieSceneTrackExtensions_AddSection");
static_assert(sizeof(MovieSceneTrackExtensions_AddSection) == 0x000010, "Wrong size on MovieSceneTrackExtensions_AddSection");
static_assert(offsetof(MovieSceneTrackExtensions_AddSection, Track) == 0x000000, "Member 'MovieSceneTrackExtensions_AddSection::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneTrackExtensions_AddSection, ReturnValue) == 0x000008, "Member 'MovieSceneTrackExtensions_AddSection::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneTrackExtensions.GetColorTint
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneTrackExtensions_GetColorTint final
{
public:
	class UMovieSceneTrack*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneTrackExtensions_GetColorTint) == 0x000008, "Wrong alignment on MovieSceneTrackExtensions_GetColorTint");
static_assert(sizeof(MovieSceneTrackExtensions_GetColorTint) == 0x000010, "Wrong size on MovieSceneTrackExtensions_GetColorTint");
static_assert(offsetof(MovieSceneTrackExtensions_GetColorTint, Track) == 0x000000, "Member 'MovieSceneTrackExtensions_GetColorTint::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneTrackExtensions_GetColorTint, ReturnValue) == 0x000008, "Member 'MovieSceneTrackExtensions_GetColorTint::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneTrackExtensions.GetDisplayName
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneTrackExtensions_GetDisplayName final
{
public:
	class UMovieSceneTrack*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneTrackExtensions_GetDisplayName) == 0x000008, "Wrong alignment on MovieSceneTrackExtensions_GetDisplayName");
static_assert(sizeof(MovieSceneTrackExtensions_GetDisplayName) == 0x000020, "Wrong size on MovieSceneTrackExtensions_GetDisplayName");
static_assert(offsetof(MovieSceneTrackExtensions_GetDisplayName, Track) == 0x000000, "Member 'MovieSceneTrackExtensions_GetDisplayName::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneTrackExtensions_GetDisplayName, ReturnValue) == 0x000008, "Member 'MovieSceneTrackExtensions_GetDisplayName::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneTrackExtensions.GetSections
// 0x0018 (0x0018 - 0x0000)
struct MovieSceneTrackExtensions_GetSections final
{
public:
	class UMovieSceneTrack*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMovieSceneSection*>             ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneTrackExtensions_GetSections) == 0x000008, "Wrong alignment on MovieSceneTrackExtensions_GetSections");
static_assert(sizeof(MovieSceneTrackExtensions_GetSections) == 0x000018, "Wrong size on MovieSceneTrackExtensions_GetSections");
static_assert(offsetof(MovieSceneTrackExtensions_GetSections, Track) == 0x000000, "Member 'MovieSceneTrackExtensions_GetSections::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneTrackExtensions_GetSections, ReturnValue) == 0x000008, "Member 'MovieSceneTrackExtensions_GetSections::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneTrackExtensions.GetSectionToKey
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneTrackExtensions_GetSectionToKey final
{
public:
	class UMovieSceneTrack*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneSection*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneTrackExtensions_GetSectionToKey) == 0x000008, "Wrong alignment on MovieSceneTrackExtensions_GetSectionToKey");
static_assert(sizeof(MovieSceneTrackExtensions_GetSectionToKey) == 0x000010, "Wrong size on MovieSceneTrackExtensions_GetSectionToKey");
static_assert(offsetof(MovieSceneTrackExtensions_GetSectionToKey, Track) == 0x000000, "Member 'MovieSceneTrackExtensions_GetSectionToKey::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneTrackExtensions_GetSectionToKey, ReturnValue) == 0x000008, "Member 'MovieSceneTrackExtensions_GetSectionToKey::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneTrackExtensions.GetSortingOrder
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneTrackExtensions_GetSortingOrder final
{
public:
	class UMovieSceneTrack*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneTrackExtensions_GetSortingOrder) == 0x000008, "Wrong alignment on MovieSceneTrackExtensions_GetSortingOrder");
static_assert(sizeof(MovieSceneTrackExtensions_GetSortingOrder) == 0x000010, "Wrong size on MovieSceneTrackExtensions_GetSortingOrder");
static_assert(offsetof(MovieSceneTrackExtensions_GetSortingOrder, Track) == 0x000000, "Member 'MovieSceneTrackExtensions_GetSortingOrder::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneTrackExtensions_GetSortingOrder, ReturnValue) == 0x000008, "Member 'MovieSceneTrackExtensions_GetSortingOrder::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneTrackExtensions.RemoveSection
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneTrackExtensions_RemoveSection final
{
public:
	class UMovieSceneTrack*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneSection*                     Section;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneTrackExtensions_RemoveSection) == 0x000008, "Wrong alignment on MovieSceneTrackExtensions_RemoveSection");
static_assert(sizeof(MovieSceneTrackExtensions_RemoveSection) == 0x000010, "Wrong size on MovieSceneTrackExtensions_RemoveSection");
static_assert(offsetof(MovieSceneTrackExtensions_RemoveSection, Track) == 0x000000, "Member 'MovieSceneTrackExtensions_RemoveSection::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneTrackExtensions_RemoveSection, Section) == 0x000008, "Member 'MovieSceneTrackExtensions_RemoveSection::Section' has a wrong offset!");

// Function SequencerScripting.MovieSceneTrackExtensions.SetColorTint
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneTrackExtensions_SetColorTint final
{
public:
	class UMovieSceneTrack*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ColorTint;                                         // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneTrackExtensions_SetColorTint) == 0x000008, "Wrong alignment on MovieSceneTrackExtensions_SetColorTint");
static_assert(sizeof(MovieSceneTrackExtensions_SetColorTint) == 0x000010, "Wrong size on MovieSceneTrackExtensions_SetColorTint");
static_assert(offsetof(MovieSceneTrackExtensions_SetColorTint, Track) == 0x000000, "Member 'MovieSceneTrackExtensions_SetColorTint::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneTrackExtensions_SetColorTint, ColorTint) == 0x000008, "Member 'MovieSceneTrackExtensions_SetColorTint::ColorTint' has a wrong offset!");

// Function SequencerScripting.MovieSceneTrackExtensions.SetDisplayName
// 0x0020 (0x0020 - 0x0000)
struct MovieSceneTrackExtensions_SetDisplayName final
{
public:
	class UMovieSceneTrack*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   InName;                                            // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneTrackExtensions_SetDisplayName) == 0x000008, "Wrong alignment on MovieSceneTrackExtensions_SetDisplayName");
static_assert(sizeof(MovieSceneTrackExtensions_SetDisplayName) == 0x000020, "Wrong size on MovieSceneTrackExtensions_SetDisplayName");
static_assert(offsetof(MovieSceneTrackExtensions_SetDisplayName, Track) == 0x000000, "Member 'MovieSceneTrackExtensions_SetDisplayName::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneTrackExtensions_SetDisplayName, InName) == 0x000008, "Member 'MovieSceneTrackExtensions_SetDisplayName::InName' has a wrong offset!");

// Function SequencerScripting.MovieSceneTrackExtensions.SetSectionToKey
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneTrackExtensions_SetSectionToKey final
{
public:
	class UMovieSceneTrack*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneSection*                     Section;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieSceneTrackExtensions_SetSectionToKey) == 0x000008, "Wrong alignment on MovieSceneTrackExtensions_SetSectionToKey");
static_assert(sizeof(MovieSceneTrackExtensions_SetSectionToKey) == 0x000010, "Wrong size on MovieSceneTrackExtensions_SetSectionToKey");
static_assert(offsetof(MovieSceneTrackExtensions_SetSectionToKey, Track) == 0x000000, "Member 'MovieSceneTrackExtensions_SetSectionToKey::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneTrackExtensions_SetSectionToKey, Section) == 0x000008, "Member 'MovieSceneTrackExtensions_SetSectionToKey::Section' has a wrong offset!");

// Function SequencerScripting.MovieSceneTrackExtensions.SetSortingOrder
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneTrackExtensions_SetSortingOrder final
{
public:
	class UMovieSceneTrack*                       Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortingOrder;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneTrackExtensions_SetSortingOrder) == 0x000008, "Wrong alignment on MovieSceneTrackExtensions_SetSortingOrder");
static_assert(sizeof(MovieSceneTrackExtensions_SetSortingOrder) == 0x000010, "Wrong size on MovieSceneTrackExtensions_SetSortingOrder");
static_assert(offsetof(MovieSceneTrackExtensions_SetSortingOrder, Track) == 0x000000, "Member 'MovieSceneTrackExtensions_SetSortingOrder::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneTrackExtensions_SetSortingOrder, SortingOrder) == 0x000008, "Member 'MovieSceneTrackExtensions_SetSortingOrder::SortingOrder' has a wrong offset!");

// Function SequencerScripting.MovieSceneVectorTrackExtensions.GetNumChannelsUsed
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneVectorTrackExtensions_GetNumChannelsUsed final
{
public:
	class UMovieSceneVectorTrack*                 Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneVectorTrackExtensions_GetNumChannelsUsed) == 0x000008, "Wrong alignment on MovieSceneVectorTrackExtensions_GetNumChannelsUsed");
static_assert(sizeof(MovieSceneVectorTrackExtensions_GetNumChannelsUsed) == 0x000010, "Wrong size on MovieSceneVectorTrackExtensions_GetNumChannelsUsed");
static_assert(offsetof(MovieSceneVectorTrackExtensions_GetNumChannelsUsed, Track) == 0x000000, "Member 'MovieSceneVectorTrackExtensions_GetNumChannelsUsed::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneVectorTrackExtensions_GetNumChannelsUsed, ReturnValue) == 0x000008, "Member 'MovieSceneVectorTrackExtensions_GetNumChannelsUsed::ReturnValue' has a wrong offset!");

// Function SequencerScripting.MovieSceneVectorTrackExtensions.SetNumChannelsUsed
// 0x0010 (0x0010 - 0x0000)
struct MovieSceneVectorTrackExtensions_SetNumChannelsUsed final
{
public:
	class UMovieSceneVectorTrack*                 Track;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNumChannelsUsed;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovieSceneVectorTrackExtensions_SetNumChannelsUsed) == 0x000008, "Wrong alignment on MovieSceneVectorTrackExtensions_SetNumChannelsUsed");
static_assert(sizeof(MovieSceneVectorTrackExtensions_SetNumChannelsUsed) == 0x000010, "Wrong size on MovieSceneVectorTrackExtensions_SetNumChannelsUsed");
static_assert(offsetof(MovieSceneVectorTrackExtensions_SetNumChannelsUsed, Track) == 0x000000, "Member 'MovieSceneVectorTrackExtensions_SetNumChannelsUsed::Track' has a wrong offset!");
static_assert(offsetof(MovieSceneVectorTrackExtensions_SetNumChannelsUsed, InNumChannelsUsed) == 0x000008, "Member 'MovieSceneVectorTrackExtensions_SetNumChannelsUsed::InNumChannelsUsed' has a wrong offset!");

// Function SequencerScripting.SequencerScriptingRangeExtensions.GetEndFrame
// 0x0018 (0x0018 - 0x0000)
struct SequencerScriptingRangeExtensions_GetEndFrame final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerScriptingRangeExtensions_GetEndFrame) == 0x000004, "Wrong alignment on SequencerScriptingRangeExtensions_GetEndFrame");
static_assert(sizeof(SequencerScriptingRangeExtensions_GetEndFrame) == 0x000018, "Wrong size on SequencerScriptingRangeExtensions_GetEndFrame");
static_assert(offsetof(SequencerScriptingRangeExtensions_GetEndFrame, Range) == 0x000000, "Member 'SequencerScriptingRangeExtensions_GetEndFrame::Range' has a wrong offset!");
static_assert(offsetof(SequencerScriptingRangeExtensions_GetEndFrame, ReturnValue) == 0x000014, "Member 'SequencerScriptingRangeExtensions_GetEndFrame::ReturnValue' has a wrong offset!");

// Function SequencerScripting.SequencerScriptingRangeExtensions.GetEndSeconds
// 0x0018 (0x0018 - 0x0000)
struct SequencerScriptingRangeExtensions_GetEndSeconds final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerScriptingRangeExtensions_GetEndSeconds) == 0x000004, "Wrong alignment on SequencerScriptingRangeExtensions_GetEndSeconds");
static_assert(sizeof(SequencerScriptingRangeExtensions_GetEndSeconds) == 0x000018, "Wrong size on SequencerScriptingRangeExtensions_GetEndSeconds");
static_assert(offsetof(SequencerScriptingRangeExtensions_GetEndSeconds, Range) == 0x000000, "Member 'SequencerScriptingRangeExtensions_GetEndSeconds::Range' has a wrong offset!");
static_assert(offsetof(SequencerScriptingRangeExtensions_GetEndSeconds, ReturnValue) == 0x000014, "Member 'SequencerScriptingRangeExtensions_GetEndSeconds::ReturnValue' has a wrong offset!");

// Function SequencerScripting.SequencerScriptingRangeExtensions.GetStartFrame
// 0x0018 (0x0018 - 0x0000)
struct SequencerScriptingRangeExtensions_GetStartFrame final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerScriptingRangeExtensions_GetStartFrame) == 0x000004, "Wrong alignment on SequencerScriptingRangeExtensions_GetStartFrame");
static_assert(sizeof(SequencerScriptingRangeExtensions_GetStartFrame) == 0x000018, "Wrong size on SequencerScriptingRangeExtensions_GetStartFrame");
static_assert(offsetof(SequencerScriptingRangeExtensions_GetStartFrame, Range) == 0x000000, "Member 'SequencerScriptingRangeExtensions_GetStartFrame::Range' has a wrong offset!");
static_assert(offsetof(SequencerScriptingRangeExtensions_GetStartFrame, ReturnValue) == 0x000014, "Member 'SequencerScriptingRangeExtensions_GetStartFrame::ReturnValue' has a wrong offset!");

// Function SequencerScripting.SequencerScriptingRangeExtensions.GetStartSeconds
// 0x0018 (0x0018 - 0x0000)
struct SequencerScriptingRangeExtensions_GetStartSeconds final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerScriptingRangeExtensions_GetStartSeconds) == 0x000004, "Wrong alignment on SequencerScriptingRangeExtensions_GetStartSeconds");
static_assert(sizeof(SequencerScriptingRangeExtensions_GetStartSeconds) == 0x000018, "Wrong size on SequencerScriptingRangeExtensions_GetStartSeconds");
static_assert(offsetof(SequencerScriptingRangeExtensions_GetStartSeconds, Range) == 0x000000, "Member 'SequencerScriptingRangeExtensions_GetStartSeconds::Range' has a wrong offset!");
static_assert(offsetof(SequencerScriptingRangeExtensions_GetStartSeconds, ReturnValue) == 0x000014, "Member 'SequencerScriptingRangeExtensions_GetStartSeconds::ReturnValue' has a wrong offset!");

// Function SequencerScripting.SequencerScriptingRangeExtensions.HasEnd
// 0x0018 (0x0018 - 0x0000)
struct SequencerScriptingRangeExtensions_HasEnd final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequencerScriptingRangeExtensions_HasEnd) == 0x000004, "Wrong alignment on SequencerScriptingRangeExtensions_HasEnd");
static_assert(sizeof(SequencerScriptingRangeExtensions_HasEnd) == 0x000018, "Wrong size on SequencerScriptingRangeExtensions_HasEnd");
static_assert(offsetof(SequencerScriptingRangeExtensions_HasEnd, Range) == 0x000000, "Member 'SequencerScriptingRangeExtensions_HasEnd::Range' has a wrong offset!");
static_assert(offsetof(SequencerScriptingRangeExtensions_HasEnd, ReturnValue) == 0x000014, "Member 'SequencerScriptingRangeExtensions_HasEnd::ReturnValue' has a wrong offset!");

// Function SequencerScripting.SequencerScriptingRangeExtensions.HasStart
// 0x0018 (0x0018 - 0x0000)
struct SequencerScriptingRangeExtensions_HasStart final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SequencerScriptingRangeExtensions_HasStart) == 0x000004, "Wrong alignment on SequencerScriptingRangeExtensions_HasStart");
static_assert(sizeof(SequencerScriptingRangeExtensions_HasStart) == 0x000018, "Wrong size on SequencerScriptingRangeExtensions_HasStart");
static_assert(offsetof(SequencerScriptingRangeExtensions_HasStart, Range) == 0x000000, "Member 'SequencerScriptingRangeExtensions_HasStart::Range' has a wrong offset!");
static_assert(offsetof(SequencerScriptingRangeExtensions_HasStart, ReturnValue) == 0x000014, "Member 'SequencerScriptingRangeExtensions_HasStart::ReturnValue' has a wrong offset!");

// Function SequencerScripting.SequencerScriptingRangeExtensions.RemoveEnd
// 0x0014 (0x0014 - 0x0000)
struct SequencerScriptingRangeExtensions_RemoveEnd final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerScriptingRangeExtensions_RemoveEnd) == 0x000004, "Wrong alignment on SequencerScriptingRangeExtensions_RemoveEnd");
static_assert(sizeof(SequencerScriptingRangeExtensions_RemoveEnd) == 0x000014, "Wrong size on SequencerScriptingRangeExtensions_RemoveEnd");
static_assert(offsetof(SequencerScriptingRangeExtensions_RemoveEnd, Range) == 0x000000, "Member 'SequencerScriptingRangeExtensions_RemoveEnd::Range' has a wrong offset!");

// Function SequencerScripting.SequencerScriptingRangeExtensions.RemoveStart
// 0x0014 (0x0014 - 0x0000)
struct SequencerScriptingRangeExtensions_RemoveStart final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerScriptingRangeExtensions_RemoveStart) == 0x000004, "Wrong alignment on SequencerScriptingRangeExtensions_RemoveStart");
static_assert(sizeof(SequencerScriptingRangeExtensions_RemoveStart) == 0x000014, "Wrong size on SequencerScriptingRangeExtensions_RemoveStart");
static_assert(offsetof(SequencerScriptingRangeExtensions_RemoveStart, Range) == 0x000000, "Member 'SequencerScriptingRangeExtensions_RemoveStart::Range' has a wrong offset!");

// Function SequencerScripting.SequencerScriptingRangeExtensions.SetEndFrame
// 0x0018 (0x0018 - 0x0000)
struct SequencerScriptingRangeExtensions_SetEndFrame final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         End;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerScriptingRangeExtensions_SetEndFrame) == 0x000004, "Wrong alignment on SequencerScriptingRangeExtensions_SetEndFrame");
static_assert(sizeof(SequencerScriptingRangeExtensions_SetEndFrame) == 0x000018, "Wrong size on SequencerScriptingRangeExtensions_SetEndFrame");
static_assert(offsetof(SequencerScriptingRangeExtensions_SetEndFrame, Range) == 0x000000, "Member 'SequencerScriptingRangeExtensions_SetEndFrame::Range' has a wrong offset!");
static_assert(offsetof(SequencerScriptingRangeExtensions_SetEndFrame, End) == 0x000014, "Member 'SequencerScriptingRangeExtensions_SetEndFrame::End' has a wrong offset!");

// Function SequencerScripting.SequencerScriptingRangeExtensions.SetEndSeconds
// 0x0018 (0x0018 - 0x0000)
struct SequencerScriptingRangeExtensions_SetEndSeconds final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         End;                                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerScriptingRangeExtensions_SetEndSeconds) == 0x000004, "Wrong alignment on SequencerScriptingRangeExtensions_SetEndSeconds");
static_assert(sizeof(SequencerScriptingRangeExtensions_SetEndSeconds) == 0x000018, "Wrong size on SequencerScriptingRangeExtensions_SetEndSeconds");
static_assert(offsetof(SequencerScriptingRangeExtensions_SetEndSeconds, Range) == 0x000000, "Member 'SequencerScriptingRangeExtensions_SetEndSeconds::Range' has a wrong offset!");
static_assert(offsetof(SequencerScriptingRangeExtensions_SetEndSeconds, End) == 0x000014, "Member 'SequencerScriptingRangeExtensions_SetEndSeconds::End' has a wrong offset!");

// Function SequencerScripting.SequencerScriptingRangeExtensions.SetStartFrame
// 0x0018 (0x0018 - 0x0000)
struct SequencerScriptingRangeExtensions_SetStartFrame final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Start;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerScriptingRangeExtensions_SetStartFrame) == 0x000004, "Wrong alignment on SequencerScriptingRangeExtensions_SetStartFrame");
static_assert(sizeof(SequencerScriptingRangeExtensions_SetStartFrame) == 0x000018, "Wrong size on SequencerScriptingRangeExtensions_SetStartFrame");
static_assert(offsetof(SequencerScriptingRangeExtensions_SetStartFrame, Range) == 0x000000, "Member 'SequencerScriptingRangeExtensions_SetStartFrame::Range' has a wrong offset!");
static_assert(offsetof(SequencerScriptingRangeExtensions_SetStartFrame, Start) == 0x000014, "Member 'SequencerScriptingRangeExtensions_SetStartFrame::Start' has a wrong offset!");

// Function SequencerScripting.SequencerScriptingRangeExtensions.SetStartSeconds
// 0x0018 (0x0018 - 0x0000)
struct SequencerScriptingRangeExtensions_SetStartSeconds final
{
public:
	struct FSequencerScriptingRange               Range;                                             // 0x0000(0x0014)(Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Start;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SequencerScriptingRangeExtensions_SetStartSeconds) == 0x000004, "Wrong alignment on SequencerScriptingRangeExtensions_SetStartSeconds");
static_assert(sizeof(SequencerScriptingRangeExtensions_SetStartSeconds) == 0x000018, "Wrong size on SequencerScriptingRangeExtensions_SetStartSeconds");
static_assert(offsetof(SequencerScriptingRangeExtensions_SetStartSeconds, Range) == 0x000000, "Member 'SequencerScriptingRangeExtensions_SetStartSeconds::Range' has a wrong offset!");
static_assert(offsetof(SequencerScriptingRangeExtensions_SetStartSeconds, Start) == 0x000014, "Member 'SequencerScriptingRangeExtensions_SetStartSeconds::Start' has a wrong offset!");

}

