#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum CharacterBase.EMobWalkStartState
// NumValues: 0x0004
enum class EMobWalkStartState : uint8
{
	Start                                    = 0,
	ReStart                                  = 1,
	Run                                      = 2,
	EMobWalkStartState_MAX                   = 3,
};

// Enum CharacterBase.EMobWalkTargetType
// NumValues: 0x0003
enum class EMobWalkTargetType : uint8
{
	Normal                                   = 0,
	Stop                                     = 1,
	Max                                      = 2,
};

// Enum CharacterBase.ENpcAnimLookAtType
// NumValues: 0x0005
enum class ENpcAnimLookAtType : uint8
{
	Disable                                  = 0,
	World                                    = 1,
	TargetActor                              = 2,
	TargetActorFIELD                         = 3,
	ENpcAnimLookAtType_MAX                   = 4,
};

// ScriptStruct CharacterBase.CB_NpcAnimPack
// 0x0010 (0x0010 - 0x0000)
struct FCB_NpcAnimPack final
{
public:
	TArray<TSoftClassPtr<class UClass>>           _Base;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCB_NpcAnimPack) == 0x000008, "Wrong alignment on FCB_NpcAnimPack");
static_assert(sizeof(FCB_NpcAnimPack) == 0x000010, "Wrong size on FCB_NpcAnimPack");
static_assert(offsetof(FCB_NpcAnimPack, _Base) == 0x000000, "Member 'FCB_NpcAnimPack::_Base' has a wrong offset!");

// ScriptStruct CharacterBase.CB_NpcMeshPack
// 0x0010 (0x0010 - 0x0000)
struct FCB_NpcMeshPack final
{
public:
	TArray<TSoftObjectPtr<class USkeletalMesh>>   _Base;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCB_NpcMeshPack) == 0x000008, "Wrong alignment on FCB_NpcMeshPack");
static_assert(sizeof(FCB_NpcMeshPack) == 0x000010, "Wrong size on FCB_NpcMeshPack");
static_assert(offsetof(FCB_NpcMeshPack, _Base) == 0x000000, "Member 'FCB_NpcMeshPack::_Base' has a wrong offset!");

// ScriptStruct CharacterBase.CB_PersonaAnimPack
// 0x0010 (0x0010 - 0x0000)
struct FCB_PersonaAnimPack final
{
public:
	TArray<TSoftClassPtr<class UClass>>           _Base;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCB_PersonaAnimPack) == 0x000008, "Wrong alignment on FCB_PersonaAnimPack");
static_assert(sizeof(FCB_PersonaAnimPack) == 0x000010, "Wrong size on FCB_PersonaAnimPack");
static_assert(offsetof(FCB_PersonaAnimPack, _Base) == 0x000000, "Member 'FCB_PersonaAnimPack::_Base' has a wrong offset!");

// ScriptStruct CharacterBase.CB_PersonaMeshPack
// 0x0010 (0x0010 - 0x0000)
struct FCB_PersonaMeshPack final
{
public:
	TArray<TSoftObjectPtr<class USkeletalMesh>>   _Base;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCB_PersonaMeshPack) == 0x000008, "Wrong alignment on FCB_PersonaMeshPack");
static_assert(sizeof(FCB_PersonaMeshPack) == 0x000010, "Wrong size on FCB_PersonaMeshPack");
static_assert(offsetof(FCB_PersonaMeshPack, _Base) == 0x000000, "Member 'FCB_PersonaMeshPack::_Base' has a wrong offset!");

// ScriptStruct CharacterBase.CB_HumanAnimPack
// 0x0030 (0x0030 - 0x0000)
struct FCB_HumanAnimPack final
{
public:
	TArray<TSoftClassPtr<class UClass>>           _Base;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           _Costume;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           _Hair;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCB_HumanAnimPack) == 0x000008, "Wrong alignment on FCB_HumanAnimPack");
static_assert(sizeof(FCB_HumanAnimPack) == 0x000030, "Wrong size on FCB_HumanAnimPack");
static_assert(offsetof(FCB_HumanAnimPack, _Base) == 0x000000, "Member 'FCB_HumanAnimPack::_Base' has a wrong offset!");
static_assert(offsetof(FCB_HumanAnimPack, _Costume) == 0x000010, "Member 'FCB_HumanAnimPack::_Costume' has a wrong offset!");
static_assert(offsetof(FCB_HumanAnimPack, _Hair) == 0x000020, "Member 'FCB_HumanAnimPack::_Hair' has a wrong offset!");

// ScriptStruct CharacterBase.CB_HumanMeshPack
// 0x0040 (0x0040 - 0x0000)
struct FCB_HumanMeshPack final
{
public:
	TArray<TSoftObjectPtr<class USkeletalMesh>>   _Base;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   _Costume;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   _Hair;                                             // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USkeletalMesh>>   _Face;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCB_HumanMeshPack) == 0x000008, "Wrong alignment on FCB_HumanMeshPack");
static_assert(sizeof(FCB_HumanMeshPack) == 0x000040, "Wrong size on FCB_HumanMeshPack");
static_assert(offsetof(FCB_HumanMeshPack, _Base) == 0x000000, "Member 'FCB_HumanMeshPack::_Base' has a wrong offset!");
static_assert(offsetof(FCB_HumanMeshPack, _Costume) == 0x000010, "Member 'FCB_HumanMeshPack::_Costume' has a wrong offset!");
static_assert(offsetof(FCB_HumanMeshPack, _Hair) == 0x000020, "Member 'FCB_HumanMeshPack::_Hair' has a wrong offset!");
static_assert(offsetof(FCB_HumanMeshPack, _Face) == 0x000030, "Member 'FCB_HumanMeshPack::_Face' has a wrong offset!");

// ScriptStruct CharacterBase.MobWalkRoutePoint
// 0x0040 (0x0040 - 0x0000)
struct FMobWalkRoutePoint final
{
public:
	EMobWalkTargetType                            MType;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MStopTime;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             MTransform;                                        // 0x0010(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMobWalkRoutePoint) == 0x000010, "Wrong alignment on FMobWalkRoutePoint");
static_assert(sizeof(FMobWalkRoutePoint) == 0x000040, "Wrong size on FMobWalkRoutePoint");
static_assert(offsetof(FMobWalkRoutePoint, MType) == 0x000000, "Member 'FMobWalkRoutePoint::MType' has a wrong offset!");
static_assert(offsetof(FMobWalkRoutePoint, MStopTime) == 0x000004, "Member 'FMobWalkRoutePoint::MStopTime' has a wrong offset!");
static_assert(offsetof(FMobWalkRoutePoint, MTransform) == 0x000010, "Member 'FMobWalkRoutePoint::MTransform' has a wrong offset!");

}

