#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Xrd777

#include "Basic.hpp"

#include "Xrd777_classes.hpp"
#include "Xrd777_parameters.hpp"


namespace SDK
{

// Function xrd777.AppActor.AsAActor
// (Native, Public)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* AAppActor::AsAActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppActor", "AsAActor");

	Params::AppActor_AsAActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppActor.AsUObject
// (Native, Public)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* AAppActor::AsUObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppActor", "AsUObject");

	Params::AppActor_AsUObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppActor.BeginPlay
// (Native, Public)

void AAppActor::BeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppActor", "BeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppActor.EndPlay
// (Native, Public)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAppActor::EndPlay(const EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppActor", "EndPlay");

	Params::AppActor_EndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppActor.GetAppPauseFlags
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAppPauseObjectFlag                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAppPauseObjectFlag AAppActor::GetAppPauseFlags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppActor", "GetAppPauseFlags");

	Params::AppActor_GetAppPauseFlags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.TitleLogoActor.GetAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ATitleLogoActor::GetAlpha()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TitleLogoActor", "GetAlpha");

	Params::TitleLogoActor_GetAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.TitleLogoActor.IsGameClear
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ATitleLogoActor::IsGameClear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TitleLogoActor", "IsGameClear");

	Params::TitleLogoActor_IsGameClear Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppMultiDataAsset.Import
// (Native, Public, BlueprintCallable)

void UAppMultiDataAsset::Import()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppMultiDataAsset", "Import");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppDataAsset.Import
// (Native, Public, BlueprintCallable)

void UAppDataAsset::Import()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppDataAsset", "Import");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlAI.GetPrevUseActionIDForActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlAI::GetPrevUseActionIDForActor(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlAI", "GetPrevUseActionIDForActor");

	Params::BtlAI_GetPrevUseActionIDForActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_GetRenderTarget
// (Final, Native, Static, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   CanvasIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* AUIDrawBaseActor::BPUICommand_GetRenderTarget(const int32 CanvasIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIDrawBaseActor", "BPUICommand_GetRenderTarget");

	Params::UIDrawBaseActor_BPUICommand_GetRenderTarget Parms{};

	Parms.CanvasIndex = CanvasIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIDrawBaseActor.AddLoadAsset
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UObject>           SoftAsset                                              (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::AddLoadAsset(const TSoftObjectPtr<class UObject> SoftAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "AddLoadAsset");

	Params::UIDrawBaseActor_AddLoadAsset Parms{};

	Parms.SoftAsset = SoftAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_AtlUIBlendState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EUIBLEND_STATE_TYPE                     BlendType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_AtlUIBlendState(const EUIBLEND_STATE_TYPE BlendType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_AtlUIBlendState");

	Params::UIDrawBaseActor_BPUICommand_AtlUIBlendState Parms{};

	Parms.BlendType = BlendType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_CastPlgAsset
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UObject*                          Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPlgAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPlgAsset* AUIDrawBaseActor::BPUICommand_CastPlgAsset(class UObject* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_CastPlgAsset");

	Params::UIDrawBaseActor_BPUICommand_CastPlgAsset Parms{};

	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_CastSprAsset
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UObject*                          Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USprAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USprAsset* AUIDrawBaseActor::BPUICommand_CastSprAsset(class UObject* Asset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_CastSprAsset");

	Params::UIDrawBaseActor_BPUICommand_CastSprAsset Parms{};

	Parms.Asset = Asset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_DrawMaterial
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          PMaterial                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_DrawMaterial(const float X, const float Y, const float Z, const float Width, const float Height, const float Angle, const class UObject* PMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_DrawMaterial");

	Params::UIDrawBaseActor_BPUICommand_DrawMaterial Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Angle = Angle;
	Parms.PMaterial = PMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_DrawPlg
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlgID                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPlgAsset*                        PlgHandle                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_DrawPlg(const float X, const float Y, const float Z, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const int32 PlgID, const float ScaleX, const float ScaleY, const float Angle, const class UPlgAsset* PlgHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_DrawPlg");

	Params::UIDrawBaseActor_BPUICommand_DrawPlg Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.PlgID = PlgID;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.PlgHandle = PlgHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_DrawRect
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Antialiasing                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_DrawRect(const float X, const float Y, const float Z, const float Width, const float Height, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float ScaleX, const float ScaleY, const float Angle, const float Antialiasing, const EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_DrawRect");

	Params::UIDrawBaseActor_BPUICommand_DrawRect Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.Antialiasing = Antialiasing;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_DrawRectV4
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX0                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY0                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX1                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY1                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX2                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY2                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX3                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY3                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Antialiasing                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_DrawRectV4(const float X, const float Y, const float Z, const float VX0, const float VY0, const float VX1, const float VY1, const float VX2, const float VY2, const float VX3, const float VY3, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float ScaleX, const float ScaleY, const float Angle, const float Antialiasing, const EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_DrawRectV4");

	Params::UIDrawBaseActor_BPUICommand_DrawRectV4 Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.VX0 = VX0;
	Parms.VY0 = VY0;
	Parms.VX1 = VX1;
	Parms.VY1 = VY1;
	Parms.VX2 = VX2;
	Parms.VY2 = VY2;
	Parms.VX3 = VX3;
	Parms.VY3 = VY3;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.Antialiasing = Antialiasing;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_DrawRoundRect
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Round                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Antialiasing                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_DrawRoundRect(const float X, const float Y, const float Z, const float Width, const float Height, const int32 Round, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float ScaleX, const float ScaleY, const float Angle, const float Antialiasing, const EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_DrawRoundRect");

	Params::UIDrawBaseActor_BPUICommand_DrawRoundRect Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Round = Round;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.Antialiasing = Antialiasing;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_DrawScrollbar
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScrollRange                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScrollPos                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DrawListNum                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxListNum                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Antialiasing                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_DrawScrollbar(const float X, const float Y, const float Z, const float Width, const float Height, const float ScrollRange, const int32 ScrollPos, const int32 DrawListNum, const int32 MaxListNum, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float ScaleX, const float ScaleY, const float Angle, const float Antialiasing, const EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_DrawScrollbar");

	Params::UIDrawBaseActor_BPUICommand_DrawScrollbar Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.ScrollRange = ScrollRange;
	Parms.ScrollPos = ScrollPos;
	Parms.DrawListNum = DrawListNum;
	Parms.MaxListNum = MaxListNum;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.Antialiasing = Antialiasing;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_DrawSircle
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Antialiasing                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_DrawSircle(const float X, const float Y, const float Z, const float Radius, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float Antialiasing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_DrawSircle");

	Params::UIDrawBaseActor_BPUICommand_DrawSircle Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Radius = Radius;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.Antialiasing = Antialiasing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_DrawSpr
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SprNo                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USprAsset*                        SprHandle                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_DrawSpr(const float X, const float Y, const float Z, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const int32 SprNo, const float ScaleX, const float ScaleY, const float Angle, const class USprAsset* SprHandle, const EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_DrawSpr");

	Params::UIDrawBaseActor_BPUICommand_DrawSpr Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.SprNo = SprNo;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.SprHandle = SprHandle;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_DrawTexture
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   U0                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   V0                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   U1                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   V1                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         TextureHandle                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_DrawTexture(const float X, const float Y, const float Z, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float ScaleX, const float ScaleY, const float Angle, const float U0, const float V0, const float U1, const float V1, const class UTexture* TextureHandle, const EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_DrawTexture");

	Params::UIDrawBaseActor_BPUICommand_DrawTexture Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.U0 = U0;
	Parms.V0 = V0;
	Parms.U1 = U1;
	Parms.V1 = V1;
	Parms.TextureHandle = TextureHandle;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_DrawTriangle
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX0                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY0                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX1                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY1                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX2                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY2                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Antialiasing                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_DrawTriangle(const float X, const float Y, const float Z, const float VX0, const float VY0, const float VX1, const float VY1, const float VX2, const float VY2, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float ScaleX, const float ScaleY, const float Angle, const float Antialiasing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_DrawTriangle");

	Params::UIDrawBaseActor_BPUICommand_DrawTriangle Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.VX0 = VX0;
	Parms.VY0 = VY0;
	Parms.VX1 = VX1;
	Parms.VY1 = VY1;
	Parms.VX2 = VX2;
	Parms.VY2 = VY2;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.Antialiasing = Antialiasing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_DrawVerticalGradationRect
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           TopColor                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           BottomColor                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_DrawVerticalGradationRect(const float X, const float Y, const float Width, const float Height, const struct FColor& TopColor, const struct FColor& BottomColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_DrawVerticalGradationRect");

	Params::UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.TopColor = std::move(TopColor);
	Parms.BottomColor = std::move(BottomColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_FontDraw
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIFontStyle                            Style                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_FontDraw(const float X, const float Y, const float Z, const class FString& String, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float Scale, const float Angle, const EUI_DRAW_POINT DrawPoint, const EUIFontStyle Style)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_FontDraw");

	Params::UIDrawBaseActor_BPUICommand_FontDraw Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.String = std::move(String);
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.Scale = Scale;
	Parms.Angle = Angle;
	Parms.DrawPoint = DrawPoint;
	Parms.Style = Style;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_FontDrawEx
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnglePointX                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnglePointY                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIFontStyle                            Style                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_FontDrawEx(const float X, const float Y, const float Z, const class FString& String, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float Scale, const float Angle, const float AnglePointX, const float AnglePointY, const EUIFontStyle Style)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_FontDrawEx");

	Params::UIDrawBaseActor_BPUICommand_FontDrawEx Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.String = std::move(String);
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.Scale = Scale;
	Parms.Angle = Angle;
	Parms.AnglePointX = AnglePointX;
	Parms.AnglePointY = AnglePointY;
	Parms.Style = Style;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_FontDrawExFromFName
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             String                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnglePointX                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnglePointY                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIFontStyle                            Style                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_FontDrawExFromFName(const float X, const float Y, const float Z, const class FName& String, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float Scale, const float Angle, const float AnglePointX, const float AnglePointY, const EUIFontStyle Style)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_FontDrawExFromFName");

	Params::UIDrawBaseActor_BPUICommand_FontDrawExFromFName Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.String = String;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.Scale = Scale;
	Parms.Angle = Angle;
	Parms.AnglePointX = AnglePointX;
	Parms.AnglePointY = AnglePointY;
	Parms.Style = Style;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_FontDrawFromFName
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             String                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIFontStyle                            Style                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_FontDrawFromFName(const float X, const float Y, const float Z, const class FName& String, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float Scale, const float Angle, const EUI_DRAW_POINT DrawPoint, const EUIFontStyle Style)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_FontDrawFromFName");

	Params::UIDrawBaseActor_BPUICommand_FontDrawFromFName Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.String = String;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.Scale = Scale;
	Parms.Angle = Angle;
	Parms.DrawPoint = DrawPoint;
	Parms.Style = Style;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_ItalicFontDraw
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIFontStyle                            Style                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_ItalicFontDraw(const float X, const float Y, const class FString& String, const struct FColor& Color, const float Scale, const float Angle, const EUI_DRAW_POINT DrawPoint, const EUIFontStyle Style)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_ItalicFontDraw");

	Params::UIDrawBaseActor_BPUICommand_ItalicFontDraw Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.String = std::move(String);
	Parms.Color = std::move(Color);
	Parms.Scale = Scale;
	Parms.Angle = Angle;
	Parms.DrawPoint = DrawPoint;
	Parms.Style = Style;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_ScalingFontDraw
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SizeX                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SizeY                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ScalingOnlyX                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIFontStyle                            Style                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsScaling                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_ScalingFontDraw(const float X, const float Y, const float Z, const class FString& String, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float SizeX, const float SizeY, const float Scale, const float Angle, const bool ScalingOnlyX, const EUI_DRAW_POINT DrawPoint, const EUIFontStyle Style, const bool IsScaling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_ScalingFontDraw");

	Params::UIDrawBaseActor_BPUICommand_ScalingFontDraw Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.String = std::move(String);
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.SizeX = SizeX;
	Parms.SizeY = SizeY;
	Parms.Scale = Scale;
	Parms.Angle = Angle;
	Parms.ScalingOnlyX = ScalingOnlyX;
	Parms.DrawPoint = DrawPoint;
	Parms.Style = Style;
	Parms.IsScaling = IsScaling;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_ScalingItalicFontDraw
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SizeX                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SizeY                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ScalingOnlyX                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIFontStyle                            Style                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_ScalingItalicFontDraw(const float X, const float Y, const class FString& String, const struct FColor& Color, const float SizeX, const float SizeY, const float Scale, const float Angle, const bool ScalingOnlyX, const EUI_DRAW_POINT DrawPoint, const EUIFontStyle Style)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_ScalingItalicFontDraw");

	Params::UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.String = std::move(String);
	Parms.Color = std::move(Color);
	Parms.SizeX = SizeX;
	Parms.SizeY = SizeY;
	Parms.Scale = Scale;
	Parms.Angle = Angle;
	Parms.ScalingOnlyX = ScalingOnlyX;
	Parms.DrawPoint = DrawPoint;
	Parms.Style = Style;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_SetBlendState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EUIBlendOperation                       OpColor                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIBlendFactor                          SrcColor                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIBlendFactor                          DstColor                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIBlendOperation                       OpAlpha                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIBlendFactor                          SrcAlpha                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIBlendFactor                          DstAlpha                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_SetBlendState(const EUIBlendOperation OpColor, const EUIBlendFactor SrcColor, const EUIBlendFactor DstColor, const EUIBlendOperation OpAlpha, const EUIBlendFactor SrcAlpha, const EUIBlendFactor DstAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_SetBlendState");

	Params::UIDrawBaseActor_BPUICommand_SetBlendState Parms{};

	Parms.OpColor = OpColor;
	Parms.SrcColor = SrcColor;
	Parms.DstColor = DstColor;
	Parms.OpAlpha = OpAlpha;
	Parms.SrcAlpha = SrcAlpha;
	Parms.DstAlpha = DstAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_SetPresetBlendState
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EUIOTPRESET_BLEND_TYPE                  BlendType                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_SetPresetBlendState(const EUIOTPRESET_BLEND_TYPE BlendType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_SetPresetBlendState");

	Params::UIDrawBaseActor_BPUICommand_SetPresetBlendState Parms{};

	Parms.BlendType = BlendType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUICommand_SetRenderTarget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   CanvasIndex                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUICommand_SetRenderTarget(const int32 CanvasIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUICommand_SetRenderTarget");

	Params::UIDrawBaseActor_BPUICommand_SetRenderTarget Parms{};

	Parms.CanvasIndex = CanvasIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUIDebugCommand_DrawMaterial
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInstance*                PMaterialInstance                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUIDebugCommand_DrawMaterial(const float X, const float Y, const float Z, const float Width, const float Height, const float Angle, const class UMaterialInstance* PMaterialInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUIDebugCommand_DrawMaterial");

	Params::UIDrawBaseActor_BPUIDebugCommand_DrawMaterial Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Angle = Angle;
	Parms.PMaterialInstance = PMaterialInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUIDebugCommand_DrawRect
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Antialiasing                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUIDebugCommand_DrawRect(const float X, const float Y, const float Z, const float Width, const float Height, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float ScaleX, const float ScaleY, const float Angle, const float Antialiasing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUIDebugCommand_DrawRect");

	Params::UIDrawBaseActor_BPUIDebugCommand_DrawRect Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.Antialiasing = Antialiasing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUIDebugCommand_DrawRectV4
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX0                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY0                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX1                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY1                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX2                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY2                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX3                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY3                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Antialiasing                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUIDebugCommand_DrawRectV4(const float X, const float Y, const float Z, const float VX0, const float VY0, const float VX1, const float VY1, const float VX2, const float VY2, const float VX3, const float VY3, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float ScaleX, const float ScaleY, const float Angle, const float Antialiasing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUIDebugCommand_DrawRectV4");

	Params::UIDrawBaseActor_BPUIDebugCommand_DrawRectV4 Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.VX0 = VX0;
	Parms.VY0 = VY0;
	Parms.VX1 = VX1;
	Parms.VY1 = VY1;
	Parms.VX2 = VX2;
	Parms.VY2 = VY2;
	Parms.VX3 = VX3;
	Parms.VY3 = VY3;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.Antialiasing = Antialiasing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUIDebugCommand_DrawSpr
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SprNo                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USprAsset*                        SprHandle                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUIDebugCommand_DrawSpr(const float X, const float Y, const float Z, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const int32 SprNo, const float ScaleX, const float ScaleY, const float Angle, const class USprAsset* SprHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUIDebugCommand_DrawSpr");

	Params::UIDrawBaseActor_BPUIDebugCommand_DrawSpr Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.SprNo = SprNo;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.SprHandle = SprHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUIDebugCommand_DrawTexture
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   U0                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   V0                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   U1                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   V1                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         TextureHandle                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUIDebugCommand_DrawTexture(const float X, const float Y, const float Z, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float ScaleX, const float ScaleY, const float Angle, const float U0, const float V0, const float U1, const float V1, const class UTexture* TextureHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUIDebugCommand_DrawTexture");

	Params::UIDrawBaseActor_BPUIDebugCommand_DrawTexture Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.U0 = U0;
	Parms.V0 = V0;
	Parms.U1 = U1;
	Parms.V1 = V1;
	Parms.TextureHandle = TextureHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.BPUIDebugCommand_DrawTriangle
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   VX0                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY0                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX1                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY1                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VX2                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VY2                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Antialiasing                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDrawBaseActor::BPUIDebugCommand_DrawTriangle(const float VX0, const float VY0, const float VX1, const float VY1, const float VX2, const float VY2, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float ScaleX, const float ScaleY, const float Angle, const float Antialiasing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "BPUIDebugCommand_DrawTriangle");

	Params::UIDrawBaseActor_BPUIDebugCommand_DrawTriangle Parms{};

	Parms.VX0 = VX0;
	Parms.VY0 = VY0;
	Parms.VX1 = VX1;
	Parms.VY1 = VY1;
	Parms.VX2 = VX2;
	Parms.VY2 = VY2;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.Angle = Angle;
	Parms.Antialiasing = Antialiasing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.GetResourceData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* AUIDrawBaseActor::GetResourceData(const int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "GetResourceData");

	Params::UIDrawBaseActor_GetResourceData Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIDrawBaseActor.LoadStart
// (Final, Native, Protected, BlueprintCallable)

void AUIDrawBaseActor::LoadStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "LoadStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawBaseActor.Sync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIDrawBaseActor::Sync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawBaseActor", "Sync");

	Params::UIDrawBaseActor_Sync Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.BGMAlphaCalculation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InTimer                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InSrcValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InDstValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InWaitFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InNextWaitFrame                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMoveFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InNextMoveFrame                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAppCalculationType                     InAnimType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AUIConfigurationDraw::BGMAlphaCalculation(float InTimer, float InSrcValue, float InDstValue, int32 InWaitFrame, int32 InNextWaitFrame, int32 InMoveFrame, int32 InNextMoveFrame, EAppCalculationType InAnimType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "BGMAlphaCalculation");

	Params::UIConfigurationDraw_BGMAlphaCalculation Parms{};

	Parms.InTimer = InTimer;
	Parms.InSrcValue = InSrcValue;
	Parms.InDstValue = InDstValue;
	Parms.InWaitFrame = InWaitFrame;
	Parms.InNextWaitFrame = InNextWaitFrame;
	Parms.InMoveFrame = InMoveFrame;
	Parms.InNextMoveFrame = InNextMoveFrame;
	Parms.InAnimType = InAnimType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.BGMInAnimFinished
// (Final, Native, Public, BlueprintCallable)

void AUIConfigurationDraw::BGMInAnimFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "BGMInAnimFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.BGMMoveCalculation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   InTimer                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InSrcValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InDstValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InWaitFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMoveFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAppCalculationType                     InAnimType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AUIConfigurationDraw::BGMMoveCalculation(float InTimer, const struct FVector2D& InSrcValue, const struct FVector2D& InDstValue, int32 InWaitFrame, int32 InMoveFrame, EAppCalculationType InAnimType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "BGMMoveCalculation");

	Params::UIConfigurationDraw_BGMMoveCalculation Parms{};

	Parms.InTimer = InTimer;
	Parms.InSrcValue = std::move(InSrcValue);
	Parms.InDstValue = std::move(InDstValue);
	Parms.InWaitFrame = InWaitFrame;
	Parms.InMoveFrame = InMoveFrame;
	Parms.InAnimType = InAnimType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.BGMScaleCalculation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InTimer                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InSrcValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InDstValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InWaitFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMoveFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAppCalculationType                     InAnimType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AUIConfigurationDraw::BGMScaleCalculation(float InTimer, float InSrcValue, float InDstValue, int32 InWaitFrame, int32 InMoveFrame, EAppCalculationType InAnimType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "BGMScaleCalculation");

	Params::UIConfigurationDraw_BGMScaleCalculation Parms{};

	Parms.InTimer = InTimer;
	Parms.InSrcValue = InSrcValue;
	Parms.InDstValue = InDstValue;
	Parms.InWaitFrame = InWaitFrame;
	Parms.InMoveFrame = InMoveFrame;
	Parms.InAnimType = InAnimType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.BgmSetAnimFinished
// (Final, Native, Public, BlueprintCallable)

void AUIConfigurationDraw::BgmSetAnimFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "BgmSetAnimFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.BPUICommand_DrawSpr_Ex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SprNo                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScaleY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PipodX                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PipodY                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USprAsset*                        SprHandle                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::BPUICommand_DrawSpr_Ex(const float X, const float Y, const float Z, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const int32 SprNo, const float ScaleX, const float ScaleY, const float PipodX, const float PipodY, const float Angle, const class USprAsset* SprHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "BPUICommand_DrawSpr_Ex");

	Params::UIConfigurationDraw_BPUICommand_DrawSpr_Ex Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.SprNo = SprNo;
	Parms.ScaleX = ScaleX;
	Parms.ScaleY = ScaleY;
	Parms.PipodX = PipodX;
	Parms.PipodY = PipodY;
	Parms.Angle = Angle;
	Parms.SprHandle = SprHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.Closed
// (Final, Native, Public, BlueprintCallable)

void AUIConfigurationDraw::Closed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "Closed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.ConfigInAnimFinished
// (Final, Native, Public, BlueprintCallable)

void AUIConfigurationDraw::ConfigInAnimFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "ConfigInAnimFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.ConvFrameToTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InFrame                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AUIConfigurationDraw::ConvFrameToTime(int32 InFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "ConvFrameToTime");

	Params::UIConfigurationDraw_ConvFrameToTime Parms{};

	Parms.InFrame = InFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.DrawAudioDeviceChange
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   baseX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   baseY                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TextX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TextY                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   TextColorR                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   TextColorG                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   TextColorB                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   TextColorA                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SizeX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SizeY                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDrawConfigParam                 DrawConfigParam                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USprAsset*                        SprHandle                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::DrawAudioDeviceChange(float baseX, float baseY, float TextX, float TextY, uint8 TextColorR, uint8 TextColorG, uint8 TextColorB, uint8 TextColorA, float SizeX, float SizeY, const struct FDrawConfigParam& DrawConfigParam, const class USprAsset* SprHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawAudioDeviceChange");

	Params::UIConfigurationDraw_DrawAudioDeviceChange Parms{};

	Parms.baseX = baseX;
	Parms.baseY = baseY;
	Parms.TextX = TextX;
	Parms.TextY = TextY;
	Parms.TextColorR = TextColorR;
	Parms.TextColorG = TextColorG;
	Parms.TextColorB = TextColorB;
	Parms.TextColorA = TextColorA;
	Parms.SizeX = SizeX;
	Parms.SizeY = SizeY;
	Parms.DrawConfigParam = std::move(DrawConfigParam);
	Parms.SprHandle = SprHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.DrawBgmSelectText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   baseX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   baseY                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TextX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TextY                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   TextColorR                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   TextColorG                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   TextColorB                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   TextColorA                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SizeX                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SizeY                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDrawConfigParam                 DrawConfigParam                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FDrawBGMParam                    DrawBGMParam                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USprAsset*                        SprHandle                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::DrawBgmSelectText(float baseX, float baseY, float TextX, float TextY, uint8 TextColorR, uint8 TextColorG, uint8 TextColorB, uint8 TextColorA, float SizeX, float SizeY, const struct FDrawConfigParam& DrawConfigParam, struct FDrawBGMParam& DrawBGMParam, const class USprAsset* SprHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawBgmSelectText");

	Params::UIConfigurationDraw_DrawBgmSelectText Parms{};

	Parms.baseX = baseX;
	Parms.baseY = baseY;
	Parms.TextX = TextX;
	Parms.TextY = TextY;
	Parms.TextColorR = TextColorR;
	Parms.TextColorG = TextColorG;
	Parms.TextColorB = TextColorB;
	Parms.TextColorA = TextColorA;
	Parms.SizeX = SizeX;
	Parms.SizeY = SizeY;
	Parms.DrawConfigParam = std::move(DrawConfigParam);
	Parms.DrawBGMParam = std::move(DrawBGMParam);
	Parms.SprHandle = SprHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DrawBGMParam = std::move(Parms.DrawBGMParam);
}


// Function xrd777.UIConfigurationDraw.DrawCloseWipe
// (Final, Native, Public, BlueprintCallable)

void AUIConfigurationDraw::DrawCloseWipe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawCloseWipe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.DrawCommonBg1
// (Final, Native, Public, BlueprintCallable)

void AUIConfigurationDraw::DrawCommonBg1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawCommonBg1");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.DrawCommonBg2
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsTitle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::DrawCommonBg2(bool IsTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawCommonBg2");

	Params::UIConfigurationDraw_DrawCommonBg2 Parms{};

	Parms.IsTitle = IsTitle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.DrawGlowCore
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        PlusOffset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USprAsset*                        SprHandle                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::DrawGlowCore(const struct FVector2D& Offset, const struct FColor& Color, float Scale, const struct FVector2D& PlusOffset, const class USprAsset* SprHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawGlowCore");

	Params::UIConfigurationDraw_DrawGlowCore Parms{};

	Parms.Offset = std::move(Offset);
	Parms.Color = std::move(Color);
	Parms.Scale = Scale;
	Parms.PlusOffset = std::move(PlusOffset);
	Parms.SprHandle = SprHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.DrawHeroSilhouette
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::DrawHeroSilhouette(const struct FVector2D& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawHeroSilhouette");

	Params::UIConfigurationDraw_DrawHeroSilhouette Parms{};

	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.DrawHeroTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         InTexture                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::DrawHeroTexture(class UTexture* InTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawHeroTexture");

	Params::UIConfigurationDraw_DrawHeroTexture Parms{};

	Parms.InTexture = InTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.DrawInWipe
// (Final, Native, Public, BlueprintCallable)

void AUIConfigurationDraw::DrawInWipe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawInWipe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.DrawKeyConfigButtonSpr
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDrawConfigParam                 DrawConfigParam                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FColor                           RGBA                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USprAsset*                        SprHandle                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::DrawKeyConfigButtonSpr(float X, float Y, const struct FDrawConfigParam& DrawConfigParam, const struct FColor& RGBA, const class USprAsset* SprHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawKeyConfigButtonSpr");

	Params::UIConfigurationDraw_DrawKeyConfigButtonSpr Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.DrawConfigParam = std::move(DrawConfigParam);
	Parms.RGBA = std::move(RGBA);
	Parms.SprHandle = SprHandle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.DrawKeyConfigSwitcher
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::DrawKeyConfigSwitcher(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawKeyConfigSwitcher");

	Params::UIConfigurationDraw_DrawKeyConfigSwitcher Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.DrawNami
// (Final, Native, Public, BlueprintCallable)

void AUIConfigurationDraw::DrawNami()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawNami");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.DrawUim
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          InUimAsset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFrame                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsMaxFrame                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         InTexture                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::DrawUim(class UObject* InUimAsset, float InFrame, bool* bIsMaxFrame, const class UTexture* InTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "DrawUim");

	Params::UIConfigurationDraw_DrawUim Parms{};

	Parms.InUimAsset = InUimAsset;
	Parms.InFrame = InFrame;
	Parms.InTexture = InTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bIsMaxFrame != nullptr)
		*bIsMaxFrame = Parms.bIsMaxFrame;
}


// Function xrd777.UIConfigurationDraw.Get_BgMaterial
// (Event, Public, BlueprintEvent)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* AUIConfigurationDraw::Get_BgMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "Get_BgMaterial");

	Params::UIConfigurationDraw_Get_BgMaterial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetAdjustedConfigPos
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// ECmpLayoutConfig                        InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Default                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::GetAdjustedConfigPos(ECmpLayoutConfig InType, const struct FVector2D& Default, struct FVector2D* OutSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetAdjustedConfigPos");

	Params::UIConfigurationDraw_GetAdjustedConfigPos Parms{};

	Parms.InType = InType;
	Parms.Default = std::move(Default);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSize != nullptr)
		*OutSize = std::move(Parms.OutSize);
}


// Function xrd777.UIConfigurationDraw.GetAdjustedConfigTextCol
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// ECmpLayoutConfigText                    InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::GetAdjustedConfigTextCol(ECmpLayoutConfigText InType, struct FVector2D* OutSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetAdjustedConfigTextCol");

	Params::UIConfigurationDraw_GetAdjustedConfigTextCol Parms{};

	Parms.InType = InType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutSize != nullptr)
		*OutSize = std::move(Parms.OutSize);
}


// Function xrd777.UIConfigurationDraw.GetAdjustedHelpBarOffset
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    InIsBGMMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::GetAdjustedHelpBarOffset(bool InIsBGMMode, struct FVector2D* OutPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetAdjustedHelpBarOffset");

	Params::UIConfigurationDraw_GetAdjustedHelpBarOffset Parms{};

	Parms.InIsBGMMode = InIsBGMMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetAdjustedHelpRootPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    InIsBGMMode                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::GetAdjustedHelpRootPosition(bool InIsBGMMode, struct FVector2D* OutPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetAdjustedHelpRootPosition");

	Params::UIConfigurationDraw_GetAdjustedHelpRootPosition Parms{};

	Parms.InIsBGMMode = InIsBGMMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetBgmCursorIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIConfigurationDraw::GetBgmCursorIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetBgmCursorIndex");

	Params::UIConfigurationDraw_GetBgmCursorIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetBgmListTopIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIConfigurationDraw::GetBgmListTopIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetBgmListTopIndex");

	Params::UIConfigurationDraw_GetBgmListTopIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetBgmSetID
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIConfigurationDraw::GetBgmSetID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetBgmSetID");

	Params::UIConfigurationDraw_GetBgmSetID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetBGMText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InSelect                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AUIConfigurationDraw::GetBGMText(int32 InSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetBGMText");

	Params::UIConfigurationDraw_GetBGMText Parms{};

	Parms.InSelect = InSelect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetBlueBoardColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor AUIConfigurationDraw::GetBlueBoardColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetBlueBoardColor");

	Params::UIConfigurationDraw_GetBlueBoardColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetButtonLayoutText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InSelect                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AUIConfigurationDraw::GetButtonLayoutText(int32 InSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetButtonLayoutText");

	Params::UIConfigurationDraw_GetButtonLayoutText Parms{};

	Parms.InSelect = InSelect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetConfigTypeText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InSelect                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AUIConfigurationDraw::GetConfigTypeText(int32 InSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetConfigTypeText");

	Params::UIConfigurationDraw_GetConfigTypeText Parms{};

	Parms.InSelect = InSelect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetCurrentIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIConfigurationDraw::GetCurrentIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetCurrentIndex");

	Params::UIConfigurationDraw_GetCurrentIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetCursorIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIConfigurationDraw::GetCursorIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetCursorIndex");

	Params::UIConfigurationDraw_GetCursorIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetDifficultyText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InSelect                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AUIConfigurationDraw::GetDifficultyText(int32 InSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetDifficultyText");

	Params::UIConfigurationDraw_GetDifficultyText Parms{};

	Parms.InSelect = InSelect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetDrawConfigParam
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InMenuID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDrawConfigParam                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FDrawConfigParam AUIConfigurationDraw::GetDrawConfigParam(int32 InMenuID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetDrawConfigParam");

	Params::UIConfigurationDraw_GetDrawConfigParam Parms{};

	Parms.InMenuID = InMenuID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetGradation1BottomColour
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor AUIConfigurationDraw::GetGradation1BottomColour()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetGradation1BottomColour");

	Params::UIConfigurationDraw_GetGradation1BottomColour Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetGradation1TopColour
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor AUIConfigurationDraw::GetGradation1TopColour()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetGradation1TopColour");

	Params::UIConfigurationDraw_GetGradation1TopColour Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetGradation2BottomColour
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor AUIConfigurationDraw::GetGradation2BottomColour()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetGradation2BottomColour");

	Params::UIConfigurationDraw_GetGradation2BottomColour Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetGradation2TopColour
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor AUIConfigurationDraw::GetGradation2TopColour()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetGradation2TopColour");

	Params::UIConfigurationDraw_GetGradation2TopColour Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetIndexedDrawConfigParam
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDrawConfigParam                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FDrawConfigParam AUIConfigurationDraw::GetIndexedDrawConfigParam(int32 InIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetIndexedDrawConfigParam");

	Params::UIConfigurationDraw_GetIndexedDrawConfigParam Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetIsFisrt
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::GetIsFisrt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetIsFisrt");

	Params::UIConfigurationDraw_GetIsFisrt Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetListNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIConfigurationDraw::GetListNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetListNum");

	Params::UIConfigurationDraw_GetListNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetListTopIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIConfigurationDraw::GetListTopIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetListTopIndex");

	Params::UIConfigurationDraw_GetListTopIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetOffText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AUIConfigurationDraw::GetOffText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetOffText");

	Params::UIConfigurationDraw_GetOffText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetOnText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AUIConfigurationDraw::GetOnText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetOnText");

	Params::UIConfigurationDraw_GetOnText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetPlayingIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIConfigurationDraw::GetPlayingIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetPlayingIndex");

	Params::UIConfigurationDraw_GetPlayingIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetSelLangText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InSelect                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AUIConfigurationDraw::GetSelLangText(int32 InSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetSelLangText");

	Params::UIConfigurationDraw_GetSelLangText Parms{};

	Parms.InSelect = InSelect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.GetSoundOutputText
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InSelect                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString AUIConfigurationDraw::GetSoundOutputText(int32 InSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetSoundOutputText");

	Params::UIConfigurationDraw_GetSoundOutputText Parms{};

	Parms.InSelect = InSelect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.IsBaseDiffLuna
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::IsBaseDiffLuna()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "IsBaseDiffLuna");

	Params::UIConfigurationDraw_IsBaseDiffLuna Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.IsBGMMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::IsBGMMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "IsBGMMode");

	Params::UIConfigurationDraw_IsBGMMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.IsConfigTypeMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::IsConfigTypeMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "IsConfigTypeMode");

	Params::UIConfigurationDraw_IsConfigTypeMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.IsKeyConfig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::IsKeyConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "IsKeyConfig");

	Params::UIConfigurationDraw_IsKeyConfig Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.IsScrollDrawBgmSelectText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::IsScrollDrawBgmSelectText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "IsScrollDrawBgmSelectText");

	Params::UIConfigurationDraw_IsScrollDrawBgmSelectText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.IsTitleOpend
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::IsTitleOpend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "IsTitleOpend");

	Params::UIConfigurationDraw_IsTitleOpend Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.IsWindowShow
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::IsWindowShow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "IsWindowShow");

	Params::UIConfigurationDraw_IsWindowShow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.On_BgmSetIndexChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   InSetIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::On_BgmSetIndexChanged(int32 InSetIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "On_BgmSetIndexChanged");

	Params::UIConfigurationDraw_On_BgmSetIndexChanged Parms{};

	Parms.InSetIndex = InSetIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.On_CursorIndexChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   InCursorIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InListTopIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::On_CursorIndexChanged(int32 InCursorIndex, int32 InListTopIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "On_CursorIndexChanged");

	Params::UIConfigurationDraw_On_CursorIndexChanged Parms{};

	Parms.InCursorIndex = InCursorIndex;
	Parms.InListTopIndex = InListTopIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.On_CursorIndexChanged_BGM
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   InCursorIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InListTopIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::On_CursorIndexChanged_BGM(int32 InCursorIndex, int32 InListTopIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "On_CursorIndexChanged_BGM");

	Params::UIConfigurationDraw_On_CursorIndexChanged_BGM Parms{};

	Parms.InCursorIndex = InCursorIndex;
	Parms.InListTopIndex = InListTopIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.On_PlayingIndexChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   InPlayingIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::On_PlayingIndexChanged(int32 InPlayingIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "On_PlayingIndexChanged");

	Params::UIConfigurationDraw_On_PlayingIndexChanged Parms{};

	Parms.InPlayingIndex = InPlayingIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.On_ValueChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   InMenueID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InFlag                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::On_ValueChanged(int32 InMenueID, bool InFlag, int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "On_ValueChanged");

	Params::UIConfigurationDraw_On_ValueChanged Parms{};

	Parms.InMenueID = InMenueID;
	Parms.InFlag = InFlag;
	Parms.InValue = InValue;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// DelegateFunction xrd777.UIConfigurationDraw.ProcessCompleted__DelegateSignature
// (Public, Delegate)

void AUIConfigurationDraw::ProcessCompleted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "ProcessCompleted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UIConfigurationDraw.SetScrollBarTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScrollRange                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DrawListNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxListNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScrollPosY                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AddLayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::SetScrollBarTouchCollision(float X, float Y, float Width, float Height, float ScrollRange, int32 DrawListNum, int32 MaxListNum, int32 ScrollPosY, int32 AddLayer, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "SetScrollBarTouchCollision");

	Params::UIConfigurationDraw_SetScrollBarTouchCollision Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.ScrollRange = ScrollRange;
	Parms.DrawListNum = DrawListNum;
	Parms.MaxListNum = MaxListNum;
	Parms.ScrollPosY = ScrollPosY;
	Parms.AddLayer = AddLayer;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.SetScrollPos
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScrollRange                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DrawListNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxListNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScrollPosY                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::SetScrollPos(const struct FVector2D& InPos, float Height, float ScrollRange, int32 DrawListNum, int32 MaxListNum, int32 ScrollPosY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "SetScrollPos");

	Params::UIConfigurationDraw_SetScrollPos Parms{};

	Parms.InPos = std::move(InPos);
	Parms.Height = Height;
	Parms.ScrollRange = ScrollRange;
	Parms.DrawListNum = DrawListNum;
	Parms.MaxListNum = MaxListNum;
	Parms.ScrollPosY = ScrollPosY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.SetScrollSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InSize                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::SetScrollSize(const struct FVector2D& InSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "SetScrollSize");

	Params::UIConfigurationDraw_SetScrollSize Parms{};

	Parms.InSize = std::move(InSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.SetScrollTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AddLayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::SetScrollTouchCollision(float X, float Y, float Width, float Height, int32 AddLayer, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "SetScrollTouchCollision");

	Params::UIConfigurationDraw_SetScrollTouchCollision Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.AddLayer = AddLayer;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.SetSliderPos
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   InMenuID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InSliderPos                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::SetSliderPos(int32 InMenuID, const struct FVector2D& InSliderPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "SetSliderPos");

	Params::UIConfigurationDraw_SetSliderPos Parms{};

	Parms.InMenuID = InMenuID;
	Parms.InSliderPos = std::move(InSliderPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.SetTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AddLayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::SetTouchCollision(int32 Index_0, float X, float Y, float Width, float Height, int32 AddLayer, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "SetTouchCollision");

	Params::UIConfigurationDraw_SetTouchCollision Parms{};

	Parms.Index_0 = Index_0;
	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.AddLayer = AddLayer;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.SetValueGaugeTouchCollision
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FDrawConfigParam                 DrawParam                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   GaugeX                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GaugeY                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GaugeWidth                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GaugeHeight                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SliderX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SliderY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::SetValueGaugeTouchCollision(const struct FDrawConfigParam& DrawParam, float GaugeX, float GaugeY, float GaugeWidth, float GaugeHeight, float SliderX, float SliderY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "SetValueGaugeTouchCollision");

	Params::UIConfigurationDraw_SetValueGaugeTouchCollision Parms{};

	Parms.DrawParam = std::move(DrawParam);
	Parms.GaugeX = GaugeX;
	Parms.GaugeY = GaugeY;
	Parms.GaugeWidth = GaugeWidth;
	Parms.GaugeHeight = GaugeHeight;
	Parms.SliderX = SliderX;
	Parms.SliderY = SliderY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.Start_CloseAnim
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::Start_CloseAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "Start_CloseAnim");

	Params::UIConfigurationDraw_Start_CloseAnim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.Start_InAnim
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::Start_InAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "Start_InAnim");

	Params::UIConfigurationDraw_Start_InAnim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.Start_MenuChangeAnim
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::Start_MenuChangeAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "Start_MenuChangeAnim");

	Params::UIConfigurationDraw_Start_MenuChangeAnim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.Start_ToBGMAnim
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::Start_ToBGMAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "Start_ToBGMAnim");

	Params::UIConfigurationDraw_Start_ToBGMAnim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.Start_ToConfAnim
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::Start_ToConfAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "Start_ToConfAnim");

	Params::UIConfigurationDraw_Start_ToConfAnim Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.StartCloseWipe
// (Final, Native, Public, BlueprintCallable)

void AUIConfigurationDraw::StartCloseWipe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "StartCloseWipe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.StartInWipe
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsTitle                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::StartInWipe(bool IsTitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "StartInWipe");

	Params::UIConfigurationDraw_StartInWipe Parms{};

	Parms.IsTitle = IsTitle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.StateBGMDraw_In
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::StateBGMDraw_In()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "StateBGMDraw_In");

	Params::UIConfigurationDraw_StateBGMDraw_In Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.StateDraw_BG
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::StateDraw_BG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "StateDraw_BG");

	Params::UIConfigurationDraw_StateDraw_BG Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.StateDraw_BGMSelect
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::StateDraw_BGMSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "StateDraw_BGMSelect");

	Params::UIConfigurationDraw_StateDraw_BGMSelect Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.StateDraw_Close
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::StateDraw_Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "StateDraw_Close");

	Params::UIConfigurationDraw_StateDraw_Close Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.StateDraw_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::StateDraw_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "StateDraw_IN");

	Params::UIConfigurationDraw_StateDraw_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.StateDraw_ListItem
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   InMenueID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InListIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::StateDraw_ListItem(int32 InMenueID, int32 InListIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "StateDraw_ListItem");

	Params::UIConfigurationDraw_StateDraw_ListItem Parms{};

	Parms.InMenueID = InMenueID;
	Parms.InListIndex = InListIndex;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.StateDraw_Main
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::StateDraw_Main()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "StateDraw_Main");

	Params::UIConfigurationDraw_StateDraw_Main Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.StateDraw_Update
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::StateDraw_Update(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "StateDraw_Update");

	Params::UIConfigurationDraw_StateDraw_Update Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.StateDraw_UpdateOnlyCursor
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::StateDraw_UpdateOnlyCursor(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "StateDraw_UpdateOnlyCursor");

	Params::UIConfigurationDraw_StateDraw_UpdateOnlyCursor Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.TimeWithinRangeFrame
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   NowTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfigurationDraw::TimeWithinRangeFrame(float NowTime, int32 StartFrame, int32 EndFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "TimeWithinRangeFrame");

	Params::UIConfigurationDraw_TimeWithinRangeFrame Parms{};

	Parms.NowTime = NowTime;
	Parms.StartFrame = StartFrame;
	Parms.EndFrame = EndFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfigurationDraw.UpdateAnim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::UpdateAnim(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "UpdateAnim");

	Params::UIConfigurationDraw_UpdateAnim Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.UpdateCloseWipe
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::UpdateCloseWipe(float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "UpdateCloseWipe");

	Params::UIConfigurationDraw_UpdateCloseWipe Parms{};

	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.UpdateInWipe
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDeltaTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfigurationDraw::UpdateInWipe(float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "UpdateInWipe");

	Params::UIConfigurationDraw_UpdateInWipe Parms{};

	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfigurationDraw.GetUipParameter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           Key                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AUIConfigurationDraw::GetUipParameter(const class FString& Key) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfigurationDraw", "GetUipParameter");

	Params::UIConfigurationDraw_GetUipParameter Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonEventTransActor.SetPartyTransform
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonEventTransActor::SetPartyTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEventTransActor", "SetPartyTransform");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BPExtensionsFunctionLibrary.AttachMeshComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   AttachComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBPExtensionsFunctionLibrary::AttachMeshComponent(class UMeshComponent* Target, class FName SocketName, class UMeshComponent* AttachComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPExtensionsFunctionLibrary", "AttachMeshComponent");

	Params::BPExtensionsFunctionLibrary_AttachMeshComponent Parms{};

	Parms.Target = Target;
	Parms.SocketName = SocketName;
	Parms.AttachComponent = AttachComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BPExtensionsFunctionLibrary.AttachSkeletalMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    AttachSKMesh                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMeshComponent* UBPExtensionsFunctionLibrary::AttachSkeletalMesh(class UMeshComponent* Target, class FName SocketName, class USkeletalMesh* AttachSKMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPExtensionsFunctionLibrary", "AttachSkeletalMesh");

	Params::BPExtensionsFunctionLibrary_AttachSkeletalMesh Parms{};

	Parms.Target = Target;
	Parms.SocketName = SocketName;
	Parms.AttachSKMesh = AttachSKMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BPExtensionsFunctionLibrary.AttachStaticMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UStaticMesh*                      AttachSTMesh                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMeshComponent* UBPExtensionsFunctionLibrary::AttachStaticMesh(class UMeshComponent* Target, class FName SocketName, class UStaticMesh* AttachSTMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPExtensionsFunctionLibrary", "AttachStaticMesh");

	Params::BPExtensionsFunctionLibrary_AttachStaticMesh Parms{};

	Parms.Target = Target;
	Parms.SocketName = SocketName;
	Parms.AttachSTMesh = AttachSTMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BPExtensionsFunctionLibrary.ChangeSkeletalMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           TargetMesh                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    ChangeMesh                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBPExtensionsFunctionLibrary::ChangeSkeletalMesh(class USkeletalMeshComponent* TargetMesh, class USkeletalMesh* ChangeMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPExtensionsFunctionLibrary", "ChangeSkeletalMesh");

	Params::BPExtensionsFunctionLibrary_ChangeSkeletalMesh Parms{};

	Parms.TargetMesh = TargetMesh;
	Parms.ChangeMesh = ChangeMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BPExtensionsFunctionLibrary.CommitConsoleLog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBPExtensionsFunctionLibrary::CommitConsoleLog(const class FString& InString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPExtensionsFunctionLibrary", "CommitConsoleLog");

	Params::BPExtensionsFunctionLibrary_CommitConsoleLog Parms{};

	Parms.InString = std::move(InString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BPExtensionsFunctionLibrary.DetachSocketAttachment
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBPExtensionsFunctionLibrary::DetachSocketAttachment(class UMeshComponent* Target, class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPExtensionsFunctionLibrary", "DetachSocketAttachment");

	Params::BPExtensionsFunctionLibrary_DetachSocketAttachment Parms{};

	Parms.Target = Target;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BPExtensionsFunctionLibrary.GetInverseMatrix
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FLinearColor>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FLinearColor> UBPExtensionsFunctionLibrary::GetInverseMatrix(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPExtensionsFunctionLibrary", "GetInverseMatrix");

	Params::BPExtensionsFunctionLibrary_GetInverseMatrix Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BPExtensionsFunctionLibrary.GetScreenPercentage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPlanarReflectionComponent*       InComponent                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBPExtensionsFunctionLibrary::GetScreenPercentage(class UPlanarReflectionComponent* InComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPExtensionsFunctionLibrary", "GetScreenPercentage");

	Params::BPExtensionsFunctionLibrary_GetScreenPercentage Parms{};

	Parms.InComponent = InComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BPExtensionsFunctionLibrary.RemoveRenderMesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           TargetMesh                                             (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBPExtensionsFunctionLibrary::RemoveRenderMesh(class USkeletalMeshComponent* TargetMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPExtensionsFunctionLibrary", "RemoveRenderMesh");

	Params::BPExtensionsFunctionLibrary_RemoveRenderMesh Parms{};

	Parms.TargetMesh = TargetMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BPExtensionsFunctionLibrary.SetScreenPercentage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPlanarReflectionComponent*       InComponent                                            (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBPExtensionsFunctionLibrary::SetScreenPercentage(class UPlanarReflectionComponent* InComponent, int32 InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPExtensionsFunctionLibrary", "SetScreenPercentage");

	Params::BPExtensionsFunctionLibrary_SetScreenPercentage Parms{};

	Parms.InComponent = InComponent;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AssetHolder.ChildLoadComplete
// (Final, Native, Private)
// Parameters:
// TArray<class UObject*>                  LoadedAssets_0                                         (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UAssetHolder::ChildLoadComplete(const TArray<class UObject*>& LoadedAssets_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetHolder", "ChildLoadComplete");

	Params::AssetHolder_ChildLoadComplete Parms{};

	Parms.LoadedAssets_0 = std::move(LoadedAssets_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AssetHolder.GetLoadedDelegate
// (Final, Native, Public)
// Parameters:
// FMulticastInlineDelegateProperty_       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NativeAccessSpecifierPublic)

FMulticastInlineDelegateProperty_ UAssetHolder::GetLoadedDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetHolder", "GetLoadedDelegate");

	Params::AssetHolder_GetLoadedDelegate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction xrd777.AssetHolder.LoadedDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UAssetHolder::LoadedDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetHolder", "LoadedDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.AssetHolder.LoadAsset
// (Final, Native, Public, BlueprintCallable)

void UAssetHolder::LoadAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetHolder", "LoadAsset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AssetHolder.LoadComplete
// (Final, Native, Private)

void UAssetHolder::LoadComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetHolder", "LoadComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AssetHolder.UnloadAsset
// (Final, Native, Public, BlueprintCallable)

void UAssetHolder::UnloadAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AssetHolder", "UnloadAsset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlBossFortuneInterface.FortuneFadein
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossFortuneInterface::FortuneFadein(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossFortuneInterface", "FortuneFadein");

	Params::BtlBossFortuneInterface_FortuneFadein Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossFortuneInterface.FortuneFadeout
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossFortuneInterface::FortuneFadeout(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossFortuneInterface", "FortuneFadeout");

	Params::BtlBossFortuneInterface_FortuneFadeout Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossFortuneInterface.FortuneFlowerLoopEffectFadein
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossFortuneInterface::FortuneFlowerLoopEffectFadein(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossFortuneInterface", "FortuneFlowerLoopEffectFadein");

	Params::BtlBossFortuneInterface_FortuneFlowerLoopEffectFadein Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossFortuneInterface.FortuneFlowerLoopEffectFadeout
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossFortuneInterface::FortuneFlowerLoopEffectFadeout(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossFortuneInterface", "FortuneFlowerLoopEffectFadeout");

	Params::BtlBossFortuneInterface_FortuneFlowerLoopEffectFadeout Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossFortuneInterface.StrengthFlowerLoopEffectFadeout
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossFortuneInterface::StrengthFlowerLoopEffectFadeout(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossFortuneInterface", "StrengthFlowerLoopEffectFadeout");

	Params::BtlBossFortuneInterface_StrengthFlowerLoopEffectFadeout Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.AnimNotify_BtlPlayMontageNotify.GetBattleNotifyName
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UAnimNotify_BtlPlayMontageNotify::GetBattleNotifyName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_BtlPlayMontageNotify", "GetBattleNotifyName");

	Params::AnimNotify_BtlPlayMontageNotify_GetBattleNotifyName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.AnimNotify_BtlPlayMontageNotify.ReplaceNotifyName
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// class FName                             NewName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimNotify_BtlPlayMontageNotify::ReplaceNotifyName(class FName NewName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_BtlPlayMontageNotify", "ReplaceNotifyName");

	Params::AnimNotify_BtlPlayMontageNotify_ReplaceNotifyName Parms{};

	Parms.NewName = NewName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpDraw.isEndAnimStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUICmmRankUpDraw::IsEndAnimStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "isEndAnimStart");

	Params::UICmmRankUpDraw_IsEndAnimStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UICmmRankUpDraw.StartShowReverseStar
// (Final, Native, Public)

void AUICmmRankUpDraw::StartShowReverseStar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "StartShowReverseStar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpDraw.StartStarFrameAnime
// (Final, Native, Public)

void AUICmmRankUpDraw::StartStarFrameAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "StartStarFrameAnime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpDraw.StartStarMainInAnime
// (Final, Native, Public)

void AUICmmRankUpDraw::StartStarMainInAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "StartStarMainInAnime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpDraw.StartStarWaitAnime
// (Final, Native, Public)

void AUICmmRankUpDraw::StartStarWaitAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "StartStarWaitAnime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpDraw.UICmmDrawCard
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpDraw::UICmmDrawCard(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "UICmmDrawCard");

	Params::UICmmRankUpDraw_UICmmDrawCard Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpDraw.UICmmDrawEndDraw
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpDraw::UICmmDrawEndDraw(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "UICmmDrawEndDraw");

	Params::UICmmRankUpDraw_UICmmDrawEndDraw Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpDraw.UICmmDrawGradationBG
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        VLeftPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        VRightPos                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        HLeftPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        HRightPos                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpDraw::UICmmDrawGradationBG(const struct FVector2D& VLeftPos, const struct FVector2D& VRightPos, const struct FVector2D& HLeftPos, const struct FVector2D& HRightPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "UICmmDrawGradationBG");

	Params::UICmmRankUpDraw_UICmmDrawGradationBG Parms{};

	Parms.VLeftPos = std::move(VLeftPos);
	Parms.VRightPos = std::move(VRightPos);
	Parms.HLeftPos = std::move(HLeftPos);
	Parms.HRightPos = std::move(HRightPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpDraw.UICmmDrawLetter
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpDraw::UICmmDrawLetter(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "UICmmDrawLetter");

	Params::UICmmRankUpDraw_UICmmDrawLetter Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpDraw.UICmmDrawOkKey
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpDraw::UICmmDrawOkKey(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "UICmmDrawOkKey");

	Params::UICmmRankUpDraw_UICmmDrawOkKey Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpDraw.UICmmDrawRankStar
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   BasePosX                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BasePosY                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpDraw::UICmmDrawRankStar(float BasePosX, float BasePosY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "UICmmDrawRankStar");

	Params::UICmmRankUpDraw_UICmmDrawRankStar Parms{};

	Parms.BasePosX = BasePosX;
	Parms.BasePosY = BasePosY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpDraw.UICmmReverseBG
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpDraw::UICmmReverseBG(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "UICmmReverseBG");

	Params::UICmmRankUpDraw_UICmmReverseBG Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpDraw.Update
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   InDeltaTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpDraw::Update(const float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpDraw", "Update");

	Params::UICmmRankUpDraw_Update Parms{};

	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppPropsCardContainer.DestroyContainer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    DestroyCardProps                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAppPropsCardContainer::DestroyContainer(bool DestroyCardProps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPropsCardContainer", "DestroyContainer");

	Params::AppPropsCardContainer_DestroyContainer Parms{};

	Parms.DestroyCardProps = DestroyCardProps;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppPropsCardContainer.GetCards
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FAppPropsCardData>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FAppPropsCardData> AAppPropsCardContainer::GetCards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPropsCardContainer", "GetCards");

	Params::AppPropsCardContainer_GetCards Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppPropsCardContainer.LoadCards
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FAppPropsCardParam>       Params_0                                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void AAppPropsCardContainer::LoadCards(const TArray<struct FAppPropsCardParam>& Params_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPropsCardContainer", "LoadCards");

	Params::AppPropsCardContainer_LoadCards Parms{};

	Parms.Params_0 = std::move(Params_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppPropsCardContainer.SyncCards
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAppPropsCardContainer::SyncCards()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPropsCardContainer", "SyncCards");

	Params::AppPropsCardContainer_SyncCards Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AnimNotify_PlayEvtMultiMontage.OnFinished
// (Final, Native, Public, Const)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterapt                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnimNotify_PlayEvtMultiMontage::OnFinished(class UAnimMontage* Montage, bool bInterapt) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnimNotify_PlayEvtMultiMontage", "OnFinished");

	Params::AnimNotify_PlayEvtMultiMontage_OnFinished Parms{};

	Parms.Montage = Montage;
	Parms.bInterapt = bInterapt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppNpcCostume_DA.Make
// (Final, Native, Protected, BlueprintCallable)

void UAppNpcCostume_DA::Make()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppNpcCostume_DA", "Make");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlBossErebusInterface.IsChargeMode
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IBtlBossErebusInterface::IsChargeMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossErebusInterface", "IsChargeMode");

	Params::BtlBossErebusInterface_IsChargeMode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlBossErebusInterface.IsWaitResurrectAnimation
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IBtlBossErebusInterface::IsWaitResurrectAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossErebusInterface", "IsWaitResurrectAnimation");

	Params::BtlBossErebusInterface_IsWaitResurrectAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlBossErebusInterface.SetChargeEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsShowCharageEffect                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossErebusInterface::SetChargeEffect(bool IsShowCharageEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossErebusInterface", "SetChargeEffect");

	Params::BtlBossErebusInterface_SetChargeEffect Parms{};

	Parms.IsShowCharageEffect = IsShowCharageEffect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossErebusInterface.SetIsInChargeMode
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsChargeMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossErebusInterface::SetIsInChargeMode(bool IsChargeMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossErebusInterface", "SetIsInChargeMode");

	Params::BtlBossErebusInterface_SetIsInChargeMode Parms{};

	Parms.IsChargeMode = IsChargeMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossErebusInterface.SetWaitResurrectAnimation
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsWaitResurrect                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossErebusInterface::SetWaitResurrectAnimation(bool IsWaitResurrect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossErebusInterface", "SetWaitResurrectAnimation");

	Params::BtlBossErebusInterface_SetWaitResurrectAnimation Parms{};

	Parms.IsWaitResurrect = IsWaitResurrect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossErebusInterface.SpawnChargeVanishEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IBtlBossErebusInterface::SpawnChargeVanishEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossErebusInterface", "SpawnChargeVanishEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.AppActorComponent.AsAActor
// (Native, Public)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UAppActorComponent::AsAActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppActorComponent", "AsAActor");

	Params::AppActorComponent_AsAActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppActorComponent.AsUObject
// (Native, Public)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UAppActorComponent::AsUObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppActorComponent", "AsUObject");

	Params::AppActorComponent_AsUObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppActorComponent.BeginPlay
// (Native, Public)

void UAppActorComponent::BeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppActorComponent", "BeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppActorComponent.EndPlay
// (Native, Public)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppActorComponent::EndPlay(const EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppActorComponent", "EndPlay");

	Params::AppActorComponent_EndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppActorComponent.GetAppPauseFlags
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAppPauseObjectFlag                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAppPauseObjectFlag UAppActorComponent::GetAppPauseFlags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppActorComponent", "GetAppPauseFlags");

	Params::AppActorComponent_GetAppPauseFlags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldFollowerComp.ActoinRequest
// (Final, Native, Public)
// Parameters:
// class APawn*                            Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldFollowerComp::ActoinRequest(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldFollowerComp", "ActoinRequest");

	Params::FldFollowerComp_ActoinRequest Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldFollowerComp.CheckEnableAction
// (Final, Native, Public, HasOutParams)
// Parameters:
// class APawn*                            Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Check                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldFollowerComp::CheckEnableAction(class APawn* Player, bool* Check)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldFollowerComp", "CheckEnableAction");

	Params::FldFollowerComp_CheckEnableAction Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Check != nullptr)
		*Check = Parms.Check;
}


// Function xrd777.FldFollowerComp.CleanupRequest
// (Final, Native, Public)

void UFldFollowerComp::CleanupRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldFollowerComp", "CleanupRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldFollowerComp.GetAwayHeroRequest
// (Final, Native, Public)

void UFldFollowerComp::GetAwayHeroRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldFollowerComp", "GetAwayHeroRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldFollowerComp.ProcInEvent
// (Final, Native, Public)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldFollowerComp::ProcInEvent(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldFollowerComp", "ProcInEvent");

	Params::FldFollowerComp_ProcInEvent Parms{};

	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldFollowerComp.ProcOutEvent
// (Final, Native, Public)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldFollowerComp::ProcOutEvent(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldFollowerComp", "ProcOutEvent");

	Params::FldFollowerComp_ProcOutEvent Parms{};

	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.ClearDelayPauseAnimFromMotion
// (Final, Native, Public, BlueprintCallable)

void UAppCharBaseComp::ClearDelayPauseAnimFromMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "ClearDelayPauseAnimFromMotion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.GetAllMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class UMaterialInterface*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UMaterialInterface*> UAppCharBaseComp::GetAllMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetAllMaterial");

	Params::AppCharBaseComp_GetAllMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetAnimMontageDefaultSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::GetAnimMontageDefaultSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetAnimMontageDefaultSlot");

	Params::AppCharBaseComp_GetAnimMontageDefaultSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetBagAttachSocketName
// (Native, Public, BlueprintCallable)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UAppCharBaseComp::GetBagAttachSocketName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetBagAttachSocketName");

	Params::AppCharBaseComp_GetBagAttachSocketName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetBagClassPtr
// (Native, Public, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftClassPtr<class UClass> UAppCharBaseComp::GetBagClassPtr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetBagClassPtr");

	Params::AppCharBaseComp_GetBagClassPtr Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetEffectWeapons
// (Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AAppCharWeaponBase*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AAppCharWeaponBase*> UAppCharBaseComp::GetEffectWeapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetEffectWeapons");

	Params::AppCharBaseComp_GetEffectWeapons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetFootstepsAtom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAppCharFootstepsAtom*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAppCharFootstepsAtom* UAppCharBaseComp::GetFootstepsAtom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetFootstepsAtom");

	Params::AppCharBaseComp_GetFootstepsAtom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetWeapon
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AAppCharWeaponBase*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AAppCharWeaponBase* UAppCharBaseComp::GetWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetWeapon");

	Params::AppCharBaseComp_GetWeapon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetWeaponEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppCharBaseComp::GetWeaponEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetWeaponEnable");

	Params::AppCharBaseComp_GetWeaponEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetWeapons
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class AAppCharWeaponBase*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AAppCharWeaponBase*> UAppCharBaseComp::GetWeapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetWeapons");

	Params::AppCharBaseComp_GetWeapons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.IsBag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppCharBaseComp::IsBag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "IsBag");

	Params::AppCharBaseComp_IsBag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.IsCostumeChenged
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppCharBaseComp::IsCostumeChenged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "IsCostumeChenged");

	Params::AppCharBaseComp_IsCostumeChenged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.IsDelayPauseAnimFromMotion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppCharBaseComp::IsDelayPauseAnimFromMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "IsDelayPauseAnimFromMotion");

	Params::AppCharBaseComp_IsDelayPauseAnimFromMotion Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.IsLoadWeapons
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppCharBaseComp::IsLoadWeapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "IsLoadWeapons");

	Params::AppCharBaseComp_IsLoadWeapons Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.IsNeckAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppCharBaseComp::IsNeckAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "IsNeckAnimation");

	Params::AppCharBaseComp_IsNeckAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.IsPlayAnim_DefaultSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppCharBaseComp::IsPlayAnim_DefaultSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "IsPlayAnim_DefaultSlot");

	Params::AppCharBaseComp_IsPlayAnim_DefaultSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.IsTurnAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppCharBaseComp::IsTurnAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "IsTurnAnimation");

	Params::AppCharBaseComp_IsTurnAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.Movement
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Speed                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::Movement(const struct FVector& Location, const float Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "Movement");

	Params::AppCharBaseComp_Movement Parms{};

	Parms.Location = std::move(Location);
	Parms.Speed = Speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.OverwriteTransformMotionAttachedActor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UAppCharBaseComp::OverwriteTransformMotionAttachedActor(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "OverwriteTransformMotionAttachedActor");

	Params::AppCharBaseComp_OverwriteTransformMotionAttachedActor Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.PauseAnim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     InMontage                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::PauseAnim(bool bPause, class UAnimMontage* InMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PauseAnim");

	Params::AppCharBaseComp_PauseAnim Parms{};

	Parms.bPause = bPause;
	Parms.InMontage = InMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.PlayAnim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                Anim                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAppCharAnimSlot                        Slot                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Loop                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayAnim(const class UAnimSequenceBase* Anim, const EAppCharAnimSlot Slot, const bool Loop, const float BlendInTime, const float BlendOutTime, const float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayAnim");

	Params::AppCharBaseComp_PlayAnim Parms{};

	Parms.Anim = Anim;
	Parms.Slot = Slot;
	Parms.Loop = Loop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.PlayAnim_DefaultSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                Anim                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Loop                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayAnim_DefaultSlot(const class UAnimSequenceBase* Anim, const bool Loop, const float BlendInTime, const float BlendOutTime, const float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayAnim_DefaultSlot");

	Params::AppCharBaseComp_PlayAnim_DefaultSlot Parms{};

	Parms.Anim = Anim;
	Parms.Loop = Loop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.PlayAnim_FacialSlot
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                Anim                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayAnim_FacialSlot(const class UAnimSequenceBase* Anim, const bool IsLoop, const float BlendInTime, const float BlendOutTime, const float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayAnim_FacialSlot");

	Params::AppCharBaseComp_PlayAnim_FacialSlot Parms{};

	Parms.Anim = Anim;
	Parms.IsLoop = IsLoop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.PlayAnim_HaveBagSlot
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                Anim                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SetSlotName                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayAnim_HaveBagSlot(const class UAnimSequenceBase* Anim, const class FName& SetSlotName, const bool IsLoop, const float BlendInTime, const float BlendOutTime, const float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayAnim_HaveBagSlot");

	Params::AppCharBaseComp_PlayAnim_HaveBagSlot Parms{};

	Parms.Anim = Anim;
	Parms.SetSlotName = SetSlotName;
	Parms.IsLoop = IsLoop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.PlayAnim_NeckSlot
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                Anim                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayAnim_NeckSlot(const class UAnimSequenceBase* Anim, const bool IsLoop, const float BlendInTime, const float BlendOutTime, const float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayAnim_NeckSlot");

	Params::AppCharBaseComp_PlayAnim_NeckSlot Parms{};

	Parms.Anim = Anim;
	Parms.IsLoop = IsLoop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.PlayAnim_Pack
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Loop                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayAnim_Pack(const int32 ID, const bool Loop, const float BlendInTime, const float BlendOutTime, const float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayAnim_Pack");

	Params::AppCharBaseComp_PlayAnim_Pack Parms{};

	Parms.ID = ID;
	Parms.Loop = Loop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.PlayAnim_TurnSlot
// (Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                Anim                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendInTime                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendOutTime                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendWeight                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayAnim_TurnSlot(const class UAnimSequenceBase* Anim, const bool IsLoop, const float InBlendInTime, const float InBlendOutTime, const float InPlayRate, const float InBlendWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayAnim_TurnSlot");

	Params::AppCharBaseComp_PlayAnim_TurnSlot Parms{};

	Parms.Anim = Anim;
	Parms.IsLoop = IsLoop;
	Parms.InBlendInTime = InBlendInTime;
	Parms.InBlendOutTime = InBlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.InBlendWeight = InBlendWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.PlayAnimationPackMotionAttachedProps
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InAnimePackIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InPlayType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendInTime                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendOutTime                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InAnimSlotName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::PlayAnimationPackMotionAttachedProps(int32 InAnimePackIndex, const int32 InPlayType, const float InBlendInTime, const float InBlendOutTime, const float InPlayRate, class FName InAnimSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayAnimationPackMotionAttachedProps");

	Params::AppCharBaseComp_PlayAnimationPackMotionAttachedProps Parms{};

	Parms.InAnimePackIndex = InAnimePackIndex;
	Parms.InPlayType = InPlayType;
	Parms.InBlendInTime = InBlendInTime;
	Parms.InBlendOutTime = InBlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.InAnimSlotName = InAnimSlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.PlayAnimBagSlot_Pack
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AnimId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayAnimBagSlot_Pack(const int32 AnimId, const bool IsLoop, const float BlendInTime, const float BlendOutTime, const float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayAnimBagSlot_Pack");

	Params::AppCharBaseComp_PlayAnimBagSlot_Pack Parms{};

	Parms.AnimId = AnimId;
	Parms.IsLoop = IsLoop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.PlayFaceAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// EAppCharFaceAnimID                      FaceAnimID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayFaceAnimation(EAppCharFaceAnimID FaceAnimID, const bool IsLoop, const float BlendInTime, const float BlendOutTime, const float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayFaceAnimation");

	Params::AppCharBaseComp_PlayFaceAnimation Parms{};

	Parms.FaceAnimID = FaceAnimID;
	Parms.IsLoop = IsLoop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.PlayFaceAnimIndex
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AnimIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayFaceAnimIndex(int32 AnimIndex, const bool IsLoop, const float BlendInTime, const float BlendOutTime, const float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayFaceAnimIndex");

	Params::AppCharBaseComp_PlayFaceAnimIndex Parms{};

	Parms.AnimIndex = AnimIndex;
	Parms.IsLoop = IsLoop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.PlayHaveBagAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// EAppCharBagAnimType                     AnimType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayHaveBagAnimation(EAppCharBagAnimType AnimType, const bool IsLoop, const float BlendInTime, const float BlendOutTime, const float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayHaveBagAnimation");

	Params::AppCharBaseComp_PlayHaveBagAnimation Parms{};

	Parms.AnimType = AnimType;
	Parms.IsLoop = IsLoop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.PlayNeckAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AnimIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayNeckAnimation(int32 AnimIndex, const bool IsLoop, const float BlendInTime, const float BlendOutTime, const float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayNeckAnimation");

	Params::AppCharBaseComp_PlayNeckAnimation Parms{};

	Parms.AnimIndex = AnimIndex;
	Parms.IsLoop = IsLoop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.PlayTurnAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AnimIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendInTime                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendOutTime                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InBlendWeight                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UAppCharBaseComp::PlayTurnAnimation(int32 AnimIndex, const bool IsLoop, const float InBlendInTime, const float InBlendOutTime, const float InPlayRate, const float InBlendWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "PlayTurnAnimation");

	Params::AppCharBaseComp_PlayTurnAnimation Parms{};

	Parms.AnimIndex = AnimIndex;
	Parms.IsLoop = IsLoop;
	Parms.InBlendInTime = InBlendInTime;
	Parms.InBlendOutTime = InBlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.InBlendWeight = InBlendWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.RequestDelayPauseAnimFromMotion
// (Final, Native, Public, BlueprintCallable)

void UAppCharBaseComp::RequestDelayPauseAnimFromMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "RequestDelayPauseAnimFromMotion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.RequestLoadWeapons
// (Native, Public, BlueprintCallable)

void UAppCharBaseComp::RequestLoadWeapons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "RequestLoadWeapons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.RequestPauseAnimFromMotionIMD
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsLookAt                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::RequestPauseAnimFromMotionIMD(bool IsLookAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "RequestPauseAnimFromMotionIMD");

	Params::AppCharBaseComp_RequestPauseAnimFromMotionIMD Parms{};

	Parms.IsLookAt = IsLookAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.ResetIK
// (Final, Native, Public, BlueprintCallable)

void UAppCharBaseComp::ResetIK()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "ResetIK");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetAnimMontageDefaultSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetAnimMontageDefaultSlot(class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetAnimMontageDefaultSlot");

	Params::AppCharBaseComp_SetAnimMontageDefaultSlot Parms{};

	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetAnimPackID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAnimPackID                             Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetAnimPackID(EAnimPackID Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetAnimPackID");

	Params::AppCharBaseComp_SetAnimPackID Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetBag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetBag(const bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetBag");

	Params::AppCharBaseComp_SetBag Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetCategoryID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAppCharCategoryType                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetCategoryID(EAppCharCategoryType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetCategoryID");

	Params::AppCharBaseComp_SetCategoryID Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetCostume
// (Native, Public, BlueprintCallable)

void UAppCharBaseComp::SetCostume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetCostume");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetCostumeID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetCostumeID(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetCostumeID");

	Params::AppCharBaseComp_SetCostumeID Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetFadeSettingFromMotion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FadeType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FadeFrame                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FadePattern                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetFadeSettingFromMotion(int32 FadeType, int32 FadeFrame, int32 FadePattern)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetFadeSettingFromMotion");

	Params::AppCharBaseComp_SetFadeSettingFromMotion Parms{};

	Parms.FadeType = FadeType;
	Parms.FadeFrame = FadeFrame;
	Parms.FadePattern = FadePattern;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetIndexID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetIndexID(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetIndexID");

	Params::AppCharBaseComp_SetIndexID Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetMotionAttachedActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AttachedActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetMotionAttachedActor(class AActor* AttachedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetMotionAttachedActor");

	Params::AppCharBaseComp_SetMotionAttachedActor Parms{};

	Parms.AttachedActor = AttachedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetMotionAttachedActorCore
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           AttachedActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachedSocketName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetMotionAttachedActorCore(class AActor* AttachedActor, class FName AttachedSocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetMotionAttachedActorCore");

	Params::AppCharBaseComp_SetMotionAttachedActorCore Parms{};

	Parms.AttachedActor = AttachedActor;
	Parms.AttachedSocketName = AttachedSocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetShoes
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetShoes(const bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetShoes");

	Params::AppCharBaseComp_SetShoes Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetShoesId
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetShoesId(const int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetShoesId");

	Params::AppCharBaseComp_SetShoesId Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetupHaveBag_AfterSetCostume
// (Native, Public, BlueprintCallable)

void UAppCharBaseComp::SetupHaveBag_AfterSetCostume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetupHaveBag_AfterSetCostume");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetWeaponId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetWeaponId(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetWeaponId");

	Params::AppCharBaseComp_SetWeaponId Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.SetWeaponType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAppCharWeaponType                      Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::SetWeaponType(const EAppCharWeaponType& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "SetWeaponType");

	Params::AppCharBaseComp_SetWeaponType Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.StopAnim_DefaultSlot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InBlendOutTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::StopAnim_DefaultSlot(float InBlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "StopAnim_DefaultSlot");

	Params::AppCharBaseComp_StopAnim_DefaultSlot Parms{};

	Parms.InBlendOutTime = InBlendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.StopFaceAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InBlendOutTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::StopFaceAnimation(float InBlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "StopFaceAnimation");

	Params::AppCharBaseComp_StopFaceAnimation Parms{};

	Parms.InBlendOutTime = InBlendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.StopHaveBagAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InBlendOutTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::StopHaveBagAnimation(float InBlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "StopHaveBagAnimation");

	Params::AppCharBaseComp_StopHaveBagAnimation Parms{};

	Parms.InBlendOutTime = InBlendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.StopNeckAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InBlendOutTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::StopNeckAnimation(float InBlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "StopNeckAnimation");

	Params::AppCharBaseComp_StopNeckAnimation Parms{};

	Parms.InBlendOutTime = InBlendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.StopTurnAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InBlendOutTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharBaseComp::StopTurnAnimation(float InBlendOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "StopTurnAnimation");

	Params::AppCharBaseComp_StopTurnAnimation Parms{};

	Parms.InBlendOutTime = InBlendOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharBaseComp.GetAnimPackID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAnimPackID                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAnimPackID UAppCharBaseComp::GetAnimPackID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetAnimPackID");

	Params::AppCharBaseComp_GetAnimPackID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetCategoryID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAppCharCategoryType                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAppCharCategoryType UAppCharBaseComp::GetCategoryID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetCategoryID");

	Params::AppCharBaseComp_GetCategoryID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetCostumeID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAppCharBaseComp::GetCostumeID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetCostumeID");

	Params::AppCharBaseComp_GetCostumeID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetCostumeMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* UAppCharBaseComp::GetCostumeMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetCostumeMesh");

	Params::AppCharBaseComp_GetCostumeMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetFaceMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* UAppCharBaseComp::GetFaceMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetFaceMesh");

	Params::AppCharBaseComp_GetFaceMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetHairMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* UAppCharBaseComp::GetHairMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetHairMesh");

	Params::AppCharBaseComp_GetHairMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetIndexID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAppCharBaseComp::GetIndexID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetIndexID");

	Params::AppCharBaseComp_GetIndexID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharBaseComp.GetMesh
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* UAppCharBaseComp::GetMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharBaseComp", "GetMesh");

	Params::AppCharBaseComp_GetMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharacterComp.SetVisibleAttachComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharacterComp::SetVisibleAttachComponent(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharacterComp", "SetVisibleAttachComponent");

	Params::AppCharacterComp_SetVisibleAttachComponent Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharacterComp.UnlinkPhysics
// (Final, Native, Public, BlueprintCallable)

void UAppCharacterComp::UnlinkPhysics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharacterComp", "UnlinkPhysics");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharacterComp.GetCapsule
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCapsuleComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCapsuleComponent* UAppCharacterComp::GetCapsule() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharacterComp", "GetCapsule");

	Params::AppCharacterComp_GetCapsule Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharacterComp.GetCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ACharacterBaseCore*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ACharacterBaseCore* UAppCharacterComp::GetCharacter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharacterComp", "GetCharacter");

	Params::AppCharacterComp_GetCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharacterComp.GetMovement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCharacterMovementComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterMovementComponent* UAppCharacterComp::GetMovement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharacterComp", "GetMovement");

	Params::AppCharacterComp_GetMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlBossHangedManInterface.FadeinHangedManEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossHangedManInterface::FadeinHangedManEffect(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossHangedManInterface", "FadeinHangedManEffect");

	Params::BtlBossHangedManInterface_FadeinHangedManEffect Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossHangedManInterface.FadeoutHangedManEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossHangedManInterface::FadeoutHangedManEffect(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossHangedManInterface", "FadeoutHangedManEffect");

	Params::BtlBossHangedManInterface_FadeoutHangedManEffect Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossHangedManInterface.FadeoutStatueEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossHangedManInterface::FadeoutStatueEffect(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossHangedManInterface", "FadeoutStatueEffect");

	Params::BtlBossHangedManInterface_FadeoutStatueEffect Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.UIGameOverPoem.StartRipple
// (Final, Native, Public)

void AUIGameOverPoem::StartRipple()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGameOverPoem", "StartRipple");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITownMapSymbolComponent.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AFldAnimObj*                      FldAnimObj                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkinnedMeshComponent*            SkinnedComponent                                       (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETownType                               TownType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITownMapSymbolComponent::Initialize(class AFldAnimObj* FldAnimObj, class USkinnedMeshComponent* SkinnedComponent, ETownType TownType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITownMapSymbolComponent", "Initialize");

	Params::UITownMapSymbolComponent_Initialize Parms{};

	Parms.FldAnimObj = FldAnimObj;
	Parms.SkinnedComponent = SkinnedComponent;
	Parms.TownType = TownType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CommunityShortcut.ScriptFinishedFunction
// (Final, Native, Private)
// Parameters:
// int32                                   ExitType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ACommunityShortcut::ScriptFinishedFunction(int32 ExitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CommunityShortcut", "ScriptFinishedFunction");

	Params::CommunityShortcut_ScriptFinishedFunction Parms{};

	Parms.ExitType = ExitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldLocalActor.CallStatePatternEndDelicate
// (Native, Public)

void AFldLocalActor::CallStatePatternEndDelicate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldLocalActor", "CallStatePatternEndDelicate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldLinkAnimObj.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMesh                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldLinkAnimObj::Initialize(class USkeletalMeshComponent* SkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldLinkAnimObj", "Initialize");

	Params::FldLinkAnimObj_Initialize Parms{};

	Parms.SkeletalMesh = SkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldLinkAnimObj.InitializeArray
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class USkeletalMeshComponent*>   SkeleTalMeshList                                       (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFldLinkAnimObj::InitializeArray(const TArray<class USkeletalMeshComponent*>& SkeleTalMeshList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldLinkAnimObj", "InitializeArray");

	Params::FldLinkAnimObj_InitializeArray Parms{};

	Parms.SkeleTalMeshList = std::move(SkeleTalMeshList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICombine.StreamLevelCountDecrement
// (Final, Native, Private)

void UUICombine::StreamLevelCountDecrement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICombine", "StreamLevelCountDecrement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlBossEmperorInterface.StandingAlwaysWithPersona
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IBtlBossEmperorInterface::StandingAlwaysWithPersona()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossEmperorInterface", "StandingAlwaysWithPersona");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UIGenericSelectDraw.DrawCharacter
// (Final, Native, Protected, BlueprintCallable)

void AUIGenericSelectDraw::DrawCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGenericSelectDraw", "DrawCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIGenericSelectDraw.DrawItemInfo
// (Final, Native, Protected, BlueprintCallable)

void AUIGenericSelectDraw::DrawItemInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGenericSelectDraw", "DrawItemInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIGenericSelectDraw.DrawList
// (Final, Native, Protected, BlueprintCallable)

void AUIGenericSelectDraw::DrawList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGenericSelectDraw", "DrawList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIGenericSelectDraw.DrawMultiplyPlates
// (Final, Native, Protected, BlueprintCallable)

void AUIGenericSelectDraw::DrawMultiplyPlates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGenericSelectDraw", "DrawMultiplyPlates");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIGenericSelectDraw.DrawTitle
// (Final, Native, Protected, BlueprintCallable)

void AUIGenericSelectDraw::DrawTitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGenericSelectDraw", "DrawTitle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIGenericSelectDraw.UpdateTimes
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIGenericSelectDraw::UpdateTimes(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGenericSelectDraw", "UpdateTimes");

	Params::UIGenericSelectDraw_UpdateTimes Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharAnimDataAsset.Make
// (Final, Native, Protected, BlueprintCallable)

void UAppCharAnimDataAsset::Make()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharAnimDataAsset", "Make");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharFaceAnimDataAsset.GetAssetPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EAppCharFaceAnimID                      FaceAnimID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAppCharCategoryType                    CharCategory                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharId_0                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAppCharAnimCategoryType                AnimCategory                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAppCharFaceAnimDataAsset::GetAssetPath(EAppCharFaceAnimID FaceAnimID, EAppCharCategoryType CharCategory, int32 CharId_0, EAppCharAnimCategoryType AnimCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AppCharFaceAnimDataAsset", "GetAssetPath");

	Params::AppCharFaceAnimDataAsset_GetAssetPath Parms{};

	Parms.FaceAnimID = FaceAnimID;
	Parms.CharCategory = CharCategory;
	Parms.CharId_0 = CharId_0;
	Parms.AnimCategory = AnimCategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharFaceAnimDataAsset.AddExtra
// (Final, Native, Protected, BlueprintCallable)

void UAppCharFaceAnimDataAsset::AddExtra()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharFaceAnimDataAsset", "AddExtra");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharFaceAnimDataAsset.Make
// (Final, Native, Protected, BlueprintCallable)

void UAppCharFaceAnimDataAsset::Make()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharFaceAnimDataAsset", "Make");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharFootstepsAtom.SetEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharFootstepsAtom::SetEnable(const bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharFootstepsAtom", "SetEnable");

	Params::AppCharFootstepsAtom_SetEnable Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharFootstepsAtom.SetRunCue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundAtomCue*                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharFootstepsAtom::SetRunCue(class USoundAtomCue* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharFootstepsAtom", "SetRunCue");

	Params::AppCharFootstepsAtom_SetRunCue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharFootstepsAtom.SetWalkCue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundAtomCue*                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharFootstepsAtom::SetWalkCue(class USoundAtomCue* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharFootstepsAtom", "SetWalkCue");

	Params::AppCharFootstepsAtom_SetWalkCue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UISaveLoad.OnFinishedCloseAnim
// (Final, Native, Public, BlueprintCallable)

void AUISaveLoad::OnFinishedCloseAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISaveLoad", "OnFinishedCloseAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UISaveLoad.OnFinishedInAnim
// (Final, Native, Public, BlueprintCallable)

void AUISaveLoad::OnFinishedInAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISaveLoad", "OnFinishedInAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FclShopBase.OnFinishedScr
// (Final, Native, Protected)
// Parameters:
// int32                                   ExitType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFclShopBase::OnFinishedScr(int32 ExitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FclShopBase", "OnFinishedScr");

	Params::FclShopBase_OnFinishedScr Parms{};

	Parms.ExitType = ExitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharFootstepsTriggerComp_BOX.OnOverlapBegin
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UAppCharFootstepsTriggerComp_BOX::OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharFootstepsTriggerComp_BOX", "OnOverlapBegin");

	Params::AppCharFootstepsTriggerComp_BOX_OnOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharFootstepsTriggerComp_BOX.OnOverlapEnd
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharFootstepsTriggerComp_BOX::OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharFootstepsTriggerComp_BOX", "OnOverlapEnd");

	Params::AppCharFootstepsTriggerComp_BOX_OnOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharFootstepsTriggerComp_CIRCLE.OnOverlapBegin
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UAppCharFootstepsTriggerComp_CIRCLE::OnOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharFootstepsTriggerComp_CIRCLE", "OnOverlapBegin");

	Params::AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharFootstepsTriggerComp_CIRCLE.OnOverlapEnd
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharFootstepsTriggerComp_CIRCLE::OnOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharFootstepsTriggerComp_CIRCLE", "OnOverlapEnd");

	Params::AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharFootstepsTriggerVolume.OnOverlapBegin
// (Final, Native, Public)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAppCharFootstepsTriggerVolume::OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharFootstepsTriggerVolume", "OnOverlapBegin");

	Params::AppCharFootstepsTriggerVolume_OnOverlapBegin Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharFootstepsTriggerVolume.OnOverlapEnd
// (Final, Native, Public)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAppCharFootstepsTriggerVolume::OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharFootstepsTriggerVolume", "OnOverlapEnd");

	Params::AppCharFootstepsTriggerVolume_OnOverlapEnd Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharLib.GetMaterial
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMaterialInterface*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UMaterialInterface*> UAppCharLib::GetMaterial(const class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AppCharLib", "GetMaterial");

	Params::AppCharLib_GetMaterial Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharLib.GetMaterialSlotName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAppCharLib::GetMaterialSlotName(class USkeletalMeshComponent* Target, int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AppCharLib", "GetMaterialSlotName");

	Params::AppCharLib_GetMaterialSlotName Parms{};

	Parms.Target = Target;
	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharLib.IsDungeonChara
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppCharLib::IsDungeonChara(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AppCharLib", "IsDungeonChara");

	Params::AppCharLib_IsDungeonChara Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharLib.IsUniqueNpc
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppCharLib::IsUniqueNpc(const int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AppCharLib", "IsUniqueNpc");

	Params::AppCharLib_IsUniqueNpc Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharLib.SetOpacity
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharLib::SetOpacity(const class AActor* Target, const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AppCharLib", "SetOpacity");

	Params::AppCharLib_SetOpacity Parms{};

	Parms.Target = Target;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharLib.SetOpacityNiagaraOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCharLib::SetOpacityNiagaraOnly(const class AActor* Target, const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AppCharLib", "SetOpacityNiagaraOnly");

	Params::AppCharLib_SetOpacityNiagaraOnly Parms{};

	Parms.Target = Target;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUPAnimManager.EndCardEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUICmmRankUPAnimManager::EndCardEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "EndCardEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.PauseGameover
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUICmmRankUPAnimManager::PauseGameover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "PauseGameover");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.PlaySE
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUICmmRankUpSE                          SEType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUPAnimManager::PlaySE(EUICmmRankUpSE SEType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "PlaySE");

	Params::UICmmRankUPAnimManager_PlaySE Parms{};

	Parms.SEType = SEType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUPAnimManager.RestartGameover
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUICmmRankUPAnimManager::RestartGameover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "RestartGameover");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.SetEndGameoverOneLine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUPAnimManager::SetEndGameoverOneLine(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "SetEndGameoverOneLine");

	Params::UICmmRankUPAnimManager_SetEndGameoverOneLine Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUPAnimManager.SetEndRecoveryAnime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUPAnimManager::SetEndRecoveryAnime(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "SetEndRecoveryAnime");

	Params::UICmmRankUPAnimManager_SetEndRecoveryAnime Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUPAnimManager.SetEndReverseInAnime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUPAnimManager::SetEndReverseInAnime(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "SetEndReverseInAnime");

	Params::UICmmRankUPAnimManager_SetEndReverseInAnime Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUPAnimManager.SetEndReverseOutAnime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUPAnimManager::SetEndReverseOutAnime(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "SetEndReverseOutAnime");

	Params::UICmmRankUPAnimManager_SetEndReverseOutAnime Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUPAnimManager.SetEndReverseRankInAnime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUPAnimManager::SetEndReverseRankInAnime(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "SetEndReverseRankInAnime");

	Params::UICmmRankUPAnimManager_SetEndReverseRankInAnime Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUPAnimManager.SetEndUIInAnime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUPAnimManager::SetEndUIInAnime(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "SetEndUIInAnime");

	Params::UICmmRankUPAnimManager_SetEndUIInAnime Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUPAnimManager.SetEndUIOutAnime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUPAnimManager::SetEndUIOutAnime(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "SetEndUIOutAnime");

	Params::UICmmRankUPAnimManager_SetEndUIOutAnime Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUPAnimManager.SetPlayBGCardOutAnime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUPAnimManager::SetPlayBGCardOutAnime(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "SetPlayBGCardOutAnime");

	Params::UICmmRankUPAnimManager_SetPlayBGCardOutAnime Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUPAnimManager.SetPlayStarInAnime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUPAnimManager::SetPlayStarInAnime(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "SetPlayStarInAnime");

	Params::UICmmRankUPAnimManager_SetPlayStarInAnime Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUPAnimManager.SetShowKeyHelp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUPAnimManager::SetShowKeyHelp(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "SetShowKeyHelp");

	Params::UICmmRankUPAnimManager_SetShowKeyHelp Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUPAnimManager.SkipContentAnime
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUICmmRankUPAnimManager::SkipContentAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "SkipContentAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartCardEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUICmmRankUPAnimManager::StartCardEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartCardEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartCardInAnime
// (Event, Public, BlueprintEvent)

void AUICmmRankUPAnimManager::StartCardInAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartCardInAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartGameOverAllAnime
// (Event, Public, BlueprintEvent)

void AUICmmRankUPAnimManager::StartGameOverAllAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartGameOverAllAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartGameOverOneContentAnime
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUICmmRankUPAnimManager::StartGameOverOneContentAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartGameOverOneContentAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartKeyHelpInAnime
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUICmmRankUPAnimManager::StartKeyHelpInAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartKeyHelpInAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartKeyHelpOutAnime
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUICmmRankUPAnimManager::StartKeyHelpOutAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartKeyHelpOutAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartKeyHelpWaitAnime
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUICmmRankUPAnimManager::StartKeyHelpWaitAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartKeyHelpWaitAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartRankUpInAnime
// (Event, Public, BlueprintEvent)

void AUICmmRankUPAnimManager::StartRankUpInAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartRankUpInAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartRankUpOutAnime
// (Event, Public, BlueprintEvent)

void AUICmmRankUPAnimManager::StartRankUpOutAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartRankUpOutAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartRecoveryAnime
// (Event, Public, BlueprintEvent)

void AUICmmRankUPAnimManager::StartRecoveryAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartRecoveryAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartReverseInAnime
// (Event, Public, BlueprintEvent)

void AUICmmRankUPAnimManager::StartReverseInAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartReverseInAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartReverseOutAnime
// (Event, Public, BlueprintEvent)

void AUICmmRankUPAnimManager::StartReverseOutAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartReverseOutAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartReverseRankInAnime
// (Event, Public, BlueprintEvent)

void AUICmmRankUPAnimManager::StartReverseRankInAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartReverseRankInAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartRipple1GameOverAnime
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUICmmRankUPAnimManager::StartRipple1GameOverAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartRipple1GameOverAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartRipple2GameOverAnime
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUICmmRankUPAnimManager::StartRipple2GameOverAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartRipple2GameOverAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UICmmRankUPAnimManager.StartRipple3GameOverAnime
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AUICmmRankUPAnimManager::StartRipple3GameOverAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUPAnimManager", "StartRipple3GameOverAnime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FldCrowdNpcBase.UpdateOpacityByPlayerActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   Opacity                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TargetActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFldCrowdNpcBase::UpdateOpacityByPlayerActor(float Opacity, class AActor* TargetActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldCrowdNpcBase", "UpdateOpacityByPlayerActor");

	Params::FldCrowdNpcBase_UpdateOpacityByPlayerActor Parms{};

	Parms.Opacity = Opacity;
	Parms.TargetActor = TargetActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCharWeaponBase.Event_LoadEnd
// (Event, Public, BlueprintEvent)

void AAppCharWeaponBase::Event_LoadEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharWeaponBase", "Event_LoadEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.AppCharWeaponBase.PlayAnim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AnimNo                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAppCharWeaponBase::PlayAnim(int32 AnimNo, bool Loop, float BlendInTime, float BlendOutTime, float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharWeaponBase", "PlayAnim");

	Params::AppCharWeaponBase_PlayAnim Parms{};

	Parms.AnimNo = AnimNo;
	Parms.Loop = Loop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharWeaponBase.PlayAnimSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimSequenceBase*                PSequence                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAppCharWeaponBase::PlayAnimSequence(class UAnimSequenceBase* PSequence, bool Loop, float BlendInTime, float BlendOutTime, float InPlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharWeaponBase", "PlayAnimSequence");

	Params::AppCharWeaponBase_PlayAnimSequence Parms{};

	Parms.PSequence = PSequence;
	Parms.Loop = Loop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCharWeaponBase.GetWaitAnimNo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AAppCharWeaponBase::GetWaitAnimNo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCharWeaponBase", "GetWaitAnimNo");

	Params::AppCharWeaponBase_GetWaitAnimNo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCheatManager.AtlAllDLCActiveFlagOff
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlAllDLCActiveFlagOff()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlAllDLCActiveFlagOff");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlAllDLCActiveFlagOn
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlAllDLCActiveFlagOn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlAllDLCActiveFlagOn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlAutoPlay
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           OPTION                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlAutoPlay(const class FString& OPTION)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlAutoPlay");

	Params::AppCheatManager_AtlAutoPlay Parms{};

	Parms.OPTION = std::move(OPTION);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlAutoPlayExecDungeonPassingTest
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   BeginFloor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndFloor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRebuild                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAstrea                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlAutoPlayExecDungeonPassingTest(int32 BeginFloor, int32 EndFloor, bool bLoop, bool bRebuild, bool bAstrea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlAutoPlayExecDungeonPassingTest");

	Params::AppCheatManager_AtlAutoPlayExecDungeonPassingTest Parms{};

	Parms.BeginFloor = BeginFloor;
	Parms.EndFloor = EndFloor;
	Parms.bLoop = bLoop;
	Parms.bRebuild = bRebuild;
	Parms.bAstrea = bAstrea;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlAutoPlayExecDungeonTBoxTest
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   BeginFloor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndFloor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLoop                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAstrea                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlAutoPlayExecDungeonTBoxTest(int32 BeginFloor, int32 EndFloor, bool bLoop, bool bAstrea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlAutoPlayExecDungeonTBoxTest");

	Params::AppCheatManager_AtlAutoPlayExecDungeonTBoxTest Parms{};

	Parms.BeginFloor = BeginFloor;
	Parms.EndFloor = EndFloor;
	Parms.bLoop = bLoop;
	Parms.bAstrea = bAstrea;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlAutoPlayExecEnemyAILoggingTest
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   MinEncountID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxEncountID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlAutoPlayExecEnemyAILoggingTest(int32 MinEncountID, int32 MaxEncountID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlAutoPlayExecEnemyAILoggingTest");

	Params::AppCheatManager_AtlAutoPlayExecEnemyAILoggingTest Parms{};

	Parms.MinEncountID = MinEncountID;
	Parms.MaxEncountID = MaxEncountID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlAutoPlayExecEnemyDropItemLoggingTest
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   MinEncountID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxEncountID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlAutoPlayExecEnemyDropItemLoggingTest(int32 MinEncountID, int32 MaxEncountID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlAutoPlayExecEnemyDropItemLoggingTest");

	Params::AppCheatManager_AtlAutoPlayExecEnemyDropItemLoggingTest Parms{};

	Parms.MinEncountID = MinEncountID;
	Parms.MaxEncountID = MaxEncountID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlAutoPlayExecShuffleTimeTest
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlAutoPlayExecShuffleTimeTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlAutoPlayExecShuffleTimeTest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlAutoPlayExecSkillMutationPowerUpTest
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   StartIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxTryCount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlAutoPlayExecSkillMutationPowerUpTest(int32 StartIndex, int32 MaxTryCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlAutoPlayExecSkillMutationPowerUpTest");

	Params::AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpTest Parms{};

	Parms.StartIndex = StartIndex;
	Parms.MaxTryCount = MaxTryCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlAutoPlayExecSkillMutationPowerUpUnitTest
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   OldSkillID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewSkillID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlAutoPlayExecSkillMutationPowerUpUnitTest(int32 OldSkillID, int32 NewSkillID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlAutoPlayExecSkillMutationPowerUpUnitTest");

	Params::AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpUnitTest Parms{};

	Parms.OldSkillID = OldSkillID;
	Parms.NewSkillID = NewSkillID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlAutoPlayExecSkillMutationTest
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   SkillPackIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxTryCount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlAutoPlayExecSkillMutationTest(int32 SkillPackIndex, int32 MaxTryCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlAutoPlayExecSkillMutationTest");

	Params::AppCheatManager_AtlAutoPlayExecSkillMutationTest Parms{};

	Parms.SkillPackIndex = SkillPackIndex;
	Parms.MaxTryCount = MaxTryCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlBgmRestart
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlBgmRestart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlBgmRestart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlBgmStop
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlBgmStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlBgmStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlBtlCountdownPlay
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlBtlCountdownPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlBtlCountdownPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlBtlCountdownSetTime
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   InSecond                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlBtlCountdownSetTime(int32 InSecond)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlBtlCountdownSetTime");

	Params::AppCheatManager_AtlBtlCountdownSetTime Parms{};

	Parms.InSecond = InSecond;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlBtlCountdownStop
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlBtlCountdownStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlBtlCountdownStop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlBtlFadeManagerOldProcessEnable
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlBtlFadeManagerOldProcessEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlBtlFadeManagerOldProcessEnable");

	Params::AppCheatManager_AtlBtlFadeManagerOldProcessEnable Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlCallAlphaDebugMenu
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlCallAlphaDebugMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlCallAlphaDebugMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlCallAstreaProgress
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlCallAstreaProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlCallAstreaProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlCallDebugStartMenu
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlCallDebugStartMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlCallDebugStartMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlCallEvent
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   EventMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlCallEvent(int32 EventMajorID, int32 EventMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlCallEvent");

	Params::AppCheatManager_AtlCallEvent Parms{};

	Parms.EventMajorID = EventMajorID;
	Parms.EventMinorID = EventMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlCallEventCmmu
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   EventMaojorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlCallEventCmmu(int32 EventMaojorID, int32 EventMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlCallEventCmmu");

	Params::AppCheatManager_AtlCallEventCmmu Parms{};

	Parms.EventMaojorID = EventMaojorID;
	Parms.EventMinorID = EventMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlCallEventFild
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   EventMaojorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlCallEventFild(int32 EventMaojorID, int32 EventMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlCallEventFild");

	Params::AppCheatManager_AtlCallEventFild Parms{};

	Parms.EventMaojorID = EventMaojorID;
	Parms.EventMinorID = EventMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlCallNextTime
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlCallNextTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlCallNextTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlDevPlayLogging
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlDevPlayLogging(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlDevPlayLogging");

	Params::AppCheatManager_AtlDevPlayLogging Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlDispAstreaProgress
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlDispAstreaProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlDispAstreaProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlDispCharacterPoolListToOutputLog
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlDispCharacterPoolListToOutputLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlDispCharacterPoolListToOutputLog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlDispIsAvailableAstrea
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlDispIsAvailableAstrea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlDispIsAvailableAstrea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlDispIsPlayingAstrea
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlDispIsPlayingAstrea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlDispIsPlayingAstrea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlDispIsUsingAstreaSavedata
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlDispIsUsingAstreaSavedata()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlDispIsUsingAstreaSavedata");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlDispLoadedStreamingLevels
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlDispLoadedStreamingLevels()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlDispLoadedStreamingLevels");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlDrawPlayLog
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bVisible                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlDrawPlayLog(bool bVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlDrawPlayLog");

	Params::AppCheatManager_AtlDrawPlayLog Parms{};

	Parms.bVisible = bVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlEventForceFinish
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlEventForceFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlEventForceFinish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlFieldCameraShakeEnd
// (Final, Exec, Native, Public)
// Parameters:
// float                                   InTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlFieldCameraShakeEnd(float InTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlFieldCameraShakeEnd");

	Params::AppCheatManager_AtlFieldCameraShakeEnd Parms{};

	Parms.InTime = InTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlFieldCameraShakeStart
// (Final, Exec, Native, Public)
// Parameters:
// float                                   InFrequency                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPowerX                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPowerY                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTime                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlFieldCameraShakeStart(float InFrequency, float InPowerX, float InPowerY, float InTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlFieldCameraShakeStart");

	Params::AppCheatManager_AtlFieldCameraShakeStart Parms{};

	Parms.InFrequency = InFrequency;
	Parms.InPowerX = InPowerX;
	Parms.InPowerY = InPowerY;
	Parms.InTime = InTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlFieldChangeVisible
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlFieldChangeVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlFieldChangeVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlFieldPauseActorALL
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bPaused                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlFieldPauseActorALL(bool bPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlFieldPauseActorALL");

	Params::AppCheatManager_AtlFieldPauseActorALL Parms{};

	Parms.bPaused = bPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlFieldPlayerPos
// (Final, Exec, Native, Public)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlFieldPlayerPos(float X, float Y, float Z)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlFieldPlayerPos");

	Params::AppCheatManager_AtlFieldPlayerPos Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlFldDispCriAtomExDebugResourcesInfo
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlFldDispCriAtomExDebugResourcesInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlFldDispCriAtomExDebugResourcesInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlForceFadeIN
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlForceFadeIN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlForceFadeIN");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlForceFadeOUT
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlForceFadeOUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlForceFadeOUT");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlForceUnpause
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlForceUnpause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlForceUnpause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlGetDayTime
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlGetDayTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlGetDayTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlGraphicConfigBenchmark
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlGraphicConfigBenchmark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlGraphicConfigBenchmark");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlGraphicConfigFPS
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   MaxFPS                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlGraphicConfigFPS(int32 MaxFPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlGraphicConfigFPS");

	Params::AppCheatManager_AtlGraphicConfigFPS Parms{};

	Parms.MaxFPS = MaxFPS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlGraphicConfigHardwareStat
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlGraphicConfigHardwareStat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlGraphicConfigHardwareStat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlGraphicConfigPreset
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Preset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlGraphicConfigPreset(int32 Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlGraphicConfigPreset");

	Params::AppCheatManager_AtlGraphicConfigPreset Parms{};

	Parms.Preset = Preset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlGraphicConfigScreen
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   ResX                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ResY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScreenMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DisplayNo                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlGraphicConfigScreen(int32 ResX, int32 ResY, int32 ScreenMode, int32 DisplayNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlGraphicConfigScreen");

	Params::AppCheatManager_AtlGraphicConfigScreen Parms{};

	Parms.ResX = ResX;
	Parms.ResY = ResY;
	Parms.ScreenMode = ScreenMode;
	Parms.DisplayNo = DisplayNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlGraphicConfigScreenMode
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   ScreenMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DisplayNo                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlGraphicConfigScreenMode(int32 ScreenMode, int32 DisplayNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlGraphicConfigScreenMode");

	Params::AppCheatManager_AtlGraphicConfigScreenMode Parms{};

	Parms.ScreenMode = ScreenMode;
	Parms.DisplayNo = DisplayNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlGraphicConfigShadowQuality
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Quality                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlGraphicConfigShadowQuality(int32 Quality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlGraphicConfigShadowQuality");

	Params::AppCheatManager_AtlGraphicConfigShadowQuality Parms{};

	Parms.Quality = Quality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlLogWorldTimeSec
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlLogWorldTimeSec()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlLogWorldTimeSec");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlMessageScaleNewProcessEnable
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlMessageScaleNewProcessEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlMessageScaleNewProcessEnable");

	Params::AppCheatManager_AtlMessageScaleNewProcessEnable Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlPlanarReflectionPercentage
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Percent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlPlanarReflectionPercentage(int32 Percent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlPlanarReflectionPercentage");

	Params::AppCheatManager_AtlPlanarReflectionPercentage Parms{};

	Parms.Percent = Percent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlRayTraceEnable
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Raytrace                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlanarReflection                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlRayTraceEnable(int32 Raytrace, int32 PlanarReflection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlRayTraceEnable");

	Params::AppCheatManager_AtlRayTraceEnable Parms{};

	Parms.Raytrace = Raytrace;
	Parms.PlanarReflection = PlanarReflection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlRushEffectRate
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlRushEffectRate(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlRushEffectRate");

	Params::AppCheatManager_AtlRushEffectRate Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlSaveDataAccessorMask
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Mask                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlSaveDataAccessorMask(const class FString& Mask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlSaveDataAccessorMask");

	Params::AppCheatManager_AtlSaveDataAccessorMask Parms{};

	Parms.Mask = std::move(Mask);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlSaveDataConvert
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Mode                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SaveDataID                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SlotIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlSaveDataConvert(const class FString& Mode, const class FString& SaveDataID, int32 SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlSaveDataConvert");

	Params::AppCheatManager_AtlSaveDataConvert Parms{};

	Parms.Mode = std::move(Mode);
	Parms.SaveDataID = std::move(SaveDataID);
	Parms.SlotIndex = SlotIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlSetCameraTransform
// (Final, Exec, Native, Public)
// Parameters:
// float                                   PosX                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PosY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PosZ                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotX                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RotZ                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlSetCameraTransform(float PosX, float PosY, float PosZ, float RotX, float RotY, float RotZ)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlSetCameraTransform");

	Params::AppCheatManager_AtlSetCameraTransform Parms{};

	Parms.PosX = PosX;
	Parms.PosY = PosY;
	Parms.PosZ = PosZ;
	Parms.RotX = RotX;
	Parms.RotY = RotY;
	Parms.RotZ = RotZ;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlSetDayTime
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Month                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Day                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlSetDayTime(int32 Month, int32 Day, int32 Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlSetDayTime");

	Params::AppCheatManager_AtlSetDayTime Parms{};

	Parms.Month = Month;
	Parms.Day = Day;
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlSetNextDayTime
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Month                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Day                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlSetNextDayTime(int32 Month, int32 Day, int32 Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlSetNextDayTime");

	Params::AppCheatManager_AtlSetNextDayTime Parms{};

	Parms.Month = Month;
	Parms.Day = Day;
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlSetWorldTimeSec
// (Final, Exec, Native, Public)
// Parameters:
// float                                   Sec                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlSetWorldTimeSec(float Sec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlSetWorldTimeSec");

	Params::AppCheatManager_AtlSetWorldTimeSec Parms{};

	Parms.Sec = Sec;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlSoundConfigDevice
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlSoundConfigDevice(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlSoundConfigDevice");

	Params::AppCheatManager_AtlSoundConfigDevice Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlSoundConfigInfo
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlSoundConfigInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlSoundConfigInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlStartNextProgressAstrea
// (Final, Exec, Native, Public)

void UAppCheatManager::AtlStartNextProgressAstrea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlStartNextProgressAstrea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlUObjectLeakChecker
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlUObjectLeakChecker(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlUObjectLeakChecker");

	Params::AppCheatManager_AtlUObjectLeakChecker Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppCheatManager.AtlWindowPosSaveEnable
// (Final, Exec, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppCheatManager::AtlWindowPosSaveEnable(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCheatManager", "AtlWindowPosSaveEnable");

	Params::AppCheatManager_AtlWindowPosSaveEnable Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppLvMngUnloadMonitorActor.OnEndExec
// (Final, Native, Public)

void AAppLvMngUnloadMonitorActor::OnEndExec()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppLvMngUnloadMonitorActor", "OnEndExec");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDbgEmMaker.SetScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldDbgEmMaker::SetScale(class AActor* Target, float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDbgEmMaker", "SetScale");

	Params::FldDbgEmMaker_SetScale Parms{};

	Parms.Target = Target;
	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.ApplicationWindowState.OnFocusChangeBP
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFocus                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AApplicationWindowState::OnFocusChangeBP(const bool IsFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ApplicationWindowState", "OnFocusChangeBP");

	Params::ApplicationWindowState_OnFocusChangeBP Parms{};

	Parms.IsFocus = IsFocus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppNpcComp.SetCosTexID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppNpcComp::SetCosTexID(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppNpcComp", "SetCosTexID");

	Params::AppNpcComp_SetCosTexID Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppNpcComp.SetFootForBP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppNpcComp::SetFootForBP(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppNpcComp", "SetFootForBP");

	Params::AppNpcComp_SetFootForBP Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppNpcComp.GetBaseCore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ANpcBaseCore*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ANpcBaseCore* UAppNpcComp::GetBaseCore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppNpcComp", "GetBaseCore");

	Params::AppNpcComp_GetBaseCore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppPauseableListener.AppPauseableBeginPlay
// (Native, Public)

void IAppPauseableListener::AppPauseableBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPauseableListener", "AppPauseableBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppPauseableListener.AppPauseableEndPlay
// (Native, Public)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IAppPauseableListener::AppPauseableEndPlay(const EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPauseableListener", "AppPauseableEndPlay");

	Params::AppPauseableListener_AppPauseableEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppPauseableListener.AsAActor
// (Native, Public)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* IAppPauseableListener::AsAActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPauseableListener", "AsAActor");

	Params::AppPauseableListener_AsAActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppPauseableListener.AsUObject
// (Native, Public)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* IAppPauseableListener::AsUObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPauseableListener", "AsUObject");

	Params::AppPauseableListener_AsUObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppPauseableListener.Paused
// (Native, Public)
// Parameters:
// EAppPauseType                           Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IAppPauseableListener::Paused(EAppPauseType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPauseableListener", "Paused");

	Params::AppPauseableListener_Paused Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppPauseableListener.UnPaused
// (Native, Public)
// Parameters:
// EAppPauseType                           Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IAppPauseableListener::UnPaused(EAppPauseType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPauseableListener", "UnPaused");

	Params::AppPauseableListener_UnPaused Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppPauseableListener.GetAppPauseFlags
// (Native, Public, Const)
// Parameters:
// EAppPauseObjectFlag                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAppPauseObjectFlag IAppPauseableListener::GetAppPauseFlags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPauseableListener", "GetAppPauseFlags");

	Params::AppPauseableListener_GetAppPauseFlags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.TestNishidaResourceActor.Load
// (Final, Native, Public)

void ATestNishidaResourceActor::Load()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestNishidaResourceActor", "Load");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppPauseManagerSubsystem.IsPause
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAppPauseType                           PauseType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAppPauseManagerSubsystem::IsPause(EAppPauseType* PauseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPauseManagerSubsystem", "IsPause");

	Params::AppPauseManagerSubsystem_IsPause Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PauseType != nullptr)
		*PauseType = Parms.PauseType;

	return Parms.ReturnValue;
}


// Function xrd777.AppPauseManagerSubsystem.Pause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAppPauseType                           InPauseType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAppPauseManagerSubsystem::Pause(EAppPauseType InPauseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPauseManagerSubsystem", "Pause");

	Params::AppPauseManagerSubsystem_Pause Parms{};

	Parms.InPauseType = InPauseType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppPauseManagerSubsystem.UnPause
// (Final, Native, Public, BlueprintCallable)

void UAppPauseManagerSubsystem::UnPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPauseManagerSubsystem", "UnPause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppPropsCardInterface.GetBackMaterial
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* IAppPropsCardInterface::GetBackMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPropsCardInterface", "GetBackMaterial");

	Params::AppPropsCardInterface_GetBackMaterial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.AppPropsCardInterface.GetFrontMaterial
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* IAppPropsCardInterface::GetFrontMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPropsCardInterface", "GetFrontMaterial");

	Params::AppPropsCardInterface_GetFrontMaterial Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.AppPropsCardInterface.TarotCardSetup
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAppPropsCardParam               Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void IAppPropsCardInterface::TarotCardSetup(const struct FAppPropsCardParam& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPropsCardInterface", "TarotCardSetup");

	Params::AppPropsCardInterface_TarotCardSetup Parms{};

	Parms.Param = std::move(Param);

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.AppPropsCardInterface.TarotCardSync
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IAppPropsCardInterface::TarotCardSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPropsCardInterface", "TarotCardSync");

	Params::AppPropsCardInterface_TarotCardSync Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.AppPropsCore.CompareToHiddenCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LocalDataIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ConditionalValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEvtConditionalBranchCompType           CompareType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAppPropsCore::CompareToHiddenCharacter(int32 LocalDataIndex, int32 ConditionalValue, EEvtConditionalBranchCompType CompareType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPropsCore", "CompareToHiddenCharacter");

	Params::AppPropsCore_CompareToHiddenCharacter Parms{};

	Parms.LocalDataIndex = LocalDataIndex;
	Parms.ConditionalValue = ConditionalValue;
	Parms.CompareType = CompareType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AppPropsCore.PlayAnimationPack
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AnimePackIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AnimSlotName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAppPropsCore::PlayAnimationPack(int32 AnimePackIndex, const bool IsLoop, const float BlendInTime, const float BlendOutTime, const float InPlayRate, class FName AnimSlotName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppPropsCore", "PlayAnimationPack");

	Params::AppPropsCore_PlayAnimationPack Parms{};

	Parms.AnimePackIndex = AnimePackIndex;
	Parms.IsLoop = IsLoop;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.AnimSlotName = AnimSlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AstreaFuncLib.GetCostumeAstreaDaily
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAstreaFuncLib::GetCostumeAstreaDaily(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "GetCostumeAstreaDaily");

	Params::AstreaFuncLib_GetCostumeAstreaDaily Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.GetCurrentDesignTypeId
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAstreaFuncLib::GetCurrentDesignTypeId()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "GetCurrentDesignTypeId");

	Params::AstreaFuncLib_GetCurrentDesignTypeId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.GetCurrentEpisodeHero
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAstreaFuncLib::GetCurrentEpisodeHero()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "GetCurrentEpisodeHero");

	Params::AstreaFuncLib_GetCurrentEpisodeHero Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.GetLibraSaveDataState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ELibraSaveDataState                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELibraSaveDataState UAstreaFuncLib::GetLibraSaveDataState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "GetLibraSaveDataState");

	Params::AstreaFuncLib_GetLibraSaveDataState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsAbyssOfTimeField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   FieldMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FieldMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsAbyssOfTimeField(int32 FieldMajorID, int32 FieldMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsAbyssOfTimeField");

	Params::AstreaFuncLib_IsAbyssOfTimeField Parms{};

	Parms.FieldMajorID = FieldMajorID;
	Parms.FieldMinorID = FieldMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsAstreaField
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   FieldMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FieldMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsAstreaField(int32 FieldMajorID, int32 FieldMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsAstreaField");

	Params::AstreaFuncLib_IsAstreaField Parms{};

	Parms.FieldMajorID = FieldMajorID;
	Parms.FieldMinorID = FieldMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsAvailableAstrea
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsAvailableAstrea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsAvailableAstrea");

	Params::AstreaFuncLib_IsAvailableAstrea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsColosseumBattle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   EncounterID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsColosseumBattle(int32 EncounterID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsColosseumBattle");

	Params::AstreaFuncLib_IsColosseumBattle Parms{};

	Parms.EncounterID = EncounterID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsCurrentEpisodeMember
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsCurrentEpisodeMember(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsCurrentEpisodeMember");

	Params::AstreaFuncLib_IsCurrentEpisodeMember Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsDateUnknown
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsDateUnknown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsDateUnknown");

	Params::AstreaFuncLib_IsDateUnknown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsDateUnknowText
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           Date                                                   (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsDateUnknowText(const class FString& Date)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsDateUnknowText");

	Params::AstreaFuncLib_IsDateUnknowText Parms{};

	Parms.Date = std::move(Date);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsEnableAstreaSaveFormat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsEnableAstreaSaveFormat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsEnableAstreaSaveFormat");

	Params::AstreaFuncLib_IsEnableAstreaSaveFormat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsExtraEpisodeMember
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsExtraEpisodeMember(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsExtraEpisodeMember");

	Params::AstreaFuncLib_IsExtraEpisodeMember Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsLongRangeAttackEnhanced
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsLongRangeAttackEnhanced()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsLongRangeAttackEnhanced");

	Params::AstreaFuncLib_IsLongRangeAttackEnhanced Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsMonadoBattle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsMonadoBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsMonadoBattle");

	Params::AstreaFuncLib_IsMonadoBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsOpenedAddAstreaMsg
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsOpenedAddAstreaMsg()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsOpenedAddAstreaMsg");

	Params::AstreaFuncLib_IsOpenedAddAstreaMsg Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsOriginEpisodeMember
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsOriginEpisodeMember(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsOriginEpisodeMember");

	Params::AstreaFuncLib_IsOriginEpisodeMember Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsPlayingAstrea
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsPlayingAstrea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsPlayingAstrea");

	Params::AstreaFuncLib_IsPlayingAstrea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsRequestDisplayNetworkSlot
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsRequestDisplayNetworkSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsRequestDisplayNetworkSlot");

	Params::AstreaFuncLib_IsRequestDisplayNetworkSlot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsUnlockAstrea
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsUnlockAstrea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsUnlockAstrea");

	Params::AstreaFuncLib_IsUnlockAstrea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsUsingAstreaPersonaBook
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsUsingAstreaPersonaBook()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsUsingAstreaPersonaBook");

	Params::AstreaFuncLib_IsUsingAstreaPersonaBook Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.IsUsingAstreaSavedata
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAstreaFuncLib::IsUsingAstreaSavedata()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "IsUsingAstreaSavedata");

	Params::AstreaFuncLib_IsUsingAstreaSavedata Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.ReplaceContentRootPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           InOriginal                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UAstreaFuncLib::ReplaceContentRootPath(const class FString& InOriginal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "ReplaceContentRootPath");

	Params::AstreaFuncLib_ReplaceContentRootPath Parms{};

	Parms.InOriginal = std::move(InOriginal);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AstreaFuncLib.SetLibraSaveDataState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ELibraSaveDataState                     SaveDataState                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAstreaFuncLib::SetLibraSaveDataState(ELibraSaveDataState SaveDataState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "SetLibraSaveDataState");

	Params::AstreaFuncLib_SetLibraSaveDataState Parms{};

	Parms.SaveDataState = SaveDataState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AstreaFuncLib.SetOpenAddAstreaMsg
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsOpen                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAstreaFuncLib::SetOpenAddAstreaMsg(bool bIsOpen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "SetOpenAddAstreaMsg");

	Params::AstreaFuncLib_SetOpenAddAstreaMsg Parms{};

	Parms.bIsOpen = bIsOpen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AstreaFuncLib.SetPlayingAstrea
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bPlaying                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAstreaFuncLib::SetPlayingAstrea(bool bPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "SetPlayingAstrea");

	Params::AstreaFuncLib_SetPlayingAstrea Parms{};

	Parms.bPlaying = bPlaying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AstreaFuncLib.SetRequestDisplayNetworkSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsDisplay                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAstreaFuncLib::SetRequestDisplayNetworkSlot(bool bIsDisplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "SetRequestDisplayNetworkSlot");

	Params::AstreaFuncLib_SetRequestDisplayNetworkSlot Parms{};

	Parms.bIsDisplay = bIsDisplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AstreaFuncLib.SetUsingAstreaSaveData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bUsingAstrea                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAstreaFuncLib::SetUsingAstreaSaveData(bool bUsingAstrea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AstreaFuncLib", "SetUsingAstreaSaveData");

	Params::AstreaFuncLib_SetUsingAstreaSaveData Parms{};

	Parms.bUsingAstrea = bUsingAstrea;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AstreaProgressActor.SetEnd
// (Final, Native, Public)

void AAstreaProgressActor::SetEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AstreaProgressActor", "SetEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AstreaProgressProcActor.CallNextProgress
// (Final, Native, Public, BlueprintCallable)

void AAstreaProgressProcActor::CallNextProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AstreaProgressProcActor", "CallNextProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AstreaProgressProcActor.OnFinishedAtlScr
// (Final, Native, Public)
// Parameters:
// int32                                   ExitType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAstreaProgressProcActor::OnFinishedAtlScr(int32 ExitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AstreaProgressProcActor", "OnFinishedAtlScr");

	Params::AstreaProgressProcActor_OnFinishedAtlScr Parms{};

	Parms.ExitType = ExitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AstreaProgressProcActor.OnFinishedProc
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   ExitType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAstreaProgressProcActor::OnFinishedProc(int32 ExitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AstreaProgressProcActor", "OnFinishedProc");

	Params::AstreaProgressProcActor_OnFinishedProc Parms{};

	Parms.ExitType = ExitType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.AstreaProgressProcActor.Return
// (Final, Native, Public, BlueprintCallable)

void AAstreaProgressProcActor::Return()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AstreaProgressProcActor", "Return");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.CalcEvtLocomotionTeleportVelocity
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          SimVelocity                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          PrevSimVelocity                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityRate                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UAtlEvtActorComponent::CalcEvtLocomotionTeleportVelocity(const struct FVector& SimVelocity, const struct FVector& PrevSimVelocity, float VelocityRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "CalcEvtLocomotionTeleportVelocity");

	Params::AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity Parms{};

	Parms.SimVelocity = std::move(SimVelocity);
	Parms.PrevSimVelocity = std::move(PrevSimVelocity);
	Parms.VelocityRate = VelocityRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtActorComponent.ClearAttachPropActor
// (Final, Native, Public, BlueprintCallable)

void UAtlEvtActorComponent::ClearAttachPropActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "ClearAttachPropActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.CompareToHiddenCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LocalDataIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ConditionalValue                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEvtConditionalBranchCompType           CompareType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtActorComponent::CompareToHiddenCharacter(int32 LocalDataIndex, int32 ConditionalValue, EEvtConditionalBranchCompType CompareType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "CompareToHiddenCharacter");

	Params::AtlEvtActorComponent_CompareToHiddenCharacter Parms{};

	Parms.LocalDataIndex = LocalDataIndex;
	Parms.ConditionalValue = ConditionalValue;
	Parms.CompareType = CompareType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.LoadEnded
// (Final, Native, Protected)

void UAtlEvtActorComponent::LoadEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "LoadEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.ResetVelocitySimulateParam
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UAtlEvtActorComponent::ResetVelocitySimulateParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "ResetVelocitySimulateParam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.SetAttachPropActor
// (Final, Native, Public, BlueprintCallable)

void UAtlEvtActorComponent::SetAttachPropActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "SetAttachPropActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.SetEnableAtlEvtLocomotionVelocitySimulation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInEnableAtlEvtLocomotionVelocitySimulation            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtActorComponent::SetEnableAtlEvtLocomotionVelocitySimulation(bool bInEnableAtlEvtLocomotionVelocitySimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "SetEnableAtlEvtLocomotionVelocitySimulation");

	Params::AtlEvtActorComponent_SetEnableAtlEvtLocomotionVelocitySimulation Parms{};

	Parms.bInEnableAtlEvtLocomotionVelocitySimulation = bInEnableAtlEvtLocomotionVelocitySimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.SetEnableBag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInEnableAtlEvtBag                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtActorComponent::SetEnableBag(bool bInEnableAtlEvtBag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "SetEnableBag");

	Params::AtlEvtActorComponent_SetEnableBag Parms{};

	Parms.bInEnableAtlEvtBag = bInEnableAtlEvtBag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.SetLocomotionTeleportVelocityType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAtlEvtLocomotionTeleportVelocityType   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtActorComponent::SetLocomotionTeleportVelocityType(EAtlEvtLocomotionTeleportVelocityType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "SetLocomotionTeleportVelocityType");

	Params::AtlEvtActorComponent_SetLocomotionTeleportVelocityType Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.SetOverrideAnimPackID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAnimPackID                             InAnimPackID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtActorComponent::SetOverrideAnimPackID(EAnimPackID InAnimPackID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "SetOverrideAnimPackID");

	Params::AtlEvtActorComponent_SetOverrideAnimPackID Parms{};

	Parms.InAnimPackID = InAnimPackID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.SetOverwriteDettachPropTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Transform                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UAtlEvtActorComponent::SetOverwriteDettachPropTransform(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "SetOverwriteDettachPropTransform");

	Params::AtlEvtActorComponent_SetOverwriteDettachPropTransform Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.SetShoesId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAppCharShoesID                         ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtActorComponent::SetShoesId(EAppCharShoesID ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "SetShoesId");

	Params::AtlEvtActorComponent_SetShoesId Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.SetupAnimPack
// (Final, Native, Public, BlueprintCallable)

void UAtlEvtActorComponent::SetupAnimPack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "SetupAnimPack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.SetupHeroBag
// (Final, Native, Public, BlueprintCallable)

void UAtlEvtActorComponent::SetupHeroBag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "SetupHeroBag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.SetUseAnimPack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInUseAnimPack                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtActorComponent::SetUseAnimPack(bool bInUseAnimPack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "SetUseAnimPack");

	Params::AtlEvtActorComponent_SetUseAnimPack Parms{};

	Parms.bInUseAnimPack = bInUseAnimPack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtActorComponent.SpawnHandwritingAttached
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// EAtlEvtHandwritingType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CameraOffset                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAttached                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHandwritingSpawner*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHandwritingSpawner* UAtlEvtActorComponent::SpawnHandwritingAttached(EAtlEvtHandwritingType Type, int32 LoopCount, float CameraOffset, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAttached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "SpawnHandwritingAttached");

	Params::AtlEvtActorComponent_SpawnHandwritingAttached Parms{};

	Parms.Type = Type;
	Parms.LoopCount = LoopCount;
	Parms.CameraOffset = CameraOffset;
	Parms.AttachPointName = AttachPointName;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.bAttached = bAttached;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtActorComponent.SpawnHandwritingAttachedDefaultParam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAtlEvtHandwritingType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAttached                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHandwritingSpawner*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHandwritingSpawner* UAtlEvtActorComponent::SpawnHandwritingAttachedDefaultParam(EAtlEvtHandwritingType Type, bool bAttached)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "SpawnHandwritingAttachedDefaultParam");

	Params::AtlEvtActorComponent_SpawnHandwritingAttachedDefaultParam Parms{};

	Parms.Type = Type;
	Parms.bAttached = bAttached;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtActorComponent.GetLocomotionTeleportVelocityType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAtlEvtLocomotionTeleportVelocityType   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAtlEvtLocomotionTeleportVelocityType UAtlEvtActorComponent::GetLocomotionTeleportVelocityType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "GetLocomotionTeleportVelocityType");

	Params::AtlEvtActorComponent_GetLocomotionTeleportVelocityType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtActorComponent.GetShoesID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAppCharShoesID                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAppCharShoesID UAtlEvtActorComponent::GetShoesID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "GetShoesID");

	Params::AtlEvtActorComponent_GetShoesID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtActorComponent.IsEnableBag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtlEvtActorComponent::IsEnableBag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "IsEnableBag");

	Params::AtlEvtActorComponent_IsEnableBag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtActorComponent.IsEnableLocomotionVelocitySimulate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtlEvtActorComponent::IsEnableLocomotionVelocitySimulate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "IsEnableLocomotionVelocitySimulate");

	Params::AtlEvtActorComponent_IsEnableLocomotionVelocitySimulate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtActorComponent.IsUseAnimPack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtlEvtActorComponent::IsUseAnimPack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtActorComponent", "IsUseAnimPack");

	Params::AtlEvtActorComponent_IsUseAnimPack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.Loading.End
// (Final, Native, Public, BlueprintCallable)

void ULoading::End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Loading", "End");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.Loading.SpawnDrawActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ALoadingDraw*                     LoadingDraw                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoading::SpawnDrawActor(class ALoadingDraw* LoadingDraw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Loading", "SpawnDrawActor");

	Params::Loading_SpawnDrawActor Parms{};

	Parms.LoadingDraw = LoadingDraw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.Loading.Start
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECldTimeZone                            Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULoading::Start(ECldTimeZone Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Loading", "Start");

	Params::Loading_Start Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.KimuraURO.Apply
// (Final, Native, Public, BlueprintCallable)

void AKimuraURO::Apply()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KimuraURO", "Apply");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.KimuraURO.Enable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    F                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AKimuraURO::Enable(bool F)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KimuraURO", "Enable");

	Params::KimuraURO_Enable Parms{};

	Parms.F = F;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.KimuraURO.Update
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<float>                           V                                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void AKimuraURO::Update(const TArray<float>& V)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KimuraURO", "Update");

	Params::KimuraURO_Update Parms{};

	Parms.V = std::move(V);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventEditHelper.OnLoadedLevelInPIE
// (Final, Native, Protected)

void AAtlEvtEventEditHelper::OnLoadedLevelInPIE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventEditHelper", "OnLoadedLevelInPIE");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventEditHelper.SetPreviewCrowdSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InCrowdMonth                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCrowdDay                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECldTimeZone                            InCrowdTimeZone                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInPreviewCrowd                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtEventEditHelper::SetPreviewCrowdSettings(int32 InCrowdMonth, int32 InCrowdDay, ECldTimeZone InCrowdTimeZone, bool bInPreviewCrowd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventEditHelper", "SetPreviewCrowdSettings");

	Params::AtlEvtEventEditHelper_SetPreviewCrowdSettings Parms{};

	Parms.InCrowdMonth = InCrowdMonth;
	Parms.InCrowdDay = InCrowdDay;
	Parms.InCrowdTimeZone = InCrowdTimeZone;
	Parms.bInPreviewCrowd = bInPreviewCrowd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventEditHelper.IsRankAEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAtlEvtEventEditHelper::IsRankAEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventEditHelper", "IsRankAEvent");

	Params::AtlEvtEventEditHelper_IsRankAEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtEventManager.AtlEvt_ResumeEventSequencer
// (Final, Native, Public)

void AAtlEvtEventManager::AtlEvt_ResumeEventSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "AtlEvt_ResumeEventSequencer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.BackLogFinishDelegte
// (Final, Native, Public)

void AAtlEvtEventManager::BackLogFinishDelegte()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "BackLogFinishDelegte");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.CloseMessage
// (Final, Native, Public)

void AAtlEvtEventManager::CloseMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "CloseMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.ExecuteBmdMessage
// (Final, Native, Public)
// Parameters:
// class UBmdAsset*                        InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageMajorID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageMinorID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageSubID                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessagePageID                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInEnableMessageRef                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSeqEventMessageID                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtEventManager::ExecuteBmdMessage(class UBmdAsset* InAsset, int32 InMessageMajorID, int32 InMessageMinorID, int32 InMessageSubID, int32 InMessagePageID, bool bInEnableMessageRef, int32 InSeqEventMessageID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ExecuteBmdMessage");

	Params::AtlEvtEventManager_ExecuteBmdMessage Parms{};

	Parms.InAsset = InAsset;
	Parms.InMessageMajorID = InMessageMajorID;
	Parms.InMessageMinorID = InMessageMinorID;
	Parms.InMessageSubID = InMessageSubID;
	Parms.InMessagePageID = InMessagePageID;
	Parms.bInEnableMessageRef = bInEnableMessageRef;
	Parms.InSeqEventMessageID = InSeqEventMessageID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.ExecuteBmdMessageSubtitle
// (Final, Native, Public)
// Parameters:
// class UBmdAsset*                        InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageMajorID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageMinorID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageSubID                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessagePageID                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InDrawFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInEnableMessageRef                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSeqEventMessageID                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtEventManager::ExecuteBmdMessageSubtitle(class UBmdAsset* InAsset, int32 InMessageMajorID, int32 InMessageMinorID, int32 InMessageSubID, int32 InMessagePageID, int32 InDrawFrame, bool bInEnableMessageRef, int32 InSeqEventMessageID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ExecuteBmdMessageSubtitle");

	Params::AtlEvtEventManager_ExecuteBmdMessageSubtitle Parms{};

	Parms.InAsset = InAsset;
	Parms.InMessageMajorID = InMessageMajorID;
	Parms.InMessageMinorID = InMessageMinorID;
	Parms.InMessageSubID = InMessageSubID;
	Parms.InMessagePageID = InMessagePageID;
	Parms.InDrawFrame = InDrawFrame;
	Parms.bInEnableMessageRef = bInEnableMessageRef;
	Parms.InSeqEventMessageID = InSeqEventMessageID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.ExecuteBmdMessageSubtitleSelect
// (Final, Native, Public)
// Parameters:
// class UBmdAsset*                        InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectMessageMajorID                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectMessageMinorID                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectMessageSubID                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectResponceToLocalDataID                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtEventManager::ExecuteBmdMessageSubtitleSelect(class UBmdAsset* InAsset, int32 InSelectMessageMajorID, int32 InSelectMessageMinorID, int32 InSelectMessageSubID, int32 InSelectResponceToLocalDataID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ExecuteBmdMessageSubtitleSelect");

	Params::AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect Parms{};

	Parms.InAsset = InAsset;
	Parms.InSelectMessageMajorID = InSelectMessageMajorID;
	Parms.InSelectMessageMinorID = InSelectMessageMinorID;
	Parms.InSelectMessageSubID = InSelectMessageSubID;
	Parms.InSelectResponceToLocalDataID = InSelectResponceToLocalDataID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.ExecuteBmdMessageSubtitleWithSelect
// (Final, Native, Public)
// Parameters:
// class UBmdAsset*                        InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageMajorID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageMinorID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageSubID                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessagePageID                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InDrawFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectMessageMajorID                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectMessageMinorID                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectMessageSubID                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectResponceToLocalDataID                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInEnableMessageRef                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSeqEventMessageID                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtEventManager::ExecuteBmdMessageSubtitleWithSelect(class UBmdAsset* InAsset, int32 InMessageMajorID, int32 InMessageMinorID, int32 InMessageSubID, int32 InMessagePageID, int32 InDrawFrame, int32 InSelectMessageMajorID, int32 InSelectMessageMinorID, int32 InSelectMessageSubID, int32 InSelectResponceToLocalDataID, bool bInEnableMessageRef, int32 InSeqEventMessageID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ExecuteBmdMessageSubtitleWithSelect");

	Params::AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect Parms{};

	Parms.InAsset = InAsset;
	Parms.InMessageMajorID = InMessageMajorID;
	Parms.InMessageMinorID = InMessageMinorID;
	Parms.InMessageSubID = InMessageSubID;
	Parms.InMessagePageID = InMessagePageID;
	Parms.InDrawFrame = InDrawFrame;
	Parms.InSelectMessageMajorID = InSelectMessageMajorID;
	Parms.InSelectMessageMinorID = InSelectMessageMinorID;
	Parms.InSelectMessageSubID = InSelectMessageSubID;
	Parms.InSelectResponceToLocalDataID = InSelectResponceToLocalDataID;
	Parms.bInEnableMessageRef = bInEnableMessageRef;
	Parms.InSeqEventMessageID = InSeqEventMessageID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.ExecuteBmdMessageWithSelect
// (Final, Native, Public)
// Parameters:
// class UBmdAsset*                        InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageMajorID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageMinorID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageSubID                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessagePageID                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectMessageMajorID                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectMessageMinorID                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectMessageSubID                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectResponceToLocalDataID                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInEnableMessageRef                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InEventMessageID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtEventManager::ExecuteBmdMessageWithSelect(class UBmdAsset* InAsset, int32 InMessageMajorID, int32 InMessageMinorID, int32 InMessageSubID, int32 InMessagePageID, int32 InSelectMessageMajorID, int32 InSelectMessageMinorID, int32 InSelectMessageSubID, int32 InSelectResponceToLocalDataID, bool bInEnableMessageRef, int32 InEventMessageID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ExecuteBmdMessageWithSelect");

	Params::AtlEvtEventManager_ExecuteBmdMessageWithSelect Parms{};

	Parms.InAsset = InAsset;
	Parms.InMessageMajorID = InMessageMajorID;
	Parms.InMessageMinorID = InMessageMinorID;
	Parms.InMessageSubID = InMessageSubID;
	Parms.InMessagePageID = InMessagePageID;
	Parms.InSelectMessageMajorID = InSelectMessageMajorID;
	Parms.InSelectMessageMinorID = InSelectMessageMinorID;
	Parms.InSelectMessageSubID = InSelectMessageSubID;
	Parms.InSelectResponceToLocalDataID = InSelectResponceToLocalDataID;
	Parms.bInEnableMessageRef = bInEnableMessageRef;
	Parms.InEventMessageID = InEventMessageID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.ExecuteMessage
// (Final, Native, Public)
// Parameters:
// class UBmdAsset*                        InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageNo                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InEventMessageID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtEventManager::ExecuteMessage(class UBmdAsset* InAsset, int32 InMessageNo, int32 InEventMessageID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ExecuteMessage");

	Params::AtlEvtEventManager_ExecuteMessage Parms{};

	Parms.InAsset = InAsset;
	Parms.InMessageNo = InMessageNo;
	Parms.InEventMessageID = InEventMessageID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.ExecuteMessageWithSelect
// (Final, Native, Public)
// Parameters:
// class UBmdAsset*                        InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageNo                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectNo                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectResponceToLocalDataID                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSeqEventMessageID                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtEventManager::ExecuteMessageWithSelect(class UBmdAsset* InAsset, int32 InMessageNo, int32 InSelectNo, int32 InSelectResponceToLocalDataID, int32 InSeqEventMessageID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ExecuteMessageWithSelect");

	Params::AtlEvtEventManager_ExecuteMessageWithSelect Parms{};

	Parms.InAsset = InAsset;
	Parms.InMessageNo = InMessageNo;
	Parms.InSelectNo = InSelectNo;
	Parms.InSelectResponceToLocalDataID = InSelectResponceToLocalDataID;
	Parms.InSeqEventMessageID = InSeqEventMessageID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.ExecuteMsgScript
// (Final, Native, Protected)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AAtlEvtEventManager::ExecuteMsgScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ExecuteMsgScript");

	Params::AtlEvtEventManager_ExecuteMsgScript Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtEventManager.ExecuteScript
// (Final, Native, Public)
// Parameters:
// class UBfAsset*                         InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InProcNo                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseBmdAssetInBfAsset                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBmdAsset*                        InBmdAsset                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtEventManager::ExecuteScript(class UBfAsset* InAsset, int32 InProcNo, bool bUseBmdAssetInBfAsset, class UBmdAsset* InBmdAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ExecuteScript");

	Params::AtlEvtEventManager_ExecuteScript Parms{};

	Parms.InAsset = InAsset;
	Parms.InProcNo = InProcNo;
	Parms.bUseBmdAssetInBfAsset = bUseBmdAssetInBfAsset;
	Parms.InBmdAsset = InBmdAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.ExecuteSelectScript
// (Final, Native, Protected)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AAtlEvtEventManager::ExecuteSelectScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ExecuteSelectScript");

	Params::AtlEvtEventManager_ExecuteSelectScript Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtEventManager.ForceClick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FKey                             Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputEvent                             EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtEventManager::ForceClick(const struct FKey& Key, EInputEvent EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ForceClick");

	Params::AtlEvtEventManager_ForceClick Parms{};

	Parms.Key = std::move(Key);
	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.ForcedRemoveMessage
// (Final, Native, Public)

void AAtlEvtEventManager::ForcedRemoveMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ForcedRemoveMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.ForcedStopScript
// (Final, Native, Public)

void AAtlEvtEventManager::ForcedStopScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ForcedStopScript");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.IsPlaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAtlEvtEventManager::IsPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "IsPlaying");

	Params::AtlEvtEventManager_IsPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtEventManager.OnFinishedAtlScr
// (Final, Native, Public)
// Parameters:
// int32                                   ExitType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtEventManager::OnFinishedAtlScr(int32 ExitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "OnFinishedAtlScr");

	Params::AtlEvtEventManager_OnFinishedAtlScr Parms{};

	Parms.ExitType = ExitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.ResumeEventSequencer
// (Final, Native, Public)

void AAtlEvtEventManager::ResumeEventSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "ResumeEventSequencer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.SetLocalData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtEventManager::SetLocalData(int32 Index_0, int32 Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "SetLocalData");

	Params::AtlEvtEventManager_SetLocalData Parms{};

	Parms.Index_0 = Index_0;
	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtEventManager.GetLocalData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AAtlEvtEventManager::GetLocalData(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "GetLocalData");

	Params::AtlEvtEventManager_GetLocalData Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtEventManager.IsEventRankA
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAtlEvtEventManager::IsEventRankA() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtEventManager", "IsEventRankA");

	Params::AtlEvtEventManager_IsEventRankA Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtHandwritingSubsystem.LoadEventHandwrintingData
// (Final, Native, Public, BlueprintCallable)

void UAtlEvtHandwritingSubsystem::LoadEventHandwrintingData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtHandwritingSubsystem", "LoadEventHandwrintingData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtHighStreamingLocator.SetEnableHighStreaming
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtHighStreamingLocator::SetEnableHighStreaming(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtHighStreamingLocator", "SetEnableHighStreaming");

	Params::AtlEvtHighStreamingLocator_SetEnableHighStreaming Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtLevelSequenceLoadingActor.OnFinishedLoadingAssets
// (Final, Native, Public)

void AAtlEvtLevelSequenceLoadingActor::OnFinishedLoadingAssets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLevelSequenceLoadingActor", "OnFinishedLoadingAssets");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.LoadingDraw.Draw
// (Final, Native, Public, BlueprintCallable)

void ALoadingDraw::Draw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadingDraw", "Draw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.LoadingDraw.SetTimeZone
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECldTimeZone                            InTimeShifting                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALoadingDraw::SetTimeZone(ECldTimeZone InTimeShifting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadingDraw", "SetTimeZone");

	Params::LoadingDraw_SetTimeZone Parms{};

	Parms.InTimeShifting = InTimeShifting;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.LoadingDraw.SetVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    On                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ALoadingDraw::SetVisible(bool On)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadingDraw", "SetVisible");

	Params::LoadingDraw_SetVisible Parms{};

	Parms.On = On;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtLevelSequenceActor.OnHighSpeed
// (Final, Native, Public)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtLevelSequenceActor::OnHighSpeed(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLevelSequenceActor", "OnHighSpeed");

	Params::AtlEvtLevelSequenceActor_OnHighSpeed Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction xrd777.AtlEvtLevelSequenceActor.OnTickFromSequenceTickManager__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FQualifiedFrameTime              CurrentTime                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQualifiedFrameTime              PreviousTime                                           (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtLevelSequenceActor::OnTickFromSequenceTickManager__DelegateSignature(const struct FQualifiedFrameTime& CurrentTime, const struct FQualifiedFrameTime& PreviousTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLevelSequenceActor", "OnTickFromSequenceTickManager__DelegateSignature");

	Params::AtlEvtLevelSequenceActor_OnTickFromSequenceTickManager__DelegateSignature Parms{};

	Parms.CurrentTime = std::move(CurrentTime);
	Parms.PreviousTime = std::move(PreviousTime);

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.AtlEvtLevelSequenceActor.PreloadEvtDialogueTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMovieSceneSequence*              MovieSceneSequence                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMovieSceneSubSection*            CurrentSubSceneSection                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtLevelSequenceActor::PreloadEvtDialogueTime(class UMovieSceneSequence* MovieSceneSequence, class UMovieSceneSubSection* CurrentSubSceneSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLevelSequenceActor", "PreloadEvtDialogueTime");

	Params::AtlEvtLevelSequenceActor_PreloadEvtDialogueTime Parms{};

	Parms.MovieSceneSequence = MovieSceneSequence;
	Parms.CurrentSubSceneSection = CurrentSubSceneSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtLevelSequenceActor.IsCompletedLoadSoundAssets
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAtlEvtLevelSequenceActor::IsCompletedLoadSoundAssets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLevelSequenceActor", "IsCompletedLoadSoundAssets");

	Params::AtlEvtLevelSequenceActor_IsCompletedLoadSoundAssets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldCrowdWalkManager.SaveMobWalkInitTable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       InitTable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldCrowdWalkManager::SaveMobWalkInitTable(class UDataTable* InitTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldCrowdWalkManager", "SaveMobWalkInitTable");

	Params::FldCrowdWalkManager_SaveMobWalkInitTable Parms{};

	Parms.InitTable = InitTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtLightScenarioLoader.OnLoadCompleted
// (Final, Native, Public)

void AAtlEvtLightScenarioLoader::OnLoadCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLightScenarioLoader", "OnLoadCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtLightScenarioUnloader.OnUnloadCompleted
// (Final, Native, Public)

void AAtlEvtLightScenarioUnloader::OnUnloadCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLightScenarioUnloader", "OnUnloadCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtLightScenarioTransitionController.AddLightScenario
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AAtlEvtLightScenarioTransitionController::AddLightScenario(class FName LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLightScenarioTransitionController", "AddLightScenario");

	Params::AtlEvtLightScenarioTransitionController_AddLightScenario Parms{};

	Parms.LevelName = LevelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtLightScenarioTransitionController.OnCompletedPreload
// (Final, Native, Public)

void AAtlEvtLightScenarioTransitionController::OnCompletedPreload()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLightScenarioTransitionController", "OnCompletedPreload");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtLightScenarioTransitionController.OnLoadFinished
// (Final, Native, Public)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtLightScenarioTransitionController::OnLoadFinished(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLightScenarioTransitionController", "OnLoadFinished");

	Params::AtlEvtLightScenarioTransitionController_OnLoadFinished Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtLightScenarioTransitionController.OnUnloadFinished
// (Final, Native, Public)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtLightScenarioTransitionController::OnUnloadFinished(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLightScenarioTransitionController", "OnUnloadFinished");

	Params::AtlEvtLightScenarioTransitionController_OnUnloadFinished Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtLightScenarioTransitionController.RemoveAllLightScenarioParam
// (Final, Native, Public, BlueprintCallable)

void AAtlEvtLightScenarioTransitionController::RemoveAllLightScenarioParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLightScenarioTransitionController", "RemoveAllLightScenarioParam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtLightScenarioTransitionController.TransitionLightScenario
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InNextLightScenarioIndex                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AAtlEvtLightScenarioTransitionController::TransitionLightScenario(int32 InNextLightScenarioIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLightScenarioTransitionController", "TransitionLightScenario");

	Params::AtlEvtLightScenarioTransitionController_TransitionLightScenario Parms{};

	Parms.InNextLightScenarioIndex = InNextLightScenarioIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtLightScenarioTransitionController.GetLightScenarioNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AAtlEvtLightScenarioTransitionController::GetLightScenarioNum() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLightScenarioTransitionController", "GetLightScenarioNum");

	Params::AtlEvtLightScenarioTransitionController_GetLightScenarioNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtLightScenarioTransitionController.IsDoingTransition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AAtlEvtLightScenarioTransitionController::IsDoingTransition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtLightScenarioTransitionController", "IsDoingTransition");

	Params::AtlEvtLightScenarioTransitionController_IsDoingTransition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIMiniMapDraw.Completed
// (Final, Native, Public)

void UUIMiniMapDraw::Completed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMiniMapDraw", "Completed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.SetOT
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::SetOT(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AtlEvtSubsystem", "SetOT");

	Params::AtlEvtSubsystem_SetOT Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.CallCategoryEvent
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAtlEvtEventCategoryType                CategoryType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayParameter             Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::CallCategoryEvent(class UObject* WorldContextObject, EAtlEvtEventCategoryType CategoryType, int32 EventMajorID, int32 EventMinorID, const struct FAtlEvtPlayParameter& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "CallCategoryEvent");

	Params::AtlEvtSubsystem_CallCategoryEvent Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CategoryType = CategoryType;
	Parms.EventMajorID = EventMajorID;
	Parms.EventMinorID = EventMinorID;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.CallEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayParameter             Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::CallEvent(class UObject* WorldContextObject, int32 EventMajorID, int32 EventMinorID, const struct FAtlEvtPlayParameter& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "CallEvent");

	Params::AtlEvtSubsystem_CallEvent Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EventMajorID = EventMajorID;
	Parms.EventMinorID = EventMinorID;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.CallEvent_DecrementFieldLoadingCount
// (Final, Native, Protected)

void UAtlEvtSubsystem::CallEvent_DecrementFieldLoadingCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "CallEvent_DecrementFieldLoadingCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.CallEvent_InternalFinishedEvent
// (Final, Native, Protected)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::CallEvent_InternalFinishedEvent(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "CallEvent_InternalFinishedEvent");

	Params::AtlEvtSubsystem_CallEvent_InternalFinishedEvent Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.CallEvent_SpawnLoadSublevelActor
// (Final, Native, Protected, HasOutParams)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             StreamTargetLevelName                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayParameter             Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAtlEvtPreData                   PreData                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// EAtlEvtSublevelType                     SublevelType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AAtlEvtPlayObject*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AAtlEvtPlayObject* UAtlEvtSubsystem::CallEvent_SpawnLoadSublevelActor(class UWorld* World, class FName* StreamTargetLevelName, const struct FAtlEvtPlayParameter& Param, struct FAtlEvtPreData* PreData, EAtlEvtSublevelType SublevelType, struct FLatentActionInfo* LatentInfo, class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "CallEvent_SpawnLoadSublevelActor");

	Params::AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor Parms{};

	Parms.World = World;
	Parms.Param = std::move(Param);
	Parms.SublevelType = SublevelType;
	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (StreamTargetLevelName != nullptr)
		*StreamTargetLevelName = Parms.StreamTargetLevelName;

	if (PreData != nullptr)
		*PreData = std::move(Parms.PreData);

	if (LatentInfo != nullptr)
		*LatentInfo = std::move(Parms.LatentInfo);

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.CallEventCmmu
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayParameter             Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::CallEventCmmu(class UObject* WorldContextObject, int32 EventMajorID, int32 EventMinorID, const struct FAtlEvtPlayParameter& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "CallEventCmmu");

	Params::AtlEvtSubsystem_CallEventCmmu Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EventMajorID = EventMajorID;
	Parms.EventMinorID = EventMinorID;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.CallEventField
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayParameter             Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::CallEventField(class UObject* WorldContextObject, int32 EventMajorID, int32 EventMinorID, const struct FAtlEvtPlayParameter& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "CallEventField");

	Params::AtlEvtSubsystem_CallEventField Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EventMajorID = EventMajorID;
	Parms.EventMinorID = EventMinorID;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.DateOffDelegate
// (Final, Native, Public)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::DateOffDelegate(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "DateOffDelegate");

	Params::AtlEvtSubsystem_DateOffDelegate Parms{};

	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.EvtPlay
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EvtName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InEventRank                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayParameter             Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::EvtPlay(const class UObject* WorldContextObject, const class FString& EvtName, const class FString& InEventRank, const struct FAtlEvtPlayParameter& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "EvtPlay");

	Params::AtlEvtSubsystem_EvtPlay Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EvtName = std::move(EvtName);
	Parms.InEventRank = std::move(InEventRank);
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.InitScriptFinishFunction
// (Final, Native, Private)
// Parameters:
// int32                                   ExitType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::InitScriptFinishFunction(int32 ExitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "InitScriptFinishFunction");

	Params::AtlEvtSubsystem_InitScriptFinishFunction Parms{};

	Parms.ExitType = ExitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.IsConditionalBranchFromLocalData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EEvtConditionalBranchCompType           CompType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LHS                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtlEvtSubsystem::IsConditionalBranchFromLocalData(EEvtConditionalBranchCompType CompType, int32 LHS, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "IsConditionalBranchFromLocalData");

	Params::AtlEvtSubsystem_IsConditionalBranchFromLocalData Parms{};

	Parms.CompType = CompType;
	Parms.LHS = LHS;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.MakeFieldSublevelPathList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAtlEvtEventCategoryType                CategoryType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayParameter             Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UAtlEvtSubsystem::MakeFieldSublevelPathList(const class UObject* WorldContextObject, EAtlEvtEventCategoryType CategoryType, int32 EventMajorID, int32 EventMinorID, const struct FAtlEvtPlayParameter& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "MakeFieldSublevelPathList");

	Params::AtlEvtSubsystem_MakeFieldSublevelPathList Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CategoryType = CategoryType;
	Parms.EventMajorID = EventMajorID;
	Parms.EventMinorID = EventMinorID;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.MakeFieldSublevelPathListCmmu
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayParameter             Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UAtlEvtSubsystem::MakeFieldSublevelPathListCmmu(const class UObject* WorldContextObject, int32 EventMajorID, int32 EventMinorID, const struct FAtlEvtPlayParameter& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "MakeFieldSublevelPathListCmmu");

	Params::AtlEvtSubsystem_MakeFieldSublevelPathListCmmu Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EventMajorID = EventMajorID;
	Parms.EventMinorID = EventMinorID;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.MakeFieldSublevelPathListEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayParameter             Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UAtlEvtSubsystem::MakeFieldSublevelPathListEvent(const class UObject* WorldContextObject, int32 EventMajorID, int32 EventMinorID, const struct FAtlEvtPlayParameter& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "MakeFieldSublevelPathListEvent");

	Params::AtlEvtSubsystem_MakeFieldSublevelPathListEvent Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EventMajorID = EventMajorID;
	Parms.EventMinorID = EventMinorID;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.MakeFieldSublevelPathListField
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayParameter             Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UAtlEvtSubsystem::MakeFieldSublevelPathListField(const class UObject* WorldContextObject, int32 EventMajorID, int32 EventMinorID, const struct FAtlEvtPlayParameter& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "MakeFieldSublevelPathListField");

	Params::AtlEvtSubsystem_MakeFieldSublevelPathListField Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EventMajorID = EventMajorID;
	Parms.EventMinorID = EventMinorID;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.OnActorSpawnedEventSublevel
// (Final, Native, Private)
// Parameters:
// class AActor*                           SpawnedActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::OnActorSpawnedEventSublevel(class AActor* SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "OnActorSpawnedEventSublevel");

	Params::AtlEvtSubsystem_OnActorSpawnedEventSublevel Parms{};

	Parms.SpawnedActor = SpawnedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.ResetLocalData
// (Final, Native, Public)

void UAtlEvtSubsystem::ResetLocalData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "ResetLocalData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.SetEventPlayMode
// (Final, Native, Public)
// Parameters:
// EAtlEvtPlayMode                         InPlayMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::SetEventPlayMode(EAtlEvtPlayMode InPlayMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "SetEventPlayMode");

	Params::AtlEvtSubsystem_SetEventPlayMode Parms{};

	Parms.InPlayMode = InPlayMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.SetLocalData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::SetLocalData(int32 Index_0, int32 Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "SetLocalData");

	Params::AtlEvtSubsystem_SetLocalData Parms{};

	Parms.Index_0 = Index_0;
	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.SetShowCinemaScope
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShow                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::SetShowCinemaScope(bool bShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "SetShowCinemaScope");

	Params::AtlEvtSubsystem_SetShowCinemaScope Parms{};

	Parms.bShow = bShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.TransitionLightScenarioSublevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NextLightScenarioIndex                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlEvtSubsystem::TransitionLightScenarioSublevel(int32 NextLightScenarioIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "TransitionLightScenarioSublevel");

	Params::AtlEvtSubsystem_TransitionLightScenarioSublevel Parms{};

	Parms.NextLightScenarioIndex = NextLightScenarioIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystem.CallEvent_IsCompleteFieldLoadingSublevel
// (Final, Native, Protected, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtlEvtSubsystem::CallEvent_IsCompleteFieldLoadingSublevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "CallEvent_IsCompleteFieldLoadingSublevel");

	Params::AtlEvtSubsystem_CallEvent_IsCompleteFieldLoadingSublevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.GetAppEventCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAppCharCategoryType                    CharcterCategoryType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayingCharacterInfo      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtlEvtPlayingCharacterInfo UAtlEvtSubsystem::GetAppEventCharacter(EAppCharCategoryType CharcterCategoryType, int32 CharaIndexID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "GetAppEventCharacter");

	Params::AtlEvtSubsystem_GetAppEventCharacter Parms{};

	Parms.CharcterCategoryType = CharcterCategoryType;
	Parms.CharaIndexID = CharaIndexID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.GetAppEvtCharactersHash
// (Final, Native, Public, Const)
// Parameters:
// EAppCharCategoryType                    CharcterCategoryType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint32 UAtlEvtSubsystem::GetAppEvtCharactersHash(EAppCharCategoryType CharcterCategoryType, int32 CharaIndexID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "GetAppEvtCharactersHash");

	Params::AtlEvtSubsystem_GetAppEvtCharactersHash Parms{};

	Parms.CharcterCategoryType = CharcterCategoryType;
	Parms.CharaIndexID = CharaIndexID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.GetEventPlayMode
// (Final, Native, Public, Const)
// Parameters:
// EAtlEvtPlayMode                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EAtlEvtPlayMode UAtlEvtSubsystem::GetEventPlayMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "GetEventPlayMode");

	Params::AtlEvtSubsystem_GetEventPlayMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.GetEvtPreData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAtlEvtEventCategoryType                CategoryType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPreData                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtlEvtPreData UAtlEvtSubsystem::GetEvtPreData(EAtlEvtEventCategoryType CategoryType, int32 EventMajorID, int32 EventMinorID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "GetEvtPreData");

	Params::AtlEvtSubsystem_GetEvtPreData Parms{};

	Parms.CategoryType = CategoryType;
	Parms.EventMajorID = EventMajorID;
	Parms.EventMinorID = EventMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.GetEvtPreDataHash
// (Final, Native, Private, Const)
// Parameters:
// EAtlEvtEventCategoryType                CategoryType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint32                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint32 UAtlEvtSubsystem::GetEvtPreDataHash(EAtlEvtEventCategoryType CategoryType, int32 EventMajorID, int32 EventMinorID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "GetEvtPreDataHash");

	Params::AtlEvtSubsystem_GetEvtPreDataHash Parms{};

	Parms.CategoryType = CategoryType;
	Parms.EventMajorID = EventMajorID;
	Parms.EventMinorID = EventMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.GetFirstAppEventCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EAppCharCategoryType                    CharcterCategoryType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UAtlEvtSubsystem::GetFirstAppEventCharacter(EAppCharCategoryType CharcterCategoryType, int32 CharaIndexID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "GetFirstAppEventCharacter");

	Params::AtlEvtSubsystem_GetFirstAppEventCharacter Parms{};

	Parms.CharcterCategoryType = CharcterCategoryType;
	Parms.CharaIndexID = CharaIndexID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.GetFirstAppEventCharacterByLipUniqueID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   LipUniqueID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UAtlEvtSubsystem::GetFirstAppEventCharacterByLipUniqueID(int32 LipUniqueID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "GetFirstAppEventCharacterByLipUniqueID");

	Params::AtlEvtSubsystem_GetFirstAppEventCharacterByLipUniqueID Parms{};

	Parms.LipUniqueID = LipUniqueID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.GetLoadedEventSublevelInfos
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FAtlEvtPlayLoadSublevelInfo>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FAtlEvtPlayLoadSublevelInfo> UAtlEvtSubsystem::GetLoadedEventSublevelInfos() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "GetLoadedEventSublevelInfos");

	Params::AtlEvtSubsystem_GetLoadedEventSublevelInfos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.GetLocalData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UAtlEvtSubsystem::GetLocalData(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "GetLocalData");

	Params::AtlEvtSubsystem_GetLocalData Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.GetPlayingVisibleEventInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtVisibleEventInfo          ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAtlEvtVisibleEventInfo UAtlEvtSubsystem::GetPlayingVisibleEventInfo(const class UObject* WorldContextObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "GetPlayingVisibleEventInfo");

	Params::AtlEvtSubsystem_GetPlayingVisibleEventInfo Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.IsDoingTransitionLightScenarioSublevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtlEvtSubsystem::IsDoingTransitionLightScenarioSublevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "IsDoingTransitionLightScenarioSublevel");

	Params::AtlEvtSubsystem_IsDoingTransitionLightScenarioSublevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.IsEventPlayModeEditHelper
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtlEvtSubsystem::IsEventPlayModeEditHelper() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "IsEventPlayModeEditHelper");

	Params::AtlEvtSubsystem_IsEventPlayModeEditHelper Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.IsFinishedPreloadLightScenarioSublevels
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtlEvtSubsystem::IsFinishedPreloadLightScenarioSublevels() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "IsFinishedPreloadLightScenarioSublevels");

	Params::AtlEvtSubsystem_IsFinishedPreloadLightScenarioSublevels Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.IsHighSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtlEvtSubsystem::IsHighSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "IsHighSpeed");

	Params::AtlEvtSubsystem_IsHighSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.IsPlayingEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtlEvtSubsystem::IsPlayingEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "IsPlayingEvent");

	Params::AtlEvtSubsystem_IsPlayingEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.IsPlayingEventOrEditHelperMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtlEvtSubsystem::IsPlayingEventOrEditHelperMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "IsPlayingEventOrEditHelperMode");

	Params::AtlEvtSubsystem_IsPlayingEventOrEditHelperMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtSubsystem.IsShowCinemaScope
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UAtlEvtSubsystem::IsShowCinemaScope() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystem", "IsShowCinemaScope");

	Params::AtlEvtSubsystem_IsShowCinemaScope Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.ConvFrameToTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InFrame                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AUINameEntryDraw::ConvFrameToTime(int32 InFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "ConvFrameToTime");

	Params::UINameEntryDraw_ConvFrameToTime Parms{};

	Parms.InFrame = InFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.DrawBlueLight
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUINameEntryDraw::DrawBlueLight(const struct FVector2D& InPos, const struct FColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "DrawBlueLight");

	Params::UINameEntryDraw_DrawBlueLight Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UINameEntryDraw.DrawCursor1
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUINameEntryDraw::DrawCursor1(const struct FVector2D& InPos, const struct FColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "DrawCursor1");

	Params::UINameEntryDraw_DrawCursor1 Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UINameEntryDraw.DrawGradationScreen
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUINameEntryDraw::DrawGradationScreen(const struct FVector2D& InPos, const struct FColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "DrawGradationScreen");

	Params::UINameEntryDraw_DrawGradationScreen Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UINameEntryDraw.DrawName1Text
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColorDown                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColorUp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUINameEntryDraw::DrawName1Text(const struct FVector2D& InPos, const struct FColor& InColor, const struct FColor& InColorDown, const struct FColor& InColorUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "DrawName1Text");

	Params::UINameEntryDraw_DrawName1Text Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.InColorDown = std::move(InColorDown);
	Parms.InColorUp = std::move(InColorUp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UINameEntryDraw.DrawName2Text
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColorDown                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColorUp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUINameEntryDraw::DrawName2Text(const struct FVector2D& InPos, const struct FColor& InColor, const struct FColor& InColorDown, const struct FColor& InColorUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "DrawName2Text");

	Params::UINameEntryDraw_DrawName2Text Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.InColorDown = std::move(InColorDown);
	Parms.InColorUp = std::move(InColorUp);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UINameEntryDraw.DrawOptions
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUINameEntryDraw::DrawOptions(const struct FVector2D& InPos, const struct FColor& InColor, const struct FVector2D& Scale, float Angle, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "DrawOptions");

	Params::UINameEntryDraw_DrawOptions Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Scale = std::move(Scale);
	Parms.Angle = Angle;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UINameEntryDraw.DrawOptionsBase
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUINameEntryDraw::DrawOptionsBase(const struct FVector2D& InPos, const struct FColor& InColor, const struct FVector2D& Scale, float Angle, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "DrawOptionsBase");

	Params::UINameEntryDraw_DrawOptionsBase Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Scale = std::move(Scale);
	Parms.Angle = Angle;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UINameEntryDraw.DrawTranslation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUINameEntryDraw::DrawTranslation(const struct FVector2D& InPos, const struct FColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "DrawTranslation");

	Params::UINameEntryDraw_DrawTranslation Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UINameEntryDraw.GetAdjustedLayoutPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EUINameEntryLayout                      InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InDefaultPos                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AUINameEntryDraw::GetAdjustedLayoutPosition(EUINameEntryLayout InLayoutId, const struct FVector2D& InDefaultPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "GetAdjustedLayoutPosition");

	Params::UINameEntryDraw_GetAdjustedLayoutPosition Parms{};

	Parms.InLayoutId = InLayoutId;
	Parms.InDefaultPos = std::move(InDefaultPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.GetAdjustedLayoutScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EUINameEntryLayout                      InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InDefaultScale                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AUINameEntryDraw::GetAdjustedLayoutScale(EUINameEntryLayout InLayoutId, const struct FVector2D& InDefaultScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "GetAdjustedLayoutScale");

	Params::UINameEntryDraw_GetAdjustedLayoutScale Parms{};

	Parms.InLayoutId = InLayoutId;
	Parms.InDefaultScale = std::move(InDefaultScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.InitDraw_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::InitDraw_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "InitDraw_IN");

	Params::UINameEntryDraw_InitDraw_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.InitDraw_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::InitDraw_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "InitDraw_Out");

	Params::UINameEntryDraw_InitDraw_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.IsAllNameEntered
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::IsAllNameEntered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "IsAllNameEntered");

	Params::UINameEntryDraw_IsAllNameEntered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.IsCursorName1Use
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::IsCursorName1Use()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "IsCursorName1Use");

	Params::UINameEntryDraw_IsCursorName1Use Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.IsCursorName2Use
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::IsCursorName2Use()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "IsCursorName2Use");

	Params::UINameEntryDraw_IsCursorName2Use Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.IsCursorPreName1Use
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::IsCursorPreName1Use()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "IsCursorPreName1Use");

	Params::UINameEntryDraw_IsCursorPreName1Use Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.IsCursorPreName2Use
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::IsCursorPreName2Use()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "IsCursorPreName2Use");

	Params::UINameEntryDraw_IsCursorPreName2Use Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.IsEnableOption
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::IsEnableOption()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "IsEnableOption");

	Params::UINameEntryDraw_IsEnableOption Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.IsIsDeterminedByCross
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::IsIsDeterminedByCross()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "IsIsDeterminedByCross");

	Params::UINameEntryDraw_IsIsDeterminedByCross Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.IsKeyHelpGray
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::IsKeyHelpGray()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "IsKeyHelpGray");

	Params::UINameEntryDraw_IsKeyHelpGray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.IsName1Entered
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::IsName1Entered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "IsName1Entered");

	Params::UINameEntryDraw_IsName1Entered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.IsName1TypingOnKeyboard
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::IsName1TypingOnKeyboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "IsName1TypingOnKeyboard");

	Params::UINameEntryDraw_IsName1TypingOnKeyboard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.IsName2Entered
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::IsName2Entered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "IsName2Entered");

	Params::UINameEntryDraw_IsName2Entered Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.IsName2TypingOnKeyboard
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::IsName2TypingOnKeyboard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "IsName2TypingOnKeyboard");

	Params::UINameEntryDraw_IsName2TypingOnKeyboard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.KeyHelpIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::KeyHelpIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "KeyHelpIn");

	Params::UINameEntryDraw_KeyHelpIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.KeyHelpOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::KeyHelpOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "KeyHelpOut");

	Params::UINameEntryDraw_KeyHelpOut Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.OneTimeLockInput
// (Final, Native, Public, BlueprintCallable)

void AUINameEntryDraw::OneTimeLockInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "OneTimeLockInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UINameEntryDraw.PlaySENameEntry
// (Final, Native, Public, BlueprintCallable)

void AUINameEntryDraw::PlaySENameEntry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "PlaySENameEntry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UINameEntryDraw.ResetDraw
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::ResetDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "ResetDraw");

	Params::UINameEntryDraw_ResetDraw Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.SetDicitionTouchCollision
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InDicitionPos                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OptionScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        DicitionScale                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUINameEntryDraw::SetDicitionTouchCollision(const struct FVector2D& InDicitionPos, const struct FVector2D& OptionScale, const struct FVector2D& DicitionScale, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "SetDicitionTouchCollision");

	Params::UINameEntryDraw_SetDicitionTouchCollision Parms{};

	Parms.InDicitionPos = std::move(InDicitionPos);
	Parms.OptionScale = std::move(OptionScale);
	Parms.DicitionScale = std::move(DicitionScale);
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UINameEntryDraw.SetNameTouchCollision
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InName1Pos                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InName2Pos                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUINameEntryDraw::SetNameTouchCollision(const struct FVector2D& InName1Pos, const struct FVector2D& InName2Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "SetNameTouchCollision");

	Params::UINameEntryDraw_SetNameTouchCollision Parms{};

	Parms.InName1Pos = std::move(InName1Pos);
	Parms.InName2Pos = std::move(InName2Pos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UINameEntryDraw.StateDraw_BG
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::StateDraw_BG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "StateDraw_BG");

	Params::UINameEntryDraw_StateDraw_BG Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.StateDraw_Frame
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::StateDraw_Frame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "StateDraw_Frame");

	Params::UINameEntryDraw_StateDraw_Frame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.StateDraw_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::StateDraw_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "StateDraw_IN");

	Params::UINameEntryDraw_StateDraw_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.StateDraw_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::StateDraw_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "StateDraw_Out");

	Params::UINameEntryDraw_StateDraw_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UINameEntryDraw.TimeWithinRangeFrame
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   NowTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUINameEntryDraw::TimeWithinRangeFrame(float NowTime, int32 StartFrame, int32 EndFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UINameEntryDraw", "TimeWithinRangeFrame");

	Params::UINameEntryDraw_TimeWithinRangeFrame Parms{};

	Parms.NowTime = NowTime;
	Parms.StartFrame = StartFrame;
	Parms.EndFrame = EndFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlEvtPlayObject.OnFinishedEventSequencer
// (Final, Native, Public)

void AAtlEvtPlayObject::OnFinishedEventSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayObject", "OnFinishedEventSequencer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtPlayObject.OnFinishedSceneChange
// (Final, Native, Public)

void AAtlEvtPlayObject::OnFinishedSceneChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayObject", "OnFinishedSceneChange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtPlayObject.OnLoadedMovieTrack
// (Final, Native, Public)

void AAtlEvtPlayObject::OnLoadedMovieTrack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayObject", "OnLoadedMovieTrack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtPlayObject.OnLoadedReplaceCharacters
// (Final, Native, Public)

void AAtlEvtPlayObject::OnLoadedReplaceCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayObject", "OnLoadedReplaceCharacters");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtPlayObject.OnLoadedReplaceCharactersCostume
// (Final, Native, Public)

void AAtlEvtPlayObject::OnLoadedReplaceCharactersCostume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayObject", "OnLoadedReplaceCharactersCostume");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtPlayObject.OnLoadEvtLevelSequence
// (Final, Native, Public)

void AAtlEvtPlayObject::OnLoadEvtLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayObject", "OnLoadEvtLevelSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtPlayObject.OnLoadFieldLevelStreaming
// (Final, Native, Public)

void AAtlEvtPlayObject::OnLoadFieldLevelStreaming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayObject", "OnLoadFieldLevelStreaming");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtPlayObject.OnLoadFieldLevelStreaming_DelayCompleted
// (Final, Native, Public)

void AAtlEvtPlayObject::OnLoadFieldLevelStreaming_DelayCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayObject", "OnLoadFieldLevelStreaming_DelayCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtPlayObject.OnLoadFieldLevelStreaming_WaitUnpaused
// (Final, Native, Public)

void AAtlEvtPlayObject::OnLoadFieldLevelStreaming_WaitUnpaused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayObject", "OnLoadFieldLevelStreaming_WaitUnpaused");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtPlayObject.OnLoadLevelStreaming
// (Final, Native, Public)

void AAtlEvtPlayObject::OnLoadLevelStreaming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayObject", "OnLoadLevelStreaming");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtPlayObject.OnPlayEventSequencer
// (Final, Native, Public)

void AAtlEvtPlayObject::OnPlayEventSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayObject", "OnPlayEventSequencer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtPlayUnstreamObject.OnFinishedUnloadLevelStreaming
// (Final, Native, Public)

void AAtlEvtPlayUnstreamObject::OnFinishedUnloadLevelStreaming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayUnstreamObject", "OnFinishedUnloadLevelStreaming");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystemDraft.EvtPlay
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EvtName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayParameter             Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UAtlEvtSubsystemDraft::EvtPlay(const class UObject* WorldContextObject, const class FString& EvtName, const struct FAtlEvtPlayParameter& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystemDraft", "EvtPlay");

	Params::AtlEvtSubsystemDraft_EvtPlay Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EvtName = std::move(EvtName);
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtSubsystemDraft.ResetGlobalCount
// (Final, Native, Public, BlueprintCallable)

void UAtlEvtSubsystemDraft::ResetGlobalCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtSubsystemDraft", "ResetGlobalCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlUITextBlock.GetDynamicFontMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UAtlUITextBlock::GetDynamicFontMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "GetDynamicFontMaterial");

	Params::AtlUITextBlock_GetDynamicFontMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlUITextBlock.GetDynamicOutlineMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UAtlUITextBlock::GetDynamicOutlineMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "GetDynamicOutlineMaterial");

	Params::AtlUITextBlock_GetDynamicOutlineMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AtlUITextBlock.SetAutoWrapText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InAutoTextWrap                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlUITextBlock::SetAutoWrapText(bool InAutoTextWrap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "SetAutoWrapText");

	Params::AtlUITextBlock_SetAutoWrapText Parms{};

	Parms.InAutoTextWrap = InAutoTextWrap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlUITextBlock.SetColorAndOpacity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateColor                      InColorAndOpacity                                      (Parm, NativeAccessSpecifierPublic)

void UAtlUITextBlock::SetColorAndOpacity(const struct FSlateColor& InColorAndOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "SetColorAndOpacity");

	Params::AtlUITextBlock_SetColorAndOpacity Parms{};

	Parms.InColorAndOpacity = std::move(InColorAndOpacity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlUITextBlock.SetFont
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateFontInfo                   InFontInfo                                             (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlUITextBlock::SetFont(const struct FSlateFontInfo& InFontInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "SetFont");

	Params::AtlUITextBlock_SetFont Parms{};

	Parms.InFontInfo = std::move(InFontInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlUITextBlock.SetMinDesiredWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMinDesiredWidth                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlUITextBlock::SetMinDesiredWidth(float InMinDesiredWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "SetMinDesiredWidth");

	Params::AtlUITextBlock_SetMinDesiredWidth Parms{};

	Parms.InMinDesiredWidth = InMinDesiredWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlUITextBlock.SetOpacity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InOpacity                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlUITextBlock::SetOpacity(float InOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "SetOpacity");

	Params::AtlUITextBlock_SetOpacity Parms{};

	Parms.InOpacity = InOpacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlUITextBlock.SetShadowColorAndOpacity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FLinearColor                     InShadowColorAndOpacity                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlUITextBlock::SetShadowColorAndOpacity(const struct FLinearColor& InShadowColorAndOpacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "SetShadowColorAndOpacity");

	Params::AtlUITextBlock_SetShadowColorAndOpacity Parms{};

	Parms.InShadowColorAndOpacity = std::move(InShadowColorAndOpacity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlUITextBlock.SetShadowOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InShadowOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlUITextBlock::SetShadowOffset(const struct FVector2D& InShadowOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "SetShadowOffset");

	Params::AtlUITextBlock_SetShadowOffset Parms{};

	Parms.InShadowOffset = std::move(InShadowOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlUITextBlock.SetStrikeBrush
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FSlateBrush                      InStrikeBrush                                          (Parm, NativeAccessSpecifierPublic)

void UAtlUITextBlock::SetStrikeBrush(const struct FSlateBrush& InStrikeBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "SetStrikeBrush");

	Params::AtlUITextBlock_SetStrikeBrush Parms{};

	Parms.InStrikeBrush = std::move(InStrikeBrush);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlUITextBlock.SetText
// (Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InText                                                 (Parm, NativeAccessSpecifierPublic)

void UAtlUITextBlock::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "SetText");

	Params::AtlUITextBlock_SetText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlUITextBlock.SetTextTransformPolicy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETextTransformPolicy                    InTransformPolicy                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAtlUITextBlock::SetTextTransformPolicy(ETextTransformPolicy InTransformPolicy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "SetTextTransformPolicy");

	Params::AtlUITextBlock_SetTextTransformPolicy Parms{};

	Parms.InTransformPolicy = InTransformPolicy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlUITextBlock.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UAtlUITextBlock::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlUITextBlock", "GetText");

	Params::AtlUITextBlock_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldHitCore.CleanupRequest
// (Final, Native, Public)

void AFldHitCore::CleanupRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitCore", "CleanupRequest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldHitCore.OnActorOverlapBegin
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFldHitCore::OnActorOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitCore", "OnActorOverlapBegin");

	Params::FldHitCore_OnActorOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldHitCore.OnActorOverlapEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldHitCore::OnActorOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitCore", "OnActorOverlapEnd");

	Params::FldHitCore_OnActorOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldHitCore.RequestKeyPushBluePrint
// (Final, Native, Public)

void AFldHitCore::RequestKeyPushBluePrint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitCore", "RequestKeyPushBluePrint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFL_UIPaint.DrawTest
// (Final, Native, Static, Private, BlueprintCallable)

void UBFL_UIPaint::DrawTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFL_UIPaint", "DrawTest");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLAtlEvtCharacter.ConstructCostume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ACharacterBaseCore*               CharacterBaseCore                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAppCharCategoryType                    AppCharaCategory                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AppCharaIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AppCharaCostumeIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLAtlEvtCharacter::ConstructCostume(class ACharacterBaseCore* CharacterBaseCore, EAppCharCategoryType AppCharaCategory, int32 AppCharaIndex, int32 AppCharaCostumeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLAtlEvtCharacter", "ConstructCostume");

	Params::BFLAtlEvtCharacter_ConstructCostume Parms{};

	Parms.CharacterBaseCore = CharacterBaseCore;
	Parms.AppCharaCategory = AppCharaCategory;
	Parms.AppCharaIndex = AppCharaIndex;
	Parms.AppCharaCostumeIndex = AppCharaCostumeIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLAtlEvtCharacter.ConstructNPCCostume
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ANpcBaseCore*                     NpcBaseCore                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AppNpcCharaCostumeIndex                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NpcIndexId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   HairId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FaceID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLAtlEvtCharacter::ConstructNPCCostume(class ANpcBaseCore* NpcBaseCore, int32 AppNpcCharaCostumeIndex, int32 NpcIndexId, int32 HairId, int32 FaceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLAtlEvtCharacter", "ConstructNPCCostume");

	Params::BFLAtlEvtCharacter_ConstructNPCCostume Parms{};

	Parms.NpcBaseCore = NpcBaseCore;
	Parms.AppNpcCharaCostumeIndex = AppNpcCharaCostumeIndex;
	Parms.NpcIndexId = NpcIndexId;
	Parms.HairId = HairId;
	Parms.FaceID = FaceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLAtlEvtCharacter.KoromaruAdjust
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           KoromaruActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLAtlEvtCharacter::KoromaruAdjust(class AActor* KoromaruActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLAtlEvtCharacter", "KoromaruAdjust");

	Params::BFLAtlEvtCharacter_KoromaruAdjust Parms{};

	Parms.KoromaruActor = KoromaruActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLAtlEvtCharacter.PersonaCombineAdjust
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           PersonaActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLAtlEvtCharacter::PersonaCombineAdjust(class AActor* PersonaActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLAtlEvtCharacter", "PersonaCombineAdjust");

	Params::BFLAtlEvtCharacter_PersonaCombineAdjust Parms{};

	Parms.PersonaActor = PersonaActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLAtlEvtCharacter.TickLookAtEditorOnly
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowDebugLookAtTargetLocation                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          LookAtFinalLocation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLAtlEvtCharacter::TickLookAtEditorOnly(class ACharacter* Character, bool bShowDebugLookAtTargetLocation, const struct FVector& LookAtFinalLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLAtlEvtCharacter", "TickLookAtEditorOnly");

	Params::BFLAtlEvtCharacter_TickLookAtEditorOnly Parms{};

	Parms.Character = Character;
	Parms.bShowDebugLookAtTargetLocation = bShowDebugLookAtTargetLocation;
	Parms.LookAtFinalLocation = std::move(LookAtFinalLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UtlBpObjCore.CallOpenLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUtlBpObjCore::CallOpenLevel(class FName LevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObjCore", "CallOpenLevel");

	Params::UtlBpObjCore_CallOpenLevel Parms{};

	Parms.LevelName = LevelName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UtlBpObjCore.LoadLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UUtlBpObjCore::LoadLevel(class FName LevelName, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObjCore", "LoadLevel");

	Params::UtlBpObjCore_LoadLevel Parms{};

	Parms.LevelName = LevelName;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UtlBpObjCore.Return
// (Final, Native, Public, BlueprintCallable)

void UUtlBpObjCore::Return()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObjCore", "Return");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UtlBpObjCore.ReturnField
// (Final, Native, Public, BlueprintCallable)

void UUtlBpObjCore::ReturnField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObjCore", "ReturnField");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UtlBpObjCore.StartProc
// (Event, Public, BlueprintEvent)

void UUtlBpObjCore::StartProc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObjCore", "StartProc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UtlBpObjCore.UnloadLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UUtlBpObjCore::UnloadLevel(class FName LevelName, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObjCore", "UnloadLevel");

	Params::UtlBpObjCore_UnloadLevel Parms{};

	Parms.LevelName = LevelName;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UtlBpObj.StartFadeIN
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Frame                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUtlBpObj::StartFadeIN(int32 Type, int32 Frame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObj", "StartFadeIN");

	Params::UtlBpObj_StartFadeIN Parms{};

	Parms.Type = Type;
	Parms.Frame = Frame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UtlBpObj.StartFadeOUT
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Frame                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUtlBpObj::StartFadeOUT(int32 Type, int32 Frame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObj", "StartFadeOUT");

	Params::UtlBpObj_StartFadeOUT Parms{};

	Parms.Type = Type;
	Parms.Frame = Frame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UtlBpObj.StartScript
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UBfAsset>          InAsset                                                (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ProcNo                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUtlBpObj::StartScript(TSoftObjectPtr<class UBfAsset> InAsset, int32 ProcNo, const struct FLatentActionInfo& LatentInfo, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObj", "StartScript");

	Params::UtlBpObj_StartScript Parms{};

	Parms.InAsset = InAsset;
	Parms.ProcNo = ProcNo;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function xrd777.UtlBpObj.SyncFade
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UUtlBpObj::SyncFade(int32 Type, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObj", "SyncFade");

	Params::UtlBpObj_SyncFade Parms{};

	Parms.Type = Type;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CldSchedulerBpObject.AfterSchool
// (Event, Protected, BlueprintEvent)

void UCldSchedulerBpObject::AfterSchool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerBpObject", "AfterSchool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerBpObject.AM
// (Event, Protected, BlueprintEvent)

void UCldSchedulerBpObject::AM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerBpObject", "AM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerBpObject.CallNextTime
// (Final, Native, Public, BlueprintCallable)

void UCldSchedulerBpObject::CallNextTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerBpObject", "CallNextTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CldSchedulerBpObject.EarlyMorning
// (Event, Protected, BlueprintEvent)

void UCldSchedulerBpObject::EarlyMorning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerBpObject", "EarlyMorning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerBpObject.Midnight
// (Event, Protected, BlueprintEvent)

void UCldSchedulerBpObject::Midnight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerBpObject", "Midnight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerBpObject.Morning
// (Event, Protected, BlueprintEvent)

void UCldSchedulerBpObject::Morning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerBpObject", "Morning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerBpObject.Night
// (Event, Protected, BlueprintEvent)

void UCldSchedulerBpObject::Night()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerBpObject", "Night");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerBpObject.Noon
// (Event, Protected, BlueprintEvent)

void UCldSchedulerBpObject::Noon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerBpObject", "Noon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerBpObject.PM
// (Event, Protected, BlueprintEvent)

void UCldSchedulerBpObject::PM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerBpObject", "PM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerBpObject.Shadow
// (Event, Protected, BlueprintEvent)

void UCldSchedulerBpObject::Shadow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerBpObject", "Shadow");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BFLAtlEvtHandwriting.MakeHandwritingTypeAssetPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EAtlEvtHandwritingType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UBFLAtlEvtHandwriting::MakeHandwritingTypeAssetPath(EAtlEvtHandwritingType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLAtlEvtHandwriting", "MakeHandwritingTypeAssetPath");

	Params::BFLAtlEvtHandwriting_MakeHandwritingTypeAssetPath Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLAtlEvtHandwriting.MakeHandwritingTypeCharaParamAssetPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EAtlEvtHandwritingType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAppCharCategoryType                    CharacterTypeCategoryType                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UBFLAtlEvtHandwriting::MakeHandwritingTypeCharaParamAssetPath(EAtlEvtHandwritingType Type, EAppCharCategoryType CharacterTypeCategoryType, int32 CharaIndexID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLAtlEvtHandwriting", "MakeHandwritingTypeCharaParamAssetPath");

	Params::BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath Parms{};

	Parms.Type = Type;
	Parms.CharacterTypeCategoryType = CharacterTypeCategoryType;
	Parms.CharaIndexID = CharaIndexID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLAtlEvtHandwriting.MakeHandwritingTypeDefaultParamAssetPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EAtlEvtHandwritingType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UBFLAtlEvtHandwriting::MakeHandwritingTypeDefaultParamAssetPath(EAtlEvtHandwritingType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLAtlEvtHandwriting", "MakeHandwritingTypeDefaultParamAssetPath");

	Params::BFLAtlEvtHandwriting_MakeHandwritingTypeDefaultParamAssetPath Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLAtlEvtHandwriting.MakeHandwritingTypeName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EAtlEvtHandwritingType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UBFLAtlEvtHandwriting::MakeHandwritingTypeName(EAtlEvtHandwritingType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLAtlEvtHandwriting", "MakeHandwritingTypeName");

	Params::BFLAtlEvtHandwriting_MakeHandwritingTypeName Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLAtlEvtHandwriting.SpawnHandwritingAtLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAtlEvtHandwritingType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CameraOffset                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoActivate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENCPoolMethod                           PoolingMethod                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPreCullCheck                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraComponent* UBFLAtlEvtHandwriting::SpawnHandwritingAtLocation(const class UObject* WorldContextObject, EAtlEvtHandwritingType Type, int32 LoopCount, float CameraOffset, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, bool bAutoActivate, ENCPoolMethod PoolingMethod, bool bPreCullCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLAtlEvtHandwriting", "SpawnHandwritingAtLocation");

	Params::BFLAtlEvtHandwriting_SpawnHandwritingAtLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Type = Type;
	Parms.LoopCount = LoopCount;
	Parms.CameraOffset = CameraOffset;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.bAutoDestroy = bAutoDestroy;
	Parms.bAutoActivate = bAutoActivate;
	Parms.PoolingMethod = PoolingMethod;
	Parms.bPreCullCheck = bPreCullCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLAtlEvtHandwriting.SpawnHandwritingAttached
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// EAtlEvtHandwritingType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CameraOffset                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       AttachToCharacter                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAttachLocation                         LocationType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoActivate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ENCPoolMethod                           PoolingMethod                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPreCullCheck                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraComponent* UBFLAtlEvtHandwriting::SpawnHandwritingAttached(EAtlEvtHandwritingType Type, int32 LoopCount, float CameraOffset, class ACharacter* AttachToCharacter, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, EAttachLocation LocationType, bool bAutoDestroy, bool bAutoActivate, ENCPoolMethod PoolingMethod, bool bPreCullCheck)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLAtlEvtHandwriting", "SpawnHandwritingAttached");

	Params::BFLAtlEvtHandwriting_SpawnHandwritingAttached Parms{};

	Parms.Type = Type;
	Parms.LoopCount = LoopCount;
	Parms.CameraOffset = CameraOffset;
	Parms.AttachToCharacter = AttachToCharacter;
	Parms.AttachPointName = AttachPointName;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.LocationType = LocationType;
	Parms.bAutoDestroy = bAutoDestroy;
	Parms.bAutoActivate = bAutoActivate;
	Parms.PoolingMethod = PoolingMethod;
	Parms.bPreCullCheck = bPreCullCheck;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldAtomSound.CheckEnablePlay
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFldAtomSound::CheckEnablePlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAtomSound", "CheckEnablePlay");

	Params::FldAtomSound_CheckEnablePlay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldAtomSound.FadeInSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   FadeInDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldAtomSound::FadeInSound(float FadeInDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAtomSound", "FadeInSound");

	Params::FldAtomSound_FadeInSound Parms{};

	Parms.FadeInDuration = FadeInDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldAtomSound.FadeOutSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   FadeOutDuration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldAtomSound::FadeOutSound(float FadeOutDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAtomSound", "FadeOutSound");

	Params::FldAtomSound_FadeOutSound Parms{};

	Parms.FadeOutDuration = FadeOutDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldAtomSound.PlaySound
// (Final, Native, Public, BlueprintCallable)

void AFldAtomSound::PlaySound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAtomSound", "PlaySound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldAtomSound.stopSound
// (Final, Native, Public, BlueprintCallable)

void AFldAtomSound::StopSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAtomSound", "stopSound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldAtomSound.stopSound_IMD
// (Final, Native, Public, BlueprintCallable)

void AFldAtomSound::StopSound_IMD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAtomSound", "stopSound_IMD");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.AtlEvtPlayOnBindingActorObject.OnLoadBindingLevelStreaming
// (Final, Native, Public)

void AAtlEvtPlayOnBindingActorObject::OnLoadBindingLevelStreaming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AtlEvtPlayOnBindingActorObject", "OnLoadBindingLevelStreaming");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLAtlEvtTest.EvtPlayOnBindingActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           EvtName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SublevelOnBindingActorName                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlEvtPlayParameter             Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBFLAtlEvtTest::EvtPlayOnBindingActor(const class UObject* WorldContextObject, const class FString& EvtName, const class FString& SublevelOnBindingActorName, const struct FAtlEvtPlayParameter& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLAtlEvtTest", "EvtPlayOnBindingActor");

	Params::BFLAtlEvtTest_EvtPlayOnBindingActor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EvtName = std::move(EvtName);
	Parms.SublevelOnBindingActorName = std::move(SublevelOnBindingActorName);
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UmgDialog.CalcScreenScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUmgDialog::CalcScreenScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UmgDialog", "CalcScreenScale");

	Params::UmgDialog_CalcScreenScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UmgDialog.IsChangeScreenSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUmgDialog::IsChangeScreenSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UmgDialog", "IsChangeScreenSize");

	Params::UmgDialog_IsChangeScreenSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UmgDialog.IsInputBlocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUmgDialog::IsInputBlocked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UmgDialog", "IsInputBlocked");

	Params::UmgDialog_IsInputBlocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UmgDialog.IsStreamingTouch
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUmgDialog::IsStreamingTouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UmgDialog", "IsStreamingTouch");

	Params::UmgDialog_IsStreamingTouch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UmgDialog.SetEndFlag
// (Final, Native, Public, BlueprintCallable)

void UUmgDialog::SetEndFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UmgDialog", "SetEndFlag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UmgDialog.SetText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUmgDialog::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UmgDialog", "SetText");

	Params::UmgDialog_SetText Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BFLBtlAnimation.CheckMontageSectionIsLoop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SectionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBFLBtlAnimation::CheckMontageSectionIsLoop(class UAnimMontage* AnimMontage, class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlAnimation", "CheckMontageSectionIsLoop");

	Params::BFLBtlAnimation_CheckMontageSectionIsLoop Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.SectionName = SectionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLBtlAnimation.CoordinateDefaultAnimPose
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           InSkeletalMeshComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequence*                    AnimSequence                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLBtlAnimation::CoordinateDefaultAnimPose(class USkeletalMeshComponent* InSkeletalMeshComponent, class UAnimSequence* AnimSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlAnimation", "CoordinateDefaultAnimPose");

	Params::BFLBtlAnimation_CoordinateDefaultAnimPose Parms{};

	Parms.InSkeletalMeshComponent = InSkeletalMeshComponent;
	Parms.AnimSequence = AnimSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLBtlAnimation.ForcePoseUpdate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMesh                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLBtlAnimation::ForcePoseUpdate(class USkeletalMeshComponent* SkeletalMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlAnimation", "ForcePoseUpdate");

	Params::BFLBtlAnimation_ForcePoseUpdate Parms{};

	Parms.SkeletalMesh = SkeletalMesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLBtlAnimation.GetCurrentSectionName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           InSkeletalMeshComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UBFLBtlAnimation::GetCurrentSectionName(class USkeletalMeshComponent* InSkeletalMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlAnimation", "GetCurrentSectionName");

	Params::BFLBtlAnimation_GetCurrentSectionName Parms{};

	Parms.InSkeletalMeshComponent = InSkeletalMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLBtlAnimation.GetMontageAlignedNextSectionName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SectionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NextSectionName                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBFLBtlAnimation::GetMontageAlignedNextSectionName(class UAnimMontage* AnimMontage, class FName SectionName, class FName* NextSectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlAnimation", "GetMontageAlignedNextSectionName");

	Params::BFLBtlAnimation_GetMontageAlignedNextSectionName Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.SectionName = SectionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NextSectionName != nullptr)
		*NextSectionName = Parms.NextSectionName;

	return Parms.ReturnValue;
}


// Function xrd777.BFLBtlAnimation.GetMontageNextSectionName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SectionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             NextSectionName                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBFLBtlAnimation::GetMontageNextSectionName(class UAnimMontage* AnimMontage, class FName SectionName, class FName* NextSectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlAnimation", "GetMontageNextSectionName");

	Params::BFLBtlAnimation_GetMontageNextSectionName Parms{};

	Parms.AnimMontage = AnimMontage;
	Parms.SectionName = SectionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NextSectionName != nullptr)
		*NextSectionName = Parms.NextSectionName;

	return Parms.ReturnValue;
}


// Function xrd777.BFLBtlAnimation.GetMontageSectionLength
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           InSkeletalMeshComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SectionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBFLBtlAnimation::GetMontageSectionLength(class USkeletalMeshComponent* InSkeletalMeshComponent, class UAnimMontage* AnimMontage, class FName SectionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlAnimation", "GetMontageSectionLength");

	Params::BFLBtlAnimation_GetMontageSectionLength Parms{};

	Parms.InSkeletalMeshComponent = InSkeletalMeshComponent;
	Parms.AnimMontage = AnimMontage;
	Parms.SectionName = SectionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLBtlAnimation.GetRemainingTimeFromCurrentSection
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           InSkeletalMeshComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     AnimMontage                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBFLBtlAnimation::GetRemainingTimeFromCurrentSection(class USkeletalMeshComponent* InSkeletalMeshComponent, class UAnimMontage* AnimMontage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlAnimation", "GetRemainingTimeFromCurrentSection");

	Params::BFLBtlAnimation_GetRemainingTimeFromCurrentSection Parms{};

	Parms.InSkeletalMeshComponent = InSkeletalMeshComponent;
	Parms.AnimMontage = AnimMontage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLBtlAnimation.SetMontageAnimationSpeed
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           InSkeletalMeshComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     MontageToPlay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLBtlAnimation::SetMontageAnimationSpeed(class USkeletalMeshComponent* InSkeletalMeshComponent, class UAnimMontage* MontageToPlay, float PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlAnimation", "SetMontageAnimationSpeed");

	Params::BFLBtlAnimation_SetMontageAnimationSpeed Parms{};

	Parms.InSkeletalMeshComponent = InSkeletalMeshComponent;
	Parms.MontageToPlay = MontageToPlay;
	Parms.PlayRate = PlayRate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLBtlAnimation.SetMontagePositionInSection
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           InSkeletalMeshComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     MontageToPlay                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SectionName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PositionInSection                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLBtlAnimation::SetMontagePositionInSection(class USkeletalMeshComponent* InSkeletalMeshComponent, class UAnimMontage* MontageToPlay, class FName SectionName, float PositionInSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlAnimation", "SetMontagePositionInSection");

	Params::BFLBtlAnimation_SetMontagePositionInSection Parms{};

	Parms.InSkeletalMeshComponent = InSkeletalMeshComponent;
	Parms.MontageToPlay = MontageToPlay;
	Parms.SectionName = SectionName;
	Parms.PositionInSection = PositionInSection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLBtlAnimation.StopMontageAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           InSkeletalMeshComponent                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLBtlAnimation::StopMontageAnimation(class USkeletalMeshComponent* InSkeletalMeshComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlAnimation", "StopMontageAnimation");

	Params::BFLBtlAnimation_StopMontageAnimation Parms{};

	Parms.InSkeletalMeshComponent = InSkeletalMeshComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLBtlManager.CheckBattleCoreLoaded
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBFLBtlManager::CheckBattleCoreLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlManager", "CheckBattleCoreLoaded");

	Params::BFLBtlManager_CheckBattleCoreLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLBtlManager.CheckBattleMainLoaded
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBFLBtlManager::CheckBattleMainLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlManager", "CheckBattleMainLoaded");

	Params::BFLBtlManager_CheckBattleMainLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLBtlManager.ClearBattleManagerSetupFlags
// (Final, Native, Static, Public, BlueprintCallable)

void UBFLBtlManager::ClearBattleManagerSetupFlags()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlManager", "ClearBattleManagerSetupFlags");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLBtlManager.MarkAsBattleCoreSetup
// (Final, Native, Static, Public, BlueprintCallable)

void UBFLBtlManager::MarkAsBattleCoreSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlManager", "MarkAsBattleCoreSetup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLBtlManager.MarkAsBattleMainSetup
// (Final, Native, Static, Public, BlueprintCallable)

void UBFLBtlManager::MarkAsBattleMainSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLBtlManager", "MarkAsBattleMainSetup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLEventMovieScene.AddPlayEvtMultiMontageAnimNotify
// (Final, Native, Static, Protected, HasOutParams)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     NewMontage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAtlSlotMultiAnimationParam>AnimAssets                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEvtCharaAnimationType                  EvtCharaAnimationType                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentMontageBlendOut                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NextMontageBlendIn                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UBFLEventMovieScene::AddPlayEvtMultiMontageAnimNotify(int32 Index_0, class UAnimMontage* NewMontage, const TArray<struct FAtlSlotMultiAnimationParam>& AnimAssets, class FName SlotNodeName, EEvtCharaAnimationType EvtCharaAnimationType, float CurrentMontageBlendOut, float NextMontageBlendIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "AddPlayEvtMultiMontageAnimNotify");

	Params::BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify Parms{};

	Parms.Index_0 = Index_0;
	Parms.NewMontage = NewMontage;
	Parms.AnimAssets = std::move(AnimAssets);
	Parms.SlotNodeName = SlotNodeName;
	Parms.EvtCharaAnimationType = EvtCharaAnimationType;
	Parms.CurrentMontageBlendOut = CurrentMontageBlendOut;
	Parms.NextMontageBlendIn = NextMontageBlendIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.AddViewSlaveLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BoostFactor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideLocation                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLEventMovieScene::AddViewSlaveLocation(const struct FVector& Location, float BoostFactor, bool bOverrideLocation, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "AddViewSlaveLocation");

	Params::BFLEventMovieScene_AddViewSlaveLocation Parms{};

	Parms.Location = std::move(Location);
	Parms.BoostFactor = BoostFactor;
	Parms.bOverrideLocation = bOverrideLocation;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLEventMovieScene.AllActorBinding
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           BindingActor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TargetName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBFLEventMovieScene::AllActorBinding(class AActor* BindingActor, const class FString& TargetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "AllActorBinding");

	Params::BFLEventMovieScene_AllActorBinding Parms{};

	Parms.BindingActor = BindingActor;
	Parms.TargetName = std::move(TargetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.CreateSlotAnimationAsDynamicMontage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTriggerTime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeToStartMontageAt                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UBFLEventMovieScene::CreateSlotAnimationAsDynamicMontage(class USkeletalMesh* Mesh, class UAnimSequenceBase* Asset, class FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "CreateSlotAnimationAsDynamicMontage");

	Params::BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage Parms{};

	Parms.Mesh = Mesh;
	Parms.Asset = Asset;
	Parms.SlotNodeName = SlotNodeName;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.LoopCount = LoopCount;
	Parms.BlendOutTriggerTime = BlendOutTriggerTime;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.CreateSlotOffsetAnimationAsDynamicMontage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartOffsetTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndOffsetTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTriggerTime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeToStartMontageAt                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UBFLEventMovieScene::CreateSlotOffsetAnimationAsDynamicMontage(class USkeletalMesh* Mesh, class UAnimSequenceBase* Asset, class FName SlotNodeName, float StartOffsetTime, float EndOffsetTime, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "CreateSlotOffsetAnimationAsDynamicMontage");

	Params::BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage Parms{};

	Parms.Mesh = Mesh;
	Parms.Asset = Asset;
	Parms.SlotNodeName = SlotNodeName;
	Parms.StartOffsetTime = StartOffsetTime;
	Parms.EndOffsetTime = EndOffsetTime;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.LoopCount = LoopCount;
	Parms.BlendOutTriggerTime = BlendOutTriggerTime;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.FindAtlEvtEventManager
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelStreaming*                  TargetLevelStreaming                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AAtlEvtEventManager*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AAtlEvtEventManager* UBFLEventMovieScene::FindAtlEvtEventManager(class ULevelStreaming* TargetLevelStreaming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "FindAtlEvtEventManager");

	Params::BFLEventMovieScene_FindAtlEvtEventManager Parms{};

	Parms.TargetLevelStreaming = TargetLevelStreaming;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.FindLevelSequenceActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULevelStreaming*                  TargetLevelStreaming                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ALevelSequenceActor*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ALevelSequenceActor* UBFLEventMovieScene::FindLevelSequenceActor(class ULevelStreaming* TargetLevelStreaming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "FindLevelSequenceActor");

	Params::BFLEventMovieScene_FindLevelSequenceActor Parms{};

	Parms.TargetLevelStreaming = TargetLevelStreaming;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.GetAnimationSlotName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EEvtCharaAnimationSlotType              SlotType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UBFLEventMovieScene::GetAnimationSlotName(EEvtCharaAnimationSlotType SlotType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "GetAnimationSlotName");

	Params::BFLEventMovieScene_GetAnimationSlotName Parms{};

	Parms.SlotType = SlotType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.GetBindingID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ALevelSequenceActor*              SequenceActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ObjectDisplayName                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMovieSceneObjectBindingID       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FMovieSceneObjectBindingID UBFLEventMovieScene::GetBindingID(class ALevelSequenceActor* SequenceActor, const class FString& ObjectDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "GetBindingID");

	Params::BFLEventMovieScene_GetBindingID Parms{};

	Parms.SequenceActor = SequenceActor;
	Parms.ObjectDisplayName = std::move(ObjectDisplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.IsCondition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EEvtConditionalBranchCompType           CompareType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LHS                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   RHS                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBFLEventMovieScene::IsCondition(EEvtConditionalBranchCompType CompareType, int32 LHS, int32 RHS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "IsCondition");

	Params::BFLEventMovieScene_IsCondition Parms{};

	Parms.CompareType = CompareType;
	Parms.LHS = LHS;
	Parms.RHS = RHS;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.LoadSublevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SublevelName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLEventMovieScene::LoadSublevel(const class FString& SublevelName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "LoadSublevel");

	Params::BFLEventMovieScene_LoadSublevel Parms{};

	Parms.SublevelName = std::move(SublevelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLEventMovieScene.MakeSeasonSublevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FieldMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FieldMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECldSeason                              Season                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStreamingPath                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UBFLEventMovieScene::MakeSeasonSublevel(int32 FieldMajorID, int32 FieldMinorID, ECldSeason Season, bool bStreamingPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "MakeSeasonSublevel");

	Params::BFLEventMovieScene_MakeSeasonSublevel Parms{};

	Parms.FieldMajorID = FieldMajorID;
	Parms.FieldMinorID = FieldMinorID;
	Parms.Season = Season;
	Parms.bStreamingPath = bStreamingPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.PlaySlotAnimationAsDynamicMontageLoop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTriggerTime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeToStartMontageAt                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UBFLEventMovieScene::PlaySlotAnimationAsDynamicMontageLoop(class UAnimInstance* AnimInstance, class USkeletalMesh* Mesh, class UAnimSequenceBase* Asset, class FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "PlaySlotAnimationAsDynamicMontageLoop");

	Params::BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.Mesh = Mesh;
	Parms.Asset = Asset;
	Parms.SlotNodeName = SlotNodeName;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.LoopCount = LoopCount;
	Parms.BlendOutTriggerTime = BlendOutTriggerTime;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.PlaySlotAnimationAsDynamicMontageLoopOnLastFrame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTriggerTime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeToStartMontageAt                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UBFLEventMovieScene::PlaySlotAnimationAsDynamicMontageLoopOnLastFrame(class UAnimInstance* AnimInstance, class USkeletalMesh* Mesh, class UAnimSequenceBase* Asset, class FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "PlaySlotAnimationAsDynamicMontageLoopOnLastFrame");

	Params::BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.Mesh = Mesh;
	Parms.Asset = Asset;
	Parms.SlotNodeName = SlotNodeName;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.LoopCount = LoopCount;
	Parms.BlendOutTriggerTime = BlendOutTriggerTime;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartOffsetTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndOffsetTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTriggerTime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeToStartMontageAt                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UBFLEventMovieScene::PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame(class UAnimInstance* AnimInstance, class USkeletalMesh* Mesh, class UAnimSequenceBase* Asset, class FName SlotNodeName, float StartOffsetTime, float EndOffsetTime, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame");

	Params::BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.Mesh = Mesh;
	Parms.Asset = Asset;
	Parms.SlotNodeName = SlotNodeName;
	Parms.StartOffsetTime = StartOffsetTime;
	Parms.EndOffsetTime = EndOffsetTime;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.LoopCount = LoopCount;
	Parms.BlendOutTriggerTime = BlendOutTriggerTime;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.PlaySlotAnimationAsDynamicMontageTwo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                Asset2                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTriggerTime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeToStartMontageAt                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UBFLEventMovieScene::PlaySlotAnimationAsDynamicMontageTwo(class UAnimInstance* AnimInstance, class USkeletalMesh* Mesh, class UAnimSequenceBase* Asset, class UAnimSequenceBase* Asset2, class FName SlotNodeName, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "PlaySlotAnimationAsDynamicMontageTwo");

	Params::BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.Mesh = Mesh;
	Parms.Asset = Asset;
	Parms.Asset2 = Asset2;
	Parms.SlotNodeName = SlotNodeName;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.LoopCount = LoopCount;
	Parms.BlendOutTriggerTime = BlendOutTriggerTime;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.PlaySlotMultiAnimationAsDynamicMontage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                BaseAnimAsset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAtlSlotMultiAnimationParam>AnimAssets                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEvtCharaAnimationType                  EvtCharaAnimationType                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTriggerTime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeToStartMontageAt                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UBFLEventMovieScene::PlaySlotMultiAnimationAsDynamicMontage(class UAnimInstance* AnimInstance, class USkeletalMesh* Mesh, class UAnimSequenceBase* BaseAnimAsset, TArray<struct FAtlSlotMultiAnimationParam>* AnimAssets, class FName SlotNodeName, EEvtCharaAnimationType EvtCharaAnimationType, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "PlaySlotMultiAnimationAsDynamicMontage");

	Params::BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.Mesh = Mesh;
	Parms.BaseAnimAsset = BaseAnimAsset;
	Parms.SlotNodeName = SlotNodeName;
	Parms.EvtCharaAnimationType = EvtCharaAnimationType;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.LoopCount = LoopCount;
	Parms.BlendOutTriggerTime = BlendOutTriggerTime;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AnimAssets != nullptr)
		*AnimAssets = std::move(Parms.AnimAssets);

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.PlaySlotMultiAnimationOffsetAsDynamicMontage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                BaseAnimAsset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FAtlSlotMultiAnimationParam>AnimAssets                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEvtCharaAnimationType                  EvtCharaAnimationType                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartOffsetTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndOffsetTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTriggerTime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeToStartMontageAt                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UBFLEventMovieScene::PlaySlotMultiAnimationOffsetAsDynamicMontage(class UAnimInstance* AnimInstance, class USkeletalMesh* Mesh, class UAnimSequenceBase* BaseAnimAsset, TArray<struct FAtlSlotMultiAnimationParam>* AnimAssets, class FName SlotNodeName, EEvtCharaAnimationType EvtCharaAnimationType, float StartOffsetTime, float EndOffsetTime, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "PlaySlotMultiAnimationOffsetAsDynamicMontage");

	Params::BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.Mesh = Mesh;
	Parms.BaseAnimAsset = BaseAnimAsset;
	Parms.SlotNodeName = SlotNodeName;
	Parms.EvtCharaAnimationType = EvtCharaAnimationType;
	Parms.StartOffsetTime = StartOffsetTime;
	Parms.EndOffsetTime = EndOffsetTime;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.LoopCount = LoopCount;
	Parms.BlendOutTriggerTime = BlendOutTriggerTime;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AnimAssets != nullptr)
		*AnimAssets = std::move(Parms.AnimAssets);

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.PlaySlotMultiAnimationOffsetAsDynamicMontageTwo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                BaseAnimAsset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                LoopAsset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartOffsetTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndOffsetTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTriggerTime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeToStartMontageAt                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UBFLEventMovieScene::PlaySlotMultiAnimationOffsetAsDynamicMontageTwo(class UAnimInstance* AnimInstance, class USkeletalMesh* Mesh, class UAnimSequenceBase* BaseAnimAsset, class UAnimSequenceBase* LoopAsset, class FName SlotNodeName, float StartOffsetTime, float EndOffsetTime, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "PlaySlotMultiAnimationOffsetAsDynamicMontageTwo");

	Params::BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.Mesh = Mesh;
	Parms.BaseAnimAsset = BaseAnimAsset;
	Parms.LoopAsset = LoopAsset;
	Parms.SlotNodeName = SlotNodeName;
	Parms.StartOffsetTime = StartOffsetTime;
	Parms.EndOffsetTime = EndOffsetTime;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.LoopCount = LoopCount;
	Parms.BlendOutTriggerTime = BlendOutTriggerTime;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.PlaySlotOffsetAnimationAsDynamicMontageLoop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMesh*                    Mesh                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                Asset                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartOffsetTime                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   EndOffsetTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendInTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InPlayRate                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LoopCount                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTriggerTime                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InTimeToStartMontageAt                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UBFLEventMovieScene::PlaySlotOffsetAnimationAsDynamicMontageLoop(class UAnimInstance* AnimInstance, class USkeletalMesh* Mesh, class UAnimSequenceBase* Asset, class FName SlotNodeName, float StartOffsetTime, float EndOffsetTime, float BlendInTime, float BlendOutTime, float InPlayRate, int32 LoopCount, float BlendOutTriggerTime, float InTimeToStartMontageAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "PlaySlotOffsetAnimationAsDynamicMontageLoop");

	Params::BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.Mesh = Mesh;
	Parms.Asset = Asset;
	Parms.SlotNodeName = SlotNodeName;
	Parms.StartOffsetTime = StartOffsetTime;
	Parms.EndOffsetTime = EndOffsetTime;
	Parms.BlendInTime = BlendInTime;
	Parms.BlendOutTime = BlendOutTime;
	Parms.InPlayRate = InPlayRate;
	Parms.LoopCount = LoopCount;
	Parms.BlendOutTriggerTime = BlendOutTriggerTime;
	Parms.InTimeToStartMontageAt = InTimeToStartMontageAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.ResetNearClipPlane
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLEventMovieScene::ResetNearClipPlane(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "ResetNearClipPlane");

	Params::BFLEventMovieScene_ResetNearClipPlane Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLEventMovieScene.SetEnableStreamingTexture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLEventMovieScene::SetEnableStreamingTexture(const class UObject* WorldContextObject, bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "SetEnableStreamingTexture");

	Params::BFLEventMovieScene_SetEnableStreamingTexture Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLEventMovieScene.SetNearClipPlane
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   NearClipCm                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLEventMovieScene::SetNearClipPlane(const class UObject* WorldContextObject, float NearClipCm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "SetNearClipPlane");

	Params::BFLEventMovieScene_SetNearClipPlane Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.NearClipCm = NearClipCm;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BFLEventMovieScene.SkeletalMeshComponentFromObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* UBFLEventMovieScene::SkeletalMeshComponentFromObject(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "SkeletalMeshComponentFromObject");

	Params::BFLEventMovieScene_SkeletalMeshComponentFromObject Parms{};

	Parms.InObject = InObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BFLEventMovieScene.StopSlotAnimation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendOutTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SlotNodeName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBFLEventMovieScene::StopSlotAnimation(class UAnimInstance* AnimInstance, float BlendOutTime, class FName SlotNodeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BFLEventMovieScene", "StopSlotAnimation");

	Params::BFLEventMovieScene_StopSlotAnimation Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.BlendOutTime = BlendOutTime;
	Parms.SlotNodeName = SlotNodeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActionManagerComponent.ClearCommand
// (Final, Native, Public, BlueprintCallable)

void UBtlActionManagerComponent::ClearCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActionManagerComponent", "ClearCommand");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActionManagerComponent.DoCommand
// (Final, Native, Public, BlueprintCallable)

void UBtlActionManagerComponent::DoCommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActionManagerComponent", "DoCommand");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActionManagerComponent.SetCommand
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Commander                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlCommandType                         Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlActionManagerComponent::SetCommand(class ABtlActor* Commander, EBtlCommandType Type, int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActionManagerComponent", "SetCommand");

	Params::BtlActionManagerComponent_SetCommand Parms{};

	Parms.Commander = Commander;
	Parms.Type = Type;
	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActionManagerComponent.SetCommander
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Commander                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlActionManagerComponent::SetCommander(class ABtlActor* Commander)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActionManagerComponent", "SetCommander");

	Params::BtlActionManagerComponent_SetCommander Parms{};

	Parms.Commander = Commander;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActionManagerComponent.SetCommandTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                Targets                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBtlActionManagerComponent::SetCommandTargets(const TArray<class ABtlActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActionManagerComponent", "SetCommandTargets");

	Params::BtlActionManagerComponent_SetCommandTargets Parms{};

	Parms.Targets = std::move(Targets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActionManagerComponent.SetCommandWithTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Commander                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlCommandType                         Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABtlActor*>                Targets                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBtlActionManagerComponent::SetCommandWithTargets(class ABtlActor* Commander, EBtlCommandType Type, int32 ID, const TArray<class ABtlActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActionManagerComponent", "SetCommandWithTargets");

	Params::BtlActionManagerComponent_SetCommandWithTargets Parms{};

	Parms.Commander = Commander;
	Parms.Type = Type;
	Parms.ID = ID;
	Parms.Targets = std::move(Targets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.ActionPlaySkillTimeline
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::ActionPlaySkillTimeline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "ActionPlaySkillTimeline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.ActionPlayTheurgia
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::ActionPlayTheurgia()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "ActionPlayTheurgia");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.ActionPrepareAct
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore_0                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::ActionPrepareAct(class UBtlCoreComponent* BtlCore_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "ActionPrepareAct");

	Params::BtlActor_ActionPrepareAct Parms{};

	Parms.BtlCore_0 = BtlCore_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.ActionPrepareSkill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore_0                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlSkill*                        Skill                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::ActionPrepareSkill(class UBtlCoreComponent* BtlCore_0, const class ABtlSkill* Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "ActionPrepareSkill");

	Params::BtlActor_ActionPrepareSkill Parms{};

	Parms.BtlCore_0 = BtlCore_0;
	Parms.Skill = Skill;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.ActionReady
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore_0                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::ActionReady(class UBtlCoreComponent* BtlCore_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "ActionReady");

	Params::BtlActor_ActionReady Parms{};

	Parms.BtlCore_0 = BtlCore_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.AddStatusEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UNiagaraComponent*                Ref                                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlBadStatusIcon                       Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ParentEmpActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::AddStatusEffect(class UNiagaraComponent* Ref, EBtlBadStatusIcon Type, class AActor* ParentEmpActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "AddStatusEffect");

	Params::BtlActor_AddStatusEffect Parms{};

	Parms.Ref = Ref;
	Parms.Type = Type;
	Parms.ParentEmpActor = ParentEmpActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.AddStatusEffectRequestList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlBadStatusIcon                       RequestType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::AddStatusEffectRequestList(EBtlBadStatusIcon RequestType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "AddStatusEffectRequestList");

	Params::BtlActor_AddStatusEffectRequestList Parms{};

	Parms.RequestType = RequestType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.AddTheurgiaGauge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlTheurgiaBoostType                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::AddTheurgiaGauge(EBtlTheurgiaBoostType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "AddTheurgiaGauge");

	Params::BtlActor_AddTheurgiaGauge Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.AdjustHomePosition
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::AdjustHomePosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "AdjustHomePosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.AdjustPersonaLocation
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::AdjustPersonaLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "AdjustPersonaLocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.AffectEscape
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::AffectEscape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "AffectEscape");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.AffectGeneralAttackAnnihilation
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::AffectGeneralAttackAnnihilation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "AffectGeneralAttackAnnihilation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.AffectGeneralAttackDamage
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::AffectGeneralAttackDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "AffectGeneralAttackDamage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.AffectOverheat
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::AffectOverheat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "AffectOverheat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.AffectRecoveryBadStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore_0                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::AffectRecoveryBadStatus(class UBtlCoreComponent* BtlCore_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "AffectRecoveryBadStatus");

	Params::BtlActor_AffectRecoveryBadStatus Parms{};

	Parms.BtlCore_0 = BtlCore_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.AffectRecoveryFromEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   RecoveryHpRatio                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::AffectRecoveryFromEvent(float RecoveryHpRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "AffectRecoveryFromEvent");

	Params::BtlActor_AffectRecoveryFromEvent Parms{};

	Parms.RecoveryHpRatio = RecoveryHpRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.AffectSkillDamageRestPortion
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::AffectSkillDamageRestPortion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "AffectSkillDamageRestPortion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.CalcClosedStandLocation
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class UBtlCoreComponent*                PCore                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Pos                                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StandRange                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CoordinateFromEnemyCenter                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ABtlActor::CalcClosedStandLocation(class UBtlCoreComponent* PCore, const struct FVector& Pos, float StandRange, bool CoordinateFromEnemyCenter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CalcClosedStandLocation");

	Params::BtlActor_CalcClosedStandLocation Parms{};

	Parms.PCore = PCore;
	Parms.Pos = std::move(Pos);
	Parms.StandRange = StandRange;
	Parms.CoordinateFromEnemyCenter = CoordinateFromEnemyCenter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CancelHoldup
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::CancelHoldup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CancelHoldup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.CharacterDestroy
// (Event, Public, BlueprintEvent)

void ABtlActor::CharacterDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CharacterDestroy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.CheckDownContinuedState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckDownContinuedState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckDownContinuedState");

	Params::BtlActor_CheckDownContinuedState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckExpireSupportStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore_0                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckExpireSupportStatus(class UBtlCoreComponent* BtlCore_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckExpireSupportStatus");

	Params::BtlActor_CheckExpireSupportStatus Parms{};

	Parms.BtlCore_0 = BtlCore_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckPersonaValid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckPersonaValid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckPersonaValid");

	Params::BtlActor_CheckPersonaValid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckReady
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckReady");

	Params::BtlActor_CheckReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckReadyCharacterBP
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckReadyCharacterBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckReadyCharacterBP");

	Params::BtlActor_CheckReadyCharacterBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckReadyFukaForTheurgia
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        PFuka                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckReadyFukaForTheurgia(class ABtlActor* PFuka)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckReadyFukaForTheurgia");

	Params::BtlActor_CheckReadyFukaForTheurgia Parms{};

	Parms.PFuka = PFuka;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckRecoveryFromBadStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore_0                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckRecoveryFromBadStatus(class UBtlCoreComponent* BtlCore_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckRecoveryFromBadStatus");

	Params::BtlActor_CheckRecoveryFromBadStatus Parms{};

	Parms.BtlCore_0 = BtlCore_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CleanupStatusEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Down                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    KeepSwoon                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::CleanupStatusEffect(bool Status, bool Down, bool KeepSwoon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CleanupStatusEffect");

	Params::BtlActor_CleanupStatusEffect Parms{};

	Parms.Status = Status;
	Parms.Down = Down;
	Parms.KeepSwoon = KeepSwoon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.CoordinateSkillBPForSpecificSituations
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlSkill*                        Skill                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::CoordinateSkillBPForSpecificSituations(class ABtlSkill* Skill)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CoordinateSkillBPForSpecificSituations");

	Params::BtlActor_CoordinateSkillBPForSpecificSituations Parms{};

	Parms.Skill = Skill;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.CreatePersona
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::CreatePersona()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CreatePersona");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.CreateSummonEnemy
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::CreateSummonEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CreateSummonEnemy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.DestroyEffect
// (Event, Public, BlueprintEvent)
// Parameters:
// class UNiagaraComponent*                PNiagara                                               (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::DestroyEffect(class UNiagaraComponent* PNiagara)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DestroyEffect");

	Params::BtlActor_DestroyEffect Parms{};

	Parms.PNiagara = PNiagara;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlActor.DestroyFukaForTheurgia
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        PFuka                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::DestroyFukaForTheurgia(class ABtlActor* PFuka)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DestroyFukaForTheurgia");

	Params::BtlActor_DestroyFukaForTheurgia Parms{};

	Parms.PFuka = PFuka;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.DestroyPersona
// (Final, Native, Protected, BlueprintCallable)

void ABtlActor::DestroyPersona()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DestroyPersona");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.DestroyPersonaBeforeCreatePersona
// (Event, Protected, BlueprintEvent)

void ABtlActor::DestroyPersonaBeforeCreatePersona()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DestroyPersonaBeforeCreatePersona");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.DoAutoSkillRecovery
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    RecoveryValid                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::DoAutoSkillRecovery(bool* RecoveryValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DoAutoSkillRecovery");

	Params::BtlActor_DoAutoSkillRecovery Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RecoveryValid != nullptr)
		*RecoveryValid = Parms.RecoveryValid;
}


// Function xrd777.BtlActor.DoBadStatusAction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    ActBadStatusSkillAction                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NeedToWaitProcess                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsOverheatInterrupt                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::DoBadStatusAction(bool* ActBadStatusSkillAction, bool* NeedToWaitProcess, bool* IsOverheatInterrupt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DoBadStatusAction");

	Params::BtlActor_DoBadStatusAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ActBadStatusSkillAction != nullptr)
		*ActBadStatusSkillAction = Parms.ActBadStatusSkillAction;

	if (NeedToWaitProcess != nullptr)
		*NeedToWaitProcess = Parms.NeedToWaitProcess;

	if (IsOverheatInterrupt != nullptr)
		*IsOverheatInterrupt = Parms.IsOverheatInterrupt;
}


// Function xrd777.BtlActor.DoBadStatusDamage
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    IsDamageOccurred                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::DoBadStatusDamage(bool* IsDamageOccurred)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DoBadStatusDamage");

	Params::BtlActor_DoBadStatusDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsDamageOccurred != nullptr)
		*IsDamageOccurred = Parms.IsDamageOccurred;
}


// Function xrd777.BtlActor.DoClearSupportStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore_0                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::DoClearSupportStatus(class UBtlCoreComponent* BtlCore_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DoClearSupportStatus");

	Params::BtlActor_DoClearSupportStatus Parms{};

	Parms.BtlCore_0 = BtlCore_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.DoGeneralAttack
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::DoGeneralAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DoGeneralAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.DoNothing
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::DoNothing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DoNothing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.DoSpecificAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::DoSpecificAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DoSpecificAction");

	Params::BtlActor_DoSpecificAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.DoSpecificActionActEnd
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::DoSpecificActionActEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DoSpecificActionActEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.DoSpecificActionAIEnd
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::DoSpecificActionAIEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DoSpecificActionAIEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.DoSpecificActionTurnEnd
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::DoSpecificActionTurnEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "DoSpecificActionTurnEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.EndWaitTurn
// (Event, Public, BlueprintEvent)

void ABtlActor::EndWaitTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "EndWaitTurn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.EnemiesLookatThisCharacter
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlActor::EnemiesLookatThisCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "EnemiesLookatThisCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.GetActionManager
// (Event, Public, BlueprintEvent)
// Parameters:
// class UBtlActionManagerComponent*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBtlActionManagerComponent* ABtlActor::GetActionManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetActionManager");

	Params::BtlActor_GetActionManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetActionTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABtlActor*> ABtlActor::GetActionTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetActionTargets");

	Params::BtlActor_GetActionTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetCharaBPFromCode
// (Event, Public, BlueprintEvent)
// Parameters:
// class UAppCharBaseComp*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAppCharBaseComp* ABtlActor::GetCharaBPFromCode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetCharaBPFromCode");

	Params::BtlActor_GetCharaBPFromCode Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetCurrentAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBtlAnimationType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlAnimationType ABtlActor::GetCurrentAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetCurrentAnimation");

	Params::BtlActor_GetCurrentAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetPersona
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* ABtlActor::GetPersona(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetPersona");

	Params::BtlActor_GetPersona Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetSocketTransformFromCpp
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform ABtlActor::GetSocketTransformFromCpp(class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetSocketTransformFromCpp");

	Params::BtlActor_GetSocketTransformFromCpp Parms{};

	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetTargetsManager
// (Event, Public, BlueprintEvent)
// Parameters:
// class UBtlTargetsManagerComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBtlTargetsManagerComponent* ABtlActor::GetTargetsManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetTargetsManager");

	Params::BtlActor_GetTargetsManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.HideForOtherAction
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CriticalHindrance                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Rapid                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HalfMode                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::HideForOtherAction(bool CriticalHindrance, bool Rapid, bool HalfMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "HideForOtherAction");

	Params::BtlActor_HideForOtherAction Parms{};

	Parms.CriticalHindrance = CriticalHindrance;
	Parms.Rapid = Rapid;
	Parms.HalfMode = HalfMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlActor.InstantKill
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::InstantKill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "InstantKill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.IsAnimationChant
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsAnimationChant()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsAnimationChant");

	Params::BtlActor_IsAnimationChant Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsAnimationWait
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsAnimationWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsAnimationWait");

	Params::BtlActor_IsAnimationWait Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.LoadFukaForTheurgia
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::LoadFukaForTheurgia()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "LoadFukaForTheurgia");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.LoadModelsForAlloutAttack
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::LoadModelsForAlloutAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "LoadModelsForAlloutAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.LoadModelsForEvent
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::LoadModelsForEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "LoadModelsForEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.MarkAsAvoidRelocationUntilTurnEnd
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::MarkAsAvoidRelocationUntilTurnEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "MarkAsAvoidRelocationUntilTurnEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.MarkAsCalledFirstSummonScene
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::MarkAsCalledFirstSummonScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "MarkAsCalledFirstSummonScene");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.MarkAsHidingPersonaForSkillScene
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::MarkAsHidingPersonaForSkillScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "MarkAsHidingPersonaForSkillScene");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.MarkAsPlayedStandbyCamera
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::MarkAsPlayedStandbyCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "MarkAsPlayedStandbyCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.MarkReadyToDestroy
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::MarkReadyToDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "MarkReadyToDestroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayAbsorptionEffect
// (Event, Public, BlueprintEvent)

void ABtlActor::PlayAbsorptionEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayAbsorptionEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.PlayEnemySummonEffect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlActor::PlayEnemySummonEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayEnemySummonEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayReflectionEffect
// (Event, Public, BlueprintEvent)

void ABtlActor::PlayReflectionEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayReflectionEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.PlayShakeAnim
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlActor::PlayShakeAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayShakeAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.PlayVoiceAlloutAttackFinishCut
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::PlayVoiceAlloutAttackFinishCut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoiceAlloutAttackFinishCut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayVoiceAlloutAttackFinishStart
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::PlayVoiceAlloutAttackFinishStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoiceAlloutAttackFinishStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayVoiceAlloutAttacking
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::PlayVoiceAlloutAttacking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoiceAlloutAttacking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayVoiceAlloutAttackStart
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::PlayVoiceAlloutAttackStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoiceAlloutAttackStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayVoiceDead
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::PlayVoiceDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoiceDead");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayVoiceFirstSummonScene
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::PlayVoiceFirstSummonScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoiceFirstSummonScene");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayVoicePersonaSkill
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::PlayVoicePersonaSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoicePersonaSkill");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayVoicePersonaSkillCutin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsFirstSummon                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::PlayVoicePersonaSkillCutin(bool IsFirstSummon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoicePersonaSkillCutin");

	Params::BtlActor_PlayVoicePersonaSkillCutin Parms{};

	Parms.IsFirstSummon = IsFirstSummon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayVoiceSkillChant
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::PlayVoiceSkillChant()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoiceSkillChant");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayVoiceSkillShot
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::PlayVoiceSkillShot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoiceSkillShot");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayVoiceTakeoverReceive
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::PlayVoiceTakeoverReceive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoiceTakeoverReceive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayVoiceTakeoverStart
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::PlayVoiceTakeoverStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoiceTakeoverStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayVoiceTheurgia
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TypeIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::PlayVoiceTheurgia(int32 TypeIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayVoiceTheurgia");

	Params::BtlActor_PlayVoiceTheurgia Parms{};

	Parms.TypeIndex = TypeIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.PlayWaitAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   StartingPosition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseBlendSetting                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Blend                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IgnoreWhenSamePose                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::PlayWaitAnimation(float StartingPosition, bool UseBlendSetting, float Blend, bool IgnoreWhenSamePose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PlayWaitAnimation");

	Params::BtlActor_PlayWaitAnimation Parms{};

	Parms.StartingPosition = StartingPosition;
	Parms.UseBlendSetting = UseBlendSetting;
	Parms.Blend = Blend;
	Parms.IgnoreWhenSamePose = IgnoreWhenSamePose;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlActor.PreAffectSkillDamagePortion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   PortionRatio                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::PreAffectSkillDamagePortion(float PortionRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "PreAffectSkillDamagePortion");

	Params::BtlActor_PreAffectSkillDamagePortion Parms{};

	Parms.PortionRatio = PortionRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.ProcBeforeFadeinToAlloutAttackDamage
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::ProcBeforeFadeinToAlloutAttackDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "ProcBeforeFadeinToAlloutAttackDamage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.ProcessBeforeCommandSelectStart
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::ProcessBeforeCommandSelectStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "ProcessBeforeCommandSelectStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.RemoveEffectItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlBadStatusIcon                       Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::RemoveEffectItem(EBtlBadStatusIcon Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "RemoveEffectItem");

	Params::BtlActor_RemoveEffectItem Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.RequestAddStatusEffect
// (Event, Public, BlueprintEvent)
// Parameters:
// EBtlBadStatusIcon                       Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::RequestAddStatusEffect(EBtlBadStatusIcon Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "RequestAddStatusEffect");

	Params::BtlActor_RequestAddStatusEffect Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlActor.RequestAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBtlAnimationType                       AnimType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartingPosition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseBlendSetting                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Blend                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::RequestAnimation(EBtlAnimationType AnimType, float StartingPosition, bool UseBlendSetting, float Blend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "RequestAnimation");

	Params::BtlActor_RequestAnimation Parms{};

	Parms.AnimType = AnimType;
	Parms.StartingPosition = StartingPosition;
	Parms.UseBlendSetting = UseBlendSetting;
	Parms.Blend = Blend;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlActor.RequestAnimationWithNext
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBtlAnimationType                       AnimType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlAnimationType                       AnimNextType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::RequestAnimationWithNext(EBtlAnimationType AnimType, EBtlAnimationType AnimNextType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "RequestAnimationWithNext");

	Params::BtlActor_RequestAnimationWithNext Parms{};

	Parms.AnimType = AnimType;
	Parms.AnimNextType = AnimNextType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlActor.RequestDamageAndDeadPerformance
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlActor::RequestDamageAndDeadPerformance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "RequestDamageAndDeadPerformance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.RequestFaceAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAppCharFaceAnimID                      AnimType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseBlendSetting                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Blend                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::RequestFaceAnimation(EAppCharFaceAnimID AnimType, bool UseBlendSetting, float Blend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "RequestFaceAnimation");

	Params::BtlActor_RequestFaceAnimation Parms{};

	Parms.AnimType = AnimType;
	Parms.UseBlendSetting = UseBlendSetting;
	Parms.Blend = Blend;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlActor.RequestHidePlayersForEspaceSkill
// (Event, Public, BlueprintEvent)

void ABtlActor::RequestHidePlayersForEspaceSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "RequestHidePlayersForEspaceSkill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.RequestPersonalAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlActor::RequestPersonalAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "RequestPersonalAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.ResetAlongWithRelocation
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlActor::ResetAlongWithRelocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "ResetAlongWithRelocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.RestoreModelsFromAlloutAttack
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::RestoreModelsFromAlloutAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "RestoreModelsFromAlloutAttack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.RestoreModelsFromEvent
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::RestoreModelsFromEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "RestoreModelsFromEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.RumbleEnemyEmerge
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::RumbleEnemyEmerge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "RumbleEnemyEmerge");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.SearchSkeletalMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InObject                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* ABtlActor::SearchSkeletalMesh(class UObject* InObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SearchSkeletalMesh");

	Params::BtlActor_SearchSkeletalMesh Parms{};

	Parms.InObject = InObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.SetActionID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ActionID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::SetActionID(int32 ActionID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SetActionID");

	Params::BtlActor_SetActionID Parms{};

	Parms.ActionID = ActionID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.SetActiveMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::SetActiveMode(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SetActiveMode");

	Params::BtlActor_SetActiveMode Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.SetDisableUpdateFaceAnimFromBody
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Disable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::SetDisableUpdateFaceAnimFromBody(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SetDisableUpdateFaceAnimFromBody");

	Params::BtlActor_SetDisableUpdateFaceAnimFromBody Parms{};

	Parms.Disable = Disable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.SetEventMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::SetEventMode(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SetEventMode");

	Params::BtlActor_SetEventMode Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.SetGeneralAttackResult
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlAlloutAttackResult                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::SetGeneralAttackResult(EBtlAlloutAttackResult Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SetGeneralAttackResult");

	Params::BtlActor_SetGeneralAttackResult Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.SetGuard
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::SetGuard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SetGuard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.SetPersonaLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       RelativeTrans                                          (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::SetPersonaLocation(const struct FTransform& RelativeTrans, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SetPersonaLocation");

	Params::BtlActor_SetPersonaLocation Parms{};

	Parms.RelativeTrans = std::move(RelativeTrans);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.SetPersonaWorldLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       WorldTrans                                             (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::SetPersonaWorldLocation(const struct FTransform& WorldTrans, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SetPersonaWorldLocation");

	Params::BtlActor_SetPersonaWorldLocation Parms{};

	Parms.WorldTrans = std::move(WorldTrans);
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.SetStatusColor
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FColor                           Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::SetStatusColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SetStatusColor");

	Params::BtlActor_SetStatusColor Parms{};

	Parms.Color = std::move(Color);

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlActor.SetupConditionForAllyEscape
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::SetupConditionForAllyEscape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SetupConditionForAllyEscape");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.SetupForEventMode
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::SetupForEventMode(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SetupForEventMode");

	Params::BtlActor_SetupForEventMode Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlActor.SetVisibleFromCode
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::SetVisibleFromCode(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SetVisibleFromCode");

	Params::BtlActor_SetVisibleFromCode Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlActor.ShowActionName
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::ShowActionName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "ShowActionName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.ShowFromHiding
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlActor::ShowFromHiding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "ShowFromHiding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.SpawnAllSummonEnemy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABtlActor*> ABtlActor::SpawnAllSummonEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SpawnAllSummonEnemy");

	Params::BtlActor_SpawnAllSummonEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.SpawnCharacterBP
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InitialHiding                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::SpawnCharacterBP(bool InitialHiding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SpawnCharacterBP");

	Params::BtlActor_SpawnCharacterBP Parms{};

	Parms.InitialHiding = InitialHiding;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlActor.SpawnFukaForTheurgia
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* ABtlActor::SpawnFukaForTheurgia()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SpawnFukaForTheurgia");

	Params::BtlActor_SpawnFukaForTheurgia Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.SpawnPersona
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    WithoutEmergeEffect                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::SpawnPersona(bool WithoutEmergeEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SpawnPersona");

	Params::BtlActor_SpawnPersona Parms{};

	Parms.WithoutEmergeEffect = WithoutEmergeEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.SpawnSummonEnemy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* ABtlActor::SpawnSummonEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SpawnSummonEnemy");

	Params::BtlActor_SpawnSummonEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.StandbyAction
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::StandbyAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "StandbyAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.StartEscape
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::StartEscape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "StartEscape");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.StartHoldup
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::StartHoldup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "StartHoldup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.StopShakeAnim
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlActor::StopShakeAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "StopShakeAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.SummonGunTurnToTheurgiaMode
// (Event, Public, BlueprintEvent)

void ABtlActor::SummonGunTurnToTheurgiaMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SummonGunTurnToTheurgiaMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.SyncModelsForAlloutAttack
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::SyncModelsForAlloutAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SyncModelsForAlloutAttack");

	Params::BtlActor_SyncModelsForAlloutAttack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.SyncModelsForEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::SyncModelsForEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SyncModelsForEvent");

	Params::BtlActor_SyncModelsForEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.ToEndTurn
// (Event, Public, BlueprintEvent)

void ABtlActor::ToEndTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "ToEndTurn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlActor.TurnOffOrgia
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Dead                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlActor::TurnOffOrgia(bool Dead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "TurnOffOrgia");

	Params::BtlActor_TurnOffOrgia Parms{};

	Parms.Dead = Dead;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.UpdatePersonalAnimation
// (Final, Native, Public, BlueprintCallable)

void ABtlActor::UpdatePersonalAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "UpdatePersonalAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlActor.CheckActiveMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckActiveMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckActiveMode");

	Params::BtlActor_CheckActiveMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckAlive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckAlive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckAlive");

	Params::BtlActor_CheckAlive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckAlreadyTakeover
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckAlreadyTakeover() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckAlreadyTakeover");

	Params::BtlActor_CheckAlreadyTakeover Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckBackshotDisable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckBackshotDisable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckBackshotDisable");

	Params::BtlActor_CheckBackshotDisable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckBadStatusAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckBadStatusAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckBadStatusAction");

	Params::BtlActor_CheckBadStatusAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckBadStatusDamage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckBadStatusDamage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckBadStatusDamage");

	Params::BtlActor_CheckBadStatusDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckBadStatusEscape
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckBadStatusEscape() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckBadStatusEscape");

	Params::BtlActor_CheckBadStatusEscape Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckCutinOccur
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckCutinOccur() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckCutinOccur");

	Params::BtlActor_CheckCutinOccur Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckDisableUpdateFaceAnimFromBody
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckDisableUpdateFaceAnimFromBody() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckDisableUpdateFaceAnimFromBody");

	Params::BtlActor_CheckDisableUpdateFaceAnimFromBody Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckEnableDeadAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckEnableDeadAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckEnableDeadAnimation");

	Params::BtlActor_CheckEnableDeadAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckEnableRotation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckEnableRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckEnableRotation");

	Params::BtlActor_CheckEnableRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckEnableTakeover
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckEnableTakeover() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckEnableTakeover");

	Params::BtlActor_CheckEnableTakeover Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckEnableTheurgiaSkillUse
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckEnableTheurgiaSkillUse() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckEnableTheurgiaSkillUse");

	Params::BtlActor_CheckEnableTheurgiaSkillUse Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckEnableTranslucence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckEnableTranslucence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckEnableTranslucence");

	Params::BtlActor_CheckEnableTranslucence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckExistStatusEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlBadStatusIcon                       Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckExistStatusEffect(EBtlBadStatusIcon Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckExistStatusEffect");

	Params::BtlActor_CheckExistStatusEffect Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckExistStatusEffectRequestList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlBadStatusIcon                       RequestType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckExistStatusEffectRequestList(EBtlBadStatusIcon RequestType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckExistStatusEffectRequestList");

	Params::BtlActor_CheckExistStatusEffectRequestList Parms{};

	Parms.RequestType = RequestType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckGeneralAttackAnnihilation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckGeneralAttackAnnihilation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckGeneralAttackAnnihilation");

	Params::BtlActor_CheckGeneralAttackAnnihilation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckGuest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckGuest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckGuest");

	Params::BtlActor_CheckGuest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckHiddingWeaponMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckHiddingWeaponMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckHiddingWeaponMode");

	Params::BtlActor_CheckHiddingWeaponMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckHidingPersonaForSkillScene
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckHidingPersonaForSkillScene() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckHidingPersonaForSkillScene");

	Params::BtlActor_CheckHidingPersonaForSkillScene Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckIdle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckIdle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckIdle");

	Params::BtlActor_CheckIdle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckInAlloutSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckInAlloutSequence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckInAlloutSequence");

	Params::BtlActor_CheckInAlloutSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckInOverheatProc
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckInOverheatProc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckInOverheatProc");

	Params::BtlActor_CheckInOverheatProc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckKeepDeadAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckKeepDeadAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckKeepDeadAnimation");

	Params::BtlActor_CheckKeepDeadAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckLookatEnable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckLookatEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckLookatEnable");

	Params::BtlActor_CheckLookatEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckNeedOverheatScene
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckNeedOverheatScene() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckNeedOverheatScene");

	Params::BtlActor_CheckNeedOverheatScene Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckNeedToCallFirstSummonScene
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckNeedToCallFirstSummonScene() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckNeedToCallFirstSummonScene");

	Params::BtlActor_CheckNeedToCallFirstSummonScene Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckNeedToPlayPreSkillPorc
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckNeedToPlayPreSkillPorc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckNeedToPlayPreSkillPorc");

	Params::BtlActor_CheckNeedToPlayPreSkillPorc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckNotSummonPersonaSkill
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckNotSummonPersonaSkill() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckNotSummonPersonaSkill");

	Params::BtlActor_CheckNotSummonPersonaSkill Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckPersonaAlreadyChanged
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckPersonaAlreadyChanged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckPersonaAlreadyChanged");

	Params::BtlActor_CheckPersonaAlreadyChanged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckPersonaStartWithoutEmergePerformance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckPersonaStartWithoutEmergePerformance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckPersonaStartWithoutEmergePerformance");

	Params::BtlActor_CheckPersonaStartWithoutEmergePerformance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckPlayableShortSkillSceneAfterCutin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckPlayableShortSkillSceneAfterCutin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckPlayableShortSkillSceneAfterCutin");

	Params::BtlActor_CheckPlayableShortSkillSceneAfterCutin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckPlayableWaitAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckPlayableWaitAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckPlayableWaitAnimation");

	Params::BtlActor_CheckPlayableWaitAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckPlayedStandbyCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckPlayedStandbyCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckPlayedStandbyCamera");

	Params::BtlActor_CheckPlayedStandbyCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckPriorConvExAnimSection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckPriorConvExAnimSection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckPriorConvExAnimSection");

	Params::BtlActor_CheckPriorConvExAnimSection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckProgressToHoldup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckProgressToHoldup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckProgressToHoldup");

	Params::BtlActor_CheckProgressToHoldup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckRecoveryFromDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckRecoveryFromDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckRecoveryFromDown");

	Params::BtlActor_CheckRecoveryFromDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckShakingWhenDownDamage
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckShakingWhenDownDamage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckShakingWhenDownDamage");

	Params::BtlActor_CheckShakingWhenDownDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckSkillCameraCharacterHideDisable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckSkillCameraCharacterHideDisable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckSkillCameraCharacterHideDisable");

	Params::BtlActor_CheckSkillCameraCharacterHideDisable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckSkipAction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckSkipAction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckSkipAction");

	Params::BtlActor_CheckSkipAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckSkipSkillChantAnim
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckSkipSkillChantAnim() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckSkipSkillChantAnim");

	Params::BtlActor_CheckSkipSkillChantAnim Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckSkipSkillEndAnim
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckSkipSkillEndAnim() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckSkipSkillEndAnim");

	Params::BtlActor_CheckSkipSkillEndAnim Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckSkipTurn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckSkipTurn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckSkipTurn");

	Params::BtlActor_CheckSkipTurn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckTurnFromGuardCancel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckTurnFromGuardCancel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckTurnFromGuardCancel");

	Params::BtlActor_CheckTurnFromGuardCancel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckUseSkillShotSeqCam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckUseSkillShotSeqCam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckUseSkillShotSeqCam");

	Params::BtlActor_CheckUseSkillShotSeqCam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.CheckUsingTakeoverOtherCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::CheckUsingTakeoverOtherCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "CheckUsingTakeoverOtherCamera");

	Params::BtlActor_CheckUsingTakeoverOtherCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.ConvExAnimSectionName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlAnimationType                       Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceShowWeapon                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlBossAnimRequestParam         Params_0                                               (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName ABtlActor::ConvExAnimSectionName(bool* Found, EBtlAnimationType Type, bool* ForceShowWeapon, struct FBtlBossAnimRequestParam* Params_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "ConvExAnimSectionName");

	Params::BtlActor_ConvExAnimSectionName Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Found != nullptr)
		*Found = Parms.Found;

	if (ForceShowWeapon != nullptr)
		*ForceShowWeapon = Parms.ForceShowWeapon;

	if (Params_0 != nullptr)
		*Params_0 = std::move(Parms.Params_0);

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetActionID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlActor::GetActionID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetActionID");

	Params::BtlActor_GetActionID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetActionType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlCommandType                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlCommandType ABtlActor::GetActionType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetActionType");

	Params::BtlActor_GetActionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetAnimationBaseSpeedRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlActor::GetAnimationBaseSpeedRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetAnimationBaseSpeedRatio");

	Params::BtlActor_GetAnimationBaseSpeedRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetAttackAttr
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlDataAttr                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlDataAttr ABtlActor::GetAttackAttr() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetAttackAttr");

	Params::BtlActor_GetAttackAttr Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetAttackPerformanceType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlAttackPerformanceType               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlAttackPerformanceType ABtlActor::GetAttackPerformanceType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetAttackPerformanceType");

	Params::BtlActor_GetAttackPerformanceType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetAttackType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlAttackType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlAttackType ABtlActor::GetAttackType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetAttackType");

	Params::BtlActor_GetAttackType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetAttackWeaponAnimType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlAttackWeaponAnimType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlAttackWeaponAnimType ABtlActor::GetAttackWeaponAnimType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetAttackWeaponAnimType");

	Params::BtlActor_GetAttackWeaponAnimType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetBadStatusActionWaitTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlActor::GetBadStatusActionWaitTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetBadStatusActionWaitTime");

	Params::BtlActor_GetBadStatusActionWaitTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetBadStatusEffectName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlBadStatusIcon                       Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName ABtlActor::GetBadStatusEffectName(EBtlBadStatusIcon Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetBadStatusEffectName");

	Params::BtlActor_GetBadStatusEffectName Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetCharacterID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlActor::GetCharacterID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetCharacterID");

	Params::BtlActor_GetCharacterID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetCurrentStatusEffectType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlBadStatusIcon                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlBadStatusIcon ABtlActor::GetCurrentStatusEffectType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetCurrentStatusEffectType");

	Params::BtlActor_GetCurrentStatusEffectType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetExpireSupportWaitTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlActor::GetExpireSupportWaitTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetExpireSupportWaitTime");

	Params::BtlActor_GetExpireSupportWaitTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetGeneralAttackResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlAlloutAttackResult                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlAlloutAttackResult ABtlActor::GetGeneralAttackResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetGeneralAttackResult");

	Params::BtlActor_GetGeneralAttackResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetHomePosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ABtlActor::GetHomePosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetHomePosition");

	Params::BtlActor_GetHomePosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlActor::GetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetId");

	Params::BtlActor_GetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetItemID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlActor::GetItemID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetItemID");

	Params::BtlActor_GetItemID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetOriginalID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlActor::GetOriginalID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetOriginalID");

	Params::BtlActor_GetOriginalID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetPersonaTransform
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ForCutin                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform ABtlActor::GetPersonaTransform(bool ForCutin) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetPersonaTransform");

	Params::BtlActor_GetPersonaTransform Parms{};

	Parms.ForCutin = ForCutin;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetPersonaTransformFromSkillCondition
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABtlActor*                        PersonaOwner                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform ABtlActor::GetPersonaTransformFromSkillCondition(const class ABtlActor* PersonaOwner) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetPersonaTransformFromSkillCondition");

	Params::BtlActor_GetPersonaTransformFromSkillCondition Parms{};

	Parms.PersonaOwner = PersonaOwner;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetRecoveryWaitTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlActor::GetRecoveryWaitTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetRecoveryWaitTime");

	Params::BtlActor_GetRecoveryWaitTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetSizeCategory
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// EBtlSizeCategoryType                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlSizeCategoryType ABtlActor::GetSizeCategory() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetSizeCategory");

	Params::BtlActor_GetSizeCategory Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetSkillChantAnim
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBtlBossAnimRequestParam         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBtlBossAnimRequestParam ABtlActor::GetSkillChantAnim() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetSkillChantAnim");

	Params::BtlActor_GetSkillChantAnim Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetSkillEndAnim
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBtlBossAnimRequestParam         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBtlBossAnimRequestParam ABtlActor::GetSkillEndAnim() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetSkillEndAnim");

	Params::BtlActor_GetSkillEndAnim Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetSkillID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlActor::GetSkillID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetSkillID");

	Params::BtlActor_GetSkillID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetSkillShotAnim
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FBtlBossAnimRequestParam         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBtlBossAnimRequestParam ABtlActor::GetSkillShotAnim() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetSkillShotAnim");

	Params::BtlActor_GetSkillShotAnim Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetSummonEnemyID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlActor::GetSummonEnemyID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetSummonEnemyID");

	Params::BtlActor_GetSummonEnemyID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.GetUID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlActor::GetUID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "GetUID");

	Params::BtlActor_GetUID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsAstreaColosseoEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsAstreaColosseoEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsAstreaColosseoEnemy");

	Params::BtlActor_IsAstreaColosseoEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsAstreaCutinEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsAstreaCutinEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsAstreaCutinEnemy");

	Params::BtlActor_IsAstreaCutinEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsAttackControlledByAI
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsAttackControlledByAI() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsAttackControlledByAI");

	Params::BtlActor_IsAttackControlledByAI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsAttackFailed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsAttackFailed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsAttackFailed");

	Params::BtlActor_IsAttackFailed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsAttackHit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsAttackHit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsAttackHit");

	Params::BtlActor_IsAttackHit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsAttackMiss
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsAttackMiss() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsAttackMiss");

	Params::BtlActor_IsAttackMiss Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsBoss
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsBoss() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsBoss");

	Params::BtlActor_IsBoss Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsDead
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsDead() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsDead");

	Params::BtlActor_IsDead Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsDormancy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsDormancy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsDormancy");

	Params::BtlActor_IsDormancy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsDown");

	Params::BtlActor_IsDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsDying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsDying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsDying");

	Params::BtlActor_IsDying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsDyingBadStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsDyingBadStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsDyingBadStatus");

	Params::BtlActor_IsDyingBadStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsEnemy");

	Params::BtlActor_IsEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsEnemyInParty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsEnemyInParty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsEnemyInParty");

	Params::BtlActor_IsEnemyInParty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsGuard
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsGuard() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsGuard");

	Params::BtlActor_IsGuard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsInActionTurn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsInActionTurn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsInActionTurn");

	Params::BtlActor_IsInActionTurn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsInOneMore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsInOneMore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsInOneMore");

	Params::BtlActor_IsInOneMore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsInTakeOver
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsInTakeOver() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsInTakeOver");

	Params::BtlActor_IsInTakeOver Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsKoromaru
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsKoromaru() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsKoromaru");

	Params::BtlActor_IsKoromaru Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsManualOperation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsManualOperation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsManualOperation");

	Params::BtlActor_IsManualOperation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsNewBattleOutfit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsNewBattleOutfit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsNewBattleOutfit");

	Params::BtlActor_IsNewBattleOutfit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsNewBattleOutfitForAlloutFinish
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsNewBattleOutfitForAlloutFinish() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsNewBattleOutfitForAlloutFinish");

	Params::BtlActor_IsNewBattleOutfitForAlloutFinish Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsOccurringSkillAbsorption
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsOccurringSkillAbsorption() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsOccurringSkillAbsorption");

	Params::BtlActor_IsOccurringSkillAbsorption Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsOccurringSkillBlock
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsOccurringSkillBlock() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsOccurringSkillBlock");

	Params::BtlActor_IsOccurringSkillBlock Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsOccurringSkillReflection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsOccurringSkillReflection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsOccurringSkillReflection");

	Params::BtlActor_IsOccurringSkillReflection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsOrgia
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsOrgia() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsOrgia");

	Params::BtlActor_IsOrgia Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsPersona
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsPersona() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsPersona");

	Params::BtlActor_IsPersona Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsPersonaEvolved
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsPersonaEvolved() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsPersonaEvolved");

	Params::BtlActor_IsPersonaEvolved Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsPlayableDyingAnim
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsPlayableDyingAnim() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsPlayableDyingAnim");

	Params::BtlActor_IsPlayableDyingAnim Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsPossibleAITarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsPossibleAITarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsPossibleAITarget");

	Params::BtlActor_IsPossibleAITarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsPossibleAlloutMember
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsPossibleAlloutMember() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsPossibleAlloutMember");

	Params::BtlActor_IsPossibleAlloutMember Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsPossibleEventTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsPossibleEventTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsPossibleEventTarget");

	Params::BtlActor_IsPossibleEventTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsPossibleTakeoverTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsPossibleTakeoverTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsPossibleTakeoverTarget");

	Params::BtlActor_IsPossibleTakeoverTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsRushAttack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsRushAttack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsRushAttack");

	Params::BtlActor_IsRushAttack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsSkillEffective
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsSkillEffective() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsSkillEffective");

	Params::BtlActor_IsSkillEffective Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsSkillFukaTheurgia
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsSkillFukaTheurgia() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsSkillFukaTheurgia");

	Params::BtlActor_IsSkillFukaTheurgia Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsSkillHit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsSkillHit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsSkillHit");

	Params::BtlActor_IsSkillHit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsSkillItemDumping
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsSkillItemDumping() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsSkillItemDumping");

	Params::BtlActor_IsSkillItemDumping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsSkillMixraid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsSkillMixraid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsSkillMixraid");

	Params::BtlActor_IsSkillMixraid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsSkillOrgia
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsSkillOrgia() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsSkillOrgia");

	Params::BtlActor_IsSkillOrgia Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsSkillPhysicalType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsSkillPhysicalType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsSkillPhysicalType");

	Params::BtlActor_IsSkillPhysicalType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsSkillTheurgia
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsSkillTheurgia() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsSkillTheurgia");

	Params::BtlActor_IsSkillTheurgia Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsSkillTrafuliEscape
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsSkillTrafuliEscape() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsSkillTrafuliEscape");

	Params::BtlActor_IsSkillTrafuliEscape Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsStrega
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsStrega() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsStrega");

	Params::BtlActor_IsStrega Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsSummonedEnemy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsSummonedEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsSummonedEnemy");

	Params::BtlActor_IsSummonedEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsUsingAllTargetSkill
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsUsingAllTargetSkill() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsUsingAllTargetSkill");

	Params::BtlActor_IsUsingAllTargetSkill Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsUsingDamageSkill
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsUsingDamageSkill() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsUsingDamageSkill");

	Params::BtlActor_IsUsingDamageSkill Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsUsingGroupTargetSkill
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsUsingGroupTargetSkill() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsUsingGroupTargetSkill");

	Params::BtlActor_IsUsingGroupTargetSkill Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsUsingOffensiveSkill
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsUsingOffensiveSkill() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsUsingOffensiveSkill");

	Params::BtlActor_IsUsingOffensiveSkill Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsUsingSummonSkill
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsUsingSummonSkill() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsUsingSummonSkill");

	Params::BtlActor_IsUsingSummonSkill Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsValidUnit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsValidUnit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsValidUnit");

	Params::BtlActor_IsValidUnit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.IsVelvet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::IsVelvet() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "IsVelvet");

	Params::BtlActor_IsVelvet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlActor.SyncSkillTimeline
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlActor::SyncSkillTimeline() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlActor", "SyncSkillTimeline");

	Params::BtlActor_SyncSkillTimeline Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlPersonaInterface.SetPersonaOwner
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABtlActor*                        PersonaOwner                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlPersonaInterface::SetPersonaOwner(class ABtlActor* PersonaOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPersonaInterface", "SetPersonaOwner");

	Params::BtlPersonaInterface_SetPersonaOwner Parms{};

	Parms.PersonaOwner = PersonaOwner;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlPersonaInterface.GetPersonaTransformFromSkillCondition
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABtlActor*                        PersonaOwner                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FTransform IBtlPersonaInterface::GetPersonaTransformFromSkillCondition(const class ABtlActor* PersonaOwner) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPersonaInterface", "GetPersonaTransformFromSkillCondition");

	Params::BtlPersonaInterface_GetPersonaTransformFromSkillCondition Parms{};

	Parms.PersonaOwner = PersonaOwner;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlAegisInterface.ClearAllAegisEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IBtlAegisInterface::ClearAllAegisEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlAegisInterface", "ClearAllAegisEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlAegisInterface.PlayOrgiaDeadEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IBtlAegisInterface::PlayOrgiaDeadEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlAegisInterface", "PlayOrgiaDeadEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlAegisInterface.SetupOrgia
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlAegisInterface::SetupOrgia(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlAegisInterface", "SetupOrgia");

	Params::BtlAegisInterface_SetupOrgia Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlAegisInterface.SetupOrgiaAttackEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlAegisInterface::SetupOrgiaAttackEffect(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlAegisInterface", "SetupOrgiaAttackEffect");

	Params::BtlAegisInterface_SetupOrgiaAttackEffect Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlAegisInterface.SetupOrgiaWaitingEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlAegisInterface::SetupOrgiaWaitingEffect(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlAegisInterface", "SetupOrgiaWaitingEffect");

	Params::BtlAegisInterface_SetupOrgiaWaitingEffect Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlAegisInterface.SetupOverheat
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlAegisInterface::SetupOverheat(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlAegisInterface", "SetupOverheat");

	Params::BtlAegisInterface_SetupOverheat Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.FclWeaponShopDrawActorBase.SetMcaCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMcaAsset*                        McaAsset                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Play                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFclWeaponShopDrawActorBase::SetMcaCamera(class UMcaAsset* McaAsset, bool Play)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FclWeaponShopDrawActorBase", "SetMcaCamera");

	Params::FclWeaponShopDrawActorBase_SetMcaCamera Parms{};

	Parms.McaAsset = McaAsset;
	Parms.Play = Play;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FclAntiqueShopDrawActor.EventMcaCameraCombine
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFclAntiqueShopDrawActor::EventMcaCameraCombine(int32 Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FclAntiqueShopDrawActor", "EventMcaCameraCombine");

	Params::FclAntiqueShopDrawActor_EventMcaCameraCombine Parms{};

	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.FclAntiqueShopDrawActor.EventMcaCameraExchange
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFclAntiqueShopDrawActor::EventMcaCameraExchange(int32 Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FclAntiqueShopDrawActor", "EventMcaCameraExchange");

	Params::FclAntiqueShopDrawActor_EventMcaCameraExchange Parms{};

	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.FclAntiqueShopDrawActor.EventMcaCameraInit
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFclAntiqueShopDrawActor::EventMcaCameraInit(int32 Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FclAntiqueShopDrawActor", "EventMcaCameraInit");

	Params::FclAntiqueShopDrawActor_EventMcaCameraInit Parms{};

	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlAIManagerComponent.DetermineAIAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlActionManagerComponent*       ActionManager                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlActor*                        Commander                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlAIManagerComponent::DetermineAIAction(class UBtlActionManagerComponent* ActionManager, class ABtlActor* Commander)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlAIManagerComponent", "DetermineAIAction");

	Params::BtlAIManagerComponent_DetermineAIAction Parms{};

	Parms.ActionManager = ActionManager;
	Parms.Commander = Commander;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlBossFortune.ProcAfterReturnRoulette
// (Final, Native, Private)

void UBtlBossFortune::ProcAfterReturnRoulette()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossFortune", "ProcAfterReturnRoulette");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.CallFieldKeyFreeEventLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FieldMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FieldMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalDay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECldTimeZone                            TimeZone                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerStartID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::CallFieldKeyFreeEventLevel(int32 FieldMajorID, int32 FieldMinorID, int32 TotalDay, ECldTimeZone TimeZone, int32 EventId, int32 PlayerStartID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "CallFieldKeyFreeEventLevel");

	Params::FldBpFuncLib_CallFieldKeyFreeEventLevel Parms{};

	Parms.FieldMajorID = FieldMajorID;
	Parms.FieldMinorID = FieldMinorID;
	Parms.TotalDay = TotalDay;
	Parms.TimeZone = TimeZone;
	Parms.EventId = EventId;
	Parms.PlayerStartID = PlayerStartID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.CallFieldLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FieldMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FieldMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalDay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECldTimeZone                            TimeZone                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::CallFieldLevel(int32 FieldMajorID, int32 FieldMinorID, int32 TotalDay, ECldTimeZone TimeZone, int32 StartID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "CallFieldLevel");

	Params::FldBpFuncLib_CallFieldLevel Parms{};

	Parms.FieldMajorID = FieldMajorID;
	Parms.FieldMinorID = FieldMinorID;
	Parms.TotalDay = TotalDay;
	Parms.TimeZone = TimeZone;
	Parms.StartID = StartID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.CheckLoadedCommonData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UFldBpFuncLib::CheckLoadedCommonData(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "CheckLoadedCommonData");

	Params::FldBpFuncLib_CheckLoadedCommonData Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.CheckLoadedCommonDataSyncBlock
// (Final, Native, Static, Public, BlueprintCallable)

void UFldBpFuncLib::CheckLoadedCommonDataSyncBlock()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "CheckLoadedCommonDataSyncBlock");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.CheckRegistedSubLevel
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LevelName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFldBpRetBool                           Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::CheckRegistedSubLevel(const class UObject* WorldContextObject, const class FString& LevelName, EFldBpRetBool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "CheckRegistedSubLevel");

	Params::FldBpFuncLib_CheckRegistedSubLevel Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelName = std::move(LevelName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function xrd777.FldBpFuncLib.FldCommitViewports
// (Final, Native, Static, Public, BlueprintCallable)

void UFldBpFuncLib::FldCommitViewports()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "FldCommitViewports");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.FldDispCriAtomExDebugResourcesInfo
// (Final, Native, Static, Public, BlueprintCallable)

void UFldBpFuncLib::FldDispCriAtomExDebugResourcesInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "FldDispCriAtomExDebugResourcesInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.FldGetPlayerActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UFldBpFuncLib::FldGetPlayerActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "FldGetPlayerActor");

	Params::FldBpFuncLib_FldGetPlayerActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldBpFuncLib.FldLibUpdateCmmNpcLayoutTable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       SubLevelTable                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       DataTable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::FldLibUpdateCmmNpcLayoutTable(class UDataTable* SubLevelTable, class UDataTable* DataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "FldLibUpdateCmmNpcLayoutTable");

	Params::FldBpFuncLib_FldLibUpdateCmmNpcLayoutTable Parms{};

	Parms.SubLevelTable = SubLevelTable;
	Parms.DataTable = DataTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.FldLibUpdateNpcLayoutTable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       SubLevelTable                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       DataTable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::FldLibUpdateNpcLayoutTable(class UDataTable* SubLevelTable, class UDataTable* DataTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "FldLibUpdateNpcLayoutTable");

	Params::FldBpFuncLib_FldLibUpdateNpcLayoutTable Parms{};

	Parms.SubLevelTable = SubLevelTable;
	Parms.DataTable = DataTable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.FldSetDisableNpcActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   NpcMajorID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NpcMinorID                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ToHide                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::FldSetDisableNpcActor(int32 NpcMajorID, int32 NpcMinorID, bool ToHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "FldSetDisableNpcActor");

	Params::FldBpFuncLib_FldSetDisableNpcActor Parms{};

	Parms.NpcMajorID = NpcMajorID;
	Parms.NpcMinorID = NpcMinorID;
	Parms.ToHide = ToHide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.FldSoundManagerSetAisacValue_FRONT_VELVETROOM
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ControlValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::FldSoundManagerSetAisacValue_FRONT_VELVETROOM(float ControlValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "FldSoundManagerSetAisacValue_FRONT_VELVETROOM");

	Params::FldBpFuncLib_FldSoundManagerSetAisacValue_FRONT_VELVETROOM Parms{};

	Parms.ControlValue = ControlValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.GetLocalCounter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             CntName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UFldBpFuncLib::GetLocalCounter(class FName CntName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "GetLocalCounter");

	Params::FldBpFuncLib_GetLocalCounter Parms{};

	Parms.CntName = CntName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldBpFuncLib.GetLocalFlag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             FlagName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFldBpRetFlag                           RetFlag                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::GetLocalFlag(class FName FlagName, EFldBpRetFlag* RetFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "GetLocalFlag");

	Params::FldBpFuncLib_GetLocalFlag Parms{};

	Parms.FlagName = FlagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RetFlag != nullptr)
		*RetFlag = Parms.RetFlag;
}


// Function xrd777.FldBpFuncLib.GetPersistentType
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FieldMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FieldMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFldLoadPersistentType                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFldLoadPersistentType UFldBpFuncLib::GetPersistentType(int32 FieldMajorID, int32 FieldMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "GetPersistentType");

	Params::FldBpFuncLib_GetPersistentType Parms{};

	Parms.FieldMajorID = FieldMajorID;
	Parms.FieldMinorID = FieldMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldBpFuncLib.HideSubLevellOrigin
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LevelAssetPath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFldBpFuncLib::HideSubLevellOrigin(const class UObject* WorldContextObject, const class FString& LevelAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "HideSubLevellOrigin");

	Params::FldBpFuncLib_HideSubLevellOrigin Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelAssetPath = std::move(LevelAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldBpFuncLib.RequestLoadSubLevelOrigin
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LevelAssetPath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::RequestLoadSubLevelOrigin(const class UObject* WorldContextObject, const class FString& LevelAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "RequestLoadSubLevelOrigin");

	Params::FldBpFuncLib_RequestLoadSubLevelOrigin Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelAssetPath = std::move(LevelAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.RequestUnloadSubLevellOrigin
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LevelAssetPath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::RequestUnloadSubLevellOrigin(const class UObject* WorldContextObject, const class FString& LevelAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "RequestUnloadSubLevellOrigin");

	Params::FldBpFuncLib_RequestUnloadSubLevellOrigin Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelAssetPath = std::move(LevelAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.SetLocalCounter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             CntName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::SetLocalCounter(class FName CntName, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "SetLocalCounter");

	Params::FldBpFuncLib_SetLocalCounter Parms{};

	Parms.CntName = CntName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.SetLocalFlag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             FlagName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnOff                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::SetLocalFlag(class FName FlagName, bool OnOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "SetLocalFlag");

	Params::FldBpFuncLib_SetLocalFlag Parms{};

	Parms.FlagName = FlagName;
	Parms.OnOff = OnOff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.SetSkelMeshCompUpdateAnimationInEditor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Component                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NewUpdateState                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldBpFuncLib::SetSkelMeshCompUpdateAnimationInEditor(class USkeletalMeshComponent* Component, const bool NewUpdateState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "SetSkelMeshCompUpdateAnimationInEditor");

	Params::FldBpFuncLib_SetSkelMeshCompUpdateAnimationInEditor Parms{};

	Parms.Component = Component;
	Parms.NewUpdateState = NewUpdateState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.ShowSubLevellOrigin
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           LevelAssetPath                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFldBpFuncLib::ShowSubLevellOrigin(const class UObject* WorldContextObject, const class FString& LevelAssetPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "ShowSubLevellOrigin");

	Params::FldBpFuncLib_ShowSubLevellOrigin Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelAssetPath = std::move(LevelAssetPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldBpFuncLib.StartFadeIN
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Frame                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UFldBpFuncLib::StartFadeIN(int32 Type, int32 Frame, const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "StartFadeIN");

	Params::FldBpFuncLib_StartFadeIN Parms{};

	Parms.Type = Type;
	Parms.Frame = Frame;
	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.StartFadeOUT
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Frame                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UFldBpFuncLib::StartFadeOUT(int32 Type, int32 Frame, const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "StartFadeOUT");

	Params::FldBpFuncLib_StartFadeOUT Parms{};

	Parms.Type = Type;
	Parms.Frame = Frame;
	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldBpFuncLib.SyncFade
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UFldBpFuncLib::SyncFade(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldBpFuncLib", "SyncFade");

	Params::FldBpFuncLib_SyncFade Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDataInheritanceActor.CallStatePatternEndDelicate
// (Native, Public)

void AUIDataInheritanceActor::CallStatePatternEndDelicate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDataInheritanceActor", "CallStatePatternEndDelicate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDataInheritanceActor.OnSelectedChoise
// (Final, Native, Public)

void AUIDataInheritanceActor::OnSelectedChoise()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDataInheritanceActor", "OnSelectedChoise");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlBossHermitInterface.SetVisibleChargeEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    StrongEffect                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossHermitInterface::SetVisibleChargeEffect(bool Visible, bool StrongEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossHermitInterface", "SetVisibleChargeEffect");

	Params::BtlBossHermitInterface_SetVisibleChargeEffect Parms{};

	Parms.Visible = Visible;
	Parms.StrongEffect = StrongEffect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossHermitInterface.SetVisibleChargeEffectFromLevel
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossHermitInterface::SetVisibleChargeEffectFromLevel(bool Visible, int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossHermitInterface", "SetVisibleChargeEffectFromLevel");

	Params::BtlBossHermitInterface_SetVisibleChargeEffectFromLevel Parms{};

	Parms.Visible = Visible;
	Parms.Level = Level;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossHermitInterface.SetVisibleChargeStartEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossHermitInterface::SetVisibleChargeStartEffect(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossHermitInterface", "SetVisibleChargeStartEffect");

	Params::BtlBossHermitInterface_SetVisibleChargeStartEffect Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.FldAnimalCompCore.CreateAnimalActor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UWorld*                           InWorld                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AAppPropsCore>        InClassPtr                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       InTransform                                            (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           InOwner                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AAppPropsCore*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AAppPropsCore* UFldAnimalCompCore::CreateAnimalActor(class UWorld* InWorld, int32 InIndex, TSubclassOf<class AAppPropsCore> InClassPtr, const struct FTransform& InTransform, class AActor* InOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldAnimalCompCore", "CreateAnimalActor");

	Params::FldAnimalCompCore_CreateAnimalActor Parms{};

	Parms.InWorld = InWorld;
	Parms.InIndex = InIndex;
	Parms.InClassPtr = InClassPtr;
	Parms.InTransform = std::move(InTransform);
	Parms.InOwner = InOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldHitCharacter.EndDelicate_ProcHeroPrevAction
// (Final, Native, Public)

void AFldHitCharacter::EndDelicate_ProcHeroPrevAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitCharacter", "EndDelicate_ProcHeroPrevAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldHitCharacter.EndDelicate_ReturnBaseRotator
// (Final, Native, Public)

void AFldHitCharacter::EndDelicate_ReturnBaseRotator()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitCharacter", "EndDelicate_ReturnBaseRotator");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldHitCharacter.EndDelicate_RotationToPlayer
// (Final, Native, Public)

void AFldHitCharacter::EndDelicate_RotationToPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitCharacter", "EndDelicate_RotationToPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldHitCharacter.EndDelicate_SyncMotion
// (Final, Native, Public)

void AFldHitCharacter::EndDelicate_SyncMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitCharacter", "EndDelicate_SyncMotion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldHitCharacter.GetCharaModelNpcComp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ModelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UFldNpcComp*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFldNpcComp* AFldHitCharacter::GetCharaModelNpcComp(int32 ModelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitCharacter", "GetCharaModelNpcComp");

	Params::FldHitCharacter_GetCharaModelNpcComp Parms{};

	Parms.ModelIndex = ModelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldHitCharacter.GetCharaModelNum
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AFldHitCharacter::GetCharaModelNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitCharacter", "GetCharaModelNum");

	Params::FldHitCharacter_GetCharaModelNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlBossNyxAvatarInterface.FadeoutFeatherAnim
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimSeconds                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossNyxAvatarInterface::FadeoutFeatherAnim(float AnimSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossNyxAvatarInterface", "FadeoutFeatherAnim");

	Params::BtlBossNyxAvatarInterface_FadeoutFeatherAnim Parms{};

	Parms.AnimSeconds = AnimSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossNyxAvatarInterface.FadeoutWeaponEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimSeconds                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossNyxAvatarInterface::FadeoutWeaponEffect(float AnimSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossNyxAvatarInterface", "FadeoutWeaponEffect");

	Params::BtlBossNyxAvatarInterface_FadeoutWeaponEffect Parms{};

	Parms.AnimSeconds = AnimSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossNyxAvatarInterface.PlayFeatherAnim
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimSeconds                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossNyxAvatarInterface::PlayFeatherAnim(float AnimSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossNyxAvatarInterface", "PlayFeatherAnim");

	Params::BtlBossNyxAvatarInterface_PlayFeatherAnim Parms{};

	Parms.AnimSeconds = AnimSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossNyxAvatarInterface.SetVisibleWeaponEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossNyxAvatarInterface::SetVisibleWeaponEffect(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossNyxAvatarInterface", "SetVisibleWeaponEffect");

	Params::BtlBossNyxAvatarInterface_SetVisibleWeaponEffect Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossNyxCoreInterface.LoadHeroAnimationForNyxCore
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IBtlBossNyxCoreInterface::LoadHeroAnimationForNyxCore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossNyxCoreInterface", "LoadHeroAnimationForNyxCore");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlBossPriestess.TimeoverEventEndCallback
// (Final, Native, Public)

void UBtlBossPriestess::TimeoverEventEndCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossPriestess", "TimeoverEventEndCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlBossStregaInterface.PlayJinDrugLoopEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFadeIn                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossStregaInterface::PlayJinDrugLoopEffect(bool IsFadeIn, float FadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossStregaInterface", "PlayJinDrugLoopEffect");

	Params::BtlBossStregaInterface_PlayJinDrugLoopEffect Parms{};

	Parms.IsFadeIn = IsFadeIn;
	Parms.FadeTime = FadeTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossStregaInterface.SetTakayaTheurgiaMode
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossStregaInterface::SetTakayaTheurgiaMode(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossStregaInterface", "SetTakayaTheurgiaMode");

	Params::BtlBossStregaInterface_SetTakayaTheurgiaMode Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.PreloadVolume.LoadComplete
// (Final, Native, Public)

void APreloadVolume::LoadComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreloadVolume", "LoadComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PreloadVolume.OnOverlapBegin
// (Final, Native, Public)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APreloadVolume::OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreloadVolume", "OnOverlapBegin");

	Params::PreloadVolume_OnOverlapBegin Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PreloadVolume.OnOverlapEnd
// (Final, Native, Public)
// Parameters:
// class AActor*                           OverlappedActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APreloadVolume::OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreloadVolume", "OnOverlapEnd");

	Params::PreloadVolume_OnOverlapEnd Parms{};

	Parms.OverlappedActor = OverlappedActor;
	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlBossUraBossInterface.AttachGunModel
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsAttachGunModel                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossUraBossInterface::AttachGunModel(bool IsAttachGunModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossUraBossInterface", "AttachGunModel");

	Params::BtlBossUraBossInterface_AttachGunModel Parms{};

	Parms.IsAttachGunModel = IsAttachGunModel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossUraBossInterface.AttachSkillCamera
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           InCameraActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossUraBossInterface::AttachSkillCamera(class AActor* InCameraActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossUraBossInterface", "AttachSkillCamera");

	Params::BtlBossUraBossInterface_AttachSkillCamera Parms{};

	Parms.InCameraActor = InCameraActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlBossUraBossInterface.IsUsingCutinFlag
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IBtlBossUraBossInterface::IsUsingCutinFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossUraBossInterface", "IsUsingCutinFlag");

	Params::BtlBossUraBossInterface_IsUsingCutinFlag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlBossUraBossInterface.SetIsUsingCutin
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsUsingCutin                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBtlBossUraBossInterface::SetIsUsingCutin(bool IsUsingCutin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlBossUraBossInterface", "SetIsUsingCutin");

	Params::BtlBossUraBossInterface_SetIsUsingCutin Parms{};

	Parms.IsUsingCutin = IsUsingCutin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlCalcBase.CalcAccuracyRate
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcAccuracyRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcAccuracyRate");

	Params::BtlCalcBase_CalcAccuracyRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CalcAllOutAttackDamage
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcAllOutAttackDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcAllOutAttackDamage");

	Params::BtlCalcBase_CalcAllOutAttackDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CalcBadStatusHitRate
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcBadStatusHitRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcBadStatusHitRate");

	Params::BtlCalcBase_CalcBadStatusHitRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CalcBadStatusRecoveryRate
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcBadStatusRecoveryRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcBadStatusRecoveryRate");

	Params::BtlCalcBase_CalcBadStatusRecoveryRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CalcCriticalHitRate
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcCriticalHitRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcCriticalHitRate");

	Params::BtlCalcBase_CalcCriticalHitRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CalcDownRate
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcDownRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcDownRate");

	Params::BtlCalcBase_CalcDownRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CalcEscapeRate
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcEscapeRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcEscapeRate");

	Params::BtlCalcBase_CalcEscapeRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CalcExpPersonaLevelUp
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultLevel                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcExpPersonaLevelUp(float Level, float DefaultLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcExpPersonaLevelUp");

	Params::BtlCalcBase_CalcExpPersonaLevelUp Parms{};

	Parms.Level = Level;
	Parms.DefaultLevel = DefaultLevel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CalcHealRecovery
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcHealRecovery()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcHealRecovery");

	Params::BtlCalcBase_CalcHealRecovery Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CalcMagicDamage
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcMagicDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcMagicDamage");

	Params::BtlCalcBase_CalcMagicDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CalcPhysicalDamage
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcPhysicalDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcPhysicalDamage");

	Params::BtlCalcBase_CalcPhysicalDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CalcRushDamage
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcRushDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcRushDamage");

	Params::BtlCalcBase_CalcRushDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CalcTheurgiaSkillDamage
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::CalcTheurgiaSkillDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CalcTheurgiaSkillDamage");

	Params::BtlCalcBase_CalcTheurgiaSkillDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetAllOutAttackSwoonRate
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetAllOutAttackSwoonRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetAllOutAttackSwoonRate");

	Params::BtlCalcBase_GetAllOutAttackSwoonRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetDamageRateToEnemy
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetDamageRateToEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetDamageRateToEnemy");

	Params::BtlCalcBase_GetDamageRateToEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetDamageRateToPlayer
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetDamageRateToPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetDamageRateToPlayer");

	Params::BtlCalcBase_GetDamageRateToPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetDownAgilityForEnemy
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlCalcBase::GetDownAgilityForEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetDownAgilityForEnemy");

	Params::BtlCalcBase_GetDownAgilityForEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetEnemyCriticalDamageRate
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetEnemyCriticalDamageRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetEnemyCriticalDamageRate");

	Params::BtlCalcBase_GetEnemyCriticalDamageRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetEnemyWeakDamageRate
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetEnemyWeakDamageRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetEnemyWeakDamageRate");

	Params::BtlCalcBase_GetEnemyWeakDamageRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetExpRate
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetExpRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetExpRate");

	Params::BtlCalcBase_GetExpRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetMoneyRate
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetMoneyRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetMoneyRate");

	Params::BtlCalcBase_GetMoneyRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetPlayerCriticalDamageRate
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetPlayerCriticalDamageRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetPlayerCriticalDamageRate");

	Params::BtlCalcBase_GetPlayerCriticalDamageRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetPlayerWeakDamageRate
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetPlayerWeakDamageRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetPlayerWeakDamageRate");

	Params::BtlCalcBase_GetPlayerWeakDamageRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetSaleMerchMoneyRate
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetSaleMerchMoneyRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetSaleMerchMoneyRate");

	Params::BtlCalcBase_GetSaleMerchMoneyRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.AttackRatioByANGER
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::AttackRatioByANGER() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "AttackRatioByANGER");

	Params::BtlCalcBase_AttackRatioByANGER Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.AttackRatioByOVERLIMIT
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::AttackRatioByOVERLIMIT() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "AttackRatioByOVERLIMIT");

	Params::BtlCalcBase_AttackRatioByOVERLIMIT Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.AttackRatioByUPSET
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::AttackRatioByUPSET() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "AttackRatioByUPSET");

	Params::BtlCalcBase_AttackRatioByUPSET Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CheckAttackerIsEnemy
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlCalcBase::CheckAttackerIsEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CheckAttackerIsEnemy");

	Params::BtlCalcBase_CheckAttackerIsEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CheckSkillIsAttack
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlCalcBase::CheckSkillIsAttack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CheckSkillIsAttack");

	Params::BtlCalcBase_CheckSkillIsAttack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.CheckTargetIsEnemy
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlCalcBase::CheckTargetIsEnemy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "CheckTargetIsEnemy");

	Params::BtlCalcBase_CheckTargetIsEnemy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.DamageRatioByANGER
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::DamageRatioByANGER() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "DamageRatioByANGER");

	Params::BtlCalcBase_DamageRatioByANGER Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.DamageRatioByOVERHEAT
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::DamageRatioByOVERHEAT() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "DamageRatioByOVERHEAT");

	Params::BtlCalcBase_DamageRatioByOVERHEAT Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.DamageRatioByOVERLIMIT
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::DamageRatioByOVERLIMIT() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "DamageRatioByOVERLIMIT");

	Params::BtlCalcBase_DamageRatioByOVERLIMIT Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.DamageRatioByUPSET
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::DamageRatioByUPSET() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "DamageRatioByUPSET");

	Params::BtlCalcBase_DamageRatioByUPSET Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetAttackSupportRatio
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    IsPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Point                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlCalcBase::GetAttackSupportRatio(bool IsPlayer, int32 Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetAttackSupportRatio");

	Params::BtlCalcBase_GetAttackSupportRatio Parms{};

	Parms.IsPlayer = IsPlayer;
	Parms.Point = Point;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetDefenseSupportRatio
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    IsPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Point                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlCalcBase::GetDefenseSupportRatio(bool IsPlayer, int32 Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetDefenseSupportRatio");

	Params::BtlCalcBase_GetDefenseSupportRatio Parms{};

	Parms.IsPlayer = IsPlayer;
	Parms.Point = Point;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetDifficulty
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlGameDifficulty                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlGameDifficulty ABtlCalcBase::GetDifficulty() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetDifficulty");

	Params::BtlCalcBase_GetDifficulty Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetFullmoonSkillPowerRatio
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   MoonAge                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetFullmoonSkillPowerRatio(int32 MoonAge) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetFullmoonSkillPowerRatio");

	Params::BtlCalcBase_GetFullmoonSkillPowerRatio Parms{};

	Parms.MoonAge = MoonAge;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetLevelAccuracyRatio
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   LevelAttacker                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LevelTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetLevelAccuracyRatio(int32 LevelAttacker, int32 LevelTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetLevelAccuracyRatio");

	Params::BtlCalcBase_GetLevelAccuracyRatio Parms{};

	Parms.LevelAttacker = LevelAttacker;
	Parms.LevelTarget = LevelTarget;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetLevelDamageBossRatio
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   LevelAttacker                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LevelTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetLevelDamageBossRatio(int32 LevelAttacker, int32 LevelTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetLevelDamageBossRatio");

	Params::BtlCalcBase_GetLevelDamageBossRatio Parms{};

	Parms.LevelAttacker = LevelAttacker;
	Parms.LevelTarget = LevelTarget;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetLevelDamageRatio
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   LevelAttacker                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LevelTarget                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetLevelDamageRatio(int32 LevelAttacker, int32 LevelTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetLevelDamageRatio");

	Params::BtlCalcBase_GetLevelDamageRatio Parms{};

	Parms.LevelAttacker = LevelAttacker;
	Parms.LevelTarget = LevelTarget;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetLevelExpRatio
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   LevelDifference                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetLevelExpRatio(int32 LevelDifference) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetLevelExpRatio");

	Params::BtlCalcBase_GetLevelExpRatio Parms{};

	Parms.LevelDifference = LevelDifference;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetMagicBonusDamage
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   MagicAttacker                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlCalcBase::GetMagicBonusDamage(int32 MagicAttacker) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetMagicBonusDamage");

	Params::BtlCalcBase_GetMagicBonusDamage Parms{};

	Parms.MagicAttacker = MagicAttacker;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetMagicBonusRecovery
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   MagicAttacker                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlCalcBase::GetMagicBonusRecovery(int32 MagicAttacker) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetMagicBonusRecovery");

	Params::BtlCalcBase_GetMagicBonusRecovery Parms{};

	Parms.MagicAttacker = MagicAttacker;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetNewmoonSkillPowerRatio
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   MoonAge                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetNewmoonSkillPowerRatio(int32 MoonAge) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetNewmoonSkillPowerRatio");

	Params::BtlCalcBase_GetNewmoonSkillPowerRatio Parms{};

	Parms.MoonAge = MoonAge;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetParam
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlCalcParamType                       Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetParam(EBtlCalcParamType Type, int32 Param) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetParam");

	Params::BtlCalcBase_GetParam Parms{};

	Parms.Type = Type;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetShuffleTimeMajorPercent
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   EncountNumFromLastMajor                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::GetShuffleTimeMajorPercent(int32 EncountNumFromLastMajor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetShuffleTimeMajorPercent");

	Params::BtlCalcBase_GetShuffleTimeMajorPercent Parms{};

	Parms.EncountNumFromLastMajor = EncountNumFromLastMajor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetShuffleTimeOccurPercent
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlCalcBase::GetShuffleTimeOccurPercent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetShuffleTimeOccurPercent");

	Params::BtlCalcBase_GetShuffleTimeOccurPercent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.GetSpeedSupportRatio
// (Event, Public, BlueprintEvent, Const)
// Parameters:
// bool                                    IsPlayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Point                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlCalcBase::GetSpeedSupportRatio(bool IsPlayer, int32 Point) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "GetSpeedSupportRatio");

	Params::BtlCalcBase_GetSpeedSupportRatio Parms{};

	Parms.IsPlayer = IsPlayer;
	Parms.Point = Point;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.RecoveryRatioFromANGER
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::RecoveryRatioFromANGER() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "RecoveryRatioFromANGER");

	Params::BtlCalcBase_RecoveryRatioFromANGER Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.RecoveryRatioFromCHARM
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::RecoveryRatioFromCHARM() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "RecoveryRatioFromCHARM");

	Params::BtlCalcBase_RecoveryRatioFromCHARM Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.RecoveryRatioFromFEAR
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::RecoveryRatioFromFEAR() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "RecoveryRatioFromFEAR");

	Params::BtlCalcBase_RecoveryRatioFromFEAR Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.RecoveryRatioFromPANIC
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::RecoveryRatioFromPANIC() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "RecoveryRatioFromPANIC");

	Params::BtlCalcBase_RecoveryRatioFromPANIC Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlCalcBase.RecoveryRatioFromUPSET
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlCalcBase::RecoveryRatioFromUPSET() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCalcBase", "RecoveryRatioFromUPSET");

	Params::BtlCalcBase_RecoveryRatioFromUPSET Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.SeqBpFuncLib.CallAstreaProgress
// (Final, Native, Static, Public, BlueprintCallable)

void USeqBpFuncLib::CallAstreaProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "CallAstreaProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SeqBpFuncLib.CallBattle
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   EncountID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USeqBpFuncLib::CallBattle(int32 EncountID, const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "CallBattle");

	Params::SeqBpFuncLib_CallBattle Parms{};

	Parms.EncountID = EncountID;
	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SeqBpFuncLib.CallCalendar
// (Final, Native, Static, Public, BlueprintCallable)

void USeqBpFuncLib::CallCalendar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "CallCalendar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SeqBpFuncLib.CallEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   EventMajor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USeqBpFuncLib::CallEvent(int32 EventMajor, int32 EventMinor, const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "CallEvent");

	Params::SeqBpFuncLib_CallEvent Parms{};

	Parms.EventMajor = EventMajor;
	Parms.EventMinor = EventMinor;
	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SeqBpFuncLib.CallEventCmm
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   EventMajor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EventMinor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USeqBpFuncLib::CallEventCmm(int32 EventMajor, int32 EventMinor, const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "CallEventCmm");

	Params::SeqBpFuncLib_CallEventCmm Parms{};

	Parms.EventMajor = EventMajor;
	Parms.EventMinor = EventMinor;
	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SeqBpFuncLib.CallField
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FieldMajor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FieldMinor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerStartID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USeqBpFuncLib::CallField(int32 FieldMajor, int32 FieldMinor, int32 PlayerStartID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "CallField");

	Params::SeqBpFuncLib_CallField Parms{};

	Parms.FieldMajor = FieldMajor;
	Parms.FieldMinor = FieldMinor;
	Parms.PlayerStartID = PlayerStartID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SeqBpFuncLib.CallItemShop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USeqBpFuncLib::CallItemShop(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "CallItemShop");

	Params::SeqBpFuncLib_CallItemShop Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SeqBpFuncLib.CallKeyfreeEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FieldMajor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FieldMinor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   KeyfreeEventID                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerStartID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USeqBpFuncLib::CallKeyfreeEvent(int32 FieldMajor, int32 FieldMinor, int32 KeyfreeEventID, int32 PlayerStartID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "CallKeyfreeEvent");

	Params::SeqBpFuncLib_CallKeyfreeEvent Parms{};

	Parms.FieldMajor = FieldMajor;
	Parms.FieldMinor = FieldMinor;
	Parms.KeyfreeEventID = KeyfreeEventID;
	Parms.PlayerStartID = PlayerStartID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SeqBpFuncLib.CallTitle
// (Final, Native, Static, Public, BlueprintCallable)

void USeqBpFuncLib::CallTitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "CallTitle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SeqBpFuncLib.CallWeaponShop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void USeqBpFuncLib::CallWeaponShop(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "CallWeaponShop");

	Params::SeqBpFuncLib_CallWeaponShop Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SeqBpFuncLib.CheckAstreaProgressOver
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CheckProgress                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USeqBpFuncLib::CheckAstreaProgressOver(int32 CheckProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "CheckAstreaProgressOver");

	Params::SeqBpFuncLib_CheckAstreaProgressOver Parms{};

	Parms.CheckProgress = CheckProgress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SeqBpFuncLib.GoToTartarus
// (Final, Native, Static, Public, BlueprintCallable)

void USeqBpFuncLib::GoToTartarus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "GoToTartarus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SeqBpFuncLib.StartGameSequence
// (Final, Native, Static, Public, BlueprintCallable)

void USeqBpFuncLib::StartGameSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SeqBpFuncLib", "StartGameSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCamera.GetCameraMainCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* ABtlCamera::GetCameraMainCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCamera", "GetCameraMainCharacter");

	Params::BtlCamera_GetCameraMainCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCamera.GetCameraTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABtlActor*> ABtlCamera::GetCameraTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCamera", "GetCameraTargets");

	Params::BtlCamera_GetCameraTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCamera.SetCameraMainCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        CameraMainCharacter_0                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlCamera::SetCameraMainCharacter(class ABtlActor* CameraMainCharacter_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCamera", "SetCameraMainCharacter");

	Params::BtlCamera_SetCameraMainCharacter Parms{};

	Parms.CameraMainCharacter_0 = CameraMainCharacter_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCamera.SetCameraTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                Targets                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void ABtlCamera::SetCameraTargets(const TArray<class ABtlActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCamera", "SetCameraTargets");

	Params::BtlCamera_SetCameraTargets Parms{};

	Parms.Targets = std::move(Targets);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.AddUtensilEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AAppActor*                        Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::AddUtensilEffect(class AAppActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "AddUtensilEffect");

	Params::BtlCoreComponent_AddUtensilEffect Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.AffectHighAnalyze
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        PTarget                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::AffectHighAnalyze(class ABtlActor* PTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "AffectHighAnalyze");

	Params::BtlCoreComponent_AffectHighAnalyze Parms{};

	Parms.PTarget = PTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.AffectRetry
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::AffectRetry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "AffectRetry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.BattleFadeIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ForceRapid                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::BattleFadeIn(bool ForceRapid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "BattleFadeIn");

	Params::BtlCoreComponent_BattleFadeIn Parms{};

	Parms.ForceRapid = ForceRapid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.BattleFadeOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ForceRapid                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    White                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::BattleFadeOut(bool ForceRapid, bool White)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "BattleFadeOut");

	Params::BtlCoreComponent_BattleFadeOut Parms{};

	Parms.ForceRapid = ForceRapid;
	Parms.White = White;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.BattleFadeOutSync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::BattleFadeOutSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "BattleFadeOutSync");

	Params::BtlCoreComponent_BattleFadeOutSync Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.BeginLoadingRecord
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlLoadingTimeCategory                 Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::BeginLoadingRecord(EBtlLoadingTimeCategory Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "BeginLoadingRecord");

	Params::BtlCoreComponent_BeginLoadingRecord Parms{};

	Parms.Category = Category;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.CallCapture
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::CallCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CallCapture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.CallDebugMonitor
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::CallDebugMonitor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CallDebugMonitor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.CallDebugSkillSelect
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::CallDebugSkillSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CallDebugSkillSelect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.CallDebugWindow
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::CallDebugWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CallDebugWindow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.CallInfoForSerialEncount
// (Final, Native, Private, BlueprintCallable)

void UBtlCoreComponent::CallInfoForSerialEncount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CallInfoForSerialEncount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.CallResultCapture
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::CallResultCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CallResultCapture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.CheckBattleInProgress
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckBattleInProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckBattleInProgress");

	Params::BtlCoreComponent_CheckBattleInProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckBattleProgressToNextBattle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckBattleProgressToNextBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckBattleProgressToNextBattle");

	Params::BtlCoreComponent_CheckBattleProgressToNextBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckEventBattleFinish
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckEventBattleFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckEventBattleFinish");

	Params::BtlCoreComponent_CheckEventBattleFinish Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckKnockedoutHero
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckKnockedoutHero()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckKnockedoutHero");

	Params::BtlCoreComponent_CheckKnockedoutHero Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.ClearUIForSerialEncount
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::ClearUIForSerialEncount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "ClearUIForSerialEncount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.ClearUtensilEffect
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::ClearUtensilEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "ClearUtensilEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.CoordinateBattleCondition
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBtlEncountParam                 EncountParam                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBtlCoreComponent::CoordinateBattleCondition(const struct FBtlEncountParam& EncountParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CoordinateBattleCondition");

	Params::BtlCoreComponent_CoordinateBattleCondition Parms{};

	Parms.EncountParam = std::move(EncountParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.CoordinateEncountParam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FBtlEncountParam                 Encount                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FBtlEncountParam                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBtlEncountParam UBtlCoreComponent::CoordinateEncountParam(const struct FBtlEncountParam& Encount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CoordinateEncountParam");

	Params::BtlCoreComponent_CoordinateEncountParam Parms{};

	Parms.Encount = std::move(Encount);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.DebugAllCharacterToDown
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::DebugAllCharacterToDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "DebugAllCharacterToDown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.DebugAllCharacterToDying
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::DebugAllCharacterToDying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "DebugAllCharacterToDying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.DebugSetCustomDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::DebugSetCustomDamage(int32 Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "DebugSetCustomDamage");

	Params::BtlCoreComponent_DebugSetCustomDamage Parms{};

	Parms.Damage = Damage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.DeleteCapture
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::DeleteCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "DeleteCapture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.DestroyAllBattleActor
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::DestroyAllBattleActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "DestroyAllBattleActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.DoInterruptProcessEscape
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::DoInterruptProcessEscape()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "DoInterruptProcessEscape");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.FadeoutBGM
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// int32                                   FadeFrame                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::FadeoutBGM(int32 FadeFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "FadeoutBGM");

	Params::BtlCoreComponent_FadeoutBGM Parms{};

	Parms.FadeFrame = FadeFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.FinalizeActionTurn
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::FinalizeActionTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "FinalizeActionTurn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.FinalProcessAfterGameover
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::FinalProcessAfterGameover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "FinalProcessAfterGameover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.FinishLoadingRecord
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlLoadingTimeCategory                 Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::FinishLoadingRecord(EBtlLoadingTimeCategory Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "FinishLoadingRecord");

	Params::BtlCoreComponent_FinishLoadingRecord Parms{};

	Parms.Category = Category;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.GetAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* UBtlCoreComponent::GetAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetAction");

	Params::BtlCoreComponent_GetAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetAllCharacterList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABtlActor*> UBtlCoreComponent::GetAllCharacterList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetAllCharacterList");

	Params::BtlCoreComponent_GetAllCharacterList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetBossCameraTable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UBtlCoreComponent::GetBossCameraTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetBossCameraTable");

	Params::BtlCoreComponent_GetBossCameraTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetEncountParamForBP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FBtlEncountParam                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBtlEncountParam UBtlCoreComponent::GetEncountParamForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetEncountParamForBP");

	Params::BtlCoreComponent_GetEncountParamForBP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetEnemyFormationName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBtlCoreComponent::GetEnemyFormationName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetEnemyFormationName");

	Params::BtlCoreComponent_GetEnemyFormationName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetEnemyList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABtlActor*> UBtlCoreComponent::GetEnemyList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetEnemyList");

	Params::BtlCoreComponent_GetEnemyList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetEventMainAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* UBtlCoreComponent::GetEventMainAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetEventMainAction");

	Params::BtlCoreComponent_GetEventMainAction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetHero
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* UBtlCoreComponent::GetHero()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetHero");

	Params::BtlCoreComponent_GetHero Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetNextAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* UBtlCoreComponent::GetNextAction(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetNextAction");

	Params::BtlCoreComponent_GetNextAction Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetPhase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlPhase*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlPhase* UBtlCoreComponent::GetPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetPhase");

	Params::BtlCoreComponent_GetPhase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetPlayerList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABtlActor*> UBtlCoreComponent::GetPlayerList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetPlayerList");

	Params::BtlCoreComponent_GetPlayerList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetResultMainPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* UBtlCoreComponent::GetResultMainPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetResultMainPlayer");

	Params::BtlCoreComponent_GetResultMainPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.InitializeBattle
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::InitializeBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "InitializeBattle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.InitializeBattleForNextBattle
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::InitializeBattleForNextBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "InitializeBattleForNextBattle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.InitializeOrder
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::InitializeOrder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "InitializeOrder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.InitProcessBeforeFirstTurn
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::InitProcessBeforeFirstTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "InitProcessBeforeFirstTurn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.LoadData
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBtlEncountParam                 EncountParam                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBtlCoreComponent::LoadData(const struct FBtlEncountParam& EncountParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "LoadData");

	Params::BtlCoreComponent_LoadData Parms{};

	Parms.EncountParam = std::move(EncountParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.LoadDataForSerialEncount
// (Final, Native, Private, BlueprintCallable)

void UBtlCoreComponent::LoadDataForSerialEncount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "LoadDataForSerialEncount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.LoadEnemyData
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBtlEncountParam                 EncountParam                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBtlCoreComponent::LoadEnemyData(const struct FBtlEncountParam& EncountParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "LoadEnemyData");

	Params::BtlCoreComponent_LoadEnemyData Parms{};

	Parms.EncountParam = std::move(EncountParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.LoadResidentData
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBtlEncountParam                 EncountParam                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBtlCoreComponent::LoadResidentData(const struct FBtlEncountParam& EncountParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "LoadResidentData");

	Params::BtlCoreComponent_LoadResidentData Parms{};

	Parms.EncountParam = std::move(EncountParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.MarkAsPlayedFukaCutin
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::MarkAsPlayedFukaCutin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "MarkAsPlayedFukaCutin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.MarkAsPlayedShadowExChantCam
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::MarkAsPlayedShadowExChantCam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "MarkAsPlayedShadowExChantCam");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.MarkAsUICommand
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::MarkAsUICommand()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "MarkAsUICommand");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.PlayHighAnalyzeEvent
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::PlayHighAnalyzeEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "PlayHighAnalyzeEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.PlayInfoAlloutAttackSuggestion
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::PlayInfoAlloutAttackSuggestion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "PlayInfoAlloutAttackSuggestion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.PlayInfoFukaCutin
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::PlayInfoFukaCutin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "PlayInfoFukaCutin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.PlayInfoGameover
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::PlayInfoGameover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "PlayInfoGameover");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.ProcAfterAllCharacterSpawned
// (Final, Native, Private, BlueprintCallable)

void UBtlCoreComponent::ProcAfterAllCharacterSpawned()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "ProcAfterAllCharacterSpawned");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.ProcAfterLoad
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::ProcAfterLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "ProcAfterLoad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.ProcAheadOfRetrySequence
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::ProcAheadOfRetrySequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "ProcAheadOfRetrySequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.ProcBeforeLoad
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::ProcBeforeLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "ProcBeforeLoad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.ProcessBeforeStartNextTurn
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::ProcessBeforeStartNextTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "ProcessBeforeStartNextTurn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.ProgressOrder
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::ProgressOrder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "ProgressOrder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.RegisterTakeoverCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlActor*                        TakeoverFrom                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::RegisterTakeoverCharacter(class ABtlActor* Target, class ABtlActor* TakeoverFrom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RegisterTakeoverCharacter");

	Params::BtlCoreComponent_RegisterTakeoverCharacter Parms{};

	Parms.Target = Target;
	Parms.TakeoverFrom = TakeoverFrom;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.Relocation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    PlayerOnly                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::Relocation(bool PlayerOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "Relocation");

	Params::BtlCoreComponent_Relocation Parms{};

	Parms.PlayerOnly = PlayerOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.RelocationCustom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlRelocationType                      Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::RelocationCustom(EBtlRelocationType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RelocationCustom");

	Params::BtlCoreComponent_RelocationCustom Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.RelocationRequestOnBCDPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::RelocationRequestOnBCDPlay(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RelocationRequestOnBCDPlay");

	Params::BtlCoreComponent_RelocationRequestOnBCDPlay Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.RemoveUtensilEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AAppActor*                        Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::RemoveUtensilEffect(class AAppActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RemoveUtensilEffect");

	Params::BtlCoreComponent_RemoveUtensilEffect Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.RequestBGM
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlBGMType                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::RequestBGM(EBtlBGMType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RequestBGM");

	Params::BtlCoreComponent_RequestBGM Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.RequestClearUtensilEffectWithRelocation
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::RequestClearUtensilEffectWithRelocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RequestClearUtensilEffectWithRelocation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.RequestCutinAging
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::RequestCutinAging(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RequestCutinAging");

	Params::BtlCoreComponent_RequestCutinAging Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.RequestEncountProcess
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::RequestEncountProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RequestEncountProcess");

	Params::BtlCoreComponent_RequestEncountProcess Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.RequestPartyPanelVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::RequestPartyPanelVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RequestPartyPanelVisible");

	Params::BtlCoreComponent_RequestPartyPanelVisible Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.RequestRushMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::RequestRushMode(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RequestRushMode");

	Params::BtlCoreComponent_RequestRushMode Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.RequestSituationHelp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        PEmploy                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlJyokyohelpType                      Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::RequestSituationHelp(class ABtlActor* PEmploy, EBtlJyokyohelpType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RequestSituationHelp");

	Params::BtlCoreComponent_RequestSituationHelp Parms{};

	Parms.PEmploy = PEmploy;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.RequestSummonEnemies
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::RequestSummonEnemies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RequestSummonEnemies");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.RestoreGameCondition
// (Final, Native, Private, BlueprintCallable)

void UBtlCoreComponent::RestoreGameCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "RestoreGameCondition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SetAnalyzeMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::SetAnalyzeMode(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SetAnalyzeMode");

	Params::BtlCoreComponent_SetAnalyzeMode Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SetBattleTimeDilation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Rate                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::SetBattleTimeDilation(float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SetBattleTimeDilation");

	Params::BtlCoreComponent_SetBattleTimeDilation Parms{};

	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SetBGMTheurgiaMode
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::SetBGMTheurgiaMode(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SetBGMTheurgiaMode");

	Params::BtlCoreComponent_SetBGMTheurgiaMode Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SetDebugLatestCamera
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::SetDebugLatestCamera(const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SetDebugLatestCamera");

	Params::BtlCoreComponent_SetDebugLatestCamera Parms{};

	Parms.Str = std::move(Str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SetDebugStateString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Str                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::SetDebugStateString(const class FString& Str)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SetDebugStateString");

	Params::BtlCoreComponent_SetDebugStateString Parms{};

	Parms.Str = std::move(Str);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SetEncountParam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FBtlEncountParam                 Encount                                                (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UBtlCoreComponent::SetEncountParam(const struct FBtlEncountParam& Encount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SetEncountParam");

	Params::BtlCoreComponent_SetEncountParam Parms{};

	Parms.Encount = std::move(Encount);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SetPersonaStatusMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::SetPersonaStatusMode(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SetPersonaStatusMode");

	Params::BtlCoreComponent_SetPersonaStatusMode Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SetPhase
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlPhase*                        NextPhase                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::SetPhase(class ABtlPhase* NextPhase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SetPhase");

	Params::BtlCoreComponent_SetPhase Parms{};

	Parms.NextPhase = NextPhase;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SetRushDisable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Disable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::SetRushDisable(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SetRushDisable");

	Params::BtlCoreComponent_SetRushDisable Parms{};

	Parms.Disable = Disable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SetRushMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::SetRushMode(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SetRushMode");

	Params::BtlCoreComponent_SetRushMode Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SetupDebugKill
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    RejectDebugKillRequest                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::SetupDebugKill(bool* RejectDebugKillRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SetupDebugKill");

	Params::BtlCoreComponent_SetupDebugKill Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RejectDebugKillRequest != nullptr)
		*RejectDebugKillRequest = Parms.RejectDebugKillRequest;
}


// Function xrd777.BtlCoreComponent.SetupIndependentBattle
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FBtlEncountParam                 EncountParam                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FBtlEncountParam                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBtlEncountParam UBtlCoreComponent::SetupIndependentBattle(const struct FBtlEncountParam& EncountParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SetupIndependentBattle");

	Params::BtlCoreComponent_SetupIndependentBattle Parms{};

	Parms.EncountParam = std::move(EncountParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.ShowDebugData
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::ShowDebugData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "ShowDebugData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SpawnCharacters
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    InitialHiding                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlCoreComponent::SpawnCharacters(bool InitialHiding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SpawnCharacters");

	Params::BtlCoreComponent_SpawnCharacters Parms{};

	Parms.InitialHiding = InitialHiding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.SyncInfoGameover
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::SyncInfoGameover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SyncInfoGameover");

	Params::BtlCoreComponent_SyncInfoGameover Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.SyncReadyIndependentBattle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::SyncReadyIndependentBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "SyncReadyIndependentBattle");

	Params::BtlCoreComponent_SyncReadyIndependentBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.TheurgiaDebugSetup
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::TheurgiaDebugSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "TheurgiaDebugSetup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.ToggleSkillEditMode
// (Final, Native, Public, BlueprintCallable)

void UBtlCoreComponent::ToggleSkillEditMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "ToggleSkillEditMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCoreComponent.CheckAlloutResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckAlloutResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckAlloutResult");

	Params::BtlCoreComponent_CheckAlloutResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckAllowEnemyAttackBackshotCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckAllowEnemyAttackBackshotCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckAllowEnemyAttackBackshotCamera");

	Params::BtlCoreComponent_CheckAllowEnemyAttackBackshotCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckAnyInterruptProcessBetweenTurn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckAnyInterruptProcessBetweenTurn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckAnyInterruptProcessBetweenTurn");

	Params::BtlCoreComponent_CheckAnyInterruptProcessBetweenTurn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckCutinAging
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckCutinAging() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckCutinAging");

	Params::BtlCoreComponent_CheckCutinAging Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckDecideRetry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckDecideRetry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckDecideRetry");

	Params::BtlCoreComponent_CheckDecideRetry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckEnableActEndEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckEnableActEndEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckEnableActEndEvent");

	Params::BtlCoreComponent_CheckEnableActEndEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckEnableActEndProc
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckEnableActEndProc() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckEnableActEndProc");

	Params::BtlCoreComponent_CheckEnableActEndProc Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckEnableFukaCutin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckEnableFukaCutin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckEnableFukaCutin");

	Params::BtlCoreComponent_CheckEnableFukaCutin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckEnableRelocationClosedFormation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckEnableRelocationClosedFormation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckEnableRelocationClosedFormation");

	Params::BtlCoreComponent_CheckEnableRelocationClosedFormation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckEnemyLoadFinished
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckEnemyLoadFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckEnemyLoadFinished");

	Params::BtlCoreComponent_CheckEnemyLoadFinished Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckHasHighAnalyzeEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckHasHighAnalyzeEvent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckHasHighAnalyzeEvent");

	Params::BtlCoreComponent_CheckHasHighAnalyzeEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckHighAnalyzeEnable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckHighAnalyzeEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckHighAnalyzeEnable");

	Params::BtlCoreComponent_CheckHighAnalyzeEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckHighAnalyzeUnlocked
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckHighAnalyzeUnlocked() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckHighAnalyzeUnlocked");

	Params::BtlCoreComponent_CheckHighAnalyzeUnlocked Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckIgnoreShowingCharacterAtPreAct
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckIgnoreShowingCharacterAtPreAct() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckIgnoreShowingCharacterAtPreAct");

	Params::BtlCoreComponent_CheckIgnoreShowingCharacterAtPreAct Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckInAllout
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckInAllout() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckInAllout");

	Params::BtlCoreComponent_CheckInAllout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckInRush
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckInRush() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckInRush");

	Params::BtlCoreComponent_CheckInRush Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckInterruptProcessEscape
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckInterruptProcessEscape() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckInterruptProcessEscape");

	Params::BtlCoreComponent_CheckInterruptProcessEscape Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckIsSerialEncountBattle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckIsSerialEncountBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckIsSerialEncountBattle");

	Params::BtlCoreComponent_CheckIsSerialEncountBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckLineFormation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckLineFormation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckLineFormation");

	Params::BtlCoreComponent_CheckLineFormation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckNeedResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckNeedResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckNeedResult");

	Params::BtlCoreComponent_CheckNeedResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckNeedTurningTable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckNeedTurningTable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckNeedTurningTable");

	Params::BtlCoreComponent_CheckNeedTurningTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckPlayableDesignedCommonAttackCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckPlayableDesignedCommonAttackCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckPlayableDesignedCommonAttackCamera");

	Params::BtlCoreComponent_CheckPlayableDesignedCommonAttackCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckPlayingEventScript
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckPlayingEventScript() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckPlayingEventScript");

	Params::BtlCoreComponent_CheckPlayingEventScript Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckRequestRushMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckRequestRushMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckRequestRushMode");

	Params::BtlCoreComponent_CheckRequestRushMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckRushDisable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckRushDisable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckRushDisable");

	Params::BtlCoreComponent_CheckRushDisable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckRushSwitchable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckRushSwitchable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckRushSwitchable");

	Params::BtlCoreComponent_CheckRushSwitchable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckShadowExChantCamMustPlay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckShadowExChantCamMustPlay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckShadowExChantCamMustPlay");

	Params::BtlCoreComponent_CheckShadowExChantCamMustPlay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckShaffleTimeAllowed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckShaffleTimeAllowed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckShaffleTimeAllowed");

	Params::BtlCoreComponent_CheckShaffleTimeAllowed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckShuffleTimeOccurrence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckShuffleTimeOccurrence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckShuffleTimeOccurrence");

	Params::BtlCoreComponent_CheckShuffleTimeOccurrence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckSuspendTurnProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckSuspendTurnProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckSuspendTurnProgress");

	Params::BtlCoreComponent_CheckSuspendTurnProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckUsableFukaTheurgia
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckUsableFukaTheurgia() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckUsableFukaTheurgia");

	Params::BtlCoreComponent_CheckUsableFukaTheurgia Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckUsableRetry
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckUsableRetry() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckUsableRetry");

	Params::BtlCoreComponent_CheckUsableRetry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckUseQuickEncount
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckUseQuickEncount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckUseQuickEncount");

	Params::BtlCoreComponent_CheckUseQuickEncount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.CheckValidFukaTheurgia
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::CheckValidFukaTheurgia() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "CheckValidFukaTheurgia");

	Params::BtlCoreComponent_CheckValidFukaTheurgia Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.DebugGetCustomDamage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlCoreComponent::DebugGetCustomDamage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "DebugGetCustomDamage");

	Params::BtlCoreComponent_DebugGetCustomDamage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetDebugCalcFlag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlCoreComponent::GetDebugCalcFlag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetDebugCalcFlag");

	Params::BtlCoreComponent_GetDebugCalcFlag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetDebugLatestCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBtlCoreComponent::GetDebugLatestCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetDebugLatestCamera");

	Params::BtlCoreComponent_GetDebugLatestCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetDebugModeName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBtlCoreComponent::GetDebugModeName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetDebugModeName");

	Params::BtlCoreComponent_GetDebugModeName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetDebugStateString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBtlCoreComponent::GetDebugStateString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetDebugStateString");

	Params::BtlCoreComponent_GetDebugStateString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetDeltaTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBtlCoreComponent::GetDeltaTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetDeltaTime");

	Params::BtlCoreComponent_GetDeltaTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetElapsedTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBtlCoreComponent::GetElapsedTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetElapsedTime");

	Params::BtlCoreComponent_GetElapsedTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.GetPhaseType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlPhaseType                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlPhaseType UBtlCoreComponent::GetPhaseType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "GetPhaseType");

	Params::BtlCoreComponent_GetPhaseType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.IsDisableSequenceCamera
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::IsDisableSequenceCamera() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "IsDisableSequenceCamera");

	Params::BtlCoreComponent_IsDisableSequenceCamera Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.IsEventBattle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::IsEventBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "IsEventBattle");

	Params::BtlCoreComponent_IsEventBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.IsEventResult
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    IsCaptureResult                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::IsEventResult(bool* IsCaptureResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "IsEventResult");

	Params::BtlCoreComponent_IsEventResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsCaptureResult != nullptr)
		*IsCaptureResult = Parms.IsCaptureResult;

	return Parms.ReturnValue;
}


// Function xrd777.BtlCoreComponent.IsNeedToFinale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlCoreComponent::IsNeedToFinale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCoreComponent", "IsNeedToFinale");

	Params::BtlCoreComponent_IsNeedToFinale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlManagerInterface.MarkAsBtlCoreIsReady
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IBtlManagerInterface::MarkAsBtlCoreIsReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlManagerInterface", "MarkAsBtlCoreIsReady");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlCountdown.PullTime
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlCountdown::PullTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCountdown", "PullTime");

	Params::BtlCountdown_PullTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlCountdown.SetVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlCountdown::SetVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlCountdown", "SetVisible");

	Params::BtlCountdown_SetVisible Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlVoice.EndLipsyncWatcher
// (Final, Native, Public)

void UBtlVoice::EndLipsyncWatcher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlVoice", "EndLipsyncWatcher");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlVoice.StartLipyncWatcher
// (Final, Native, Public)

void UBtlVoice::StartLipyncWatcher()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlVoice", "StartLipyncWatcher");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SaveLoadDraw.AdjustedDateLayoutPos
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// ESaveLoadDateLayout                     InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InDefaultPos                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ASaveLoadDraw::AdjustedDateLayoutPos(ESaveLoadDateLayout InLayoutId, const struct FVector2D& InDefaultPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "AdjustedDateLayoutPos");

	Params::SaveLoadDraw_AdjustedDateLayoutPos Parms{};

	Parms.InLayoutId = InLayoutId;
	Parms.InDefaultPos = std::move(InDefaultPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.AdjustedLayout2Pos
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// ESaveLoadLayout2                        InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InDefaultPos                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ASaveLoadDraw::AdjustedLayout2Pos(ESaveLoadLayout2 InLayoutId, const struct FVector2D& InDefaultPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "AdjustedLayout2Pos");

	Params::SaveLoadDraw_AdjustedLayout2Pos Parms{};

	Parms.InLayoutId = InLayoutId;
	Parms.InDefaultPos = std::move(InDefaultPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.AdjustedLayoutPos
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// ESaveLoadLayout                         InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InDefaultPos                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ASaveLoadDraw::AdjustedLayoutPos(ESaveLoadLayout InLayoutId, const struct FVector2D& InDefaultPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "AdjustedLayoutPos");

	Params::SaveLoadDraw_AdjustedLayoutPos Parms{};

	Parms.InLayoutId = InLayoutId;
	Parms.InDefaultPos = std::move(InDefaultPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.AdjustedLayoutPosAstrea
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// ESaveLoadLayoutAstrea                   InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InDefaultPos                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ASaveLoadDraw::AdjustedLayoutPosAstrea(ESaveLoadLayoutAstrea InLayoutId, const struct FVector2D& InDefaultPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "AdjustedLayoutPosAstrea");

	Params::SaveLoadDraw_AdjustedLayoutPosAstrea Parms{};

	Parms.InLayoutId = InLayoutId;
	Parms.InDefaultPos = std::move(InDefaultPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.AdjustedTimeZoneLayoutPosAstrea
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// ESaveLoadTimeZoneLayoutAstrea           InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InDefaultPos                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ASaveLoadDraw::AdjustedTimeZoneLayoutPosAstrea(ESaveLoadTimeZoneLayoutAstrea InLayoutId, const struct FVector2D& InDefaultPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "AdjustedTimeZoneLayoutPosAstrea");

	Params::SaveLoadDraw_AdjustedTimeZoneLayoutPosAstrea Parms{};

	Parms.InLayoutId = InLayoutId;
	Parms.InDefaultPos = std::move(InDefaultPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.CallOnFinishedCloseAnim
// (Final, Native, Public, BlueprintCallable)

void ASaveLoadDraw::CallOnFinishedCloseAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "CallOnFinishedCloseAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SaveLoadDraw.CallOnFinishedInAnim
// (Final, Native, Public, BlueprintCallable)

void ASaveLoadDraw::CallOnFinishedInAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "CallOnFinishedInAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SaveLoadDraw.ConvFrameToTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InFrame                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ASaveLoadDraw::ConvFrameToTime(int32 InFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "ConvFrameToTime");

	Params::SaveLoadDraw_ConvFrameToTime Parms{};

	Parms.InFrame = InFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.DrawTextureEx
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         TextureHandle                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASaveLoadDraw::DrawTextureEx(const float X, const float Y, const float Width, const float Height, const class UTexture* TextureHandle, const EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "DrawTextureEx");

	Params::SaveLoadDraw_DrawTextureEx Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.TextureHandle = TextureHandle;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SaveLoadDraw.GetDebugDay
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InDay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASaveLoadDraw::GetDebugDay(int32 InDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "GetDebugDay");

	Params::SaveLoadDraw_GetDebugDay Parms{};

	Parms.InDay = InDay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.GetDebugMonth
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InMonth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASaveLoadDraw::GetDebugMonth(int32 InMonth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "GetDebugMonth");

	Params::SaveLoadDraw_GetDebugMonth Parms{};

	Parms.InMonth = InMonth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.GetSelDebugDay
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InDay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASaveLoadDraw::GetSelDebugDay(int32 InDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "GetSelDebugDay");

	Params::SaveLoadDraw_GetSelDebugDay Parms{};

	Parms.InDay = InDay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.GetSelDebugMonth
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InMonth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASaveLoadDraw::GetSelDebugMonth(int32 InMonth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "GetSelDebugMonth");

	Params::SaveLoadDraw_GetSelDebugMonth Parms{};

	Parms.InMonth = InMonth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.IsCheckedNetworkSave
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASaveLoadDraw::IsCheckedNetworkSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "IsCheckedNetworkSave");

	Params::SaveLoadDraw_IsCheckedNetworkSave Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.IsDayZeroPaddingLanguages
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InMonth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASaveLoadDraw::IsDayZeroPaddingLanguages(int32 InMonth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "IsDayZeroPaddingLanguages");

	Params::SaveLoadDraw_IsDayZeroPaddingLanguages Parms{};

	Parms.InMonth = InMonth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.IsDebugDrawClearData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASaveLoadDraw::IsDebugDrawClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "IsDebugDrawClearData");

	Params::SaveLoadDraw_IsDebugDrawClearData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.IsMonthDayDisplayLanguages
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASaveLoadDraw::IsMonthDayDisplayLanguages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "IsMonthDayDisplayLanguages");

	Params::SaveLoadDraw_IsMonthDayDisplayLanguages Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.LocationNameDraw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Z                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   R                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   G                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   B                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   A                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIFontStyle                            Style                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASaveLoadDraw::LocationNameDraw(const float X, const float Y, const float Z, const class FString& String, const uint8 R, const uint8 G, const uint8 B, const uint8 A, const float Scale, const float Angle, const EUI_DRAW_POINT DrawPoint, const EUIFontStyle Style)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "LocationNameDraw");

	Params::SaveLoadDraw_LocationNameDraw Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Z = Z;
	Parms.String = std::move(String);
	Parms.R = R;
	Parms.G = G;
	Parms.B = B;
	Parms.A = A;
	Parms.Scale = Scale;
	Parms.Angle = Angle;
	Parms.DrawPoint = DrawPoint;
	Parms.Style = Style;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SaveLoadDraw.PlayListInSE
// (Final, Native, Public, BlueprintCallable)

void ASaveLoadDraw::PlayListInSE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "PlayListInSE");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SaveLoadDraw.PLNameFontDraw
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   X                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIFontStyle                            Style                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASaveLoadDraw::PLNameFontDraw(const float X, const float Y, const class FString& String, const struct FColor& Color, const float Scale, const float Angle, const EUI_DRAW_POINT DrawPoint, const EUIFontStyle Style)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "PLNameFontDraw");

	Params::SaveLoadDraw_PLNameFontDraw Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.String = std::move(String);
	Parms.Color = std::move(Color);
	Parms.Scale = Scale;
	Parms.Angle = Angle;
	Parms.DrawPoint = DrawPoint;
	Parms.Style = Style;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction xrd777.SaveLoadDraw.ProcessCompleted__DelegateSignature
// (Public, Delegate)

void ASaveLoadDraw::ProcessCompleted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "ProcessCompleted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.SaveLoadDraw.SetScrollBarBaseCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScrollRange                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScrollPos                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DrawListNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxListNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASaveLoadDraw::SetScrollBarBaseCollision(float X, float Y, float Width, float Height, float ScrollRange, int32 ScrollPos, int32 DrawListNum, int32 MaxListNum, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "SetScrollBarBaseCollision");

	Params::SaveLoadDraw_SetScrollBarBaseCollision Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.ScrollRange = ScrollRange;
	Parms.ScrollPos = ScrollPos;
	Parms.DrawListNum = DrawListNum;
	Parms.MaxListNum = MaxListNum;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SaveLoadDraw.SetScrollBarCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScrollRange                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScrollPos                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DrawListNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxListNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASaveLoadDraw::SetScrollBarCollision(float X, float Y, float Width, float Height, float ScrollRange, int32 ScrollPos, int32 DrawListNum, int32 MaxListNum, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "SetScrollBarCollision");

	Params::SaveLoadDraw_SetScrollBarCollision Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.ScrollRange = ScrollRange;
	Parms.ScrollPos = ScrollPos;
	Parms.DrawListNum = DrawListNum;
	Parms.MaxListNum = MaxListNum;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SaveLoadDraw.SetScrollBarSliderCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScrollRange                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScrollPos                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DrawListNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxListNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASaveLoadDraw::SetScrollBarSliderCollision(float X, float Y, float Width, float Height, float ScrollRange, int32 ScrollPos, int32 DrawListNum, int32 MaxListNum, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "SetScrollBarSliderCollision");

	Params::SaveLoadDraw_SetScrollBarSliderCollision Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.ScrollRange = ScrollRange;
	Parms.ScrollPos = ScrollPos;
	Parms.DrawListNum = DrawListNum;
	Parms.MaxListNum = MaxListNum;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SaveLoadDraw.SetTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSelected                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASaveLoadDraw::SetTouchCollision(int32 Index_0, bool IsSelected, float X, float Y, float Width, float Height, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "SetTouchCollision");

	Params::SaveLoadDraw_SetTouchCollision Parms{};

	Parms.Index_0 = Index_0;
	Parms.IsSelected = IsSelected;
	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SaveLoadDraw.StateDraw_BG
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASaveLoadDraw::StateDraw_BG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "StateDraw_BG");

	Params::SaveLoadDraw_StateDraw_BG Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.StateDraw_Close
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASaveLoadDraw::StateDraw_Close()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "StateDraw_Close");

	Params::SaveLoadDraw_StateDraw_Close Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.StateDraw_SaveDataList
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASaveLoadDraw::StateDraw_SaveDataList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "StateDraw_SaveDataList");

	Params::SaveLoadDraw_StateDraw_SaveDataList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.StateDraw_Update
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASaveLoadDraw::StateDraw_Update(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "StateDraw_Update");

	Params::SaveLoadDraw_StateDraw_Update Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.SaveLoadDraw.TimeWithinRangeFrame
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   NowTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASaveLoadDraw::TimeWithinRangeFrame(float NowTime, int32 StartFrame, int32 EndFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SaveLoadDraw", "TimeWithinRangeFrame");

	Params::SaveLoadDraw_TimeWithinRangeFrame Parms{};

	Parms.NowTime = NowTime;
	Parms.StartFrame = StartFrame;
	Parms.EndFrame = EndFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDbgNpcMaker.GetNpcActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APawn*                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APawn* AFldDbgNpcMaker::GetNpcActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDbgNpcMaker", "GetNpcActor");

	Params::FldDbgNpcMaker_GetNpcActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDbgNpcMaker.GetNpcActors
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class APawn*>              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class APawn*> AFldDbgNpcMaker::GetNpcActors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDbgNpcMaker", "GetNpcActors");

	Params::FldDbgNpcMaker_GetNpcActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.AppCalculaterComponent.BPCommand_CalculationUpdate
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAppCalculaterComponentWork      Work                                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsReverse                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsReset                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAppCalculaterComponent::BPCommand_CalculationUpdate(const float DeltaTime, struct FAppCalculaterComponentWork& Work, const bool IsReverse, const bool IsLoop, const bool IsReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AppCalculaterComponent", "BPCommand_CalculationUpdate");

	Params::AppCalculaterComponent_BPCommand_CalculationUpdate Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.Work = std::move(Work);
	Parms.IsReverse = IsReverse;
	Parms.IsLoop = IsLoop;
	Parms.IsReset = IsReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Work = std::move(Parms.Work);

	return Parms.ReturnValue;
}


// Function xrd777.CldBindingEventActor.CallStatePatternEndDelicate
// (Native, Public)

void ACldBindingEventActor::CallStatePatternEndDelicate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldBindingEventActor", "CallStatePatternEndDelicate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CampSceneCapture.InAnimationStart
// (Event, Public, BlueprintEvent)

void ACampSceneCapture::InAnimationStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CampSceneCapture", "InAnimationStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CampSceneCapture.LoopAnimationStart
// (Event, Public, BlueprintEvent)

void ACampSceneCapture::LoopAnimationStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CampSceneCapture", "LoopAnimationStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlDataBaseComponent.CallCheckAlreadyRequestEscape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::CallCheckAlreadyRequestEscape(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "CallCheckAlreadyRequestEscape");

	Params::BtlDataBaseComponent_CallCheckAlreadyRequestEscape Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.CallCheckEncountEscape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::CallCheckEncountEscape(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "CallCheckEncountEscape");

	Params::BtlDataBaseComponent_CallCheckEncountEscape Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.CallRequestEscape
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::CallRequestEscape(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "CallRequestEscape");

	Params::BtlDataBaseComponent_CallRequestEscape Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.CallSupportInfoDisableShift
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::CallSupportInfoDisableShift(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "CallSupportInfoDisableShift");

	Params::BtlDataBaseComponent_CallSupportInfoDisableShift Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.CheckExistTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::CheckExistTarget(class UBtlCoreComponent* BtlCore, int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "CheckExistTarget");

	Params::BtlDataBaseComponent_CheckExistTarget Parms{};

	Parms.BtlCore = BtlCore;
	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.CheckExistTutorial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::CheckExistTutorial(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "CheckExistTutorial");

	Params::BtlDataBaseComponent_CheckExistTutorial Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.CheckNyxCoreBattle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::CheckNyxCoreBattle(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "CheckNyxCoreBattle");

	Params::BtlDataBaseComponent_CheckNyxCoreBattle Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.CheckSupport
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::CheckSupport(class ABtlActor* Actor, int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "CheckSupport");

	Params::BtlDataBaseComponent_CheckSupport Parms{};

	Parms.Actor = Actor;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.CheckSupportDownUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlDataSupportTable                    Support                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::CheckSupportDownUp(class ABtlActor* Actor, EBtlDataSupportTable Support)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "CheckSupportDownUp");

	Params::BtlDataBaseComponent_CheckSupportDownUp Parms{};

	Parms.Actor = Actor;
	Parms.Support = Support;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.CheckTacticsIconLLSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::CheckTacticsIconLLSize(class ABtlActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "CheckTacticsIconLLSize");

	Params::BtlDataBaseComponent_CheckTacticsIconLLSize Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkAllCostOff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkAllCostOff(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkAllCostOff");

	Params::BtlDataBaseComponent_ChkAllCostOff Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkAutoSkill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkAutoSkill(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkAutoSkill");

	Params::BtlDataBaseComponent_ChkAutoSkill Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkEnemySideWeak
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABtlActor*>                EnemyList                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// EBtlDataAttr                            Attr                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkEnemySideWeak(class ABtlActor* Action, const TArray<class ABtlActor*>& EnemyList, EBtlDataAttr Attr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkEnemySideWeak");

	Params::BtlDataBaseComponent_ChkEnemySideWeak Parms{};

	Parms.Action = Action;
	Parms.EnemyList = std::move(EnemyList);
	Parms.Attr = Attr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkEnemySideWeakAll
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABtlActor*>                EnemyList                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkEnemySideWeakAll(class ABtlActor* Action, const TArray<class ABtlActor*>& EnemyList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkEnemySideWeakAll");

	Params::BtlDataBaseComponent_ChkEnemySideWeakAll Parms{};

	Parms.Action = Action;
	Parms.EnemyList = std::move(EnemyList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkExcessEfficary
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        PAction                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABtlActor*>                TargetList                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::ChkExcessEfficary(class ABtlActor* PAction, const TArray<class ABtlActor*>& TargetList, int32 SkillId, bool IsItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkExcessEfficary");

	Params::BtlDataBaseComponent_ChkExcessEfficary Parms{};

	Parms.PAction = PAction;
	Parms.TargetList = std::move(TargetList);
	Parms.SkillId = SkillId;
	Parms.IsItem = IsItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkLastActionLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkLastActionLoop(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkLastActionLoop");

	Params::BtlDataBaseComponent_ChkLastActionLoop Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkPlayerDamageOff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkPlayerDamageOff(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkPlayerDamageOff");

	Params::BtlDataBaseComponent_ChkPlayerDamageOff Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkPrevUseSkillIDFrag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkPrevUseSkillIDFrag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkPrevUseSkillIDFrag");

	Params::BtlDataBaseComponent_ChkPrevUseSkillIDFrag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkSelectAllPersona
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkSelectAllPersona(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkSelectAllPersona");

	Params::BtlDataBaseComponent_ChkSelectAllPersona Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkSelectAllSkill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkSelectAllSkill(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkSelectAllSkill");

	Params::BtlDataBaseComponent_ChkSelectAllSkill Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkSkillIgnoreResistances
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkSkillIgnoreResistances(class ABtlActor* Action, int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkSkillIgnoreResistances");

	Params::BtlDataBaseComponent_ChkSkillIgnoreResistances Parms{};

	Parms.Action = Action;
	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkSpecialSkillID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkSpecialSkillID(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkSpecialSkillID");

	Params::BtlDataBaseComponent_ChkSpecialSkillID Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkTPValid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkTPValid(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkTPValid");

	Params::BtlDataBaseComponent_ChkTPValid Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkTurnOff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkTurnOff(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkTurnOff");

	Params::BtlDataBaseComponent_ChkTurnOff Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkTutorialSkillList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkTutorialSkillList(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkTutorialSkillList");

	Params::BtlDataBaseComponent_ChkTutorialSkillList Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ChkUseAllSkillAgeing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::ChkUseAllSkillAgeing(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ChkUseAllSkillAgeing");

	Params::BtlDataBaseComponent_ChkUseAllSkillAgeing Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.ClearBadStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::ClearBadStatus(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ClearBadStatus");

	Params::BtlDataBaseComponent_ClearBadStatus Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.ClearSupport
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::ClearSupport(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ClearSupport");

	Params::BtlDataBaseComponent_ClearSupport Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.ClearTargetSupport
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::ClearTargetSupport(class ABtlActor* Actor, int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "ClearTargetSupport");

	Params::BtlDataBaseComponent_ClearTargetSupport Parms{};

	Parms.Actor = Actor;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.CloseAllAttr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::CloseAllAttr(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "CloseAllAttr");

	Params::BtlDataBaseComponent_CloseAllAttr Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.GatAnalizeAttr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   Attr                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlDataAnalyze                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlDataAnalyze UBtlDataBaseComponent::GatAnalizeAttr(class ABtlActor* Actor, uint8 Attr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GatAnalizeAttr");

	Params::BtlDataBaseComponent_GatAnalizeAttr Parms{};

	Parms.Actor = Actor;
	Parms.Attr = Attr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetAnalyzeAttrMaxNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetAnalyzeAttrMaxNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetAnalyzeAttrMaxNum");

	Params::BtlDataBaseComponent_GetAnalyzeAttrMaxNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetAttackName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Attr                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBtlDataBaseComponent::GetAttackName(int32 Attr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetAttackName");

	Params::BtlDataBaseComponent_GetAttackName Parms{};

	Parms.Attr = Attr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetBadStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetBadStatus(class ABtlActor* Actor, int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetBadStatus");

	Params::BtlDataBaseComponent_GetBadStatus Parms{};

	Parms.Actor = Actor;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetBtlCommonText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBtlDataBaseComponent::GetBtlCommonText(int32 Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetBtlCommonText");

	Params::BtlDataBaseComponent_GetBtlCommonText Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetCorrespondList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                Out                                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// class ABtlActor*                        SpEmployment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlCommandType                         Command                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::GetCorrespondList(TArray<class ABtlActor*>* Out, class ABtlActor* SpEmployment, EBtlCommandType Command, int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetCorrespondList");

	Params::BtlDataBaseComponent_GetCorrespondList Parms{};

	Parms.SpEmployment = SpEmployment;
	Parms.Command = Command;
	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Out != nullptr)
		*Out = std::move(Parms.Out);
}


// Function xrd777.BtlDataBaseComponent.GetEnemyDropItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetEnemyDropItem(class ABtlActor* Actor, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetEnemyDropItem");

	Params::BtlDataBaseComponent_GetEnemyDropItem Parms{};

	Parms.Actor = Actor;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetFukaTheurgiaSkill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetFukaTheurgiaSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetFukaTheurgiaSkill");

	Params::BtlDataBaseComponent_GetFukaTheurgiaSkill Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetInputDecideKeyCross
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetInputDecideKeyCross()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetInputDecideKeyCross");

	Params::BtlDataBaseComponent_GetInputDecideKeyCross Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetItemBagData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FBtlItemData>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FBtlItemData> UBtlDataBaseComponent::GetItemBagData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetItemBagData");

	Params::BtlDataBaseComponent_GetItemBagData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetItemIconSprNo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetItemIconSprNo(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetItemIconSprNo");

	Params::BtlDataBaseComponent_GetItemIconSprNo Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetItemName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBtlDataBaseComponent::GetItemName(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetItemName");

	Params::BtlDataBaseComponent_GetItemName Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetItemSkillID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetItemSkillID(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetItemSkillID");

	Params::BtlDataBaseComponent_GetItemSkillID Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetItemUseType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlCommandType                         Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlDataItemUseType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlDataItemUseType UBtlDataBaseComponent::GetItemUseType(class UBtlCoreComponent* BtlCore, EBtlCommandType Type, int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetItemUseType");

	Params::BtlDataBaseComponent_GetItemUseType Parms{};

	Parms.BtlCore = BtlCore;
	Parms.Type = Type;
	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetKeyControl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<bool>                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<bool> UBtlDataBaseComponent::GetKeyControl(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetKeyControl");

	Params::BtlDataBaseComponent_GetKeyControl Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetManualOperate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetManualOperate(class ABtlActor* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetManualOperate");

	Params::BtlDataBaseComponent_GetManualOperate Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetNormalSkillMaxNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetNormalSkillMaxNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetNormalSkillMaxNum");

	Params::BtlDataBaseComponent_GetNormalSkillMaxNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetOperation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetOperation(class ABtlActor* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetOperation");

	Params::BtlDataBaseComponent_GetOperation Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetOrgiaMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetOrgiaMode(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetOrgiaMode");

	Params::BtlDataBaseComponent_GetOrgiaMode Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetPersonaBySpecialSkill
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PersonaID1                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PersonaID2                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TwoPersona                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::GetPersonaBySpecialSkill(int32 SkillId, int32* PersonaID1, int32* PersonaID2, bool* TwoPersona)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPersonaBySpecialSkill");

	Params::BtlDataBaseComponent_GetPersonaBySpecialSkill Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PersonaID1 != nullptr)
		*PersonaID1 = Parms.PersonaID1;

	if (PersonaID2 != nullptr)
		*PersonaID2 = Parms.PersonaID2;

	if (TwoPersona != nullptr)
		*TwoPersona = Parms.TwoPersona;
}


// Function xrd777.BtlDataBaseComponent.GetPersonaEquipID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetPersonaEquipID(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPersonaEquipID");

	Params::BtlDataBaseComponent_GetPersonaEquipID Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetPersonaEquipIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetPersonaEquipIndex(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPersonaEquipIndex");

	Params::BtlDataBaseComponent_GetPersonaEquipIndex Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetPersonaEquipName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBtlDataBaseComponent::GetPersonaEquipName(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPersonaEquipName");

	Params::BtlDataBaseComponent_GetPersonaEquipName Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetPersonaEquipSkillList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UBtlDataBaseComponent::GetPersonaEquipSkillList(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPersonaEquipSkillList");

	Params::BtlDataBaseComponent_GetPersonaEquipSkillList Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetPersonaMaxNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetPersonaMaxNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPersonaMaxNum");

	Params::BtlDataBaseComponent_GetPersonaMaxNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetPersonaName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PersonaID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBtlDataBaseComponent::GetPersonaName(int32 PersonaID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPersonaName");

	Params::BtlDataBaseComponent_GetPersonaName Parms{};

	Parms.PersonaID = PersonaID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetPersonaNameList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FText>                     NameList                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Equip                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::GetPersonaNameList(class ABtlActor* Actor, TArray<class FText>* NameList, int32* Count, int32* Equip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPersonaNameList");

	Params::BtlDataBaseComponent_GetPersonaNameList Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NameList != nullptr)
		*NameList = std::move(Parms.NameList);

	if (Count != nullptr)
		*Count = Parms.Count;

	if (Equip != nullptr)
		*Equip = Parms.Equip;
}


// Function xrd777.BtlDataBaseComponent.GetPersonaSkillList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UBtlDataBaseComponent::GetPersonaSkillList(class ABtlActor* Actor, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPersonaSkillList");

	Params::BtlDataBaseComponent_GetPersonaSkillList Parms{};

	Parms.Actor = Actor;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetPersonaStockIndexList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UBtlDataBaseComponent::GetPersonaStockIndexList(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPersonaStockIndexList");

	Params::BtlDataBaseComponent_GetPersonaStockIndexList Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetPersonaTableSkillList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PersonaID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UBtlDataBaseComponent::GetPersonaTableSkillList(int32 PersonaID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPersonaTableSkillList");

	Params::BtlDataBaseComponent_GetPersonaTableSkillList Parms{};

	Parms.PersonaID = PersonaID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetPlatFormButtonColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBtlDataBaseComponent::GetPlatFormButtonColor(int32 ButtonType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPlatFormButtonColor");

	Params::BtlDataBaseComponent_GetPlatFormButtonColor Parms{};

	Parms.ButtonType = ButtonType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetPrevUseItemID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetPrevUseItemID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPrevUseItemID");

	Params::BtlDataBaseComponent_GetPrevUseItemID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetPrevUseSkillID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetPrevUseSkillID(class ABtlActor* Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetPrevUseSkillID");

	Params::BtlDataBaseComponent_GetPrevUseSkillID Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillAttr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlDataAttr                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlDataAttr UBtlDataBaseComponent::GetSkillAttr(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillAttr");

	Params::BtlDataBaseComponent_GetSkillAttr Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillCost
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlActor*                        Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Sucsess                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlDataCostType                        Cost                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetSkillCost(int32 SkillId, class ABtlActor* Action, bool* Sucsess, EBtlDataCostType* Cost)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillCost");

	Params::BtlDataBaseComponent_GetSkillCost Parms{};

	Parms.SkillId = SkillId;
	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Sucsess != nullptr)
		*Sucsess = Parms.Sucsess;

	if (Cost != nullptr)
		*Cost = Parms.Cost;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillCostCheckOff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetSkillCostCheckOff(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillCostCheckOff");

	Params::BtlDataBaseComponent_GetSkillCostCheckOff Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillEfficacyType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlDataEfficacyType                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlDataEfficacyType UBtlDataBaseComponent::GetSkillEfficacyType(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillEfficacyType");

	Params::BtlDataBaseComponent_GetSkillEfficacyType Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillIconSprNo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetSkillIconSprNo(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillIconSprNo");

	Params::BtlDataBaseComponent_GetSkillIconSprNo Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillIconSprNoByAttr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlDataAttr                            Attr                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetSkillIconSprNoByAttr(EBtlDataAttr Attr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillIconSprNoByAttr");

	Params::BtlDataBaseComponent_GetSkillIconSprNoByAttr Parms{};

	Parms.Attr = Attr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillIsBadStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetSkillIsBadStatus(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillIsBadStatus");

	Params::BtlDataBaseComponent_GetSkillIsBadStatus Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillIsCharge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetSkillIsCharge(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillIsCharge");

	Params::BtlDataBaseComponent_GetSkillIsCharge Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillIsDamage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlDataCostType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetSkillIsDamage(int32 SkillId, EBtlDataCostType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillIsDamage");

	Params::BtlDataBaseComponent_GetSkillIsDamage Parms{};

	Parms.SkillId = SkillId;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillIsDamageBit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetSkillIsDamageBit(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillIsDamageBit");

	Params::BtlDataBaseComponent_GetSkillIsDamageBit Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillIsHealSupport
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlDataSupportTable                    Support                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetSkillIsHealSupport(int32 SkillId, EBtlDataSupportTable* Support)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillIsHealSupport");

	Params::BtlDataBaseComponent_GetSkillIsHealSupport Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Support != nullptr)
		*Support = Parms.Support;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillIsNoPanel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetSkillIsNoPanel(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillIsNoPanel");

	Params::BtlDataBaseComponent_GetSkillIsNoPanel Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillIsRecovery
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlDataCostType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetSkillIsRecovery(int32 SkillId, EBtlDataCostType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillIsRecovery");

	Params::BtlDataBaseComponent_GetSkillIsRecovery Parms{};

	Parms.SkillId = SkillId;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillIsSupport
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::GetSkillIsSupport(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillIsSupport");

	Params::BtlDataBaseComponent_GetSkillIsSupport Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillList
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           Output                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::GetSkillList(class ABtlActor* Actor, TArray<int32>* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillList");

	Params::BtlDataBaseComponent_GetSkillList Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function xrd777.BtlDataBaseComponent.GetSkillMaxNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetSkillMaxNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillMaxNum");

	Params::BtlDataBaseComponent_GetSkillMaxNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Sucsess                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBtlDataBaseComponent::GetSkillName(int32 SkillId, bool* Sucsess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillName");

	Params::BtlDataBaseComponent_GetSkillName Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Sucsess != nullptr)
		*Sucsess = Parms.Sucsess;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillParamN
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Sucsess                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBtlDataBaseComponent::GetSkillParamN(int32 SkillId, bool* Sucsess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillParamN");

	Params::BtlDataBaseComponent_GetSkillParamN Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Sucsess != nullptr)
		*Sucsess = Parms.Sucsess;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillTargetArea
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlDataTargetArea                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlDataTargetArea UBtlDataBaseComponent::GetSkillTargetArea(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillTargetArea");

	Params::BtlDataBaseComponent_GetSkillTargetArea Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillTargetRule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlDataTargetRule               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FBtlDataTargetRule UBtlDataBaseComponent::GetSkillTargetRule(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillTargetRule");

	Params::BtlDataBaseComponent_GetSkillTargetRule Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSkillTargetType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlDataTargetType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlDataTargetType UBtlDataBaseComponent::GetSkillTargetType(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSkillTargetType");

	Params::BtlDataBaseComponent_GetSkillTargetType Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSpecialAutoSkill
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPowerUp                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetSpecialAutoSkill(class ABtlActor* Actor, bool* bPowerUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSpecialAutoSkill");

	Params::BtlDataBaseComponent_GetSpecialAutoSkill Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bPowerUp != nullptr)
		*bPowerUp = Parms.bPowerUp;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSpecialSkillList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> UBtlDataBaseComponent::GetSpecialSkillList(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSpecialSkillList");

	Params::BtlDataBaseComponent_GetSpecialSkillList Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetStatusEndurance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetStatusEndurance(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetStatusEndurance");

	Params::BtlDataBaseComponent_GetStatusEndurance Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetStatusLuck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetStatusLuck(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetStatusLuck");

	Params::BtlDataBaseComponent_GetStatusLuck Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetStatusMagic
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetStatusMagic(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetStatusMagic");

	Params::BtlDataBaseComponent_GetStatusMagic Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetStatusSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetStatusSpeed(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetStatusSpeed");

	Params::BtlDataBaseComponent_GetStatusSpeed Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetStatusStrength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetStatusStrength(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetStatusStrength");

	Params::BtlDataBaseComponent_GetStatusStrength Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSupportPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetSupportPoint(class ABtlActor* Actor, int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSupportPoint");

	Params::BtlDataBaseComponent_GetSupportPoint Parms{};

	Parms.Actor = Actor;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetSupportTurn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetSupportTurn(class ABtlActor* Actor, int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetSupportTurn");

	Params::BtlDataBaseComponent_GetSupportTurn Parms{};

	Parms.Actor = Actor;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetTargetEffectiveIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                Target                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// EBtlDataCostType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetTargetEffectiveIndex(const TArray<class ABtlActor*>& Target, EBtlDataCostType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetTargetEffectiveIndex");

	Params::BtlDataBaseComponent_GetTargetEffectiveIndex Parms{};

	Parms.Target = std::move(Target);
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetTheurgiaFlavorBMD
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBmdAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBmdAsset* UBtlDataBaseComponent::GetTheurgiaFlavorBMD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetTheurgiaFlavorBMD");

	Params::BtlDataBaseComponent_GetTheurgiaFlavorBMD Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetUINextAction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* UBtlDataBaseComponent::GetUINextAction(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetUINextAction");

	Params::BtlDataBaseComponent_GetUINextAction Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetUnitArcana
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetUnitArcana(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetUnitArcana");

	Params::BtlDataBaseComponent_GetUnitArcana Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetUnitHP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetUnitHP(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetUnitHP");

	Params::BtlDataBaseComponent_GetUnitHP Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetUnitID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetUnitID(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetUnitID");

	Params::BtlDataBaseComponent_GetUnitID Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetUnitLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetUnitLevel(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetUnitLevel");

	Params::BtlDataBaseComponent_GetUnitLevel Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetUnitMaxHP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetUnitMaxHP(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetUnitMaxHP");

	Params::BtlDataBaseComponent_GetUnitMaxHP Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetUnitMaxSP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetUnitMaxSP(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetUnitMaxSP");

	Params::BtlDataBaseComponent_GetUnitMaxSP Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetUnitMaxTP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetUnitMaxTP(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetUnitMaxTP");

	Params::BtlDataBaseComponent_GetUnitMaxTP Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetUnitName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InsertSpace                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UBtlDataBaseComponent::GetUnitName(class ABtlActor* Actor, bool InsertSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetUnitName");

	Params::BtlDataBaseComponent_GetUnitName Parms{};

	Parms.Actor = Actor;
	Parms.InsertSpace = InsertSpace;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetUnitSP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetUnitSP(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetUnitSP");

	Params::BtlDataBaseComponent_GetUnitSP Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetUnitTP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlDataBaseComponent::GetUnitTP(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetUnitTP");

	Params::BtlDataBaseComponent_GetUnitTP Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.GetViewTargetActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerCameraManager*             CameraManager                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UBtlDataBaseComponent::GetViewTargetActor(class APlayerCameraManager* CameraManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "GetViewTargetActor");

	Params::BtlDataBaseComponent_GetViewTargetActor Parms{};

	Parms.CameraManager = CameraManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.MoveCursorTactics
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NowIdx                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABtlActor*>                List                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>                PosCursor                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// EBtlDataMoveCursorTactics               MoveCursor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsBoss                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* UBtlDataBaseComponent::MoveCursorTactics(int32 NowIdx, const TArray<class ABtlActor*>& List, const TArray<struct FVector2D>& PosCursor, EBtlDataMoveCursorTactics MoveCursor, bool IsBoss)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "MoveCursorTactics");

	Params::BtlDataBaseComponent_MoveCursorTactics Parms{};

	Parms.NowIdx = NowIdx;
	Parms.List = std::move(List);
	Parms.PosCursor = std::move(PosCursor);
	Parms.MoveCursor = MoveCursor;
	Parms.IsBoss = IsBoss;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.MoveCursorTacticsSimple
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NowIdx                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABtlActor*>                List                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector2D>                PosCursor                                              (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// EBtlDataMoveCursorTactics               MoveCursor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* UBtlDataBaseComponent::MoveCursorTacticsSimple(int32 NowIdx, const TArray<class ABtlActor*>& List, const TArray<struct FVector2D>& PosCursor, EBtlDataMoveCursorTactics MoveCursor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "MoveCursorTacticsSimple");

	Params::BtlDataBaseComponent_MoveCursorTacticsSimple Parms{};

	Parms.NowIdx = NowIdx;
	Parms.List = std::move(List);
	Parms.PosCursor = std::move(PosCursor);
	Parms.MoveCursor = MoveCursor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.OpenAllAttr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::OpenAllAttr(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "OpenAllAttr");

	Params::BtlDataBaseComponent_OpenAllAttr Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SavePrevUseItemID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SavePrevUseItemID(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SavePrevUseItemID");

	Params::BtlDataBaseComponent_SavePrevUseItemID Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SavePrevUseSkillID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SavePrevUseSkillID(class ABtlActor* Action, int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SavePrevUseSkillID");

	Params::BtlDataBaseComponent_SavePrevUseSkillID Parms{};

	Parms.Action = Action;
	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SaveReceiveSkillAttr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                Targets                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// EBtlDataAttr                            Attr                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SaveReceiveSkillAttr(const TArray<class ABtlActor*>& Targets, EBtlDataAttr Attr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SaveReceiveSkillAttr");

	Params::BtlDataBaseComponent_SaveReceiveSkillAttr Parms{};

	Parms.Targets = std::move(Targets);
	Parms.Attr = Attr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SetBadStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SetBadStatus(class ABtlActor* Actor, int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SetBadStatus");

	Params::BtlDataBaseComponent_SetBadStatus Parms{};

	Parms.Actor = Actor;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SetHighStreamingLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SetHighStreamingLocation(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SetHighStreamingLocation");

	Params::BtlDataBaseComponent_SetHighStreamingLocation Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SetManualOperate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsManual                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SetManualOperate(class ABtlActor* Action, bool IsManual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SetManualOperate");

	Params::BtlDataBaseComponent_SetManualOperate Parms{};

	Parms.Action = Action;
	Parms.IsManual = IsManual;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SetOperation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Operation                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SetOperation(class ABtlActor* Action, int32 Operation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SetOperation");

	Params::BtlDataBaseComponent_SetOperation Parms{};

	Parms.Action = Action;
	Parms.Operation = Operation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SetPersonaDefaultStock
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PersonaID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SetPersonaDefaultStock(class ABtlActor* Actor, int32 PersonaID, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SetPersonaDefaultStock");

	Params::BtlDataBaseComponent_SetPersonaDefaultStock Parms{};

	Parms.Actor = Actor;
	Parms.PersonaID = PersonaID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;
}


// Function xrd777.BtlDataBaseComponent.SetPersonaEquipID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SetPersonaEquipID(class ABtlActor* Actor, int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SetPersonaEquipID");

	Params::BtlDataBaseComponent_SetPersonaEquipID Parms{};

	Parms.Actor = Actor;
	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SetPersonaStockEquip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SetPersonaStockEquip(class ABtlActor* Actor, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SetPersonaStockEquip");

	Params::BtlDataBaseComponent_SetPersonaStockEquip Parms{};

	Parms.Actor = Actor;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SetSupport
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SetSupport(class ABtlActor* Actor, int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SetSupport");

	Params::BtlDataBaseComponent_SetSupport Parms{};

	Parms.Actor = Actor;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SetUnitHP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Hp                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SetUnitHP(class ABtlActor* Actor, int32 Hp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SetUnitHP");

	Params::BtlDataBaseComponent_SetUnitHP Parms{};

	Parms.Actor = Actor;
	Parms.Hp = Hp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SetUnitSP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Hp                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SetUnitSP(class ABtlActor* Actor, int32 Hp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SetUnitSP");

	Params::BtlDataBaseComponent_SetUnitSP Parms{};

	Parms.Actor = Actor;
	Parms.Hp = Hp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SetUnitTP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Hp                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::SetUnitTP(class ABtlActor* Actor, int32 Hp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SetUnitTP");

	Params::BtlDataBaseComponent_SetUnitTP Parms{};

	Parms.Actor = Actor;
	Parms.Hp = Hp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlDataBaseComponent.SortEnemyTacticsList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                InList                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class ABtlActor*>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABtlActor*> UBtlDataBaseComponent::SortEnemyTacticsList(const TArray<class ABtlActor*>& InList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SortEnemyTacticsList");

	Params::BtlDataBaseComponent_SortEnemyTacticsList Parms{};

	Parms.InList = std::move(InList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.SortItemBagData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FBtlItemData>             In                                                     (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FBtlItemData>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FBtlItemData> UBtlDataBaseComponent::SortItemBagData(class UBtlCoreComponent* BtlCore, const TArray<struct FBtlItemData>& In)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SortItemBagData");

	Params::BtlDataBaseComponent_SortItemBagData Parms{};

	Parms.BtlCore = BtlCore;
	Parms.In = std::move(In);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.SortPlayerTacticsList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                InList                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class ABtlActor*>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABtlActor*> UBtlDataBaseComponent::SortPlayerTacticsList(const TArray<class ABtlActor*>& InList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SortPlayerTacticsList");

	Params::BtlDataBaseComponent_SortPlayerTacticsList Parms{};

	Parms.InList = std::move(InList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.StartNavigation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlGuiState                            State                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABtlActor*>                Target                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   PersonaID                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Physical                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlDataBaseComponent::StartNavigation(class ABtlActor* Action, EBtlGuiState* State, int32* ID, TArray<class ABtlActor*>* Target, int32* PersonaID, bool* Physical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "StartNavigation");

	Params::BtlDataBaseComponent_StartNavigation Parms{};

	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (State != nullptr)
		*State = Parms.State;

	if (ID != nullptr)
		*ID = Parms.ID;

	if (Target != nullptr)
		*Target = std::move(Parms.Target);

	if (PersonaID != nullptr)
		*PersonaID = Parms.PersonaID;

	if (Physical != nullptr)
		*Physical = Parms.Physical;
}


// Function xrd777.BtlDataBaseComponent.StartTheugiaWindow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        PAction                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABtlActor*>                TargetList                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::StartTheugiaWindow(class ABtlActor* PAction, const TArray<class ABtlActor*>& TargetList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "StartTheugiaWindow");

	Params::BtlDataBaseComponent_StartTheugiaWindow Parms{};

	Parms.PAction = PAction;
	Parms.TargetList = std::move(TargetList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.SyncRewuestTutorial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlDataBaseComponent::SyncRewuestTutorial(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SyncRewuestTutorial");

	Params::BtlDataBaseComponent_SyncRewuestTutorial Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlDataBaseComponent.SyncTheugiaWindowEnd
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsEnd                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* UBtlDataBaseComponent::SyncTheugiaWindowEnd(class UBtlCoreComponent* BtlCore, bool* IsEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlDataBaseComponent", "SyncTheugiaWindowEnd");

	Params::BtlDataBaseComponent_SyncTheugiaWindowEnd Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsEnd != nullptr)
		*IsEnd = Parms.IsEnd;

	return Parms.ReturnValue;
}


// Function xrd777.BtlEnvironmentBase.DeleteLoversFogEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBtlEnvironmentBase::DeleteLoversFogEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEnvironmentBase", "DeleteLoversFogEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlEnvironmentBase.GetLoversFogEffects
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ANiagaraActor*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ANiagaraActor*> UBtlEnvironmentBase::GetLoversFogEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEnvironmentBase", "GetLoversFogEffects");

	Params::BtlEnvironmentBase_GetLoversFogEffects Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlEnvironmentBase.GetMonorailBGObj
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AFldAnimObj*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFldAnimObj* UBtlEnvironmentBase::GetMonorailBGObj()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEnvironmentBase", "GetMonorailBGObj");

	Params::BtlEnvironmentBase_GetMonorailBGObj Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlEnvironmentBase.GetMonorailRushEffects
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ANiagaraActor*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ANiagaraActor*> UBtlEnvironmentBase::GetMonorailRushEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEnvironmentBase", "GetMonorailRushEffects");

	Params::BtlEnvironmentBase_GetMonorailRushEffects Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlEnvironmentBase.GetMonorailStrapObj
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AFldAnimObj*>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AFldAnimObj*> UBtlEnvironmentBase::GetMonorailStrapObj()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEnvironmentBase", "GetMonorailStrapObj");

	Params::BtlEnvironmentBase_GetMonorailStrapObj Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlEnvironmentBase.GetMonorailWallObj
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AFldAnimObj*>              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AFldAnimObj*> UBtlEnvironmentBase::GetMonorailWallObj()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEnvironmentBase", "GetMonorailWallObj");

	Params::BtlEnvironmentBase_GetMonorailWallObj Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlEnvironmentBase.GetNyxAvatarFeatherEffects
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ANiagaraActor*>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ANiagaraActor*> UBtlEnvironmentBase::GetNyxAvatarFeatherEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEnvironmentBase", "GetNyxAvatarFeatherEffects");

	Params::BtlEnvironmentBase_GetNyxAvatarFeatherEffects Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlEnvironmentBase.InvisibleHangedmanBGObj
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBtlEnvironmentBase::InvisibleHangedmanBGObj()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEnvironmentBase", "InvisibleHangedmanBGObj");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlEnvironmentBase.RequestLoversFogEffect
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBtlEnvironmentBase::RequestLoversFogEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEnvironmentBase", "RequestLoversFogEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlEventAlloutShuffleMonitor.StartShuffleTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlEventAlloutShuffleMonitor::StartShuffleTime(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEventAlloutShuffleMonitor", "StartShuffleTime");

	Params::BtlEventAlloutShuffleMonitor_StartShuffleTime Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlEventAlloutShuffleMonitor.CheckReadyToDestroy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlEventAlloutShuffleMonitor::CheckReadyToDestroy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEventAlloutShuffleMonitor", "CheckReadyToDestroy");

	Params::BtlEventAlloutShuffleMonitor_CheckReadyToDestroy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlEventController.CommonEventStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlCommonEventType                     EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlEventController::CommonEventStart(EBtlCommonEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEventController", "CommonEventStart");

	Params::BtlEventController_CommonEventStart Parms{};

	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlEventController.EventStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlEventType                           EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlEventController::EventStart(EBtlEventType EventType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEventController", "EventStart");

	Params::BtlEventController_EventStart Parms{};

	Parms.EventType = EventType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlEventController.HasEventScriptForBP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FBtlEncountParam                 EncParam                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlEventController::HasEventScriptForBP(const struct FBtlEncountParam& EncParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEventController", "HasEventScriptForBP");

	Params::BtlEventController_HasEventScriptForBP Parms{};

	Parms.EncParam = std::move(EncParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlEventController.IsPlayingEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlEventController::IsPlayingEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEventController", "IsPlayingEvent");

	Params::BtlEventController_IsPlayingEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlEventController.ResetAllPerformer
// (Event, Public, BlueprintEvent)

void UBtlEventController::ResetAllPerformer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEventController", "ResetAllPerformer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlEventController.SetPerformer
// (Event, Public, BlueprintEvent)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlEventAreaType                       Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlEventController::SetPerformer(class ABtlActor* Actor, EBtlEventAreaType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEventController", "SetPerformer");

	Params::BtlEventController_SetPerformer Parms{};

	Parms.Actor = Actor;
	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlFadeManager.BtlCrossFadeIn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Frame                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlFadeManager::BtlCrossFadeIn(int32 Frame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlFadeManager", "BtlCrossFadeIn");

	Params::BtlFadeManager_BtlCrossFadeIn Parms{};

	Parms.Frame = Frame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlFadeManager.BtlCrossFadeOut
// (Final, Native, Static, Public, BlueprintCallable)

void ABtlFadeManager::BtlCrossFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlFadeManager", "BtlCrossFadeOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlFadeManager.BtlFadeCheckScreenWrap
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlFadeManager::BtlFadeCheckScreenWrap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlFadeManager", "BtlFadeCheckScreenWrap");

	Params::BtlFadeManager_BtlFadeCheckScreenWrap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlFadeManager.BtlFadeIn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EBtlFadeType                            Type_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Frame                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsEnemy                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsAIAction                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlFadeManager::BtlFadeIn(EBtlFadeType Type_0, int32 Frame, bool IsEnemy, bool IsAIAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlFadeManager", "BtlFadeIn");

	Params::BtlFadeManager_BtlFadeIn Parms{};

	Parms.Type_0 = Type_0;
	Parms.Frame = Frame;
	Parms.IsEnemy = IsEnemy;
	Parms.IsAIAction = IsAIAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlFadeManager.BtlFadeManagerGetInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABtlFadeManager*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlFadeManager* ABtlFadeManager::BtlFadeManagerGetInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlFadeManager", "BtlFadeManagerGetInstance");

	Params::BtlFadeManager_BtlFadeManagerGetInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlFadeManager.BtlFadeOut
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EBtlFadeType                            Type_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Frame                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsEnemy                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsAIAction                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlFadeManager::BtlFadeOut(EBtlFadeType Type_0, int32 Frame, bool IsEnemy, bool IsAIAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlFadeManager", "BtlFadeOut");

	Params::BtlFadeManager_BtlFadeOut Parms{};

	Parms.Type_0 = Type_0;
	Parms.Frame = Frame;
	Parms.IsEnemy = IsEnemy;
	Parms.IsAIAction = IsAIAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlFadeManager.BtlFadeSync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlFadeManager::BtlFadeSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlFadeManager", "BtlFadeSync");

	Params::BtlFadeManager_BtlFadeSync Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlFadeManager.ClearDrawItem
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlFadeManager::ClearDrawItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlFadeManager", "ClearDrawItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlFadeManager.FadeInit
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFadeOut                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlFadeManager::FadeInit(bool IsFadeOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlFadeManager", "FadeInit");

	Params::BtlFadeManager_FadeInit Parms{};

	Parms.IsFadeOut = IsFadeOut;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlFadeManager.FadeUpdate
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlFadeManager::FadeUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlFadeManager", "FadeUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlGuiAnalyzeComponent.CheckAttrFullOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiAnalyzeComponent::CheckAttrFullOpen(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "CheckAttrFullOpen");

	Params::BtlGuiAnalyzeComponent_CheckAttrFullOpen Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.CheckEndLoader
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiAnalyzeComponent::CheckEndLoader()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "CheckEndLoader");

	Params::BtlGuiAnalyzeComponent_CheckEndLoader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.CheckHighAnalyzeEnableSP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiAnalyzeComponent::CheckHighAnalyzeEnableSP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "CheckHighAnalyzeEnableSP");

	Params::BtlGuiAnalyzeComponent_CheckHighAnalyzeEnableSP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.CheckPlayHighAnalzeSupport
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiAnalyzeComponent::CheckPlayHighAnalzeSupport(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "CheckPlayHighAnalzeSupport");

	Params::BtlGuiAnalyzeComponent_CheckPlayHighAnalzeSupport Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.CheckShowArcana
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiAnalyzeComponent::CheckShowArcana(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "CheckShowArcana");

	Params::BtlGuiAnalyzeComponent_CheckShowArcana Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.CheckShowAttackAttr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiAnalyzeComponent::CheckShowAttackAttr(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "CheckShowAttackAttr");

	Params::BtlGuiAnalyzeComponent_CheckShowAttackAttr Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.CheckShowFukaFukidashi
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiAnalyzeComponent::CheckShowFukaFukidashi(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "CheckShowFukaFukidashi");

	Params::BtlGuiAnalyzeComponent_CheckShowFukaFukidashi Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.CheckShowItem
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiAnalyzeComponent::CheckShowItem(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "CheckShowItem");

	Params::BtlGuiAnalyzeComponent_CheckShowItem Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.CheckShowSkill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiAnalyzeComponent::CheckShowSkill(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "CheckShowSkill");

	Params::BtlGuiAnalyzeComponent_CheckShowSkill Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.CheckShowStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiAnalyzeComponent::CheckShowStatus(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "CheckShowStatus");

	Params::BtlGuiAnalyzeComponent_CheckShowStatus Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.CloseAnalyze
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiAnalyzeComponent::CloseAnalyze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "CloseAnalyze");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiAnalyzeComponent.CloseSelectWindow
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiAnalyzeComponent::CloseSelectWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "CloseSelectWindow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiAnalyzeComponent.GetAnalyzeSupportInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlAnalyzeSupportType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlGuiAnalyzeComponent::GetAnalyzeSupportInfo(class UBtlCoreComponent* BtlCore, EBtlAnalyzeSupportType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "GetAnalyzeSupportInfo");

	Params::BtlGuiAnalyzeComponent_GetAnalyzeSupportInfo Parms{};

	Parms.BtlCore = BtlCore;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.GetCostHighAnalyze
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlGuiAnalyzeComponent::GetCostHighAnalyze()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "GetCostHighAnalyze");

	Params::BtlGuiAnalyzeComponent_GetCostHighAnalyze Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.GetDebugEnableFlag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiAnalyzeComponent::GetDebugEnableFlag(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "GetDebugEnableFlag");

	Params::BtlGuiAnalyzeComponent_GetDebugEnableFlag Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.GetHighAnalyzeBMD
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBmdAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBmdAsset* UBtlGuiAnalyzeComponent::GetHighAnalyzeBMD(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "GetHighAnalyzeBMD");

	Params::BtlGuiAnalyzeComponent_GetHighAnalyzeBMD Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.GetSupportTypeTargetEnemy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlAnalyzeSupportType                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlAnalyzeSupportType UBtlGuiAnalyzeComponent::GetSupportTypeTargetEnemy(class UBtlCoreComponent* BtlCore, class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "GetSupportTypeTargetEnemy");

	Params::BtlGuiAnalyzeComponent_GetSupportTypeTargetEnemy Parms{};

	Parms.BtlCore = BtlCore;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.HiddenFukaPartyPanel
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiAnalyzeComponent::HiddenFukaPartyPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "HiddenFukaPartyPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiAnalyzeComponent.Init
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiAnalyzeComponent::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiAnalyzeComponent.OpenSelectWindow
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiAnalyzeComponent::OpenSelectWindow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "OpenSelectWindow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiAnalyzeComponent.PlayAnalyzeSupportInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiAnalyzeComponent::PlayAnalyzeSupportInfo(class UBtlCoreComponent* BtlCore, int32 PlayID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "PlayAnalyzeSupportInfo");

	Params::BtlGuiAnalyzeComponent_PlayAnalyzeSupportInfo Parms{};

	Parms.BtlCore = BtlCore;
	Parms.PlayID = PlayID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiAnalyzeComponent.PlaySupportInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiAnalyzeComponent::PlaySupportInfo(class UBtlCoreComponent* BtlCore, class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "PlaySupportInfo");

	Params::BtlGuiAnalyzeComponent_PlaySupportInfo Parms{};

	Parms.BtlCore = BtlCore;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiAnalyzeComponent.RemoveSameEnemyID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                InList                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class ABtlActor*                        PriorityActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABtlActor*>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABtlActor*> UBtlGuiAnalyzeComponent::RemoveSameEnemyID(const TArray<class ABtlActor*>& InList, class ABtlActor* PriorityActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "RemoveSameEnemyID");

	Params::BtlGuiAnalyzeComponent_RemoveSameEnemyID Parms{};

	Parms.InList = std::move(InList);
	Parms.PriorityActor = PriorityActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiAnalyzeComponent.SetSelectIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiAnalyzeComponent::SetSelectIndex(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "SetSelectIndex");

	Params::BtlGuiAnalyzeComponent_SetSelectIndex Parms{};

	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiAnalyzeComponent.ShowFukaPartyPanel
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiAnalyzeComponent::ShowFukaPartyPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "ShowFukaPartyPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiAnalyzeComponent.ShowMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiAnalyzeComponent::ShowMessage(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "ShowMessage");

	Params::BtlGuiAnalyzeComponent_ShowMessage Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiAnalyzeComponent.StartLoadResource
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiAnalyzeComponent::StartLoadResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "StartLoadResource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiAnalyzeComponent.UpdateAnalyze
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiAnalyzeComponent::UpdateAnalyze(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiAnalyzeComponent", "UpdateAnalyze");

	Params::BtlGuiAnalyzeComponent_UpdateAnalyze Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectCore.GetAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBtlGuiDrawObjectCore::GetAlpha()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "GetAlpha");

	Params::BtlGuiDrawObjectCore_GetAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawObjectCore.GetAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBtlGuiDrawObjectCore::GetAngle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "GetAngle");

	Params::BtlGuiDrawObjectCore_GetAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawObjectCore.GetAngleAnchorPos
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiDrawObjectCore::GetAngleAnchorPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "GetAngleAnchorPos");

	Params::BtlGuiDrawObjectCore_GetAngleAnchorPos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawObjectCore.GetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UBtlGuiDrawObjectCore::GetColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "GetColor");

	Params::BtlGuiDrawObjectCore_GetColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawObjectCore.GetPos
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiDrawObjectCore::GetPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "GetPos");

	Params::BtlGuiDrawObjectCore_GetPos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawObjectCore.GetScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiDrawObjectCore::GetScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "GetScale");

	Params::BtlGuiDrawObjectCore_GetScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawObjectCore.GetScaleAnchorPos
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiDrawObjectCore::GetScaleAnchorPos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "GetScaleAnchorPos");

	Params::BtlGuiDrawObjectCore_GetScaleAnchorPos Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawObjectCore.SetAlpha
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectCore::SetAlpha(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "SetAlpha");

	Params::BtlGuiDrawObjectCore_SetAlpha Parms{};

	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectCore.SetAnchorPos
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Anchor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectCore::SetAnchorPos(const struct FVector2D& Anchor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "SetAnchorPos");

	Params::BtlGuiDrawObjectCore_SetAnchorPos Parms{};

	Parms.Anchor = std::move(Anchor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectCore.SetAngle
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectCore::SetAngle(float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "SetAngle");

	Params::BtlGuiDrawObjectCore_SetAngle Parms{};

	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectCore.SetAngleAnchorPos
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Anchor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectCore::SetAngleAnchorPos(const struct FVector2D& Anchor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "SetAngleAnchorPos");

	Params::BtlGuiDrawObjectCore_SetAngleAnchorPos Parms{};

	Parms.Anchor = std::move(Anchor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectCore.SetChildObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlGuiDrawObjectCore*            Object                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawFlag                  Flag                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectCore::SetChildObject(class UBtlGuiDrawObjectCore* Object, const struct FBtlGuiDrawFlag& Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "SetChildObject");

	Params::BtlGuiDrawObjectCore_SetChildObject Parms{};

	Parms.Object = Object;
	Parms.Flag = std::move(Flag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectCore.SetColor
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectCore::SetColor(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "SetColor");

	Params::BtlGuiDrawObjectCore_SetColor Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectCore.SetPos
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectCore::SetPos(const struct FVector2D& Pos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "SetPos");

	Params::BtlGuiDrawObjectCore_SetPos Parms{};

	Parms.Pos = std::move(Pos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectCore.SetScale
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectCore::SetScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "SetScale");

	Params::BtlGuiDrawObjectCore_SetScale Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectCore.SetScaleAnchorPos
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Anchor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectCore::SetScaleAnchorPos(const struct FVector2D& Anchor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "SetScaleAnchorPos");

	Params::BtlGuiDrawObjectCore_SetScaleAnchorPos Parms{};

	Parms.Anchor = std::move(Anchor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectCore.SetScaleVec2
// (Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectCore::SetScaleVec2(const struct FVector2D& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectCore", "SetScaleVec2");

	Params::BtlGuiDrawObjectCore_SetScaleVec2 Parms{};

	Parms.Scale = std::move(Scale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectImage.GetWidthHeight
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   Width                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectImage::GetWidthHeight(float* Width, float* Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectImage", "GetWidthHeight");

	Params::BtlGuiDrawObjectImage_GetWidthHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Width != nullptr)
		*Width = Parms.Width;

	if (Height != nullptr)
		*Height = Parms.Height;
}


// Function xrd777.TitleCharaBase.OnChangeAnimationEvent
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ATitleCharaBase::OnChangeAnimationEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TitleCharaBase", "OnChangeAnimationEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlGuiDrawObjectText.ApplyFontStyleMakeOffset
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiDrawObjectText::ApplyFontStyleMakeOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectText", "ApplyFontStyleMakeOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectText.CalcAdjustedScale
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBtlGuiDrawText                  Item                                                   (Parm, NativeAccessSpecifierPublic)
// struct FVector2D                        TextCollision                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ScalingOnlyX                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        AdjustedScale                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectText::CalcAdjustedScale(const struct FBtlGuiDrawText& Item, const struct FVector2D& TextCollision, bool ScalingOnlyX, struct FVector2D* AdjustedScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectText", "CalcAdjustedScale");

	Params::BtlGuiDrawObjectText_CalcAdjustedScale Parms{};

	Parms.Item = std::move(Item);
	Parms.TextCollision = std::move(TextCollision);
	Parms.ScalingOnlyX = ScalingOnlyX;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AdjustedScale != nullptr)
		*AdjustedScale = std::move(Parms.AdjustedScale);
}


// Function xrd777.BtlGuiDrawObjectText.GetTextWidthHeight
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   Width                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectText::GetTextWidthHeight(float* Width, float* Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectText", "GetTextWidthHeight");

	Params::BtlGuiDrawObjectText_GetTextWidthHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Width != nullptr)
		*Width = Parms.Width;

	if (Height != nullptr)
		*Height = Parms.Height;
}


// Function xrd777.BtlGuiDrawObjectMsg.CalcAdjustedScale
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBtlGuiDrawMsg                   Item                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        TextCollision                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        AdjustedScale                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LineBreak                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnKeepScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectMsg::CalcAdjustedScale(const struct FBtlGuiDrawMsg& Item, const struct FVector2D& TextCollision, struct FVector2D* AdjustedScale, float* LineBreak, bool OnKeepScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectMsg", "CalcAdjustedScale");

	Params::BtlGuiDrawObjectMsg_CalcAdjustedScale Parms{};

	Parms.Item = std::move(Item);
	Parms.TextCollision = std::move(TextCollision);
	Parms.OnKeepScale = OnKeepScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AdjustedScale != nullptr)
		*AdjustedScale = std::move(Parms.AdjustedScale);

	if (LineBreak != nullptr)
		*LineBreak = Parms.LineBreak;
}


// Function xrd777.BtlGuiDrawObjectMsg.CalcAdjustedScaleOnlyX
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FBtlGuiDrawMsg                   Item                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector2D                        TextCollision                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        AdjustedScale                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectMsg::CalcAdjustedScaleOnlyX(const struct FBtlGuiDrawMsg& Item, const struct FVector2D& TextCollision, struct FVector2D* AdjustedScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectMsg", "CalcAdjustedScaleOnlyX");

	Params::BtlGuiDrawObjectMsg_CalcAdjustedScaleOnlyX Parms{};

	Parms.Item = std::move(Item);
	Parms.TextCollision = std::move(TextCollision);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AdjustedScale != nullptr)
		*AdjustedScale = std::move(Parms.AdjustedScale);
}


// Function xrd777.BtlGuiDrawObjectMsg.GetMsgWindowLength
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   Width                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectMsg::GetMsgWindowLength(float* Width, float* Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectMsg", "GetMsgWindowLength");

	Params::BtlGuiDrawObjectMsg_GetMsgWindowLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Width != nullptr)
		*Width = Parms.Width;

	if (Height != nullptr)
		*Height = Parms.Height;
}


// Function xrd777.BtlGuiDrawObjectMsg.ReCreateMsgInfo
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiDrawObjectMsg::ReCreateMsgInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectMsg", "ReCreateMsgInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectMsg.ResetBmd
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiDrawObjectMsg::ResetBmd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectMsg", "ResetBmd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectMsg.SetItemHelpMsg
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectMsg::SetItemHelpMsg(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectMsg", "SetItemHelpMsg");

	Params::BtlGuiDrawObjectMsg_SetItemHelpMsg Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectMsg.SetSkillHelpMsg
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiDrawObjectMsg::SetSkillHelpMsg()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectMsg", "SetSkillHelpMsg");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectRect.OnEnableTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    OnEnable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectRect::OnEnableTouchCollision(bool OnEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectRect", "OnEnableTouchCollision");

	Params::BtlGuiDrawObjectRect_OnEnableTouchCollision Parms{};

	Parms.OnEnable = OnEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectRect.SetListTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlTouchScreenID                       ScreenID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustAngle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustW                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustH                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AddLayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectRect::SetListTouchCollision(EBtlTouchScreenID ScreenID, int32 Idx, float AdjustX, float AdjustY, float AdjustAngle, float AdjustW, float AdjustH, int32 AddLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectRect", "SetListTouchCollision");

	Params::BtlGuiDrawObjectRect_SetListTouchCollision Parms{};

	Parms.ScreenID = ScreenID;
	Parms.Idx = Idx;
	Parms.AdjustX = AdjustX;
	Parms.AdjustY = AdjustY;
	Parms.AdjustAngle = AdjustAngle;
	Parms.AdjustW = AdjustW;
	Parms.AdjustH = AdjustH;
	Parms.AddLayer = AddLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectRect.SetScrollBarTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlTouchScreenID                       ScreenID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustAngle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustW                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustH                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnSlider                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectRect::SetScrollBarTouchCollision(EBtlTouchScreenID ScreenID, float AdjustX, float AdjustY, float AdjustAngle, float AdjustW, float AdjustH, bool OnSlider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectRect", "SetScrollBarTouchCollision");

	Params::BtlGuiDrawObjectRect_SetScrollBarTouchCollision Parms{};

	Parms.ScreenID = ScreenID;
	Parms.AdjustX = AdjustX;
	Parms.AdjustY = AdjustY;
	Parms.AdjustAngle = AdjustAngle;
	Parms.AdjustW = AdjustW;
	Parms.AdjustH = AdjustH;
	Parms.OnSlider = OnSlider;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectRect.SetTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlTouchCallbackValue                  CallbackValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustAngle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustW                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustH                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AddLayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectRect::SetTouchCollision(EBtlTouchCallbackValue CallbackValue, float AdjustX, float AdjustY, float AdjustAngle, float AdjustW, float AdjustH, int32 AddLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectRect", "SetTouchCollision");

	Params::BtlGuiDrawObjectRect_SetTouchCollision Parms{};

	Parms.CallbackValue = CallbackValue;
	Parms.AdjustX = AdjustX;
	Parms.AdjustY = AdjustY;
	Parms.AdjustAngle = AdjustAngle;
	Parms.AdjustW = AdjustW;
	Parms.AdjustH = AdjustH;
	Parms.AddLayer = AddLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectSprite.GetWidthHeight
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   Width                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectSprite::GetWidthHeight(float* Width, float* Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectSprite", "GetWidthHeight");

	Params::BtlGuiDrawObjectSprite_GetWidthHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Width != nullptr)
		*Width = Parms.Width;

	if (Height != nullptr)
		*Height = Parms.Height;
}


// Function xrd777.BtlGuiDrawObjectSprite.OnEnableTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    OnEnable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectSprite::OnEnableTouchCollision(bool OnEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectSprite", "OnEnableTouchCollision");

	Params::BtlGuiDrawObjectSprite_OnEnableTouchCollision Parms{};

	Parms.OnEnable = OnEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectSprite.SetListTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlTouchScreenID                       ScreenID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustAngle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustW                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustH                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AddLayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectSprite::SetListTouchCollision(EBtlTouchScreenID ScreenID, int32 Idx, float AdjustX, float AdjustY, float AdjustAngle, float AdjustW, float AdjustH, int32 AddLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectSprite", "SetListTouchCollision");

	Params::BtlGuiDrawObjectSprite_SetListTouchCollision Parms{};

	Parms.ScreenID = ScreenID;
	Parms.Idx = Idx;
	Parms.AdjustX = AdjustX;
	Parms.AdjustY = AdjustY;
	Parms.AdjustAngle = AdjustAngle;
	Parms.AdjustW = AdjustW;
	Parms.AdjustH = AdjustH;
	Parms.AddLayer = AddLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectSprite.SetTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlTouchCallbackValue                  CallbackValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustX                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustY                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustAngle                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustW                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AdjustH                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AddLayer                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectSprite::SetTouchCollision(EBtlTouchCallbackValue CallbackValue, float AdjustX, float AdjustY, float AdjustAngle, float AdjustW, float AdjustH, int32 AddLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectSprite", "SetTouchCollision");

	Params::BtlGuiDrawObjectSprite_SetTouchCollision Parms{};

	Parms.CallbackValue = CallbackValue;
	Parms.AdjustX = AdjustX;
	Parms.AdjustY = AdjustY;
	Parms.AdjustAngle = AdjustAngle;
	Parms.AdjustW = AdjustW;
	Parms.AdjustH = AdjustH;
	Parms.AddLayer = AddLayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectPlg.GetSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiDrawObjectPlg::GetSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectPlg", "GetSize");

	Params::BtlGuiDrawObjectPlg_GetSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.TheurgiaDraw.CloseSkillHelp
// (Event, Public, BlueprintEvent)

void ATheurgiaDraw::CloseSkillHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheurgiaDraw", "CloseSkillHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.TheurgiaDraw.DrawCharacteristicHelp
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATheurgiaDraw::DrawCharacteristicHelp(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheurgiaDraw", "DrawCharacteristicHelp");

	Params::TheurgiaDraw_DrawCharacteristicHelp Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TheurgiaDraw.DrawCharacteristicName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATheurgiaDraw::DrawCharacteristicName(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheurgiaDraw", "DrawCharacteristicName");

	Params::TheurgiaDraw_DrawCharacteristicName Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TheurgiaDraw.DrawCharaName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATheurgiaDraw::DrawCharaName(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheurgiaDraw", "DrawCharaName");

	Params::TheurgiaDraw_DrawCharaName Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TheurgiaDraw.DrawRiseTrend
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATheurgiaDraw::DrawRiseTrend(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheurgiaDraw", "DrawRiseTrend");

	Params::TheurgiaDraw_DrawRiseTrend Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TheurgiaDraw.DrawTheurgiaHelp
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATheurgiaDraw::DrawTheurgiaHelp(float X, float Y, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheurgiaDraw", "DrawTheurgiaHelp");

	Params::TheurgiaDraw_DrawTheurgiaHelp Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TheurgiaDraw.DrawTheurgiaName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATheurgiaDraw::DrawTheurgiaName(float X, float Y, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheurgiaDraw", "DrawTheurgiaName");

	Params::TheurgiaDraw_DrawTheurgiaName Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TheurgiaDraw.OpenSkillHelp
// (Event, Public, BlueprintEvent)

void ATheurgiaDraw::OpenSkillHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheurgiaDraw", "OpenSkillHelp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.TheurgiaDraw.SetCurrsorIndex
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   No                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATheurgiaDraw::SetCurrsorIndex(int32 No)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheurgiaDraw", "SetCurrsorIndex");

	Params::TheurgiaDraw_SetCurrsorIndex Parms{};

	Parms.No = No;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.TheurgiaDraw.UpdateTimes
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATheurgiaDraw::UpdateTimes(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheurgiaDraw", "UpdateTimes");

	Params::TheurgiaDraw_UpdateTimes Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TheurgiaDraw.GetTheurgiaCursorIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATheurgiaDraw::GetTheurgiaCursorIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheurgiaDraw", "GetTheurgiaCursorIndex");

	Params::TheurgiaDraw_GetTheurgiaCursorIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.TheurgiaDraw.GetTheurgiaListMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ATheurgiaDraw::GetTheurgiaListMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheurgiaDraw", "GetTheurgiaListMax");

	Params::TheurgiaDraw_GetTheurgiaListMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FclWeaponShopDrawActor.EventMcaCameraInit
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFclWeaponShopDrawActor::EventMcaCameraInit(int32 Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FclWeaponShopDrawActor", "EventMcaCameraInit");

	Params::FclWeaponShopDrawActor_EventMcaCameraInit Parms{};

	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.FclWeaponShopDrawActor.EventMcaCameraMemberSelect
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFclWeaponShopDrawActor::EventMcaCameraMemberSelect(int32 Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FclWeaponShopDrawActor", "EventMcaCameraMemberSelect");

	Params::FclWeaponShopDrawActor_EventMcaCameraMemberSelect Parms{};

	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.FclWeaponShopDrawActor.EventMcaCameraSell
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFclWeaponShopDrawActor::EventMcaCameraSell(int32 Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FclWeaponShopDrawActor", "EventMcaCameraSell");

	Params::FclWeaponShopDrawActor_EventMcaCameraSell Parms{};

	Parms.Tag = Tag;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlGuiDrawObjectPrimitive.MakeCircle
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectPrimitive::MakeCircle(float Radius, const struct FColor& Color, const struct FVector2D& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectPrimitive", "MakeCircle");

	Params::BtlGuiDrawObjectPrimitive_MakeCircle Parms{};

	Parms.Radius = Radius;
	Parms.Color = std::move(Color);
	Parms.Scale = std::move(Scale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectPrimitive.MakeRhombus
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectPrimitive::MakeRhombus(const struct FVector2D& Size, const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectPrimitive", "MakeRhombus");

	Params::BtlGuiDrawObjectPrimitive_MakeRhombus Parms{};

	Parms.Size = std::move(Size);
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectPrimitive.SetAntiLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Anti                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectPrimitive::SetAntiLength(float Anti)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectPrimitive", "SetAntiLength");

	Params::BtlGuiDrawObjectPrimitive_SetAntiLength Parms{};

	Parms.Anti = Anti;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectLineFrame.MakeCircle
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectLineFrame::MakeCircle(float Radius, const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectLineFrame", "MakeCircle");

	Params::BtlGuiDrawObjectLineFrame_MakeCircle Parms{};

	Parms.Radius = Radius;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectLineFrame.MakeRhombus
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectLineFrame::MakeRhombus(const struct FVector2D& Size, const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectLineFrame", "MakeRhombus");

	Params::BtlGuiDrawObjectLineFrame_MakeRhombus Parms{};

	Parms.Size = std::move(Size);
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawObjectLineFrame.SetAntiLength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Anti                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawObjectLineFrame::SetAntiLength(float Anti)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawObjectLineFrame", "SetAntiLength");

	Params::BtlGuiDrawObjectLineFrame_SetAntiLength Parms{};

	Parms.Anti = Anti;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIArcanaCardCapture.FadeInEffect
// (Final, Native, Public)

void AUIArcanaCardCapture::FadeInEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArcanaCardCapture", "FadeInEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIArcanaCardCapture.FadeOutEffect
// (Final, Native, Public)

void AUIArcanaCardCapture::FadeOutEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArcanaCardCapture", "FadeOutEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIArcanaCardCapture.StartAnimeRecoveryIn
// (Final, Native, Public)

void AUIArcanaCardCapture::StartAnimeRecoveryIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArcanaCardCapture", "StartAnimeRecoveryIn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIArcanaCardCapture.StartAnimeRecoveryOutv
// (Final, Native, Public)

void AUIArcanaCardCapture::StartAnimeRecoveryOutv()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArcanaCardCapture", "StartAnimeRecoveryOutv");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIArcanaCardCapture.StartAnimeRecoveryTurn
// (Final, Native, Public)

void AUIArcanaCardCapture::StartAnimeRecoveryTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArcanaCardCapture", "StartAnimeRecoveryTurn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIArcanaCardCapture.StartAnimeReverse
// (Final, Native, Public)

void AUIArcanaCardCapture::StartAnimeReverse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArcanaCardCapture", "StartAnimeReverse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIArcanaCardCapture.StartPoemOutAnime
// (Final, Native, Public)

void AUIArcanaCardCapture::StartPoemOutAnime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIArcanaCardCapture", "StartPoemOutAnime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawComponent.BtlGuiCheckDrawEnable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::BtlGuiCheckDrawEnable(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiDrawComponent", "BtlGuiCheckDrawEnable");

	Params::BtlGuiDrawComponent_BtlGuiCheckDrawEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function xrd777.BtlGuiDrawComponent.BtlGuiSetDrawEnable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::BtlGuiSetDrawEnable(bool IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiDrawComponent", "BtlGuiSetDrawEnable");

	Params::BtlGuiDrawComponent_BtlGuiSetDrawEnable Parms{};

	Parms.IsEnable = IsEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawComponent.BtlGuiWorldToScreen
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiDrawComponent::BtlGuiWorldToScreen(const struct FVector& WorldPos, class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiDrawComponent", "BtlGuiWorldToScreen");

	Params::BtlGuiDrawComponent_BtlGuiWorldToScreen Parms{};

	Parms.WorldPos = std::move(WorldPos);
	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawComponent.BtlGuiWorldToScreen2
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          WorldPos                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerCameraManager*             CameraManager                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        OutPos                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FZ                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACameraActor*                     CameraActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiDrawComponent::BtlGuiWorldToScreen2(const struct FVector& WorldPos, class APlayerCameraManager* CameraManager, struct FVector2D* OutPos, float* FZ, class ACameraActor* CameraActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiDrawComponent", "BtlGuiWorldToScreen2");

	Params::BtlGuiDrawComponent_BtlGuiWorldToScreen2 Parms{};

	Parms.WorldPos = std::move(WorldPos);
	Parms.CameraManager = CameraManager;
	Parms.CameraActor = CameraActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPos != nullptr)
		*OutPos = std::move(Parms.OutPos);

	if (FZ != nullptr)
		*FZ = Parms.FZ;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawComponent.GetViewportSize
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiDrawComponent::GetViewportSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiDrawComponent", "GetViewportSize");

	Params::BtlGuiDrawComponent_GetViewportSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawComponent.ClearCanvas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlGuiCanvas                           Canvas                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlBlendState                   Bs                                                     (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::ClearCanvas(EBtlGuiCanvas Canvas, float Alpha, const struct FBtlBlendState& Bs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "ClearCanvas");

	Params::BtlGuiDrawComponent_ClearCanvas Parms{};

	Parms.Canvas = Canvas;
	Parms.Alpha = Alpha;
	Parms.Bs = std::move(Bs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawComponent.ClearDrawItem
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiDrawComponent::ClearDrawItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "ClearDrawItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawComponent.ClearScreen
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectClearScreen*     OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlGuiOT                               OT                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::ClearScreen(int32 GrpNo, int32* OutID, class UBtlGuiDrawObjectClearScreen** OutItem, const struct FColor& Color, EBtlGuiOT OT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "ClearScreen");

	Params::BtlGuiDrawComponent_ClearScreen Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Color = std::move(Color);
	Parms.OT = OT;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawImage
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         Texture                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Pos                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectImage*           OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawImage(int32 GrpNo, class UTexture* Texture, const struct FVector2D& Pos, int32* OutID, class UBtlGuiDrawObjectImage** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawImage");

	Params::BtlGuiDrawComponent_CreateDrawImage Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Texture = Texture;
	Parms.Pos = std::move(Pos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawImageByStruct
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawImage                 Item                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectImage*           OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawImageByStruct(int32 GrpNo, const struct FBtlGuiDrawImage& Item, int32* OutID, class UBtlGuiDrawObjectImage** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawImageByStruct");

	Params::BtlGuiDrawComponent_CreateDrawImageByStruct Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawLineFrame
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawLineFrame             Item                                                   (Parm, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectLineFrame*       OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawLineFrame(int32 GrpNo, const struct FBtlGuiDrawLineFrame& Item, int32* OutID, class UBtlGuiDrawObjectLineFrame** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawLineFrame");

	Params::BtlGuiDrawComponent_CreateDrawLineFrame Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawMaterial
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawMaterial              Item                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectMaterial*        OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawMaterial(int32 GrpNo, const struct FBtlGuiDrawMaterial& Item, int32* OutID, class UBtlGuiDrawObjectMaterial** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawMaterial");

	Params::BtlGuiDrawComponent_CreateDrawMaterial Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawMsg
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawMsg                   Item                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectMsg*             OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawMsg(int32 GrpNo, const struct FBtlGuiDrawMsg& Item, int32* OutID, class UBtlGuiDrawObjectMsg** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawMsg");

	Params::BtlGuiDrawComponent_CreateDrawMsg Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawPanel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawPanel                 Item                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectPanel*           OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawPanel(int32 GrpNo, const struct FBtlGuiDrawPanel& Item, int32* OutID, class UBtlGuiDrawObjectPanel** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawPanel");

	Params::BtlGuiDrawComponent_CreateDrawPanel Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawPlg
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawPlg                   Item                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectPlg*             OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawPlg(int32 GrpNo, const struct FBtlGuiDrawPlg& Item, int32* OutID, class UBtlGuiDrawObjectPlg** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawPlg");

	Params::BtlGuiDrawComponent_CreateDrawPlg Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawPrimitive
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawPrimitive             Item                                                   (Parm, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectPrimitive*       OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawPrimitive(int32 GrpNo, const struct FBtlGuiDrawPrimitive& Item, int32* OutID, class UBtlGuiDrawObjectPrimitive** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawPrimitive");

	Params::BtlGuiDrawComponent_CreateDrawPrimitive Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawRect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawRect                  Item                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectRect*            OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawRect(int32 GrpNo, const struct FBtlGuiDrawRect& Item, int32* OutID, class UBtlGuiDrawObjectRect** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawRect");

	Params::BtlGuiDrawComponent_CreateDrawRect Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawRoundRect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawRoundRect             Item                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectRoundRect*       OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawRoundRect(int32 GrpNo, const struct FBtlGuiDrawRoundRect& Item, int32* OutID, class UBtlGuiDrawObjectRoundRect** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawRoundRect");

	Params::BtlGuiDrawComponent_CreateDrawRoundRect Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawSilhouette
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawSilhouette            Item                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectSilhouette*      OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawSilhouette(int32 GrpNo, const struct FBtlGuiDrawSilhouette& Item, int32* OutID, class UBtlGuiDrawObjectSilhouette** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawSilhouette");

	Params::BtlGuiDrawComponent_CreateDrawSilhouette Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawSprite
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawSprite                Item                                                   (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectSprite*          OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnChangeByPlatform                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawSprite(int32 GrpNo, const struct FBtlGuiDrawSprite& Item, int32* OutID, class UBtlGuiDrawObjectSprite** OutItem, bool OnChangeByPlatform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawSprite");

	Params::BtlGuiDrawComponent_CreateDrawSprite Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Item = std::move(Item);
	Parms.OnChangeByPlatform = OnChangeByPlatform;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.CreateDrawText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBtlGuiDrawText                  Item                                                   (Parm, NativeAccessSpecifierPublic)
// int32                                   OutID                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectText*            OutItem                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::CreateDrawText(int32 GrpNo, const struct FBtlGuiDrawText& Item, int32* OutID, class UBtlGuiDrawObjectText** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "CreateDrawText");

	Params::BtlGuiDrawComponent_CreateDrawText Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Item = std::move(Item);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutID != nullptr)
		*OutID = Parms.OutID;

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function xrd777.BtlGuiDrawComponent.Draw
// (Native, Public, BlueprintCallable)

void UBtlGuiDrawComponent::Draw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "Draw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawComponent.DrawAtCanvas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlGuiCanvas                           UseCanvas                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::DrawAtCanvas(EBtlGuiCanvas UseCanvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "DrawAtCanvas");

	Params::BtlGuiDrawComponent_DrawAtCanvas Parms{};

	Parms.UseCanvas = UseCanvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawComponent.FrameBufferCapture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Is2DCapture                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UBtlGuiDrawComponent::FrameBufferCapture(bool Is2DCapture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "FrameBufferCapture");

	Params::BtlGuiDrawComponent_FrameBufferCapture Parms{};

	Parms.Is2DCapture = Is2DCapture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawComponent.GetAllDrawItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<int32>                           IdAry                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class UBtlGuiDrawObjectCore*>    ObjAry                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::GetAllDrawItem(TArray<int32>* IdAry, TArray<class UBtlGuiDrawObjectCore*>* ObjAry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "GetAllDrawItem");

	Params::BtlGuiDrawComponent_GetAllDrawItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IdAry != nullptr)
		*IdAry = std::move(Parms.IdAry);

	if (ObjAry != nullptr)
		*ObjAry = std::move(Parms.ObjAry);
}


// Function xrd777.BtlGuiDrawComponent.GetDrawItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlGuiDrawObjectCore*            Obj                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::GetDrawItem(int32 ID, class UBtlGuiDrawObjectCore** Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "GetDrawItem");

	Params::BtlGuiDrawComponent_GetDrawItem Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Obj != nullptr)
		*Obj = Parms.Obj;
}


// Function xrd777.BtlGuiDrawComponent.GetGroupDrawItem
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   GrpNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           IdAry                                                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<class UBtlGuiDrawObjectCore*>    ObjAry                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    Reverse                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::GetGroupDrawItem(int32 GrpNo, TArray<int32>* IdAry, TArray<class UBtlGuiDrawObjectCore*>* ObjAry, bool Reverse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "GetGroupDrawItem");

	Params::BtlGuiDrawComponent_GetGroupDrawItem Parms{};

	Parms.GrpNo = GrpNo;
	Parms.Reverse = Reverse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IdAry != nullptr)
		*IdAry = std::move(Parms.IdAry);

	if (ObjAry != nullptr)
		*ObjAry = std::move(Parms.ObjAry);
}


// Function xrd777.BtlGuiDrawComponent.GetRenderTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlGuiCanvas                           Canvas                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UBtlGuiDrawComponent::GetRenderTarget(EBtlGuiCanvas Canvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "GetRenderTarget");

	Params::BtlGuiDrawComponent_GetRenderTarget Parms{};

	Parms.Canvas = Canvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawComponent.GetVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiDrawComponent::GetVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "GetVisible");

	Params::BtlGuiDrawComponent_GetVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawComponent.IsNotUsingPS4PS5GuardYesNoKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBtlGuiDrawObjectSprite*          Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiDrawComponent::IsNotUsingPS4PS5GuardYesNoKey(class UBtlGuiDrawObjectSprite* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "IsNotUsingPS4PS5GuardYesNoKey");

	Params::BtlGuiDrawComponent_IsNotUsingPS4PS5GuardYesNoKey Parms{};

	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawComponent.IsWindowsPlatform
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiDrawComponent::IsWindowsPlatform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "IsWindowsPlatform");

	Params::BtlGuiDrawComponent_IsWindowsPlatform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiDrawComponent.SetAryVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::SetAryVisible(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "SetAryVisible");

	Params::BtlGuiDrawComponent_SetAryVisible Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawComponent.SetCanvas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlGuiCanvas                           Canvas                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::SetCanvas(EBtlGuiCanvas Canvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "SetCanvas");

	Params::BtlGuiDrawComponent_SetCanvas Parms{};

	Parms.Canvas = Canvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawComponent.SetComponentBoolOff
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsOff                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::SetComponentBoolOff(bool IsOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "SetComponentBoolOff");

	Params::BtlGuiDrawComponent_SetComponentBoolOff Parms{};

	Parms.IsOff = IsOff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawComponent.SetItemVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::SetItemVisible(int32 Idx, bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "SetItemVisible");

	Params::BtlGuiDrawComponent_SetItemVisible Parms{};

	Parms.Idx = Idx;
	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawComponent.SetVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::SetVisible(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "SetVisible");

	Params::BtlGuiDrawComponent_SetVisible Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiDrawComponent.TranslateObjectToAsset
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UObject>              TranslateClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OutAsset                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiDrawComponent::TranslateObjectToAsset(class UObject* Obj, TSubclassOf<class UObject> TranslateClass, class UObject** OutAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "TranslateObjectToAsset");

	Params::BtlGuiDrawComponent_TranslateObjectToAsset Parms{};

	Parms.Obj = Obj;
	Parms.TranslateClass = TranslateClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAsset != nullptr)
		*OutAsset = Parms.OutAsset;
}


// Function xrd777.BtlGuiDrawComponent.TranslateObjectToPlgAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPlgAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPlgAsset* UBtlGuiDrawComponent::TranslateObjectToPlgAsset(class UObject* Obj)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiDrawComponent", "TranslateObjectToPlgAsset");

	Params::BtlGuiDrawComponent_TranslateObjectToPlgAsset Parms{};

	Parms.Obj = Obj;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlEncountWipeCore.BtlEncountWipeCheckWraped
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlEncountWipeCore::BtlEncountWipeCheckWraped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlEncountWipeCore", "BtlEncountWipeCheckWraped");

	Params::BtlEncountWipeCore_BtlEncountWipeCheckWraped Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlEncountWipeCore.BtlEncountWipeDeleteInstance
// (Final, Native, Static, Public, BlueprintCallable)

void ABtlEncountWipeCore::BtlEncountWipeDeleteInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlEncountWipeCore", "BtlEncountWipeDeleteInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlEncountWipeCore.BtlEncountWipeGetInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABtlEncountWipeCore*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlEncountWipeCore* ABtlEncountWipeCore::BtlEncountWipeGetInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlEncountWipeCore", "BtlEncountWipeGetInstance");

	Params::BtlEncountWipeCore_BtlEncountWipeGetInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlEncountWipeCore.ClearResources
// (Final, Native, Static, Public, BlueprintCallable)

void ABtlEncountWipeCore::ClearResources()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlEncountWipeCore", "ClearResources");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlEncountWipeCore.LoadResources
// (Final, Native, Static, Public, BlueprintCallable)

void ABtlEncountWipeCore::LoadResources()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlEncountWipeCore", "LoadResources");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlEncountWipeCore.CheckFadeInEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlEncountWipeCore::CheckFadeInEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEncountWipeCore", "CheckFadeInEnd");

	Params::BtlEncountWipeCore_CheckFadeInEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlEncountWipeCore.ForceFadeIn
// (Final, Native, Public, BlueprintCallable)

void ABtlEncountWipeCore::ForceFadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEncountWipeCore", "ForceFadeIn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlEncountWipeCore.GetWipeType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlEncountWipeType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlEncountWipeType ABtlEncountWipeCore::GetWipeType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEncountWipeCore", "GetWipeType");

	Params::BtlEncountWipeCore_GetWipeType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlEncountWipeCore.RequestEndWipe
// (Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                Core_0                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlEncountWipeCore::RequestEndWipe(class UBtlCoreComponent* Core_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlEncountWipeCore", "RequestEndWipe");

	Params::BtlEncountWipeCore_RequestEndWipe Parms{};

	Parms.Core_0 = Core_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiEncountWipe.EndWipe
// (Final, Native, Public, BlueprintCallable)

void ABtlGuiEncountWipe::EndWipe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiEncountWipe", "EndWipe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiEncountWipe.GetCharacterAnimTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlGuiEncountWipe::GetCharacterAnimTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiEncountWipe", "GetCharacterAnimTime");

	Params::BtlGuiEncountWipe_GetCharacterAnimTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiEncountWipe.GetCharacterComp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAppCharacterComp*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAppCharacterComp* ABtlGuiEncountWipe::GetCharacterComp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiEncountWipe", "GetCharacterComp");

	Params::BtlGuiEncountWipe_GetCharacterComp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiEncountWipe.SetCharacterAttackAnim
// (Final, Native, Public, BlueprintCallable)

void ABtlGuiEncountWipe::SetCharacterAttackAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiEncountWipe", "SetCharacterAttackAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiEncountWipe.SetCharacterVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiEncountWipe::SetCharacterVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiEncountWipe", "SetCharacterVisible");

	Params::BtlGuiEncountWipe_SetCharacterVisible Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiEncountWipe.SetTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ABtlGuiEncountWipe::SetTransform(const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiEncountWipe", "SetTransform");

	Params::BtlGuiEncountWipe_SetTransform Parms{};

	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPinchEncountWipe.EndWipe
// (Final, Native, Public, BlueprintCallable)

void ABtlGuiPinchEncountWipe::EndWipe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPinchEncountWipe", "EndWipe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonTBoxController.AutoFloorAdvanceProcess
// (Final, Native, Public)

void UFldDungeonTBoxController::AutoFloorAdvanceProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonTBoxController", "AutoFloorAdvanceProcess");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonTBoxController.DesignFloorAdvanceProcess
// (Final, Native, Public)

void UFldDungeonTBoxController::DesignFloorAdvanceProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonTBoxController", "DesignFloorAdvanceProcess");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonTBoxController.FixedFloorAdvanceProcess
// (Final, Native, Public)

void UFldDungeonTBoxController::FixedFloorAdvanceProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonTBoxController", "FixedFloorAdvanceProcess");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonTBoxController.ForbiddenDoorHitEvent
// (Final, Native, Public)
// Parameters:
// EDungeonObjHitEvent                     EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFldDungeonObjectActor*           PObject                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldDungeonTBoxController::ForbiddenDoorHitEvent(EDungeonObjHitEvent EventType, int32 ID, class AFldDungeonObjectActor* PObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonTBoxController", "ForbiddenDoorHitEvent");

	Params::FldDungeonTBoxController_ForbiddenDoorHitEvent Parms{};

	Parms.EventType = EventType;
	Parms.ID = ID;
	Parms.PObject = PObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonTBoxController.HitEvent
// (Final, Native, Public)
// Parameters:
// EDungeonObjHitEvent                     EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFldDungeonObjectActor*           PObject                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldDungeonTBoxController::HitEvent(EDungeonObjHitEvent EventType, int32 ID, class AFldDungeonObjectActor* PObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonTBoxController", "HitEvent");

	Params::FldDungeonTBoxController_HitEvent Parms{};

	Parms.EventType = EventType;
	Parms.ID = ID;
	Parms.PObject = PObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiEventEncountWipe.EndWipe
// (Final, Native, Public, BlueprintCallable)

void ABtlGuiEventEncountWipe::EndWipe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiEventEncountWipe", "EndWipe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiFBufferCapture.BtlFBufferCaptureCreate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   GrayScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WhiteOut                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnimTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiFBufferCapture::BtlFBufferCaptureCreate(float GrayScale, float WhiteOut, float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiFBufferCapture", "BtlFBufferCaptureCreate");

	Params::BtlGuiFBufferCapture_BtlFBufferCaptureCreate Parms{};

	Parms.GrayScale = GrayScale;
	Parms.WhiteOut = WhiteOut;
	Parms.AnimTime = AnimTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiFBufferCapture.BtlFBufferCaptureCreate2D
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   GrayScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WhiteOut                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnimTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiFBufferCapture::BtlFBufferCaptureCreate2D(float GrayScale, float WhiteOut, float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiFBufferCapture", "BtlFBufferCaptureCreate2D");

	Params::BtlGuiFBufferCapture_BtlFBufferCaptureCreate2D Parms{};

	Parms.GrayScale = GrayScale;
	Parms.WhiteOut = WhiteOut;
	Parms.AnimTime = AnimTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiFBufferCapture.BtlFBufferCaptureDelete
// (Final, Native, Static, Public, BlueprintCallable)

void ABtlGuiFBufferCapture::BtlFBufferCaptureDelete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiFBufferCapture", "BtlFBufferCaptureDelete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiFBufferCapture.BtlFBufferCaptureDrawEnd
// (Final, Native, Static, Public, BlueprintCallable)

void ABtlGuiFBufferCapture::BtlFBufferCaptureDrawEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiFBufferCapture", "BtlFBufferCaptureDrawEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiFBufferCapture.BtlFBufferCaptureGetInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABtlGuiFBufferCapture*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlGuiFBufferCapture* ABtlGuiFBufferCapture::BtlFBufferCaptureGetInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiFBufferCapture", "BtlFBufferCaptureGetInstance");

	Params::BtlGuiFBufferCapture_BtlFBufferCaptureGetInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiFBufferCapture.BtlFBufferCaptureStart
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Is2DCapture_0                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsGrayScale                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnimTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiFBufferCapture::BtlFBufferCaptureStart(bool Is2DCapture_0, bool IsGrayScale, float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiFBufferCapture", "BtlFBufferCaptureStart");

	Params::BtlGuiFBufferCapture_BtlFBufferCaptureStart Parms{};

	Parms.Is2DCapture_0 = Is2DCapture_0;
	Parms.IsGrayScale = IsGrayScale;
	Parms.AnimTime = AnimTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiFBufferCapture.SetCapture
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlGuiFBufferCapture::SetCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiFBufferCapture", "SetCapture");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlGuiFBufferCapture.SetGrayScale
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   GrayScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiFBufferCapture::SetGrayScale(float GrayScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiFBufferCapture", "SetGrayScale");

	Params::BtlGuiFBufferCapture_SetGrayScale Parms{};

	Parms.GrayScale = GrayScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlGuiFBufferCapture.SetupBP
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlGuiFBufferCapture::SetupBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiFBufferCapture", "SetupBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlGuiFBufferCapture.SetWhiteOut
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   WhiteOut                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiFBufferCapture::SetWhiteOut(float WhiteOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiFBufferCapture", "SetWhiteOut");

	Params::BtlGuiFBufferCapture_SetWhiteOut Parms{};

	Parms.WhiteOut = WhiteOut;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlGuiIconComponent.CallJyokyoHelpBroadcast
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiIconComponent::CallJyokyoHelpBroadcast()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "CallJyokyoHelpBroadcast");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.CancelJyokyoHelpForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBtlGuiIconComponent::CancelJyokyoHelpForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "CancelJyokyoHelpForBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlGuiIconComponent.CheckPartyPanelVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiIconComponent::CheckPartyPanelVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "CheckPartyPanelVisible");

	Params::BtlGuiIconComponent_CheckPartyPanelVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiIconComponent.ClearDamagePanelForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBtlGuiIconComponent::ClearDamagePanelForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "ClearDamagePanelForBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlGuiIconComponent.ClearKeyHelpOffset
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiIconComponent::ClearKeyHelpOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "ClearKeyHelpOffset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.ClearSkillNamePanelForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UBtlGuiIconComponent::ClearSkillNamePanelForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "ClearSkillNamePanelForBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlGuiIconComponent.CreateActionSuggestion
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiIconComponent::CreateActionSuggestion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "CreateActionSuggestion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.CreateDamagePanelForBP
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBtlGuiIconDamage                Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::CreateDamagePanelForBP(const struct FBtlGuiIconDamage& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "CreateDamagePanelForBP");

	Params::BtlGuiIconComponent_CreateDamagePanelForBP Parms{};

	Parms.Data = std::move(Data);

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlGuiIconComponent.CreatePartyPanel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::CreatePartyPanel(float Scale, float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "CreatePartyPanel");

	Params::BtlGuiIconComponent_CreatePartyPanel Parms{};

	Parms.Scale = Scale;
	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.CreateSkillNamePanelForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBtlCommandType                         Cmd                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsEnemy                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::CreateSkillNamePanelForBP(EBtlCommandType Cmd, int32 ID, bool IsEnemy, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "CreateSkillNamePanelForBP");

	Params::BtlGuiIconComponent_CreateSkillNamePanelForBP Parms{};

	Parms.Cmd = Cmd;
	Parms.ID = ID;
	Parms.IsEnemy = IsEnemy;
	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlGuiIconComponent.CreateTotalDamagePanelForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Damage                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::CreateTotalDamagePanelForBP(int32 Damage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "CreateTotalDamagePanelForBP");

	Params::BtlGuiIconComponent_CreateTotalDamagePanelForBP Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlGuiIconComponent.DamagePartyPanel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsWeak                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::DamagePartyPanel(int32 PlayerId, bool IsWeak)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "DamagePartyPanel");

	Params::BtlGuiIconComponent_DamagePartyPanel Parms{};

	Parms.PlayerId = PlayerId;
	Parms.IsWeak = IsWeak;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.DestroyActionSuggestion
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiIconComponent::DestroyActionSuggestion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "DestroyActionSuggestion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.DestroyPartyPanel
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiIconComponent::DestroyPartyPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "DestroyPartyPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.DisableCharacterPartyPanel
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiIconComponent::DisableCharacterPartyPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "DisableCharacterPartyPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.GetRenderTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UBtlGuiIconComponent::GetRenderTargets(int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "GetRenderTargets");

	Params::BtlGuiIconComponent_GetRenderTargets Parms{};

	Parms.Num = Num;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiIconComponent.LoadSyncPartyPanel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiIconComponent::LoadSyncPartyPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "LoadSyncPartyPanel");

	Params::BtlGuiIconComponent_LoadSyncPartyPanel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiIconComponent.RecoverPartyPanel_BadStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::RecoverPartyPanel_BadStatus(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "RecoverPartyPanel_BadStatus");

	Params::BtlGuiIconComponent_RecoverPartyPanel_BadStatus Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.RecoverPartyPanel_HP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::RecoverPartyPanel_HP(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "RecoverPartyPanel_HP");

	Params::BtlGuiIconComponent_RecoverPartyPanel_HP Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.RecoverPartyPanel_SP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::RecoverPartyPanel_SP(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "RecoverPartyPanel_SP");

	Params::BtlGuiIconComponent_RecoverPartyPanel_SP Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.RequestJyokyoHelpForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Genus                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MsgNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Var1                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Var2                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RenderTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DelayTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceOverride                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::RequestJyokyoHelpForBP(int32 Genus, int32 ID, int32 MsgNo, int32 Var1, int32 Var2, float RenderTime, float DelayTime, bool ForceOverride, int32 Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "RequestJyokyoHelpForBP");

	Params::BtlGuiIconComponent_RequestJyokyoHelpForBP Parms{};

	Parms.Genus = Genus;
	Parms.ID = ID;
	Parms.MsgNo = MsgNo;
	Parms.Var1 = Var1;
	Parms.Var2 = Var2;
	Parms.RenderTime = RenderTime;
	Parms.DelayTime = DelayTime;
	Parms.ForceOverride = ForceOverride;
	Parms.Flags_0 = Flags_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlGuiIconComponent.SetCharacterPartyPanel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        ActiveActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSkipAnim                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::SetCharacterPartyPanel(class ABtlActor* ActiveActor, bool IsSkipAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "SetCharacterPartyPanel");

	Params::BtlGuiIconComponent_SetCharacterPartyPanel Parms{};

	Parms.ActiveActor = ActiveActor;
	Parms.IsSkipAnim = IsSkipAnim;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.SetKeyHelpOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlGuiIconKeyHelp                      Help                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NoChange                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DisableParam                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::SetKeyHelpOffset(EBtlGuiIconKeyHelp Help, class UBtlCoreComponent* BtlCore, bool NoChange, bool DisableParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "SetKeyHelpOffset");

	Params::BtlGuiIconComponent_SetKeyHelpOffset Parms{};

	Parms.Help = Help;
	Parms.BtlCore = BtlCore;
	Parms.NoChange = NoChange;
	Parms.DisableParam = DisableParam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.SetKeyHelpVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::SetKeyHelpVisible(bool Visible, class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "SetKeyHelpVisible");

	Params::BtlGuiIconComponent_SetKeyHelpVisible Parms{};

	Parms.Visible = Visible;
	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.SetPartyPanelVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Vidible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ResetAnimFlag                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::SetPartyPanelVisible(bool Vidible, bool ResetAnimFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "SetPartyPanelVisible");

	Params::BtlGuiIconComponent_SetPartyPanelVisible Parms{};

	Parms.Vidible = Vidible;
	Parms.ResetAnimFlag = ResetAnimFlag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.SetVariableJyokyoHelp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlGuiDrawObjectMsg*             PMsg                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Genus                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Var1                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Var2                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Flags_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::SetVariableJyokyoHelp(class UBtlGuiDrawObjectMsg* PMsg, int32 Genus, int32 ID, int32 Var1, int32 Var2, int32 Flags_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "SetVariableJyokyoHelp");

	Params::BtlGuiIconComponent_SetVariableJyokyoHelp Parms{};

	Parms.PMsg = PMsg;
	Parms.Genus = Genus;
	Parms.ID = ID;
	Parms.Var1 = Var1;
	Parms.Var2 = Var2;
	Parms.Flags_0 = Flags_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.ShowFukaPartyPanel
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiIconComponent::ShowFukaPartyPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "ShowFukaPartyPanel");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.Start1MoreEffectForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnemy                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::Start1MoreEffectForBP(bool IsEnemy, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "Start1MoreEffectForBP");

	Params::BtlGuiIconComponent_Start1MoreEffectForBP Parms{};

	Parms.IsEnemy = IsEnemy;
	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlGuiIconComponent.StartEncountEffectForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPlayerAdvantage                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::StartEncountEffectForBP(bool IsPlayerAdvantage, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "StartEncountEffectForBP");

	Params::BtlGuiIconComponent_StartEncountEffectForBP Parms{};

	Parms.IsPlayerAdvantage = IsPlayerAdvantage;
	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlGuiIconComponent.UpdateParamPartyPanel_HP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Hp                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::UpdateParamPartyPanel_HP(int32 PlayerId, int32 Hp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "UpdateParamPartyPanel_HP");

	Params::BtlGuiIconComponent_UpdateParamPartyPanel_HP Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Hp = Hp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.UpdateParamPartyPanel_SP
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Sp                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::UpdateParamPartyPanel_SP(int32 PlayerId, int32 Sp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "UpdateParamPartyPanel_SP");

	Params::BtlGuiIconComponent_UpdateParamPartyPanel_SP Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Sp = Sp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiIconComponent.VisibleActionSuggestion
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiIconComponent::VisibleActionSuggestion(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiIconComponent", "VisibleActionSuggestion");

	Params::BtlGuiIconComponent_VisibleActionSuggestion Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CmpSystem.OnEndPlaySubProcess
// (Final, Native, Private)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EEndPlayReason                          EndPlayReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCmpSystem::OnEndPlaySubProcess(class AActor* Actor, EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CmpSystem", "OnEndPlaySubProcess");

	Params::CmpSystem_OnEndPlaySubProcess Parms{};

	Parms.Actor = Actor;
	Parms.EndPlayReason = EndPlayReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiListComponent.GetCursor
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   CursorIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TopIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiListComponent::GetCursor(int32* CursorIndex, int32* TopIndex, int32* CurrentIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiListComponent", "GetCursor");

	Params::BtlGuiListComponent_GetCursor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CursorIndex != nullptr)
		*CursorIndex = Parms.CursorIndex;

	if (TopIndex != nullptr)
		*TopIndex = Parms.TopIndex;

	if (CurrentIndex != nullptr)
		*CurrentIndex = Parms.CurrentIndex;
}


// Function xrd777.BtlGuiListComponent.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemDtarMin                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemDtarMax                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ItemNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EBtlListScreenID                        ScreenID                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CursorIdx                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ListTopIdx                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MoveType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiListComponent::Init(int32 ItemDtarMin, int32 ItemDtarMax, int32 ItemNum, EBtlListScreenID ScreenID, int32 CursorIdx, int32 ListTopIdx, int32 MoveType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiListComponent", "Init");

	Params::BtlGuiListComponent_Init Parms{};

	Parms.ItemDtarMin = ItemDtarMin;
	Parms.ItemDtarMax = ItemDtarMax;
	Parms.ItemNum = ItemNum;
	Parms.ScreenID = ScreenID;
	Parms.CursorIdx = CursorIdx;
	Parms.ListTopIdx = ListTopIdx;
	Parms.MoveType = MoveType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiListComponent.SetCursor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CurrentIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiListComponent::SetCursor(int32 CurrentIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiListComponent", "SetCursor");

	Params::BtlGuiListComponent_SetCursor Parms{};

	Parms.CurrentIndex = CurrentIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiListComponent.SetScrollBarData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   PosY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScrollRange                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CenterPosY                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiListComponent::SetScrollBarData(float PosY, float ScrollRange, float CenterPosY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiListComponent", "SetScrollBarData");

	Params::BtlGuiListComponent_SetScrollBarData Parms{};

	Parms.PosY = PosY;
	Parms.ScrollRange = ScrollRange;
	Parms.CenterPosY = CenterPosY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiListComponent.Update
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   CursorIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TopIndex                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentIndex                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiListComponent::Update(int32* CursorIndex, int32* TopIndex, int32* CurrentIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiListComponent", "Update");

	Params::BtlGuiListComponent_Update Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CursorIndex != nullptr)
		*CursorIndex = Parms.CursorIndex;

	if (TopIndex != nullptr)
		*TopIndex = Parms.TopIndex;

	if (CurrentIndex != nullptr)
		*CurrentIndex = Parms.CurrentIndex;
}


// Function xrd777.BtlGuiPersonaStatusComponent.ChangePersonaStatusLeft
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiPersonaStatusComponent::ChangePersonaStatusLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "ChangePersonaStatusLeft");

	Params::BtlGuiPersonaStatusComponent_ChangePersonaStatusLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiPersonaStatusComponent.ChangePersonaStatusLeftActor
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiPersonaStatusComponent::ChangePersonaStatusLeftActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "ChangePersonaStatusLeftActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPersonaStatusComponent.ChangePersonaStatusRight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiPersonaStatusComponent::ChangePersonaStatusRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "ChangePersonaStatusRight");

	Params::BtlGuiPersonaStatusComponent_ChangePersonaStatusRight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiPersonaStatusComponent.ChangePersonaStatusRightActor
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiPersonaStatusComponent::ChangePersonaStatusRightActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "ChangePersonaStatusRightActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPersonaStatusComponent.CheckPersonaChange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiPersonaStatusComponent::CheckPersonaChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "CheckPersonaChange");

	Params::BtlGuiPersonaStatusComponent_CheckPersonaChange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiPersonaStatusComponent.CheckPersonaCommentary
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiPersonaStatusComponent::CheckPersonaCommentary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "CheckPersonaCommentary");

	Params::BtlGuiPersonaStatusComponent_CheckPersonaCommentary Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiPersonaStatusComponent.CheckPersonaSkillHelp
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiPersonaStatusComponent::CheckPersonaSkillHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "CheckPersonaSkillHelp");

	Params::BtlGuiPersonaStatusComponent_CheckPersonaSkillHelp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiPersonaStatusComponent.ClosePersonaStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                PCore                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiPersonaStatusComponent::ClosePersonaStatus(class UBtlCoreComponent* PCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "ClosePersonaStatus");

	Params::BtlGuiPersonaStatusComponent_ClosePersonaStatus Parms{};

	Parms.PCore = PCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPersonaStatusComponent.CreateInstance
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiPersonaStatusComponent::CreateInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "CreateInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPersonaStatusComponent.CreatePersonaStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlCoreComponent*                PCore                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AlwaysChange                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiPersonaStatusComponent::CreatePersonaStatus(class ABtlActor* Actor, class UBtlCoreComponent* PCore, int32 CurrentNum, bool AlwaysChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "CreatePersonaStatus");

	Params::BtlGuiPersonaStatusComponent_CreatePersonaStatus Parms{};

	Parms.Actor = Actor;
	Parms.PCore = PCore;
	Parms.CurrentNum = CurrentNum;
	Parms.AlwaysChange = AlwaysChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPersonaStatusComponent.CreatePersonaStatusTargetSelect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBtlCoreComponent*                PCore                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ABtlActor*>                PlayerList                                             (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBtlGuiPersonaStatusComponent::CreatePersonaStatusTargetSelect(class ABtlActor* Actor, class UBtlCoreComponent* PCore, const TArray<class ABtlActor*>& PlayerList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "CreatePersonaStatusTargetSelect");

	Params::BtlGuiPersonaStatusComponent_CreatePersonaStatusTargetSelect Parms{};

	Parms.Actor = Actor;
	Parms.PCore = PCore;
	Parms.PlayerList = std::move(PlayerList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPersonaStatusComponent.DeleteInstance
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiPersonaStatusComponent::DeleteInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "DeleteInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPersonaStatusComponent.GetDispActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBtlCoreComponent*                PCore                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* UBtlGuiPersonaStatusComponent::GetDispActor(class UBtlCoreComponent* PCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "GetDispActor");

	Params::BtlGuiPersonaStatusComponent_GetDispActor Parms{};

	Parms.PCore = PCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiPersonaStatusComponent.GetPersonaStockCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlGuiPersonaStatusComponent::GetPersonaStockCount(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "GetPersonaStockCount");

	Params::BtlGuiPersonaStatusComponent_GetPersonaStockCount Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiPersonaStatusComponent.IsEndPersonaStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiPersonaStatusComponent::IsEndPersonaStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "IsEndPersonaStatus");

	Params::BtlGuiPersonaStatusComponent_IsEndPersonaStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiPersonaStatusComponent.SetEquipPersona
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiPersonaStatusComponent::SetEquipPersona()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "SetEquipPersona");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPersonaStatusComponent.StartPersonaCommentary
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiPersonaStatusComponent::StartPersonaCommentary()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "StartPersonaCommentary");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPersonaStatusComponent.StartPersonaSkillHelp
// (Final, Native, Public, BlueprintCallable)

void UBtlGuiPersonaStatusComponent::StartPersonaSkillHelp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "StartPersonaSkillHelp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPersonaStatusComponent.UpdatePersonaStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiPersonaStatusComponent::UpdatePersonaStatus(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPersonaStatusComponent", "UpdatePersonaStatus");

	Params::BtlGuiPersonaStatusComponent_UpdatePersonaStatus Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPromiseComponent.CheckMsgStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiPromiseComponent::CheckMsgStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPromiseComponent", "CheckMsgStart");

	Params::BtlGuiPromiseComponent_CheckMsgStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiPromiseComponent.StartSupportInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsGeneral                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MsgNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiPromiseComponent::StartSupportInfo(class UBtlCoreComponent* BtlCore, bool IsGeneral, int32 MsgNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPromiseComponent", "StartSupportInfo");

	Params::BtlGuiPromiseComponent_StartSupportInfo Parms{};

	Parms.BtlCore = BtlCore;
	Parms.IsGeneral = IsGeneral;
	Parms.MsgNo = MsgNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiPromiseComponent.StopSupportInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlCoreComponent*                BtlCore                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiPromiseComponent::StopSupportInfo(class UBtlCoreComponent* BtlCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiPromiseComponent", "StopSupportInfo");

	Params::BtlGuiPromiseComponent_StopSupportInfo Parms{};

	Parms.BtlCore = BtlCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.CallDelegate
// (Final, Native, Public, BlueprintCallable)

void ABtlGuiResourcesActor::CallDelegate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "CallDelegate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.GetAddResources
// (Final, Native, Public)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* ABtlGuiResourcesActor::GetAddResources()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "GetAddResources");

	Params::BtlGuiResourcesActor_GetAddResources Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResourcesActor.GetResources
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* ABtlGuiResourcesActor::GetResources(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "GetResources");

	Params::BtlGuiResourcesActor_GetResources Parms{};

	Parms.Name_0 = Name_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResourcesActor.InitializeAnalyzeLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeAnalyzeLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeAnalyzeLayoutData");

	Params::BtlGuiResourcesActor_InitializeAnalyzeLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeAnalyzeTextLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeAnalyzeTextLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeAnalyzeTextLayoutData");

	Params::BtlGuiResourcesActor_InitializeAnalyzeTextLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeBattleTouchCollLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeBattleTouchCollLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeBattleTouchCollLayoutData");

	Params::BtlGuiResourcesActor_InitializeBattleTouchCollLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeDamageIconLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeDamageIconLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeDamageIconLayoutData");

	Params::BtlGuiResourcesActor_InitializeDamageIconLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeGuardLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeGuardLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeGuardLayoutData");

	Params::BtlGuiResourcesActor_InitializeGuardLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeItemSkillListTextLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeItemSkillListTextLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeItemSkillListTextLayoutData");

	Params::BtlGuiResourcesActor_InitializeItemSkillListTextLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeOthersLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeOthersLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeOthersLayoutData");

	Params::BtlGuiResourcesActor_InitializeOthersLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializePromiseLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializePromiseLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializePromiseLayoutData");

	Params::BtlGuiResourcesActor_InitializePromiseLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeRushLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeRushLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeRushLayoutData");

	Params::BtlGuiResourcesActor_InitializeRushLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeTacticsLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeTacticsLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeTacticsLayoutData");

	Params::BtlGuiResourcesActor_InitializeTacticsLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeTacticsListTextLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeTacticsListTextLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeTacticsListTextLayoutData");

	Params::BtlGuiResourcesActor_InitializeTacticsListTextLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeTargetInfoLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeTargetInfoLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeTargetInfoLayoutData");

	Params::BtlGuiResourcesActor_InitializeTargetInfoLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeTargetInfoTextLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeTargetInfoTextLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeTargetInfoTextLayoutData");

	Params::BtlGuiResourcesActor_InitializeTargetInfoTextLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeTheurgiaLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeTheurgiaLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeTheurgiaLayoutData");

	Params::BtlGuiResourcesActor_InitializeTheurgiaLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeTheurgiaTextLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       TextData                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       TextRowData                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       TextPosData                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeTheurgiaTextLayoutData(class UDataTable* TextData, class UDataTable* TextRowData, class UDataTable* TextPosData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeTheurgiaTextLayoutData");

	Params::BtlGuiResourcesActor_InitializeTheurgiaTextLayoutData Parms{};

	Parms.TextData = TextData;
	Parms.TextRowData = TextRowData;
	Parms.TextPosData = TextPosData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.InitializeTopLayoutData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::InitializeTopLayoutData(class UDataTable* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "InitializeTopLayoutData");

	Params::BtlGuiResourcesActor_InitializeTopLayoutData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesActor.RequestAddResources
// (Final, Native, Public)
// Parameters:
// class FString                           ResourcesPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiResourcesActor::RequestAddResources(const class FString& ResourcesPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesActor", "RequestAddResources");

	Params::BtlGuiResourcesActor_RequestAddResources Parms{};

	Parms.ResourcesPath = std::move(ResourcesPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResourcesLoadWatcher.LoadStart
// (Final, Native, Public)

void ABtlGuiResourcesLoadWatcher::LoadStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResourcesLoadWatcher", "LoadStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIAccessInfoDraw.OnFinishedScr
// (Final, Native, Protected)
// Parameters:
// int32                                   ExitType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIAccessInfoDraw::OnFinishedScr(int32 ExitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIAccessInfoDraw", "OnFinishedScr");

	Params::UIAccessInfoDraw_OnFinishedScr Parms{};

	Parms.ExitType = ExitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResources.BtlGuiResourcesCreate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABtlGuiResourcesBase*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlGuiResourcesBase* UBtlGuiResources::BtlGuiResourcesCreate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiResources", "BtlGuiResourcesCreate");

	Params::BtlGuiResources_BtlGuiResourcesCreate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.BtlGuiResourcesDestroy
// (Final, Native, Static, Public, BlueprintCallable)

void UBtlGuiResources::BtlGuiResourcesDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiResources", "BtlGuiResourcesDestroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResources.CheckBtlResourcesCompleted
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlGuiResources::CheckBtlResourcesCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiResources", "CheckBtlResourcesCompleted");

	Params::BtlGuiResources_CheckBtlResourcesCompleted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.SetAsyncLoadCompleted
// (Final, Native, Static, Public)

void UBtlGuiResources::SetAsyncLoadCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiResources", "SetAsyncLoadCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResources.SetResourcesActor
// (Final, Native, Static, Public)
// Parameters:
// class ABtlGuiResourcesActor*            Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiResources::SetResourcesActor(class ABtlGuiResourcesActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlGuiResources", "SetResourcesActor");

	Params::BtlGuiResources_SetResourcesActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResources.GetAddResources
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UObject>              ResourcesClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OutResources                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiResources::GetAddResources(TSubclassOf<class UObject> ResourcesClass, class UObject** OutResources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetAddResources");

	Params::BtlGuiResources_GetAddResources Parms{};

	Parms.ResourcesClass = ResourcesClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResources != nullptr)
		*OutResources = Parms.OutResources;
}


// Function xrd777.BtlGuiResources.GetAddResourcesPure
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// TSubclassOf<class UObject>              ResourcesClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OutResources                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiResources::GetAddResourcesPure(TSubclassOf<class UObject> ResourcesClass, class UObject** OutResources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetAddResourcesPure");

	Params::BtlGuiResources_GetAddResourcesPure Parms{};

	Parms.ResourcesClass = ResourcesClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResources != nullptr)
		*OutResources = Parms.OutResources;
}


// Function xrd777.BtlGuiResources.GetAnalyzeAdjustedPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlAnalyzeLayout                       LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetAnalyzeAdjustedPosition(EBtlAnalyzeLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetAnalyzeAdjustedPosition");

	Params::BtlGuiResources_GetAnalyzeAdjustedPosition Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetAnalyzeTextTextCollition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlAnalyzeTextLayout                   LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetAnalyzeTextTextCollition(EBtlAnalyzeTextLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetAnalyzeTextTextCollition");

	Params::BtlGuiResources_GetAnalyzeTextTextCollition Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetAppRenderTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UBtlGuiResources::GetAppRenderTarget(int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetAppRenderTarget");

	Params::BtlGuiResources_GetAppRenderTarget Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetCampSpr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USprAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USprAsset* UBtlGuiResources::GetCampSpr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetCampSpr");

	Params::BtlGuiResources_GetCampSpr Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetDamageIconAdjustedPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlDamageIconLayout                    LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetDamageIconAdjustedPosition(EBtlDamageIconLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetDamageIconAdjustedPosition");

	Params::BtlGuiResources_GetDamageIconAdjustedPosition Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetGuardAdjustedPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlGuardLayout                         LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetGuardAdjustedPosition(EBtlGuardLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetGuardAdjustedPosition");

	Params::BtlGuiResources_GetGuardAdjustedPosition Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetItemIconSpr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USprAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USprAsset* UBtlGuiResources::GetItemIconSpr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetItemIconSpr");

	Params::BtlGuiResources_GetItemIconSpr Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetItemSkillListTextCollision
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlItemSkillListTextLayout             LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBtlGuiResources::GetItemSkillListTextCollision(EBtlItemSkillListTextLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetItemSkillListTextCollision");

	Params::BtlGuiResources_GetItemSkillListTextCollision Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetKeyHelpSpr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USprAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USprAsset* UBtlGuiResources::GetKeyHelpSpr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetKeyHelpSpr");

	Params::BtlGuiResources_GetKeyHelpSpr Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetOthersAdjustedPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlOthersLayout                        LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetOthersAdjustedPosition(EBtlOthersLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetOthersAdjustedPosition");

	Params::BtlGuiResources_GetOthersAdjustedPosition Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetPromiseAdjustedPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlPromiseLayout                       LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetPromiseAdjustedPosition(EBtlPromiseLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetPromiseAdjustedPosition");

	Params::BtlGuiResources_GetPromiseAdjustedPosition Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetResources
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             ResourcesName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UObject>              ResourcesClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OutResources                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiResources::GetResources(class FName ResourcesName, TSubclassOf<class UObject> ResourcesClass, class UObject** OutResources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetResources");

	Params::BtlGuiResources_GetResources Parms{};

	Parms.ResourcesName = ResourcesName;
	Parms.ResourcesClass = ResourcesClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResources != nullptr)
		*OutResources = Parms.OutResources;
}


// Function xrd777.BtlGuiResources.GetResourcesPure
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ResourcesName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UObject>              ResourcesClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OutResources                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiResources::GetResourcesPure(class FName ResourcesName, TSubclassOf<class UObject> ResourcesClass, class UObject** OutResources)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetResourcesPure");

	Params::BtlGuiResources_GetResourcesPure Parms{};

	Parms.ResourcesName = ResourcesName;
	Parms.ResourcesClass = ResourcesClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResources != nullptr)
		*OutResources = Parms.OutResources;
}


// Function xrd777.BtlGuiResources.GetRushAdjustedPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlRushLayout                          LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetRushAdjustedPosition(EBtlRushLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetRushAdjustedPosition");

	Params::BtlGuiResources_GetRushAdjustedPosition Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetTacticsAdjustedPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlTacticsLayout                       LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetTacticsAdjustedPosition(EBtlTacticsLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetTacticsAdjustedPosition");

	Params::BtlGuiResources_GetTacticsAdjustedPosition Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetTacticsCheckAdjustedPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlTacticsCheckLayout                  LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetTacticsCheckAdjustedPosition(EBtlTacticsCheckLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetTacticsCheckAdjustedPosition");

	Params::BtlGuiResources_GetTacticsCheckAdjustedPosition Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetTacticsTextCollision
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlTacticsListTextLayout               LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetTacticsTextCollision(EBtlTacticsListTextLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetTacticsTextCollision");

	Params::BtlGuiResources_GetTacticsTextCollision Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetTargetInfoTextCollision
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlTargetInfoTextLayout                LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetTargetInfoTextCollision(EBtlTargetInfoTextLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetTargetInfoTextCollision");

	Params::BtlGuiResources_GetTargetInfoTextCollision Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetTheurgiaAdjustedPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlTheurgiaLayout                      LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetTheurgiaAdjustedPosition(EBtlTheurgiaLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetTheurgiaAdjustedPosition");

	Params::BtlGuiResources_GetTheurgiaAdjustedPosition Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetTheurgiaTextPos
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EUITheurgiaTextPosLayout                LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetTheurgiaTextPos(EUITheurgiaTextPosLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetTheurgiaTextPos");

	Params::BtlGuiResources_GetTheurgiaTextPos Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetTheurgiaTextRow
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EUITheurgiaTextRowLayout                LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBtlGuiResources::GetTheurgiaTextRow(EUITheurgiaTextRowLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetTheurgiaTextRow");

	Params::BtlGuiResources_GetTheurgiaTextRow Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetTheurgiaTextTextCollition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EUITheurgiaTextLayout                   LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetTheurgiaTextTextCollition(EUITheurgiaTextLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetTheurgiaTextTextCollition");

	Params::BtlGuiResources_GetTheurgiaTextTextCollition Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetTopAdjustedPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlTopLayout                           LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UBtlGuiResources::GetTopAdjustedPosition(EBtlTopLayout LayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetTopAdjustedPosition");

	Params::BtlGuiResources_GetTopAdjustedPosition Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiResources.GetTouchCollData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlTouchCollisionLayout                LayoutId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PosX                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PosY                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiResources::GetTouchCollData(EBtlTouchCollisionLayout LayoutId, float* PosX, float* PosY, float* Angle, float* Width, float* Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "GetTouchCollData");

	Params::BtlGuiResources_GetTouchCollData Parms{};

	Parms.LayoutId = LayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PosX != nullptr)
		*PosX = Parms.PosX;

	if (PosY != nullptr)
		*PosY = Parms.PosY;

	if (Angle != nullptr)
		*Angle = Parms.Angle;

	if (Width != nullptr)
		*Width = Parms.Width;

	if (Height != nullptr)
		*Height = Parms.Height;
}


// Function xrd777.BtlGuiResources.InitializeLayoutDebugMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlGuiStateManager*              StateManager                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiResources::InitializeLayoutDebugMenu(class ABtlGuiStateManager* StateManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "InitializeLayoutDebugMenu");

	Params::BtlGuiResources_InitializeLayoutDebugMenu Parms{};

	Parms.StateManager = StateManager;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResources.LoadEndAction
// (Final, Native, Public)

void UBtlGuiResources::LoadEndAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "LoadEndAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiResources.RequestAddResources
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ResourcesPath                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlGuiResources::RequestAddResources(const class FString& ResourcesPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiResources", "RequestAddResources");

	Params::BtlGuiResources_RequestAddResources Parms{};

	Parms.ResourcesPath = std::move(ResourcesPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiRushEffect.AnimationPause
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Pause                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiRushEffect::AnimationPause(bool Pause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiRushEffect", "AnimationPause");

	Params::BtlGuiRushEffect_AnimationPause Parms{};

	Parms.Pause = Pause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiRushEffect.SetAppCanvas
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AppCanvas                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiRushEffect::SetAppCanvas(int32 AppCanvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiRushEffect", "SetAppCanvas");

	Params::BtlGuiRushEffect_SetAppCanvas Parms{};

	Parms.AppCanvas = AppCanvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiRushEffect.SetBtlFlag
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiRushEffect::SetBtlFlag(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiRushEffect", "SetBtlFlag");

	Params::BtlGuiRushEffect_SetBtlFlag Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiRushEffect.SetEffect
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiRushEffect::SetEffect(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiRushEffect", "SetEffect");

	Params::BtlGuiRushEffect_SetEffect Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiRushEffect.SetOT
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   OT                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiRushEffect::SetOT(int32 OT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiRushEffect", "SetOT");

	Params::BtlGuiRushEffect_SetOT Parms{};

	Parms.OT = OT;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiStateManager.ChangePrevState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    SendFlag                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SendNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiStateManager::ChangePrevState(bool SendFlag, int32 SendNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "ChangePrevState");

	Params::BtlGuiStateManager_ChangePrevState Parms{};

	Parms.SendFlag = SendFlag;
	Parms.SendNumber = SendNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiStateManager.ClearState
// (Final, Native, Public, BlueprintCallable)

void ABtlGuiStateManager::ClearState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "ClearState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiStateManager.GetDebugDamageTextIdx
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlGuiStateManager::GetDebugDamageTextIdx()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "GetDebugDamageTextIdx");

	Params::BtlGuiStateManager_GetDebugDamageTextIdx Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiStateManager.GetDebugJyokyoHelpID
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlGuiStateManager::GetDebugJyokyoHelpID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "GetDebugJyokyoHelpID");

	Params::BtlGuiStateManager_GetDebugJyokyoHelpID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiStateManager.GetDebugSkillNamePanelID
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlGuiStateManager::GetDebugSkillNamePanelID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "GetDebugSkillNamePanelID");

	Params::BtlGuiStateManager_GetDebugSkillNamePanelID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiStateManager.GetPrevState
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlGuiState                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlGuiState ABtlGuiStateManager::GetPrevState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "GetPrevState");

	Params::BtlGuiStateManager_GetPrevState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiStateManager.GetState
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlGuiState                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlGuiState ABtlGuiStateManager::GetState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "GetState");

	Params::BtlGuiStateManager_GetState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiStateManager.IsLayoutDebugMenuOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlGuiStateManager::IsLayoutDebugMenuOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "IsLayoutDebugMenuOpen");

	Params::BtlGuiStateManager_IsLayoutDebugMenuOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiStateManager.OnDebugRushDraw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlGuiStateManager::OnDebugRushDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "OnDebugRushDraw");

	Params::BtlGuiStateManager_OnDebugRushDraw Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiStateManager.OnDebugRushStopMaskAnimPause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlGuiStateManager::OnDebugRushStopMaskAnimPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "OnDebugRushStopMaskAnimPause");

	Params::BtlGuiStateManager_OnDebugRushStopMaskAnimPause Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiStateManager.OnDebugRushStopMaskVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlGuiStateManager::OnDebugRushStopMaskVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "OnDebugRushStopMaskVisible");

	Params::BtlGuiStateManager_OnDebugRushStopMaskVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlGuiStateManager.ResetPrevState
// (Final, Native, Public, BlueprintCallable)

void ABtlGuiStateManager::ResetPrevState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "ResetPrevState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiStateManager.SetPrevState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlGuiState                            State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiStateManager::SetPrevState(EBtlGuiState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "SetPrevState");

	Params::BtlGuiStateManager_SetPrevState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiStateManager.SetState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlGuiState                            State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SendFlag                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SendNumber                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlGuiStateManager::SetState(EBtlGuiState State, bool SendFlag, int32 SendNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "SetState");

	Params::BtlGuiStateManager_SetState Parms{};

	Parms.State = State;
	Parms.SendFlag = SendFlag;
	Parms.SendNumber = SendNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlGuiStateManager.UpdateLayoutDebugMenu
// (Final, Native, Public, BlueprintCallable)

void ABtlGuiStateManager::UpdateLayoutDebugMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlGuiStateManager", "UpdateLayoutDebugMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlInputComponent.BtlInputCheckComponentEnable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlInputComponent::BtlInputCheckComponentEnable(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlInputComponent", "BtlInputCheckComponentEnable");

	Params::BtlInputComponent_BtlInputCheckComponentEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function xrd777.BtlInputComponent.BtlInputSetComponentEnable
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlInputComponent::BtlInputSetComponentEnable(bool IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlInputComponent", "BtlInputSetComponentEnable");

	Params::BtlInputComponent_BtlInputSetComponentEnable Parms{};

	Parms.IsEnable = IsEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlInputComponent.AddTouchCollCallback
// (Final, Native, Public, BlueprintCallable)

void UBtlInputComponent::AddTouchCollCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlInputComponent", "AddTouchCollCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlInputComponent.BtlInputAlwaysEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlInputComponent::BtlInputAlwaysEnable(bool IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlInputComponent", "BtlInputAlwaysEnable");

	Params::BtlInputComponent_BtlInputAlwaysEnable Parms{};

	Parms.IsEnable = IsEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlInputComponent.BtlInputCheckCtrlEnable
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    Enable                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlInputComponent::BtlInputCheckCtrlEnable(bool* Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlInputComponent", "BtlInputCheckCtrlEnable");

	Params::BtlInputComponent_BtlInputCheckCtrlEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Enable != nullptr)
		*Enable = Parms.Enable;
}


// Function xrd777.BtlInputComponent.BtlInputKeyLock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<EBtlInputKeyboardEnum>           LockKey                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBtlInputComponent::BtlInputKeyLock(const TArray<EBtlInputKeyboardEnum>& LockKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlInputComponent", "BtlInputKeyLock");

	Params::BtlInputComponent_BtlInputKeyLock Parms{};

	Parms.LockKey = std::move(LockKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlInputComponent.BtlInputKeyLockClear
// (Final, Native, Public, BlueprintCallable)

void UBtlInputComponent::BtlInputKeyLockClear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlInputComponent", "BtlInputKeyLockClear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlInputComponent.BtlInputSetCtrlEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    IsEnable                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlInputComponent::BtlInputSetCtrlEnable(bool IsEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlInputComponent", "BtlInputSetCtrlEnable");

	Params::BtlInputComponent_BtlInputSetCtrlEnable Parms{};

	Parms.IsEnable = IsEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlInputComponent.CallInputTrigKeyboard
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlInputKeyboardEnum                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlInputComponent::CallInputTrigKeyboard(EBtlInputKeyboardEnum Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlInputComponent", "CallInputTrigKeyboard");

	Params::BtlInputComponent_CallInputTrigKeyboard Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlInputComponent.RemoveTouchCollCallback
// (Final, Native, Public, BlueprintCallable)

void UBtlInputComponent::RemoveTouchCollCallback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlInputComponent", "RemoveTouchCollCallback");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlControlBase.CheckBattleInProgress
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlControlBase::CheckBattleInProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlControlBase", "CheckBattleInProgress");

	Params::BtlControlBase_CheckBattleInProgress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlControlBase.DestroyLoadedData
// (Event, Public, BlueprintEvent)

void ABtlControlBase::DestroyLoadedData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlControlBase", "DestroyLoadedData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlControlBase.Encount
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FBtlEncountParam                 EncountParam                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABtlControlBase::Encount(const struct FBtlEncountParam& EncountParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlControlBase", "Encount");

	Params::BtlControlBase_Encount Parms{};

	Parms.EncountParam = std::move(EncountParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlControlBase.PreLoad
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FBtlEncountParam                 EncountParam                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlControlBase::PreLoad(const struct FBtlEncountParam& EncountParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlControlBase", "PreLoad");

	Params::BtlControlBase_PreLoad Parms{};

	Parms.EncountParam = std::move(EncountParam);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlControlBase.SetGamePaused
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   IsPause                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlControlBase::SetGamePaused(int32 IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlControlBase", "SetGamePaused");

	Params::BtlControlBase_SetGamePaused Parms{};

	Parms.IsPause = IsPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlControlBase.SyncBattleFinish
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlControlBase::SyncBattleFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlControlBase", "SyncBattleFinish");

	Params::BtlControlBase_SyncBattleFinish Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlPhase.CreateNextPhase
// (Event, Public, BlueprintEvent)
// Parameters:
// EBtlPhaseType                           Phase                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ABtlPhase*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlPhase* ABtlPhase::CreateNextPhase(EBtlPhaseType Phase)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhase", "CreateNextPhase");

	Params::BtlPhase_CreateNextPhase Parms{};

	Parms.Phase = Phase;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlPhase.FinalizePhase
// (Native, Public, BlueprintCallable)

void ABtlPhase::FinalizePhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhase", "FinalizePhase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlPhase.FinalizePhaseInBP
// (Event, Protected, BlueprintEvent)

void ABtlPhase::FinalizePhaseInBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhase", "FinalizePhaseInBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlPhase.GetNextPhase
// (Native, Public, BlueprintCallable)
// Parameters:
// class ABtlPhase*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlPhase* ABtlPhase::GetNextPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhase", "GetNextPhase");

	Params::BtlPhase_GetNextPhase Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlPhase.GetNextPhaseInBP
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABtlPhase*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlPhase* ABtlPhase::GetNextPhaseInBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhase", "GetNextPhaseInBP");

	Params::BtlPhase_GetNextPhaseInBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlPhase.SetNowBattlePhaseName
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// EBattlePhaseName                        NewPhaseName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlPhase::SetNowBattlePhaseName(EBattlePhaseName NewPhaseName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhase", "SetNowBattlePhaseName");

	Params::BtlPhase_SetNowBattlePhaseName Parms{};

	Parms.NewPhaseName = NewPhaseName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlPhase.StartPhase
// (Native, Public, BlueprintCallable)

void ABtlPhase::StartPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhase", "StartPhase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlPhase.StartPhaseInBP
// (Event, Protected, BlueprintEvent)

void ABtlPhase::StartPhaseInBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhase", "StartPhaseInBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlPhase.SyncProgressTimingInBP
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlPhase::SyncProgressTimingInBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhase", "SyncProgressTimingInBP");

	Params::BtlPhase_SyncProgressTimingInBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlPhase.CheckProgressNextPhaseInBP
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlPhase::CheckProgressNextPhaseInBP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhase", "CheckProgressNextPhaseInBP");

	Params::BtlPhase_CheckProgressNextPhaseInBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.BtlPhaseVictory.SetResultType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlResultType                          Resulttype                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlPhaseVictory::SetResultType(EBtlResultType Resulttype)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhaseVictory", "SetResultType");

	Params::BtlPhaseVictory_SetResultType Parms{};

	Parms.Resulttype = Resulttype;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlPhaseVictory.GetResultType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBtlResultType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlResultType ABtlPhaseVictory::GetResultType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhaseVictory", "GetResultType");

	Params::BtlPhaseVictory_GetResultType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlPhaseResult.CheckAlreadyStartResult
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlPhaseResult::CheckAlreadyStartResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhaseResult", "CheckAlreadyStartResult");

	Params::BtlPhaseResult_CheckAlreadyStartResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlPhaseResult.CreatePhaseVictory
// (Event, Public, BlueprintEvent)

void ABtlPhaseResult::CreatePhaseVictory()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhaseResult", "CreatePhaseVictory");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlPhaseResult.PlayResultUI
// (Final, Native, Public, BlueprintCallable)

void ABtlPhaseResult::PlayResultUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhaseResult", "PlayResultUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlPhaseResult.ReleaseResource
// (Final, Native, Protected, BlueprintCallable)

void ABtlPhaseResult::ReleaseResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhaseResult", "ReleaseResource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlPhaseResult.SetHaveVictorySequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlPhaseResult::SetHaveVictorySequence(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhaseResult", "SetHaveVictorySequence");

	Params::BtlPhaseResult_SetHaveVictorySequence Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlPhaseResult.SetStartResultInVictory
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlPhaseResult::SetStartResultInVictory(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlPhaseResult", "SetStartResultInVictory");

	Params::BtlPhaseResult_SetStartResultInVictory Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResidentDataBase.CheckLoaded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlResidentResource                    Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlResidentDataBase::CheckLoaded(EBtlResidentResource Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResidentDataBase", "CheckLoaded");

	Params::BtlResidentDataBase_CheckLoaded Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResidentDataBase.GetEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlResidentResource                    Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UNiagaraSystem*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraSystem* UBtlResidentDataBase::GetEffect(EBtlResidentResource Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResidentDataBase", "GetEffect");

	Params::BtlResidentDataBase_GetEffect Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResidentDataBase.LoadAsync
// (Event, Protected, BlueprintCallable, BlueprintEvent)

void UBtlResidentDataBase::LoadAsync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResidentDataBase", "LoadAsync");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlResultSceneBase.CheckCompleteLoadResource
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultSceneBase::CheckCompleteLoadResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultSceneBase", "CheckCompleteLoadResource");

	Params::BtlResultSceneBase_CheckCompleteLoadResource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultSceneBase.CheckEndEntryScene
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultSceneBase::CheckEndEntryScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultSceneBase", "CheckEndEntryScene");

	Params::BtlResultSceneBase_CheckEndEntryScene Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultSceneBase.LoadResource
// (Native, Public, BlueprintCallable)

void ABtlResultSceneBase::LoadResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultSceneBase", "LoadResource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultSceneBase.ReleaseResource
// (Native, Public, BlueprintCallable)

void ABtlResultSceneBase::ReleaseResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultSceneBase", "ReleaseResource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultSceneBase.StartEntryScene
// (Native, Public, BlueprintCallable)

void ABtlResultSceneBase::StartEntryScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultSceneBase", "StartEntryScene");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.BeginMajorArcanaGetMessage
// (Final, Native, Public, BlueprintCallable)

void ABtlResultUIBase::BeginMajorArcanaGetMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "BeginMajorArcanaGetMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.BeginMajorArcanaTutorial
// (Final, Native, Public, BlueprintCallable)

void ABtlResultUIBase::BeginMajorArcanaTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "BeginMajorArcanaTutorial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.CalcOpenMajorArcanaMsgInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::CalcOpenMajorArcanaMsgInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "CalcOpenMajorArcanaMsgInfo");

	Params::BtlResultUIBase_CalcOpenMajorArcanaMsgInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.CalcResultSprIdMetis
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLevelUp                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefaultSprId                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlResultUIBase::CalcResultSprIdMetis(int32 PlayerId, bool IsLevelUp, int32 DefaultSprId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "CalcResultSprIdMetis");

	Params::BtlResultUIBase_CalcResultSprIdMetis Parms{};

	Parms.PlayerId = PlayerId;
	Parms.IsLevelUp = IsLevelUp;
	Parms.DefaultSprId = DefaultSprId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.CalcStockUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlResultHeroPersonaUpEvent            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBtlResultHeroPersonaUpEvent ABtlResultUIBase::CalcStockUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "CalcStockUp");

	Params::BtlResultUIBase_CalcStockUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.CheckCompleteLoadResource
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::CheckCompleteLoadResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "CheckCompleteLoadResource");

	Params::BtlResultUIBase_CheckCompleteLoadResource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.CheckEndResultUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::CheckEndResultUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "CheckEndResultUI");

	Params::BtlResultUIBase_CheckEndResultUI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.CheckHeroStatus
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::CheckHeroStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "CheckHeroStatus");

	Params::BtlResultUIBase_CheckHeroStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.CheckPersonaStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::CheckPersonaStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "CheckPersonaStatus");

	Params::BtlResultUIBase_CheckPersonaStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.CheckShowMsg
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::CheckShowMsg(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "CheckShowMsg");

	Params::BtlResultUIBase_CheckShowMsg Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.CheckSKillGetPersona
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::CheckSKillGetPersona()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "CheckSKillGetPersona");

	Params::BtlResultUIBase_CheckSKillGetPersona Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.CloseHeroStatus
// (Native, Public, BlueprintCallable)

void ABtlResultUIBase::CloseHeroStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "CloseHeroStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.CloseMsg
// (Final, Native, Public, BlueprintCallable)

void ABtlResultUIBase::CloseMsg()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "CloseMsg");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.ConvertItemSprID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ItemId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlResultUIBase::ConvertItemSprID(int32 ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "ConvertItemSprID");

	Params::BtlResultUIBase_ConvertItemSprID Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.CreateMsg
// (Final, Native, Public, BlueprintCallable)

void ABtlResultUIBase::CreateMsg()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "CreateMsg");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.DrawMsg
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlResultUIBase::DrawMsg(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "DrawMsg");

	Params::BtlResultUIBase_DrawMsg Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.EndMajorArcanaGetMessage
// (Final, Native, Public, BlueprintCallable)

void ABtlResultUIBase::EndMajorArcanaGetMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "EndMajorArcanaGetMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.EndTutorialMsg
// (Final, Native, Public, BlueprintCallable)

void ABtlResultUIBase::EndTutorialMsg()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "EndTutorialMsg");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.GetAdjustedLayoutPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlResultLayout                        InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InDefaultPos                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ABtlResultUIBase::GetAdjustedLayoutPosition(EBtlResultLayout InLayoutId, const struct FVector2D& InDefaultPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetAdjustedLayoutPosition");

	Params::BtlResultUIBase_GetAdjustedLayoutPosition Parms{};

	Parms.InLayoutId = InLayoutId;
	Parms.InDefaultPos = std::move(InDefaultPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetAdjustedLayoutPositionAstrea
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlResultLayoutAstrea                  InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InDefaultPos                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ABtlResultUIBase::GetAdjustedLayoutPositionAstrea(EBtlResultLayoutAstrea InLayoutId, const struct FVector2D& InDefaultPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetAdjustedLayoutPositionAstrea");

	Params::BtlResultUIBase_GetAdjustedLayoutPositionAstrea Parms{};

	Parms.InLayoutId = InLayoutId;
	Parms.InDefaultPos = std::move(InDefaultPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetAllyLevelupParam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FBtlResultAllyLvupParam>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FBtlResultAllyLvupParam> ABtlResultUIBase::GetAllyLevelupParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetAllyLevelupParam");

	Params::BtlResultUIBase_GetAllyLevelupParam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetDebugPersonaTexutreID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlResultUIBase::GetDebugPersonaTexutreID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetDebugPersonaTexutreID");

	Params::BtlResultUIBase_GetDebugPersonaTexutreID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetEquipPersonaTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* ABtlResultUIBase::GetEquipPersonaTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetEquipPersonaTexture");

	Params::BtlResultUIBase_GetEquipPersonaTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetHeroHumanLvupParam
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    IsLvup                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Level                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlResultUIBase::GetHeroHumanLvupParam(bool* IsLvup, int32* Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetHeroHumanLvupParam");

	Params::BtlResultUIBase_GetHeroHumanLvupParam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (IsLvup != nullptr)
		*IsLvup = Parms.IsLvup;

	if (Level != nullptr)
		*Level = Parms.Level;
}


// Function xrd777.BtlResultUIBase.GetHeroInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FBtlResultHeroInfo               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FBtlResultHeroInfo ABtlResultUIBase::GetHeroInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetHeroInfo");

	Params::BtlResultUIBase_GetHeroInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetItemMsgID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlResultUIBase::GetItemMsgID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetItemMsgID");

	Params::BtlResultUIBase_GetItemMsgID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetItemParams
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FBtlResultItemParam>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FBtlResultItemParam> ABtlResultUIBase::GetItemParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetItemParams");

	Params::BtlResultUIBase_GetItemParams Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetOkNextLayoutPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EOkNextLayout                           InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InDefaultPos                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ABtlResultUIBase::GetOkNextLayoutPosition(EOkNextLayout InLayoutId, const struct FVector2D& InDefaultPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetOkNextLayoutPosition");

	Params::BtlResultUIBase_GetOkNextLayoutPosition Parms{};

	Parms.InLayoutId = InLayoutId;
	Parms.InDefaultPos = std::move(InDefaultPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetPersonaLevelupParam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<struct FBtlResultPersonaParam>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FBtlResultPersonaParam> ABtlResultUIBase::GetPersonaLevelupParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetPersonaLevelupParam");

	Params::BtlResultUIBase_GetPersonaLevelupParam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetResultBmd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBmdAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBmdAsset* ABtlResultUIBase::GetResultBmd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetResultBmd");

	Params::BtlResultUIBase_GetResultBmd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetSprAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USprAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USprAsset* ABtlResultUIBase::GetSprAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetSprAsset");

	Params::BtlResultUIBase_GetSprAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetSprAssetAstrea
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USprAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USprAsset* ABtlResultUIBase::GetSprAssetAstrea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetSprAssetAstrea");

	Params::BtlResultUIBase_GetSprAssetAstrea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetTextCollision
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlResultTextLayout                    InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ABtlResultUIBase::GetTextCollision(EBtlResultTextLayout InLayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetTextCollision");

	Params::BtlResultUIBase_GetTextCollision Parms{};

	Parms.InLayoutId = InLayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.GetUipParamOfMajorArcanaAndGetMsg
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ParamKey                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlResultUIBase::GetUipParamOfMajorArcanaAndGetMsg(const class FString& ParamKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "GetUipParamOfMajorArcanaAndGetMsg");

	Params::BtlResultUIBase_GetUipParamOfMajorArcanaAndGetMsg Parms{};

	Parms.ParamKey = std::move(ParamKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.InputDebugButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::InputDebugButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "InputDebugButton");

	Params::BtlResultUIBase_InputDebugButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.InputDebugButtonL
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::InputDebugButtonL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "InputDebugButtonL");

	Params::BtlResultUIBase_InputDebugButtonL Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.InputDebugButtonR
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::InputDebugButtonR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "InputDebugButtonR");

	Params::BtlResultUIBase_InputDebugButtonR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.InputRepRUButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::InputRepRUButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "InputRepRUButton");

	Params::BtlResultUIBase_InputRepRUButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.InputTrigDecideButton
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::InputTrigDecideButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "InputTrigDecideButton");

	Params::BtlResultUIBase_InputTrigDecideButton Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.IsDrawComma
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   DigCount                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::IsDrawComma(int32 DigCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "IsDrawComma");

	Params::BtlResultUIBase_IsDrawComma Parms{};

	Parms.DigCount = DigCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.IsLayoutDebugMenuOpen
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::IsLayoutDebugMenuOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "IsLayoutDebugMenuOpen");

	Params::BtlResultUIBase_IsLayoutDebugMenuOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.IsMatchMetisOfPlayerId
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::IsMatchMetisOfPlayerId(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "IsMatchMetisOfPlayerId");

	Params::BtlResultUIBase_IsMatchMetisOfPlayerId Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.LoadResource
// (Native, Public, BlueprintCallable)

void ABtlResultUIBase::LoadResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "LoadResource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.NextDebugPersonaTexutreID
// (Final, Native, Public, BlueprintCallable)

void ABtlResultUIBase::NextDebugPersonaTexutreID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "NextDebugPersonaTexutreID");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.ObtainItems
// (Final, Native, Public, BlueprintCallable)

void ABtlResultUIBase::ObtainItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "ObtainItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.OpenMajorArcanaTutorialAstrea
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::OpenMajorArcanaTutorialAstrea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "OpenMajorArcanaTutorialAstrea");

	Params::BtlResultUIBase_OpenMajorArcanaTutorialAstrea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.PrevDebugPersonaTexutreID
// (Final, Native, Public, BlueprintCallable)

void ABtlResultUIBase::PrevDebugPersonaTexutreID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "PrevDebugPersonaTexutreID");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.ReleaseResource
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlResultUIBase::ReleaseResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "ReleaseResource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.StartHeroStatus
// (Native, Public, BlueprintCallable)

void ABtlResultUIBase::StartHeroStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "StartHeroStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.StartPersona
// (Final, Native, Public, BlueprintCallable)

void ABtlResultUIBase::StartPersona()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "StartPersona");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.StartResultUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBtlResultViewData*               InViewData                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlResultUIBase::StartResultUI(class UBtlResultViewData* InViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "StartResultUI");

	Params::BtlResultUIBase_StartResultUI Parms{};

	Parms.InViewData = InViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.UpdateMajorArcanaGetMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::UpdateMajorArcanaGetMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "UpdateMajorArcanaGetMessage");

	Params::BtlResultUIBase_UpdateMajorArcanaGetMessage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlResultUIBase.UpdatePersonaStatus
// (Final, Native, Public, BlueprintCallable)

void ABtlResultUIBase::UpdatePersonaStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "UpdatePersonaStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlResultUIBase.IsOpenableMajorArcanaMsgAstrea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlResultUIBase::IsOpenableMajorArcanaMsgAstrea() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlResultUIBase", "IsOpenableMajorArcanaMsgAstrea");

	Params::BtlResultUIBase_IsOpenableMajorArcanaMsgAstrea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlScriptCommandEventBattle.EventBattleEnd
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::EventBattleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "EventBattleEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.EventBattleEventInit
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::EventBattleEventInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "EventBattleEventInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.EventBattleEventWait
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::EventBattleEventWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "EventBattleEventWait");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.EventBattleInit
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::EventBattleInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "EventBattleInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.EventBattleLoad
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::EventBattleLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "EventBattleLoad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.EventBattlePlay
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::EventBattlePlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "EventBattlePlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.EventBattleSetup
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::EventBattleSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "EventBattleSetup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.EventBattleWait
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::EventBattleWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "EventBattleWait");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.FieldBattleEnd
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::FieldBattleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "FieldBattleEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.FieldBattleInit
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::FieldBattleInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "FieldBattleInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.FieldBattleLoad
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::FieldBattleLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "FieldBattleLoad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.FieldBattlePlay
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::FieldBattlePlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "FieldBattlePlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.FieldBattleSetup
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::FieldBattleSetup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "FieldBattleSetup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlScriptCommandEventBattle.FieldBattleWait
// (Final, Native, Public)

void ABtlScriptCommandEventBattle::FieldBattleWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlScriptCommandEventBattle", "FieldBattleWait");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSequencerObserve.SetParam
// (Event, Public, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              InSequenceActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InStart                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlSequencerObserve::SetParam(class ALevelSequenceActor* InSequenceActor, bool InStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlSequencerObserve", "SetParam");

	Params::BtlSequencerObserve_SetParam Parms{};

	Parms.InSequenceActor = InSequenceActor;
	Parms.InStart = InStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlShakeManager.BtlShakeManagerGetInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABtlShakeManager*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlShakeManager* ABtlShakeManager::BtlShakeManagerGetInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlShakeManager", "BtlShakeManagerGetInstance");

	Params::BtlShakeManager_BtlShakeManagerGetInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShakeManager.BtlShakePlay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EBtlShakeType                           Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShakeManager::BtlShakePlay(EBtlShakeType Type, float PlayTime, class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlShakeManager", "BtlShakePlay");

	Params::BtlShakeManager_BtlShakePlay Parms{};

	Parms.Type = Type;
	Parms.PlayTime = PlayTime;
	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShakeManager.BtlShakeStop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                Controller                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShakeManager::BtlShakeStop(class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlShakeManager", "BtlShakeStop");

	Params::BtlShakeManager_BtlShakeStop Parms{};

	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CharacterSimpleLipsAnimAppComponent.FindPropsPtr
// (Final, Native, Public, BlueprintCallable)

void UCharacterSimpleLipsAnimAppComponent::FindPropsPtr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSimpleLipsAnimAppComponent", "FindPropsPtr");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CharacterSimpleLipsAnimAppComponent.OnChangeLipsState
// (Native, Public, HasOutParams)
// Parameters:
// ECharacterSimpleLipsAnimAppStateType    LipSyncAppStateType                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCharacterSimpleLipsAnimAppListenerLipsyncParam                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterSimpleLipsAnimAppComponent::OnChangeLipsState(ECharacterSimpleLipsAnimAppStateType LipSyncAppStateType, const struct FCharacterSimpleLipsAnimAppListener& LipsyncParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSimpleLipsAnimAppComponent", "OnChangeLipsState");

	Params::CharacterSimpleLipsAnimAppComponent_OnChangeLipsState Parms{};

	Parms.LipSyncAppStateType = LipSyncAppStateType;
	Parms.LipsyncParam = std::move(LipsyncParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CharacterSimpleLipsAnimAppComponent.GetLipsSubsystem
// (Final, Native, Protected, Const)
// Parameters:
// class UCharacterSimpleLipsAnimAppSubsystem*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCharacterSimpleLipsAnimAppSubsystem* UCharacterSimpleLipsAnimAppComponent::GetLipsSubsystem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSimpleLipsAnimAppComponent", "GetLipsSubsystem");

	Params::CharacterSimpleLipsAnimAppComponent_GetLipsSubsystem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.ActionCancel
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::ActionCancel(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ActionCancel");

	Params::BtlShuffleMainBase_ActionCancel Parms{};

	Parms.Idx = Idx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlShuffleMainBase.ActionCardInStateEffect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::ActionCardInStateEffect(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ActionCardInStateEffect");

	Params::BtlShuffleMainBase_ActionCardInStateEffect Parms{};

	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ActionOnemore
// (Event, Public, BlueprintEvent)

void ABtlShuffleMainBase::ActionOnemore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ActionOnemore");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlShuffleMainBase.ActionSelectCard
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::ActionSelectCard(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ActionSelectCard");

	Params::BtlShuffleMainBase_ActionSelectCard Parms{};

	Parms.Idx = Idx;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.BtlShuffleMainBase.CardFallDraw
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::CardFallDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CardFallDraw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.CardFallInit
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::CardFallInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CardFallInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.CardFallUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::CardFallUpdate(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CardFallUpdate");

	Params::BtlShuffleMainBase_CardFallUpdate Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ChangeCardRotationSpeed
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::ChangeCardRotationSpeed(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ChangeCardRotationSpeed");

	Params::BtlShuffleMainBase_ChangeCardRotationSpeed Parms{};

	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ChangePersonaStatusLeft
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Cursor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::ChangePersonaStatusLeft(int32 Cursor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ChangePersonaStatusLeft");

	Params::BtlShuffleMainBase_ChangePersonaStatusLeft Parms{};

	Parms.Cursor = Cursor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ChangePersonaStatusRight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Cursor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::ChangePersonaStatusRight(int32 Cursor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ChangePersonaStatusRight");

	Params::BtlShuffleMainBase_ChangePersonaStatusRight Parms{};

	Parms.Cursor = Cursor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ChangeStateAllGetBonus
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::ChangeStateAllGetBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ChangeStateAllGetBonus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ChangeStateEffectAllGetBonus
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::ChangeStateEffectAllGetBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ChangeStateEffectAllGetBonus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ChangeStateEffectCard
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::ChangeStateEffectCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ChangeStateEffectCard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ChangeStateEnter
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::ChangeStateEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ChangeStateEnter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ChangeStateExit
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::ChangeStateExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ChangeStateExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ChangeStateSelectCard
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::ChangeStateSelectCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ChangeStateSelectCard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ChangeStateSelectCardAllGetBonus
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::ChangeStateSelectCardAllGetBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ChangeStateSelectCardAllGetBonus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ChangeStateSelectPersona
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::ChangeStateSelectPersona()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ChangeStateSelectPersona");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ChangeTextureEffectCard
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::ChangeTextureEffectCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ChangeTextureEffectCard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.CheckAllGetBonusMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlShuffleMainBase::CheckAllGetBonusMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CheckAllGetBonusMode");

	Params::BtlShuffleMainBase_CheckAllGetBonusMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.CheckAlloutMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlShuffleMainBase::CheckAlloutMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CheckAlloutMode");

	Params::BtlShuffleMainBase_CheckAlloutMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.CheckChangeCard
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlShuffleMainBase::CheckChangeCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CheckChangeCard");

	Params::BtlShuffleMainBase_CheckChangeCard Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.CheckCompleteLoadResource
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlShuffleMainBase::CheckCompleteLoadResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CheckCompleteLoadResource");

	Params::BtlShuffleMainBase_CheckCompleteLoadResource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.CheckCursorSlectedArcana
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlShuffleMainBase::CheckCursorSlectedArcana(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CheckCursorSlectedArcana");

	Params::BtlShuffleMainBase_CheckCursorSlectedArcana Parms{};

	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.CheckDoubleDraw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlShuffleMainBase::CheckDoubleDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CheckDoubleDraw");

	Params::BtlShuffleMainBase_CheckDoubleDraw Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.CheckEnableShuffletime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlShuffleMainBase::CheckEnableShuffletime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CheckEnableShuffletime");

	Params::BtlShuffleMainBase_CheckEnableShuffletime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.CheckLoadCardResource
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlShuffleMainBase::CheckLoadCardResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CheckLoadCardResource");

	Params::BtlShuffleMainBase_CheckLoadCardResource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.CheckNewCard
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlShuffleMainBase::CheckNewCard(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CheckNewCard");

	Params::BtlShuffleMainBase_CheckNewCard Parms{};

	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.CheckShowMsg
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlShuffleMainBase::CheckShowMsg(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CheckShowMsg");

	Params::BtlShuffleMainBase_CheckShowMsg Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.CheckShowPersonaStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlShuffleMainBase::CheckShowPersonaStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CheckShowPersonaStatus");

	Params::BtlShuffleMainBase_CheckShowPersonaStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.CloseMsg
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::CloseMsg()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CloseMsg");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ClosePersonaStatus
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::ClosePersonaStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ClosePersonaStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.CreateMsg
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::CreateMsg()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CreateMsg");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.CreatePersonaStatus
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::CreatePersonaStatus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "CreatePersonaStatus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.EndStateAllGetBonus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::EndStateAllGetBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "EndStateAllGetBonus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.EndStateEffectAllGetBonus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::EndStateEffectAllGetBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "EndStateEffectAllGetBonus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.EndStateEffectCard
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::EndStateEffectCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "EndStateEffectCard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.EndStateEnter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::EndStateEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "EndStateEnter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.EndStateExit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::EndStateExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "EndStateExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.EndStateSelectCard
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::EndStateSelectCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "EndStateSelectCard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.EndStateSelectCardAllGetBonus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::EndStateSelectCardAllGetBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "EndStateSelectCardAllGetBonus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.EndStateSelectPersona
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::EndStateSelectPersona()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "EndStateSelectPersona");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.GetAdjustedPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlShuffleLayout                       InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ABtlShuffleMainBase::GetAdjustedPosition(EBtlShuffleLayout InLayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetAdjustedPosition");

	Params::BtlShuffleMainBase_GetAdjustedPosition Parms{};

	Parms.InLayoutId = InLayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetAllGetTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* ABtlShuffleMainBase::GetAllGetTexture(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetAllGetTexture");

	Params::BtlShuffleMainBase_GetAllGetTexture Parms{};

	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetAppearCard
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAppPropsCardParam               Output                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    IsBonusCard                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::GetAppearCard(int32 Idx, struct FAppPropsCardParam* Output, bool IsBonusCard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetAppearCard");

	Params::BtlShuffleMainBase_GetAppearCard Parms{};

	Parms.Idx = Idx;
	Parms.IsBonusCard = IsBonusCard;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function xrd777.BtlShuffleMainBase.GetAppearCardInfoDetail
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Rank                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value2                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsBonusCard                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::GetAppearCardInfoDetail(int32 Idx, int32* Type, int32* Rank, int32* Value, int32* Value2, bool IsBonusCard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetAppearCardInfoDetail");

	Params::BtlShuffleMainBase_GetAppearCardInfoDetail Parms{};

	Parms.Idx = Idx;
	Parms.IsBonusCard = IsBonusCard;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Type != nullptr)
		*Type = Parms.Type;

	if (Rank != nullptr)
		*Rank = Parms.Rank;

	if (Value != nullptr)
		*Value = Parms.Value;

	if (Value2 != nullptr)
		*Value2 = Parms.Value2;
}


// Function xrd777.BtlShuffleMainBase.GetAxisR
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::GetAxisR(float* X, float* Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetAxisR");

	Params::BtlShuffleMainBase_GetAxisR Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (X != nullptr)
		*X = Parms.X;

	if (Y != nullptr)
		*Y = Parms.Y;
}


// Function xrd777.BtlShuffleMainBase.GetBmdAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBmdAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBmdAsset* ABtlShuffleMainBase::GetBmdAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetBmdAsset");

	Params::BtlShuffleMainBase_GetBmdAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetEffectCardPosX
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   TargetCardIndex                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlShuffleMainBase::GetEffectCardPosX(int32 TargetCardIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetEffectCardPosX");

	Params::BtlShuffleMainBase_GetEffectCardPosX Parms{};

	Parms.TargetCardIndex = TargetCardIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetHaveItemNumBySelectCard
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsBonusCard                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlShuffleMainBase::GetHaveItemNumBySelectCard(int32 Idx, bool IsBonusCard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetHaveItemNumBySelectCard");

	Params::BtlShuffleMainBase_GetHaveItemNumBySelectCard Parms{};

	Parms.Idx = Idx;
	Parms.IsBonusCard = IsBonusCard;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetHaveMajorArcana
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<int32>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<int32> ABtlShuffleMainBase::GetHaveMajorArcana()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetHaveMajorArcana");

	Params::BtlShuffleMainBase_GetHaveMajorArcana Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetInAnime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimSequenceBase* ABtlShuffleMainBase::GetInAnime(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetInAnime");

	Params::BtlShuffleMainBase_GetInAnime Parms{};

	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetItemNumSelectCard
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsBonusCard                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlShuffleMainBase::GetItemNumSelectCard(int32 Idx, bool IsBonusCard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetItemNumSelectCard");

	Params::BtlShuffleMainBase_GetItemNumSelectCard Parms{};

	Parms.Idx = Idx;
	Parms.IsBonusCard = IsBonusCard;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetMaxNumMajorArcana
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlShuffleMainBase::GetMaxNumMajorArcana()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetMaxNumMajorArcana");

	Params::BtlShuffleMainBase_GetMaxNumMajorArcana Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetMegNoDetailArcanaSelectCard
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinorId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsBonusCard                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlShuffleMainBase::GetMegNoDetailArcanaSelectCard(int32 Idx, int32 MinorId, bool IsBonusCard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetMegNoDetailArcanaSelectCard");

	Params::BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard Parms{};

	Parms.Idx = Idx;
	Parms.MinorId = MinorId;
	Parms.IsBonusCard = IsBonusCard;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetNameMajorArcana
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ABtlShuffleMainBase::GetNameMajorArcana(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetNameMajorArcana");

	Params::BtlShuffleMainBase_GetNameMajorArcana Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetNamePersona
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ABtlShuffleMainBase::GetNamePersona(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetNamePersona");

	Params::BtlShuffleMainBase_GetNamePersona Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetPlgAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPlgAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPlgAsset* ABtlShuffleMainBase::GetPlgAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetPlgAsset");

	Params::BtlShuffleMainBase_GetPlgAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetRemainNumMajorArcana
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlShuffleMainBase::GetRemainNumMajorArcana()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetRemainNumMajorArcana");

	Params::BtlShuffleMainBase_GetRemainNumMajorArcana Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetSelectedCardIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SelectIdx                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABtlShuffleMainBase::GetSelectedCardIndex(int32 SelectIdx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetSelectedCardIndex");

	Params::BtlShuffleMainBase_GetSelectedCardIndex Parms{};

	Parms.SelectIdx = SelectIdx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetSprAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USprAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USprAsset* ABtlShuffleMainBase::GetSprAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetSprAsset");

	Params::BtlShuffleMainBase_GetSprAsset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.GetTextCollision
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EBtlShuffleTextLayout                   InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ABtlShuffleMainBase::GetTextCollision(EBtlShuffleTextLayout InLayoutId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "GetTextCollision");

	Params::BtlShuffleMainBase_GetTextCollision Parms{};

	Parms.InLayoutId = InLayoutId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlShuffleMainBase.InitLayoutDataTable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UDataTable*                       PLayoutData                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       PTextLayoutData                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::InitLayoutDataTable(class UDataTable* PLayoutData, class UDataTable* PTextLayoutData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "InitLayoutDataTable");

	Params::BtlShuffleMainBase_InitLayoutDataTable Parms{};

	Parms.PLayoutData = PLayoutData;
	Parms.PTextLayoutData = PTextLayoutData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.LoadResource
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::LoadResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "LoadResource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.LoadTimeCardEnd
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::LoadTimeCardEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "LoadTimeCardEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.LoadTimeCardStart
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::LoadTimeCardStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "LoadTimeCardStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.PlayOnemore
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::PlayOnemore()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "PlayOnemore");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.PrepareStateAllGetBonus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::PrepareStateAllGetBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "PrepareStateAllGetBonus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.PrepareStateEffectAllGetBonus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::PrepareStateEffectAllGetBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "PrepareStateEffectAllGetBonus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.PrepareStateEffectCard
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::PrepareStateEffectCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "PrepareStateEffectCard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.PrepareStateEnter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::PrepareStateEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "PrepareStateEnter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.PrepareStateExit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::PrepareStateExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "PrepareStateExit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.PrepareStateSelectCard
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::PrepareStateSelectCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "PrepareStateSelectCard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.PrepareStateSelectCardAllGetBonus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::PrepareStateSelectCardAllGetBonus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "PrepareStateSelectCardAllGetBonus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.PrepareStateSelectPersona
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::PrepareStateSelectPersona()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "PrepareStateSelectPersona");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ReleaseResource
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::ReleaseResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ReleaseResource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.ReleaseTutorialStopper
// (Final, Native, Public, BlueprintCallable)

void ABtlShuffleMainBase::ReleaseTutorialStopper()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "ReleaseTutorialStopper");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.RunStateAllGetBonus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::RunStateAllGetBonus(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "RunStateAllGetBonus");

	Params::BtlShuffleMainBase_RunStateAllGetBonus Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.RunStateEffectAllGetBonus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::RunStateEffectAllGetBonus(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "RunStateEffectAllGetBonus");

	Params::BtlShuffleMainBase_RunStateEffectAllGetBonus Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.RunStateEffectCard
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::RunStateEffectCard(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "RunStateEffectCard");

	Params::BtlShuffleMainBase_RunStateEffectCard Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.RunStateEnter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::RunStateEnter(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "RunStateEnter");

	Params::BtlShuffleMainBase_RunStateEnter Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.RunStateExit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::RunStateExit(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "RunStateExit");

	Params::BtlShuffleMainBase_RunStateExit Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.RunStateSelectCard
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::RunStateSelectCard(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "RunStateSelectCard");

	Params::BtlShuffleMainBase_RunStateSelectCard Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.RunStateSelectCardAllGetBonus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::RunStateSelectCardAllGetBonus(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "RunStateSelectCardAllGetBonus");

	Params::BtlShuffleMainBase_RunStateSelectCardAllGetBonus Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.RunStateSelectPersona
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::RunStateSelectPersona(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "RunStateSelectPersona");

	Params::BtlShuffleMainBase_RunStateSelectPersona Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.SecondTextCardInStateEffect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::SecondTextCardInStateEffect(int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "SecondTextCardInStateEffect");

	Params::BtlShuffleMainBase_SecondTextCardInStateEffect Parms{};

	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.SetAlphaPersonaList
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::SetAlphaPersonaList(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "SetAlphaPersonaList");

	Params::BtlShuffleMainBase_SetAlphaPersonaList Parms{};

	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.SetBmdValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlGuiDrawObjectMsg*             PMsg                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value1                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value2                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value3                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value4                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::SetBmdValue(class UBtlGuiDrawObjectMsg* PMsg, const class FString& Value1, const class FString& Value2, const class FString& Value3, const class FString& Value4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "SetBmdValue");

	Params::BtlShuffleMainBase_SetBmdValue Parms{};

	Parms.PMsg = PMsg;
	Parms.Value1 = std::move(Value1);
	Parms.Value2 = std::move(Value2);
	Parms.Value3 = std::move(Value3);
	Parms.Value4 = std::move(Value4);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.SetEndArcanaBurstInFlag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::SetEndArcanaBurstInFlag(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "SetEndArcanaBurstInFlag");

	Params::BtlShuffleMainBase_SetEndArcanaBurstInFlag Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.SetEndCardInAnime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Input                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::SetEndCardInAnime(bool Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "SetEndCardInAnime");

	Params::BtlShuffleMainBase_SetEndCardInAnime Parms{};

	Parms.Input = Input;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.SetEndPersonaListInFlag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::SetEndPersonaListInFlag(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "SetEndPersonaListInFlag");

	Params::BtlShuffleMainBase_SetEndPersonaListInFlag Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.SetKeyHelp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBtlShuffleKeyHelpState                 State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::SetKeyHelp(EBtlShuffleKeyHelpState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "SetKeyHelp");

	Params::BtlShuffleMainBase_SetKeyHelp Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.SetMsgVariableSelectCard
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UBtlGuiDrawObjectMsg*             PMsg                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PersonaID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsBonusCard                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::SetMsgVariableSelectCard(class UBtlGuiDrawObjectMsg* PMsg, int32 Idx, int32 PersonaID, bool IsBonusCard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "SetMsgVariableSelectCard");

	Params::BtlShuffleMainBase_SetMsgVariableSelectCard Parms{};

	Parms.PMsg = PMsg;
	Parms.Idx = Idx;
	Parms.PersonaID = PersonaID;
	Parms.IsBonusCard = IsBonusCard;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.SetPersonaSkillHelp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Use                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::SetPersonaSkillHelp(bool Use)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "SetPersonaSkillHelp");

	Params::BtlShuffleMainBase_SetPersonaSkillHelp Parms{};

	Parms.Use = Use;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.SetPosPersonaList
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::SetPosPersonaList(const struct FVector2D& InPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "SetPosPersonaList");

	Params::BtlShuffleMainBase_SetPosPersonaList Parms{};

	Parms.InPos = std::move(InPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.SetTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::SetTouchCollision(int32 Index_0, float X, float Y, float Width, float Height, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "SetTouchCollision");

	Params::BtlShuffleMainBase_SetTouchCollision Parms{};

	Parms.Index_0 = Index_0;
	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.StartingCardSelect
// (Event, Public, BlueprintEvent)

void ABtlShuffleMainBase::StartingCardSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "StartingCardSelect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlShuffleMainBase.StartLoadCardResource
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ABtlShuffleMainBase::StartLoadCardResource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "StartLoadCardResource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.StartMsg
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::StartMsg(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "StartMsg");

	Params::BtlShuffleMainBase_StartMsg Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.UpdateCardRotation
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABtlShuffleMainBase::UpdateCardRotation(float DeltaTime, int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "UpdateCardRotation");

	Params::BtlShuffleMainBase_UpdateCardRotation Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlShuffleMainBase.IsInMonadDoorAndNormalOrMore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABtlShuffleMainBase::IsInMonadDoorAndNormalOrMore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlShuffleMainBase", "IsInMonadDoorAndNormalOrMore");

	Params::BtlShuffleMainBase_IsInMonadDoorAndNormalOrMore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlSkill.CalcOnlyAbsorptionTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABtlSkill::CalcOnlyAbsorptionTime(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlSkill", "CalcOnlyAbsorptionTime");

	Params::BtlSkill_CalcOnlyAbsorptionTime Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SuzukiDrawTestDraw.FromBPDraw
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASuzukiDrawTestDraw::FromBPDraw(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SuzukiDrawTestDraw", "FromBPDraw");

	Params::SuzukiDrawTestDraw_FromBPDraw Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SuzukiDrawTestDraw.SyncModelCapture
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       ModelTransform                                         (ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          NewGazeOffset                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASuzukiDrawTestDraw::SyncModelCapture(const struct FTransform& ModelTransform, const struct FVector& NewGazeOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SuzukiDrawTestDraw", "SyncModelCapture");

	Params::SuzukiDrawTestDraw_SyncModelCapture Parms{};

	Parms.ModelTransform = std::move(ModelTransform);
	Parms.NewGazeOffset = std::move(NewGazeOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SuzukiDrawTestDraw.Update
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   InDeltaTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASuzukiDrawTestDraw::Update(const float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SuzukiDrawTestDraw", "Update");

	Params::SuzukiDrawTestDraw_Update Parms{};

	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSkillGeneratorComponent.GetSkill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ABtlSkill*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlSkill* UBtlSkillGeneratorComponent::GetSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlSkillGeneratorComponent", "GetSkill");

	Params::BtlSkillGeneratorComponent_GetSkill Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlSkillGeneratorComponent.RequestCreateSkill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SkillId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlSkillGeneratorComponent::RequestCreateSkill(int32 SkillId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlSkillGeneratorComponent", "RequestCreateSkill");

	Params::BtlSkillGeneratorComponent_RequestCreateSkill Parms{};

	Parms.SkillId = SkillId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlSoundBPFuncLib.BtlPCVoicePlay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlSoundBPFuncLib::BtlPCVoicePlay(class ABtlActor* Actor, int32 CueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlPCVoicePlay");

	Params::BtlSoundBPFuncLib_BtlPCVoicePlay Parms{};

	Parms.Actor = Actor;
	Parms.CueId = CueId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlPCVoicePlay_Command
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlSoundBPFuncLib::BtlPCVoicePlay_Command(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlPCVoicePlay_Command");

	Params::BtlSoundBPFuncLib_BtlPCVoicePlay_Command Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlPCVoicePlay_HeroUI
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlSoundBPFuncLib::BtlPCVoicePlay_HeroUI(class ABtlActor* Actor, int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlPCVoicePlay_HeroUI");

	Params::BtlSoundBPFuncLib_BtlPCVoicePlay_HeroUI Parms{};

	Parms.Actor = Actor;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlPCVoicePlay_ShiftSelect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlSoundBPFuncLib::BtlPCVoicePlay_ShiftSelect(class ABtlActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlPCVoicePlay_ShiftSelect");

	Params::BtlSoundBPFuncLib_BtlPCVoicePlay_ShiftSelect Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlPCVoicePlayNotLipsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlSoundBPFuncLib::BtlPCVoicePlayNotLipsync(class ABtlActor* Actor, int32 CueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlPCVoicePlayNotLipsync");

	Params::BtlSoundBPFuncLib_BtlPCVoicePlayNotLipsync Parms{};

	Parms.Actor = Actor;
	Parms.CueId = CueId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlSEPlay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlSoundBPFuncLib::BtlSEPlay(int32 CueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlSEPlay");

	Params::BtlSoundBPFuncLib_BtlSEPlay Parms{};

	Parms.CueId = CueId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlSEPlayCANCEL
// (Final, Native, Static, Public, BlueprintCallable)

void UBtlSoundBPFuncLib::BtlSEPlayCANCEL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlSEPlayCANCEL");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlSEPlayCRITICAL
// (Final, Native, Static, Public, BlueprintCallable)

void UBtlSoundBPFuncLib::BtlSEPlayCRITICAL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlSEPlayCRITICAL");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlSEPlayCURSOR
// (Final, Native, Static, Public, BlueprintCallable)

void UBtlSoundBPFuncLib::BtlSEPlayCURSOR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlSEPlayCURSOR");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlSEPlayDECIDE
// (Final, Native, Static, Public, BlueprintCallable)

void UBtlSoundBPFuncLib::BtlSEPlayDECIDE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlSEPlayDECIDE");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlSEPlayDOWN
// (Final, Native, Static, Public, BlueprintCallable)

void UBtlSoundBPFuncLib::BtlSEPlayDOWN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlSEPlayDOWN");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlSEPlayERROR
// (Final, Native, Static, Public, BlueprintCallable)

void UBtlSoundBPFuncLib::BtlSEPlayERROR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlSEPlayERROR");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlSEPlayPAGE
// (Final, Native, Static, Public, BlueprintCallable)

void UBtlSoundBPFuncLib::BtlSEPlayPAGE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlSEPlayPAGE");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlSEPlayPANELOPEN
// (Final, Native, Static, Public, BlueprintCallable)

void UBtlSoundBPFuncLib::BtlSEPlayPANELOPEN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlSEPlayPANELOPEN");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlSoundBPFuncLib.BtlSEPlaySHIFT
// (Final, Native, Static, Public, BlueprintCallable)

void UBtlSoundBPFuncLib::BtlSEPlaySHIFT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BtlSoundBPFuncLib", "BtlSEPlaySHIFT");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SteamInputLibrary.GetInputTypeName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   NIndex                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESteamControllerType                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESteamControllerType USteamInputLibrary::GetInputTypeName(int32 NIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "GetInputTypeName");

	Params::SteamInputLibrary_GetInputTypeName Parms{};

	Parms.NIndex = NIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInitializeLanguage
// (Final, Native, Static, Public, BlueprintCallable)

void USteamInputLibrary::SteamInitializeLanguage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInitializeLanguage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SteamInputLibrary.SteamInputInitialize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputInitialize");

	Params::SteamInputLibrary_SteamInputInitialize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_L1
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_L1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_L1");

	Params::SteamInputLibrary_SteamInputPadPress_L1 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_L2
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_L2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_L2");

	Params::SteamInputLibrary_SteamInputPadPress_L2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_L3
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_L3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_L3");

	Params::SteamInputLibrary_SteamInputPadPress_L3 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_LeftDown
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_LeftDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_LeftDown");

	Params::SteamInputLibrary_SteamInputPadPress_LeftDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_LeftLeft
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_LeftLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_LeftLeft");

	Params::SteamInputLibrary_SteamInputPadPress_LeftLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_LeftRight
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_LeftRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_LeftRight");

	Params::SteamInputLibrary_SteamInputPadPress_LeftRight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_LeftUp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_LeftUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_LeftUp");

	Params::SteamInputLibrary_SteamInputPadPress_LeftUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_R1
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_R1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_R1");

	Params::SteamInputLibrary_SteamInputPadPress_R1 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_R2
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_R2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_R2");

	Params::SteamInputLibrary_SteamInputPadPress_R2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_R3
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_R3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_R3");

	Params::SteamInputLibrary_SteamInputPadPress_R3 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_RightDown
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_RightDown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_RightDown");

	Params::SteamInputLibrary_SteamInputPadPress_RightDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_RightLeft
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_RightLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_RightLeft");

	Params::SteamInputLibrary_SteamInputPadPress_RightLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_RightRight
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_RightRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_RightRight");

	Params::SteamInputLibrary_SteamInputPadPress_RightRight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SteamInputLibrary.SteamInputPadPress_RightUp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USteamInputLibrary::SteamInputPadPress_RightUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SteamInputLibrary", "SteamInputPadPress_RightUp");

	Params::SteamInputLibrary_SteamInputPadPress_RightUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlTargetsManagerComponent.Clear
// (Final, Native, Public, BlueprintCallable)

void UBtlTargetsManagerComponent::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlTargetsManagerComponent", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlTargetsManagerComponent.ClearForBP
// (Event, Public, BlueprintEvent)

void UBtlTargetsManagerComponent::ClearForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlTargetsManagerComponent", "ClearForBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.BtlTargetsManagerComponent.GetCursorTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABtlActor*> UBtlTargetsManagerComponent::GetCursorTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlTargetsManagerComponent", "GetCursorTargets");

	Params::BtlTargetsManagerComponent_GetCursorTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlTargetsManagerComponent.GetEffectTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABtlActor*> UBtlTargetsManagerComponent::GetEffectTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlTargetsManagerComponent", "GetEffectTargets");

	Params::BtlTargetsManagerComponent_GetEffectTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlTargetsManagerComponent.GetMainCharacter
// (Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ABtlActor* UBtlTargetsManagerComponent::GetMainCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlTargetsManagerComponent", "GetMainCharacter");

	Params::BtlTargetsManagerComponent_GetMainCharacter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlTargetsManagerComponent.GetTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ABtlActor*> UBtlTargetsManagerComponent::GetTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlTargetsManagerComponent", "GetTargets");

	Params::BtlTargetsManagerComponent_GetTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlTargetsManagerComponent.SetCursorTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                List                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBtlTargetsManagerComponent::SetCursorTargets(const TArray<class ABtlActor*>& List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlTargetsManagerComponent", "SetCursorTargets");

	Params::BtlTargetsManagerComponent_SetCursorTargets Parms{};

	Parms.List = std::move(List);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlTargetsManagerComponent.SetMainCharacter
// (Native, Public, BlueprintCallable)
// Parameters:
// class ABtlActor*                        Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBtlTargetsManagerComponent::SetMainCharacter(class ABtlActor* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlTargetsManagerComponent", "SetMainCharacter");

	Params::BtlTargetsManagerComponent_SetMainCharacter Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlTargetsManagerComponent.SetTargets
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ABtlActor*>                List                                                   (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UBtlTargetsManagerComponent::SetTargets(const TArray<class ABtlActor*>& List)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlTargetsManagerComponent", "SetTargets");

	Params::BtlTargetsManagerComponent_SetTargets Parms{};

	Parms.List = std::move(List);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BtlTargetsManagerComponent.CheckTargetIsLatestActionCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBtlCoreComponent*                PCore                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlTargetsManagerComponent::CheckTargetIsLatestActionCharacter(class UBtlCoreComponent* PCore) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlTargetsManagerComponent", "CheckTargetIsLatestActionCharacter");

	Params::BtlTargetsManagerComponent_CheckTargetIsLatestActionCharacter Parms{};

	Parms.PCore = PCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlTargetsManagerComponent.CheckTargetIsNextActionCharacter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UBtlCoreComponent*                PCore                                                  (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBtlTargetsManagerComponent::CheckTargetIsNextActionCharacter(class UBtlCoreComponent* PCore) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlTargetsManagerComponent", "CheckTargetIsNextActionCharacter");

	Params::BtlTargetsManagerComponent_CheckTargetIsNextActionCharacter Parms{};

	Parms.PCore = PCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BtlTargetsManagerComponent.GetConstTargets
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class ABtlActor*>          ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<class ABtlActor*> UBtlTargetsManagerComponent::GetConstTargets() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BtlTargetsManagerComponent", "GetConstTargets");

	Params::BtlTargetsManagerComponent_GetConstTargets Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CharacterLipsyncAppComponent.FindLipPropsPtr
// (Final, Native, Public, BlueprintCallable)

void UCharacterLipsyncAppComponent::FindLipPropsPtr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterLipsyncAppComponent", "FindLipPropsPtr");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CharacterLipsyncAppComponent.OnChangeLipsyncState
// (Native, Public, HasOutParams)
// Parameters:
// ELipSyncAppStateType                    LipSyncAppStateType                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLipsyncAppListener              LipsyncParam                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UCharacterLipsyncAppComponent::OnChangeLipsyncState(ELipSyncAppStateType LipSyncAppStateType, const struct FLipsyncAppListener& LipsyncParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterLipsyncAppComponent", "OnChangeLipsyncState");

	Params::CharacterLipsyncAppComponent_OnChangeLipsyncState Parms{};

	Parms.LipSyncAppStateType = LipSyncAppStateType;
	Parms.LipsyncParam = std::move(LipsyncParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CharacterLipsyncAppComponent.GetLipsyncSubsystem
// (Final, Native, Protected, Const)
// Parameters:
// class ULipsyncAppObserverSubsystem*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULipsyncAppObserverSubsystem* UCharacterLipsyncAppComponent::GetLipsyncSubsystem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterLipsyncAppComponent", "GetLipsyncSubsystem");

	Params::CharacterLipsyncAppComponent_GetLipsyncSubsystem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CharacterSimpleLipsAnimAppSubsystem.FinishSpeakCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAppCharCategoryType                    CharcterCategoryType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterSimpleLipsAnimAppSubsystem::FinishSpeakCharacter(EAppCharCategoryType CharcterCategoryType, int32 CharaIndexID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSimpleLipsAnimAppSubsystem", "FinishSpeakCharacter");

	Params::CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacter Parms{};

	Parms.CharcterCategoryType = CharcterCategoryType;
	Parms.CharaIndexID = CharaIndexID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CharacterSimpleLipsAnimAppSubsystem.FinishSpeakCharacterPtr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorPtr                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterSimpleLipsAnimAppSubsystem::FinishSpeakCharacterPtr(class AActor* ActorPtr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSimpleLipsAnimAppSubsystem", "FinishSpeakCharacterPtr");

	Params::CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacterPtr Parms{};

	Parms.ActorPtr = ActorPtr;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CharacterSimpleLipsAnimAppSubsystem.StartSpeakCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAppCharCategoryType                    CharcterCategoryType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RequestedSpeakTotalTime                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverride                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterSimpleLipsAnimAppSubsystem::StartSpeakCharacter(EAppCharCategoryType CharcterCategoryType, int32 CharaIndexID, float RequestedSpeakTotalTime, bool bOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSimpleLipsAnimAppSubsystem", "StartSpeakCharacter");

	Params::CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter Parms{};

	Parms.CharcterCategoryType = CharcterCategoryType;
	Parms.CharaIndexID = CharaIndexID;
	Parms.RequestedSpeakTotalTime = RequestedSpeakTotalTime;
	Parms.bOverride = bOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CharacterSimpleLipsAnimAppSubsystem.StartSpeakCharacterPtr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           ActorPtr                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RequestedSpeakTotalTime                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MajorPlayerID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinorPlayerID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverride                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterSimpleLipsAnimAppSubsystem::StartSpeakCharacterPtr(class AActor* ActorPtr, float RequestedSpeakTotalTime, int32 MajorPlayerID, int32 MinorPlayerID, bool bOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSimpleLipsAnimAppSubsystem", "StartSpeakCharacterPtr");

	Params::CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr Parms{};

	Parms.ActorPtr = ActorPtr;
	Parms.RequestedSpeakTotalTime = RequestedSpeakTotalTime;
	Parms.MajorPlayerID = MajorPlayerID;
	Parms.MinorPlayerID = MinorPlayerID;
	Parms.bOverride = bOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CharacterSimpleLipsAnimAppSubsystem.StartSpeakCharacterWithCustomParam
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCharacterSimpleLipsAnimAppParam SimpleLipsParam                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bOverride                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterSimpleLipsAnimAppSubsystem::StartSpeakCharacterWithCustomParam(const struct FCharacterSimpleLipsAnimAppParam& SimpleLipsParam, bool bOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSimpleLipsAnimAppSubsystem", "StartSpeakCharacterWithCustomParam");

	Params::CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterWithCustomParam Parms{};

	Parms.SimpleLipsParam = std::move(SimpleLipsParam);
	Parms.bOverride = bOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CharacterSimpleLipsAnimAppSubsystem.StopAllSpeakCharacter
// (Final, Native, Public, BlueprintCallable)

void UCharacterSimpleLipsAnimAppSubsystem::StopAllSpeakCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSimpleLipsAnimAppSubsystem", "StopAllSpeakCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CldBpFuncLib.CheckWinterCloth
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCldBpFuncLib::CheckWinterCloth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "CheckWinterCloth");

	Params::CldBpFuncLib_CheckWinterCloth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CldBpFuncLib.CldCheckDayDispInOut
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCldBpFuncLib::CldCheckDayDispInOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "CldCheckDayDispInOut");

	Params::CldBpFuncLib_CldCheckDayDispInOut Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CldBpFuncLib.CldGetDayDispState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ECldDayDispState                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECldDayDispState UCldBpFuncLib::CldGetDayDispState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "CldGetDayDispState");

	Params::CldBpFuncLib_CldGetDayDispState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CldBpFuncLib.CldSetDrawDayDisp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ECldDayDispState                        Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCldBpFuncLib::CldSetDrawDayDisp(ECldDayDispState Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "CldSetDrawDayDisp");

	Params::CldBpFuncLib_CldSetDrawDayDisp Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CldBpFuncLib.CldSetDrawDayDispIm
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ECldDayDispState                        Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCldBpFuncLib::CldSetDrawDayDispIm(ECldDayDispState Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "CldSetDrawDayDispIm");

	Params::CldBpFuncLib_CldSetDrawDayDispIm Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CldBpFuncLib.GetNowMoonAge
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCldBpFuncLib::GetNowMoonAge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "GetNowMoonAge");

	Params::CldBpFuncLib_GetNowMoonAge Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CldBpFuncLib.GetNowSeason
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ECldSeason                              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECldSeason UCldBpFuncLib::GetNowSeason()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "GetNowSeason");

	Params::CldBpFuncLib_GetNowSeason Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CldBpFuncLib.GetNowTime
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCldBpFuncLib::GetNowTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "GetNowTime");

	Params::CldBpFuncLib_GetNowTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CldBpFuncLib.GetNowTimeZone
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ECldTimeZone                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECldTimeZone UCldBpFuncLib::GetNowTimeZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "GetNowTimeZone");

	Params::CldBpFuncLib_GetNowTimeZone Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CldBpFuncLib.GetNowTotalDay
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCldBpFuncLib::GetNowTotalDay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "GetNowTotalDay");

	Params::CldBpFuncLib_GetNowTotalDay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CldBpFuncLib.GetNowTotalToDayMon
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Month                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Day                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCldBpFuncLib::GetNowTotalToDayMon(int32* Month, int32* Day)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "GetNowTotalToDayMon");

	Params::CldBpFuncLib_GetNowTotalToDayMon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Month != nullptr)
		*Month = Parms.Month;

	if (Day != nullptr)
		*Day = Parms.Day;
}


// Function xrd777.CldBpFuncLib.GetNowYasumi
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCldBpFuncLib::GetNowYasumi()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "GetNowYasumi");

	Params::CldBpFuncLib_GetNowYasumi Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CldBpFuncLib.GetNowYoubi
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCldBpFuncLib::GetNowYoubi()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "GetNowYoubi");

	Params::CldBpFuncLib_GetNowYoubi Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CldBpFuncLib.GetTotalDayFromSeason
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// ECldSeason                              Season                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCldBpFuncLib::GetTotalDayFromSeason(ECldSeason Season)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "GetTotalDayFromSeason");

	Params::CldBpFuncLib_GetTotalDayFromSeason Parms{};

	Parms.Season = Season;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.CldBpFuncLib.SetNowTimeZone
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ECldTimeZone                            TimeZone                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCldBpFuncLib::SetNowTimeZone(ECldTimeZone TimeZone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "SetNowTimeZone");

	Params::CldBpFuncLib_SetNowTimeZone Parms{};

	Parms.TimeZone = TimeZone;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CldBpFuncLib.SetNowTotalDay
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   TotalDay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCldBpFuncLib::SetNowTotalDay(int32 TotalDay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CldBpFuncLib", "SetNowTotalDay");

	Params::CldBpFuncLib_SetNowTotalDay Parms{};

	Parms.TotalDay = TotalDay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CldSchedulerActor.SetBpObjEnd
// (Final, Native, Public)

void ACldSchedulerActor::SetBpObjEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerActor", "SetBpObjEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UtlProcActor.RequestBfSettedFile
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ProcNo                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUtlProcActor::RequestBfSettedFile(const class UObject* WorldContextObject, int32 ProcNo, const struct FLatentActionInfo& LatentInfo, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlProcActor", "RequestBfSettedFile");

	Params::UtlProcActor_RequestBfSettedFile Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ProcNo = ProcNo;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function xrd777.UtlProcActor.Return
// (Final, Native, Public, BlueprintCallable)

void AUtlProcActor::Return()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlProcActor", "Return");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UtlProcActor.ReturnField
// (Final, Native, Public, BlueprintCallable)

void AUtlProcActor::ReturnField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlProcActor", "ReturnField");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UtlProcActor.StartProc
// (Event, Public, BlueprintEvent)

void AUtlProcActor::StartProc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlProcActor", "StartProc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerProcActor.AfterSchool
// (Event, Protected, BlueprintEvent)

void ACldSchedulerProcActor::AfterSchool()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerProcActor", "AfterSchool");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerProcActor.AM
// (Event, Protected, BlueprintEvent)

void ACldSchedulerProcActor::AM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerProcActor", "AM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerProcActor.CallNextTime
// (Final, Native, Public, BlueprintCallable)

void ACldSchedulerProcActor::CallNextTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerProcActor", "CallNextTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CldSchedulerProcActor.EarlyMorning
// (Event, Protected, BlueprintEvent)

void ACldSchedulerProcActor::EarlyMorning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerProcActor", "EarlyMorning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerProcActor.Midnight
// (Event, Protected, BlueprintEvent)

void ACldSchedulerProcActor::Midnight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerProcActor", "Midnight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerProcActor.Morning
// (Event, Protected, BlueprintEvent)

void ACldSchedulerProcActor::Morning()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerProcActor", "Morning");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerProcActor.Night
// (Event, Protected, BlueprintEvent)

void ACldSchedulerProcActor::Night()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerProcActor", "Night");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerProcActor.Noon
// (Event, Protected, BlueprintEvent)

void ACldSchedulerProcActor::Noon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerProcActor", "Noon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerProcActor.PM
// (Event, Protected, BlueprintEvent)

void ACldSchedulerProcActor::PM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerProcActor", "PM");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.CldSchedulerProcActor.ShadowTime
// (Event, Protected, BlueprintEvent)

void ACldSchedulerProcActor::ShadowTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CldSchedulerProcActor", "ShadowTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UIVelvetRoomDraw.AddAstreaLoadAsset
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UObject>           SoftAsset                                              (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::AddAstreaLoadAsset(const TSoftObjectPtr<class UObject> SoftAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "AddAstreaLoadAsset");

	Params::UIVelvetRoomDraw_AddAstreaLoadAsset Parms{};

	Parms.SoftAsset = SoftAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.ApplyMcaForSceneCaptureComponent2D
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         SceneCaptureComponent2D                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          McaResourceData                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::ApplyMcaForSceneCaptureComponent2D(class USceneCaptureComponent2D* SceneCaptureComponent2D, const class UObject* McaResourceData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "ApplyMcaForSceneCaptureComponent2D");

	Params::UIVelvetRoomDraw_ApplyMcaForSceneCaptureComponent2D Parms{};

	Parms.SceneCaptureComponent2D = SceneCaptureComponent2D;
	Parms.McaResourceData = McaResourceData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.ApplyMcaToSceneCaptureComponent
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         PCaptureComponent                                      (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          PResource                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIVELVET_ROOM_MCA_CAPTURE              Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OffsetPoint                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         OffsetRotation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   OffsetFov                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::ApplyMcaToSceneCaptureComponent(class USceneCaptureComponent2D* PCaptureComponent, class UObject* PResource, EUIVELVET_ROOM_MCA_CAPTURE Type, const struct FVector& OffsetPoint, const struct FRotator& OffsetRotation, float OffsetFov)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "ApplyMcaToSceneCaptureComponent");

	Params::UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent Parms{};

	Parms.PCaptureComponent = PCaptureComponent;
	Parms.PResource = PResource;
	Parms.Type = Type;
	Parms.OffsetPoint = std::move(OffsetPoint);
	Parms.OffsetRotation = std::move(OffsetRotation);
	Parms.OffsetFov = OffsetFov;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.Draw2CombineHeading
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          UniqueResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::Draw2CombineHeading(float X, float Y, const class UObject* UniqueResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "Draw2CombineHeading");

	Params::UIVelvetRoomDraw_Draw2CombineHeading Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.UniqueResource = UniqueResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.Draw2CombineIgor
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class USceneCaptureComponent2D*         PSceneCapture                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::Draw2CombineIgor(const class USceneCaptureComponent2D* PSceneCapture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "Draw2CombineIgor");

	Params::UIVelvetRoomDraw_Draw2CombineIgor Parms{};

	Parms.PSceneCapture = PSceneCapture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.Draw2CombineList
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UObject*                          UniqueResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::Draw2CombineList(const class UObject* UniqueResource, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "Draw2CombineList");

	Params::UIVelvetRoomDraw_Draw2CombineList Parms{};

	Parms.UniqueResource = UniqueResource;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.Draw2CombinePlayerNameBoard
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::Draw2CombinePlayerNameBoard(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "Draw2CombinePlayerNameBoard");

	Params::UIVelvetRoomDraw_Draw2CombinePlayerNameBoard Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawBackgroundPanelLattices
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UObject*                          Resource                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawBackgroundPanelLattices(const class UObject* Resource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawBackgroundPanelLattices");

	Params::UIVelvetRoomDraw_DrawBackgroundPanelLattices Parms{};

	Parms.Resource = Resource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawBackgroundPanels
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FColor>                   Colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>                           BlackPanelIndex                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawBackgroundPanels(const TArray<struct FColor>& Colors, const TArray<int32>& BlackPanelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawBackgroundPanels");

	Params::UIVelvetRoomDraw_DrawBackgroundPanels Parms{};

	Parms.Colors = std::move(Colors);
	Parms.BlackPanelIndex = std::move(BlackPanelIndex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawBlackScreenFadeOut
// (Final, Native, Protected, BlueprintCallable)

void AUIVelvetRoomDraw::DrawBlackScreenFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawBlackScreenFadeOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawBlackScreenHigh
// (Final, Native, Protected, BlueprintCallable)

void AUIVelvetRoomDraw::DrawBlackScreenHigh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawBlackScreenHigh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawBlackScreenLow
// (Final, Native, Protected, BlueprintCallable)

void AUIVelvetRoomDraw::DrawBlackScreenLow()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawBlackScreenLow");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawBlackScreenMiddle
// (Final, Native, Protected, BlueprintCallable)

void AUIVelvetRoomDraw::DrawBlackScreenMiddle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawBlackScreenMiddle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawDrawerElizabeth
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneCaptureComponent2D*         PSceneCapture                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Elizabeth                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawDrawerElizabeth(float X, float Y, float Angle, const class USceneCaptureComponent2D* PSceneCapture, const class UObject* Elizabeth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawDrawerElizabeth");

	Params::UIVelvetRoomDraw_DrawDrawerElizabeth Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.PSceneCapture = PSceneCapture;
	Parms.Elizabeth = Elizabeth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawDrawerHeading
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawDrawerHeading(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawDrawerHeading");

	Params::UIVelvetRoomDraw_DrawDrawerHeading Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawDrawerHelpMessage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawDrawerHelpMessage(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawDrawerHelpMessage");

	Params::UIVelvetRoomDraw_DrawDrawerHelpMessage Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawDrawerList
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          UniqueResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawDrawerList(float X, float Y, float Angle, const class UObject* UniqueResource, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawDrawerList");

	Params::UIVelvetRoomDraw_DrawDrawerList Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.UniqueResource = UniqueResource;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawDrawerListSortPanel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          UniqueResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawDrawerListSortPanel(float X, float Y, float Angle, const class UObject* UniqueResource, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawDrawerListSortPanel");

	Params::UIVelvetRoomDraw_DrawDrawerListSortPanel Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.UniqueResource = UniqueResource;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawDrawerPlayerNameBoard
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawDrawerPlayerNameBoard(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawDrawerPlayerNameBoard");

	Params::UIVelvetRoomDraw_DrawDrawerPlayerNameBoard Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawDrawerRegistryRate
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawDrawerRegistryRate(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawDrawerRegistryRate");

	Params::UIVelvetRoomDraw_DrawDrawerRegistryRate Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawHelpMessage2Combine
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawHelpMessage2Combine(const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawHelpMessage2Combine");

	Params::UIVelvetRoomDraw_DrawHelpMessage2Combine Parms{};

	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawHelpMessageSearchCombine
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawHelpMessageSearchCombine(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawHelpMessageSearchCombine");

	Params::UIVelvetRoomDraw_DrawHelpMessageSearchCombine Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawHelpMessageSpecialCombine
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawHelpMessageSpecialCombine(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawHelpMessageSpecialCombine");

	Params::UIVelvetRoomDraw_DrawHelpMessageSpecialCombine Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawMessageWaitScene
// (Final, Native, Protected, BlueprintCallable)

void AUIVelvetRoomDraw::DrawMessageWaitScene()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawMessageWaitScene");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawRegistryElizabeth
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneCaptureComponent2D*         PSceneCapture                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Elizabeth                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawRegistryElizabeth(float X, float Y, float Angle, const class USceneCaptureComponent2D* PSceneCapture, const class UObject* Elizabeth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawRegistryElizabeth");

	Params::UIVelvetRoomDraw_DrawRegistryElizabeth Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.PSceneCapture = PSceneCapture;
	Parms.Elizabeth = Elizabeth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawRegistryHeading
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawRegistryHeading(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawRegistryHeading");

	Params::UIVelvetRoomDraw_DrawRegistryHeading Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawRegistryHelpMessage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawRegistryHelpMessage(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawRegistryHelpMessage");

	Params::UIVelvetRoomDraw_DrawRegistryHelpMessage Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawRegistryList
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          UniqueResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawRegistryList(float X, float Y, float Angle, const class UObject* UniqueResource, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawRegistryList");

	Params::UIVelvetRoomDraw_DrawRegistryList Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.UniqueResource = UniqueResource;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawRegistryPlayerNameBoard
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawRegistryPlayerNameBoard(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawRegistryPlayerNameBoard");

	Params::UIVelvetRoomDraw_DrawRegistryPlayerNameBoard Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawSearchCombineHeading
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawSearchCombineHeading(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawSearchCombineHeading");

	Params::UIVelvetRoomDraw_DrawSearchCombineHeading Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawSearchCombineIgor
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneCaptureComponent2D*         PSceneCapture                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawSearchCombineIgor(float X, float Y, float Angle, const class USceneCaptureComponent2D* PSceneCapture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawSearchCombineIgor");

	Params::UIVelvetRoomDraw_DrawSearchCombineIgor Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.PSceneCapture = PSceneCapture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawSearchCombineList
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UObject*                          UniqueResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawSearchCombineList(const class UObject* UniqueResource, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawSearchCombineList");

	Params::UIVelvetRoomDraw_DrawSearchCombineList Parms{};

	Parms.UniqueResource = UniqueResource;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawSearchCombinePlayerNameBoard
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawSearchCombinePlayerNameBoard(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawSearchCombinePlayerNameBoard");

	Params::UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawSearchCombineSortPanel
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          UniqueResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawSearchCombineSortPanel(float X, float Y, float Angle, const class UObject* UniqueResource, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawSearchCombineSortPanel");

	Params::UIVelvetRoomDraw_DrawSearchCombineSortPanel Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.UniqueResource = UniqueResource;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawSpecialCombineHeading
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawSpecialCombineHeading(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawSpecialCombineHeading");

	Params::UIVelvetRoomDraw_DrawSpecialCombineHeading Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawSpecialCombineIgor
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneCaptureComponent2D*         PSceneCapture                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawSpecialCombineIgor(float X, float Y, float Angle, const class USceneCaptureComponent2D* PSceneCapture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawSpecialCombineIgor");

	Params::UIVelvetRoomDraw_DrawSpecialCombineIgor Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.PSceneCapture = PSceneCapture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawSpecialCombineList
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UObject*                          UniqueResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawSpecialCombineList(const class UObject* UniqueResource, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawSpecialCombineList");

	Params::UIVelvetRoomDraw_DrawSpecialCombineList Parms{};

	Parms.UniqueResource = UniqueResource;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawSpecialCombinePlayerNameBoard
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawSpecialCombinePlayerNameBoard(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawSpecialCombinePlayerNameBoard");

	Params::UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawTopBlackDesign
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UObject*                          UniqueResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawTopBlackDesign(const class UObject* UniqueResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawTopBlackDesign");

	Params::UIVelvetRoomDraw_DrawTopBlackDesign Parms{};

	Parms.UniqueResource = UniqueResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawTopCard
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          CardDataAsset                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawTopCard(const struct FTransform& Transform, const class UObject* CardDataAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawTopCard");

	Params::UIVelvetRoomDraw_DrawTopCard Parms{};

	Parms.Transform = std::move(Transform);
	Parms.CardDataAsset = CardDataAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawTopHelpMessage
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CommonResource                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawTopHelpMessage(float X, float Y, float Angle, const class UObject* CommonResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawTopHelpMessage");

	Params::UIVelvetRoomDraw_DrawTopHelpMessage Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;
	Parms.CommonResource = CommonResource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.DrawTopHero
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneCaptureComponent2D*         PSceneCapture                                          (ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::DrawTopHero(float X, float Y, float Width, float Height, const class USceneCaptureComponent2D* PSceneCapture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "DrawTopHero");

	Params::UIVelvetRoomDraw_DrawTopHero Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.PSceneCapture = PSceneCapture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.GetAstreaResourceData
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* AUIVelvetRoomDraw::GetAstreaResourceData(const int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "GetAstreaResourceData");

	Params::UIVelvetRoomDraw_GetAstreaResourceData Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVelvetRoomDraw.GetHeroCostumeID
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   ForceID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIVelvetRoomDraw::GetHeroCostumeID(int32 ForceID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "GetHeroCostumeID");

	Params::UIVelvetRoomDraw_GetHeroCostumeID Parms{};

	Parms.ForceID = ForceID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVelvetRoomDraw.UpdateCardTimes
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ResourceData                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::UpdateCardTimes(const float DeltaTime, const class UObject* ResourceData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "UpdateCardTimes");

	Params::UIVelvetRoomDraw_UpdateCardTimes Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.ResourceData = ResourceData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.UpdateMcaTimes
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ResourceData                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::UpdateMcaTimes(const float DeltaTime, const class UObject* ResourceData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "UpdateMcaTimes");

	Params::UIVelvetRoomDraw_UpdateMcaTimes Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.ResourceData = ResourceData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomDraw.UpdateTimes
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomDraw::UpdateTimes(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomDraw", "UpdateTimes");

	Params::UIVelvetRoomDraw_UpdateTimes Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.DifficultySelectionActor.ChangeInfoL
// (Final, Native, Public, BlueprintCallable)

void ADifficultySelectionActor::ChangeInfoL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "ChangeInfoL");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.DifficultySelectionActor.ChangeInfoR
// (Final, Native, Public, BlueprintCallable)

void ADifficultySelectionActor::ChangeInfoR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "ChangeInfoR");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.DifficultySelectionActor.DrawBG
// (Final, Native, Public, BlueprintCallable)

void ADifficultySelectionActor::DrawBG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "DrawBG");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.DifficultySelectionActor.DrawBlackFade
// (Final, Native, Public, BlueprintCallable)

void ADifficultySelectionActor::DrawBlackFade()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "DrawBlackFade");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.DifficultySelectionActor.DrawDescriptionText
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADifficultySelectionActor::DrawDescriptionText(const struct FVector2D& InPos, const struct FColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "DrawDescriptionText");

	Params::DifficultySelectionActor_DrawDescriptionText Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.DifficultySelectionActor.DrawDiffList
// (Final, Native, Public, BlueprintCallable)

void ADifficultySelectionActor::DrawDiffList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "DrawDiffList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.DifficultySelectionActor.DrawHelp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   AddX                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AddY                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADifficultySelectionActor::DrawHelp(float AddX, float AddY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "DrawHelp");

	Params::DifficultySelectionActor_DrawHelp Parms{};

	Parms.AddX = AddX;
	Parms.AddY = AddY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.DifficultySelectionActor.DrawInfoText
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADifficultySelectionActor::DrawInfoText(const struct FVector2D& InPos, const struct FColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "DrawInfoText");

	Params::DifficultySelectionActor_DrawInfoText Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.DifficultySelectionActor.GetCursorIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ADifficultySelectionActor::GetCursorIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "GetCursorIndex");

	Params::DifficultySelectionActor_GetCursorIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.DifficultySelectionActor.GetScreenSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ADifficultySelectionActor::GetScreenSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "GetScreenSize");

	Params::DifficultySelectionActor_GetScreenSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.DifficultySelectionActor.HasMsgInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADifficultySelectionActor::HasMsgInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "HasMsgInstance");

	Params::DifficultySelectionActor_HasMsgInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.DifficultySelectionActor.LoadCheck
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ADifficultySelectionActor::LoadCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "LoadCheck");

	Params::DifficultySelectionActor_LoadCheck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction xrd777.DifficultySelectionActor.ProcessCompleted__DelegateSignature
// (Public, Delegate)

void ADifficultySelectionActor::ProcessCompleted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DifficultySelectionActor", "ProcessCompleted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.Draft_EventManager.CloseMessage
// (Final, Native, Public)

void ADraft_EventManager::CloseMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Draft_EventManager", "CloseMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.Draft_EventManager.ExecuteMessage
// (Final, Native, Public)
// Parameters:
// class UBmdAsset*                        InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageNo                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InEventMessageID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADraft_EventManager::ExecuteMessage(class UBmdAsset* InAsset, int32 InMessageNo, int32 InEventMessageID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Draft_EventManager", "ExecuteMessage");

	Params::Draft_EventManager_ExecuteMessage Parms{};

	Parms.InAsset = InAsset;
	Parms.InMessageNo = InMessageNo;
	Parms.InEventMessageID = InEventMessageID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.Draft_EventManager.ExecuteMessageWithSelect
// (Final, Native, Public)
// Parameters:
// class UBmdAsset*                        InAsset                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InMessageNo                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InSelectNo                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InEventMessageID                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADraft_EventManager::ExecuteMessageWithSelect(class UBmdAsset* InAsset, int32 InMessageNo, int32 InSelectNo, int32 InEventMessageID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Draft_EventManager", "ExecuteMessageWithSelect");

	Params::Draft_EventManager_ExecuteMessageWithSelect Parms{};

	Parms.InAsset = InAsset;
	Parms.InMessageNo = InMessageNo;
	Parms.InSelectNo = InSelectNo;
	Parms.InEventMessageID = InEventMessageID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.Draft_EventManager.ExecuteMsgScript
// (Final, Native, Protected)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ADraft_EventManager::ExecuteMsgScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Draft_EventManager", "ExecuteMsgScript");

	Params::Draft_EventManager_ExecuteMsgScript Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.Draft_EventManager.ExecuteSelectScript
// (Final, Native, Protected)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ADraft_EventManager::ExecuteSelectScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Draft_EventManager", "ExecuteSelectScript");

	Params::Draft_EventManager_ExecuteSelectScript Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.Draft_EventManager.ForcedRemoveMessage
// (Final, Native, Public)

void ADraft_EventManager::ForcedRemoveMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Draft_EventManager", "ForcedRemoveMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.Draft_EventManager.ResumeEventSequencer
// (Final, Native, Public)

void ADraft_EventManager::ResumeEventSequencer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Draft_EventManager", "ResumeEventSequencer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.Draft_EventManager.SetLocalData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Data                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ADraft_EventManager::SetLocalData(int32 Index_0, int32 Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Draft_EventManager", "SetLocalData");

	Params::Draft_EventManager_SetLocalData Parms{};

	Parms.Index_0 = Index_0;
	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.Draft_EventManager.GetLocalData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ADraft_EventManager::GetLocalData(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Draft_EventManager", "GetLocalData");

	Params::Draft_EventManager_GetLocalData Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.EventSkipWidgetDelegate.CallDelegate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InSetEffect                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEventSkipWidgetDelegate::CallDelegate(bool InSetEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventSkipWidgetDelegate", "CallDelegate");

	Params::EventSkipWidgetDelegate_CallDelegate Parms{};

	Parms.InSetEffect = InSetEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.EvtManagerStateBacklog.OnBackLogFinishDelegte
// (Final, Native, Private)

void UEvtManagerStateBacklog::OnBackLogFinishDelegte()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EvtManagerStateBacklog", "OnBackLogFinishDelegte");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.EvtManagerStateNetAnswer.OnNetAnswerFinishDelegte
// (Final, Native, Private)

void UEvtManagerStateNetAnswer::OnNetAnswerFinishDelegte()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EvtManagerStateNetAnswer", "OnNetAnswerFinishDelegte");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FadePgBattleEventWipeActor.CreateForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AFadePgBattleEventWipeActor::CreateForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePgBattleEventWipeActor", "CreateForBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FadePgBattleEventWipeActor.DeleteForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AFadePgBattleEventWipeActor::DeleteForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePgBattleEventWipeActor", "DeleteForBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FadePgBattleEventWipeActor.DrawForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFadePgBattleEventWipeActor::DrawForBP(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePgBattleEventWipeActor", "DrawForBP");

	Params::FadePgBattleEventWipeActor_DrawForBP Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.FadePgBattleEventWipeActor.RequestFadeInForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AFadePgBattleEventWipeActor::RequestFadeInForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePgBattleEventWipeActor", "RequestFadeInForBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FadePgBattleEventWipeActor.RequestFadeOutForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AFadePgBattleEventWipeActor::RequestFadeOutForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePgBattleEventWipeActor", "RequestFadeOutForBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FadePlayer.FadeIn
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFadeProperties                  Props                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFadePlayer::FadeIn(int32 Type, const struct FFadeProperties& Props)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "FadeIn");

	Params::FadePlayer_FadeIn Parms{};

	Parms.Type = Type;
	Parms.Props = std::move(Props);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FadePlayer.FadeOut
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FFadeProperties                  Props                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UFadePlayer::FadeOut(int32 Type, const struct FFadeProperties& Props)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "FadeOut");

	Params::FadePlayer_FadeOut Parms{};

	Parms.Type = Type;
	Parms.Props = std::move(Props);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FadePlayer.GetDefaultProperties
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FFadeProperties            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FFadeProperties UFadePlayer::GetDefaultProperties(int32 Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "GetDefaultProperties");

	Params::FadePlayer_GetDefaultProperties Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FadePlayer.OnTick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFadePlayer::OnTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "OnTick");

	Params::FadePlayer_OnTick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FadePlayer.SetColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   R                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   G                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFadePlayer::SetColor(float R, float G, float B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "SetColor");

	Params::FadePlayer_SetColor Parms{};

	Parms.R = R;
	Parms.G = G;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FadePlayer.GetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UFadePlayer::GetColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "GetColor");

	Params::FadePlayer_GetColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FadePlayer.GetCurrentStateTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFadePlayer::GetCurrentStateTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "GetCurrentStateTime");

	Params::FadePlayer_GetCurrentStateTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FadePlayer.GetFadeDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFadePlayer::GetFadeDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "GetFadeDuration");

	Params::FadePlayer_GetFadeDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FadePlayer.GetFadeMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFadeMode                               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFadeMode UFadePlayer::GetFadeMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "GetFadeMode");

	Params::FadePlayer_GetFadeMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FadePlayer.GetFadingState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EFadingState                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFadingState UFadePlayer::GetFadingState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "GetFadingState");

	Params::FadePlayer_GetFadingState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FadePlayer.GetProgressRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    Inverse                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFadePlayer::GetProgressRate(bool Inverse) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "GetProgressRate");

	Params::FadePlayer_GetProgressRate Parms{};

	Parms.Inverse = Inverse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FadePlayer.GetRemainDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFadePlayer::GetRemainDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "GetRemainDuration");

	Params::FadePlayer_GetRemainDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FadePlayer.IsExistNextFade
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFadePlayer::IsExistNextFade() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "IsExistNextFade");

	Params::FadePlayer_IsExistNextFade Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FadePlayer.IsFading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFadePlayer::IsFading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "IsFading");

	Params::FadePlayer_IsFading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FadePlayer.IsFilled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFadePlayer::IsFilled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FadePlayer", "IsFilled");

	Params::FadePlayer_IsFilled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldAnimalHit.OnActorOverlapBegin
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFldAnimalHit::OnActorOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAnimalHit", "OnActorOverlapBegin");

	Params::FldAnimalHit_OnActorOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldAnimalHit.OnActorOverlapEnd
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldAnimalHit::OnActorOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAnimalHit", "OnActorOverlapEnd");

	Params::FldAnimalHit_OnActorOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldAnimObj.ChangeAnimationDEBUG
// (Final, Native, Public, BlueprintCallable)

void AFldAnimObj::ChangeAnimationDEBUG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAnimObj", "ChangeAnimationDEBUG");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldAnimObj.ChangeDisableActorAction
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHide                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldAnimObj::ChangeDisableActorAction(bool IsHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAnimObj", "ChangeDisableActorAction");

	Params::FldAnimObj_ChangeDisableActorAction Parms{};

	Parms.IsHide = IsHide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.FldAnimObj.DebugSetting
// (Final, Native, Public, BlueprintCallable)

void AFldAnimObj::DebugSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAnimObj", "DebugSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldAnimObj.GetAnimationNum
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AFldAnimObj::GetAnimationNum()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAnimObj", "GetAnimationNum");

	Params::FldAnimObj_GetAnimationNum Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldAnimObj.GetNowAnimeID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AFldAnimObj::GetNowAnimeID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAnimObj", "GetNowAnimeID");

	Params::FldAnimObj_GetNowAnimeID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldAnimObj.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMesh                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AnimeID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldAnimObj::Initialize(class USkeletalMeshComponent* SkeletalMesh, int32 AnimeID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAnimObj", "Initialize");

	Params::FldAnimObj_Initialize Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.AnimeID = AnimeID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldAnimObj.InitializeArray
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class USkeletalMeshComponent*>   SkeleTalMeshList                                       (Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// int32                                   AnimeID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldAnimObj::InitializeArray(const TArray<class USkeletalMeshComponent*>& SkeleTalMeshList, int32 AnimeID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAnimObj", "InitializeArray");

	Params::FldAnimObj_InitializeArray Parms{};

	Parms.SkeleTalMeshList = std::move(SkeleTalMeshList);
	Parms.AnimeID = AnimeID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldAnimObj.IsPlayingAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFldAnimObj::IsPlayingAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAnimObj", "IsPlayingAnimation");

	Params::FldAnimObj_IsPlayingAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldAnimObj.PlayAnimation
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   AnimeID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LoopFlag                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldAnimObj::PlayAnimation(int32 AnimeID, bool LoopFlag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldAnimObj", "PlayAnimation");

	Params::FldAnimObj_PlayAnimation Parms{};

	Parms.AnimeID = AnimeID;
	Parms.LoopFlag = LoopFlag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldCameraHitSpline.SetupCamera
// (Final, Native, Public, BlueprintCallable)

void AFldCameraHitSpline::SetupCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldCameraHitSpline", "SetupCamera");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldCharDataAsset.PlayerOutputLog
// (Final, Native, Public, BlueprintCallable)

void UFldCharDataAsset::PlayerOutputLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldCharDataAsset", "PlayerOutputLog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldCharSysBPFL.PlayAnimSequence
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Target                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimSequenceBase*                Anim                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Loop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAnimMontage* UFldCharSysBPFL::PlayAnimSequence(class USkeletalMeshComponent* Target, class UAnimSequenceBase* Anim, bool Loop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldCharSysBPFL", "PlayAnimSequence");

	Params::FldCharSysBPFL_PlayAnimSequence Parms{};

	Parms.Target = Target;
	Parms.Anim = Anim;
	Parms.Loop = Loop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldCrowdIdleBehaviorComp.UpdateProc
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldCrowdIdleBehaviorComp::UpdateProc(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldCrowdIdleBehaviorComp", "UpdateProc");

	Params::FldCrowdIdleBehaviorComp_UpdateProc Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldCrowdOpacityComp.UpdateProc
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldCrowdOpacityComp::UpdateProc(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldCrowdOpacityComp", "UpdateProc");

	Params::FldCrowdOpacityComp_UpdateProc Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldCrowdWalkOpacityComp.SetPointLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          StartPoint                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          EndPoint                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldCrowdWalkOpacityComp::SetPointLocation(const struct FVector& StartPoint, const struct FVector& EndPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldCrowdWalkOpacityComp", "SetPointLocation");

	Params::FldCrowdWalkOpacityComp_SetPointLocation Parms{};

	Parms.StartPoint = std::move(StartPoint);
	Parms.EndPoint = std::move(EndPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDbgMaker.ForceWaitPose
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldDbgMaker::ForceWaitPose(const bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDbgMaker", "ForceWaitPose");

	Params::FldDbgMaker_ForceWaitPose Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDbgMaker.Load
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFldDbgMaker::Load()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDbgMaker", "Load");

	Params::FldDbgMaker_Load Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDbgMaker.GetPartnerActors
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class APawn*>              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class APawn*> AFldDbgMaker::GetPartnerActors() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDbgMaker", "GetPartnerActors");

	Params::FldDbgMaker_GetPartnerActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDbgMaker.GetPlayerActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class APawn*                      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class APawn* AFldDbgMaker::GetPlayerActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDbgMaker", "GetPlayerActor");

	Params::FldDbgMaker_GetPlayerActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonTable.Import
// (Final, Native, Public)

void UFldDungeonTable::Import()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonTable", "Import");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDoorObjCore.CallStateEndDelicate
// (Final, Native, Public)

void AFldDoorObjCore::CallStateEndDelicate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDoorObjCore", "CallStateEndDelicate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDoorObjCore.IsPlayingOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFldDoorObjCore::IsPlayingOpen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDoorObjCore", "IsPlayingOpen");

	Params::FldDoorObjCore_IsPlayingOpen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDoorObjCore.PlayDoorOpen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFldDoorOpenType                        OpenType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldDoorObjCore::PlayDoorOpen(EFldDoorOpenType OpenType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDoorObjCore", "PlayDoorOpen");

	Params::FldDoorObjCore_PlayDoorOpen Parms{};

	Parms.OpenType = OpenType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDoorObjCore.PlayDoorOpenWithFade
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EFldDoorOpenType                        OpenType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FadeType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FadeFrame                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FadePattern                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldDoorObjCore::PlayDoorOpenWithFade(EFldDoorOpenType OpenType, int32 FadeType, int32 FadeFrame, int32 FadePattern)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDoorObjCore", "PlayDoorOpenWithFade");

	Params::FldDoorObjCore_PlayDoorOpenWithFade Parms{};

	Parms.OpenType = OpenType;
	Parms.FadeType = FadeType;
	Parms.FadeFrame = FadeFrame;
	Parms.FadePattern = FadePattern;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleEncount.CaptureWait
// (Final, Native, Public)

void AFldDungeonBattleEncount::CaptureWait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleEncount", "CaptureWait");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleEncount.End
// (Final, Native, Public)

void AFldDungeonBattleEncount::End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleEncount", "End");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleEncount.ExcuteWipe
// (Final, Native, Public)

void AFldDungeonBattleEncount::ExcuteWipe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleEncount", "ExcuteWipe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleEncount.Idle
// (Final, Native, Public)

void AFldDungeonBattleEncount::Idle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleEncount", "Idle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleEncount.WaitEnd
// (Final, Native, Public)

void AFldDungeonBattleEncount::WaitEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleEncount", "WaitEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleEncount.WaitFadeOut
// (Final, Native, Public)

void AFldDungeonBattleEncount::WaitFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleEncount", "WaitFadeOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleEncount.WaitVisible
// (Final, Native, Public)

void AFldDungeonBattleEncount::WaitVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleEncount", "WaitVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleResult.End
// (Final, Native, Public)

void AFldDungeonBattleResult::End()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleResult", "End");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleResult.Init
// (Final, Native, Public)

void AFldDungeonBattleResult::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleResult", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleResult.Load
// (Final, Native, Public)

void AFldDungeonBattleResult::Load()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleResult", "Load");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleResult.Run
// (Final, Native, Public)

void AFldDungeonBattleResult::Run()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleResult", "Run");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleResult.StartScript
// (Final, Native, Public)

void AFldDungeonBattleResult::StartScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleResult", "StartScript");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBattleResult.Wait
// (Final, Native, Public)

void AFldDungeonBattleResult::Wait()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBattleResult", "Wait");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonBrokenObjController.HitEvent
// (Final, Native, Public)
// Parameters:
// EDungeonObjHitEvent                     EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFldDungeonObjectActor*           PObject                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldDungeonBrokenObjController::HitEvent(EDungeonObjHitEvent EventType, int32 ID, class AFldDungeonObjectActor* PObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonBrokenObjController", "HitEvent");

	Params::FldDungeonBrokenObjController_HitEvent Parms{};

	Parms.EventType = EventType;
	Parms.ID = ID;
	Parms.PObject = PObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameBase.NotifyLevelLoadedDesignMap
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGameBase::NotifyLevelLoadedDesignMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameBase", "NotifyLevelLoadedDesignMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameBase.NotifyLevelLoadedEnvironment
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGameBase::NotifyLevelLoadedEnvironment()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameBase", "NotifyLevelLoadedEnvironment");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameBase.NotifyLevelLoadedFixedFloor
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGameBase::NotifyLevelLoadedFixedFloor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameBase", "NotifyLevelLoadedFixedFloor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameBase.NotifyLevelLoadedFloor
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGameBase::NotifyLevelLoadedFloor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameBase", "NotifyLevelLoadedFloor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameBase.NotifyLevelLoadedFloorBase
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGameBase::NotifyLevelLoadedFloorBase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameBase", "NotifyLevelLoadedFloorBase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameBase.NotifyLevelLoadedNavMesh
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGameBase::NotifyLevelLoadedNavMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameBase", "NotifyLevelLoadedNavMesh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameBase.NotifyLevelUnLoadedEnv
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGameBase::NotifyLevelUnLoadedEnv()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameBase", "NotifyLevelUnLoadedEnv");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameBase.NotifyLevelUnLoadedMap
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGameBase::NotifyLevelUnLoadedMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameBase", "NotifyLevelUnLoadedMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameBase.NotifyLevelUnLoadedNavMesh
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGameBase::NotifyLevelUnLoadedNavMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameBase", "NotifyLevelUnLoadedNavMesh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.ADVANCE_LOAD
// (Final, Native, Public)

void AFldDungeonGameInit::ADVANCE_LOAD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "ADVANCE_LOAD");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.ADVANCE_PROCESS
// (Final, Native, Public)

void AFldDungeonGameInit::ADVANCE_PROCESS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "ADVANCE_PROCESS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.ADVANCE_PROCESS_WAIT
// (Final, Native, Public)

void AFldDungeonGameInit::ADVANCE_PROCESS_WAIT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "ADVANCE_PROCESS_WAIT");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.ATTACH_OBJ_WAIT
// (Final, Native, Public)

void AFldDungeonGameInit::ATTACH_OBJ_WAIT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "ATTACH_OBJ_WAIT");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.CREATE_END
// (Final, Native, Public)

void AFldDungeonGameInit::CREATE_END()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "CREATE_END");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.CREATE_LAYOUT
// (Final, Native, Public)

void AFldDungeonGameInit::CREATE_LAYOUT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "CREATE_LAYOUT");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.DungeonInit
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGameInit::DungeonInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "DungeonInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.FloorInit
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGameInit::FloorInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "FloorInit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.INIT_DESIGIN_MAP
// (Final, Native, Public)

void AFldDungeonGameInit::INIT_DESIGIN_MAP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "INIT_DESIGIN_MAP");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.INIT_END
// (Final, Native, Public)

void AFldDungeonGameInit::INIT_END()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "INIT_END");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.INIT_FIXED_FLOOR
// (Final, Native, Public)

void AFldDungeonGameInit::INIT_FIXED_FLOOR()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "INIT_FIXED_FLOOR");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.INIT_FLOOR_LEVEL
// (Final, Native, Public)

void AFldDungeonGameInit::INIT_FLOOR_LEVEL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "INIT_FLOOR_LEVEL");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.LOAD_START
// (Final, Native, Public)

void AFldDungeonGameInit::LOAD_START()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "LOAD_START");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.LOAD_WAIT_LEVEL
// (Final, Native, Public)

void AFldDungeonGameInit::LOAD_WAIT_LEVEL()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "LOAD_WAIT_LEVEL");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGameInit.NAVMESH_LOAD_WAIT
// (Final, Native, Public)

void AFldDungeonGameInit::NAVMESH_LOAD_WAIT()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGameInit", "NAVMESH_LOAD_WAIT");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGame.BattleSync
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGame::BattleSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGame", "BattleSync");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGame.ForceEncount
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonGame::ForceEncount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGame", "ForceEncount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonGame.IsBattle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFldDungeonGame::IsBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonGame", "IsBattle");

	Params::FldDungeonGame_IsBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonControlActor.CheckReady
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFldDungeonControlActor::CheckReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldDungeonControlActor", "CheckReady");

	Params::FldDungeonControlActor_CheckReady Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonControlActor.Create
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AFldDungeonControlActor*          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFldDungeonControlActor* AFldDungeonControlActor::Create()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldDungeonControlActor", "Create");

	Params::FldDungeonControlActor_Create Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonControlActor.DebugSetNextFieldFloor
// (Final, Native, Static, Public, BlueprintCallable)

void AFldDungeonControlActor::DebugSetNextFieldFloor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldDungeonControlActor", "DebugSetNextFieldFloor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonControlActor.DebugSetPrevFieldFloor
// (Final, Native, Static, Public, BlueprintCallable)

void AFldDungeonControlActor::DebugSetPrevFieldFloor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldDungeonControlActor", "DebugSetPrevFieldFloor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonControlActor.Delete
// (Final, Native, Static, Public, BlueprintCallable)

void AFldDungeonControlActor::Delete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldDungeonControlActor", "Delete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonControlActor.IsExist
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFldDungeonControlActor::IsExist()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldDungeonControlActor", "IsExist");

	Params::FldDungeonControlActor_IsExist Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonControlActor.SetField
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Major                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldDungeonControlActor::SetField(int32 Major, int32 Minor, int32 Idx)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldDungeonControlActor", "SetField");

	Params::FldDungeonControlActor_SetField Parms{};

	Parms.Major = Major;
	Parms.Minor = Minor;
	Parms.Idx = Idx;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonControlActor.SetNextFieldFloor
// (Final, Native, Static, Public, BlueprintCallable)

void AFldDungeonControlActor::SetNextFieldFloor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldDungeonControlActor", "SetNextFieldFloor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEffectActor.BPInit
// (Event, Public, BlueprintEvent)

void AFldDungeonEffectActor::BPInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectActor", "BPInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FldDungeonEffectActor.BPUpdate
// (Event, Public, BlueprintEvent)

void AFldDungeonEffectActor::BPUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectActor", "BPUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FldDungeonEffectActor.GetFadeInTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFldDungeonEffectActor::GetFadeInTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectActor", "GetFadeInTime");

	Params::FldDungeonEffectActor_GetFadeInTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonEffectActor.GetFadeOutTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFldDungeonEffectActor::GetFadeOutTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectActor", "GetFadeOutTime");

	Params::FldDungeonEffectActor_GetFadeOutTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonEffectActor.GetFadeValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFldDungeonEffectActor::GetFadeValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectActor", "GetFadeValue");

	Params::FldDungeonEffectActor_GetFadeValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonEffectActor.GetPlayTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AFldDungeonEffectActor::GetPlayTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectActor", "GetPlayTime");

	Params::FldDungeonEffectActor_GetPlayTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonEffectActor.IsPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AFldDungeonEffectActor::IsPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectActor", "IsPlay");

	Params::FldDungeonEffectActor_IsPlay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonEffectActor.RequestFadeOut
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonEffectActor::RequestFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectActor", "RequestFadeOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEffectActor.SetPlayEnd
// (Final, Native, Public, BlueprintCallable)

void AFldDungeonEffectActor::SetPlayEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectActor", "SetPlayEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEffectTartarosSearch.GetIntensity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFldDungeonEffectTartarosSearch::GetIntensity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectTartarosSearch", "GetIntensity");

	Params::FldDungeonEffectTartarosSearch_GetIntensity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonEffectTartarosSearch.GetLifeSpan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFldDungeonEffectTartarosSearch::GetLifeSpan()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectTartarosSearch", "GetLifeSpan");

	Params::FldDungeonEffectTartarosSearch_GetLifeSpan Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonEffectTartarosSearch.GetMaxBrightness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFldDungeonEffectTartarosSearch::GetMaxBrightness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectTartarosSearch", "GetMaxBrightness");

	Params::FldDungeonEffectTartarosSearch_GetMaxBrightness Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonEffectTartarosSearch.GetRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFldDungeonEffectTartarosSearch::GetRadius()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectTartarosSearch", "GetRadius");

	Params::FldDungeonEffectTartarosSearch_GetRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonEffectCameraAttachActor.OnComplete
// (Final, Native, Private)
// Parameters:
// class UNiagaraComponent*                PSystem                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldDungeonEffectCameraAttachActor::OnComplete(class UNiagaraComponent* PSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEffectCameraAttachActor", "OnComplete");

	Params::FldDungeonEffectCameraAttachActor_OnComplete Parms{};

	Parms.PSystem = PSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEnemyController.AutoFloorAdvanceProcess
// (Final, Native, Public)

void UFldDungeonEnemyController::AutoFloorAdvanceProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnemyController", "AutoFloorAdvanceProcess");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEnemyController.AutoFloorCreateActor
// (Final, Native, Public)

void UFldDungeonEnemyController::AutoFloorCreateActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnemyController", "AutoFloorCreateActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEnemyController.AutoFloorLoad
// (Final, Native, Public)

void UFldDungeonEnemyController::AutoFloorLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnemyController", "AutoFloorLoad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEnemyController.DesignFloorAdvanceProcess
// (Final, Native, Public)

void UFldDungeonEnemyController::DesignFloorAdvanceProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnemyController", "DesignFloorAdvanceProcess");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEnemyController.DesignFloorCreateActor
// (Final, Native, Public)

void UFldDungeonEnemyController::DesignFloorCreateActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnemyController", "DesignFloorCreateActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEnemyController.DesignFloorLoad
// (Final, Native, Public)

void UFldDungeonEnemyController::DesignFloorLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnemyController", "DesignFloorLoad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEnemyController.FixedFloorAdvanceProcess
// (Final, Native, Public)

void UFldDungeonEnemyController::FixedFloorAdvanceProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnemyController", "FixedFloorAdvanceProcess");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEnemyController.FixedFloorCreateActor
// (Final, Native, Public)

void UFldDungeonEnemyController::FixedFloorCreateActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnemyController", "FixedFloorCreateActor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEnemyController.FixedFloorLoad
// (Final, Native, Public)

void UFldDungeonEnemyController::FixedFloorLoad()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnemyController", "FixedFloorLoad");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEnvController.FadeOutDungeonFilter
// (Final, Native, Private)
// Parameters:
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldDungeonEnvController::FadeOutDungeonFilter(float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnvController", "FadeOutDungeonFilter");

	Params::FldDungeonEnvController_FadeOutDungeonFilter Parms{};

	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonEnvActor.BPGetDefault
// (Event, Public, BlueprintEvent)

void AFldDungeonEnvActor::BPGetDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnvActor", "BPGetDefault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FldDungeonEnvActor.BPPause
// (Event, Public, BlueprintEvent)

void AFldDungeonEnvActor::BPPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnvActor", "BPPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FldDungeonEnvActor.BPReflect
// (Event, Public, BlueprintEvent)

void AFldDungeonEnvActor::BPReflect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnvActor", "BPReflect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FldDungeonEnvActor.BPResume
// (Event, Public, BlueprintEvent)

void AFldDungeonEnvActor::BPResume()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnvActor", "BPResume");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FldDungeonEnvActor.BPSetDefault
// (Event, Public, BlueprintEvent)

void AFldDungeonEnvActor::BPSetDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnvActor", "BPSetDefault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FldDungeonEnvActor.BPUpdate
// (Event, Public, BlueprintEvent)

void AFldDungeonEnvActor::BPUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonEnvActor", "BPUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FldDungeonFloorFlagsDataAsset.Input
// (Final, Native, Public)

void UFldDungeonFloorFlagsDataAsset::Input()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonFloorFlagsDataAsset", "Input");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonFloorFlagsDataAsset.SearchFlag
// (Final, Native, Public)

void UFldDungeonFloorFlagsDataAsset::SearchFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonFloorFlagsDataAsset", "SearchFlag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonFloorFlagsDataAsset.SearchFloor
// (Final, Native, Public)

void UFldDungeonFloorFlagsDataAsset::SearchFloor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonFloorFlagsDataAsset", "SearchFloor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonFloorFlagsDataAsset.SearchTag
// (Final, Native, Public)

void UFldDungeonFloorFlagsDataAsset::SearchTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonFloorFlagsDataAsset", "SearchTag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICombineCalcFunction.GetBookDrawOut
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Power                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Magic                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Endurance                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Quick                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Luck                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CommuLevel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxSkillLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUICombineCalcFunction::GetBookDrawOut(int32 Power, int32 Magic, int32 Endurance, int32 Quick, int32 Luck, int32 CommuLevel, int32 MaxSkillLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICombineCalcFunction", "GetBookDrawOut");

	Params::UICombineCalcFunction_GetBookDrawOut Parms{};

	Parms.Power = Power;
	Parms.Magic = Magic;
	Parms.Endurance = Endurance;
	Parms.Quick = Quick;
	Parms.Luck = Luck;
	Parms.CommuLevel = CommuLevel;
	Parms.MaxSkillLevel = MaxSkillLevel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UICombineCalcFunction.GetFoolAccidentLevel
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   PlayerLevel                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUICombineCalcFunction::GetFoolAccidentLevel(int32 PlayerLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICombineCalcFunction", "GetFoolAccidentLevel");

	Params::UICombineCalcFunction_GetFoolAccidentLevel Parms{};

	Parms.PlayerLevel = PlayerLevel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UICombineCalcFunction.GetNormalSpreadLevel
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   LevelA                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LevelB                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUICombineCalcFunction::GetNormalSpreadLevel(int32 LevelA, int32 LevelB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICombineCalcFunction", "GetNormalSpreadLevel");

	Params::UICombineCalcFunction_GetNormalSpreadLevel Parms{};

	Parms.LevelA = LevelA;
	Parms.LevelB = LevelB;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UICombineCalcFunction.GetSuccessionIncense
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   IncenseParam                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SuccessionParam                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUICombineCalcFunction::GetSuccessionIncense(int32 IncenseParam, int32 SuccessionParam, int32 Num)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICombineCalcFunction", "GetSuccessionIncense");

	Params::UICombineCalcFunction_GetSuccessionIncense Parms{};

	Parms.IncenseParam = IncenseParam;
	Parms.SuccessionParam = SuccessionParam;
	Parms.Num = Num;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonObjectActor.HitActionNotice
// (Final, Native, Public)
// Parameters:
// class APawn*                            Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldDungeonObjectActor::HitActionNotice(class APawn* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonObjectActor", "HitActionNotice");

	Params::FldDungeonObjectActor_HitActionNotice Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonObjectActor.HitInNotice
// (Final, Native, Public)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldDungeonObjectActor::HitInNotice(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonObjectActor", "HitInNotice");

	Params::FldDungeonObjectActor_HitInNotice Parms{};

	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonObjectActor.HitOutNotice
// (Final, Native, Public)
// Parameters:
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldDungeonObjectActor::HitOutNotice(class AActor* OtherActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonObjectActor", "HitOutNotice");

	Params::FldDungeonObjectActor_HitOutNotice Parms{};

	Parms.OtherActor = OtherActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TestPauseSoundClass.testPauseSoundPasue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestPauseSoundClass::TestPauseSoundPasue(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TestPauseSoundClass", "testPauseSoundPasue");

	Params::TestPauseSoundClass_TestPauseSoundPasue Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonParamDataAsset.AddResetData
// (Final, Native, Public)

void UFldDungeonParamDataAsset::AddResetData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonParamDataAsset", "AddResetData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonParamDataAsset.DelResetData
// (Final, Native, Public)

void UFldDungeonParamDataAsset::DelResetData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonParamDataAsset", "DelResetData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonParamDataAsset.GenEnemyModelIdOfAstrea
// (Final, Native, Public)

void UFldDungeonParamDataAsset::GenEnemyModelIdOfAstrea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonParamDataAsset", "GenEnemyModelIdOfAstrea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonParamDataAsset.GenEnemyModelIdOfTartarus
// (Final, Native, Public)

void UFldDungeonParamDataAsset::GenEnemyModelIdOfTartarus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonParamDataAsset", "GenEnemyModelIdOfTartarus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonParamDataAsset.ImportDataPathOfAstrea
// (Final, Native, Public)

void UFldDungeonParamDataAsset::ImportDataPathOfAstrea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonParamDataAsset", "ImportDataPathOfAstrea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonParamDataAsset.ImportDataPathOfTartarus
// (Final, Native, Public)

void UFldDungeonParamDataAsset::ImportDataPathOfTartarus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonParamDataAsset", "ImportDataPathOfTartarus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonParamDataAsset.ImportLevelPathOfAstrea
// (Final, Native, Public)

void UFldDungeonParamDataAsset::ImportLevelPathOfAstrea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonParamDataAsset", "ImportLevelPathOfAstrea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonParamDataAsset.ImportLevelPathOfTartarus
// (Final, Native, Public)

void UFldDungeonParamDataAsset::ImportLevelPathOfTartarus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonParamDataAsset", "ImportLevelPathOfTartarus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonPartController.AutoCreatePart
// (Final, Native, Public)

void UFldDungeonPartController::AutoCreatePart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonPartController", "AutoCreatePart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonPartController.AutoLoadPart
// (Final, Native, Public)

void UFldDungeonPartController::AutoLoadPart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonPartController", "AutoLoadPart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonPartController.InitDesignMap
// (Final, Native, Public)

void UFldDungeonPartController::InitDesignMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonPartController", "InitDesignMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonPartController.InitFixedMap
// (Final, Native, Public)

void UFldDungeonPartController::InitFixedMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonPartController", "InitFixedMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldDungeonSoundBaseActor.BPPlay
// (Event, Public, BlueprintEvent)

void AFldDungeonSoundBaseActor::BPPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonSoundBaseActor", "BPPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FldDungeonSoundBaseActor.BPStop
// (Event, Public, BlueprintEvent)

void AFldDungeonSoundBaseActor::BPStop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldDungeonSoundBaseActor", "BPStop");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.FldDungeonStartParam.CheckStartParam
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFldDungeonStartParam::CheckStartParam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldDungeonStartParam", "CheckStartParam");

	Params::FldDungeonStartParam_CheckStartParam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldDungeonStartParam.SetStartParam
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Major                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Idx                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bScript                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldDungeonStartParam::SetStartParam(int32 Major, int32 Minor, int32 Idx, bool bScript)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldDungeonStartParam", "SetStartParam");

	Params::FldDungeonStartParam_SetStartParam Parms{};

	Parms.Major = Major;
	Parms.Minor = Minor;
	Parms.Idx = Idx;
	Parms.bScript = bScript;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MiniMapAssetLoader.GetAssetLoader
// (Final, Native, Public)
// Parameters:
// class UAssetLoader*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAssetLoader* UMiniMapAssetLoader::GetAssetLoader()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapAssetLoader", "GetAssetLoader");

	Params::MiniMapAssetLoader_GetAssetLoader Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MiniMapAssetLoader.GetFldMiniMapIconTable
// (Final, Native, Public)
// Parameters:
// class UMiniMapIconListTable*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMiniMapIconListTable* UMiniMapAssetLoader::GetFldMiniMapIconTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapAssetLoader", "GetFldMiniMapIconTable");

	Params::MiniMapAssetLoader_GetFldMiniMapIconTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MiniMapAssetLoader.GetFldType
// (Final, Native, Public)
// Parameters:
// EFldType                                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EFldType UMiniMapAssetLoader::GetFldType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapAssetLoader", "GetFldType");

	Params::MiniMapAssetLoader_GetFldType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MiniMapAssetLoader.GetMapParts
// (Final, Native, Public)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UMiniMapAssetLoader::GetMapParts(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapAssetLoader", "GetMapParts");

	Params::MiniMapAssetLoader_GetMapParts Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MiniMapAssetLoader.GetMapTex
// (Final, Native, Public)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UMiniMapAssetLoader::GetMapTex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapAssetLoader", "GetMapTex");

	Params::MiniMapAssetLoader_GetMapTex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MiniMapAssetLoader.GetMapTexture
// (Final, Native, Public)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UMiniMapAssetLoader::GetMapTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapAssetLoader", "GetMapTexture");

	Params::MiniMapAssetLoader_GetMapTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MiniMapAssetLoader.GetPartList
// (Final, Native, Public)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<uint8> UMiniMapAssetLoader::GetPartList(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapAssetLoader", "GetPartList");

	Params::MiniMapAssetLoader_GetPartList Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MiniMapAssetLoader.GetPartMaskSpr
// (Final, Native, Public)
// Parameters:
// class USprAsset*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USprAsset* UMiniMapAssetLoader::GetPartMaskSpr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapAssetLoader", "GetPartMaskSpr");

	Params::MiniMapAssetLoader_GetPartMaskSpr Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MiniMapAssetLoader.GetTartarusMapPartIndexList
// (Final, Native, Public)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<int32, int32>                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<int32, int32> UMiniMapAssetLoader::GetTartarusMapPartIndexList(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapAssetLoader", "GetTartarusMapPartIndexList");

	Params::MiniMapAssetLoader_GetTartarusMapPartIndexList Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MiniMapAssetLoader.GetWallTex
// (Final, Native, Public)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UMiniMapAssetLoader::GetWallTex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MiniMapAssetLoader", "GetWallTex");

	Params::MiniMapAssetLoader_GetWallTex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldEnemyManager.Add
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldEnemyManager::Add(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldEnemyManager", "Add");

	Params::FldEnemyManager_Add Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldEnemyManager.Cleanup
// (Final, Native, Public, BlueprintCallable)

void AFldEnemyManager::Cleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldEnemyManager", "Cleanup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldEnemyManager.ForceEncount
// (Final, Native, Public, BlueprintCallable)

void AFldEnemyManager::ForceEncount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldEnemyManager", "ForceEncount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldEnemyManager.SetEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Group                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldEnemyManager::SetEnable(const bool Enable, const int32 Group)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldEnemyManager", "SetEnable");

	Params::FldEnemyManager_SetEnable Parms{};

	Parms.Enable = Enable;
	Parms.Group = Group;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldEnemyManager.Setup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldEnemyManager::Setup(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldEnemyManager", "Setup");

	Params::FldEnemyManager_Setup Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldEnemyNormalComp.OnMontageEnded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldEnemyNormalComp::OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldEnemyNormalComp", "OnMontageEnded");

	Params::FldEnemyNormalComp_OnMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.ModelCaptureUpdater.OnSetTargetActor
// (Native, Protected)
// Parameters:
// class AActor*                           AActor                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AModelCaptureUpdater::OnSetTargetActor(class AActor* AActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModelCaptureUpdater", "OnSetTargetActor");

	Params::ModelCaptureUpdater_OnSetTargetActor Parms{};

	Parms.AActor = AActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PauseUserWidget.GetTickableWhenPaused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPauseUserWidget::GetTickableWhenPaused()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseUserWidget", "GetTickableWhenPaused");

	Params::PauseUserWidget_GetTickableWhenPaused Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.PauseUserWidget.SetTickableWhenPaused
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bTickableWhenPaused                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPauseUserWidget::SetTickableWhenPaused(bool bTickableWhenPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PauseUserWidget", "SetTickableWhenPaused");

	Params::PauseUserWidget_SetTickableWhenPaused Parms{};

	Parms.bTickableWhenPaused = bTickableWhenPaused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldHitSoundCore.OnActorOverlapBegin
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFldHitSoundCore::OnActorOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitSoundCore", "OnActorOverlapBegin");

	Params::FldHitSoundCore_OnActorOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldHitSoundCore.OnActorOverlapEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldHitSoundCore::OnActorOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitSoundCore", "OnActorOverlapEnd");

	Params::FldHitSoundCore_OnActorOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PlatformFunctionLibrary.GetFPS
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPlatformFunctionLibrary::GetFPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PlatformFunctionLibrary", "GetFPS");

	Params::PlatformFunctionLibrary_GetFPS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.PlatformFunctionLibrary.Platform
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EPlatformName                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlatformName UPlatformFunctionLibrary::Platform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PlatformFunctionLibrary", "Platform");

	Params::PlatformFunctionLibrary_Platform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldHitSoundSnapshotCore.OnActorOverlapBegin
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFldHitSoundSnapshotCore::OnActorOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitSoundSnapshotCore", "OnActorOverlapBegin");

	Params::FldHitSoundSnapshotCore_OnActorOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldHitSoundSnapshotCore.OnActorOverlapEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldHitSoundSnapshotCore::OnActorOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldHitSoundSnapshotCore", "OnActorOverlapEnd");

	Params::FldHitSoundSnapshotCore_OnActorOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldLevelLoaderMonitorActor.OnLoadLevelStreaming
// (Final, Native, Public)

void AFldLevelLoaderMonitorActor::OnLoadLevelStreaming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldLevelLoaderMonitorActor", "OnLoadLevelStreaming");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfiguration.IsWindowDraw
// (Final, Native, Protected)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIConfiguration::IsWindowDraw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfiguration", "IsWindowDraw");

	Params::UIConfiguration_IsWindowDraw Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIConfiguration.OnBGMInAnimFinished
// (Final, Native, Public)

void AUIConfiguration::OnBGMInAnimFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfiguration", "OnBGMInAnimFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfiguration.OnBgmSetAnimFinished
// (Final, Native, Public)

void AUIConfiguration::OnBgmSetAnimFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfiguration", "OnBgmSetAnimFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfiguration.OnConfigCancel
// (Final, Native, Protected)
// Parameters:
// bool                                    InIsCancel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfiguration::OnConfigCancel(bool InIsCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfiguration", "OnConfigCancel");

	Params::UIConfiguration_OnConfigCancel Parms{};

	Parms.InIsCancel = InIsCancel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfiguration.OnConfigInAnimFinished
// (Final, Native, Public)

void AUIConfiguration::OnConfigInAnimFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfiguration", "OnConfigInAnimFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfiguration.OnDifficultCancel
// (Final, Native, Protected)
// Parameters:
// bool                                    InIsCancel                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIConfiguration::OnDifficultCancel(bool InIsCancel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfiguration", "OnDifficultCancel");

	Params::UIConfiguration_OnDifficultCancel Parms{};

	Parms.InIsCancel = InIsCancel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIConfiguration.OnDrawClosed
// (Final, Native, Public)

void AUIConfiguration::OnDrawClosed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIConfiguration", "OnDrawClosed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldLinkAnimHitBase.OnActorOverlapBegin
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFldLinkAnimHitBase::OnActorOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldLinkAnimHitBase", "OnActorOverlapBegin");

	Params::FldLinkAnimHitBase_OnActorOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldLinkAnimHitBase.OnActorOverlapEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldLinkAnimHitBase::OnActorOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldLinkAnimHitBase", "OnActorOverlapEnd");

	Params::FldLinkAnimHitBase_OnActorOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldLinkAnimHitComp_BOX.OnActorOverlapBegin
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFldLinkAnimHitComp_BOX::OnActorOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldLinkAnimHitComp_BOX", "OnActorOverlapBegin");

	Params::FldLinkAnimHitComp_BOX_OnActorOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldLinkAnimHitComp_BOX.OnActorOverlapEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldLinkAnimHitComp_BOX::OnActorOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldLinkAnimHitComp_BOX", "OnActorOverlapEnd");

	Params::FldLinkAnimHitComp_BOX_OnActorOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldLinkAnimHitComp_CIRCLE.OnActorOverlapBegin
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UFldLinkAnimHitComp_CIRCLE::OnActorOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldLinkAnimHitComp_CIRCLE", "OnActorOverlapBegin");

	Params::FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldLinkAnimHitComp_CIRCLE.OnActorOverlapEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldLinkAnimHitComp_CIRCLE::OnActorOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldLinkAnimHitComp_CIRCLE", "OnActorOverlapEnd");

	Params::FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldManagerSubsystem.GetFieldCameraShakeActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AFldMiscCameraShake*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AFldMiscCameraShake* UFldManagerSubsystem::GetFieldCameraShakeActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldManagerSubsystem", "GetFieldCameraShakeActor");

	Params::FldManagerSubsystem_GetFieldCameraShakeActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldManagerSubsystem.SetFieldCameraShakeActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AFldMiscCameraShake*              InActor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldManagerSubsystem::SetFieldCameraShakeActor(class AFldMiscCameraShake* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("FldManagerSubsystem", "SetFieldCameraShakeActor");

	Params::FldManagerSubsystem_SetFieldCameraShakeActor Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldManagerSubsystem.ChangeFieldSubLevelDebug
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FieldMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FieldMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalDay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECldTimeZone                            TimeZone                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFldLoadPattern                         Pattern                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UFldManagerSubsystem::ChangeFieldSubLevelDebug(int32 FieldMajorID, int32 FieldMinorID, int32 TotalDay, ECldTimeZone TimeZone, EFldLoadPattern Pattern, const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldManagerSubsystem", "ChangeFieldSubLevelDebug");

	Params::FldManagerSubsystem_ChangeFieldSubLevelDebug Parms{};

	Parms.FieldMajorID = FieldMajorID;
	Parms.FieldMinorID = FieldMinorID;
	Parms.TotalDay = TotalDay;
	Parms.TimeZone = TimeZone;
	Parms.Pattern = Pattern;
	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldManagerSubsystem.CheckKeyFree
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFldManagerSubsystem::CheckKeyFree()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldManagerSubsystem", "CheckKeyFree");

	Params::FldManagerSubsystem_CheckKeyFree Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldManagerSubsystem.IsEnablePartyChange
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFldManagerSubsystem::IsEnablePartyChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldManagerSubsystem", "IsEnablePartyChange");

	Params::FldManagerSubsystem_IsEnablePartyChange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldManagerSubsystem.IsKeyFreeEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFldManagerSubsystem::IsKeyFreeEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldManagerSubsystem", "IsKeyFreeEvent");

	Params::FldManagerSubsystem_IsKeyFreeEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldManagerSubsystem.IsLoadingField
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFldManagerSubsystem::IsLoadingField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldManagerSubsystem", "IsLoadingField");

	Params::FldManagerSubsystem_IsLoadingField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldManagerSubsystem.IsProcField
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFldManagerSubsystem::IsProcField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldManagerSubsystem", "IsProcField");

	Params::FldManagerSubsystem_IsProcField Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldManagerSubsystem.IsProcFldEvent
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFldManagerSubsystem::IsProcFldEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldManagerSubsystem", "IsProcFldEvent");

	Params::FldManagerSubsystem_IsProcFldEvent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldManagerSubsystem.LoadFieldSubLevelDebug
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FieldMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FieldMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalDay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECldTimeZone                            TimeZone                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFldLoadPattern                         Pattern                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UFldManagerSubsystem::LoadFieldSubLevelDebug(int32 FieldMajorID, int32 FieldMinorID, int32 TotalDay, ECldTimeZone TimeZone, EFldLoadPattern Pattern, const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldManagerSubsystem", "LoadFieldSubLevelDebug");

	Params::FldManagerSubsystem_LoadFieldSubLevelDebug Parms{};

	Parms.FieldMajorID = FieldMajorID;
	Parms.FieldMinorID = FieldMinorID;
	Parms.TotalDay = TotalDay;
	Parms.TimeZone = TimeZone;
	Parms.Pattern = Pattern;
	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldManagerSubsystem.ProcLevelBluePrint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class ACharacterBaseCore>   DefaultPlayerClass                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ACharacterBaseCore>   DungeonPlayerClass                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ACharacterBaseCore>   DungeonPlayerClass_Astrea                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AFldCameraBase>       DefaultCameraClass                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AFldCameraBase>       DungeonCameraClass                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AFldCamera>           TransCameraClass                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ACharacterBaseCore>   FollowerClass                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ACharacterBaseCore>   FollowerKoromaruClass                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// TSubclassOf<class AFldCameraBase>       DngEntranceCameraClassAstrea                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AFldCameraBase>       DngFinalFloorCameraClassAstrea                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldManagerSubsystem::ProcLevelBluePrint(TSubclassOf<class ACharacterBaseCore> DefaultPlayerClass, TSubclassOf<class ACharacterBaseCore> DungeonPlayerClass, TSubclassOf<class ACharacterBaseCore> DungeonPlayerClass_Astrea, TSubclassOf<class AFldCameraBase> DefaultCameraClass, TSubclassOf<class AFldCameraBase> DungeonCameraClass, TSubclassOf<class AFldCamera> TransCameraClass, TSubclassOf<class ACharacterBaseCore> FollowerClass, TSubclassOf<class ACharacterBaseCore> FollowerKoromaruClass, const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, TSubclassOf<class AFldCameraBase> DngEntranceCameraClassAstrea, TSubclassOf<class AFldCameraBase> DngFinalFloorCameraClassAstrea)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldManagerSubsystem", "ProcLevelBluePrint");

	Params::FldManagerSubsystem_ProcLevelBluePrint Parms{};

	Parms.DefaultPlayerClass = DefaultPlayerClass;
	Parms.DungeonPlayerClass = DungeonPlayerClass;
	Parms.DungeonPlayerClass_Astrea = DungeonPlayerClass_Astrea;
	Parms.DefaultCameraClass = DefaultCameraClass;
	Parms.DungeonCameraClass = DungeonCameraClass;
	Parms.TransCameraClass = TransCameraClass;
	Parms.FollowerClass = FollowerClass;
	Parms.FollowerKoromaruClass = FollowerKoromaruClass;
	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.DngEntranceCameraClassAstrea = DngEntranceCameraClassAstrea;
	Parms.DngFinalFloorCameraClassAstrea = DngFinalFloorCameraClassAstrea;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldManagerSubsystem.SetParamDebug
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FieldMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FieldMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldManagerSubsystem::SetParamDebug(int32 FieldMajorID, int32 FieldMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldManagerSubsystem", "SetParamDebug");

	Params::FldManagerSubsystem_SetParamDebug Parms{};

	Parms.FieldMajorID = FieldMajorID;
	Parms.FieldMinorID = FieldMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldManagerSubsystem.SetPlayerEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    KeyEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldManagerSubsystem::SetPlayerEnable(bool Visible, bool KeyEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldManagerSubsystem", "SetPlayerEnable");

	Params::FldManagerSubsystem_SetPlayerEnable Parms{};

	Parms.Visible = Visible;
	Parms.KeyEnable = KeyEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldManagerSubsystem.SetPlayerKeyEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    KeyEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldManagerSubsystem::SetPlayerKeyEnable(bool KeyEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldManagerSubsystem", "SetPlayerKeyEnable");

	Params::FldManagerSubsystem_SetPlayerKeyEnable Parms{};

	Parms.KeyEnable = KeyEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldNpcComp.GetCharBaseComp
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAppCharBaseComp*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAppCharBaseComp* UFldNpcComp::GetCharBaseComp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldNpcComp", "GetCharBaseComp");

	Params::FldNpcComp_GetCharBaseComp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldNpcComp.RequestLookAtPlayerByMotion
// (Final, Native, Public)

void UFldNpcComp::RequestLookAtPlayerByMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldNpcComp", "RequestLookAtPlayerByMotion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldNpcComp.RequestPauseAnimProcByMotion
// (Final, Native, Public)

void UFldNpcComp::RequestPauseAnimProcByMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldNpcComp", "RequestPauseAnimProcByMotion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldNpcComp.RequestRestartAnimProcByMotion
// (Final, Native, Public)

void UFldNpcComp::RequestRestartAnimProcByMotion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldNpcComp", "RequestRestartAnimProcByMotion");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldOperator.BeginEvent
// (Final, Native, Public, BlueprintCallable)

void AFldOperator::BeginEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldOperator", "BeginEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldOperator.BeginFadeIn
// (Final, Native, Public, BlueprintCallable)

void AFldOperator::BeginFadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldOperator", "BeginFadeIn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldOperator.BeginFadeOut
// (Final, Native, Public, BlueprintCallable)

void AFldOperator::BeginFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldOperator", "BeginFadeOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldOperator.Cleanup
// (Final, Native, Public, BlueprintCallable)

void AFldOperator::Cleanup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldOperator", "Cleanup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldOperator.EndEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNotCameraReset                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldOperator::EndEvent(bool bNotCameraReset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldOperator", "EndEvent");

	Params::FldOperator_EndEvent Parms{};

	Parms.bNotCameraReset = bNotCameraReset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldOperator.FreeCameraReset
// (Final, Native, Public, BlueprintCallable)

void AFldOperator::FreeCameraReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldOperator", "FreeCameraReset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldOperator.KeyEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldOperator::KeyEnable(const bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldOperator", "KeyEnable");

	Params::FldOperator_KeyEnable Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldOperator.SetFreeCameraPitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldOperator::SetFreeCameraPitch(const float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldOperator", "SetFreeCameraPitch");

	Params::FldOperator_SetFreeCameraPitch Parms{};

	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldOperator.SetFreeCameraYaw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Angle                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldOperator::SetFreeCameraYaw(const float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldOperator", "SetFreeCameraYaw");

	Params::FldOperator_SetFreeCameraYaw Parms{};

	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldOperator.Setup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AKernelInput*                     KernelInput_0                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFldCameraFree*                   FreeCamera_0                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AFldCamera*                       Camera                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldOperator::Setup(class AKernelInput* KernelInput_0, class APawn* Player, class AFldCameraFree* FreeCamera_0, class AFldCamera* Camera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldOperator", "Setup");

	Params::FldOperator_Setup Parms{};

	Parms.KernelInput_0 = KernelInput_0;
	Parms.Player = Player;
	Parms.FreeCamera_0 = FreeCamera_0;
	Parms.Camera = Camera;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldPartnerComp.GetDashThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UFldPartnerComp::GetDashThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldPartnerComp", "GetDashThreshold");

	Params::FldPartnerComp_GetDashThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldPartnerComp.GetRunThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UFldPartnerComp::GetRunThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldPartnerComp", "GetRunThreshold");

	Params::FldPartnerComp_GetRunThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldPartnerComp.GetWalkThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UFldPartnerComp::GetWalkThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldPartnerComp", "GetWalkThreshold");

	Params::FldPartnerComp_GetWalkThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldPlayerComp.OnMontageEnded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInterrupted                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFldPlayerComp::OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldPlayerComp", "OnMontageEnded");

	Params::FldPlayerComp_OnMontageEnded Parms{};

	Parms.Montage = Montage;
	Parms.bInterrupted = bInterrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldPlayerComp.GetDashThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UFldPlayerComp::GetDashThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldPlayerComp", "GetDashThreshold");

	Params::FldPlayerComp_GetDashThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldPlayerComp.GetRunThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UFldPlayerComp::GetRunThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldPlayerComp", "GetRunThreshold");

	Params::FldPlayerComp_GetRunThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldPlayerComp.GetWalkThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UFldPlayerComp::GetWalkThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldPlayerComp", "GetWalkThreshold");

	Params::FldPlayerComp_GetWalkThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.FldPostValumeSound.OnActorOverlapBegin
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AFldPostValumeSound::OnActorOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldPostValumeSound", "OnActorOverlapBegin");

	Params::FldPostValumeSound_OnActorOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.FldPostValumeSound.OnActorOverlapEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AFldPostValumeSound::OnActorOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FldPostValumeSound", "OnActorOverlapEnd");

	Params::FldPostValumeSound_OnActorOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalGameData.ClearDataInheritance
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalGameData::ClearDataInheritance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalGameData", "ClearDataInheritance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalGameData.RestoreAstreaClearDataDifficulty
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalGameData::RestoreAstreaClearDataDifficulty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalGameData", "RestoreAstreaClearDataDifficulty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalGameData.SetDataInheritance
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalGameData::SetDataInheritance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalGameData", "SetDataInheritance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalGameData.SetDataInheritance_ALWAYS
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalGameData::SetDataInheritance_ALWAYS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalGameData", "SetDataInheritance_ALWAYS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalGameData.SetDataInheritance_AstreaClearData
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalGameData::SetDataInheritance_AstreaClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalGameData", "SetDataInheritance_AstreaClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalGameData.SetDataInheritance_LibraToAstrea
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalGameData::SetDataInheritance_LibraToAstrea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalGameData", "SetDataInheritance_LibraToAstrea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalGameData.StartDataInitialize
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalGameData::StartDataInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalGameData", "StartDataInitialize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWork.ClearSubLevelActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESubLevelIndex                          SubLevelNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWork::ClearSubLevelActor(ESubLevelIndex SubLevelNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWork", "ClearSubLevelActor");

	Params::GlobalWork_ClearSubLevelActor Parms{};

	Parms.SubLevelNum = SubLevelNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWork.GetSubLevelActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESubLevelIndex                          SubLevelNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGlobalWork::GetSubLevelActor(ESubLevelIndex SubLevelNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWork", "GetSubLevelActor");

	Params::GlobalWork_GetSubLevelActor Parms{};

	Parms.SubLevelNum = SubLevelNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWork.SetSubLevelActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// ESubLevelIndex                          SubLevelNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWork::SetSubLevelActor(ESubLevelIndex SubLevelNum, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWork", "SetSubLevelActor");

	Params::GlobalWork_SetSubLevelActor Parms{};

	Parms.SubLevelNum = SubLevelNum;
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWork.SpawnActorFromClassSubLevelIndex
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESubLevelIndex                          SubLevelIndex                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Transform                                              (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGlobalWork::SpawnActorFromClassSubLevelIndex(TSubclassOf<class AActor> ActorClass, ESubLevelIndex SubLevelIndex, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWork", "SpawnActorFromClassSubLevelIndex");

	Params::GlobalWork_SpawnActorFromClassSubLevelIndex Parms{};

	Parms.ActorClass = ActorClass;
	Parms.SubLevelIndex = SubLevelIndex;
	Parms.Transform = std::move(Transform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWork.SetSequenceParam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGWorkSeqType                           Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Major                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWork::SetSequenceParam(EGWorkSeqType Type, int32 Major, int32 Minor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalWork", "SetSequenceParam");

	Params::GlobalWork_SetSequenceParam Parms{};

	Parms.Type = Type;
	Parms.Major = Major;
	Parms.Minor = Minor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWork.SetSequenceParam_DEBUG
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGWorkSeqType                           Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Major                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MKfEvent                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Tag                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWork::SetSequenceParam_DEBUG(EGWorkSeqType Type, int32 Major, int32 Minor, int32 MKfEvent, const class FString& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalWork", "SetSequenceParam_DEBUG");

	Params::GlobalWork_SetSequenceParam_DEBUG Parms{};

	Parms.Type = Type;
	Parms.Major = Major;
	Parms.Minor = Minor;
	Parms.MKfEvent = MKfEvent;
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWork.SetSequenceParam_KEY_FREE_EVENT
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EGWorkSeqType                           Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Major                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MKfEvent                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWork::SetSequenceParam_KEY_FREE_EVENT(EGWorkSeqType Type, int32 Major, int32 Minor, int32 MKfEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalWork", "SetSequenceParam_KEY_FREE_EVENT");

	Params::GlobalWork_SetSequenceParam_KEY_FREE_EVENT Parms{};

	Parms.Type = Type;
	Parms.Major = Major;
	Parms.Minor = Minor;
	Parms.MKfEvent = MKfEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWork.GetSequenceParam
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGWorkSeqType                           Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Major                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MKfEvent                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWork::GetSequenceParam(EGWorkSeqType* Type, int32* Major, int32* Minor, int32* MKfEvent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalWork", "GetSequenceParam");

	Params::GlobalWork_GetSequenceParam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Type != nullptr)
		*Type = Parms.Type;

	if (Major != nullptr)
		*Major = Parms.Major;

	if (Minor != nullptr)
		*Minor = Parms.Minor;

	if (MKfEvent != nullptr)
		*MKfEvent = Parms.MKfEvent;
}


// Function xrd777.GlobalWork.GetSequenceParam_DEBUG
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EGWorkSeqType                           Type                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Major                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Minor                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MKfEvent                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Tag                                                    (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWork::GetSequenceParam_DEBUG(EGWorkSeqType* Type, int32* Major, int32* Minor, int32* MKfEvent, class FString* Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalWork", "GetSequenceParam_DEBUG");

	Params::GlobalWork_GetSequenceParam_DEBUG Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Type != nullptr)
		*Type = Parms.Type;

	if (Major != nullptr)
		*Major = Parms.Major;

	if (Minor != nullptr)
		*Minor = Parms.Minor;

	if (MKfEvent != nullptr)
		*MKfEvent = Parms.MKfEvent;

	if (Tag != nullptr)
		*Tag = std::move(Parms.Tag);
}


// Function xrd777.GlobalWorkBpLib.GWorkAddMoney
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   SetMoeny                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGlobalWorkBpLib::GWorkAddMoney(int32 SetMoeny)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkAddMoney");

	Params::GlobalWorkBpLib_GWorkAddMoney Parms{};

	Parms.SetMoeny = SetMoeny;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkCheckPartyFull
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalWorkBpLib::GWorkCheckPartyFull()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkCheckPartyFull");

	Params::GlobalWorkBpLib_GWorkCheckPartyFull Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkCreateErrorDialog
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalWorkBpLib::GWorkCreateErrorDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkCreateErrorDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkCreateLeaderBoardManagere
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalWorkBpLib::GWorkCreateLeaderBoardManagere()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkCreateLeaderBoardManagere");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkCreateMessageDialog
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalWorkBpLib::GWorkCreateMessageDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkCreateMessageDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkCreateSignedInDialog
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalWorkBpLib::GWorkCreateSignedInDialog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkCreateSignedInDialog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkCreateTrophyManagere
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalWorkBpLib::GWorkCreateTrophyManagere()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkCreateTrophyManagere");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkDecCounter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             CntName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkDecCounter(class FName CntName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkDecCounter");

	Params::GlobalWorkBpLib_GWorkDecCounter Parms{};

	Parms.CntName = CntName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkDecCounterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CntNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkDecCounterValue(int32 CntNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkDecCounterValue");

	Params::GlobalWorkBpLib_GWorkDecCounterValue Parms{};

	Parms.CntNo = CntNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkFlagChk
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             FlagName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGWorkOnOffEnum                         OnOff                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkFlagChk(class FName FlagName, EGWorkOnOffEnum* OnOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkFlagChk");

	Params::GlobalWorkBpLib_GWorkFlagChk Parms{};

	Parms.FlagName = FlagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OnOff != nullptr)
		*OnOff = Parms.OnOff;
}


// Function xrd777.GlobalWorkBpLib.GWorkFlagChkValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGWorkOnOffEnum                         OnOff                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkFlagChkValue(int32 Index_0, EGWorkOnOffEnum* OnOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkFlagChkValue");

	Params::GlobalWorkBpLib_GWorkFlagChkValue Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OnOff != nullptr)
		*OnOff = Parms.OnOff;
}


// Function xrd777.GlobalWorkBpLib.GWorkFlagOff
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             FlagName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkFlagOff(class FName FlagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkFlagOff");

	Params::GlobalWorkBpLib_GWorkFlagOff Parms{};

	Parms.FlagName = FlagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkFlagOffValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkFlagOffValue(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkFlagOffValue");

	Params::GlobalWorkBpLib_GWorkFlagOffValue Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkFlagOn
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             FlagName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkFlagOn(class FName FlagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkFlagOn");

	Params::GlobalWorkBpLib_GWorkFlagOn Parms{};

	Parms.FlagName = FlagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkFlagOnValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkFlagOnValue(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkFlagOnValue");

	Params::GlobalWorkBpLib_GWorkFlagOnValue Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkFlagSet
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             FlagName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGWorkOnOffEnum                         OnOff                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkFlagSet(class FName FlagName, EGWorkOnOffEnum* OnOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkFlagSet");

	Params::GlobalWorkBpLib_GWorkFlagSet Parms{};

	Parms.FlagName = FlagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OnOff != nullptr)
		*OnOff = Parms.OnOff;
}


// Function xrd777.GlobalWorkBpLib.GWorkFlagSetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGWorkOnOffEnum                         OnOff                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkFlagSetValue(int32 Index_0, EGWorkOnOffEnum* OnOff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkFlagSetValue");

	Params::GlobalWorkBpLib_GWorkFlagSetValue Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OnOff != nullptr)
		*OnOff = Parms.OnOff;
}


// Function xrd777.GlobalWorkBpLib.GWorkFullRecoveryAllPartyMember
// (Final, Native, Static, Public, BlueprintCallable)

void UGlobalWorkBpLib::GWorkFullRecoveryAllPartyMember()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkFullRecoveryAllPartyMember");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkGetCounter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             CntName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGlobalWorkBpLib::GWorkGetCounter(class FName CntName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkGetCounter");

	Params::GlobalWorkBpLib_GWorkGetCounter Parms{};

	Parms.CntName = CntName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkGetCounterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CntNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGlobalWorkBpLib::GWorkGetCounterValue(int32 CntNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkGetCounterValue");

	Params::GlobalWorkBpLib_GWorkGetCounterValue Parms{};

	Parms.CntNo = CntNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkGetMaxFPS
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGlobalWorkBpLib::GWorkGetMaxFPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkGetMaxFPS");

	Params::GlobalWorkBpLib_GWorkGetMaxFPS Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkGetMoney
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGlobalWorkBpLib::GWorkGetMoney()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkGetMoney");

	Params::GlobalWorkBpLib_GWorkGetMoney Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkGetPartyID
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGlobalWorkBpLib::GWorkGetPartyID(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkGetPartyID");

	Params::GlobalWorkBpLib_GWorkGetPartyID Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkGetRealTimeDelta
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGlobalWorkBpLib::GWorkGetRealTimeDelta()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkGetRealTimeDelta");

	Params::GlobalWorkBpLib_GWorkGetRealTimeDelta Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkIncCounter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             CntName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkIncCounter(class FName CntName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkIncCounter");

	Params::GlobalWorkBpLib_GWorkIncCounter Parms{};

	Parms.CntName = CntName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkIncCounterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CntNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkIncCounterValue(int32 CntNo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkIncCounterValue");

	Params::GlobalWorkBpLib_GWorkIncCounterValue Parms{};

	Parms.CntNo = CntNo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkIsAsiaLanguages
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalWorkBpLib::GWorkIsAsiaLanguages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkIsAsiaLanguages");

	Params::GlobalWorkBpLib_GWorkIsAsiaLanguages Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkIsEFIGSLanguages
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalWorkBpLib::GWorkIsEFIGSLanguages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkIsEFIGSLanguages");

	Params::GlobalWorkBpLib_GWorkIsEFIGSLanguages Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkIsFullHpSpAllPartyMember
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalWorkBpLib::GWorkIsFullHpSpAllPartyMember()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkIsFullHpSpAllPartyMember");

	Params::GlobalWorkBpLib_GWorkIsFullHpSpAllPartyMember Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkIsJapaneseLanguage
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalWorkBpLib::GWorkIsJapaneseLanguage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkIsJapaneseLanguage");

	Params::GlobalWorkBpLib_GWorkIsJapaneseLanguage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkIsPartyExists
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   PCID                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGlobalWorkBpLib::GWorkIsPartyExists(int32 PCID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkIsPartyExists");

	Params::GlobalWorkBpLib_GWorkIsPartyExists Parms{};

	Parms.PCID = PCID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.GlobalWorkBpLib.GWorkSetCounter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             CntName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkSetCounter(class FName CntName, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkSetCounter");

	Params::GlobalWorkBpLib_GWorkSetCounter Parms{};

	Parms.CntName = CntName;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkSetCounterValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CntNo                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkSetCounterValue(int32 CntNo, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkSetCounterValue");

	Params::GlobalWorkBpLib_GWorkSetCounterValue Parms{};

	Parms.CntNo = CntNo;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkSetMoney
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   SetMoeny                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkSetMoney(int32 SetMoeny)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkSetMoney");

	Params::GlobalWorkBpLib_GWorkSetMoney Parms{};

	Parms.SetMoeny = SetMoeny;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkSetPartyIN
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PCID                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkSetPartyIN(int32 PCID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkSetPartyIN");

	Params::GlobalWorkBpLib_GWorkSetPartyIN Parms{};

	Parms.PCID = PCID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.GlobalWorkBpLib.GWorkSetPartyOUT
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PCID                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGlobalWorkBpLib::GWorkSetPartyOUT(int32 PCID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GlobalWorkBpLib", "GWorkSetPartyOUT");

	Params::GlobalWorkBpLib_GWorkSetPartyOUT Parms{};

	Parms.PCID = PCID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.HandwritingSpawner.LoadEffectEnded
// (Final, Native, Protected)

void AHandwritingSpawner::LoadEffectEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSpawner", "LoadEffectEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.HandwritingSpawner.OnCompleteNiagara
// (Final, Native, Protected)
// Parameters:
// class UNiagaraComponent*                PSystem                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHandwritingSpawner::OnCompleteNiagara(class UNiagaraComponent* PSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSpawner", "OnCompleteNiagara");

	Params::HandwritingSpawner_OnCompleteNiagara Parms{};

	Parms.PSystem = PSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.HandwritingSpawner.RequestPlayEffect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAtlEvtHandwritingType                  InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHandwritingSpawnRules                  InSpawnRule                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInLoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHandwritingSpawner::RequestPlayEffect(EAtlEvtHandwritingType InType, EHandwritingSpawnRules InSpawnRule, bool bInLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSpawner", "RequestPlayEffect");

	Params::HandwritingSpawner_RequestPlayEffect Parms{};

	Parms.InType = InType;
	Parms.InSpawnRule = InSpawnRule;
	Parms.bInLoop = bInLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.HandwritingSpawner.RequestPlayEffectAtSpawnerAttachedTo
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EAtlEvtHandwritingType                  InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachSocketName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHandwritingSpawnRules                  InSpawnRule                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInLoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotator                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   InLoopCount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCameraOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InScale                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHandwritingSpawner::RequestPlayEffectAtSpawnerAttachedTo(EAtlEvtHandwritingType InType, class ACharacter* Character, class FName AttachSocketName, EHandwritingSpawnRules InSpawnRule, bool bInLoop, const struct FVector& InLocation, const struct FRotator& InRotator, int32 InLoopCount, int32 InCameraOffset, const struct FVector& InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSpawner", "RequestPlayEffectAtSpawnerAttachedTo");

	Params::HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo Parms{};

	Parms.InType = InType;
	Parms.Character = Character;
	Parms.AttachSocketName = AttachSocketName;
	Parms.InSpawnRule = InSpawnRule;
	Parms.bInLoop = bInLoop;
	Parms.InLocation = std::move(InLocation);
	Parms.InRotator = std::move(InRotator);
	Parms.InLoopCount = InLoopCount;
	Parms.InCameraOffset = InCameraOffset;
	Parms.InScale = std::move(InScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.HandwritingSpawner.RequestPlayEffectAtSpawnerAttachedToNpc
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EAtlEvtHandwritingType                  InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ANpcBaseCore*                     NpcBase                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachSocketName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHandwritingSpawnRules                  InSpawnRule                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInLoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotator                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   InLoopCount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCameraOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InScale                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHandwritingSpawner::RequestPlayEffectAtSpawnerAttachedToNpc(EAtlEvtHandwritingType InType, class ANpcBaseCore* NpcBase, class FName AttachSocketName, EHandwritingSpawnRules InSpawnRule, bool bInLoop, const struct FVector& InLocation, const struct FRotator& InRotator, int32 InLoopCount, int32 InCameraOffset, const struct FVector& InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSpawner", "RequestPlayEffectAtSpawnerAttachedToNpc");

	Params::HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc Parms{};

	Parms.InType = InType;
	Parms.NpcBase = NpcBase;
	Parms.AttachSocketName = AttachSocketName;
	Parms.InSpawnRule = InSpawnRule;
	Parms.bInLoop = bInLoop;
	Parms.InLocation = std::move(InLocation);
	Parms.InRotator = std::move(InRotator);
	Parms.InLoopCount = InLoopCount;
	Parms.InCameraOffset = InCameraOffset;
	Parms.InScale = std::move(InScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.HandwritingSpawner.RequestPlayEffectAtSpawnerLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// EAtlEvtHandwritingType                  InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInLoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InLocation                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         InRotator                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   InLoopCount                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCameraOffset                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          InScale                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHandwritingSpawner::RequestPlayEffectAtSpawnerLocation(EAtlEvtHandwritingType InType, bool bInLoop, const struct FVector& InLocation, const struct FRotator& InRotator, int32 InLoopCount, int32 InCameraOffset, const struct FVector& InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSpawner", "RequestPlayEffectAtSpawnerLocation");

	Params::HandwritingSpawner_RequestPlayEffectAtSpawnerLocation Parms{};

	Parms.InType = InType;
	Parms.bInLoop = bInLoop;
	Parms.InLocation = std::move(InLocation);
	Parms.InRotator = std::move(InRotator);
	Parms.InLoopCount = InLoopCount;
	Parms.InCameraOffset = InCameraOffset;
	Parms.InScale = std::move(InScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.HandwritingSpawner.RequestPlayEffectFromParam
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAtlEvtHandwritingType                  InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlHandwritingNiagaraRequestParamInParam                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EHandwritingSpawnRules                  InSpawnRule                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInLoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHandwritingSpawner::RequestPlayEffectFromParam(EAtlEvtHandwritingType InType, const struct FAtlHandwritingNiagaraRequestParam& InParam, EHandwritingSpawnRules InSpawnRule, bool bInLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSpawner", "RequestPlayEffectFromParam");

	Params::HandwritingSpawner_RequestPlayEffectFromParam Parms{};

	Parms.InType = InType;
	Parms.InParam = std::move(InParam);
	Parms.InSpawnRule = InSpawnRule;
	Parms.bInLoop = bInLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TitleStateNewGame.OnCanselDifficultySelection
// (Final, Native, Public)

void UTitleStateNewGame::OnCanselDifficultySelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TitleStateNewGame", "OnCanselDifficultySelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TitleStateNewGame.OnCloseDifficultySelection
// (Final, Native, Public)

void UTitleStateNewGame::OnCloseDifficultySelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TitleStateNewGame", "OnCloseDifficultySelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.HandwritingSubsystem.GetAdjustedAllLayoutData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EHandwritingLayout                      InIndexPosRot                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutAngle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHandwritingLayout                      InIndexScale                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutScale                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHandwritingSubsystem::GetAdjustedAllLayoutData(EHandwritingLayout InIndexPosRot, struct FVector* OutPosition, float* OutAngle, EHandwritingLayout InIndexScale, struct FVector* OutScale, float* OutSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "GetAdjustedAllLayoutData");

	Params::HandwritingSubsystem_GetAdjustedAllLayoutData Parms{};

	Parms.InIndexPosRot = InIndexPosRot;
	Parms.InIndexScale = InIndexScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	if (OutAngle != nullptr)
		*OutAngle = Parms.OutAngle;

	if (OutScale != nullptr)
		*OutScale = std::move(Parms.OutScale);

	if (OutSize != nullptr)
		*OutSize = Parms.OutSize;

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.GetAdjustedCallingLayoutData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   OutScale1                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutScale2                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutScale3                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHandwritingSubsystem::GetAdjustedCallingLayoutData(float* OutScale1, float* OutScale2, float* OutScale3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "GetAdjustedCallingLayoutData");

	Params::HandwritingSubsystem_GetAdjustedCallingLayoutData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScale1 != nullptr)
		*OutScale1 = Parms.OutScale1;

	if (OutScale2 != nullptr)
		*OutScale2 = Parms.OutScale2;

	if (OutScale3 != nullptr)
		*OutScale3 = Parms.OutScale3;

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.GetAdjustedDoubleExclamationLayoutData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          OutPosition1                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPosition2                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHandwritingSubsystem::GetAdjustedDoubleExclamationLayoutData(struct FVector* OutPosition1, struct FVector* OutPosition2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "GetAdjustedDoubleExclamationLayoutData");

	Params::HandwritingSubsystem_GetAdjustedDoubleExclamationLayoutData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition1 != nullptr)
		*OutPosition1 = std::move(Parms.OutPosition1);

	if (OutPosition2 != nullptr)
		*OutPosition2 = std::move(Parms.OutPosition2);

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.GetAdjustedExclamationQuestionLayoutData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          OutPosition1                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPosition2                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutScale                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutScaleFloat                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHandwritingSubsystem::GetAdjustedExclamationQuestionLayoutData(struct FVector* OutPosition1, struct FVector* OutPosition2, struct FVector* OutScale, float* OutScaleFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "GetAdjustedExclamationQuestionLayoutData");

	Params::HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition1 != nullptr)
		*OutPosition1 = std::move(Parms.OutPosition1);

	if (OutPosition2 != nullptr)
		*OutPosition2 = std::move(Parms.OutPosition2);

	if (OutScale != nullptr)
		*OutScale = std::move(Parms.OutScale);

	if (OutScaleFloat != nullptr)
		*OutScaleFloat = Parms.OutScaleFloat;

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.GetAdjustedLayoutData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EHandwritingLayout                      InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutAngle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutScale                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHandwritingSubsystem::GetAdjustedLayoutData(EHandwritingLayout InIndex, struct FVector* OutPosition, float* OutAngle, float* OutScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "GetAdjustedLayoutData");

	Params::HandwritingSubsystem_GetAdjustedLayoutData Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	if (OutAngle != nullptr)
		*OutAngle = Parms.OutAngle;

	if (OutScale != nullptr)
		*OutScale = Parms.OutScale;

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.GetAdjustedLayoutPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EHandwritingLayout                      InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHandwritingSubsystem::GetAdjustedLayoutPosition(EHandwritingLayout InIndex, struct FVector* OutPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "GetAdjustedLayoutPosition");

	Params::HandwritingSubsystem_GetAdjustedLayoutPosition Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.GetAdjustedLayoutRotation
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EHandwritingLayout                      InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutAngle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHandwritingSubsystem::GetAdjustedLayoutRotation(EHandwritingLayout InIndex, float* OutAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "GetAdjustedLayoutRotation");

	Params::HandwritingSubsystem_GetAdjustedLayoutRotation Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutAngle != nullptr)
		*OutAngle = Parms.OutAngle;

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.GetAdjustedLayoutScale
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// EHandwritingLayout                      InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutScale                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHandwritingSubsystem::GetAdjustedLayoutScale(EHandwritingLayout InIndex, float* OutScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "GetAdjustedLayoutScale");

	Params::HandwritingSubsystem_GetAdjustedLayoutScale Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutScale != nullptr)
		*OutScale = Parms.OutScale;

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.GetAdjustedQuestionLayoutData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          OutPosition1                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPosition2                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPosition3                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHandwritingSubsystem::GetAdjustedQuestionLayoutData(struct FVector* OutPosition1, struct FVector* OutPosition2, struct FVector* OutPosition3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "GetAdjustedQuestionLayoutData");

	Params::HandwritingSubsystem_GetAdjustedQuestionLayoutData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition1 != nullptr)
		*OutPosition1 = std::move(Parms.OutPosition1);

	if (OutPosition2 != nullptr)
		*OutPosition2 = std::move(Parms.OutPosition2);

	if (OutPosition3 != nullptr)
		*OutPosition3 = std::move(Parms.OutPosition3);

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.GetAdjustedWhineLayoutData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutScale                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutSize                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHandwritingSubsystem::GetAdjustedWhineLayoutData(struct FVector* OutPosition, struct FVector* OutScale, float* OutSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "GetAdjustedWhineLayoutData");

	Params::HandwritingSubsystem_GetAdjustedWhineLayoutData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);

	if (OutScale != nullptr)
		*OutScale = std::move(Parms.OutScale);

	if (OutSize != nullptr)
		*OutSize = Parms.OutSize;

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.GetAdjustedWoofLayoutData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          OutPosition1                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPosition2                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPosition3                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OutPosition4                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHandwritingSubsystem::GetAdjustedWoofLayoutData(struct FVector* OutPosition1, struct FVector* OutPosition2, struct FVector* OutPosition3, struct FVector* OutPosition4)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "GetAdjustedWoofLayoutData");

	Params::HandwritingSubsystem_GetAdjustedWoofLayoutData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition1 != nullptr)
		*OutPosition1 = std::move(Parms.OutPosition1);

	if (OutPosition2 != nullptr)
		*OutPosition2 = std::move(Parms.OutPosition2);

	if (OutPosition3 != nullptr)
		*OutPosition3 = std::move(Parms.OutPosition3);

	if (OutPosition4 != nullptr)
		*OutPosition4 = std::move(Parms.OutPosition4);

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.IsPolandLanguage
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHandwritingSubsystem::IsPolandLanguage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "IsPolandLanguage");

	Params::HandwritingSubsystem_IsPolandLanguage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.SpawnHandwritingAtLocation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAtlHandwritingGroupType                GroupType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAtlEvtHandwritingType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlHandwritingNiagaraRequestParamInParam                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroySpawner                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InbLoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHandwritingSpawner*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHandwritingSpawner* UHandwritingSubsystem::SpawnHandwritingAtLocation(const class UObject* WorldContextObject, EAtlHandwritingGroupType GroupType, EAtlEvtHandwritingType Type, const struct FAtlHandwritingNiagaraRequestParam& InParam, bool bAutoDestroySpawner, bool InbLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "SpawnHandwritingAtLocation");

	Params::HandwritingSubsystem_SpawnHandwritingAtLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.GroupType = GroupType;
	Parms.Type = Type;
	Parms.InParam = std::move(InParam);
	Parms.bAutoDestroySpawner = bAutoDestroySpawner;
	Parms.InbLoop = InbLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.SpawnHandwritingAttached
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAtlHandwritingGroupType                GroupType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAtlEvtHandwritingType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACharacter*                       Character                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachSocketName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHandwritingSpawnRules                  InSpawnRule                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlHandwritingNiagaraRequestParamInParam                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroySpawner                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InbLoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHandwritingSpawner*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHandwritingSpawner* UHandwritingSubsystem::SpawnHandwritingAttached(EAtlHandwritingGroupType GroupType, EAtlEvtHandwritingType Type, class ACharacter* Character, class FName AttachSocketName, EHandwritingSpawnRules InSpawnRule, const struct FAtlHandwritingNiagaraRequestParam& InParam, bool bAutoDestroySpawner, bool InbLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "SpawnHandwritingAttached");

	Params::HandwritingSubsystem_SpawnHandwritingAttached Parms{};

	Parms.GroupType = GroupType;
	Parms.Type = Type;
	Parms.Character = Character;
	Parms.AttachSocketName = AttachSocketName;
	Parms.InSpawnRule = InSpawnRule;
	Parms.InParam = std::move(InParam);
	Parms.bAutoDestroySpawner = bAutoDestroySpawner;
	Parms.InbLoop = InbLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.HandwritingSubsystem.SpawnHandwritingAttachedNpc
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EAtlHandwritingGroupType                GroupType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAtlEvtHandwritingType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ANpcBaseCore*                     NpcBase                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachSocketName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHandwritingSpawnRules                  InSpawnRule                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAtlHandwritingNiagaraRequestParamInParam                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroySpawner                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InbLoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHandwritingSpawner*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHandwritingSpawner* UHandwritingSubsystem::SpawnHandwritingAttachedNpc(EAtlHandwritingGroupType GroupType, EAtlEvtHandwritingType Type, class ANpcBaseCore* NpcBase, class FName AttachSocketName, EHandwritingSpawnRules InSpawnRule, const struct FAtlHandwritingNiagaraRequestParam& InParam, bool bAutoDestroySpawner, bool InbLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HandwritingSubsystem", "SpawnHandwritingAttachedNpc");

	Params::HandwritingSubsystem_SpawnHandwritingAttachedNpc Parms{};

	Parms.GroupType = GroupType;
	Parms.Type = Type;
	Parms.NpcBase = NpcBase;
	Parms.AttachSocketName = AttachSocketName;
	Parms.InSpawnRule = InSpawnRule;
	Parms.InParam = std::move(InParam);
	Parms.bAutoDestroySpawner = bAutoDestroySpawner;
	Parms.InbLoop = InbLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.HT_UMGTestGameModeBase.ChangeMenuWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          NewWidgetClass                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHT_UMGTestGameModeBase::ChangeMenuWidget(TSubclassOf<class UUserWidget> NewWidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HT_UMGTestGameModeBase", "ChangeMenuWidget");

	Params::HT_UMGTestGameModeBase_ChangeMenuWidget Parms{};

	Parms.NewWidgetClass = NewWidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.HttpBpLib.PostTeamsMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Title                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHttpBpLib::PostTeamsMessage(const class FString& URL, const class FString& Title, const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HttpBpLib", "PostTeamsMessage");

	Params::HttpBpLib_PostTeamsMessage Parms{};

	Parms.URL = std::move(URL);
	Parms.Title = std::move(Title);
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.HttpBpLib.SpawnHttpActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           BPActorReferencePath                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Arg                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHttpBpLib::SpawnHttpActor(const class FString& BPActorReferencePath, const class FString& Arg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("HttpBpLib", "SpawnHttpActor");

	Params::HttpBpLib_SpawnHttpActor Parms{};

	Parms.BPActorReferencePath = std::move(BPActorReferencePath);
	Parms.Arg = std::move(Arg);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.IKAnimInstanceBase.UpdateLocomotionTick
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIKAnimInstanceBase::UpdateLocomotionTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKAnimInstanceBase", "UpdateLocomotionTick");

	Params::IKAnimInstanceBase_UpdateLocomotionTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.IKCharacterBase.DisableIK
// (Final, Native, Public, BlueprintCallable)

void AIKCharacterBase::DisableIK()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKCharacterBase", "DisableIK");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.IKCharacterBase.EnableIK
// (Final, Native, Public, BlueprintCallable)

void AIKCharacterBase::EnableIK()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKCharacterBase", "EnableIK");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.IKCharacterBase.InitializeIKSetup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           InTargetMesh                                           (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UIKAnimInstanceBase*              InIKAnimInstance                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AIKCharacterBase::InitializeIKSetup(bool bEnable, class USkeletalMeshComponent* InTargetMesh, class UIKAnimInstanceBase* InIKAnimInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKCharacterBase", "InitializeIKSetup");

	Params::IKCharacterBase_InitializeIKSetup Parms{};

	Parms.bEnable = bEnable;
	Parms.InTargetMesh = InTargetMesh;
	Parms.InIKAnimInstance = InIKAnimInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.IKCharacterBase.TickUpdateIK
// (Final, Native, Protected)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AIKCharacterBase::TickUpdateIK(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKCharacterBase", "TickUpdateIK");

	Params::IKCharacterBase_TickUpdateIK Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.IKCharacterBase.UpdateAnimInstanceParams
// (Final, Native, Public, BlueprintCallable)

void AIKCharacterBase::UpdateAnimInstanceParams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKCharacterBase", "UpdateAnimInstanceParams");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.IKCharacterBase.UpdateCapsuleHalfHeight
// (Final, Native, Protected)
// Parameters:
// float                                   HipOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bResetCapsule                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AIKCharacterBase::UpdateCapsuleHalfHeight(float HipOffset, bool bResetCapsule, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKCharacterBase", "UpdateCapsuleHalfHeight");

	Params::IKCharacterBase_UpdateCapsuleHalfHeight Parms{};

	Parms.HipOffset = HipOffset;
	Parms.bResetCapsule = bResetCapsule;
	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.IKCharacterBase.UpdateInterpFloat
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InterpSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AIKCharacterBase::UpdateInterpFloat(float& Value, float Target, float InterpSpeed, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKCharacterBase", "UpdateInterpFloat");

	Params::IKCharacterBase_UpdateInterpFloat Parms{};

	Parms.Value = Value;
	Parms.Target = Target;
	Parms.InterpSpeed = InterpSpeed;
	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Value = Parms.Value;
}


// Function xrd777.IKCharacterBase.UpdateInterpRotator
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         Value                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         Target                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   InterpSpeed                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AIKCharacterBase::UpdateInterpRotator(struct FRotator& Value, const struct FRotator& Target, float InterpSpeed, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IKCharacterBase", "UpdateInterpRotator");

	Params::IKCharacterBase_UpdateInterpRotator Parms{};

	Parms.Value = std::move(Value);
	Parms.Target = std::move(Target);
	Parms.InterpSpeed = InterpSpeed;
	Parms.DeltaSeconds = DeltaSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Value = std::move(Parms.Value);
}


// Function xrd777.UIDrawGamerTag.DebugOnDestroy
// (Final, Native, Public, BlueprintCallable)

void UUIDrawGamerTag::DebugOnDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawGamerTag", "DebugOnDestroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDrawGamerTag.SetNameText
// (Event, Public, BlueprintEvent)
// Parameters:
// class FString                           NameText                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDrawGamerTag::SetNameText(const class FString& NameText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawGamerTag", "SetNameText");

	Params::UIDrawGamerTag_SetNameText Parms{};

	Parms.NameText = std::move(NameText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.UIDrawGamerTag.SetScale
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDrawGamerTag::SetScale(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDrawGamerTag", "SetScale");

	Params::UIDrawGamerTag_SetScale Parms{};

	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.itfMsgProgWindow_TUTRIALDraw.Update
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AItfMsgProgWindow_TUTRIALDraw::Update(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("itfMsgProgWindow_TUTRIALDraw", "Update");

	Params::ItfMsgProgWindow_TUTRIALDraw_Update Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.BuildModeLibrary.IsDebug
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBuildModeLibrary::IsDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BuildModeLibrary", "IsDebug");

	Params::BuildModeLibrary_IsDebug Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.BuildModeLibrary.IsShipping
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBuildModeLibrary::IsShipping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BuildModeLibrary", "IsShipping");

	Params::BuildModeLibrary_IsShipping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.TitleActor.OnLoaded
// (Final, Native, Public)

void ATitleActor::OnLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TitleActor", "OnLoaded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TitleActor.OpenAddAstreaMsgSimple
// (Final, Native, Public)

void ATitleActor::OpenAddAstreaMsgSimple()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TitleActor", "OpenAddAstreaMsgSimple");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.KernelBpLib.IsInEditor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKernelBpLib::IsInEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KernelBpLib", "IsInEditor");

	Params::KernelBpLib_IsInEditor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.KernelBpLib.SetTestCharacter
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class ACharacter>           In                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Location                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKernelBpLib::SetTestCharacter(const class UObject* WorldContextObject, TSubclassOf<class ACharacter> In, const struct FTransform& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KernelBpLib", "SetTestCharacter");

	Params::KernelBpLib_SetTestCharacter Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.In = In;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.KernelBpLib.SetTestMap
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       Location                                               (Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UKernelBpLib::SetTestMap(const class UObject* WorldContextObject, const struct FTransform& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KernelBpLib", "SetTestMap");

	Params::KernelBpLib_SetTestMap Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.KernelBpLib.StartBf
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UBfAsset>          InAsset                                                (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ProcNo                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PlayerStop                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    BmdSearchOff                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKernelBpLib::StartBf(const class UObject* WorldContextObject, TSoftObjectPtr<class UBfAsset> InAsset, int32 ProcNo, bool PlayerStop, bool BmdSearchOff, const struct FLatentActionInfo& LatentInfo, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KernelBpLib", "StartBf");

	Params::KernelBpLib_StartBf Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InAsset = InAsset;
	Parms.ProcNo = ProcNo;
	Parms.PlayerStop = PlayerStop;
	Parms.BmdSearchOff = BmdSearchOff;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function xrd777.KernelBpLib.StartBfEx
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UBfAsset>          InBfAsset                                              (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UBmdAsset>         InBmdAsset                                             (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ProcNo                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PlayerStop                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    BmdSearchOff                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKernelBpLib::StartBfEx(const class UObject* WorldContextObject, TSoftObjectPtr<class UBfAsset> InBfAsset, TSoftObjectPtr<class UBmdAsset> InBmdAsset, int32 ProcNo, bool PlayerStop, bool BmdSearchOff, const struct FLatentActionInfo& LatentInfo, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KernelBpLib", "StartBfEx");

	Params::KernelBpLib_StartBfEx Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InBfAsset = InBfAsset;
	Parms.InBmdAsset = InBmdAsset;
	Parms.ProcNo = ProcNo;
	Parms.PlayerStop = PlayerStop;
	Parms.BmdSearchOff = BmdSearchOff;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function xrd777.KernelBpLib.StartBfPath
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BfAssetPath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           BmdAssetPath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ProcNo                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLatentActionInfo                LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKernelBpLib::StartBfPath(const class UObject* WorldContextObject, const class FString& BfAssetPath, const class FString& BmdAssetPath, int32 ProcNo, const struct FLatentActionInfo& LatentInfo, int32* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KernelBpLib", "StartBfPath");

	Params::KernelBpLib_StartBfPath Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.BfAssetPath = std::move(BfAssetPath);
	Parms.BmdAssetPath = std::move(BmdAssetPath);
	Parms.ProcNo = ProcNo;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function xrd777.KernelBpLib.StartLoadingScreen
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPlayUntilStopped                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKernelBpLib::StartLoadingScreen(const class UObject* WorldContextObject, bool bPlayUntilStopped, float PlayTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KernelBpLib", "StartLoadingScreen");

	Params::KernelBpLib_StartLoadingScreen Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bPlayUntilStopped = bPlayUntilStopped;
	Parms.PlayTime = PlayTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.KernelBpLib.StopLoadingScreen
// (Final, Native, Static, Public, BlueprintCallable)

void UKernelBpLib::StopLoadingScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KernelBpLib", "StopLoadingScreen");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.LipsyncAppObserverSubsystem.FinishSpeakCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAppCharCategoryType                    CharcterCategoryType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULipsyncAppObserverSubsystem::FinishSpeakCharacter(EAppCharCategoryType CharcterCategoryType, int32 CharaIndexID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsyncAppObserverSubsystem", "FinishSpeakCharacter");

	Params::LipsyncAppObserverSubsystem_FinishSpeakCharacter Parms{};

	Parms.CharcterCategoryType = CharcterCategoryType;
	Parms.CharaIndexID = CharaIndexID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.LipsyncAppObserverSubsystem.FinishSpeakCharacterFromSoundID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SoundMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SoundMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULipsyncAppObserverSubsystem::FinishSpeakCharacterFromSoundID(int32 SoundMajorID, int32 SoundMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsyncAppObserverSubsystem", "FinishSpeakCharacterFromSoundID");

	Params::LipsyncAppObserverSubsystem_FinishSpeakCharacterFromSoundID Parms{};

	Parms.SoundMajorID = SoundMajorID;
	Parms.SoundMinorID = SoundMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.LipsyncAppObserverSubsystem.getLipsyncLiveInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SoundMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SoundMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCriLipsMorphTargetBlendAmountAsJapaneseReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FCriLipsMorphTargetBlendAmountAsJapanese ULipsyncAppObserverSubsystem::GetLipsyncLiveInfo(int32 SoundMajorID, int32 SoundMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsyncAppObserverSubsystem", "getLipsyncLiveInfo");

	Params::LipsyncAppObserverSubsystem_GetLipsyncLiveInfo Parms{};

	Parms.SoundMajorID = SoundMajorID;
	Parms.SoundMinorID = SoundMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.LipsyncAppObserverSubsystem.IsSpeakingCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAppCharCategoryType                    CharcterCategoryType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULipsyncAppObserverSubsystem::IsSpeakingCharacter(EAppCharCategoryType CharcterCategoryType, int32 CharaIndexID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsyncAppObserverSubsystem", "IsSpeakingCharacter");

	Params::LipsyncAppObserverSubsystem_IsSpeakingCharacter Parms{};

	Parms.CharcterCategoryType = CharcterCategoryType;
	Parms.CharaIndexID = CharaIndexID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.LipsyncAppObserverSubsystem.StartSpeakCharacter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EAppCharCategoryType                    CharcterCategoryType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SoundMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SoundMinorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverride                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULipsyncAppObserverSubsystem::StartSpeakCharacter(EAppCharCategoryType CharcterCategoryType, int32 CharaIndexID, int32 SoundMajorID, int32 SoundMinorID, bool bOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsyncAppObserverSubsystem", "StartSpeakCharacter");

	Params::LipsyncAppObserverSubsystem_StartSpeakCharacter Parms{};

	Parms.CharcterCategoryType = CharcterCategoryType;
	Parms.CharaIndexID = CharaIndexID;
	Parms.SoundMajorID = SoundMajorID;
	Parms.SoundMinorID = SoundMinorID;
	Parms.bOverride = bOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.LipsyncAppObserverSubsystem.StopAllSpeakCharacter
// (Final, Native, Public, BlueprintCallable)

void ULipsyncAppObserverSubsystem::StopAllSpeakCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LipsyncAppObserverSubsystem", "StopAllSpeakCharacter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.LoaderActor.OnLoadCompleted
// (Final, Native, Protected, BlueprintCallable)

void ALoaderActor::OnLoadCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoaderActor", "OnLoadCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.LoaderActor.OnLoadFailed
// (Final, Native, Protected, BlueprintCallable)

void ALoaderActor::OnLoadFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoaderActor", "OnLoadFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailActor.OnFinishedScr
// (Final, Native, Private)
// Parameters:
// int32                                   ExitType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMailActor::OnFinishedScr(int32 ExitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailActor", "OnFinishedScr");

	Params::MailActor_OnFinishedScr Parms{};

	Parms.ExitType = ExitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailDraw.ConvFrameToTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InFrame                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AMailDraw::ConvFrameToTime(int32 InFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "ConvFrameToTime");

	Params::MailDraw_ConvFrameToTime Parms{};

	Parms.InFrame = InFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.DrawListMailSenderText
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMailDraw::DrawListMailSenderText(int32 InIndex, const struct FVector2D& InPos, const struct FColor& InColor, float InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "DrawListMailSenderText");

	Params::MailDraw_DrawListMailSenderText Parms{};

	Parms.InIndex = InIndex;
	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.InScale = InScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailDraw.DrawListMailTitleText
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMailDraw::DrawListMailTitleText(int32 InIndex, const struct FVector2D& InPos, const struct FColor& InColor, float InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "DrawListMailTitleText");

	Params::MailDraw_DrawListMailTitleText Parms{};

	Parms.InIndex = InIndex;
	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.InScale = InScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailDraw.DrawMailMainText
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMailDraw::DrawMailMainText(const struct FVector2D& InPos, const struct FColor& InColor, float InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "DrawMailMainText");

	Params::MailDraw_DrawMailMainText Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.InScale = InScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailDraw.DrawMailSenderText
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMailDraw::DrawMailSenderText(const struct FVector2D& InPos, const struct FColor& InColor, float InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "DrawMailSenderText");

	Params::MailDraw_DrawMailSenderText Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.InScale = InScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailDraw.DrawMailTitleText
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InScale                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMailDraw::DrawMailTitleText(const struct FVector2D& InPos, const struct FColor& InColor, float InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "DrawMailTitleText");

	Params::MailDraw_DrawMailTitleText Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.InScale = InScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailDraw.DrawSprForUIResources
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SprID                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUICommonResource                       ResourceType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMailDraw::DrawSprForUIResources(const struct FVector2D& InPos, const struct FColor& InColor, int32 SprID, const struct FVector2D& Scale, float Angle, EUICommonResource ResourceType, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "DrawSprForUIResources");

	Params::MailDraw_DrawSprForUIResources Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.SprID = SprID;
	Parms.Scale = std::move(Scale);
	Parms.Angle = Angle;
	Parms.ResourceType = ResourceType;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailDraw.GetAdjustedLayoutPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EMailLayout                             InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        InDefaultPos                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AMailDraw::GetAdjustedLayoutPosition(EMailLayout InLayoutId, const struct FVector2D& InDefaultPos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "GetAdjustedLayoutPosition");

	Params::MailDraw_GetAdjustedLayoutPosition Parms{};

	Parms.InLayoutId = InLayoutId;
	Parms.InDefaultPos = std::move(InDefaultPos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.GetListIsNew
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::GetListIsNew(int32 InIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "GetListIsNew");

	Params::MailDraw_GetListIsNew Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.GetListIsRead
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::GetListIsRead(int32 InIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "GetListIsRead");

	Params::MailDraw_GetListIsRead Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.GetListSenderID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMailDraw::GetListSenderID(int32 InIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "GetListSenderID");

	Params::MailDraw_GetListSenderID Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.GetMailSenderID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AMailDraw::GetMailSenderID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "GetMailSenderID");

	Params::MailDraw_GetMailSenderID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.InitDraw_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::InitDraw_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "InitDraw_IN");

	Params::MailDraw_InitDraw_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.InitDraw_List
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::InitDraw_List()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "InitDraw_List");

	Params::MailDraw_InitDraw_List Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.InitDraw_Mail
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::InitDraw_Mail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "InitDraw_Mail");

	Params::MailDraw_InitDraw_Mail Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.InitDraw_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::InitDraw_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "InitDraw_Out");

	Params::MailDraw_InitDraw_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.IsIsDeterminedByCross
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::IsIsDeterminedByCross()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "IsIsDeterminedByCross");

	Params::MailDraw_IsIsDeterminedByCross Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.OneTimeLockInput
// (Final, Native, Public, BlueprintCallable)

void AMailDraw::OneTimeLockInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "OneTimeLockInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailDraw.SetMailListIsNew
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InIsNew                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMailDraw::SetMailListIsNew(int32 InIndex, bool InIsNew)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "SetMailListIsNew");

	Params::MailDraw_SetMailListIsNew Parms{};

	Parms.InIndex = InIndex;
	Parms.InIsNew = InIsNew;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailDraw.SetScrollBarBaseCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScrollRange                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScrollPos                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DrawListNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxListNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMailDraw::SetScrollBarBaseCollision(float X, float Y, float Width, float Height, float ScrollRange, int32 ScrollPos, int32 DrawListNum, int32 MaxListNum, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "SetScrollBarBaseCollision");

	Params::MailDraw_SetScrollBarBaseCollision Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.ScrollRange = ScrollRange;
	Parms.ScrollPos = ScrollPos;
	Parms.DrawListNum = DrawListNum;
	Parms.MaxListNum = MaxListNum;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailDraw.SetScrollBarSliderCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ScrollRange                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ScrollPos                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DrawListNum                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxListNum                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMailDraw::SetScrollBarSliderCollision(float X, float Y, float Width, float Height, float ScrollRange, int32 ScrollPos, int32 DrawListNum, int32 MaxListNum, EUI_DRAW_POINT DrawPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "SetScrollBarSliderCollision");

	Params::MailDraw_SetScrollBarSliderCollision Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.ScrollRange = ScrollRange;
	Parms.ScrollPos = ScrollPos;
	Parms.DrawListNum = DrawListNum;
	Parms.MaxListNum = MaxListNum;
	Parms.DrawPoint = DrawPoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailDraw.SetTouchCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUI_DRAW_POINT                          DrawPoint                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OnList                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMailDraw::SetTouchCollision(int32 Index_0, float X, float Y, float Width, float Height, EUI_DRAW_POINT DrawPoint, bool OnList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "SetTouchCollision");

	Params::MailDraw_SetTouchCollision Parms{};

	Parms.Index_0 = Index_0;
	Parms.X = X;
	Parms.Y = Y;
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.DrawPoint = DrawPoint;
	Parms.OnList = OnList;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MailDraw.StateDraw_BG
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::StateDraw_BG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "StateDraw_BG");

	Params::MailDraw_StateDraw_BG Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.StateDraw_Frame
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::StateDraw_Frame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "StateDraw_Frame");

	Params::MailDraw_StateDraw_Frame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.StateDraw_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::StateDraw_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "StateDraw_IN");

	Params::MailDraw_StateDraw_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.StateDraw_List
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::StateDraw_List()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "StateDraw_List");

	Params::MailDraw_StateDraw_List Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.StateDraw_Mail
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::StateDraw_Mail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "StateDraw_Mail");

	Params::MailDraw_StateDraw_Mail Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.StateDraw_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::StateDraw_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "StateDraw_Out");

	Params::MailDraw_StateDraw_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.MailDraw.TimeWithinRangeFrame
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   NowTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMailDraw::TimeWithinRangeFrame(float NowTime, int32 StartFrame, int32 EndFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MailDraw", "TimeWithinRangeFrame");

	Params::MailDraw_TimeWithinRangeFrame Parms{};

	Parms.NowTime = NowTime;
	Parms.StartFrame = StartFrame;
	Parms.EndFrame = EndFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.TestTriggerBox.OnComponentOverlapBegin
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ATestTriggerBox::OnComponentOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestTriggerBox", "OnComponentOverlapBegin");

	Params::TestTriggerBox_OnComponentOverlapBegin Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TestTriggerBox.OnComponentOverlapEnd
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ATestTriggerBox::OnComponentOverlapEnd(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestTriggerBox", "OnComponentOverlapEnd");

	Params::TestTriggerBox_OnComponentOverlapEnd Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TestAnimInst.AnimChange
// (Event, Public, BlueprintEvent)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestAnimInst::AnimChange(int32 Type, int32 Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInst", "AnimChange");

	Params::TestAnimInst_AnimChange Parms{};

	Parms.Type = Type;
	Parms.Param = Param;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.TestAnimInst.TestFunction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Param                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTestAnimInst::TestFunction(int32 Type, int32 Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestAnimInst", "TestFunction");

	Params::TestAnimInst_TestFunction Parms{};

	Parms.Type = Type;
	Parms.Param = Param;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CollisionActor.OnBeginOverlapSphere
// (Final, Native, Public, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UCollisionActor::OnBeginOverlapSphere(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionActor", "OnBeginOverlapSphere");

	Params::CollisionActor_OnBeginOverlapSphere Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.CollisionActor.OnEndOverlapSphere
// (Final, Native, Public)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCollisionActor::OnEndOverlapSphere(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CollisionActor", "OnEndOverlapSphere");

	Params::CollisionActor_OnEndOverlapSphere Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MovieCuePointFunction.MovieBindCuePointFunction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UManaComponent*                   ManaComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovieCuePointFunction::MovieBindCuePointFunction(class UManaComponent* ManaComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MovieCuePointFunction", "MovieBindCuePointFunction");

	Params::MovieCuePointFunction_MovieBindCuePointFunction Parms{};

	Parms.ManaComponent = ManaComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MovieCuePointFunction.MovieCheckTrackId
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UManaComponent*                   ManaComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TrackId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMovieCuePointFunction::MovieCheckTrackId(class UManaComponent* ManaComponent, int32 TrackId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MovieCuePointFunction", "MovieCheckTrackId");

	Params::MovieCuePointFunction_MovieCheckTrackId Parms{};

	Parms.ManaComponent = ManaComponent;
	Parms.TrackId = TrackId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MovieCuePointFunction.MovieGetLanguageTrack
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMovieCuePointFunction::MovieGetLanguageTrack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MovieCuePointFunction", "MovieGetLanguageTrack");

	Params::MovieCuePointFunction_MovieGetLanguageTrack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MovieCuePointFunction.MovieIsLoadedAssetForCuePoint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMovieCuePointFunction::MovieIsLoadedAssetForCuePoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MovieCuePointFunction", "MovieIsLoadedAssetForCuePoint");

	Params::MovieCuePointFunction_MovieIsLoadedAssetForCuePoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MovieCuePointFunction.MovieLoadAssetForCuePoint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UManaComponent*                   ManaComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovieCuePointFunction::MovieLoadAssetForCuePoint(class UManaComponent* ManaComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MovieCuePointFunction", "MovieLoadAssetForCuePoint");

	Params::MovieCuePointFunction_MovieLoadAssetForCuePoint Parms{};

	Parms.ManaComponent = ManaComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MovieCuePointFunction.MovieLoadAssetStart
// (Final, Native, Static, Public, BlueprintCallable)

void UMovieCuePointFunction::MovieLoadAssetStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MovieCuePointFunction", "MovieLoadAssetStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MovieCuePointFunction.MovieSetMetaDataWorkAllocator
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UManaComponent*                   ManaComponent                                          (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovieCuePointFunction::MovieSetMetaDataWorkAllocator(class UManaComponent* ManaComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MovieCuePointFunction", "MovieSetMetaDataWorkAllocator");

	Params::MovieCuePointFunction_MovieSetMetaDataWorkAllocator Parms{};

	Parms.ManaComponent = ManaComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePanel.SetOT
// (Final, Native, Public)
// Parameters:
// int32                                   OT                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMoviePanel::SetOT(int32 OT)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePanel", "SetOT");

	Params::MoviePanel_SetOT Parms{};

	Parms.OT = OT;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorBase.CallOpenSourceForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AMoviePlayActorBase::CallOpenSourceForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorBase", "CallOpenSourceForBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.MoviePlayActorBase.Close
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ForceClose                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoviePlayActorBase::Close(bool ForceClose)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorBase", "Close");

	Params::MoviePlayActorBase_Close Parms{};

	Parms.ForceClose = ForceClose;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorBase.MovieEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AMoviePlayActorBase::MovieEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorBase", "MovieEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorBase.MoviePlay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           OpenedUrl                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoviePlayActorBase::MoviePlay(const class FString& OpenedUrl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorBase", "MoviePlay");

	Params::MoviePlayActorBase_MoviePlay Parms{};

	Parms.OpenedUrl = std::move(OpenedUrl);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorBase.Remove
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AMoviePlayActorBase::Remove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorBase", "Remove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorBase.RequestMovie
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoviePlayActorBase::RequestMovie(int32 ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorBase", "RequestMovie");

	Params::MoviePlayActorBase_RequestMovie Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorBase.SetManaComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UManaComponent*                   InManaComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoviePlayActorBase::SetManaComponent(class UManaComponent* InManaComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorBase", "SetManaComponent");

	Params::MoviePlayActorBase_SetManaComponent Parms{};

	Parms.InManaComponent = InManaComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorBase.Start
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void AMoviePlayActorBase::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorBase", "Start");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActor.CheckInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActor::CheckInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePlayActor", "CheckInstance");

	Params::MoviePlayActor_CheckInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActor.CreateInstance
// (Final, Native, Static, Public, BlueprintCallable)

void AMoviePlayActor::CreateInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePlayActor", "CreateInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActor.GetInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMoviePlayActor*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMoviePlayActor* AMoviePlayActor::GetInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePlayActor", "GetInstance");

	Params::MoviePlayActor_GetInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActor.SyncInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActor::SyncInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePlayActor", "SyncInstance");

	Params::MoviePlayActor_SyncInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActor.CanDestroy
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActor::CanDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActor", "CanDestroy");

	Params::MoviePlayActor_CanDestroy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActor.GetBGMFlg
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActor::GetBGMFlg()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActor", "GetBGMFlg");

	Params::MoviePlayActor_GetBGMFlg Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActor.IsBattleWipe
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActor::IsBattleWipe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActor", "IsBattleWipe");

	Params::MoviePlayActor_IsBattleWipe Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActor.IsPause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActor::IsPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActor", "IsPause");

	Params::MoviePlayActor_IsPause Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActor.IsReserveDestroy
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActor::IsReserveDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActor", "IsReserveDestroy");

	Params::MoviePlayActor_IsReserveDestroy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActor.Pause
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPause                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoviePlayActor::Pause(bool IsPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActor", "Pause");

	Params::MoviePlayActor_Pause Parms{};

	Parms.IsPause = IsPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActor.ReserveDestroy
// (Final, Native, Public, BlueprintCallable)

void AMoviePlayActor::ReserveDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActor", "ReserveDestroy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActor.VisibleKeyHelp
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsVisible                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoviePlayActor::VisibleKeyHelp(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActor", "VisibleKeyHelp");

	Params::MoviePlayActor_VisibleKeyHelp Parms{};

	Parms.bIsVisible = bIsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActor.GetPlayBgmOnMovieEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActor::GetPlayBgmOnMovieEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActor", "GetPlayBgmOnMovieEnd");

	Params::MoviePlayActor_GetPlayBgmOnMovieEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActorBattle.CheckBattleMovieInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActorBattle::CheckBattleMovieInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePlayActorBattle", "CheckBattleMovieInstance");

	Params::MoviePlayActorBattle_CheckBattleMovieInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActorBattle.CreateBattleMovieInstance
// (Final, Native, Static, Public, BlueprintCallable)

void AMoviePlayActorBattle::CreateBattleMovieInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePlayActorBattle", "CreateBattleMovieInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorBattle.GetBattleMovieInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMoviePlayActorBattle*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMoviePlayActorBattle* AMoviePlayActorBattle::GetBattleMovieInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePlayActorBattle", "GetBattleMovieInstance");

	Params::MoviePlayActorBattle_GetBattleMovieInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActorBattle.SyncBattleMovieInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActorBattle::SyncBattleMovieInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePlayActorBattle", "SyncBattleMovieInstance");

	Params::MoviePlayActorBattle_SyncBattleMovieInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActorBattle.CheckPrepareForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActorBattle::CheckPrepareForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorBattle", "CheckPrepareForBP");

	Params::MoviePlayActorBattle_CheckPrepareForBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActorBattle.MaterialStartForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AMoviePlayActorBattle::MaterialStartForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorBattle", "MaterialStartForBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.MoviePlayActorBattle.RequestRemoveMaterialsForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)

void AMoviePlayActorBattle::RequestRemoveMaterialsForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorBattle", "RequestRemoveMaterialsForBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.MoviePlayActorBattle.RequestStopperForBP
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoviePlayActorBattle::RequestStopperForBP(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorBattle", "RequestStopperForBP");

	Params::MoviePlayActorBattle_RequestStopperForBP Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.SoundMonitoring.checkReadBank
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReadBank                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASoundMonitoring::CheckReadBank(int32 ReadBank)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitoring", "checkReadBank");

	Params::SoundMonitoring_CheckReadBank Parms{};

	Parms.ReadBank = ReadBank;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundMonitoring.checkReadyPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASoundMonitoring::CheckReadyPlayer(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitoring", "checkReadyPlayer");

	Params::SoundMonitoring_CheckReadyPlayer Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundMonitoring.checkReadySoundMonitor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASoundMonitoring::CheckReadySoundMonitor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitoring", "checkReadySoundMonitor");

	Params::SoundMonitoring_CheckReadySoundMonitor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundMonitoring.createPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EsoundPlayerType                        Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASoundMonitoring::CreatePlayer(int32 PlayerId, EsoundPlayerType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitoring", "createPlayer");

	Params::SoundMonitoring_CreatePlayer Parms{};

	Parms.PlayerId = PlayerId;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundMonitoring.fadeInBGMCategorySoundMonitor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FadeInTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeInVolume                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASoundMonitoring::FadeInBGMCategorySoundMonitor(int32 FadeInTime, float FadeInVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitoring", "fadeInBGMCategorySoundMonitor");

	Params::SoundMonitoring_FadeInBGMCategorySoundMonitor Parms{};

	Parms.FadeInTime = FadeInTime;
	Parms.FadeInVolume = FadeInVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundMonitoring.fadeOutBGMCategorySoundMonitor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FadeOutTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeOutVolume                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASoundMonitoring::FadeOutBGMCategorySoundMonitor(int32 FadeOutTime, float FadeOutVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitoring", "fadeOutBGMCategorySoundMonitor");

	Params::SoundMonitoring_FadeOutBGMCategorySoundMonitor Parms{};

	Parms.FadeOutTime = FadeOutTime;
	Parms.FadeOutVolume = FadeOutVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundMonitoring.playCueID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASoundMonitoring::PlayCueID(int32 PlayerId, int32 CueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitoring", "playCueID");

	Params::SoundMonitoring_PlayCueID Parms{};

	Parms.PlayerId = PlayerId;
	Parms.CueId = CueId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundMonitoring.setReadBankToPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReadBank                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASoundMonitoring::SetReadBankToPlayer(int32 PlayerId, int32 ReadBank)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitoring", "setReadBankToPlayer");

	Params::SoundMonitoring_SetReadBankToPlayer Parms{};

	Parms.PlayerId = PlayerId;
	Parms.ReadBank = ReadBank;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundMonitoring.startFreeAcb
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   bankID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASoundMonitoring::StartFreeAcb(int32 bankID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitoring", "startFreeAcb");

	Params::SoundMonitoring_StartFreeAcb Parms{};

	Parms.bankID = bankID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundMonitoring.startFreePlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASoundMonitoring::StartFreePlayer(int32 PlayerId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitoring", "startFreePlayer");

	Params::SoundMonitoring_StartFreePlayer Parms{};

	Parms.PlayerId = PlayerId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundMonitoring.startReadAcb
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ASoundMonitoring::StartReadAcb(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitoring", "startReadAcb");

	Params::SoundMonitoring_StartReadAcb Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActorEventSequenceTrack.CheckInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActorEventSequenceTrack::CheckInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePlayActorEventSequenceTrack", "CheckInstance");

	Params::MoviePlayActorEventSequenceTrack_CheckInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActorEventSequenceTrack.CreateInstance
// (Final, Native, Static, Public, BlueprintCallable)

void AMoviePlayActorEventSequenceTrack::CreateInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePlayActorEventSequenceTrack", "CreateInstance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorEventSequenceTrack.GetInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AMoviePlayActorEventSequenceTrack*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AMoviePlayActorEventSequenceTrack* AMoviePlayActorEventSequenceTrack::GetInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePlayActorEventSequenceTrack", "GetInstance");

	Params::MoviePlayActorEventSequenceTrack_GetInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActorEventSequenceTrack.SyncInstance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActorEventSequenceTrack::SyncInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MoviePlayActorEventSequenceTrack", "SyncInstance");

	Params::MoviePlayActorEventSequenceTrack_SyncInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActorEventSequenceTrack.IsPause_Main220040
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AMoviePlayActorEventSequenceTrack::IsPause_Main220040()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorEventSequenceTrack", "IsPause_Main220040");

	Params::MoviePlayActorEventSequenceTrack_IsPause_Main220040 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.MoviePlayActorEventSequenceTrack.OnBeginPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UManaComponent*                   InManaComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoviePlayActorEventSequenceTrack::OnBeginPlay(class UManaComponent* InManaComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorEventSequenceTrack", "OnBeginPlay");

	Params::MoviePlayActorEventSequenceTrack_OnBeginPlay Parms{};

	Parms.InManaComponent = InManaComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorEventSequenceTrack.OnSeekCompleted
// (Final, Native, Public)
// Parameters:
// int32                                   InFrameNumber                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UManaComponent*                   InManaComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoviePlayActorEventSequenceTrack::OnSeekCompleted(int32 InFrameNumber, class UManaComponent* InManaComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorEventSequenceTrack", "OnSeekCompleted");

	Params::MoviePlayActorEventSequenceTrack_OnSeekCompleted Parms{};

	Parms.InFrameNumber = InFrameNumber;
	Parms.InManaComponent = InManaComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorEventSequenceTrack.OnSequenceUpdate
// (Final, Native, Public)
// Parameters:
// struct FQualifiedFrameTime              InCurrentTime                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQualifiedFrameTime              InPreviousTime                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoviePlayActorEventSequenceTrack::OnSequenceUpdate(const struct FQualifiedFrameTime& InCurrentTime, const struct FQualifiedFrameTime& InPreviousTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorEventSequenceTrack", "OnSequenceUpdate");

	Params::MoviePlayActorEventSequenceTrack_OnSequenceUpdate Parms{};

	Parms.InCurrentTime = std::move(InCurrentTime);
	Parms.InPreviousTime = std::move(InPreviousTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorEventSequenceTrack.OnTextureUpdated
// (Final, Native, Public)
// Parameters:
// int32                                   InFrameNumber                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UManaComponent*                   InManaComponent                                        (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoviePlayActorEventSequenceTrack::OnTextureUpdated(int32 InFrameNumber, class UManaComponent* InManaComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorEventSequenceTrack", "OnTextureUpdated");

	Params::MoviePlayActorEventSequenceTrack_OnTextureUpdated Parms{};

	Parms.InFrameNumber = InFrameNumber;
	Parms.InManaComponent = InManaComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.MoviePlayActorEventSequenceTrack.SetPause_Main220040
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AMoviePlayActorEventSequenceTrack::SetPause_Main220040(bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MoviePlayActorEventSequenceTrack", "SetPause_Main220040");

	Params::MoviePlayActorEventSequenceTrack_SetPause_Main220040 Parms{};

	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.NiagaraCameraAttachComponent.GetParticleComponent
// (Final, Native, Public)
// Parameters:
// class UNiagaraComponent*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UNiagaraComponent* UNiagaraCameraAttachComponent::GetParticleComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NiagaraCameraAttachComponent", "GetParticleComponent");

	Params::NiagaraCameraAttachComponent_GetParticleComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.NiagaraCameraAttachComponent.IsAssetLoaded
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNiagaraCameraAttachComponent::IsAssetLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NiagaraCameraAttachComponent", "IsAssetLoaded");

	Params::NiagaraCameraAttachComponent_IsAssetLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.NiagaraCameraAttachComponent.IsCallDestroy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNiagaraCameraAttachComponent::IsCallDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NiagaraCameraAttachComponent", "IsCallDestroy");

	Params::NiagaraCameraAttachComponent_IsCallDestroy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.NiagaraCameraAttachComponent.OnComplete
// (Final, Native, Private)
// Parameters:
// class UNiagaraComponent*                PSystem                                                (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNiagaraCameraAttachComponent::OnComplete(class UNiagaraComponent* PSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NiagaraCameraAttachComponent", "OnComplete");

	Params::NiagaraCameraAttachComponent_OnComplete Parms{};

	Parms.PSystem = PSystem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.NiagaraCameraAttachComponent.OnLoadSystem
// (Final, Native, Private)

void UNiagaraCameraAttachComponent::OnLoadSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NiagaraCameraAttachComponent", "OnLoadSystem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.NiagaraCameraAttachComponent.PlayEffect
// (Final, Native, Public, BlueprintCallable)

void UNiagaraCameraAttachComponent::PlayEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NiagaraCameraAttachComponent", "PlayEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.NiagaraCameraAttachComponent.SetAttachCam
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNiagaraCameraAttachComponent::SetAttachCam(class USceneComponent* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NiagaraCameraAttachComponent", "SetAttachCam");

	Params::NiagaraCameraAttachComponent_SetAttachCam Parms{};

	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PadRumbleSequencer.RumbleStartAsset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UForceFeedbackEffect*             PRumble                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLoop                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APadRumbleSequencer::RumbleStartAsset(class UForceFeedbackEffect* PRumble, bool IsLoop)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PadRumbleSequencer", "RumbleStartAsset");

	Params::PadRumbleSequencer_RumbleStartAsset Parms{};

	Parms.PRumble = PRumble;
	Parms.IsLoop = IsLoop;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PadRumbleSequencer.RumbleStartLarge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Power                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Frame                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WaitFrame                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalFram                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APadRumbleSequencer::RumbleStartLarge(int32 Power, int32 Frame, int32 WaitFrame, int32 Num, int32 TotalFram)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PadRumbleSequencer", "RumbleStartLarge");

	Params::PadRumbleSequencer_RumbleStartLarge Parms{};

	Parms.Power = Power;
	Parms.Frame = Frame;
	Parms.WaitFrame = WaitFrame;
	Parms.Num = Num;
	Parms.TotalFram = TotalFram;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PadRumbleSequencer.RumbleStartSmall
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Frame                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WaitFrame                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Num                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotalFram                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APadRumbleSequencer::RumbleStartSmall(int32 Frame, int32 WaitFrame, int32 Num, int32 TotalFram)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PadRumbleSequencer", "RumbleStartSmall");

	Params::PadRumbleSequencer_RumbleStartSmall Parms{};

	Parms.Frame = Frame;
	Parms.WaitFrame = WaitFrame;
	Parms.Num = Num;
	Parms.TotalFram = TotalFram;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PadRumbleSequencer.RumbleStopAsset
// (Final, Native, Public, BlueprintCallable)

void APadRumbleSequencer::RumbleStopAsset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PadRumbleSequencer", "RumbleStopAsset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PadRumbleSequencer.RumbleStopLarge
// (Final, Native, Public, BlueprintCallable)

void APadRumbleSequencer::RumbleStopLarge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PadRumbleSequencer", "RumbleStopLarge");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PadRumbleSequencer.RumbleStopSmall
// (Final, Native, Public, BlueprintCallable)

void APadRumbleSequencer::RumbleStopSmall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PadRumbleSequencer", "RumbleStopSmall");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.RightsNotationDraw.Update
// (Final, Native, Public, BlueprintCallable)

void ARightsNotationDraw::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RightsNotationDraw", "Update");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.ScrActor.ForcedStopScr
// (Final, Native, Public)

void AScrActor::ForcedStopScr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScrActor", "ForcedStopScr");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.ApplyDspBusSnapshot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SnapshotName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Millisecond                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::ApplyDspBusSnapshot(const class FString& SnapshotName, int32 Millisecond)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "ApplyDspBusSnapshot");

	Params::SoundApp_ApplyDspBusSnapshot Parms{};

	Parms.SnapshotName = std::move(SnapshotName);
	Parms.Millisecond = Millisecond;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.AttachDspBusSetting
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SettingName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::AttachDspBusSetting(const class FString& SettingName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "AttachDspBusSetting");

	Params::SoundApp_AttachDspBusSetting Parms{};

	Parms.SettingName = std::move(SettingName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.CheckPauseEventVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::CheckPauseEventVoice(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "CheckPauseEventVoice");

	Params::SoundApp_CheckPauseEventVoice Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.DetachDspBusSetting
// (Final, Native, Static, Public, BlueprintCallable)

void USoundApp::DetachDspBusSetting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "DetachDspBusSetting");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.FadeInBGM
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FadeOutFrame                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::FadeInBGM(int32 FadeOutFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "FadeInBGM");

	Params::SoundApp_FadeInBGM Parms{};

	Parms.FadeOutFrame = FadeOutFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.FadeInCategoryBGM
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FadeInFrame                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeOutVolume                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::FadeInCategoryBGM(int32 FadeInFrame, float FadeOutVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "FadeInCategoryBGM");

	Params::SoundApp_FadeInCategoryBGM Parms{};

	Parms.FadeInFrame = FadeInFrame;
	Parms.FadeOutVolume = FadeOutVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.FadeoutBGM
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FadeOutFrame                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::FadeoutBGM(int32 FadeOutFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "FadeoutBGM");

	Params::SoundApp_FadeoutBGM Parms{};

	Parms.FadeOutFrame = FadeOutFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.FadeOutCategoryBGM
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FadeOutFrame                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeOutVolume                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::FadeOutCategoryBGM(int32 FadeOutFrame, float FadeOutVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "FadeOutCategoryBGM");

	Params::SoundApp_FadeOutCategoryBGM Parms{};

	Parms.FadeOutFrame = FadeOutFrame;
	Parms.FadeOutVolume = FadeOutVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.FadeOutComSE
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   FadeOutFrame                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::FadeOutComSE(int32 FadeOutFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "FadeOutComSE");

	Params::SoundApp_FadeOutComSE Parms{};

	Parms.FadeOutFrame = FadeOutFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.GetCurrentAppliedSnapshot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USoundApp::GetCurrentAppliedSnapshot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "GetCurrentAppliedSnapshot");

	Params::SoundApp_GetCurrentAppliedSnapshot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.GetLength
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   MajorId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinorId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USoundApp::GetLength(int32 MajorId, int32 MinorId, int32 CueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "GetLength");

	Params::SoundApp_GetLength Parms{};

	Parms.MajorId = MajorId;
	Parms.MinorId = MinorId;
	Parms.CueId = CueId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.getLipsyncLiveInfo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCriLipsMorphTargetBlendAmountAsJapaneseReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FCriLipsMorphTargetBlendAmountAsJapanese USoundApp::GetLipsyncLiveInfo(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "getLipsyncLiveInfo");

	Params::SoundApp_GetLipsyncLiveInfo Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.GetNowPlayBGMQueID
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USoundApp::GetNowPlayBGMQueID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "GetNowPlayBGMQueID");

	Params::SoundApp_GetNowPlayBGMQueID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.GetTime
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   MajorId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinorId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USoundApp::GetTime(int32 MajorId, int32 MinorId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "GetTime");

	Params::SoundApp_GetTime Parms{};

	Parms.MajorId = MajorId;
	Parms.MinorId = MinorId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.Init
// (Final, Native, Static, Public, BlueprintCallable)

void USoundApp::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.IsActiveBackLogVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsActiveBackLogVoiceData(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsActiveBackLogVoiceData");

	Params::SoundApp_IsActiveBackLogVoiceData Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsActiveBattleEventVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsActiveBattleEventVoiceData(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsActiveBattleEventVoiceData");

	Params::SoundApp_IsActiveBattleEventVoiceData Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsActiveEventVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsActiveEventVoiceData(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsActiveEventVoiceData");

	Params::SoundApp_IsActiveEventVoiceData Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsActiveFacilityVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsActiveFacilityVoiceData(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsActiveFacilityVoiceData");

	Params::SoundApp_IsActiveFacilityVoiceData Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsPlayingBackLogVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsPlayingBackLogVoice(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsPlayingBackLogVoice");

	Params::SoundApp_IsPlayingBackLogVoice Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsPlayingBattleEventVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsPlayingBattleEventVoice(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsPlayingBattleEventVoice");

	Params::SoundApp_IsPlayingBattleEventVoice Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsPlayingComSE
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsPlayingComSE(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsPlayingComSE");

	Params::SoundApp_IsPlayingComSE Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsPlayingEventVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsPlayingEventVoice(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsPlayingEventVoice");

	Params::SoundApp_IsPlayingEventVoice Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsPlayingFacilityVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    UseAttenuator                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsPlayingFacilityVoice(bool UseAttenuator, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsPlayingFacilityVoice");

	Params::SoundApp_IsPlayingFacilityVoice Parms{};

	Parms.UseAttenuator = UseAttenuator;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsPlayingSingleVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsPlayingSingleVoice(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsPlayingSingleVoice");

	Params::SoundApp_IsPlayingSingleVoice Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsSetupEndBackLogVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsSetupEndBackLogVoiceData(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsSetupEndBackLogVoiceData");

	Params::SoundApp_IsSetupEndBackLogVoiceData Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsSetupEndBattleEventVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsSetupEndBattleEventVoiceData(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsSetupEndBattleEventVoiceData");

	Params::SoundApp_IsSetupEndBattleEventVoiceData Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsSetupEndEventVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsSetupEndEventVoiceData(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsSetupEndEventVoiceData");

	Params::SoundApp_IsSetupEndEventVoiceData Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.IsSetupEndFacilityVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::IsSetupEndFacilityVoiceData(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "IsSetupEndFacilityVoiceData");

	Params::SoundApp_IsSetupEndFacilityVoiceData Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.PauseEventVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PauseEventVoice(int32 BankNum, bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PauseEventVoice");

	Params::SoundApp_PauseEventVoice Parms{};

	Parms.BankNum = BankNum;
	Parms.bPause = bPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayBackLogVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayBackLogVoice(int32 CueId, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayBackLogVoice");

	Params::SoundApp_PlayBackLogVoice Parms{};

	Parms.CueId = CueId;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayBattleBGM
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayBattleBGM(int32 CueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayBattleBGM");

	Params::SoundApp_PlayBattleBGM Parms{};

	Parms.CueId = CueId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayBattleEventVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayBattleEventVoice(int32 CueId, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayBattleEventVoice");

	Params::SoundApp_PlayBattleEventVoice Parms{};

	Parms.CueId = CueId;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayBattleEventVoiceWithLipsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EAppCharCategoryType                    CategoryType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayBattleEventVoiceWithLipsync(EAppCharCategoryType CategoryType, int32 CharaIndexID, int32 CueId, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayBattleEventVoiceWithLipsync");

	Params::SoundApp_PlayBattleEventVoiceWithLipsync Parms{};

	Parms.CategoryType = CategoryType;
	Parms.CharaIndexID = CharaIndexID;
	Parms.CueId = CueId;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayBGM
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsForcePlay                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayBGM(int32 CueId, bool IsForcePlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayBGM");

	Params::SoundApp_PlayBGM Parms{};

	Parms.CueId = CueId;
	Parms.IsForcePlay = IsForcePlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayComSE
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayComSE(int32 CueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayComSE");

	Params::SoundApp_PlayComSE Parms{};

	Parms.CueId = CueId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayEventSE
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayEventSE(int32 CueId, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayEventSE");

	Params::SoundApp_PlayEventSE Parms{};

	Parms.CueId = CueId;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayEventVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayEventVoice(int32 CueId, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayEventVoice");

	Params::SoundApp_PlayEventVoice Parms{};

	Parms.CueId = CueId;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayEventVoiceWithLipsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EAppCharCategoryType                    CharcterCategoryType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayEventVoiceWithLipsync(EAppCharCategoryType CharcterCategoryType, int32 CharaIndexID, int32 CueId, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayEventVoiceWithLipsync");

	Params::SoundApp_PlayEventVoiceWithLipsync Parms{};

	Parms.CharcterCategoryType = CharcterCategoryType;
	Parms.CharaIndexID = CharaIndexID;
	Parms.CueId = CueId;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayEventVoiceWithSimpleLipCustomParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCharacterSimpleLipsAnimAppParam SimpleLipsParam                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayEventVoiceWithSimpleLipCustomParam(const struct FCharacterSimpleLipsAnimAppParam& SimpleLipsParam, int32 CueId, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayEventVoiceWithSimpleLipCustomParam");

	Params::SoundApp_PlayEventVoiceWithSimpleLipCustomParam Parms{};

	Parms.SimpleLipsParam = std::move(SimpleLipsParam);
	Parms.CueId = CueId;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayFacilityVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAttenuator                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseLips                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayFacilityVoice(int32 CueId, int32 CharaIndexID, bool UseAttenuator, int32 BankNum, bool UseLips)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayFacilityVoice");

	Params::SoundApp_PlayFacilityVoice Parms{};

	Parms.CueId = CueId;
	Parms.CharaIndexID = CharaIndexID;
	Parms.UseAttenuator = UseAttenuator;
	Parms.BankNum = BankNum;
	Parms.UseLips = UseLips;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlaySingleVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlaySingleVoice(int32 CueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlaySingleVoice");

	Params::SoundApp_PlaySingleVoice Parms{};

	Parms.CueId = CueId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayVoiceWithLipsync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EAppCharCategoryType                    CharcterCategoryType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SoundMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayVoiceWithLipsync(EAppCharCategoryType CharcterCategoryType, int32 CharaIndexID, int32 CueId, int32 SoundMajorID, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayVoiceWithLipsync");

	Params::SoundApp_PlayVoiceWithLipsync Parms{};

	Parms.CharcterCategoryType = CharcterCategoryType;
	Parms.CharaIndexID = CharaIndexID;
	Parms.CueId = CueId;
	Parms.SoundMajorID = SoundMajorID;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.PlayVoiceWithSimpleLipCustomParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FCharacterSimpleLipsAnimAppParam SimpleLipsParam                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SoundMajorID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::PlayVoiceWithSimpleLipCustomParam(const struct FCharacterSimpleLipsAnimAppParam& SimpleLipsParam, int32 CueId, int32 SoundMajorID, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "PlayVoiceWithSimpleLipCustomParam");

	Params::SoundApp_PlayVoiceWithSimpleLipCustomParam Parms{};

	Parms.SimpleLipsParam = std::move(SimpleLipsParam);
	Parms.CueId = CueId;
	Parms.SoundMajorID = SoundMajorID;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.ReleaseBackLogVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    GameInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::ReleaseBackLogVoiceData(class UGameInstance* GameInst, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "ReleaseBackLogVoiceData");

	Params::SoundApp_ReleaseBackLogVoiceData Parms{};

	Parms.GameInst = GameInst;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.ReleaseBattleEventVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    GameInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::ReleaseBattleEventVoiceData(class UGameInstance* GameInst, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "ReleaseBattleEventVoiceData");

	Params::SoundApp_ReleaseBattleEventVoiceData Parms{};

	Parms.GameInst = GameInst;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.ReleaseEventVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    GameInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::ReleaseEventVoiceData(class UGameInstance* GameInst, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "ReleaseEventVoiceData");

	Params::SoundApp_ReleaseEventVoiceData Parms{};

	Parms.GameInst = GameInst;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.ReleaseFacilityVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGameInstance*                    GameInst                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::ReleaseFacilityVoiceData(class UGameInstance* GameInst, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "ReleaseFacilityVoiceData");

	Params::SoundApp_ReleaseFacilityVoiceData Parms{};

	Parms.GameInst = GameInst;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.ReqReadBackLogVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::ReqReadBackLogVoiceData(const class FString& Filename, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "ReqReadBackLogVoiceData");

	Params::SoundApp_ReqReadBackLogVoiceData Parms{};

	Parms.Filename = std::move(Filename);
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.ReqReadBattleEventVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseLipsync                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::ReqReadBattleEventVoiceData(const class FString& Filename, int32 BankNum, bool UseLipsync)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "ReqReadBattleEventVoiceData");

	Params::SoundApp_ReqReadBattleEventVoiceData Parms{};

	Parms.Filename = std::move(Filename);
	Parms.BankNum = BankNum;
	Parms.UseLipsync = UseLipsync;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.ReqReadEventVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::ReqReadEventVoiceData(const class FString& Filename, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "ReqReadEventVoiceData");

	Params::SoundApp_ReqReadEventVoiceData Parms{};

	Parms.Filename = std::move(Filename);
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.ReqReadFacilityVoiceData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USoundApp::ReqReadFacilityVoiceData(const class FString& Filename, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "ReqReadFacilityVoiceData");

	Params::SoundApp_ReqReadFacilityVoiceData Parms{};

	Parms.Filename = std::move(Filename);
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundApp.ResetSelectorLabel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::ResetSelectorLabel(int32 PlayerMajorID, int32 PlayerMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "ResetSelectorLabel");

	Params::SoundApp_ResetSelectorLabel Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.SetAisacByNameBGM
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ControlValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::SetAisacByNameBGM(float ControlValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "SetAisacByNameBGM");

	Params::SoundApp_SetAisacByNameBGM Parms{};

	Parms.ControlValue = ControlValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.SetAisacByNameSE
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ControlValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::SetAisacByNameSE(float ControlValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "SetAisacByNameSE");

	Params::SoundApp_SetAisacByNameSE Parms{};

	Parms.ControlValue = ControlValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.SetAisacByNameVOICE
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// float                                   ControlValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::SetAisacByNameVOICE(float ControlValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "SetAisacByNameVOICE");

	Params::SoundApp_SetAisacByNameVOICE Parms{};

	Parms.ControlValue = ControlValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.SetPausePlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   MajorId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinorId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::SetPausePlayer(int32 MajorId, int32 MinorId, bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "SetPausePlayer");

	Params::SoundApp_SetPausePlayer Parms{};

	Parms.MajorId = MajorId;
	Parms.MinorId = MinorId;
	Parms.bPause = bPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.SetPausePlayerAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::SetPausePlayerAll(bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "SetPausePlayerAll");

	Params::SoundApp_SetPausePlayerAll Parms{};

	Parms.bPause = bPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.SetSelectorLabel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Selector                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Label                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::SetSelectorLabel(int32 PlayerMajorID, int32 PlayerMinorID, const class FString& Selector, const class FString& Label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "SetSelectorLabel");

	Params::SoundApp_SetSelectorLabel Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;
	Parms.Selector = std::move(Selector);
	Parms.Label = std::move(Label);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.SetSystemPausePlayerAll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    bPause                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::SetSystemPausePlayerAll(bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "SetSystemPausePlayerAll");

	Params::SoundApp_SetSystemPausePlayerAll Parms{};

	Parms.bPause = bPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.StopBackLogVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::StopBackLogVoice(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "StopBackLogVoice");

	Params::SoundApp_StopBackLogVoice Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.StopBattleEventVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::StopBattleEventVoice(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "StopBattleEventVoice");

	Params::SoundApp_StopBattleEventVoice Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.StopBGM
// (Final, Native, Static, Public, BlueprintCallable)

void USoundApp::StopBGM()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "StopBGM");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.StopBGM_IMD
// (Final, Native, Static, Public, BlueprintCallable)

void USoundApp::StopBGM_IMD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "StopBGM_IMD");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.StopComSE
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::StopComSE(int32 CueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "StopComSE");

	Params::SoundApp_StopComSE Parms{};

	Parms.CueId = CueId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.StopEventSE
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::StopEventSE(int32 CueId, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "StopEventSE");

	Params::SoundApp_StopEventSE Parms{};

	Parms.CueId = CueId;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.StopEventVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::StopEventVoice(int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "StopEventVoice");

	Params::SoundApp_StopEventVoice Parms{};

	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.StopEventVoiceWithLipSync
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EAppCharCategoryType                    CharcterCategoryType                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::StopEventVoiceWithLipSync(EAppCharCategoryType CharcterCategoryType, int32 CharaIndexID, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "StopEventVoiceWithLipSync");

	Params::SoundApp_StopEventVoiceWithLipSync Parms{};

	Parms.CharcterCategoryType = CharcterCategoryType;
	Parms.CharaIndexID = CharaIndexID;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.StopFacilityVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CharaIndexID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseAttenuator                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   BankNum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::StopFacilityVoice(int32 CharaIndexID, bool UseAttenuator, int32 BankNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "StopFacilityVoice");

	Params::SoundApp_StopFacilityVoice Parms{};

	Parms.CharaIndexID = CharaIndexID;
	Parms.UseAttenuator = UseAttenuator;
	Parms.BankNum = BankNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundApp.StopSingleVoice
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoundApp::StopSingleVoice(int32 CueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundApp", "StopSingleVoice");

	Params::SoundApp_StopSingleVoice Parms{};

	Parms.CueId = CueId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.SoundMonitorReadyAsyncFunction.SoundMonitorReadyAsyncFunction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundMonitorReadyAsyncFunction*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USoundMonitorReadyAsyncFunction* USoundMonitorReadyAsyncFunction::SoundMonitorReadyAsyncFunction(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitorReadyAsyncFunction", "SoundMonitorReadyAsyncFunction");

	Params::SoundMonitorReadyAsyncFunction_SoundMonitorReadyAsyncFunction Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.SoundMonitorACBReadAsyncFunction.SoundMonitorACBReadAsyncFunction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AcbBankID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundMonitorACBReadAsyncFunction*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USoundMonitorACBReadAsyncFunction* USoundMonitorACBReadAsyncFunction::SoundMonitorACBReadAsyncFunction(class UObject* WorldContextObject, int32 AcbBankID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundMonitorACBReadAsyncFunction", "SoundMonitorACBReadAsyncFunction");

	Params::SoundMonitorACBReadAsyncFunction_SoundMonitorACBReadAsyncFunction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.AcbBankID = AcbBankID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.soundTestGameInstance.GetFileManagerControl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPakFileManagerControl*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPakFileManagerControl* USoundTestGameInstance::GetFileManagerControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("soundTestGameInstance", "GetFileManagerControl");

	Params::SoundTestGameInstance_GetFileManagerControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.soundTestGameInstance.GetPlayAdxControl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPlayAdxControl*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPlayAdxControl* USoundTestGameInstance::GetPlayAdxControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("soundTestGameInstance", "GetPlayAdxControl");

	Params::SoundTestGameInstance_GetPlayAdxControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.StaffRoll.Draw
// (Final, Native, Public, BlueprintCallable)

void AStaffRoll::Draw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StaffRoll", "Draw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.StaffRoll.Start
// (Final, Native, Public)
// Parameters:
// int16                                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RoundFlg                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AStaffRoll::Start(int16 Type, bool RoundFlg)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StaffRoll", "Start");

	Params::StaffRoll_Start Parms{};

	Parms.Type = Type;
	Parms.RoundFlg = RoundFlg;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.StaffRoll.Update
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AStaffRoll::Update(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StaffRoll", "Update");

	Params::StaffRoll_Update Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.StaffRollDraw.Draw
// (Final, Native, Public, BlueprintCallable)

void AStaffRollDraw::Draw()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StaffRollDraw", "Draw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TestIguchiFuncLib.StartReplaceCostumeID
// (Final, Native, Static, Public, BlueprintCallable)

void UTestIguchiFuncLib::StartReplaceCostumeID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TestIguchiFuncLib", "StartReplaceCostumeID");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TitleStateLogo.OnLoadedHolder
// (Final, Native, Public)

void UTitleStateLogo::OnLoadedHolder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TitleStateLogo", "OnLoadedHolder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIBackLogDraw.Update
// (Final, Native, Public, BlueprintCallable)

void AUIBackLogDraw::Update()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackLogDraw", "Update");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIClearSaveActor.CallStatePatternEndDelicate
// (Native, Public)

void AUIClearSaveActor::CallStatePatternEndDelicate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIClearSaveActor", "CallStatePatternEndDelicate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpBG.InitSettingMaterialBG
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMaterialInstance*                Material                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpBG::InitSettingMaterialBG(class UMaterialInstance* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpBG", "InitSettingMaterialBG");

	Params::UICmmRankUpBG_InitSettingMaterialBG Parms{};

	Parms.Material = Material;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.UICmmRankUpBG.StartAnimePoemBG1In
// (Final, Native, Public)

void AUICmmRankUpBG::StartAnimePoemBG1In()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpBG", "StartAnimePoemBG1In");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpBG.UICmmBGCapture
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUICmmRankUpBG::UICmmBGCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpBG", "UICmmBGCapture");

	Params::UICmmRankUpBG_UICmmBGCapture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UICmmRankUpBG.UICmmDrawBG_1
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           Top                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Bottom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpBG::UICmmDrawBG_1(const struct FColor& Top, const struct FColor& Bottom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpBG", "UICmmDrawBG_1");

	Params::UICmmRankUpBG_UICmmDrawBG_1 Parms{};

	Parms.Top = std::move(Top);
	Parms.Bottom = std::move(Bottom);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpBG.UICmmDrawBG_2
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           Top                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Bottom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpBG::UICmmDrawBG_2(const struct FColor& Top, const struct FColor& Bottom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpBG", "UICmmDrawBG_2");

	Params::UICmmRankUpBG_UICmmDrawBG_2 Parms{};

	Parms.Top = std::move(Top);
	Parms.Bottom = std::move(Bottom);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpBG.UICmmDrawBG_3
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           Top                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           Bottom                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpBG::UICmmDrawBG_3(const struct FColor& Top, const struct FColor& Bottom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpBG", "UICmmDrawBG_3");

	Params::UICmmRankUpBG_UICmmDrawBG_3 Parms{};

	Parms.Top = std::move(Top);
	Parms.Bottom = std::move(Bottom);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpBG.UICmmDrawBG_4
// (Final, Native, Protected, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpBG::UICmmDrawBG_4(const struct FColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpBG", "UICmmDrawBG_4");

	Params::UICmmRankUpBG_UICmmDrawBG_4 Parms{};

	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpBG.UICmmDrawBG_5
// (Final, Native, Protected, BlueprintCallable)

void AUICmmRankUpBG::UICmmDrawBG_5()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpBG", "UICmmDrawBG_5");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpBG.UICmmDrawBG_Red
// (Final, Native, Protected, BlueprintCallable)

void AUICmmRankUpBG::UICmmDrawBG_Red()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpBG", "UICmmDrawBG_Red");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UICmmRankUpBG.Update
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   InDeltaTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUICmmRankUpBG::Update(const float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICmmRankUpBG", "Update");

	Params::UICmmRankUpBG_Update Parms{};

	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIDebugDraw.OnFinishedScrDebug
// (Final, Native, Public)
// Parameters:
// int32                                   ExitType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIDebugDraw::OnFinishedScrDebug(int32 ExitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDebugDraw", "OnFinishedScrDebug");

	Params::UIDebugDraw_OnFinishedScrDebug Parms{};

	Parms.ExitType = ExitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIMiscGetItemDraw.UpdateMajorArcanaGetMessage
// (Final, Native, Private)

void AUIMiscGetItemDraw::UpdateMajorArcanaGetMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMiscGetItemDraw", "UpdateMajorArcanaGetMessage");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIMiscGetItemDraw.UpdateMajorArcanaTutorial
// (Final, Native, Private)

void AUIMiscGetItemDraw::UpdateMajorArcanaTutorial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIMiscGetItemDraw", "UpdateMajorArcanaTutorial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.NameEntry.OnFinishedScr
// (Final, Native, Private)
// Parameters:
// int32                                   ExitType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANameEntry::OnFinishedScr(int32 ExitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NameEntry", "OnFinishedScr");

	Params::NameEntry_OnFinishedScr Parms{};

	Parms.ExitType = ExitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPersonaModelActor.GetSkeletalMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* AUIPersonaModelActor::GetSkeletalMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPersonaModelActor", "GetSkeletalMesh");

	Params::UIPersonaModelActor_GetSkeletalMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.PersonaPreviewWorldUpdater.CheckPlayAnimation
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaPreviewWorldUpdater::CheckPlayAnimation(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaPreviewWorldUpdater", "CheckPlayAnimation");

	Params::PersonaPreviewWorldUpdater_CheckPlayAnimation Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.PersonaPreviewWorldUpdater.RequestAnimation
// (Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPersonaStatusModelAnim                 Anim                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaPreviewWorldUpdater::RequestAnimation(class AActor* Actor, EPersonaStatusModelAnim Anim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaPreviewWorldUpdater", "RequestAnimation");

	Params::PersonaPreviewWorldUpdater_RequestAnimation Parms{};

	Parms.Actor = Actor;
	Parms.Anim = Anim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.PersonaStatusDraw.DrawAttribute
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawAttribute(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawAttribute");

	Params::PersonaStatusDraw_DrawAttribute Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawBackground
// (Final, Native, Protected, BlueprintCallable)

void APersonaStatusDraw::DrawBackground()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawBackground");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawCombinePersona
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawCombinePersona(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawCombinePersona");

	Params::PersonaStatusDraw_DrawCombinePersona Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawCombinePersonaInfo
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawCombinePersonaInfo(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawCombinePersonaInfo");

	Params::PersonaStatusDraw_DrawCombinePersonaInfo Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawCommuBonus
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawCommuBonus(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawCommuBonus");

	Params::PersonaStatusDraw_DrawCommuBonus Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawConceptionInfo
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawConceptionInfo(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawConceptionInfo");

	Params::PersonaStatusDraw_DrawConceptionInfo Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawDefalutConception
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawDefalutConception(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawDefalutConception");

	Params::PersonaStatusDraw_DrawDefalutConception Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawDefalutSkillList
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawDefalutSkillList(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawDefalutSkillList");

	Params::PersonaStatusDraw_DrawDefalutSkillList Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawDefaultCommentary
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawDefaultCommentary(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawDefaultCommentary");

	Params::PersonaStatusDraw_DrawDefaultCommentary Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawDefaultPersona
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawDefaultPersona(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawDefaultPersona");

	Params::PersonaStatusDraw_DrawDefaultPersona Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawDefaultPersonaInfo
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawDefaultPersonaInfo(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawDefaultPersonaInfo");

	Params::PersonaStatusDraw_DrawDefaultPersonaInfo Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawDefaultPersonaInfoBackground
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawDefaultPersonaInfoBackground(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawDefaultPersonaInfoBackground");

	Params::PersonaStatusDraw_DrawDefaultPersonaInfoBackground Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawDefaultStatusParameter
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawDefaultStatusParameter(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawDefaultStatusParameter");

	Params::PersonaStatusDraw_DrawDefaultStatusParameter Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawDrawerConception
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawDrawerConception(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawDrawerConception");

	Params::PersonaStatusDraw_DrawDrawerConception Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawDrawerConceptionInfo
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawDrawerConceptionInfo(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawDrawerConceptionInfo");

	Params::PersonaStatusDraw_DrawDrawerConceptionInfo Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawDrawerPersona
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawDrawerPersona(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawDrawerPersona");

	Params::PersonaStatusDraw_DrawDrawerPersona Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawExpBonus
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawExpBonus(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawExpBonus");

	Params::PersonaStatusDraw_DrawExpBonus Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawLevelUp
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawLevelUp(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawLevelUp");

	Params::PersonaStatusDraw_DrawLevelUp Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawLevelUpConception
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawLevelUpConception(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawLevelUpConception");

	Params::PersonaStatusDraw_DrawLevelUpConception Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawOutAnimation
// (Final, Native, Protected, BlueprintCallable)

void APersonaStatusDraw::DrawOutAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawOutAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawRegistryCommentary
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawRegistryCommentary(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawRegistryCommentary");

	Params::PersonaStatusDraw_DrawRegistryCommentary Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawRegistryPersona
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawRegistryPersona(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawRegistryPersona");

	Params::PersonaStatusDraw_DrawRegistryPersona Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawRegistryPersonaInfo
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawRegistryPersonaInfo(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawRegistryPersonaInfo");

	Params::PersonaStatusDraw_DrawRegistryPersonaInfo Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawRegistrySkillList
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawRegistrySkillList(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawRegistrySkillList");

	Params::PersonaStatusDraw_DrawRegistrySkillList Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawSkillCard
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawSkillCard(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawSkillCard");

	Params::PersonaStatusDraw_DrawSkillCard Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawSkillInfo
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawSkillInfo(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawSkillInfo");

	Params::PersonaStatusDraw_DrawSkillInfo Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.DrawSkillSelectList
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::DrawSkillSelectList(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "DrawSkillSelectList");

	Params::PersonaStatusDraw_DrawSkillSelectList Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.GetCaptureRenderTarget
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* APersonaStatusDraw::GetCaptureRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "GetCaptureRenderTarget");

	Params::PersonaStatusDraw_GetCaptureRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.PersonaStatusDraw.SetupOutAnimation
// (Final, Native, Protected, BlueprintCallable)

void APersonaStatusDraw::SetupOutAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "SetupOutAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.PersonaStatusDraw.Update
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APersonaStatusDraw::Update(const float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PersonaStatusDraw", "Update");

	Params::PersonaStatusDraw_Update Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPoetryDraw.GetAdjustedLayoutRippleTiming
// (Final, Native, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// EUIRippleTimeLayout                     InLayoutId                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InDefaultTiming                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AUIPoetryDraw::GetAdjustedLayoutRippleTiming(EUIRippleTimeLayout InLayoutId, float InDefaultTiming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "GetAdjustedLayoutRippleTiming");

	Params::UIPoetryDraw_GetAdjustedLayoutRippleTiming Parms{};

	Parms.InLayoutId = InLayoutId;
	Parms.InDefaultTiming = InDefaultTiming;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIPoetryDraw.UIPoetryCreateMaterial
// (Final, Native, Protected, BlueprintCallable)

void AUIPoetryDraw::UIPoetryCreateMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "UIPoetryCreateMaterial");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPoetryDraw.UIPoetryDrawAllPoetry
// (Final, Native, Protected, BlueprintCallable)

void AUIPoetryDraw::UIPoetryDrawAllPoetry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "UIPoetryDrawAllPoetry");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPoetryDraw.UIPoetryDrawLine1
// (Final, Native, Protected, BlueprintCallable)

void AUIPoetryDraw::UIPoetryDrawLine1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "UIPoetryDrawLine1");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPoetryDraw.UIPoetryDrawLine2
// (Final, Native, Protected, BlueprintCallable)

void AUIPoetryDraw::UIPoetryDrawLine2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "UIPoetryDrawLine2");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPoetryDraw.UIPoetryDrawMaxLine1
// (Final, Native, Protected, BlueprintCallable)

void AUIPoetryDraw::UIPoetryDrawMaxLine1()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "UIPoetryDrawMaxLine1");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPoetryDraw.UIPoetryDrawMaxLine2
// (Final, Native, Protected, BlueprintCallable)

void AUIPoetryDraw::UIPoetryDrawMaxLine2()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "UIPoetryDrawMaxLine2");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPoetryDraw.UIPoetryDrawMaxLine3
// (Final, Native, Protected, BlueprintCallable)

void AUIPoetryDraw::UIPoetryDrawMaxLine3()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "UIPoetryDrawMaxLine3");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPoetryDraw.UIPoetryDrawOkKey
// (Final, Native, Protected, BlueprintCallable)

void AUIPoetryDraw::UIPoetryDrawOkKey()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "UIPoetryDrawOkKey");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPoetryDraw.UIPoetryDrawRippleMax
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple1                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple2                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple3                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple4                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple5                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple6                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple7                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple8                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIPoetryDraw::UIPoetryDrawRippleMax(float DeltaTime, float Ripple1, float Ripple2, float Ripple3, float Ripple4, float Ripple5, float Ripple6, float Ripple7, float Ripple8)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "UIPoetryDrawRippleMax");

	Params::UIPoetryDraw_UIPoetryDrawRippleMax Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.Ripple1 = Ripple1;
	Parms.Ripple2 = Ripple2;
	Parms.Ripple3 = Ripple3;
	Parms.Ripple4 = Ripple4;
	Parms.Ripple5 = Ripple5;
	Parms.Ripple6 = Ripple6;
	Parms.Ripple7 = Ripple7;
	Parms.Ripple8 = Ripple8;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPoetryDraw.UIPoetryDrawRippleOpen
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple1                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple2                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple3                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple4                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Ripple5                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIPoetryDraw::UIPoetryDrawRippleOpen(float DeltaTime, float Ripple1, float Ripple2, float Ripple3, float Ripple4, float Ripple5)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "UIPoetryDrawRippleOpen");

	Params::UIPoetryDraw_UIPoetryDrawRippleOpen Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.Ripple1 = Ripple1;
	Parms.Ripple2 = Ripple2;
	Parms.Ripple3 = Ripple3;
	Parms.Ripple4 = Ripple4;
	Parms.Ripple5 = Ripple5;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPoetryDraw.UIPoetryGetParam
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   EfBaseAlpha_                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIPoetryDraw::UIPoetryGetParam(float EfBaseAlpha_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "UIPoetryGetParam");

	Params::UIPoetryDraw_UIPoetryGetParam Parms{};

	Parms.EfBaseAlpha_ = EfBaseAlpha_;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPoetryDraw.UIPoetryIsRankMaxPoetry
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIPoetryDraw::UIPoetryIsRankMaxPoetry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "UIPoetryIsRankMaxPoetry");

	Params::UIPoetryDraw_UIPoetryIsRankMaxPoetry Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIPoetryDraw.Update
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   InDeltaTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIPoetryDraw::Update(const float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPoetryDraw", "Update");

	Params::UIPoetryDraw_Update Parms{};

	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIPreviewWorldUpdater.GetAllActorsOfClass
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   OutActors                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void AUIPreviewWorldUpdater::GetAllActorsOfClass(const class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, TArray<class AActor*>* OutActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPreviewWorldUpdater", "GetAllActorsOfClass");

	Params::UIPreviewWorldUpdater_GetAllActorsOfClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ActorClass = ActorClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActors != nullptr)
		*OutActors = std::move(Parms.OutActors);
}


// Function xrd777.UIRenderWidget.DrawToRenderTarget
// (Final, Native, Public, BlueprintCallable)

void UUIRenderWidget::DrawToRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRenderWidget", "DrawToRenderTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIRenderWidget.Initialize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           InRenderTarget                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      InRenderWidget                                         (Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        DrawSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InUseGamma                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InClearTarget                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextureFilter                          InFilter                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIRenderWidget::Initialize(class UTextureRenderTarget2D* InRenderTarget, class UUserWidget* InRenderWidget, const struct FVector2D& DrawSize, bool InUseGamma, bool InClearTarget, ETextureFilter InFilter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRenderWidget", "Initialize");

	Params::UIRenderWidget_Initialize Parms{};

	Parms.InRenderTarget = InRenderTarget;
	Parms.InRenderWidget = InRenderWidget;
	Parms.DrawSize = std::move(DrawSize);
	Parms.InUseGamma = InUseGamma;
	Parms.InClearTarget = InClearTarget;
	Parms.InFilter = InFilter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIRenderWidget.IsPause
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIRenderWidget::IsPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRenderWidget", "IsPause");

	Params::UIRenderWidget_IsPause Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIRenderWidget.SetPause
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InPause                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRenderWidget::SetPause(bool InPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRenderWidget", "SetPause");

	Params::UIRenderWidget_SetPause Parms{};

	Parms.InPause = InPause;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIRequest.OnFinishedScr
// (Final, Native, Private)
// Parameters:
// int32                                   ExitType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRequest::OnFinishedScr(int32 ExitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRequest", "OnFinishedScr");

	Params::UIRequest_OnFinishedScr Parms{};

	Parms.ExitType = ExitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIRestore.OnFinishedCloseAnim
// (Final, Native, Private, BlueprintCallable)

void AUIRestore::OnFinishedCloseAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRestore", "OnFinishedCloseAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIRestore.OnFinishedInAnim
// (Final, Native, Private, BlueprintCallable)

void AUIRestore::OnFinishedInAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRestore", "OnFinishedInAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UISceneCapture.InAnimationStart
// (Event, Public, BlueprintEvent)

void AUISceneCapture::InAnimationStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISceneCapture", "InAnimationStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UISceneCapture.LoopAnimationStart
// (Event, Public, BlueprintEvent)

void AUISceneCapture::LoopAnimationStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISceneCapture", "LoopAnimationStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UISubsystem.NotifyLevelLoadedShop
// (Final, Native, Public)

void UUISubsystem::NotifyLevelLoadedShop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISubsystem", "NotifyLevelLoadedShop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.AlwayFieldUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUITestSpawnActor::AlwayFieldUpdate(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "AlwayFieldUpdate");

	Params::UITestSpawnActor_AlwayFieldUpdate Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.CommunityUpdate
// (Final, Native, Public, BlueprintCallable)

void AUITestSpawnActor::CommunityUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "CommunityUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.DungeonUpdate
// (Final, Native, Public, BlueprintCallable)

void AUITestSpawnActor::DungeonUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "DungeonUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.MoneyUpdate
// (Final, Native, Public, BlueprintCallable)

void AUITestSpawnActor::MoneyUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "MoneyUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.SpawnAlwayField
// (Final, Native, Public, BlueprintCallable)

void AUITestSpawnActor::SpawnAlwayField()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "SpawnAlwayField");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.SpawnBattle
// (Final, Native, Public, BlueprintCallable)

void AUITestSpawnActor::SpawnBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "SpawnBattle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.SpawnCommunity
// (Final, Native, Public, BlueprintCallable)

void AUITestSpawnActor::SpawnCommunity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "SpawnCommunity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.SpawnDungeon
// (Final, Native, Public, BlueprintCallable)

void AUITestSpawnActor::SpawnDungeon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "SpawnDungeon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.SpawnMoney
// (Final, Native, Public, BlueprintCallable)

void AUITestSpawnActor::SpawnMoney()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "SpawnMoney");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.SpawnTownMap
// (Final, Native, Public, BlueprintCallable)

void AUITestSpawnActor::SpawnTownMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "SpawnTownMap");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.SpawnVelvetRoom
// (Final, Native, Public, BlueprintCallable)

void AUITestSpawnActor::SpawnVelvetRoom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "SpawnVelvetRoom");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.Update
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUITestSpawnActor::Update(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "Update");

	Params::UITestSpawnActor_Update Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITestSpawnActor.VelvetRoomUpdate
// (Final, Native, Public, BlueprintCallable)

void AUITestSpawnActor::VelvetRoomUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITestSpawnActor", "VelvetRoomUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITownMapCameraActor.Initialize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           MainCamera                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           SchoolCamera                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DormitoryCamera                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           PortislandCamera                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           PolonianmallCamera                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           IwatodayCamera                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NaganakiCamera                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           SchoolActor                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DormitoryActor                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           PortislandActor                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           PolonianmallActor                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           IwatodayActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NaganakiActor                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           StartCamera                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUITownMapCameraActor::Initialize(class AActor* MainCamera, class AActor* SchoolCamera, class AActor* DormitoryCamera, class AActor* PortislandCamera, class AActor* PolonianmallCamera, class AActor* IwatodayCamera, class AActor* NaganakiCamera, class AActor* SchoolActor, class AActor* DormitoryActor, class AActor* PortislandActor, class AActor* PolonianmallActor, class AActor* IwatodayActor, class AActor* NaganakiActor, class AActor* StartCamera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITownMapCameraActor", "Initialize");

	Params::UITownMapCameraActor_Initialize Parms{};

	Parms.MainCamera = MainCamera;
	Parms.SchoolCamera = SchoolCamera;
	Parms.DormitoryCamera = DormitoryCamera;
	Parms.PortislandCamera = PortislandCamera;
	Parms.PolonianmallCamera = PolonianmallCamera;
	Parms.IwatodayCamera = IwatodayCamera;
	Parms.NaganakiCamera = NaganakiCamera;
	Parms.SchoolActor = SchoolActor;
	Parms.DormitoryActor = DormitoryActor;
	Parms.PortislandActor = PortislandActor;
	Parms.PolonianmallActor = PolonianmallActor;
	Parms.IwatodayActor = IwatodayActor;
	Parms.NaganakiActor = NaganakiActor;
	Parms.StartCamera = StartCamera;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITutorialDraw.DrawBackground
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUITutorialDraw::DrawBackground(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITutorialDraw", "DrawBackground");

	Params::UITutorialDraw_DrawBackground Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITutorialDraw.DrawCategorys
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUITutorialDraw::DrawCategorys(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITutorialDraw", "DrawCategorys");

	Params::UITutorialDraw_DrawCategorys Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITutorialDraw.DrawCloseWipe
// (Final, Native, Protected, BlueprintCallable)

void AUITutorialDraw::DrawCloseWipe()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITutorialDraw", "DrawCloseWipe");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITutorialDraw.DrawHelp
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUITutorialDraw::DrawHelp(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITutorialDraw", "DrawHelp");

	Params::UITutorialDraw_DrawHelp Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UITutorialDraw.DrawList
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUITutorialDraw::DrawList(float X, float Y, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITutorialDraw", "DrawList");

	Params::UITutorialDraw_DrawList Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoom.StreamLevelCountDecrement
// (Final, Native, Private)

void AUIVelvetRoom::StreamLevelCountDecrement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoom", "StreamLevelCountDecrement");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomOwner.OnFinishedScr
// (Final, Native, Public)
// Parameters:
// int32                                   ExitType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVelvetRoomOwner::OnFinishedScr(int32 ExitType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomOwner", "OnFinishedScr");

	Params::UIVelvetRoomOwner_OnFinishedScr Parms{};

	Parms.ExitType = ExitType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomRequestDraw.CloseQuestDetails
// (Event, Public, BlueprintEvent)

void AUIVelvetRoomRequestDraw::CloseQuestDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "CloseQuestDetails");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UIVelvetRoomRequestDraw.CloseQuestMenu
// (Event, Public, BlueprintEvent)

void AUIVelvetRoomRequestDraw::CloseQuestMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "CloseQuestMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UIVelvetRoomRequestDraw.DrawQuestDetails
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomRequestDraw::DrawQuestDetails(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "DrawQuestDetails");

	Params::UIVelvetRoomRequestDraw_DrawQuestDetails Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomRequestDraw.DrawQuestHelp
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomRequestDraw::DrawQuestHelp(float X, float Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "DrawQuestHelp");

	Params::UIVelvetRoomRequestDraw_DrawQuestHelp Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomRequestDraw.DrawQuestItem
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomRequestDraw::DrawQuestItem(float X, float Y, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "DrawQuestItem");

	Params::UIVelvetRoomRequestDraw_DrawQuestItem Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomRequestDraw.DrawQuestReward
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVelvetRoomRequestDraw::DrawQuestReward(float X, float Y, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "DrawQuestReward");

	Params::UIVelvetRoomRequestDraw_DrawQuestReward Parms{};

	Parms.X = X;
	Parms.Y = Y;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVelvetRoomRequestDraw.GetCursorCurrentIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIVelvetRoomRequestDraw::GetCursorCurrentIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "GetCursorCurrentIndex");

	Params::UIVelvetRoomRequestDraw_GetCursorCurrentIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVelvetRoomRequestDraw.GetCursorListTopIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIVelvetRoomRequestDraw::GetCursorListTopIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "GetCursorListTopIndex");

	Params::UIVelvetRoomRequestDraw_GetCursorListTopIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVelvetRoomRequestDraw.GetQuestRank
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIVelvetRoomRequestDraw::GetQuestRank()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "GetQuestRank");

	Params::UIVelvetRoomRequestDraw_GetQuestRank Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVelvetRoomRequestDraw.OpenQuestDetails
// (Event, Public, BlueprintEvent)

void AUIVelvetRoomRequestDraw::OpenQuestDetails()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "OpenQuestDetails");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UIVelvetRoomRequestDraw.OpenQuestMenu
// (Event, Public, BlueprintEvent)

void AUIVelvetRoomRequestDraw::OpenQuestMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "OpenQuestMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.UIVelvetRoomRequestDraw.GetQuestID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIVelvetRoomRequestDraw::GetQuestID(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "GetQuestID");

	Params::UIVelvetRoomRequestDraw_GetQuestID Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVelvetRoomRequestDraw.GetQuestListMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIVelvetRoomRequestDraw::GetQuestListMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "GetQuestListMax");

	Params::UIVelvetRoomRequestDraw_GetQuestListMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVelvetRoomRequestDraw.GetQuestNewFlag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVelvetRoomRequestDraw::GetQuestNewFlag(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "GetQuestNewFlag");

	Params::UIVelvetRoomRequestDraw_GetQuestNewFlag Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVelvetRoomRequestDraw.GetQuestState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EQuestListItemState                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EQuestListItemState AUIVelvetRoomRequestDraw::GetQuestState(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "GetQuestState");

	Params::UIVelvetRoomRequestDraw_GetQuestState Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVelvetRoomRequestDraw.GetSortType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 AUIVelvetRoomRequestDraw::GetSortType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVelvetRoomRequestDraw", "GetSortType");

	Params::UIVelvetRoomRequestDraw_GetSortType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.TextInputWidget.CalcLetterBoxSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   InTmpScreenSize                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTextInputWidget::CalcLetterBoxSize(float InTmpScreenSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextInputWidget", "CalcLetterBoxSize");

	Params::TextInputWidget_CalcLetterBoxSize Parms{};

	Parms.InTmpScreenSize = InTmpScreenSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.TextInputWidget.CalcScreenScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTextInputWidget::CalcScreenScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextInputWidget", "CalcScreenScale");

	Params::TextInputWidget_CalcScreenScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.TextInputWidget.ChangeInputTextPositionLeft
// (Event, Public, BlueprintEvent)

void UTextInputWidget::ChangeInputTextPositionLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextInputWidget", "ChangeInputTextPositionLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.TextInputWidget.ChangeInputTextPositionRight
// (Event, Public, BlueprintEvent)

void UTextInputWidget::ChangeInputTextPositionRight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextInputWidget", "ChangeInputTextPositionRight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function xrd777.TextInputWidget.Decide
// (Final, Native, Protected, BlueprintCallable)

void UTextInputWidget::Decide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextInputWidget", "Decide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.TextInputWidget.GetText
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UTextInputWidget::GetText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextInputWidget", "GetText");

	Params::TextInputWidget_GetText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.TextInputWidget.IsChangeScreenSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTextInputWidget::IsChangeScreenSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextInputWidget", "IsChangeScreenSize");

	Params::TextInputWidget_IsChangeScreenSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.TextInputWidget.IsDrawLetterBoxDirHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTextInputWidget::IsDrawLetterBoxDirHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextInputWidget", "IsDrawLetterBoxDirHeight");

	Params::TextInputWidget_IsDrawLetterBoxDirHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.TextInputWidget.SetBaseText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTextInputWidget::SetBaseText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextInputWidget", "SetBaseText");

	Params::TextInputWidget_SetBaseText Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.TextInputWidget.SetText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UTextInputWidget::SetText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TextInputWidget", "SetText");

	Params::TextInputWidget_SetText Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.UIVoiceActionDraw.ConvFrameToTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InFrame                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AUIVoiceActionDraw::ConvFrameToTime(int32 InFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "ConvFrameToTime");

	Params::UIVoiceActionDraw_ConvFrameToTime Parms{};

	Parms.InFrame = InFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.DrawActionBoard
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawActionBoard(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawActionBoard");

	Params::UIVoiceActionDraw_DrawActionBoard Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawBackBoard
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawBackBoard(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawBackBoard");

	Params::UIVoiceActionDraw_DrawBackBoard Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawBlackBoard
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawBlackBoard(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawBlackBoard");

	Params::UIVoiceActionDraw_DrawBlackBoard Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawBlueBoard
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawBlueBoard(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawBlueBoard");

	Params::UIVoiceActionDraw_DrawBlueBoard Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawCommunityActionPercent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawCommunityActionPercent(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawCommunityActionPercent");

	Params::UIVoiceActionDraw_DrawCommunityActionPercent Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawCommunityActionStickyNote
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawCommunityActionStickyNote(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawCommunityActionStickyNote");

	Params::UIVoiceActionDraw_DrawCommunityActionStickyNote Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawDailyActionPercent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawDailyActionPercent(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawDailyActionPercent");

	Params::UIVoiceActionDraw_DrawDailyActionPercent Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawDailyActionStickyNote
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawDailyActionStickyNote(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawDailyActionStickyNote");

	Params::UIVoiceActionDraw_DrawDailyActionStickyNote Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawDay
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawDay(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawDay");

	Params::UIVoiceActionDraw_DrawDay Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawDayOfWeek
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawDayOfWeek(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawDayOfWeek");

	Params::UIVoiceActionDraw_DrawDayOfWeek Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawDungeonActionPercent
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawDungeonActionPercent(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawDungeonActionPercent");

	Params::UIVoiceActionDraw_DrawDungeonActionPercent Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawDungeonActionStickyNote
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawDungeonActionStickyNote(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawDungeonActionStickyNote");

	Params::UIVoiceActionDraw_DrawDungeonActionStickyNote Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawMonth
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawMonth(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawMonth");

	Params::UIVoiceActionDraw_DrawMonth Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawNetworkIcon
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IconAngle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawNetworkIcon(const struct FVector2D& InPos, const struct FColor& InColor, float Angle, float IconAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawNetworkIcon");

	Params::UIVoiceActionDraw_DrawNetworkIcon Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;
	Parms.IconAngle = IconAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawNetworkIconSecond
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawNetworkIconSecond(const struct FVector2D& InPos, const struct FColor& InColor, float Angle, float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawNetworkIconSecond");

	Params::UIVoiceActionDraw_DrawNetworkIconSecond Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;
	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.DrawStickyNoteAverage
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceActionDraw::DrawStickyNoteAverage(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "DrawStickyNoteAverage");

	Params::UIVoiceActionDraw_DrawStickyNoteAverage Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.InitDraw_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::InitDraw_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "InitDraw_IN");

	Params::UIVoiceActionDraw_InitDraw_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.InitDraw_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::InitDraw_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "InitDraw_Out");

	Params::UIVoiceActionDraw_InitDraw_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.InitDrawBlackBoard_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::InitDrawBlackBoard_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "InitDrawBlackBoard_IN");

	Params::UIVoiceActionDraw_InitDrawBlackBoard_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.InitDrawBlackBoard_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::InitDrawBlackBoard_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "InitDrawBlackBoard_Out");

	Params::UIVoiceActionDraw_InitDrawBlackBoard_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.InitDrawNetworkIcon_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::InitDrawNetworkIcon_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "InitDrawNetworkIcon_IN");

	Params::UIVoiceActionDraw_InitDrawNetworkIcon_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.InitDrawNetworkIcon_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::InitDrawNetworkIcon_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "InitDrawNetworkIcon_Out");

	Params::UIVoiceActionDraw_InitDrawNetworkIcon_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.InitSetDayTime
// (Final, Native, Public, BlueprintCallable)

void AUIVoiceActionDraw::InitSetDayTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "InitSetDayTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.KeyHelpIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::KeyHelpIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "KeyHelpIn");

	Params::UIVoiceActionDraw_KeyHelpIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.KeyHelpOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::KeyHelpOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "KeyHelpOut");

	Params::UIVoiceActionDraw_KeyHelpOut Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.OneTimeLockInput
// (Final, Native, Public, BlueprintCallable)

void AUIVoiceActionDraw::OneTimeLockInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "OneTimeLockInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceActionDraw.StateDraw_BG
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::StateDraw_BG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "StateDraw_BG");

	Params::UIVoiceActionDraw_StateDraw_BG Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.StateDraw_Frame
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::StateDraw_Frame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "StateDraw_Frame");

	Params::UIVoiceActionDraw_StateDraw_Frame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.StateDraw_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::StateDraw_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "StateDraw_IN");

	Params::UIVoiceActionDraw_StateDraw_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.StateDraw_Network
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::StateDraw_Network()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "StateDraw_Network");

	Params::UIVoiceActionDraw_StateDraw_Network Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.StateDraw_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::StateDraw_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "StateDraw_Out");

	Params::UIVoiceActionDraw_StateDraw_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.StateDrawBlackBoard_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::StateDrawBlackBoard_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "StateDrawBlackBoard_IN");

	Params::UIVoiceActionDraw_StateDrawBlackBoard_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.StateDrawBlackBoard_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::StateDrawBlackBoard_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "StateDrawBlackBoard_Out");

	Params::UIVoiceActionDraw_StateDrawBlackBoard_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.StateDrawNetworkIcon_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::StateDrawNetworkIcon_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "StateDrawNetworkIcon_IN");

	Params::UIVoiceActionDraw_StateDrawNetworkIcon_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.StateDrawNetworkIcon_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::StateDrawNetworkIcon_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "StateDrawNetworkIcon_Out");

	Params::UIVoiceActionDraw_StateDrawNetworkIcon_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceActionDraw.TimeWithinRangeFrame
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   NowTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceActionDraw::TimeWithinRangeFrame(float NowTime, int32 StartFrame, int32 EndFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceActionDraw", "TimeWithinRangeFrame");

	Params::UIVoiceActionDraw_TimeWithinRangeFrame Parms{};

	Parms.NowTime = NowTime;
	Parms.StartFrame = StartFrame;
	Parms.EndFrame = EndFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.ConvFrameToTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   InFrame                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float AUIVoiceAnswerDraw::ConvFrameToTime(int32 InFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "ConvFrameToTime");

	Params::UIVoiceAnswerDraw_ConvFrameToTime Parms{};

	Parms.InFrame = InFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.DrawAnswerBoard
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawAnswerBoard(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawAnswerBoard");

	Params::UIVoiceAnswerDraw_DrawAnswerBoard Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawAnswerTextA
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawAnswerTextA(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawAnswerTextA");

	Params::UIVoiceAnswerDraw_DrawAnswerTextA Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawAnswerTextB
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawAnswerTextB(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawAnswerTextB");

	Params::UIVoiceAnswerDraw_DrawAnswerTextB Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawAnswerTextC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawAnswerTextC(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawAnswerTextC");

	Params::UIVoiceAnswerDraw_DrawAnswerTextC Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawAnswerTextD
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawAnswerTextD(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawAnswerTextD");

	Params::UIVoiceAnswerDraw_DrawAnswerTextD Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawBackBoard
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawBackBoard(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawBackBoard");

	Params::UIVoiceAnswerDraw_DrawBackBoard Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawBlackBoard
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawBlackBoard(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawBlackBoard");

	Params::UIVoiceAnswerDraw_DrawBlackBoard Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawBlueBoard
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawBlueBoard(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawBlueBoard");

	Params::UIVoiceAnswerDraw_DrawBlueBoard Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawDay
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawDay(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawDay");

	Params::UIVoiceAnswerDraw_DrawDay Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawDayOfWeek
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawDayOfWeek(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawDayOfWeek");

	Params::UIVoiceAnswerDraw_DrawDayOfWeek Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawLeftBracketsA
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawLeftBracketsA(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawLeftBracketsA");

	Params::UIVoiceAnswerDraw_DrawLeftBracketsA Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawLeftBracketsB
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawLeftBracketsB(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawLeftBracketsB");

	Params::UIVoiceAnswerDraw_DrawLeftBracketsB Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawLeftBracketsC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawLeftBracketsC(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawLeftBracketsC");

	Params::UIVoiceAnswerDraw_DrawLeftBracketsC Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawLeftBracketsD
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawLeftBracketsD(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawLeftBracketsD");

	Params::UIVoiceAnswerDraw_DrawLeftBracketsD Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawMonth
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawMonth(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawMonth");

	Params::UIVoiceAnswerDraw_DrawMonth Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawNetworkIcon
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   IconAngle                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawNetworkIcon(const struct FVector2D& InPos, const struct FColor& InColor, float Angle, float IconAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawNetworkIcon");

	Params::UIVoiceAnswerDraw_DrawNetworkIcon Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;
	Parms.IconAngle = IconAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawNetworkIconSecond
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawNetworkIconSecond(const struct FVector2D& InPos, const struct FColor& InColor, float Angle, float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawNetworkIconSecond");

	Params::UIVoiceAnswerDraw_DrawNetworkIconSecond Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;
	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawRightBracketsA
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawRightBracketsA(const struct FVector2D& InPos, const struct FColor& InColor, float Width, float Height, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawRightBracketsA");

	Params::UIVoiceAnswerDraw_DrawRightBracketsA Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawRightBracketsB
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawRightBracketsB(const struct FVector2D& InPos, const struct FColor& InColor, float Width, float Height, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawRightBracketsB");

	Params::UIVoiceAnswerDraw_DrawRightBracketsB Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawRightBracketsC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawRightBracketsC(const struct FVector2D& InPos, const struct FColor& InColor, float Width, float Height, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawRightBracketsC");

	Params::UIVoiceAnswerDraw_DrawRightBracketsC Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawRightBracketsD
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawRightBracketsD(const struct FVector2D& InPos, const struct FColor& InColor, float Width, float Height, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawRightBracketsD");

	Params::UIVoiceAnswerDraw_DrawRightBracketsD Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawStickerA
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawStickerA(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawStickerA");

	Params::UIVoiceAnswerDraw_DrawStickerA Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawStickerB
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawStickerB(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawStickerB");

	Params::UIVoiceAnswerDraw_DrawStickerB Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawStickerC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawStickerC(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawStickerC");

	Params::UIVoiceAnswerDraw_DrawStickerC Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawStickerD
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawStickerD(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawStickerD");

	Params::UIVoiceAnswerDraw_DrawStickerD Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawTextureA
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawTextureA(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawTextureA");

	Params::UIVoiceAnswerDraw_DrawTextureA Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawTextureB
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawTextureB(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawTextureB");

	Params::UIVoiceAnswerDraw_DrawTextureB Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawTextureC
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawTextureC(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawTextureC");

	Params::UIVoiceAnswerDraw_DrawTextureC Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.DrawTextureD
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        InPos                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           InColor                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Angle                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUIVoiceAnswerDraw::DrawTextureD(const struct FVector2D& InPos, const struct FColor& InColor, float Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "DrawTextureD");

	Params::UIVoiceAnswerDraw_DrawTextureD Parms{};

	Parms.InPos = std::move(InPos);
	Parms.InColor = std::move(InColor);
	Parms.Angle = Angle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.InitDraw_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::InitDraw_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "InitDraw_IN");

	Params::UIVoiceAnswerDraw_InitDraw_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.InitDraw_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::InitDraw_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "InitDraw_Out");

	Params::UIVoiceAnswerDraw_InitDraw_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.InitDrawBlackBoard_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::InitDrawBlackBoard_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "InitDrawBlackBoard_IN");

	Params::UIVoiceAnswerDraw_InitDrawBlackBoard_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.InitDrawBlackBoard_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::InitDrawBlackBoard_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "InitDrawBlackBoard_Out");

	Params::UIVoiceAnswerDraw_InitDrawBlackBoard_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.InitDrawNetworkIcon_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::InitDrawNetworkIcon_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "InitDrawNetworkIcon_IN");

	Params::UIVoiceAnswerDraw_InitDrawNetworkIcon_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.InitDrawNetworkIcon_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::InitDrawNetworkIcon_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "InitDrawNetworkIcon_Out");

	Params::UIVoiceAnswerDraw_InitDrawNetworkIcon_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.InitSetDayTime
// (Final, Native, Public, BlueprintCallable)

void AUIVoiceAnswerDraw::InitSetDayTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "InitSetDayTime");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.IsMaxAnswer
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::IsMaxAnswer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "IsMaxAnswer");

	Params::UIVoiceAnswerDraw_IsMaxAnswer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.KeyHelpIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::KeyHelpIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "KeyHelpIn");

	Params::UIVoiceAnswerDraw_KeyHelpIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.KeyHelpOut
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::KeyHelpOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "KeyHelpOut");

	Params::UIVoiceAnswerDraw_KeyHelpOut Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.OneTimeLockInput
// (Final, Native, Public, BlueprintCallable)

void AUIVoiceAnswerDraw::OneTimeLockInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "OneTimeLockInput");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UIVoiceAnswerDraw.StateDraw_BG
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::StateDraw_BG()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "StateDraw_BG");

	Params::UIVoiceAnswerDraw_StateDraw_BG Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.StateDraw_Frame
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::StateDraw_Frame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "StateDraw_Frame");

	Params::UIVoiceAnswerDraw_StateDraw_Frame Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.StateDraw_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::StateDraw_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "StateDraw_IN");

	Params::UIVoiceAnswerDraw_StateDraw_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.StateDraw_Network
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::StateDraw_Network()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "StateDraw_Network");

	Params::UIVoiceAnswerDraw_StateDraw_Network Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.StateDraw_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::StateDraw_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "StateDraw_Out");

	Params::UIVoiceAnswerDraw_StateDraw_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.StateDrawBlackBoard_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::StateDrawBlackBoard_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "StateDrawBlackBoard_IN");

	Params::UIVoiceAnswerDraw_StateDrawBlackBoard_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.StateDrawBlackBoard_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::StateDrawBlackBoard_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "StateDrawBlackBoard_Out");

	Params::UIVoiceAnswerDraw_StateDrawBlackBoard_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.StateDrawNetworkIcon_IN
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::StateDrawNetworkIcon_IN()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "StateDrawNetworkIcon_IN");

	Params::UIVoiceAnswerDraw_StateDrawNetworkIcon_IN Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.StateDrawNetworkIcon_Out
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::StateDrawNetworkIcon_Out()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "StateDrawNetworkIcon_Out");

	Params::UIVoiceAnswerDraw_StateDrawNetworkIcon_Out Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function xrd777.UIVoiceAnswerDraw.TimeWithinRangeFrame
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   NowTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartFrame                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndFrame                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AUIVoiceAnswerDraw::TimeWithinRangeFrame(float NowTime, int32 StartFrame, int32 EndFrame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVoiceAnswerDraw", "TimeWithinRangeFrame");

	Params::UIVoiceAnswerDraw_TimeWithinRangeFrame Parms{};

	Parms.NowTime = NowTime;
	Parms.StartFrame = StartFrame;
	Parms.EndFrame = EndFrame;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UmgDebugLogWidget.SetText
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class FText                             InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUmgDebugLogWidget::SetText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UmgDebugLogWidget", "SetText");

	Params::UmgDebugLogWidget_SetText Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function xrd777.UtlBpObjManager.CreateBluePrint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UClass*                           ObjectClass                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUtlBpObjCore*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUtlBpObjCore* UUtlBpObjManager::CreateBluePrint(class UClass* ObjectClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObjManager", "CreateBluePrint");

	Params::UtlBpObjManager_CreateBluePrint Parms{};

	Parms.ObjectClass = ObjectClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function xrd777.UtlBpObjManager.SetBluePrint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUtlBpObjCore*                    BpObjCore                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUtlBpObjManager::SetBluePrint(class UUtlBpObjCore* BpObjCore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObjManager", "SetBluePrint");

	Params::UtlBpObjManager_SetBluePrint Parms{};

	Parms.BpObjCore = BpObjCore;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function xrd777.UtlBpObjManager.SetEventEnd
// (Final, Native, Public, BlueprintCallable)

void UUtlBpObjManager::SetEventEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UtlBpObjManager", "SetEventEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

