#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LS_BtlResult_Master

#include "Basic.hpp"

#include "Xrd777_structs.hpp"


namespace SDK::Params
{

// Function LS_BtlResult_Master.SequenceDirector_C.ExecuteUbergraph_SequenceDirector
// 0x0180 (0x0180 - 0x0000)
struct SequenceDirector_C_ExecuteUbergraph_SequenceDirector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlEventAssistant_C*                K2Node_CustomEvent_BtlEventAssistant;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_ID;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_Invoke_6;                   // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_Invoke_5;                   // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Bind_5;                         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_Invoke_4;                   // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Interp_Time;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Radius;                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Height_Ratio;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Rotate_Degree;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlEventAreaType                             K2Node_CustomEvent_TargetType;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember1_4;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Bind_4;                         // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember2_3;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Bind_3;                         // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember3_4;             // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Bind_2;                         // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember3_3;             // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID_8;                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Blend_8;                        // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_Invoke_3;                   // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Bind_1;                         // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_Invoke_2;                   // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID_7;                      // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Blend_7;                        // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember1_3;             // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID_6;                      // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Blend_6;                        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember2_2;             // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID_5;                      // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Blend_5;                        // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember3_2;             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID_4;                      // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Blend_4;                        // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_Invoke_1;                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID_3;                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Blend_3;                        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember1_2;             // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID_2;                      // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Blend_2;                        // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember2_1;             // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID_1;                      // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Blend_1;                        // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember3_1;             // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID;                        // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Blend;                          // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember1_1;             // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Bind;                           // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember1;               // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        K2Node_CustomEvent_AnimID_3;                       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        K2Node_CustomEvent_AnimID_Next_3;                  // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13A[0x6];                                      // 0x013A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember2;               // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        K2Node_CustomEvent_AnimID_2;                       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        K2Node_CustomEvent_AnimID_Next_2;                  // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14A[0x6];                                      // 0x014A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_PartyMember3;               // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        K2Node_CustomEvent_AnimID_1;                       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        K2Node_CustomEvent_AnimID_Next_1;                  // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15A[0x6];                                      // 0x015A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlPerformer_C*                     K2Node_CustomEvent_BCD_Invoke;                     // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        K2Node_CustomEvent_AnimID;                         // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        K2Node_CustomEvent_AnimID_Next;                    // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlEventAssistant_C*                K2Node_CustomEvent_BtlEventAssistant_2;            // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlEventAssistant_C*                K2Node_CustomEvent_BtlEventAssistant_1;            // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000008, "Wrong alignment on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(sizeof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector) == 0x000180, "Wrong size on SequenceDirector_C_ExecuteUbergraph_SequenceDirector");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, EntryPoint) == 0x000000, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::EntryPoint' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BtlEventAssistant) == 0x000008, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BtlEventAssistant' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_ID) == 0x000010, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_ID' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_Invoke_6) == 0x000018, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_Invoke_6' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_Invoke_5) == 0x000020, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_Invoke_5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Bind_5) == 0x000028, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Bind_5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_Invoke_4) == 0x000030, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_Invoke_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Interp_Time) == 0x000038, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Interp_Time' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Radius) == 0x00003C, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Radius' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Height_Ratio) == 0x000040, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Height_Ratio' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Rotate_Degree) == 0x000044, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Rotate_Degree' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_TargetType) == 0x000048, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_TargetType' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember1_4) == 0x000050, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember1_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Bind_4) == 0x000058, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Bind_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember2_3) == 0x000060, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember2_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Bind_3) == 0x000068, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Bind_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember3_4) == 0x000070, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember3_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Bind_2) == 0x000078, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Bind_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember3_3) == 0x000080, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember3_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Anim_ID_8) == 0x000088, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Anim_ID_8' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Blend_8) == 0x00008C, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Blend_8' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_Invoke_3) == 0x000090, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_Invoke_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Bind_1) == 0x000098, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Bind_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_Invoke_2) == 0x0000A0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_Invoke_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Anim_ID_7) == 0x0000A8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Anim_ID_7' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Blend_7) == 0x0000AC, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Blend_7' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember1_3) == 0x0000B0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember1_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Anim_ID_6) == 0x0000B8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Anim_ID_6' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Blend_6) == 0x0000BC, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Blend_6' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember2_2) == 0x0000C0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember2_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Anim_ID_5) == 0x0000C8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Anim_ID_5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Blend_5) == 0x0000CC, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Blend_5' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember3_2) == 0x0000D0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember3_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Anim_ID_4) == 0x0000D8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Anim_ID_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Blend_4) == 0x0000DC, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Blend_4' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_Invoke_1) == 0x0000E0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_Invoke_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Anim_ID_3) == 0x0000E8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Anim_ID_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Blend_3) == 0x0000EC, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Blend_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember1_2) == 0x0000F0, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember1_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Anim_ID_2) == 0x0000F8, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Anim_ID_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Blend_2) == 0x0000FC, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Blend_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember2_1) == 0x000100, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember2_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Anim_ID_1) == 0x000108, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Anim_ID_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Blend_1) == 0x00010C, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Blend_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember3_1) == 0x000110, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember3_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Anim_ID) == 0x000118, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Anim_ID' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Blend) == 0x00011C, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Blend' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember1_1) == 0x000120, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember1_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_Bind) == 0x000128, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_Bind' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember1) == 0x000130, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_AnimID_3) == 0x000138, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_AnimID_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_AnimID_Next_3) == 0x000139, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_AnimID_Next_3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember2) == 0x000140, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_AnimID_2) == 0x000148, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_AnimID_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_AnimID_Next_2) == 0x000149, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_AnimID_Next_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_PartyMember3) == 0x000150, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_PartyMember3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_AnimID_1) == 0x000158, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_AnimID_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_AnimID_Next_1) == 0x000159, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_AnimID_Next_1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BCD_Invoke) == 0x000160, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BCD_Invoke' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_AnimID) == 0x000168, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_AnimID' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_AnimID_Next) == 0x000169, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_AnimID_Next' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BtlEventAssistant_2) == 0x000170, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BtlEventAssistant_2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_ExecuteUbergraph_SequenceDirector, K2Node_CustomEvent_BtlEventAssistant_1) == 0x000178, "Member 'SequenceDirector_C_ExecuteUbergraph_SequenceDirector::K2Node_CustomEvent_BtlEventAssistant_1' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BtlEventAssistant_Event_2
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BtlEventAssistant_Event_2 final
{
public:
	class ABP_BtlEventAssistant_C*                BtlEventAssistant;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ID;                                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BtlEventAssistant_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_BtlEventAssistant_Event_2");
static_assert(sizeof(SequenceDirector_C_BtlEventAssistant_Event_2) == 0x000010, "Wrong size on SequenceDirector_C_BtlEventAssistant_Event_2");
static_assert(offsetof(SequenceDirector_C_BtlEventAssistant_Event_2, BtlEventAssistant) == 0x000000, "Member 'SequenceDirector_C_BtlEventAssistant_Event_2::BtlEventAssistant' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BtlEventAssistant_Event_2, ID) == 0x000008, "Member 'SequenceDirector_C_BtlEventAssistant_Event_2::ID' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BtlEventAssistant_Event_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BtlEventAssistant_Event_1 final
{
public:
	class ABP_BtlEventAssistant_C*                BtlEventAssistant;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BtlEventAssistant_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BtlEventAssistant_Event_1");
static_assert(sizeof(SequenceDirector_C_BtlEventAssistant_Event_1) == 0x000008, "Wrong size on SequenceDirector_C_BtlEventAssistant_Event_1");
static_assert(offsetof(SequenceDirector_C_BtlEventAssistant_Event_1, BtlEventAssistant) == 0x000000, "Member 'SequenceDirector_C_BtlEventAssistant_Event_1::BtlEventAssistant' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BtlEventAssistant_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BtlEventAssistant_Event_0 final
{
public:
	class ABP_BtlEventAssistant_C*                BtlEventAssistant;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BtlEventAssistant_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BtlEventAssistant_Event_0");
static_assert(sizeof(SequenceDirector_C_BtlEventAssistant_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BtlEventAssistant_Event_0");
static_assert(offsetof(SequenceDirector_C_BtlEventAssistant_Event_0, BtlEventAssistant) == 0x000000, "Member 'SequenceDirector_C_BtlEventAssistant_Event_0::BtlEventAssistant' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_Invoke_Event_7
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_Invoke_Event_7 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_Invoke;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        AnimId;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        AnimID_Next;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_Invoke_Event_7) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_Invoke_Event_7");
static_assert(sizeof(SequenceDirector_C_BCD_Invoke_Event_7) == 0x000010, "Wrong size on SequenceDirector_C_BCD_Invoke_Event_7");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_7, BCD_Invoke) == 0x000000, "Member 'SequenceDirector_C_BCD_Invoke_Event_7::BCD_Invoke' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_7, AnimId) == 0x000008, "Member 'SequenceDirector_C_BCD_Invoke_Event_7::AnimId' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_7, AnimID_Next) == 0x000009, "Member 'SequenceDirector_C_BCD_Invoke_Event_7::AnimID_Next' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember3_Event_4
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember3_Event_4 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        AnimId;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        AnimID_Next;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember3_Event_4) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember3_Event_4");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember3_Event_4) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember3_Event_4");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_4, BCD_PartyMember3) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_4::BCD_PartyMember3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_4, AnimId) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_4::AnimId' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_4, AnimID_Next) == 0x000009, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_4::AnimID_Next' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember2_Event_4
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember2_Event_4 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        AnimId;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        AnimID_Next;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember2_Event_4) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember2_Event_4");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember2_Event_4) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember2_Event_4");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember2_Event_4, BCD_PartyMember2) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember2_Event_4::BCD_PartyMember2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember2_Event_4, AnimId) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember2_Event_4::AnimId' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember2_Event_4, AnimID_Next) == 0x000009, "Member 'SequenceDirector_C_BCD_PartyMember2_Event_4::AnimID_Next' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember1_Event_5
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember1_Event_5 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember1;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        AnimId;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        AnimID_Next;                                       // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember1_Event_5) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember1_Event_5");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember1_Event_5) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember1_Event_5");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_5, BCD_PartyMember1) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_5::BCD_PartyMember1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_5, AnimId) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_5::AnimId' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_5, AnimID_Next) == 0x000009, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_5::AnimID_Next' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember1_Event_4
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember1_Event_4 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember1;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bind;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember1_Event_4) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember1_Event_4");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember1_Event_4) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember1_Event_4");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_4, BCD_PartyMember1) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_4::BCD_PartyMember1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_4, Bind) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_4::Bind' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember3_Event_3
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember3_Event_3 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             Anim_ID;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember3_Event_3) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember3_Event_3");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember3_Event_3) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember3_Event_3");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_3, BCD_PartyMember3) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_3::BCD_PartyMember3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_3, Anim_ID) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_3::Anim_ID' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_3, Blend) == 0x00000C, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_3::Blend' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember2_Event_3
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember2_Event_3 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             Anim_ID;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember2_Event_3) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember2_Event_3");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember2_Event_3) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember2_Event_3");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember2_Event_3, BCD_PartyMember2) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember2_Event_3::BCD_PartyMember2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember2_Event_3, Anim_ID) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember2_Event_3::Anim_ID' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember2_Event_3, Blend) == 0x00000C, "Member 'SequenceDirector_C_BCD_PartyMember2_Event_3::Blend' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember1_Event_3
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember1_Event_3 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember1;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             Anim_ID;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember1_Event_3) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember1_Event_3");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember1_Event_3) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember1_Event_3");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_3, BCD_PartyMember1) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_3::BCD_PartyMember1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_3, Anim_ID) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_3::Anim_ID' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_3, Blend) == 0x00000C, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_3::Blend' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_Invoke_Event_5
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_Invoke_Event_5 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_Invoke;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             Anim_ID;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_Invoke_Event_5) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_Invoke_Event_5");
static_assert(sizeof(SequenceDirector_C_BCD_Invoke_Event_5) == 0x000010, "Wrong size on SequenceDirector_C_BCD_Invoke_Event_5");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_5, BCD_Invoke) == 0x000000, "Member 'SequenceDirector_C_BCD_Invoke_Event_5::BCD_Invoke' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_5, Anim_ID) == 0x000008, "Member 'SequenceDirector_C_BCD_Invoke_Event_5::Anim_ID' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_5, Blend) == 0x00000C, "Member 'SequenceDirector_C_BCD_Invoke_Event_5::Blend' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember3_Event_2
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember3_Event_2 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             Anim_ID;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember3_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember3_Event_2");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember3_Event_2) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember3_Event_2");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_2, BCD_PartyMember3) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_2::BCD_PartyMember3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_2, Anim_ID) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_2::Anim_ID' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_2, Blend) == 0x00000C, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_2::Blend' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember2_Event_2
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember2_Event_2 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             Anim_ID;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember2_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember2_Event_2");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember2_Event_2) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember2_Event_2");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember2_Event_2, BCD_PartyMember2) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember2_Event_2::BCD_PartyMember2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember2_Event_2, Anim_ID) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember2_Event_2::Anim_ID' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember2_Event_2, Blend) == 0x00000C, "Member 'SequenceDirector_C_BCD_PartyMember2_Event_2::Blend' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember1_Event_2
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember1_Event_2 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember1;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             Anim_ID;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember1_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember1_Event_2");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember1_Event_2) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember1_Event_2");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_2, BCD_PartyMember1) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_2::BCD_PartyMember1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_2, Anim_ID) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_2::Anim_ID' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_2, Blend) == 0x00000C, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_2::Blend' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_Invoke_Event_4
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_Invoke_Event_4 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_Invoke;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             Anim_ID;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_Invoke_Event_4) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_Invoke_Event_4");
static_assert(sizeof(SequenceDirector_C_BCD_Invoke_Event_4) == 0x000010, "Wrong size on SequenceDirector_C_BCD_Invoke_Event_4");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_4, BCD_Invoke) == 0x000000, "Member 'SequenceDirector_C_BCD_Invoke_Event_4::BCD_Invoke' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_4, Anim_ID) == 0x000008, "Member 'SequenceDirector_C_BCD_Invoke_Event_4::Anim_ID' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_4, Blend) == 0x00000C, "Member 'SequenceDirector_C_BCD_Invoke_Event_4::Blend' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_Invoke_Event_2
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_Invoke_Event_2 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_Invoke;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bind;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_BCD_Invoke_Event_2) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_Invoke_Event_2");
static_assert(sizeof(SequenceDirector_C_BCD_Invoke_Event_2) == 0x000010, "Wrong size on SequenceDirector_C_BCD_Invoke_Event_2");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_2, BCD_Invoke) == 0x000000, "Member 'SequenceDirector_C_BCD_Invoke_Event_2::BCD_Invoke' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_2, Bind) == 0x000008, "Member 'SequenceDirector_C_BCD_Invoke_Event_2::Bind' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember3_Event_1
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember3_Event_1 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             Anim_ID;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember3_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember3_Event_1");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember3_Event_1) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember3_Event_1");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_1, BCD_PartyMember3) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_1::BCD_PartyMember3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_1, Anim_ID) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_1::Anim_ID' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_1, Blend) == 0x00000C, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_1::Blend' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember3_Event_0
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember3_Event_0 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bind;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember3_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember3_Event_0");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember3_Event_0) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember3_Event_0");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_0, BCD_PartyMember3) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_0::BCD_PartyMember3' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember3_Event_0, Bind) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember3_Event_0::Bind' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember2_Event_0
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember2_Event_0 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bind;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember2_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember2_Event_0");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember2_Event_0) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember2_Event_0");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember2_Event_0, BCD_PartyMember2) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember2_Event_0::BCD_PartyMember2' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember2_Event_0, Bind) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember2_Event_0::Bind' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_PartyMember1_Event_0
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_PartyMember1_Event_0 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember1;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bind;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_BCD_PartyMember1_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_PartyMember1_Event_0");
static_assert(sizeof(SequenceDirector_C_BCD_PartyMember1_Event_0) == 0x000010, "Wrong size on SequenceDirector_C_BCD_PartyMember1_Event_0");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_0, BCD_PartyMember1) == 0x000000, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_0::BCD_PartyMember1' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_PartyMember1_Event_0, Bind) == 0x000008, "Member 'SequenceDirector_C_BCD_PartyMember1_Event_0::Bind' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_Invoke_Event_3
// 0x0020 (0x0020 - 0x0000)
struct SequenceDirector_C_BCD_Invoke_Event_3 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_Invoke;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Interp_Time;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height_Ratio;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotate_Degree;                                     // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlEventAreaType                             TargetType;                                        // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_Invoke_Event_3) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_Invoke_Event_3");
static_assert(sizeof(SequenceDirector_C_BCD_Invoke_Event_3) == 0x000020, "Wrong size on SequenceDirector_C_BCD_Invoke_Event_3");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_3, BCD_Invoke) == 0x000000, "Member 'SequenceDirector_C_BCD_Invoke_Event_3::BCD_Invoke' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_3, Interp_Time) == 0x000008, "Member 'SequenceDirector_C_BCD_Invoke_Event_3::Interp_Time' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_3, Radius) == 0x00000C, "Member 'SequenceDirector_C_BCD_Invoke_Event_3::Radius' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_3, Height_Ratio) == 0x000010, "Member 'SequenceDirector_C_BCD_Invoke_Event_3::Height_Ratio' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_3, Rotate_Degree) == 0x000014, "Member 'SequenceDirector_C_BCD_Invoke_Event_3::Rotate_Degree' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_3, TargetType) == 0x000018, "Member 'SequenceDirector_C_BCD_Invoke_Event_3::TargetType' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_Invoke_Event_1
// 0x0010 (0x0010 - 0x0000)
struct SequenceDirector_C_BCD_Invoke_Event_1 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_Invoke;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Bind;                                              // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(SequenceDirector_C_BCD_Invoke_Event_1) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_Invoke_Event_1");
static_assert(sizeof(SequenceDirector_C_BCD_Invoke_Event_1) == 0x000010, "Wrong size on SequenceDirector_C_BCD_Invoke_Event_1");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_1, BCD_Invoke) == 0x000000, "Member 'SequenceDirector_C_BCD_Invoke_Event_1::BCD_Invoke' has a wrong offset!");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_1, Bind) == 0x000008, "Member 'SequenceDirector_C_BCD_Invoke_Event_1::Bind' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.BCD_Invoke_Event_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_BCD_Invoke_Event_0 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_Invoke;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_BCD_Invoke_Event_0) == 0x000008, "Wrong alignment on SequenceDirector_C_BCD_Invoke_Event_0");
static_assert(sizeof(SequenceDirector_C_BCD_Invoke_Event_0) == 0x000008, "Wrong size on SequenceDirector_C_BCD_Invoke_Event_0");
static_assert(offsetof(SequenceDirector_C_BCD_Invoke_Event_0, BCD_Invoke) == 0x000000, "Member 'SequenceDirector_C_BCD_Invoke_Event_0::BCD_Invoke' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_0
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_Invoke;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0, BCD_Invoke) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_0::BCD_Invoke' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_1
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_Invoke;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1, BCD_Invoke) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_1::BCD_Invoke' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_2
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember1;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2, BCD_PartyMember1) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_2::BCD_PartyMember1' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_3
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3, BCD_PartyMember2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_3::BCD_PartyMember2' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_4
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4, BCD_PartyMember3) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_4::BCD_PartyMember3' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_5
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5, BCD_PartyMember3) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_5::BCD_PartyMember3' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_6
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember2;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6, BCD_PartyMember2) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_6::BCD_PartyMember2' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_7
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember3;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7, BCD_PartyMember3) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_7::BCD_PartyMember3' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_8
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_Invoke;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8, BCD_Invoke) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_8::BCD_Invoke' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_9
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember1;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9, BCD_PartyMember1) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_9::BCD_PartyMember1' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_10
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10 final
{
public:
	class ABP_BtlPerformer_C*                     BCD_PartyMember1;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10, BCD_PartyMember1) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_10::BCD_PartyMember1' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_11
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11 final
{
public:
	class ABP_BtlEventAssistant_C*                BtlEventAssistant;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11, BtlEventAssistant) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_11::BtlEventAssistant' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_12
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12 final
{
public:
	class ABP_BtlEventAssistant_C*                BtlEventAssistant;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12, BtlEventAssistant) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_12::BtlEventAssistant' has a wrong offset!");

// Function LS_BtlResult_Master.SequenceDirector_C.SequenceEvent__ENTRYPOINTSequenceDirector_13
// 0x0008 (0x0008 - 0x0000)
struct SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13 final
{
public:
	class ABP_BtlEventAssistant_C*                BtlEventAssistant;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13) == 0x000008, "Wrong alignment on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13");
static_assert(sizeof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13) == 0x000008, "Wrong size on SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13");
static_assert(offsetof(SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13, BtlEventAssistant) == 0x000000, "Member 'SequenceDirector_C_SequenceEvent__ENTRYPOINTSequenceDirector_13::BtlEventAssistant' has a wrong offset!");

}

