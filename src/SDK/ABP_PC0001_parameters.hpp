#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_PC0001

#include "Basic.hpp"


namespace SDK::Params
{

// Function ABP_PC0001.ABP_PC0001_C.ExecuteUbergraph_ABP_PC0001
// 0x00C0 (0x00C0 - 0x0000)
struct ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_1;               // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x003B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Is_Walk_and_in_Pocket_ReturnValue;        // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_2;      // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_3;      // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x004D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x004E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaySlotAnimation_ReturnValue;          // 0x004F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UAnimMontage*                           CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue_1; // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlaySlotAnimation_ReturnValue_1;        // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_PlaySlotAnimationAsDynamicMontageLoop_ReturnValue; // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CallFunc_PlaySlotAnimationAsDynamicMontageLoop_ReturnValue_1; // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayingSlotAnimation_ReturnValue;       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetAttachedActors_OutActors;              // 0x0080(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 CallFunc_GetObjectClass_ReturnValue;               // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ClassClass_ReturnValue;        // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_1;                     // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_Has_Been_Initd_Variable_2;               // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaySlotAnimation_ReturnValue_2;        // 0x00AE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaySlotAnimation_ReturnValue_3;        // 0x00AF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_Is_Dungeon_And_Event_Out_IsDungeon;   // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_Is_Dungeon_And_Event_Out_IsEvent;     // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_Is_Dungeon_And_Event_Out_IsDungeon_1; // 0x00B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Get_Is_Dungeon_And_Event_Out_IsEvent_1;   // 0x00B3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_5;                // 0x00B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Montage_IsPlaying_ReturnValue;            // 0x00B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_6;                 // 0x00B7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Temp_bool_IsClosed_Variable_2;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_4;      // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_6;                // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_7;                 // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_8;                 // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001) == 0x000008, "Wrong alignment on ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001");
static_assert(sizeof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001) == 0x0000C0, "Wrong size on ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, EntryPoint) == 0x000000, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Not_PreBool_ReturnValue) == 0x000004, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, Temp_bool_Has_Been_Initd_Variable) == 0x000005, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, Temp_bool_True_if_break_was_hit_Variable) == 0x000010, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, Temp_int_Array_Index_Variable) == 0x000014, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Not_PreBool_ReturnValue_1) == 0x000018, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, K2Node_Event_DeltaTimeX) == 0x00001C, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000020, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_IsValid_ReturnValue) == 0x000028, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, Temp_bool_Has_Been_Initd_Variable_1) == 0x000029, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::Temp_bool_Has_Been_Initd_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Not_PreBool_ReturnValue_2) == 0x00002A, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Not_PreBool_ReturnValue_3) == 0x00002B, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_BooleanAND_ReturnValue) == 0x00002C, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x000030, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_IsValid_ReturnValue_1) == 0x000038, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000039, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, Temp_bool_IsClosed_Variable) == 0x00003A, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x00003B, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Is_Walk_and_in_Pocket_ReturnValue) == 0x00003C, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Is_Walk_and_in_Pocket_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue) == 0x000040, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000048, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000049, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_EqualEqual_FloatFloat_ReturnValue_2) == 0x00004A, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_EqualEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_EqualEqual_FloatFloat_ReturnValue_3) == 0x00004B, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_EqualEqual_FloatFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_BooleanAND_ReturnValue_1) == 0x00004C, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x00004D, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_BooleanAND_ReturnValue_2) == 0x00004E, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_IsPlaySlotAnimation_ReturnValue) == 0x00004F, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_IsPlaySlotAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue_1) == 0x000050, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_PlaySlotAnimationAsDynamicMontage_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_IsPlaySlotAnimation_ReturnValue_1) == 0x000058, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_IsPlaySlotAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Not_PreBool_ReturnValue_4) == 0x000059, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_PlaySlotAnimationAsDynamicMontageLoop_ReturnValue) == 0x000060, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_PlaySlotAnimationAsDynamicMontageLoop_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_BooleanAND_ReturnValue_3) == 0x000068, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_PlaySlotAnimationAsDynamicMontageLoop_ReturnValue_1) == 0x000070, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_PlaySlotAnimationAsDynamicMontageLoop_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_IsPlayingSlotAnimation_ReturnValue) == 0x000078, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_IsPlayingSlotAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_GetAttachedActors_OutActors) == 0x000080, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_GetAttachedActors_OutActors' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Array_Get_Item) == 0x000090, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Array_Length_ReturnValue) == 0x000098, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_GetObjectClass_ReturnValue) == 0x0000A0, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_GetObjectClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Less_IntInt_ReturnValue) == 0x0000A8, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_EqualEqual_ClassClass_ReturnValue) == 0x0000A9, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_EqualEqual_ClassClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_BooleanAND_ReturnValue_4) == 0x0000AA, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, Temp_bool_IsClosed_Variable_1) == 0x0000AB, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::Temp_bool_IsClosed_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, Temp_bool_Has_Been_Initd_Variable_2) == 0x0000AC, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::Temp_bool_Has_Been_Initd_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_BooleanAND_ReturnValue_5) == 0x0000AD, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_IsPlaySlotAnimation_ReturnValue_2) == 0x0000AE, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_IsPlaySlotAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_IsPlaySlotAnimation_ReturnValue_3) == 0x0000AF, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_IsPlaySlotAnimation_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Get_Is_Dungeon_And_Event_Out_IsDungeon) == 0x0000B0, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Get_Is_Dungeon_And_Event_Out_IsDungeon' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Get_Is_Dungeon_And_Event_Out_IsEvent) == 0x0000B1, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Get_Is_Dungeon_And_Event_Out_IsEvent' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Get_Is_Dungeon_And_Event_Out_IsDungeon_1) == 0x0000B2, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Get_Is_Dungeon_And_Event_Out_IsDungeon_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Get_Is_Dungeon_And_Event_Out_IsEvent_1) == 0x0000B3, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Get_Is_Dungeon_And_Event_Out_IsEvent_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_IsValid_ReturnValue_2) == 0x0000B4, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Not_PreBool_ReturnValue_5) == 0x0000B5, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Not_PreBool_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Montage_IsPlaying_ReturnValue) == 0x0000B6, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Montage_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_BooleanAND_ReturnValue_6) == 0x0000B7, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_BooleanAND_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, Temp_bool_IsClosed_Variable_2) == 0x0000B8, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::Temp_bool_IsClosed_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_EqualEqual_FloatFloat_ReturnValue_4) == 0x0000B9, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_EqualEqual_FloatFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_Not_PreBool_ReturnValue_6) == 0x0000BA, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_Not_PreBool_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_BooleanAND_ReturnValue_7) == 0x0000BB, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_BooleanAND_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001, CallFunc_BooleanAND_ReturnValue_8) == 0x0000BC, "Member 'ABP_PC0001_C_ExecuteUbergraph_ABP_PC0001::CallFunc_BooleanAND_ReturnValue_8' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_PC0001_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX_0;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC0001_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_PC0001_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_PC0001_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_PC0001_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_PC0001_C_BlueprintUpdateAnimation, DeltaTimeX_0) == 0x000000, "Member 'ABP_PC0001_C_BlueprintUpdateAnimation::DeltaTimeX_0' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.IsInPocketWalking
// 0x000C (0x000C - 0x0000)
struct ABP_PC0001_C_IsInPocketWalking final
{
public:
	bool                                          OutIsInPocketWalking;                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_IsInPocketWalking) == 0x000004, "Wrong alignment on ABP_PC0001_C_IsInPocketWalking");
static_assert(sizeof(ABP_PC0001_C_IsInPocketWalking) == 0x00000C, "Wrong size on ABP_PC0001_C_IsInPocketWalking");
static_assert(offsetof(ABP_PC0001_C_IsInPocketWalking, OutIsInPocketWalking) == 0x000000, "Member 'ABP_PC0001_C_IsInPocketWalking::OutIsInPocketWalking' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_IsInPocketWalking, CallFunc_GetCurveValue_ReturnValue) == 0x000004, "Member 'ABP_PC0001_C_IsInPocketWalking::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_IsInPocketWalking, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'ABP_PC0001_C_IsInPocketWalking::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_IsInPocketWalking, CallFunc_BooleanAND_ReturnValue) == 0x000009, "Member 'ABP_PC0001_C_IsInPocketWalking::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Is Walk and in Pocket
// 0x000D (0x000D - 0x0000)
struct ABP_PC0001_C_Is_Walk_and_in_Pocket final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_2;      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Is_Walk_and_in_Pocket) == 0x000001, "Wrong alignment on ABP_PC0001_C_Is_Walk_and_in_Pocket");
static_assert(sizeof(ABP_PC0001_C_Is_Walk_and_in_Pocket) == 0x00000D, "Wrong size on ABP_PC0001_C_Is_Walk_and_in_Pocket");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, ReturnValue) == 0x000000, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000002, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000003, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, CallFunc_BooleanAND_ReturnValue) == 0x000004, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000005, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, CallFunc_BooleanAND_ReturnValue_1) == 0x000006, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, CallFunc_Not_PreBool_ReturnValue_1) == 0x000007, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, CallFunc_EqualEqual_FloatFloat_ReturnValue_2) == 0x000008, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::CallFunc_EqualEqual_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, CallFunc_BooleanAND_ReturnValue_2) == 0x000009, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, CallFunc_BooleanAND_ReturnValue_3) == 0x00000A, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, CallFunc_BooleanAND_ReturnValue_4) == 0x00000B, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_Walk_and_in_Pocket, CallFunc_BooleanOR_ReturnValue) == 0x00000C, "Member 'ABP_PC0001_C_Is_Walk_and_in_Pocket::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Set_ForceAttachPocket
// 0x0018 (0x0018 - 0x0000)
struct ABP_PC0001_C_Set_ForceAttachPocket final
{
public:
	bool                                          CallFunc_IsPlaySlotAnimation_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaySlotAnimation_ReturnValue_1;        // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_4;                 // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_5;                 // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Set_ForceAttachPocket) == 0x000004, "Wrong alignment on ABP_PC0001_C_Set_ForceAttachPocket");
static_assert(sizeof(ABP_PC0001_C_Set_ForceAttachPocket) == 0x000018, "Wrong size on ABP_PC0001_C_Set_ForceAttachPocket");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_IsPlaySlotAnimation_ReturnValue) == 0x000000, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_IsPlaySlotAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_GetCurveValue_ReturnValue) == 0x000004, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000008, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000009, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00000A, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_IsPlaySlotAnimation_ReturnValue_1) == 0x00000C, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_IsPlaySlotAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_BooleanOR_ReturnValue) == 0x00000D, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_Not_PreBool_ReturnValue) == 0x00000E, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_BooleanAND_ReturnValue_1) == 0x00000F, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_Not_PreBool_ReturnValue_1) == 0x000010, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_BooleanAND_ReturnValue_2) == 0x000011, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_Not_PreBool_ReturnValue_2) == 0x000012, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_BooleanOR_ReturnValue_1) == 0x000013, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_BooleanAND_ReturnValue_3) == 0x000014, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_Not_PreBool_ReturnValue_3) == 0x000015, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_BooleanAND_ReturnValue_4) == 0x000016, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_BooleanAND_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_ForceAttachPocket, CallFunc_BooleanAND_ReturnValue_5) == 0x000017, "Member 'ABP_PC0001_C_Set_ForceAttachPocket::CallFunc_BooleanAND_ReturnValue_5' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Set_IsInPocket
// 0x0010 (0x0010 - 0x0000)
struct ABP_PC0001_C_Set_IsInPocket final
{
public:
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue;        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_FloatFloat_ReturnValue_1;      // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Set_IsInPocket) == 0x000004, "Wrong alignment on ABP_PC0001_C_Set_IsInPocket");
static_assert(sizeof(ABP_PC0001_C_Set_IsInPocket) == 0x000010, "Wrong size on ABP_PC0001_C_Set_IsInPocket");
static_assert(offsetof(ABP_PC0001_C_Set_IsInPocket, CallFunc_GetCurveValue_ReturnValue) == 0x000000, "Member 'ABP_PC0001_C_Set_IsInPocket::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsInPocket, CallFunc_EqualEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'ABP_PC0001_C_Set_IsInPocket::CallFunc_EqualEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsInPocket, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000005, "Member 'ABP_PC0001_C_Set_IsInPocket::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsInPocket, CallFunc_Not_PreBool_ReturnValue) == 0x000006, "Member 'ABP_PC0001_C_Set_IsInPocket::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsInPocket, CallFunc_EqualEqual_FloatFloat_ReturnValue_1) == 0x000007, "Member 'ABP_PC0001_C_Set_IsInPocket::CallFunc_EqualEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsInPocket, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'ABP_PC0001_C_Set_IsInPocket::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsInPocket, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000009, "Member 'ABP_PC0001_C_Set_IsInPocket::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsInPocket, CallFunc_BooleanOR_ReturnValue) == 0x00000A, "Member 'ABP_PC0001_C_Set_IsInPocket::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsInPocket, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'ABP_PC0001_C_Set_IsInPocket::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsInPocket, CallFunc_BooleanAND_ReturnValue_1) == 0x00000C, "Member 'ABP_PC0001_C_Set_IsInPocket::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsInPocket, CallFunc_BooleanOR_ReturnValue_1) == 0x00000D, "Member 'ABP_PC0001_C_Set_IsInPocket::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Set_MeandelingOffset
// 0x003C (0x003C - 0x0000)
struct ABP_PC0001_C_Set_MeandelingOffset final
{
public:
	float                                         MeandelingOffset_X;                                // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_1;                // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SelectFloat_ReturnValue_2;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FInterpTo_ReturnValue;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_2;         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC0001_C_Set_MeandelingOffset) == 0x000004, "Wrong alignment on ABP_PC0001_C_Set_MeandelingOffset");
static_assert(sizeof(ABP_PC0001_C_Set_MeandelingOffset) == 0x00003C, "Wrong size on ABP_PC0001_C_Set_MeandelingOffset");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, MeandelingOffset_X) == 0x000000, "Member 'ABP_PC0001_C_Set_MeandelingOffset::MeandelingOffset_X' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000004, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_SelectFloat_ReturnValue) == 0x000008, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x00000C, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_SelectFloat_ReturnValue_1) == 0x000010, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_SelectFloat_ReturnValue_2) == 0x000018, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_FInterpTo_ReturnValue) == 0x00001C, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_FInterpTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_Greater_FloatFloat_ReturnValue_2) == 0x000020, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_Greater_FloatFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000024, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_GetTimeRange_MinTime) == 0x000028, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_GetTimeRange_MaxTime) == 0x00002C, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000030, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_GetFloatValue_ReturnValue) == 0x000034, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_MeandelingOffset, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000038, "Member 'ABP_PC0001_C_Set_MeandelingOffset::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Modify_LocomotionState
// 0x0002 (0x0002 - 0x0000)
struct ABP_PC0001_C_Modify_LocomotionState final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Modify_LocomotionState) == 0x000001, "Wrong alignment on ABP_PC0001_C_Modify_LocomotionState");
static_assert(sizeof(ABP_PC0001_C_Modify_LocomotionState) == 0x000002, "Wrong size on ABP_PC0001_C_Modify_LocomotionState");
static_assert(offsetof(ABP_PC0001_C_Modify_LocomotionState, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'ABP_PC0001_C_Modify_LocomotionState::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Modify_LocomotionState, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'ABP_PC0001_C_Modify_LocomotionState::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Set_DisableUpperBodyLayer
// 0x0008 (0x0008 - 0x0000)
struct ABP_PC0001_C_Set_DisableUpperBodyLayer final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Montage_IsPlaying_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaySlotAnimation_ReturnValue;          // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Set_DisableUpperBodyLayer) == 0x000001, "Wrong alignment on ABP_PC0001_C_Set_DisableUpperBodyLayer");
static_assert(sizeof(ABP_PC0001_C_Set_DisableUpperBodyLayer) == 0x000008, "Wrong size on ABP_PC0001_C_Set_DisableUpperBodyLayer");
static_assert(offsetof(ABP_PC0001_C_Set_DisableUpperBodyLayer, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'ABP_PC0001_C_Set_DisableUpperBodyLayer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_DisableUpperBodyLayer, CallFunc_Montage_IsPlaying_ReturnValue) == 0x000001, "Member 'ABP_PC0001_C_Set_DisableUpperBodyLayer::CallFunc_Montage_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_DisableUpperBodyLayer, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000002, "Member 'ABP_PC0001_C_Set_DisableUpperBodyLayer::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_DisableUpperBodyLayer, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'ABP_PC0001_C_Set_DisableUpperBodyLayer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_DisableUpperBodyLayer, CallFunc_BooleanAND_ReturnValue_1) == 0x000004, "Member 'ABP_PC0001_C_Set_DisableUpperBodyLayer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_DisableUpperBodyLayer, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000005, "Member 'ABP_PC0001_C_Set_DisableUpperBodyLayer::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_DisableUpperBodyLayer, CallFunc_BooleanOR_ReturnValue) == 0x000006, "Member 'ABP_PC0001_C_Set_DisableUpperBodyLayer::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_DisableUpperBodyLayer, CallFunc_IsPlaySlotAnimation_ReturnValue) == 0x000007, "Member 'ABP_PC0001_C_Set_DisableUpperBodyLayer::CallFunc_IsPlaySlotAnimation_ReturnValue' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Set_NoCopyAttachShoulder
// 0x0003 (0x0003 - 0x0000)
struct ABP_PC0001_C_Set_NoCopyAttachShoulder final
{
public:
	bool                                          CallFunc_Montage_IsPlaying_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Montage_IsPlaying_ReturnValue_1;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Set_NoCopyAttachShoulder) == 0x000001, "Wrong alignment on ABP_PC0001_C_Set_NoCopyAttachShoulder");
static_assert(sizeof(ABP_PC0001_C_Set_NoCopyAttachShoulder) == 0x000003, "Wrong size on ABP_PC0001_C_Set_NoCopyAttachShoulder");
static_assert(offsetof(ABP_PC0001_C_Set_NoCopyAttachShoulder, CallFunc_Montage_IsPlaying_ReturnValue) == 0x000000, "Member 'ABP_PC0001_C_Set_NoCopyAttachShoulder::CallFunc_Montage_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_NoCopyAttachShoulder, CallFunc_Montage_IsPlaying_ReturnValue_1) == 0x000001, "Member 'ABP_PC0001_C_Set_NoCopyAttachShoulder::CallFunc_Montage_IsPlaying_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_NoCopyAttachShoulder, CallFunc_BooleanOR_ReturnValue) == 0x000002, "Member 'ABP_PC0001_C_Set_NoCopyAttachShoulder::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Set Not Update Enable Attach Pocket
// 0x001C (0x001C - 0x0000)
struct ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket final
{
public:
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Montage_IsPlaying_ReturnValue;            // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_3;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket) == 0x000004, "Wrong alignment on ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket");
static_assert(sizeof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket) == 0x00001C, "Wrong size on ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket");
static_assert(offsetof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket, CallFunc_GetCurveValue_ReturnValue) == 0x000000, "Member 'ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000008, "Member 'ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket, CallFunc_BooleanAND_ReturnValue) == 0x00000C, "Member 'ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x00000D, "Member 'ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket, CallFunc_GetCurveValue_ReturnValue_1) == 0x000010, "Member 'ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000014, "Member 'ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket, CallFunc_BooleanAND_ReturnValue_1) == 0x000015, "Member 'ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket, CallFunc_Montage_IsPlaying_ReturnValue) == 0x000016, "Member 'ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket::CallFunc_Montage_IsPlaying_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket, CallFunc_IsValid_ReturnValue) == 0x000017, "Member 'ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket, CallFunc_BooleanAND_ReturnValue_2) == 0x000018, "Member 'ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket, CallFunc_BooleanAND_ReturnValue_3) == 0x000019, "Member 'ABP_PC0001_C_Set_Not_Update_Enable_Attach_Pocket::CallFunc_BooleanAND_ReturnValue_3' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Set_AttachPocketAlpha
// 0x002C (0x002C - 0x0000)
struct ABP_PC0001_C_Set_AttachPocketAlpha final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue;                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCurveValue_ReturnValue_1;              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SelectFloat_ReturnValue;                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_2;              // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Percent_FloatFloat_ReturnValue;           // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCurveValue_ReturnValue_3;              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Percent_FloatFloat_ReturnValue_1;         // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_FloatFloat_ReturnValue_1;        // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Set_AttachPocketAlpha) == 0x000004, "Wrong alignment on ABP_PC0001_C_Set_AttachPocketAlpha");
static_assert(sizeof(ABP_PC0001_C_Set_AttachPocketAlpha) == 0x00002C, "Wrong size on ABP_PC0001_C_Set_AttachPocketAlpha");
static_assert(offsetof(ABP_PC0001_C_Set_AttachPocketAlpha, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'ABP_PC0001_C_Set_AttachPocketAlpha::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_AttachPocketAlpha, CallFunc_GetCurveValue_ReturnValue) == 0x000004, "Member 'ABP_PC0001_C_Set_AttachPocketAlpha::CallFunc_GetCurveValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_AttachPocketAlpha, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'ABP_PC0001_C_Set_AttachPocketAlpha::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_AttachPocketAlpha, CallFunc_GetCurveValue_ReturnValue_1) == 0x00000C, "Member 'ABP_PC0001_C_Set_AttachPocketAlpha::CallFunc_GetCurveValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_AttachPocketAlpha, CallFunc_SelectFloat_ReturnValue) == 0x000010, "Member 'ABP_PC0001_C_Set_AttachPocketAlpha::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_AttachPocketAlpha, CallFunc_GetCurveValue_ReturnValue_2) == 0x000014, "Member 'ABP_PC0001_C_Set_AttachPocketAlpha::CallFunc_GetCurveValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_AttachPocketAlpha, CallFunc_Percent_FloatFloat_ReturnValue) == 0x000018, "Member 'ABP_PC0001_C_Set_AttachPocketAlpha::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_AttachPocketAlpha, CallFunc_GetCurveValue_ReturnValue_3) == 0x00001C, "Member 'ABP_PC0001_C_Set_AttachPocketAlpha::CallFunc_GetCurveValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_AttachPocketAlpha, CallFunc_NotEqual_FloatFloat_ReturnValue) == 0x000020, "Member 'ABP_PC0001_C_Set_AttachPocketAlpha::CallFunc_NotEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_AttachPocketAlpha, CallFunc_Percent_FloatFloat_ReturnValue_1) == 0x000024, "Member 'ABP_PC0001_C_Set_AttachPocketAlpha::CallFunc_Percent_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_AttachPocketAlpha, CallFunc_NotEqual_FloatFloat_ReturnValue_1) == 0x000028, "Member 'ABP_PC0001_C_Set_AttachPocketAlpha::CallFunc_NotEqual_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Set_IsTurned
// 0x0005 (0x0005 - 0x0000)
struct ABP_PC0001_C_Set_IsTurned final
{
public:
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlaySlotAnimation_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Set_IsTurned) == 0x000001, "Wrong alignment on ABP_PC0001_C_Set_IsTurned");
static_assert(sizeof(ABP_PC0001_C_Set_IsTurned) == 0x000005, "Wrong size on ABP_PC0001_C_Set_IsTurned");
static_assert(offsetof(ABP_PC0001_C_Set_IsTurned, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000000, "Member 'ABP_PC0001_C_Set_IsTurned::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsTurned, CallFunc_IsPlaySlotAnimation_ReturnValue) == 0x000001, "Member 'ABP_PC0001_C_Set_IsTurned::CallFunc_IsPlaySlotAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsTurned, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'ABP_PC0001_C_Set_IsTurned::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsTurned, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'ABP_PC0001_C_Set_IsTurned::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Set_IsTurned, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'ABP_PC0001_C_Set_IsTurned::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Link_AttachPocket
// 0x0028 (0x0028 - 0x0000)
struct ABP_PC0001_C_Link_AttachPocket final
{
public:
	bool                                          IsLink;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetLinkedAnimLayerInstanceByClass_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimInstance*                          CallFunc_GetLinkedAnimLayerInstanceByClass_ReturnValue_1; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Link_AttachPocket) == 0x000008, "Wrong alignment on ABP_PC0001_C_Link_AttachPocket");
static_assert(sizeof(ABP_PC0001_C_Link_AttachPocket) == 0x000028, "Wrong size on ABP_PC0001_C_Link_AttachPocket");
static_assert(offsetof(ABP_PC0001_C_Link_AttachPocket, IsLink) == 0x000000, "Member 'ABP_PC0001_C_Link_AttachPocket::IsLink' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Link_AttachPocket, CallFunc_GetLinkedAnimLayerInstanceByClass_ReturnValue) == 0x000008, "Member 'ABP_PC0001_C_Link_AttachPocket::CallFunc_GetLinkedAnimLayerInstanceByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Link_AttachPocket, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ABP_PC0001_C_Link_AttachPocket::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Link_AttachPocket, CallFunc_GetLinkedAnimLayerInstanceByClass_ReturnValue_1) == 0x000018, "Member 'ABP_PC0001_C_Link_AttachPocket::CallFunc_GetLinkedAnimLayerInstanceByClass_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Link_AttachPocket, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'ABP_PC0001_C_Link_AttachPocket::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Get Is Dungeon And Event
// 0x0020 (0x0020 - 0x0000)
struct ABP_PC0001_C_Get_Is_Dungeon_And_Event final
{
public:
	bool                                          Out_IsDungeon;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          Out_IsEvent;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_ObjectToString_ReturnValue;          // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_MatchesWildcard_ReturnValue;              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_MatchesWildcard_ReturnValue_1;            // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Get_Is_Dungeon_And_Event) == 0x000008, "Wrong alignment on ABP_PC0001_C_Get_Is_Dungeon_And_Event");
static_assert(sizeof(ABP_PC0001_C_Get_Is_Dungeon_And_Event) == 0x000020, "Wrong size on ABP_PC0001_C_Get_Is_Dungeon_And_Event");
static_assert(offsetof(ABP_PC0001_C_Get_Is_Dungeon_And_Event, Out_IsDungeon) == 0x000000, "Member 'ABP_PC0001_C_Get_Is_Dungeon_And_Event::Out_IsDungeon' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Get_Is_Dungeon_And_Event, Out_IsEvent) == 0x000001, "Member 'ABP_PC0001_C_Get_Is_Dungeon_And_Event::Out_IsEvent' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Get_Is_Dungeon_And_Event, CallFunc_Conv_ObjectToString_ReturnValue) == 0x000008, "Member 'ABP_PC0001_C_Get_Is_Dungeon_And_Event::CallFunc_Conv_ObjectToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Get_Is_Dungeon_And_Event, CallFunc_MatchesWildcard_ReturnValue) == 0x000018, "Member 'ABP_PC0001_C_Get_Is_Dungeon_And_Event::CallFunc_MatchesWildcard_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Get_Is_Dungeon_And_Event, CallFunc_MatchesWildcard_ReturnValue_1) == 0x000019, "Member 'ABP_PC0001_C_Get_Is_Dungeon_And_Event::CallFunc_MatchesWildcard_ReturnValue_1' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Is_EventPlayAndHaveBag
// 0x0004 (0x0004 - 0x0000)
struct ABP_PC0001_C_Is_EventPlayAndHaveBag final
{
public:
	bool                                          Out_Result;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Is_EventPlayAndHaveBag) == 0x000001, "Wrong alignment on ABP_PC0001_C_Is_EventPlayAndHaveBag");
static_assert(sizeof(ABP_PC0001_C_Is_EventPlayAndHaveBag) == 0x000004, "Wrong size on ABP_PC0001_C_Is_EventPlayAndHaveBag");
static_assert(offsetof(ABP_PC0001_C_Is_EventPlayAndHaveBag, Out_Result) == 0x000000, "Member 'ABP_PC0001_C_Is_EventPlayAndHaveBag::Out_Result' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_EventPlayAndHaveBag, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'ABP_PC0001_C_Is_EventPlayAndHaveBag::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_EventPlayAndHaveBag, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'ABP_PC0001_C_Is_EventPlayAndHaveBag::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Is_EventPlayAndHaveBag, CallFunc_BooleanAND_ReturnValue_1) == 0x000003, "Member 'ABP_PC0001_C_Is_EventPlayAndHaveBag::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Get_ForceAttachPocket
// 0x0001 (0x0001 - 0x0000)
struct ABP_PC0001_C_Get_ForceAttachPocket final
{
public:
	bool                                          Out_ForceAttachPocket;                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Get_ForceAttachPocket) == 0x000001, "Wrong alignment on ABP_PC0001_C_Get_ForceAttachPocket");
static_assert(sizeof(ABP_PC0001_C_Get_ForceAttachPocket) == 0x000001, "Wrong size on ABP_PC0001_C_Get_ForceAttachPocket");
static_assert(offsetof(ABP_PC0001_C_Get_ForceAttachPocket, Out_ForceAttachPocket) == 0x000000, "Member 'ABP_PC0001_C_Get_ForceAttachPocket::Out_ForceAttachPocket' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Get_IsAttachedBostonBag
// 0x0001 (0x0001 - 0x0000)
struct ABP_PC0001_C_Get_IsAttachedBostonBag final
{
public:
	bool                                          Out_IsAttachedBostonBag;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Get_IsAttachedBostonBag) == 0x000001, "Wrong alignment on ABP_PC0001_C_Get_IsAttachedBostonBag");
static_assert(sizeof(ABP_PC0001_C_Get_IsAttachedBostonBag) == 0x000001, "Wrong size on ABP_PC0001_C_Get_IsAttachedBostonBag");
static_assert(offsetof(ABP_PC0001_C_Get_IsAttachedBostonBag, Out_IsAttachedBostonBag) == 0x000000, "Member 'ABP_PC0001_C_Get_IsAttachedBostonBag::Out_IsAttachedBostonBag' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Get_NotUpdateAttachPocket
// 0x0001 (0x0001 - 0x0000)
struct ABP_PC0001_C_Get_NotUpdateAttachPocket final
{
public:
	bool                                          Out_NotUpdateEnableAttachPocket;                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_PC0001_C_Get_NotUpdateAttachPocket) == 0x000001, "Wrong alignment on ABP_PC0001_C_Get_NotUpdateAttachPocket");
static_assert(sizeof(ABP_PC0001_C_Get_NotUpdateAttachPocket) == 0x000001, "Wrong size on ABP_PC0001_C_Get_NotUpdateAttachPocket");
static_assert(offsetof(ABP_PC0001_C_Get_NotUpdateAttachPocket, Out_NotUpdateEnableAttachPocket) == 0x000000, "Member 'ABP_PC0001_C_Get_NotUpdateAttachPocket::Out_NotUpdateEnableAttachPocket' has a wrong offset!");

// Function ABP_PC0001.ABP_PC0001_C.Get_AttachPocketAlpha
// 0x0008 (0x0008 - 0x0000)
struct ABP_PC0001_C_Get_AttachPocketAlpha final
{
public:
	float                                         Out_AttachPocket_L_Alpha;                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Out_AttachPocket_R_Alpha;                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_PC0001_C_Get_AttachPocketAlpha) == 0x000004, "Wrong alignment on ABP_PC0001_C_Get_AttachPocketAlpha");
static_assert(sizeof(ABP_PC0001_C_Get_AttachPocketAlpha) == 0x000008, "Wrong size on ABP_PC0001_C_Get_AttachPocketAlpha");
static_assert(offsetof(ABP_PC0001_C_Get_AttachPocketAlpha, Out_AttachPocket_L_Alpha) == 0x000000, "Member 'ABP_PC0001_C_Get_AttachPocketAlpha::Out_AttachPocket_L_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_PC0001_C_Get_AttachPocketAlpha, Out_AttachPocket_R_Alpha) == 0x000004, "Member 'ABP_PC0001_C_Get_AttachPocketAlpha::Out_AttachPocket_R_Alpha' has a wrong offset!");

}

