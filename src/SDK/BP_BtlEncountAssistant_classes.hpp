#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlEncountAssistant

#include "Basic.hpp"

#include "MovieScene_structs.hpp"
#include "Engine_structs.hpp"
#include "Xrd777_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlEncountAssistant.BP_BtlEncountAssistant_C
// 0x0088 (0x0300 - 0x0278)
class ABP_BtlEncountAssistant_C final : public AAppActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    Level_Sequence_Actor;                              // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         Level_Sequence;                                    // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVisibilityBasedAnimTickOption                Visibility_Based_Anim_Tick_Option;                 // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSequenceEnd;                                     // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnSequenceEvent1;                                  // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FMovieSceneObjectBindingID             Binding;                                           // 0x02C8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWaitForEnd;                                      // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsEndSequence;                                     // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsReadyToEndFromWaitMode;                          // 0x02E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E3[0x5];                                      // 0x02E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SavingCurrentCamera;                               // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnSequenceEvent2;                                  // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void OnSequenceEnd__DelegateSignature();
	void OnSequenceEvent1__DelegateSignature();
	void OnSequenceEvent2__DelegateSignature();
	void ExecuteUbergraph_BP_BtlEncountAssistant(int32 EntryPoint);
	void SequenceDestroy();
	void ActorDestroyed();
	void RequestSequenceEvent2();
	void Has_Finished_Enemy_Spawn();
	void PlaySE(int32 CueId);
	void StartChanceSequence(class UBtlCoreComponent* BtlCore_0);
	void StartFirstSequence(class UBtlCoreComponent* BtlCore_0);
	void RequestSequenceEvent1();
	void StartSequence(class UBtlCoreComponent* BtlCore_0);
	void RequestSummonEnemy();
	void HeroRunStop();
	void EndSequence();
	void CollectWhenBattleCamera();
	void ReflectBattleCamera();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlEncountAssistant_C">();
	}
	static class ABP_BtlEncountAssistant_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlEncountAssistant_C>();
	}
};
static_assert(alignof(ABP_BtlEncountAssistant_C) == 0x000008, "Wrong alignment on ABP_BtlEncountAssistant_C");
static_assert(sizeof(ABP_BtlEncountAssistant_C) == 0x000300, "Wrong size on ABP_BtlEncountAssistant_C");
static_assert(offsetof(ABP_BtlEncountAssistant_C, UberGraphFrame) == 0x000278, "Member 'ABP_BtlEncountAssistant_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, DefaultSceneRoot) == 0x000280, "Member 'ABP_BtlEncountAssistant_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, BtlCore) == 0x000288, "Member 'ABP_BtlEncountAssistant_C::BtlCore' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, Level_Sequence_Actor) == 0x000290, "Member 'ABP_BtlEncountAssistant_C::Level_Sequence_Actor' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, Level_Sequence) == 0x000298, "Member 'ABP_BtlEncountAssistant_C::Level_Sequence' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, Visibility_Based_Anim_Tick_Option) == 0x0002A0, "Member 'ABP_BtlEncountAssistant_C::Visibility_Based_Anim_Tick_Option' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, OnSequenceEnd) == 0x0002A8, "Member 'ABP_BtlEncountAssistant_C::OnSequenceEnd' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, OnSequenceEvent1) == 0x0002B8, "Member 'ABP_BtlEncountAssistant_C::OnSequenceEvent1' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, Binding) == 0x0002C8, "Member 'ABP_BtlEncountAssistant_C::Binding' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, IsWaitForEnd) == 0x0002E0, "Member 'ABP_BtlEncountAssistant_C::IsWaitForEnd' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, IsEndSequence) == 0x0002E1, "Member 'ABP_BtlEncountAssistant_C::IsEndSequence' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, IsReadyToEndFromWaitMode) == 0x0002E2, "Member 'ABP_BtlEncountAssistant_C::IsReadyToEndFromWaitMode' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, SavingCurrentCamera) == 0x0002E8, "Member 'ABP_BtlEncountAssistant_C::SavingCurrentCamera' has a wrong offset!");
static_assert(offsetof(ABP_BtlEncountAssistant_C, OnSequenceEvent2) == 0x0002F0, "Member 'ABP_BtlEncountAssistant_C::OnSequenceEvent2' has a wrong offset!");

}

