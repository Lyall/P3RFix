#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlTargetManager

#include "Basic.hpp"

#include "BP_BtlTargetManager_classes.hpp"
#include "BP_BtlTargetManager_parameters.hpp"


namespace SDK
{

// Function BP_BtlTargetManager.BP_BtlTargetManager_C.ExecuteUbergraph_BP_BtlTargetManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlTargetManager_C::ExecuteUbergraph_BP_BtlTargetManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "ExecuteUbergraph_BP_BtlTargetManager");

	Params::BP_BtlTargetManager_C_ExecuteUbergraph_BP_BtlTargetManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.ClearForBP
// (Event, Public, BlueprintEvent)

void UBP_BtlTargetManager_C::ClearForBP()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "ClearForBP");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.GetTargetsCharacters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_BtlCharacterBase_C*>   Characters                                             (Parm, OutParm)

void UBP_BtlTargetManager_C::GetTargetsCharacters(TArray<class ABP_BtlCharacterBase_C*>* Characters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "GetTargetsCharacters");

	Params::BP_BtlTargetManager_C_GetTargetsCharacters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Characters != nullptr)
		*Characters = std::move(Parms.Characters);
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.GetMain
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           Character                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlTargetManager_C::GetMain(class ABP_BtlCharacterBase_C** Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "GetMain");

	Params::BP_BtlTargetManager_C_GetMain Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Character != nullptr)
		*Character = Parms.Character;
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.GetEffectTargetsCharacters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_BtlCharacterBase_C*>   Characters                                             (Parm, OutParm)

void UBP_BtlTargetManager_C::GetEffectTargetsCharacters(TArray<class ABP_BtlCharacterBase_C*>* Characters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "GetEffectTargetsCharacters");

	Params::BP_BtlTargetManager_C_GetEffectTargetsCharacters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Characters != nullptr)
		*Characters = std::move(Parms.Characters);
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.GetMainCharacterCylinder
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseCommonCylinder                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ExceptPersona                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Bottom_Center                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Cylinder_Center                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlTargetManager_C::GetMainCharacterCylinder(bool UseCommonCylinder, bool ExceptPersona, struct FVector* Bottom_Center, float* Radius, float* Height, struct FVector* Cylinder_Center)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "GetMainCharacterCylinder");

	Params::BP_BtlTargetManager_C_GetMainCharacterCylinder Parms{};

	Parms.UseCommonCylinder = UseCommonCylinder;
	Parms.ExceptPersona = ExceptPersona;

	UObject::ProcessEvent(Func, &Parms);

	if (Bottom_Center != nullptr)
		*Bottom_Center = std::move(Parms.Bottom_Center);

	if (Radius != nullptr)
		*Radius = Parms.Radius;

	if (Height != nullptr)
		*Height = Parms.Height;

	if (Cylinder_Center != nullptr)
		*Cylinder_Center = std::move(Parms.Cylinder_Center);
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.GetTargetsCylinder
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseCommonCylinder                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Bottom_Center                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Cylinder_Center                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlTargetManager_C::GetTargetsCylinder(bool UseCommonCylinder, struct FVector* Bottom_Center, float* Radius, float* Height, struct FVector* Cylinder_Center)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "GetTargetsCylinder");

	Params::BP_BtlTargetManager_C_GetTargetsCylinder Parms{};

	Parms.UseCommonCylinder = UseCommonCylinder;

	UObject::ProcessEvent(Func, &Parms);

	if (Bottom_Center != nullptr)
		*Bottom_Center = std::move(Parms.Bottom_Center);

	if (Radius != nullptr)
		*Radius = Parms.Radius;

	if (Height != nullptr)
		*Height = Parms.Height;

	if (Cylinder_Center != nullptr)
		*Cylinder_Center = std::move(Parms.Cylinder_Center);
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.IsOtherCharacter
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           CheckChara                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OtherCharacter                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlTargetManager_C::IsOtherCharacter(class ABP_BtlCharacterBase_C* CheckChara, bool* OtherCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "IsOtherCharacter");

	Params::BP_BtlTargetManager_C_IsOtherCharacter Parms{};

	Parms.CheckChara = CheckChara;

	UObject::ProcessEvent(Func, &Parms);

	if (OtherCharacter != nullptr)
		*OtherCharacter = Parms.OtherCharacter;
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.GetCombineCylinder
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseCommonCylinder                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ExceptPersonaCylinder                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Bottom_Center                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Cylinder_Center                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BtlTargetManager_C::GetCombineCylinder(bool UseCommonCylinder, bool ExceptPersonaCylinder, struct FVector* Bottom_Center, float* Radius, float* Height, struct FVector* Cylinder_Center)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "GetCombineCylinder");

	Params::BP_BtlTargetManager_C_GetCombineCylinder Parms{};

	Parms.UseCommonCylinder = UseCommonCylinder;
	Parms.ExceptPersonaCylinder = ExceptPersonaCylinder;

	UObject::ProcessEvent(Func, &Parms);

	if (Bottom_Center != nullptr)
		*Bottom_Center = std::move(Parms.Bottom_Center);

	if (Radius != nullptr)
		*Radius = Parms.Radius;

	if (Height != nullptr)
		*Height = Parms.Height;

	if (Cylinder_Center != nullptr)
		*Cylinder_Center = std::move(Parms.Cylinder_Center);
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.GetMainWithPersona
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_BtlCharacterBase_C*>   Character                                              (Parm, OutParm)

void UBP_BtlTargetManager_C::GetMainWithPersona(TArray<class ABP_BtlCharacterBase_C*>* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "GetMainWithPersona");

	Params::BP_BtlTargetManager_C_GetMainWithPersona Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Character != nullptr)
		*Character = std::move(Parms.Character);
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.CheckTargetSelfOnly
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlTargetManager_C::CheckTargetSelfOnly(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "CheckTargetSelfOnly");

	Params::BP_BtlTargetManager_C_CheckTargetSelfOnly Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.CheckTargetsIncludeSelf
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlTargetManager_C::CheckTargetsIncludeSelf(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "CheckTargetsIncludeSelf");

	Params::BP_BtlTargetManager_C_CheckTargetsIncludeSelf Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.CheckTargetsIncludePlayerAndEnemy
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlTargetManager_C::CheckTargetsIncludePlayerAndEnemy(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "CheckTargetsIncludePlayerAndEnemy");

	Params::BP_BtlTargetManager_C_CheckTargetsIncludePlayerAndEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.GetMainAndTargets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABtlActor*>                OutResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ABtlActor*>                OutResult2                                             (Parm, OutParm)

void UBP_BtlTargetManager_C::GetMainAndTargets(TArray<class ABtlActor*>& OutResult, TArray<class ABtlActor*>* OutResult2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "GetMainAndTargets");

	Params::BP_BtlTargetManager_C_GetMainAndTargets Parms{};

	Parms.OutResult = std::move(OutResult);

	UObject::ProcessEvent(Func, &Parms);

	OutResult = std::move(Parms.OutResult);

	if (OutResult2 != nullptr)
		*OutResult2 = std::move(Parms.OutResult2);
}


// Function BP_BtlTargetManager.BP_BtlTargetManager_C.IsEnchantCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           CheckChara                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OtherCharacter                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_BtlTargetManager_C::IsEnchantCharacter(class ABP_BtlCharacterBase_C* CheckChara, bool* OtherCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlTargetManager_C", "IsEnchantCharacter");

	Params::BP_BtlTargetManager_C_IsEnchantCharacter Parms{};

	Parms.CheckChara = CheckChara;

	UObject::ProcessEvent(Func, &Parms);

	if (OtherCharacter != nullptr)
		*OtherCharacter = Parms.OtherCharacter;
}

}

