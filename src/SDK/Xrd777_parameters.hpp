#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Xrd777

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Xrd777_structs.hpp"
#include "Engine_structs.hpp"
#include "InputCore_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"
#include "Niagara_structs.hpp"
#include "MovieScene_structs.hpp"
#include "CriWareAdxLipSync_structs.hpp"


namespace SDK::Params
{

// Function xrd777.AppActor.AsAActor
// 0x0008 (0x0008 - 0x0000)
struct AppActor_AsAActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppActor_AsAActor) == 0x000008, "Wrong alignment on AppActor_AsAActor");
static_assert(sizeof(AppActor_AsAActor) == 0x000008, "Wrong size on AppActor_AsAActor");
static_assert(offsetof(AppActor_AsAActor, ReturnValue) == 0x000000, "Member 'AppActor_AsAActor::ReturnValue' has a wrong offset!");

// Function xrd777.AppActor.AsUObject
// 0x0008 (0x0008 - 0x0000)
struct AppActor_AsUObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppActor_AsUObject) == 0x000008, "Wrong alignment on AppActor_AsUObject");
static_assert(sizeof(AppActor_AsUObject) == 0x000008, "Wrong size on AppActor_AsUObject");
static_assert(offsetof(AppActor_AsUObject, ReturnValue) == 0x000000, "Member 'AppActor_AsUObject::ReturnValue' has a wrong offset!");

// Function xrd777.AppActor.EndPlay
// 0x0001 (0x0001 - 0x0000)
struct AppActor_EndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppActor_EndPlay) == 0x000001, "Wrong alignment on AppActor_EndPlay");
static_assert(sizeof(AppActor_EndPlay) == 0x000001, "Wrong size on AppActor_EndPlay");
static_assert(offsetof(AppActor_EndPlay, EndPlayReason) == 0x000000, "Member 'AppActor_EndPlay::EndPlayReason' has a wrong offset!");

// Function xrd777.AppActor.GetAppPauseFlags
// 0x0001 (0x0001 - 0x0000)
struct AppActor_GetAppPauseFlags final
{
public:
	EAppPauseObjectFlag                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppActor_GetAppPauseFlags) == 0x000001, "Wrong alignment on AppActor_GetAppPauseFlags");
static_assert(sizeof(AppActor_GetAppPauseFlags) == 0x000001, "Wrong size on AppActor_GetAppPauseFlags");
static_assert(offsetof(AppActor_GetAppPauseFlags, ReturnValue) == 0x000000, "Member 'AppActor_GetAppPauseFlags::ReturnValue' has a wrong offset!");

// Function xrd777.TitleLogoActor.GetAlpha
// 0x0004 (0x0004 - 0x0000)
struct TitleLogoActor_GetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TitleLogoActor_GetAlpha) == 0x000004, "Wrong alignment on TitleLogoActor_GetAlpha");
static_assert(sizeof(TitleLogoActor_GetAlpha) == 0x000004, "Wrong size on TitleLogoActor_GetAlpha");
static_assert(offsetof(TitleLogoActor_GetAlpha, ReturnValue) == 0x000000, "Member 'TitleLogoActor_GetAlpha::ReturnValue' has a wrong offset!");

// Function xrd777.TitleLogoActor.IsGameClear
// 0x0001 (0x0001 - 0x0000)
struct TitleLogoActor_IsGameClear final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TitleLogoActor_IsGameClear) == 0x000001, "Wrong alignment on TitleLogoActor_IsGameClear");
static_assert(sizeof(TitleLogoActor_IsGameClear) == 0x000001, "Wrong size on TitleLogoActor_IsGameClear");
static_assert(offsetof(TitleLogoActor_IsGameClear, ReturnValue) == 0x000000, "Member 'TitleLogoActor_IsGameClear::ReturnValue' has a wrong offset!");

// Function xrd777.BtlAI.GetPrevUseActionIDForActor
// 0x0010 (0x0010 - 0x0000)
struct BtlAI_GetPrevUseActionIDForActor final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlAI_GetPrevUseActionIDForActor) == 0x000008, "Wrong alignment on BtlAI_GetPrevUseActionIDForActor");
static_assert(sizeof(BtlAI_GetPrevUseActionIDForActor) == 0x000010, "Wrong size on BtlAI_GetPrevUseActionIDForActor");
static_assert(offsetof(BtlAI_GetPrevUseActionIDForActor, Actor) == 0x000000, "Member 'BtlAI_GetPrevUseActionIDForActor::Actor' has a wrong offset!");
static_assert(offsetof(BtlAI_GetPrevUseActionIDForActor, ReturnValue) == 0x000008, "Member 'BtlAI_GetPrevUseActionIDForActor::ReturnValue' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_GetRenderTarget
// 0x0010 (0x0010 - 0x0000)
struct UIDrawBaseActor_BPUICommand_GetRenderTarget final
{
public:
	int32                                         CanvasIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_GetRenderTarget) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUICommand_GetRenderTarget");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_GetRenderTarget) == 0x000010, "Wrong size on UIDrawBaseActor_BPUICommand_GetRenderTarget");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_GetRenderTarget, CanvasIndex) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_GetRenderTarget::CanvasIndex' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_GetRenderTarget, ReturnValue) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_GetRenderTarget::ReturnValue' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.AddLoadAsset
// 0x0028 (0x0028 - 0x0000)
struct UIDrawBaseActor_AddLoadAsset final
{
public:
	TSoftObjectPtr<class UObject>                 SoftAsset;                                         // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_AddLoadAsset) == 0x000008, "Wrong alignment on UIDrawBaseActor_AddLoadAsset");
static_assert(sizeof(UIDrawBaseActor_AddLoadAsset) == 0x000028, "Wrong size on UIDrawBaseActor_AddLoadAsset");
static_assert(offsetof(UIDrawBaseActor_AddLoadAsset, SoftAsset) == 0x000000, "Member 'UIDrawBaseActor_AddLoadAsset::SoftAsset' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_AtlUIBlendState
// 0x0001 (0x0001 - 0x0000)
struct UIDrawBaseActor_BPUICommand_AtlUIBlendState final
{
public:
	EUIBLEND_STATE_TYPE                           BlendType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_AtlUIBlendState) == 0x000001, "Wrong alignment on UIDrawBaseActor_BPUICommand_AtlUIBlendState");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_AtlUIBlendState) == 0x000001, "Wrong size on UIDrawBaseActor_BPUICommand_AtlUIBlendState");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_AtlUIBlendState, BlendType) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_AtlUIBlendState::BlendType' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_CastPlgAsset
// 0x0010 (0x0010 - 0x0000)
struct UIDrawBaseActor_BPUICommand_CastPlgAsset final
{
public:
	class UObject*                                Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlgAsset*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_CastPlgAsset) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUICommand_CastPlgAsset");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_CastPlgAsset) == 0x000010, "Wrong size on UIDrawBaseActor_BPUICommand_CastPlgAsset");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_CastPlgAsset, Asset) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_CastPlgAsset::Asset' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_CastPlgAsset, ReturnValue) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_CastPlgAsset::ReturnValue' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_CastSprAsset
// 0x0010 (0x0010 - 0x0000)
struct UIDrawBaseActor_BPUICommand_CastSprAsset final
{
public:
	class UObject*                                Asset;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USprAsset*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_CastSprAsset) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUICommand_CastSprAsset");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_CastSprAsset) == 0x000010, "Wrong size on UIDrawBaseActor_BPUICommand_CastSprAsset");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_CastSprAsset, Asset) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_CastSprAsset::Asset' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_CastSprAsset, ReturnValue) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_CastSprAsset::ReturnValue' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_DrawMaterial
// 0x0020 (0x0020 - 0x0000)
struct UIDrawBaseActor_BPUICommand_DrawMaterial final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          PMaterial;                                         // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_DrawMaterial) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUICommand_DrawMaterial");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_DrawMaterial) == 0x000020, "Wrong size on UIDrawBaseActor_BPUICommand_DrawMaterial");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawMaterial, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_DrawMaterial::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawMaterial, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_DrawMaterial::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawMaterial, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_DrawMaterial::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawMaterial, Width) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_DrawMaterial::Width' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawMaterial, Height) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_DrawMaterial::Height' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawMaterial, Angle) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_DrawMaterial::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawMaterial, PMaterial) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_DrawMaterial::PMaterial' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_DrawPlg
// 0x0028 (0x0028 - 0x0000)
struct UIDrawBaseActor_BPUICommand_DrawPlg final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x000D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x000E(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x000F(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlgID;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UPlgAsset*                        PlgHandle;                                         // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_DrawPlg) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUICommand_DrawPlg");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_DrawPlg) == 0x000028, "Wrong size on UIDrawBaseActor_BPUICommand_DrawPlg");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawPlg, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_DrawPlg::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawPlg, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_DrawPlg::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawPlg, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_DrawPlg::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawPlg, R) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_DrawPlg::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawPlg, G) == 0x00000D, "Member 'UIDrawBaseActor_BPUICommand_DrawPlg::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawPlg, B) == 0x00000E, "Member 'UIDrawBaseActor_BPUICommand_DrawPlg::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawPlg, A) == 0x00000F, "Member 'UIDrawBaseActor_BPUICommand_DrawPlg::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawPlg, PlgID) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_DrawPlg::PlgID' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawPlg, ScaleX) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_DrawPlg::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawPlg, ScaleY) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_DrawPlg::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawPlg, Angle) == 0x00001C, "Member 'UIDrawBaseActor_BPUICommand_DrawPlg::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawPlg, PlgHandle) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_DrawPlg::PlgHandle' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_DrawRect
// 0x002C (0x002C - 0x0000)
struct UIDrawBaseActor_BPUICommand_DrawRect final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0015(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0016(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0017(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Antialiasing;                                      // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_DrawRect) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUICommand_DrawRect");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_DrawRect) == 0x00002C, "Wrong size on UIDrawBaseActor_BPUICommand_DrawRect");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, Width) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::Width' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, Height) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::Height' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, R) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, G) == 0x000015, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, B) == 0x000016, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, A) == 0x000017, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, ScaleX) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, ScaleY) == 0x00001C, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, Angle) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, Antialiasing) == 0x000024, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::Antialiasing' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRect, DrawPoint) == 0x000028, "Member 'UIDrawBaseActor_BPUICommand_DrawRect::DrawPoint' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_DrawRectV4
// 0x0044 (0x0044 - 0x0000)
struct UIDrawBaseActor_BPUICommand_DrawRectV4 final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX0;                                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY0;                                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX1;                                               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY1;                                               // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX2;                                               // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY2;                                               // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX3;                                               // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY3;                                               // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x002D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x002E(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x002F(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Antialiasing;                                      // 0x003C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_DrawRectV4) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUICommand_DrawRectV4");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_DrawRectV4) == 0x000044, "Wrong size on UIDrawBaseActor_BPUICommand_DrawRectV4");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, VX0) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::VX0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, VY0) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::VY0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, VX1) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::VX1' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, VY1) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::VY1' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, VX2) == 0x00001C, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::VX2' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, VY2) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::VY2' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, VX3) == 0x000024, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::VX3' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, VY3) == 0x000028, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::VY3' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, R) == 0x00002C, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, G) == 0x00002D, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, B) == 0x00002E, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, A) == 0x00002F, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, ScaleX) == 0x000030, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, ScaleY) == 0x000034, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, Angle) == 0x000038, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, Antialiasing) == 0x00003C, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::Antialiasing' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRectV4, DrawPoint) == 0x000040, "Member 'UIDrawBaseActor_BPUICommand_DrawRectV4::DrawPoint' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_DrawRoundRect
// 0x0030 (0x0030 - 0x0000)
struct UIDrawBaseActor_BPUICommand_DrawRoundRect final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Round;                                             // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x001A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x001B(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Antialiasing;                                      // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_DrawRoundRect) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUICommand_DrawRoundRect");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_DrawRoundRect) == 0x000030, "Wrong size on UIDrawBaseActor_BPUICommand_DrawRoundRect");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, Width) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::Width' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, Height) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::Height' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, Round) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::Round' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, R) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, G) == 0x000019, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, B) == 0x00001A, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, A) == 0x00001B, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, ScaleX) == 0x00001C, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, ScaleY) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, Angle) == 0x000024, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, Antialiasing) == 0x000028, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::Antialiasing' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawRoundRect, DrawPoint) == 0x00002C, "Member 'UIDrawBaseActor_BPUICommand_DrawRoundRect::DrawPoint' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_DrawScrollbar
// 0x003C (0x003C - 0x0000)
struct UIDrawBaseActor_BPUICommand_DrawScrollbar final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollRange;                                       // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScrollPos;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawListNum;                                       // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListNum;                                        // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0025(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0026(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0027(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Antialiasing;                                      // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_DrawScrollbar) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUICommand_DrawScrollbar");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_DrawScrollbar) == 0x00003C, "Wrong size on UIDrawBaseActor_BPUICommand_DrawScrollbar");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, Width) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::Width' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, Height) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::Height' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, ScrollRange) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::ScrollRange' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, ScrollPos) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::ScrollPos' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, DrawListNum) == 0x00001C, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::DrawListNum' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, MaxListNum) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::MaxListNum' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, R) == 0x000024, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, G) == 0x000025, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, B) == 0x000026, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, A) == 0x000027, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, ScaleX) == 0x000028, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, ScaleY) == 0x00002C, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, Angle) == 0x000030, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, Antialiasing) == 0x000034, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::Antialiasing' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawScrollbar, DrawPoint) == 0x000038, "Member 'UIDrawBaseActor_BPUICommand_DrawScrollbar::DrawPoint' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_DrawSircle
// 0x0018 (0x0018 - 0x0000)
struct UIDrawBaseActor_BPUICommand_DrawSircle final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0012(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0013(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Antialiasing;                                      // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_DrawSircle) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUICommand_DrawSircle");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_DrawSircle) == 0x000018, "Wrong size on UIDrawBaseActor_BPUICommand_DrawSircle");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSircle, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_DrawSircle::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSircle, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_DrawSircle::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSircle, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_DrawSircle::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSircle, Radius) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_DrawSircle::Radius' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSircle, R) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_DrawSircle::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSircle, G) == 0x000011, "Member 'UIDrawBaseActor_BPUICommand_DrawSircle::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSircle, B) == 0x000012, "Member 'UIDrawBaseActor_BPUICommand_DrawSircle::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSircle, A) == 0x000013, "Member 'UIDrawBaseActor_BPUICommand_DrawSircle::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSircle, Antialiasing) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_DrawSircle::Antialiasing' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_DrawSpr
// 0x0030 (0x0030 - 0x0000)
struct UIDrawBaseActor_BPUICommand_DrawSpr final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x000D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x000E(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x000F(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprNo;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USprAsset*                        SprHandle;                                         // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_DrawSpr) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUICommand_DrawSpr");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_DrawSpr) == 0x000030, "Wrong size on UIDrawBaseActor_BPUICommand_DrawSpr");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, R) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, G) == 0x00000D, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, B) == 0x00000E, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, A) == 0x00000F, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, SprNo) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::SprNo' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, ScaleX) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, ScaleY) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, Angle) == 0x00001C, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, SprHandle) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::SprHandle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawSpr, DrawPoint) == 0x000028, "Member 'UIDrawBaseActor_BPUICommand_DrawSpr::DrawPoint' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_DrawTexture
// 0x0040 (0x0040 - 0x0000)
struct UIDrawBaseActor_BPUICommand_DrawTexture final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x000D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x000E(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x000F(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         U0;                                                // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         V0;                                                // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         U1;                                                // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         V1;                                                // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         TextureHandle;                                     // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_DrawTexture) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUICommand_DrawTexture");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_DrawTexture) == 0x000040, "Wrong size on UIDrawBaseActor_BPUICommand_DrawTexture");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, R) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, G) == 0x00000D, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, B) == 0x00000E, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, A) == 0x00000F, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, ScaleX) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, ScaleY) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, Angle) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, U0) == 0x00001C, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::U0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, V0) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::V0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, U1) == 0x000024, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::U1' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, V1) == 0x000028, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::V1' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, TextureHandle) == 0x000030, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::TextureHandle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTexture, DrawPoint) == 0x000038, "Member 'UIDrawBaseActor_BPUICommand_DrawTexture::DrawPoint' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_DrawTriangle
// 0x0038 (0x0038 - 0x0000)
struct UIDrawBaseActor_BPUICommand_DrawTriangle final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX0;                                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY0;                                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX1;                                               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY1;                                               // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX2;                                               // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY2;                                               // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0025(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0026(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0027(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Antialiasing;                                      // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_DrawTriangle) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUICommand_DrawTriangle");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_DrawTriangle) == 0x000038, "Wrong size on UIDrawBaseActor_BPUICommand_DrawTriangle");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, VX0) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::VX0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, VY0) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::VY0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, VX1) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::VX1' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, VY1) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::VY1' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, VX2) == 0x00001C, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::VX2' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, VY2) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::VY2' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, R) == 0x000024, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, G) == 0x000025, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, B) == 0x000026, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, A) == 0x000027, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, ScaleX) == 0x000028, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, ScaleY) == 0x00002C, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, Angle) == 0x000030, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawTriangle, Antialiasing) == 0x000034, "Member 'UIDrawBaseActor_BPUICommand_DrawTriangle::Antialiasing' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_DrawVerticalGradationRect
// 0x0018 (0x0018 - 0x0000)
struct UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 TopColor;                                          // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BottomColor;                                       // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect) == 0x000018, "Wrong size on UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect, Width) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect::Width' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect, Height) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect::Height' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect, TopColor) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect::TopColor' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect, BottomColor) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_DrawVerticalGradationRect::BottomColor' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_FontDraw
// 0x0030 (0x0030 - 0x0000)
struct UIDrawBaseActor_BPUICommand_FontDraw final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0022(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0023(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIFontStyle                                  Style;                                             // 0x002D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_FontDraw) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUICommand_FontDraw");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_FontDraw) == 0x000030, "Wrong size on UIDrawBaseActor_BPUICommand_FontDraw");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDraw, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_FontDraw::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDraw, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_FontDraw::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDraw, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_FontDraw::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDraw, String) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_FontDraw::String' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDraw, R) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_FontDraw::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDraw, G) == 0x000021, "Member 'UIDrawBaseActor_BPUICommand_FontDraw::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDraw, B) == 0x000022, "Member 'UIDrawBaseActor_BPUICommand_FontDraw::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDraw, A) == 0x000023, "Member 'UIDrawBaseActor_BPUICommand_FontDraw::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDraw, Scale) == 0x000024, "Member 'UIDrawBaseActor_BPUICommand_FontDraw::Scale' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDraw, Angle) == 0x000028, "Member 'UIDrawBaseActor_BPUICommand_FontDraw::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDraw, DrawPoint) == 0x00002C, "Member 'UIDrawBaseActor_BPUICommand_FontDraw::DrawPoint' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDraw, Style) == 0x00002D, "Member 'UIDrawBaseActor_BPUICommand_FontDraw::Style' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_FontDrawEx
// 0x0038 (0x0038 - 0x0000)
struct UIDrawBaseActor_BPUICommand_FontDrawEx final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0022(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0023(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnglePointX;                                       // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnglePointY;                                       // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIFontStyle                                  Style;                                             // 0x0034(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_FontDrawEx) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUICommand_FontDrawEx");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_FontDrawEx) == 0x000038, "Wrong size on UIDrawBaseActor_BPUICommand_FontDrawEx");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, String) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::String' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, R) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, G) == 0x000021, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, B) == 0x000022, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, A) == 0x000023, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, Scale) == 0x000024, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::Scale' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, Angle) == 0x000028, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, AnglePointX) == 0x00002C, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::AnglePointX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, AnglePointY) == 0x000030, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::AnglePointY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawEx, Style) == 0x000034, "Member 'UIDrawBaseActor_BPUICommand_FontDrawEx::Style' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_FontDrawExFromFName
// 0x002C (0x002C - 0x0000)
struct UIDrawBaseActor_BPUICommand_FontDrawExFromFName final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   String;                                            // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0015(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0016(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0017(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnglePointX;                                       // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnglePointY;                                       // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIFontStyle                                  Style;                                             // 0x0028(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUICommand_FontDrawExFromFName");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName) == 0x00002C, "Wrong size on UIDrawBaseActor_BPUICommand_FontDrawExFromFName");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, String) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::String' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, R) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, G) == 0x000015, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, B) == 0x000016, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, A) == 0x000017, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, Scale) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::Scale' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, Angle) == 0x00001C, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, AnglePointX) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::AnglePointX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, AnglePointY) == 0x000024, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::AnglePointY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawExFromFName, Style) == 0x000028, "Member 'UIDrawBaseActor_BPUICommand_FontDrawExFromFName::Style' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_FontDrawFromFName
// 0x0024 (0x0024 - 0x0000)
struct UIDrawBaseActor_BPUICommand_FontDrawFromFName final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   String;                                            // 0x000C(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0015(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0016(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0017(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIFontStyle                                  Style;                                             // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_FontDrawFromFName) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUICommand_FontDrawFromFName");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_FontDrawFromFName) == 0x000024, "Wrong size on UIDrawBaseActor_BPUICommand_FontDrawFromFName");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawFromFName, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_FontDrawFromFName::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawFromFName, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_FontDrawFromFName::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawFromFName, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_FontDrawFromFName::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawFromFName, String) == 0x00000C, "Member 'UIDrawBaseActor_BPUICommand_FontDrawFromFName::String' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawFromFName, R) == 0x000014, "Member 'UIDrawBaseActor_BPUICommand_FontDrawFromFName::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawFromFName, G) == 0x000015, "Member 'UIDrawBaseActor_BPUICommand_FontDrawFromFName::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawFromFName, B) == 0x000016, "Member 'UIDrawBaseActor_BPUICommand_FontDrawFromFName::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawFromFName, A) == 0x000017, "Member 'UIDrawBaseActor_BPUICommand_FontDrawFromFName::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawFromFName, Scale) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_FontDrawFromFName::Scale' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawFromFName, Angle) == 0x00001C, "Member 'UIDrawBaseActor_BPUICommand_FontDrawFromFName::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawFromFName, DrawPoint) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_FontDrawFromFName::DrawPoint' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_FontDrawFromFName, Style) == 0x000021, "Member 'UIDrawBaseActor_BPUICommand_FontDrawFromFName::Style' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_ItalicFontDraw
// 0x0028 (0x0028 - 0x0000)
struct UIDrawBaseActor_BPUICommand_ItalicFontDraw final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIFontStyle                                  Style;                                             // 0x0025(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_ItalicFontDraw) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUICommand_ItalicFontDraw");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_ItalicFontDraw) == 0x000028, "Wrong size on UIDrawBaseActor_BPUICommand_ItalicFontDraw");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ItalicFontDraw, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_ItalicFontDraw::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ItalicFontDraw, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_ItalicFontDraw::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ItalicFontDraw, String) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_ItalicFontDraw::String' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ItalicFontDraw, Color) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_ItalicFontDraw::Color' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ItalicFontDraw, Scale) == 0x00001C, "Member 'UIDrawBaseActor_BPUICommand_ItalicFontDraw::Scale' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ItalicFontDraw, Angle) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_ItalicFontDraw::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ItalicFontDraw, DrawPoint) == 0x000024, "Member 'UIDrawBaseActor_BPUICommand_ItalicFontDraw::DrawPoint' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ItalicFontDraw, Style) == 0x000025, "Member 'UIDrawBaseActor_BPUICommand_ItalicFontDraw::Style' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_ScalingFontDraw
// 0x0038 (0x0038 - 0x0000)
struct UIDrawBaseActor_BPUICommand_ScalingFontDraw final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0022(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0023(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeX;                                             // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeY;                                             // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x002C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScalingOnlyX;                                      // 0x0034(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0035(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIFontStyle                                  Style;                                             // 0x0036(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsScaling;                                         // 0x0037(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_ScalingFontDraw) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUICommand_ScalingFontDraw");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_ScalingFontDraw) == 0x000038, "Wrong size on UIDrawBaseActor_BPUICommand_ScalingFontDraw");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, String) == 0x000010, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::String' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, R) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, G) == 0x000021, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, B) == 0x000022, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, A) == 0x000023, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, SizeX) == 0x000024, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::SizeX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, SizeY) == 0x000028, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::SizeY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, Scale) == 0x00002C, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::Scale' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, Angle) == 0x000030, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, ScalingOnlyX) == 0x000034, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::ScalingOnlyX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, DrawPoint) == 0x000035, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::DrawPoint' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, Style) == 0x000036, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::Style' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingFontDraw, IsScaling) == 0x000037, "Member 'UIDrawBaseActor_BPUICommand_ScalingFontDraw::IsScaling' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_ScalingItalicFontDraw
// 0x0030 (0x0030 - 0x0000)
struct UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeX;                                             // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeY;                                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScalingOnlyX;                                      // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x002D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIFontStyle                                  Style;                                             // 0x002E(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw) == 0x000030, "Wrong size on UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw, X) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw, String) == 0x000008, "Member 'UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw::String' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw, Color) == 0x000018, "Member 'UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw::Color' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw, SizeX) == 0x00001C, "Member 'UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw::SizeX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw, SizeY) == 0x000020, "Member 'UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw::SizeY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw, Scale) == 0x000024, "Member 'UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw::Scale' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw, Angle) == 0x000028, "Member 'UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw, ScalingOnlyX) == 0x00002C, "Member 'UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw::ScalingOnlyX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw, DrawPoint) == 0x00002D, "Member 'UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw::DrawPoint' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw, Style) == 0x00002E, "Member 'UIDrawBaseActor_BPUICommand_ScalingItalicFontDraw::Style' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_SetBlendState
// 0x0006 (0x0006 - 0x0000)
struct UIDrawBaseActor_BPUICommand_SetBlendState final
{
public:
	EUIBlendOperation                             OpColor;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIBlendFactor                                SrcColor;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIBlendFactor                                DstColor;                                          // 0x0002(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIBlendOperation                             OpAlpha;                                           // 0x0003(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIBlendFactor                                SrcAlpha;                                          // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIBlendFactor                                DstAlpha;                                          // 0x0005(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_SetBlendState) == 0x000001, "Wrong alignment on UIDrawBaseActor_BPUICommand_SetBlendState");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_SetBlendState) == 0x000006, "Wrong size on UIDrawBaseActor_BPUICommand_SetBlendState");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_SetBlendState, OpColor) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_SetBlendState::OpColor' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_SetBlendState, SrcColor) == 0x000001, "Member 'UIDrawBaseActor_BPUICommand_SetBlendState::SrcColor' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_SetBlendState, DstColor) == 0x000002, "Member 'UIDrawBaseActor_BPUICommand_SetBlendState::DstColor' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_SetBlendState, OpAlpha) == 0x000003, "Member 'UIDrawBaseActor_BPUICommand_SetBlendState::OpAlpha' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_SetBlendState, SrcAlpha) == 0x000004, "Member 'UIDrawBaseActor_BPUICommand_SetBlendState::SrcAlpha' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_SetBlendState, DstAlpha) == 0x000005, "Member 'UIDrawBaseActor_BPUICommand_SetBlendState::DstAlpha' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_SetPresetBlendState
// 0x0001 (0x0001 - 0x0000)
struct UIDrawBaseActor_BPUICommand_SetPresetBlendState final
{
public:
	EUIOTPRESET_BLEND_TYPE                        BlendType;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_SetPresetBlendState) == 0x000001, "Wrong alignment on UIDrawBaseActor_BPUICommand_SetPresetBlendState");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_SetPresetBlendState) == 0x000001, "Wrong size on UIDrawBaseActor_BPUICommand_SetPresetBlendState");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_SetPresetBlendState, BlendType) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_SetPresetBlendState::BlendType' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUICommand_SetRenderTarget
// 0x0004 (0x0004 - 0x0000)
struct UIDrawBaseActor_BPUICommand_SetRenderTarget final
{
public:
	int32                                         CanvasIndex;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUICommand_SetRenderTarget) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUICommand_SetRenderTarget");
static_assert(sizeof(UIDrawBaseActor_BPUICommand_SetRenderTarget) == 0x000004, "Wrong size on UIDrawBaseActor_BPUICommand_SetRenderTarget");
static_assert(offsetof(UIDrawBaseActor_BPUICommand_SetRenderTarget, CanvasIndex) == 0x000000, "Member 'UIDrawBaseActor_BPUICommand_SetRenderTarget::CanvasIndex' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUIDebugCommand_DrawMaterial
// 0x0020 (0x0020 - 0x0000)
struct UIDrawBaseActor_BPUIDebugCommand_DrawMaterial final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMaterialInstance*                PMaterialInstance;                                 // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUIDebugCommand_DrawMaterial) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUIDebugCommand_DrawMaterial");
static_assert(sizeof(UIDrawBaseActor_BPUIDebugCommand_DrawMaterial) == 0x000020, "Wrong size on UIDrawBaseActor_BPUIDebugCommand_DrawMaterial");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawMaterial, X) == 0x000000, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawMaterial::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawMaterial, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawMaterial::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawMaterial, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawMaterial::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawMaterial, Width) == 0x00000C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawMaterial::Width' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawMaterial, Height) == 0x000010, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawMaterial::Height' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawMaterial, Angle) == 0x000014, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawMaterial::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawMaterial, PMaterialInstance) == 0x000018, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawMaterial::PMaterialInstance' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUIDebugCommand_DrawRect
// 0x0028 (0x0028 - 0x0000)
struct UIDrawBaseActor_BPUIDebugCommand_DrawRect final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0015(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0016(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0017(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Antialiasing;                                      // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUIDebugCommand_DrawRect) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUIDebugCommand_DrawRect");
static_assert(sizeof(UIDrawBaseActor_BPUIDebugCommand_DrawRect) == 0x000028, "Wrong size on UIDrawBaseActor_BPUIDebugCommand_DrawRect");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, X) == 0x000000, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, Width) == 0x00000C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::Width' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, Height) == 0x000010, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::Height' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, R) == 0x000014, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, G) == 0x000015, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, B) == 0x000016, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, A) == 0x000017, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, ScaleX) == 0x000018, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, ScaleY) == 0x00001C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, Angle) == 0x000020, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRect, Antialiasing) == 0x000024, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRect::Antialiasing' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUIDebugCommand_DrawRectV4
// 0x0040 (0x0040 - 0x0000)
struct UIDrawBaseActor_BPUIDebugCommand_DrawRectV4 final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX0;                                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY0;                                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX1;                                               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY1;                                               // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX2;                                               // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY2;                                               // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX3;                                               // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY3;                                               // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x002D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x002E(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x002F(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0034(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Antialiasing;                                      // 0x003C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUIDebugCommand_DrawRectV4");
static_assert(sizeof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4) == 0x000040, "Wrong size on UIDrawBaseActor_BPUIDebugCommand_DrawRectV4");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, X) == 0x000000, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, VX0) == 0x00000C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::VX0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, VY0) == 0x000010, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::VY0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, VX1) == 0x000014, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::VX1' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, VY1) == 0x000018, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::VY1' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, VX2) == 0x00001C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::VX2' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, VY2) == 0x000020, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::VY2' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, VX3) == 0x000024, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::VX3' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, VY3) == 0x000028, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::VY3' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, R) == 0x00002C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, G) == 0x00002D, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, B) == 0x00002E, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, A) == 0x00002F, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, ScaleX) == 0x000030, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, ScaleY) == 0x000034, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, Angle) == 0x000038, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawRectV4, Antialiasing) == 0x00003C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawRectV4::Antialiasing' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUIDebugCommand_DrawSpr
// 0x0028 (0x0028 - 0x0000)
struct UIDrawBaseActor_BPUIDebugCommand_DrawSpr final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x000D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x000E(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x000F(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprNo;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USprAsset*                        SprHandle;                                         // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUIDebugCommand_DrawSpr");
static_assert(sizeof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr) == 0x000028, "Wrong size on UIDrawBaseActor_BPUIDebugCommand_DrawSpr");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr, X) == 0x000000, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawSpr::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawSpr::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawSpr::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr, R) == 0x00000C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawSpr::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr, G) == 0x00000D, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawSpr::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr, B) == 0x00000E, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawSpr::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr, A) == 0x00000F, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawSpr::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr, SprNo) == 0x000010, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawSpr::SprNo' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr, ScaleX) == 0x000014, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawSpr::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr, ScaleY) == 0x000018, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawSpr::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr, Angle) == 0x00001C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawSpr::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawSpr, SprHandle) == 0x000020, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawSpr::SprHandle' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUIDebugCommand_DrawTexture
// 0x0038 (0x0038 - 0x0000)
struct UIDrawBaseActor_BPUIDebugCommand_DrawTexture final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x000D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x000E(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x000F(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         U0;                                                // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         V0;                                                // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         U1;                                                // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         V1;                                                // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         TextureHandle;                                     // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture) == 0x000008, "Wrong alignment on UIDrawBaseActor_BPUIDebugCommand_DrawTexture");
static_assert(sizeof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture) == 0x000038, "Wrong size on UIDrawBaseActor_BPUIDebugCommand_DrawTexture");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, X) == 0x000000, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::X' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, Y) == 0x000004, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::Y' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, Z) == 0x000008, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::Z' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, R) == 0x00000C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, G) == 0x00000D, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, B) == 0x00000E, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, A) == 0x00000F, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, ScaleX) == 0x000010, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, ScaleY) == 0x000014, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, Angle) == 0x000018, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, U0) == 0x00001C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::U0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, V0) == 0x000020, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::V0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, U1) == 0x000024, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::U1' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, V1) == 0x000028, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::V1' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTexture, TextureHandle) == 0x000030, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTexture::TextureHandle' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.BPUIDebugCommand_DrawTriangle
// 0x002C (0x002C - 0x0000)
struct UIDrawBaseActor_BPUIDebugCommand_DrawTriangle final
{
public:
	float                                         VX0;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY0;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX1;                                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY1;                                               // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VX2;                                               // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VY2;                                               // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0019(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x001A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x001B(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Antialiasing;                                      // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle) == 0x000004, "Wrong alignment on UIDrawBaseActor_BPUIDebugCommand_DrawTriangle");
static_assert(sizeof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle) == 0x00002C, "Wrong size on UIDrawBaseActor_BPUIDebugCommand_DrawTriangle");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, VX0) == 0x000000, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::VX0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, VY0) == 0x000004, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::VY0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, VX1) == 0x000008, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::VX1' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, VY1) == 0x00000C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::VY1' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, VX2) == 0x000010, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::VX2' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, VY2) == 0x000014, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::VY2' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, R) == 0x000018, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::R' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, G) == 0x000019, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::G' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, B) == 0x00001A, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::B' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, A) == 0x00001B, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::A' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, ScaleX) == 0x00001C, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::ScaleX' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, ScaleY) == 0x000020, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::ScaleY' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, Angle) == 0x000024, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::Angle' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_BPUIDebugCommand_DrawTriangle, Antialiasing) == 0x000028, "Member 'UIDrawBaseActor_BPUIDebugCommand_DrawTriangle::Antialiasing' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.GetResourceData
// 0x0010 (0x0010 - 0x0000)
struct UIDrawBaseActor_GetResourceData final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_GetResourceData) == 0x000008, "Wrong alignment on UIDrawBaseActor_GetResourceData");
static_assert(sizeof(UIDrawBaseActor_GetResourceData) == 0x000010, "Wrong size on UIDrawBaseActor_GetResourceData");
static_assert(offsetof(UIDrawBaseActor_GetResourceData, Index_0) == 0x000000, "Member 'UIDrawBaseActor_GetResourceData::Index_0' has a wrong offset!");
static_assert(offsetof(UIDrawBaseActor_GetResourceData, ReturnValue) == 0x000008, "Member 'UIDrawBaseActor_GetResourceData::ReturnValue' has a wrong offset!");

// Function xrd777.UIDrawBaseActor.Sync
// 0x0001 (0x0001 - 0x0000)
struct UIDrawBaseActor_Sync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawBaseActor_Sync) == 0x000001, "Wrong alignment on UIDrawBaseActor_Sync");
static_assert(sizeof(UIDrawBaseActor_Sync) == 0x000001, "Wrong size on UIDrawBaseActor_Sync");
static_assert(offsetof(UIDrawBaseActor_Sync, ReturnValue) == 0x000000, "Member 'UIDrawBaseActor_Sync::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.BGMAlphaCalculation
// 0x0024 (0x0024 - 0x0000)
struct UIConfigurationDraw_BGMAlphaCalculation final
{
public:
	float                                         InTimer;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSrcValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDstValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InWaitFrame;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNextWaitFrame;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMoveFrame;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InNextMoveFrame;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppCalculationType                           InAnimType;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_BGMAlphaCalculation) == 0x000004, "Wrong alignment on UIConfigurationDraw_BGMAlphaCalculation");
static_assert(sizeof(UIConfigurationDraw_BGMAlphaCalculation) == 0x000024, "Wrong size on UIConfigurationDraw_BGMAlphaCalculation");
static_assert(offsetof(UIConfigurationDraw_BGMAlphaCalculation, InTimer) == 0x000000, "Member 'UIConfigurationDraw_BGMAlphaCalculation::InTimer' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMAlphaCalculation, InSrcValue) == 0x000004, "Member 'UIConfigurationDraw_BGMAlphaCalculation::InSrcValue' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMAlphaCalculation, InDstValue) == 0x000008, "Member 'UIConfigurationDraw_BGMAlphaCalculation::InDstValue' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMAlphaCalculation, InWaitFrame) == 0x00000C, "Member 'UIConfigurationDraw_BGMAlphaCalculation::InWaitFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMAlphaCalculation, InNextWaitFrame) == 0x000010, "Member 'UIConfigurationDraw_BGMAlphaCalculation::InNextWaitFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMAlphaCalculation, InMoveFrame) == 0x000014, "Member 'UIConfigurationDraw_BGMAlphaCalculation::InMoveFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMAlphaCalculation, InNextMoveFrame) == 0x000018, "Member 'UIConfigurationDraw_BGMAlphaCalculation::InNextMoveFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMAlphaCalculation, InAnimType) == 0x00001C, "Member 'UIConfigurationDraw_BGMAlphaCalculation::InAnimType' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMAlphaCalculation, ReturnValue) == 0x000020, "Member 'UIConfigurationDraw_BGMAlphaCalculation::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.BGMMoveCalculation
// 0x0028 (0x0028 - 0x0000)
struct UIConfigurationDraw_BGMMoveCalculation final
{
public:
	float                                         InTimer;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InSrcValue;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InDstValue;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InWaitFrame;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMoveFrame;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppCalculationType                           InAnimType;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_BGMMoveCalculation) == 0x000004, "Wrong alignment on UIConfigurationDraw_BGMMoveCalculation");
static_assert(sizeof(UIConfigurationDraw_BGMMoveCalculation) == 0x000028, "Wrong size on UIConfigurationDraw_BGMMoveCalculation");
static_assert(offsetof(UIConfigurationDraw_BGMMoveCalculation, InTimer) == 0x000000, "Member 'UIConfigurationDraw_BGMMoveCalculation::InTimer' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMMoveCalculation, InSrcValue) == 0x000004, "Member 'UIConfigurationDraw_BGMMoveCalculation::InSrcValue' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMMoveCalculation, InDstValue) == 0x00000C, "Member 'UIConfigurationDraw_BGMMoveCalculation::InDstValue' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMMoveCalculation, InWaitFrame) == 0x000014, "Member 'UIConfigurationDraw_BGMMoveCalculation::InWaitFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMMoveCalculation, InMoveFrame) == 0x000018, "Member 'UIConfigurationDraw_BGMMoveCalculation::InMoveFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMMoveCalculation, InAnimType) == 0x00001C, "Member 'UIConfigurationDraw_BGMMoveCalculation::InAnimType' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMMoveCalculation, ReturnValue) == 0x000020, "Member 'UIConfigurationDraw_BGMMoveCalculation::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.BGMScaleCalculation
// 0x001C (0x001C - 0x0000)
struct UIConfigurationDraw_BGMScaleCalculation final
{
public:
	float                                         InTimer;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSrcValue;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InDstValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InWaitFrame;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMoveFrame;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppCalculationType                           InAnimType;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_BGMScaleCalculation) == 0x000004, "Wrong alignment on UIConfigurationDraw_BGMScaleCalculation");
static_assert(sizeof(UIConfigurationDraw_BGMScaleCalculation) == 0x00001C, "Wrong size on UIConfigurationDraw_BGMScaleCalculation");
static_assert(offsetof(UIConfigurationDraw_BGMScaleCalculation, InTimer) == 0x000000, "Member 'UIConfigurationDraw_BGMScaleCalculation::InTimer' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMScaleCalculation, InSrcValue) == 0x000004, "Member 'UIConfigurationDraw_BGMScaleCalculation::InSrcValue' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMScaleCalculation, InDstValue) == 0x000008, "Member 'UIConfigurationDraw_BGMScaleCalculation::InDstValue' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMScaleCalculation, InWaitFrame) == 0x00000C, "Member 'UIConfigurationDraw_BGMScaleCalculation::InWaitFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMScaleCalculation, InMoveFrame) == 0x000010, "Member 'UIConfigurationDraw_BGMScaleCalculation::InMoveFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMScaleCalculation, InAnimType) == 0x000014, "Member 'UIConfigurationDraw_BGMScaleCalculation::InAnimType' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BGMScaleCalculation, ReturnValue) == 0x000018, "Member 'UIConfigurationDraw_BGMScaleCalculation::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.BPUICommand_DrawSpr_Ex
// 0x0030 (0x0030 - 0x0000)
struct UIConfigurationDraw_BPUICommand_DrawSpr_Ex final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x000C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x000D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x000E(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x000F(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprNo;                                             // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleX;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScaleY;                                            // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PipodX;                                            // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PipodY;                                            // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USprAsset*                        SprHandle;                                         // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex) == 0x000008, "Wrong alignment on UIConfigurationDraw_BPUICommand_DrawSpr_Ex");
static_assert(sizeof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex) == 0x000030, "Wrong size on UIConfigurationDraw_BPUICommand_DrawSpr_Ex");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, X) == 0x000000, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::X' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, Y) == 0x000004, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::Y' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, Z) == 0x000008, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::Z' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, R) == 0x00000C, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::R' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, G) == 0x00000D, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::G' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, B) == 0x00000E, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::B' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, A) == 0x00000F, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::A' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, SprNo) == 0x000010, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::SprNo' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, ScaleX) == 0x000014, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::ScaleX' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, ScaleY) == 0x000018, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::ScaleY' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, PipodX) == 0x00001C, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::PipodX' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, PipodY) == 0x000020, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::PipodY' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, Angle) == 0x000024, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::Angle' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_BPUICommand_DrawSpr_Ex, SprHandle) == 0x000028, "Member 'UIConfigurationDraw_BPUICommand_DrawSpr_Ex::SprHandle' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.ConvFrameToTime
// 0x0008 (0x0008 - 0x0000)
struct UIConfigurationDraw_ConvFrameToTime final
{
public:
	int32                                         InFrame;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_ConvFrameToTime) == 0x000004, "Wrong alignment on UIConfigurationDraw_ConvFrameToTime");
static_assert(sizeof(UIConfigurationDraw_ConvFrameToTime) == 0x000008, "Wrong size on UIConfigurationDraw_ConvFrameToTime");
static_assert(offsetof(UIConfigurationDraw_ConvFrameToTime, InFrame) == 0x000000, "Member 'UIConfigurationDraw_ConvFrameToTime::InFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_ConvFrameToTime, ReturnValue) == 0x000004, "Member 'UIConfigurationDraw_ConvFrameToTime::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.DrawAudioDeviceChange
// 0x0090 (0x0090 - 0x0000)
struct UIConfigurationDraw_DrawAudioDeviceChange final
{
public:
	float                                         baseX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         baseY;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextX;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextY;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextColorR;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextColorG;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextColorB;                                        // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextColorA;                                        // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeX;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeY;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDrawConfigParam                       DrawConfigParam;                                   // 0x0020(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class USprAsset*                        SprHandle;                                         // 0x0088(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_DrawAudioDeviceChange) == 0x000008, "Wrong alignment on UIConfigurationDraw_DrawAudioDeviceChange");
static_assert(sizeof(UIConfigurationDraw_DrawAudioDeviceChange) == 0x000090, "Wrong size on UIConfigurationDraw_DrawAudioDeviceChange");
static_assert(offsetof(UIConfigurationDraw_DrawAudioDeviceChange, baseX) == 0x000000, "Member 'UIConfigurationDraw_DrawAudioDeviceChange::baseX' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawAudioDeviceChange, baseY) == 0x000004, "Member 'UIConfigurationDraw_DrawAudioDeviceChange::baseY' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawAudioDeviceChange, TextX) == 0x000008, "Member 'UIConfigurationDraw_DrawAudioDeviceChange::TextX' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawAudioDeviceChange, TextY) == 0x00000C, "Member 'UIConfigurationDraw_DrawAudioDeviceChange::TextY' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawAudioDeviceChange, TextColorR) == 0x000010, "Member 'UIConfigurationDraw_DrawAudioDeviceChange::TextColorR' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawAudioDeviceChange, TextColorG) == 0x000011, "Member 'UIConfigurationDraw_DrawAudioDeviceChange::TextColorG' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawAudioDeviceChange, TextColorB) == 0x000012, "Member 'UIConfigurationDraw_DrawAudioDeviceChange::TextColorB' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawAudioDeviceChange, TextColorA) == 0x000013, "Member 'UIConfigurationDraw_DrawAudioDeviceChange::TextColorA' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawAudioDeviceChange, SizeX) == 0x000014, "Member 'UIConfigurationDraw_DrawAudioDeviceChange::SizeX' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawAudioDeviceChange, SizeY) == 0x000018, "Member 'UIConfigurationDraw_DrawAudioDeviceChange::SizeY' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawAudioDeviceChange, DrawConfigParam) == 0x000020, "Member 'UIConfigurationDraw_DrawAudioDeviceChange::DrawConfigParam' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawAudioDeviceChange, SprHandle) == 0x000088, "Member 'UIConfigurationDraw_DrawAudioDeviceChange::SprHandle' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.DrawBgmSelectText
// 0x00B8 (0x00B8 - 0x0000)
struct UIConfigurationDraw_DrawBgmSelectText final
{
public:
	float                                         baseX;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         baseY;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextX;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextY;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextColorR;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextColorG;                                        // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextColorB;                                        // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextColorA;                                        // 0x0013(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeX;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SizeY;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDrawConfigParam                       DrawConfigParam;                                   // 0x0020(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDrawBGMParam                          DrawBGMParam;                                      // 0x0088(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class USprAsset*                        SprHandle;                                         // 0x00B0(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_DrawBgmSelectText) == 0x000008, "Wrong alignment on UIConfigurationDraw_DrawBgmSelectText");
static_assert(sizeof(UIConfigurationDraw_DrawBgmSelectText) == 0x0000B8, "Wrong size on UIConfigurationDraw_DrawBgmSelectText");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, baseX) == 0x000000, "Member 'UIConfigurationDraw_DrawBgmSelectText::baseX' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, baseY) == 0x000004, "Member 'UIConfigurationDraw_DrawBgmSelectText::baseY' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, TextX) == 0x000008, "Member 'UIConfigurationDraw_DrawBgmSelectText::TextX' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, TextY) == 0x00000C, "Member 'UIConfigurationDraw_DrawBgmSelectText::TextY' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, TextColorR) == 0x000010, "Member 'UIConfigurationDraw_DrawBgmSelectText::TextColorR' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, TextColorG) == 0x000011, "Member 'UIConfigurationDraw_DrawBgmSelectText::TextColorG' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, TextColorB) == 0x000012, "Member 'UIConfigurationDraw_DrawBgmSelectText::TextColorB' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, TextColorA) == 0x000013, "Member 'UIConfigurationDraw_DrawBgmSelectText::TextColorA' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, SizeX) == 0x000014, "Member 'UIConfigurationDraw_DrawBgmSelectText::SizeX' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, SizeY) == 0x000018, "Member 'UIConfigurationDraw_DrawBgmSelectText::SizeY' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, DrawConfigParam) == 0x000020, "Member 'UIConfigurationDraw_DrawBgmSelectText::DrawConfigParam' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, DrawBGMParam) == 0x000088, "Member 'UIConfigurationDraw_DrawBgmSelectText::DrawBGMParam' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawBgmSelectText, SprHandle) == 0x0000B0, "Member 'UIConfigurationDraw_DrawBgmSelectText::SprHandle' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.DrawCommonBg2
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_DrawCommonBg2 final
{
public:
	bool                                          IsTitle;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_DrawCommonBg2) == 0x000001, "Wrong alignment on UIConfigurationDraw_DrawCommonBg2");
static_assert(sizeof(UIConfigurationDraw_DrawCommonBg2) == 0x000001, "Wrong size on UIConfigurationDraw_DrawCommonBg2");
static_assert(offsetof(UIConfigurationDraw_DrawCommonBg2, IsTitle) == 0x000000, "Member 'UIConfigurationDraw_DrawCommonBg2::IsTitle' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.DrawGlowCore
// 0x0020 (0x0020 - 0x0000)
struct UIConfigurationDraw_DrawGlowCore final
{
public:
	struct FVector2D                              Offset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PlusOffset;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USprAsset*                        SprHandle;                                         // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_DrawGlowCore) == 0x000008, "Wrong alignment on UIConfigurationDraw_DrawGlowCore");
static_assert(sizeof(UIConfigurationDraw_DrawGlowCore) == 0x000020, "Wrong size on UIConfigurationDraw_DrawGlowCore");
static_assert(offsetof(UIConfigurationDraw_DrawGlowCore, Offset) == 0x000000, "Member 'UIConfigurationDraw_DrawGlowCore::Offset' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawGlowCore, Color) == 0x000008, "Member 'UIConfigurationDraw_DrawGlowCore::Color' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawGlowCore, Scale) == 0x00000C, "Member 'UIConfigurationDraw_DrawGlowCore::Scale' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawGlowCore, PlusOffset) == 0x000010, "Member 'UIConfigurationDraw_DrawGlowCore::PlusOffset' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawGlowCore, SprHandle) == 0x000018, "Member 'UIConfigurationDraw_DrawGlowCore::SprHandle' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.DrawHeroSilhouette
// 0x0008 (0x0008 - 0x0000)
struct UIConfigurationDraw_DrawHeroSilhouette final
{
public:
	struct FVector2D                              Offset;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_DrawHeroSilhouette) == 0x000004, "Wrong alignment on UIConfigurationDraw_DrawHeroSilhouette");
static_assert(sizeof(UIConfigurationDraw_DrawHeroSilhouette) == 0x000008, "Wrong size on UIConfigurationDraw_DrawHeroSilhouette");
static_assert(offsetof(UIConfigurationDraw_DrawHeroSilhouette, Offset) == 0x000000, "Member 'UIConfigurationDraw_DrawHeroSilhouette::Offset' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.DrawHeroTexture
// 0x0008 (0x0008 - 0x0000)
struct UIConfigurationDraw_DrawHeroTexture final
{
public:
	class UTexture*                               InTexture;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_DrawHeroTexture) == 0x000008, "Wrong alignment on UIConfigurationDraw_DrawHeroTexture");
static_assert(sizeof(UIConfigurationDraw_DrawHeroTexture) == 0x000008, "Wrong size on UIConfigurationDraw_DrawHeroTexture");
static_assert(offsetof(UIConfigurationDraw_DrawHeroTexture, InTexture) == 0x000000, "Member 'UIConfigurationDraw_DrawHeroTexture::InTexture' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.DrawKeyConfigButtonSpr
// 0x0080 (0x0080 - 0x0000)
struct UIConfigurationDraw_DrawKeyConfigButtonSpr final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDrawConfigParam                       DrawConfigParam;                                   // 0x0008(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FColor                                 RGBA;                                              // 0x0070(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USprAsset*                        SprHandle;                                         // 0x0078(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_DrawKeyConfigButtonSpr) == 0x000008, "Wrong alignment on UIConfigurationDraw_DrawKeyConfigButtonSpr");
static_assert(sizeof(UIConfigurationDraw_DrawKeyConfigButtonSpr) == 0x000080, "Wrong size on UIConfigurationDraw_DrawKeyConfigButtonSpr");
static_assert(offsetof(UIConfigurationDraw_DrawKeyConfigButtonSpr, X) == 0x000000, "Member 'UIConfigurationDraw_DrawKeyConfigButtonSpr::X' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawKeyConfigButtonSpr, Y) == 0x000004, "Member 'UIConfigurationDraw_DrawKeyConfigButtonSpr::Y' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawKeyConfigButtonSpr, DrawConfigParam) == 0x000008, "Member 'UIConfigurationDraw_DrawKeyConfigButtonSpr::DrawConfigParam' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawKeyConfigButtonSpr, RGBA) == 0x000070, "Member 'UIConfigurationDraw_DrawKeyConfigButtonSpr::RGBA' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawKeyConfigButtonSpr, SprHandle) == 0x000078, "Member 'UIConfigurationDraw_DrawKeyConfigButtonSpr::SprHandle' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.DrawKeyConfigSwitcher
// 0x0008 (0x0008 - 0x0000)
struct UIConfigurationDraw_DrawKeyConfigSwitcher final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_DrawKeyConfigSwitcher) == 0x000004, "Wrong alignment on UIConfigurationDraw_DrawKeyConfigSwitcher");
static_assert(sizeof(UIConfigurationDraw_DrawKeyConfigSwitcher) == 0x000008, "Wrong size on UIConfigurationDraw_DrawKeyConfigSwitcher");
static_assert(offsetof(UIConfigurationDraw_DrawKeyConfigSwitcher, X) == 0x000000, "Member 'UIConfigurationDraw_DrawKeyConfigSwitcher::X' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawKeyConfigSwitcher, Y) == 0x000004, "Member 'UIConfigurationDraw_DrawKeyConfigSwitcher::Y' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.DrawUim
// 0x0018 (0x0018 - 0x0000)
struct UIConfigurationDraw_DrawUim final
{
public:
	class UObject*                                InUimAsset;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFrame;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMaxFrame;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	const class UTexture*                         InTexture;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_DrawUim) == 0x000008, "Wrong alignment on UIConfigurationDraw_DrawUim");
static_assert(sizeof(UIConfigurationDraw_DrawUim) == 0x000018, "Wrong size on UIConfigurationDraw_DrawUim");
static_assert(offsetof(UIConfigurationDraw_DrawUim, InUimAsset) == 0x000000, "Member 'UIConfigurationDraw_DrawUim::InUimAsset' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawUim, InFrame) == 0x000008, "Member 'UIConfigurationDraw_DrawUim::InFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawUim, bIsMaxFrame) == 0x00000C, "Member 'UIConfigurationDraw_DrawUim::bIsMaxFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_DrawUim, InTexture) == 0x000010, "Member 'UIConfigurationDraw_DrawUim::InTexture' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.Get_BgMaterial
// 0x0008 (0x0008 - 0x0000)
struct UIConfigurationDraw_Get_BgMaterial final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_Get_BgMaterial) == 0x000008, "Wrong alignment on UIConfigurationDraw_Get_BgMaterial");
static_assert(sizeof(UIConfigurationDraw_Get_BgMaterial) == 0x000008, "Wrong size on UIConfigurationDraw_Get_BgMaterial");
static_assert(offsetof(UIConfigurationDraw_Get_BgMaterial, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_Get_BgMaterial::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetAdjustedConfigPos
// 0x0014 (0x0014 - 0x0000)
struct UIConfigurationDraw_GetAdjustedConfigPos final
{
public:
	ECmpLayoutConfig                              InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Default;                                           // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutSize;                                           // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetAdjustedConfigPos) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetAdjustedConfigPos");
static_assert(sizeof(UIConfigurationDraw_GetAdjustedConfigPos) == 0x000014, "Wrong size on UIConfigurationDraw_GetAdjustedConfigPos");
static_assert(offsetof(UIConfigurationDraw_GetAdjustedConfigPos, InType) == 0x000000, "Member 'UIConfigurationDraw_GetAdjustedConfigPos::InType' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetAdjustedConfigPos, Default) == 0x000004, "Member 'UIConfigurationDraw_GetAdjustedConfigPos::Default' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetAdjustedConfigPos, OutSize) == 0x00000C, "Member 'UIConfigurationDraw_GetAdjustedConfigPos::OutSize' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetAdjustedConfigTextCol
// 0x000C (0x000C - 0x0000)
struct UIConfigurationDraw_GetAdjustedConfigTextCol final
{
public:
	ECmpLayoutConfigText                          InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              OutSize;                                           // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetAdjustedConfigTextCol) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetAdjustedConfigTextCol");
static_assert(sizeof(UIConfigurationDraw_GetAdjustedConfigTextCol) == 0x00000C, "Wrong size on UIConfigurationDraw_GetAdjustedConfigTextCol");
static_assert(offsetof(UIConfigurationDraw_GetAdjustedConfigTextCol, InType) == 0x000000, "Member 'UIConfigurationDraw_GetAdjustedConfigTextCol::InType' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetAdjustedConfigTextCol, OutSize) == 0x000004, "Member 'UIConfigurationDraw_GetAdjustedConfigTextCol::OutSize' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetAdjustedHelpBarOffset
// 0x0010 (0x0010 - 0x0000)
struct UIConfigurationDraw_GetAdjustedHelpBarOffset final
{
public:
	bool                                          InIsBGMMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              OutPosition;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_GetAdjustedHelpBarOffset) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetAdjustedHelpBarOffset");
static_assert(sizeof(UIConfigurationDraw_GetAdjustedHelpBarOffset) == 0x000010, "Wrong size on UIConfigurationDraw_GetAdjustedHelpBarOffset");
static_assert(offsetof(UIConfigurationDraw_GetAdjustedHelpBarOffset, InIsBGMMode) == 0x000000, "Member 'UIConfigurationDraw_GetAdjustedHelpBarOffset::InIsBGMMode' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetAdjustedHelpBarOffset, OutPosition) == 0x000004, "Member 'UIConfigurationDraw_GetAdjustedHelpBarOffset::OutPosition' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetAdjustedHelpBarOffset, ReturnValue) == 0x00000C, "Member 'UIConfigurationDraw_GetAdjustedHelpBarOffset::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetAdjustedHelpRootPosition
// 0x0010 (0x0010 - 0x0000)
struct UIConfigurationDraw_GetAdjustedHelpRootPosition final
{
public:
	bool                                          InIsBGMMode;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              OutPosition;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_GetAdjustedHelpRootPosition) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetAdjustedHelpRootPosition");
static_assert(sizeof(UIConfigurationDraw_GetAdjustedHelpRootPosition) == 0x000010, "Wrong size on UIConfigurationDraw_GetAdjustedHelpRootPosition");
static_assert(offsetof(UIConfigurationDraw_GetAdjustedHelpRootPosition, InIsBGMMode) == 0x000000, "Member 'UIConfigurationDraw_GetAdjustedHelpRootPosition::InIsBGMMode' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetAdjustedHelpRootPosition, OutPosition) == 0x000004, "Member 'UIConfigurationDraw_GetAdjustedHelpRootPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetAdjustedHelpRootPosition, ReturnValue) == 0x00000C, "Member 'UIConfigurationDraw_GetAdjustedHelpRootPosition::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetBgmCursorIndex
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetBgmCursorIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetBgmCursorIndex) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetBgmCursorIndex");
static_assert(sizeof(UIConfigurationDraw_GetBgmCursorIndex) == 0x000004, "Wrong size on UIConfigurationDraw_GetBgmCursorIndex");
static_assert(offsetof(UIConfigurationDraw_GetBgmCursorIndex, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetBgmCursorIndex::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetBgmListTopIndex
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetBgmListTopIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetBgmListTopIndex) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetBgmListTopIndex");
static_assert(sizeof(UIConfigurationDraw_GetBgmListTopIndex) == 0x000004, "Wrong size on UIConfigurationDraw_GetBgmListTopIndex");
static_assert(offsetof(UIConfigurationDraw_GetBgmListTopIndex, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetBgmListTopIndex::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetBgmSetID
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetBgmSetID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetBgmSetID) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetBgmSetID");
static_assert(sizeof(UIConfigurationDraw_GetBgmSetID) == 0x000004, "Wrong size on UIConfigurationDraw_GetBgmSetID");
static_assert(offsetof(UIConfigurationDraw_GetBgmSetID, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetBgmSetID::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetBGMText
// 0x0018 (0x0018 - 0x0000)
struct UIConfigurationDraw_GetBGMText final
{
public:
	int32                                         InSelect;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetBGMText) == 0x000008, "Wrong alignment on UIConfigurationDraw_GetBGMText");
static_assert(sizeof(UIConfigurationDraw_GetBGMText) == 0x000018, "Wrong size on UIConfigurationDraw_GetBGMText");
static_assert(offsetof(UIConfigurationDraw_GetBGMText, InSelect) == 0x000000, "Member 'UIConfigurationDraw_GetBGMText::InSelect' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetBGMText, ReturnValue) == 0x000008, "Member 'UIConfigurationDraw_GetBGMText::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetBlueBoardColor
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetBlueBoardColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetBlueBoardColor) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetBlueBoardColor");
static_assert(sizeof(UIConfigurationDraw_GetBlueBoardColor) == 0x000004, "Wrong size on UIConfigurationDraw_GetBlueBoardColor");
static_assert(offsetof(UIConfigurationDraw_GetBlueBoardColor, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetBlueBoardColor::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetButtonLayoutText
// 0x0018 (0x0018 - 0x0000)
struct UIConfigurationDraw_GetButtonLayoutText final
{
public:
	int32                                         InSelect;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetButtonLayoutText) == 0x000008, "Wrong alignment on UIConfigurationDraw_GetButtonLayoutText");
static_assert(sizeof(UIConfigurationDraw_GetButtonLayoutText) == 0x000018, "Wrong size on UIConfigurationDraw_GetButtonLayoutText");
static_assert(offsetof(UIConfigurationDraw_GetButtonLayoutText, InSelect) == 0x000000, "Member 'UIConfigurationDraw_GetButtonLayoutText::InSelect' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetButtonLayoutText, ReturnValue) == 0x000008, "Member 'UIConfigurationDraw_GetButtonLayoutText::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetConfigTypeText
// 0x0018 (0x0018 - 0x0000)
struct UIConfigurationDraw_GetConfigTypeText final
{
public:
	int32                                         InSelect;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetConfigTypeText) == 0x000008, "Wrong alignment on UIConfigurationDraw_GetConfigTypeText");
static_assert(sizeof(UIConfigurationDraw_GetConfigTypeText) == 0x000018, "Wrong size on UIConfigurationDraw_GetConfigTypeText");
static_assert(offsetof(UIConfigurationDraw_GetConfigTypeText, InSelect) == 0x000000, "Member 'UIConfigurationDraw_GetConfigTypeText::InSelect' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetConfigTypeText, ReturnValue) == 0x000008, "Member 'UIConfigurationDraw_GetConfigTypeText::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetCurrentIndex
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetCurrentIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetCurrentIndex) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetCurrentIndex");
static_assert(sizeof(UIConfigurationDraw_GetCurrentIndex) == 0x000004, "Wrong size on UIConfigurationDraw_GetCurrentIndex");
static_assert(offsetof(UIConfigurationDraw_GetCurrentIndex, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetCurrentIndex::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetCursorIndex
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetCursorIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetCursorIndex) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetCursorIndex");
static_assert(sizeof(UIConfigurationDraw_GetCursorIndex) == 0x000004, "Wrong size on UIConfigurationDraw_GetCursorIndex");
static_assert(offsetof(UIConfigurationDraw_GetCursorIndex, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetCursorIndex::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetDifficultyText
// 0x0018 (0x0018 - 0x0000)
struct UIConfigurationDraw_GetDifficultyText final
{
public:
	int32                                         InSelect;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetDifficultyText) == 0x000008, "Wrong alignment on UIConfigurationDraw_GetDifficultyText");
static_assert(sizeof(UIConfigurationDraw_GetDifficultyText) == 0x000018, "Wrong size on UIConfigurationDraw_GetDifficultyText");
static_assert(offsetof(UIConfigurationDraw_GetDifficultyText, InSelect) == 0x000000, "Member 'UIConfigurationDraw_GetDifficultyText::InSelect' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetDifficultyText, ReturnValue) == 0x000008, "Member 'UIConfigurationDraw_GetDifficultyText::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetDrawConfigParam
// 0x0070 (0x0070 - 0x0000)
struct UIConfigurationDraw_GetDrawConfigParam final
{
public:
	int32                                         InMenuID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDrawConfigParam                       ReturnValue;                                       // 0x0008(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetDrawConfigParam) == 0x000008, "Wrong alignment on UIConfigurationDraw_GetDrawConfigParam");
static_assert(sizeof(UIConfigurationDraw_GetDrawConfigParam) == 0x000070, "Wrong size on UIConfigurationDraw_GetDrawConfigParam");
static_assert(offsetof(UIConfigurationDraw_GetDrawConfigParam, InMenuID) == 0x000000, "Member 'UIConfigurationDraw_GetDrawConfigParam::InMenuID' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetDrawConfigParam, ReturnValue) == 0x000008, "Member 'UIConfigurationDraw_GetDrawConfigParam::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetGradation1BottomColour
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetGradation1BottomColour final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetGradation1BottomColour) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetGradation1BottomColour");
static_assert(sizeof(UIConfigurationDraw_GetGradation1BottomColour) == 0x000004, "Wrong size on UIConfigurationDraw_GetGradation1BottomColour");
static_assert(offsetof(UIConfigurationDraw_GetGradation1BottomColour, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetGradation1BottomColour::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetGradation1TopColour
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetGradation1TopColour final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetGradation1TopColour) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetGradation1TopColour");
static_assert(sizeof(UIConfigurationDraw_GetGradation1TopColour) == 0x000004, "Wrong size on UIConfigurationDraw_GetGradation1TopColour");
static_assert(offsetof(UIConfigurationDraw_GetGradation1TopColour, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetGradation1TopColour::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetGradation2BottomColour
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetGradation2BottomColour final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetGradation2BottomColour) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetGradation2BottomColour");
static_assert(sizeof(UIConfigurationDraw_GetGradation2BottomColour) == 0x000004, "Wrong size on UIConfigurationDraw_GetGradation2BottomColour");
static_assert(offsetof(UIConfigurationDraw_GetGradation2BottomColour, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetGradation2BottomColour::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetGradation2TopColour
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetGradation2TopColour final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetGradation2TopColour) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetGradation2TopColour");
static_assert(sizeof(UIConfigurationDraw_GetGradation2TopColour) == 0x000004, "Wrong size on UIConfigurationDraw_GetGradation2TopColour");
static_assert(offsetof(UIConfigurationDraw_GetGradation2TopColour, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetGradation2TopColour::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetIndexedDrawConfigParam
// 0x0070 (0x0070 - 0x0000)
struct UIConfigurationDraw_GetIndexedDrawConfigParam final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDrawConfigParam                       ReturnValue;                                       // 0x0008(0x0068)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetIndexedDrawConfigParam) == 0x000008, "Wrong alignment on UIConfigurationDraw_GetIndexedDrawConfigParam");
static_assert(sizeof(UIConfigurationDraw_GetIndexedDrawConfigParam) == 0x000070, "Wrong size on UIConfigurationDraw_GetIndexedDrawConfigParam");
static_assert(offsetof(UIConfigurationDraw_GetIndexedDrawConfigParam, InIndex) == 0x000000, "Member 'UIConfigurationDraw_GetIndexedDrawConfigParam::InIndex' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetIndexedDrawConfigParam, ReturnValue) == 0x000008, "Member 'UIConfigurationDraw_GetIndexedDrawConfigParam::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetIsFisrt
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_GetIsFisrt final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetIsFisrt) == 0x000001, "Wrong alignment on UIConfigurationDraw_GetIsFisrt");
static_assert(sizeof(UIConfigurationDraw_GetIsFisrt) == 0x000001, "Wrong size on UIConfigurationDraw_GetIsFisrt");
static_assert(offsetof(UIConfigurationDraw_GetIsFisrt, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetIsFisrt::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetListNum
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetListNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetListNum) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetListNum");
static_assert(sizeof(UIConfigurationDraw_GetListNum) == 0x000004, "Wrong size on UIConfigurationDraw_GetListNum");
static_assert(offsetof(UIConfigurationDraw_GetListNum, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetListNum::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetListTopIndex
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetListTopIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetListTopIndex) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetListTopIndex");
static_assert(sizeof(UIConfigurationDraw_GetListTopIndex) == 0x000004, "Wrong size on UIConfigurationDraw_GetListTopIndex");
static_assert(offsetof(UIConfigurationDraw_GetListTopIndex, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetListTopIndex::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetOffText
// 0x0010 (0x0010 - 0x0000)
struct UIConfigurationDraw_GetOffText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetOffText) == 0x000008, "Wrong alignment on UIConfigurationDraw_GetOffText");
static_assert(sizeof(UIConfigurationDraw_GetOffText) == 0x000010, "Wrong size on UIConfigurationDraw_GetOffText");
static_assert(offsetof(UIConfigurationDraw_GetOffText, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetOffText::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetOnText
// 0x0010 (0x0010 - 0x0000)
struct UIConfigurationDraw_GetOnText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetOnText) == 0x000008, "Wrong alignment on UIConfigurationDraw_GetOnText");
static_assert(sizeof(UIConfigurationDraw_GetOnText) == 0x000010, "Wrong size on UIConfigurationDraw_GetOnText");
static_assert(offsetof(UIConfigurationDraw_GetOnText, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetOnText::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetPlayingIndex
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_GetPlayingIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetPlayingIndex) == 0x000004, "Wrong alignment on UIConfigurationDraw_GetPlayingIndex");
static_assert(sizeof(UIConfigurationDraw_GetPlayingIndex) == 0x000004, "Wrong size on UIConfigurationDraw_GetPlayingIndex");
static_assert(offsetof(UIConfigurationDraw_GetPlayingIndex, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_GetPlayingIndex::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetSelLangText
// 0x0018 (0x0018 - 0x0000)
struct UIConfigurationDraw_GetSelLangText final
{
public:
	int32                                         InSelect;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetSelLangText) == 0x000008, "Wrong alignment on UIConfigurationDraw_GetSelLangText");
static_assert(sizeof(UIConfigurationDraw_GetSelLangText) == 0x000018, "Wrong size on UIConfigurationDraw_GetSelLangText");
static_assert(offsetof(UIConfigurationDraw_GetSelLangText, InSelect) == 0x000000, "Member 'UIConfigurationDraw_GetSelLangText::InSelect' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetSelLangText, ReturnValue) == 0x000008, "Member 'UIConfigurationDraw_GetSelLangText::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetSoundOutputText
// 0x0018 (0x0018 - 0x0000)
struct UIConfigurationDraw_GetSoundOutputText final
{
public:
	int32                                         InSelect;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_GetSoundOutputText) == 0x000008, "Wrong alignment on UIConfigurationDraw_GetSoundOutputText");
static_assert(sizeof(UIConfigurationDraw_GetSoundOutputText) == 0x000018, "Wrong size on UIConfigurationDraw_GetSoundOutputText");
static_assert(offsetof(UIConfigurationDraw_GetSoundOutputText, InSelect) == 0x000000, "Member 'UIConfigurationDraw_GetSoundOutputText::InSelect' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetSoundOutputText, ReturnValue) == 0x000008, "Member 'UIConfigurationDraw_GetSoundOutputText::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.IsBaseDiffLuna
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_IsBaseDiffLuna final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_IsBaseDiffLuna) == 0x000001, "Wrong alignment on UIConfigurationDraw_IsBaseDiffLuna");
static_assert(sizeof(UIConfigurationDraw_IsBaseDiffLuna) == 0x000001, "Wrong size on UIConfigurationDraw_IsBaseDiffLuna");
static_assert(offsetof(UIConfigurationDraw_IsBaseDiffLuna, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_IsBaseDiffLuna::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.IsBGMMode
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_IsBGMMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_IsBGMMode) == 0x000001, "Wrong alignment on UIConfigurationDraw_IsBGMMode");
static_assert(sizeof(UIConfigurationDraw_IsBGMMode) == 0x000001, "Wrong size on UIConfigurationDraw_IsBGMMode");
static_assert(offsetof(UIConfigurationDraw_IsBGMMode, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_IsBGMMode::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.IsConfigTypeMode
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_IsConfigTypeMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_IsConfigTypeMode) == 0x000001, "Wrong alignment on UIConfigurationDraw_IsConfigTypeMode");
static_assert(sizeof(UIConfigurationDraw_IsConfigTypeMode) == 0x000001, "Wrong size on UIConfigurationDraw_IsConfigTypeMode");
static_assert(offsetof(UIConfigurationDraw_IsConfigTypeMode, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_IsConfigTypeMode::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.IsKeyConfig
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_IsKeyConfig final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_IsKeyConfig) == 0x000001, "Wrong alignment on UIConfigurationDraw_IsKeyConfig");
static_assert(sizeof(UIConfigurationDraw_IsKeyConfig) == 0x000001, "Wrong size on UIConfigurationDraw_IsKeyConfig");
static_assert(offsetof(UIConfigurationDraw_IsKeyConfig, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_IsKeyConfig::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.IsScrollDrawBgmSelectText
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_IsScrollDrawBgmSelectText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_IsScrollDrawBgmSelectText) == 0x000001, "Wrong alignment on UIConfigurationDraw_IsScrollDrawBgmSelectText");
static_assert(sizeof(UIConfigurationDraw_IsScrollDrawBgmSelectText) == 0x000001, "Wrong size on UIConfigurationDraw_IsScrollDrawBgmSelectText");
static_assert(offsetof(UIConfigurationDraw_IsScrollDrawBgmSelectText, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_IsScrollDrawBgmSelectText::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.IsTitleOpend
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_IsTitleOpend final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_IsTitleOpend) == 0x000001, "Wrong alignment on UIConfigurationDraw_IsTitleOpend");
static_assert(sizeof(UIConfigurationDraw_IsTitleOpend) == 0x000001, "Wrong size on UIConfigurationDraw_IsTitleOpend");
static_assert(offsetof(UIConfigurationDraw_IsTitleOpend, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_IsTitleOpend::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.IsWindowShow
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_IsWindowShow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_IsWindowShow) == 0x000001, "Wrong alignment on UIConfigurationDraw_IsWindowShow");
static_assert(sizeof(UIConfigurationDraw_IsWindowShow) == 0x000001, "Wrong size on UIConfigurationDraw_IsWindowShow");
static_assert(offsetof(UIConfigurationDraw_IsWindowShow, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_IsWindowShow::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.On_BgmSetIndexChanged
// 0x0008 (0x0008 - 0x0000)
struct UIConfigurationDraw_On_BgmSetIndexChanged final
{
public:
	int32                                         InSetIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_On_BgmSetIndexChanged) == 0x000004, "Wrong alignment on UIConfigurationDraw_On_BgmSetIndexChanged");
static_assert(sizeof(UIConfigurationDraw_On_BgmSetIndexChanged) == 0x000008, "Wrong size on UIConfigurationDraw_On_BgmSetIndexChanged");
static_assert(offsetof(UIConfigurationDraw_On_BgmSetIndexChanged, InSetIndex) == 0x000000, "Member 'UIConfigurationDraw_On_BgmSetIndexChanged::InSetIndex' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_On_BgmSetIndexChanged, ReturnValue) == 0x000004, "Member 'UIConfigurationDraw_On_BgmSetIndexChanged::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.On_CursorIndexChanged
// 0x000C (0x000C - 0x0000)
struct UIConfigurationDraw_On_CursorIndexChanged final
{
public:
	int32                                         InCursorIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InListTopIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_On_CursorIndexChanged) == 0x000004, "Wrong alignment on UIConfigurationDraw_On_CursorIndexChanged");
static_assert(sizeof(UIConfigurationDraw_On_CursorIndexChanged) == 0x00000C, "Wrong size on UIConfigurationDraw_On_CursorIndexChanged");
static_assert(offsetof(UIConfigurationDraw_On_CursorIndexChanged, InCursorIndex) == 0x000000, "Member 'UIConfigurationDraw_On_CursorIndexChanged::InCursorIndex' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_On_CursorIndexChanged, InListTopIndex) == 0x000004, "Member 'UIConfigurationDraw_On_CursorIndexChanged::InListTopIndex' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_On_CursorIndexChanged, ReturnValue) == 0x000008, "Member 'UIConfigurationDraw_On_CursorIndexChanged::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.On_CursorIndexChanged_BGM
// 0x000C (0x000C - 0x0000)
struct UIConfigurationDraw_On_CursorIndexChanged_BGM final
{
public:
	int32                                         InCursorIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InListTopIndex;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_On_CursorIndexChanged_BGM) == 0x000004, "Wrong alignment on UIConfigurationDraw_On_CursorIndexChanged_BGM");
static_assert(sizeof(UIConfigurationDraw_On_CursorIndexChanged_BGM) == 0x00000C, "Wrong size on UIConfigurationDraw_On_CursorIndexChanged_BGM");
static_assert(offsetof(UIConfigurationDraw_On_CursorIndexChanged_BGM, InCursorIndex) == 0x000000, "Member 'UIConfigurationDraw_On_CursorIndexChanged_BGM::InCursorIndex' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_On_CursorIndexChanged_BGM, InListTopIndex) == 0x000004, "Member 'UIConfigurationDraw_On_CursorIndexChanged_BGM::InListTopIndex' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_On_CursorIndexChanged_BGM, ReturnValue) == 0x000008, "Member 'UIConfigurationDraw_On_CursorIndexChanged_BGM::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.On_PlayingIndexChanged
// 0x0008 (0x0008 - 0x0000)
struct UIConfigurationDraw_On_PlayingIndexChanged final
{
public:
	int32                                         InPlayingIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_On_PlayingIndexChanged) == 0x000004, "Wrong alignment on UIConfigurationDraw_On_PlayingIndexChanged");
static_assert(sizeof(UIConfigurationDraw_On_PlayingIndexChanged) == 0x000008, "Wrong size on UIConfigurationDraw_On_PlayingIndexChanged");
static_assert(offsetof(UIConfigurationDraw_On_PlayingIndexChanged, InPlayingIndex) == 0x000000, "Member 'UIConfigurationDraw_On_PlayingIndexChanged::InPlayingIndex' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_On_PlayingIndexChanged, ReturnValue) == 0x000004, "Member 'UIConfigurationDraw_On_PlayingIndexChanged::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.On_ValueChanged
// 0x0010 (0x0010 - 0x0000)
struct UIConfigurationDraw_On_ValueChanged final
{
public:
	int32                                         InMenueID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFlag;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_On_ValueChanged) == 0x000004, "Wrong alignment on UIConfigurationDraw_On_ValueChanged");
static_assert(sizeof(UIConfigurationDraw_On_ValueChanged) == 0x000010, "Wrong size on UIConfigurationDraw_On_ValueChanged");
static_assert(offsetof(UIConfigurationDraw_On_ValueChanged, InMenueID) == 0x000000, "Member 'UIConfigurationDraw_On_ValueChanged::InMenueID' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_On_ValueChanged, InFlag) == 0x000004, "Member 'UIConfigurationDraw_On_ValueChanged::InFlag' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_On_ValueChanged, InValue) == 0x000008, "Member 'UIConfigurationDraw_On_ValueChanged::InValue' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_On_ValueChanged, ReturnValue) == 0x00000C, "Member 'UIConfigurationDraw_On_ValueChanged::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.SetScrollBarTouchCollision
// 0x0028 (0x0028 - 0x0000)
struct UIConfigurationDraw_SetScrollBarTouchCollision final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollRange;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawListNum;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListNum;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScrollPosY;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddLayer;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_SetScrollBarTouchCollision) == 0x000004, "Wrong alignment on UIConfigurationDraw_SetScrollBarTouchCollision");
static_assert(sizeof(UIConfigurationDraw_SetScrollBarTouchCollision) == 0x000028, "Wrong size on UIConfigurationDraw_SetScrollBarTouchCollision");
static_assert(offsetof(UIConfigurationDraw_SetScrollBarTouchCollision, X) == 0x000000, "Member 'UIConfigurationDraw_SetScrollBarTouchCollision::X' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollBarTouchCollision, Y) == 0x000004, "Member 'UIConfigurationDraw_SetScrollBarTouchCollision::Y' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollBarTouchCollision, Width) == 0x000008, "Member 'UIConfigurationDraw_SetScrollBarTouchCollision::Width' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollBarTouchCollision, Height) == 0x00000C, "Member 'UIConfigurationDraw_SetScrollBarTouchCollision::Height' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollBarTouchCollision, ScrollRange) == 0x000010, "Member 'UIConfigurationDraw_SetScrollBarTouchCollision::ScrollRange' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollBarTouchCollision, DrawListNum) == 0x000014, "Member 'UIConfigurationDraw_SetScrollBarTouchCollision::DrawListNum' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollBarTouchCollision, MaxListNum) == 0x000018, "Member 'UIConfigurationDraw_SetScrollBarTouchCollision::MaxListNum' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollBarTouchCollision, ScrollPosY) == 0x00001C, "Member 'UIConfigurationDraw_SetScrollBarTouchCollision::ScrollPosY' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollBarTouchCollision, AddLayer) == 0x000020, "Member 'UIConfigurationDraw_SetScrollBarTouchCollision::AddLayer' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollBarTouchCollision, DrawPoint) == 0x000024, "Member 'UIConfigurationDraw_SetScrollBarTouchCollision::DrawPoint' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.SetScrollPos
// 0x001C (0x001C - 0x0000)
struct UIConfigurationDraw_SetScrollPos final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollRange;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawListNum;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListNum;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScrollPosY;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_SetScrollPos) == 0x000004, "Wrong alignment on UIConfigurationDraw_SetScrollPos");
static_assert(sizeof(UIConfigurationDraw_SetScrollPos) == 0x00001C, "Wrong size on UIConfigurationDraw_SetScrollPos");
static_assert(offsetof(UIConfigurationDraw_SetScrollPos, InPos) == 0x000000, "Member 'UIConfigurationDraw_SetScrollPos::InPos' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollPos, Height) == 0x000008, "Member 'UIConfigurationDraw_SetScrollPos::Height' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollPos, ScrollRange) == 0x00000C, "Member 'UIConfigurationDraw_SetScrollPos::ScrollRange' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollPos, DrawListNum) == 0x000010, "Member 'UIConfigurationDraw_SetScrollPos::DrawListNum' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollPos, MaxListNum) == 0x000014, "Member 'UIConfigurationDraw_SetScrollPos::MaxListNum' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollPos, ScrollPosY) == 0x000018, "Member 'UIConfigurationDraw_SetScrollPos::ScrollPosY' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.SetScrollSize
// 0x0008 (0x0008 - 0x0000)
struct UIConfigurationDraw_SetScrollSize final
{
public:
	struct FVector2D                              InSize;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_SetScrollSize) == 0x000004, "Wrong alignment on UIConfigurationDraw_SetScrollSize");
static_assert(sizeof(UIConfigurationDraw_SetScrollSize) == 0x000008, "Wrong size on UIConfigurationDraw_SetScrollSize");
static_assert(offsetof(UIConfigurationDraw_SetScrollSize, InSize) == 0x000000, "Member 'UIConfigurationDraw_SetScrollSize::InSize' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.SetScrollTouchCollision
// 0x0018 (0x0018 - 0x0000)
struct UIConfigurationDraw_SetScrollTouchCollision final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddLayer;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_SetScrollTouchCollision) == 0x000004, "Wrong alignment on UIConfigurationDraw_SetScrollTouchCollision");
static_assert(sizeof(UIConfigurationDraw_SetScrollTouchCollision) == 0x000018, "Wrong size on UIConfigurationDraw_SetScrollTouchCollision");
static_assert(offsetof(UIConfigurationDraw_SetScrollTouchCollision, X) == 0x000000, "Member 'UIConfigurationDraw_SetScrollTouchCollision::X' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollTouchCollision, Y) == 0x000004, "Member 'UIConfigurationDraw_SetScrollTouchCollision::Y' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollTouchCollision, Width) == 0x000008, "Member 'UIConfigurationDraw_SetScrollTouchCollision::Width' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollTouchCollision, Height) == 0x00000C, "Member 'UIConfigurationDraw_SetScrollTouchCollision::Height' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollTouchCollision, AddLayer) == 0x000010, "Member 'UIConfigurationDraw_SetScrollTouchCollision::AddLayer' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetScrollTouchCollision, DrawPoint) == 0x000014, "Member 'UIConfigurationDraw_SetScrollTouchCollision::DrawPoint' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.SetSliderPos
// 0x000C (0x000C - 0x0000)
struct UIConfigurationDraw_SetSliderPos final
{
public:
	int32                                         InMenuID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InSliderPos;                                       // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_SetSliderPos) == 0x000004, "Wrong alignment on UIConfigurationDraw_SetSliderPos");
static_assert(sizeof(UIConfigurationDraw_SetSliderPos) == 0x00000C, "Wrong size on UIConfigurationDraw_SetSliderPos");
static_assert(offsetof(UIConfigurationDraw_SetSliderPos, InMenuID) == 0x000000, "Member 'UIConfigurationDraw_SetSliderPos::InMenuID' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetSliderPos, InSliderPos) == 0x000004, "Member 'UIConfigurationDraw_SetSliderPos::InSliderPos' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.SetTouchCollision
// 0x001C (0x001C - 0x0000)
struct UIConfigurationDraw_SetTouchCollision final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddLayer;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_SetTouchCollision) == 0x000004, "Wrong alignment on UIConfigurationDraw_SetTouchCollision");
static_assert(sizeof(UIConfigurationDraw_SetTouchCollision) == 0x00001C, "Wrong size on UIConfigurationDraw_SetTouchCollision");
static_assert(offsetof(UIConfigurationDraw_SetTouchCollision, Index_0) == 0x000000, "Member 'UIConfigurationDraw_SetTouchCollision::Index_0' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetTouchCollision, X) == 0x000004, "Member 'UIConfigurationDraw_SetTouchCollision::X' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetTouchCollision, Y) == 0x000008, "Member 'UIConfigurationDraw_SetTouchCollision::Y' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetTouchCollision, Width) == 0x00000C, "Member 'UIConfigurationDraw_SetTouchCollision::Width' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetTouchCollision, Height) == 0x000010, "Member 'UIConfigurationDraw_SetTouchCollision::Height' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetTouchCollision, AddLayer) == 0x000014, "Member 'UIConfigurationDraw_SetTouchCollision::AddLayer' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetTouchCollision, DrawPoint) == 0x000018, "Member 'UIConfigurationDraw_SetTouchCollision::DrawPoint' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.SetValueGaugeTouchCollision
// 0x0080 (0x0080 - 0x0000)
struct UIConfigurationDraw_SetValueGaugeTouchCollision final
{
public:
	struct FDrawConfigParam                       DrawParam;                                         // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         GaugeX;                                            // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeY;                                            // 0x006C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeWidth;                                        // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GaugeHeight;                                       // 0x0074(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderX;                                           // 0x0078(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SliderY;                                           // 0x007C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_SetValueGaugeTouchCollision) == 0x000008, "Wrong alignment on UIConfigurationDraw_SetValueGaugeTouchCollision");
static_assert(sizeof(UIConfigurationDraw_SetValueGaugeTouchCollision) == 0x000080, "Wrong size on UIConfigurationDraw_SetValueGaugeTouchCollision");
static_assert(offsetof(UIConfigurationDraw_SetValueGaugeTouchCollision, DrawParam) == 0x000000, "Member 'UIConfigurationDraw_SetValueGaugeTouchCollision::DrawParam' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetValueGaugeTouchCollision, GaugeX) == 0x000068, "Member 'UIConfigurationDraw_SetValueGaugeTouchCollision::GaugeX' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetValueGaugeTouchCollision, GaugeY) == 0x00006C, "Member 'UIConfigurationDraw_SetValueGaugeTouchCollision::GaugeY' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetValueGaugeTouchCollision, GaugeWidth) == 0x000070, "Member 'UIConfigurationDraw_SetValueGaugeTouchCollision::GaugeWidth' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetValueGaugeTouchCollision, GaugeHeight) == 0x000074, "Member 'UIConfigurationDraw_SetValueGaugeTouchCollision::GaugeHeight' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetValueGaugeTouchCollision, SliderX) == 0x000078, "Member 'UIConfigurationDraw_SetValueGaugeTouchCollision::SliderX' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_SetValueGaugeTouchCollision, SliderY) == 0x00007C, "Member 'UIConfigurationDraw_SetValueGaugeTouchCollision::SliderY' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.Start_CloseAnim
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_Start_CloseAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_Start_CloseAnim) == 0x000001, "Wrong alignment on UIConfigurationDraw_Start_CloseAnim");
static_assert(sizeof(UIConfigurationDraw_Start_CloseAnim) == 0x000001, "Wrong size on UIConfigurationDraw_Start_CloseAnim");
static_assert(offsetof(UIConfigurationDraw_Start_CloseAnim, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_Start_CloseAnim::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.Start_InAnim
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_Start_InAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_Start_InAnim) == 0x000001, "Wrong alignment on UIConfigurationDraw_Start_InAnim");
static_assert(sizeof(UIConfigurationDraw_Start_InAnim) == 0x000001, "Wrong size on UIConfigurationDraw_Start_InAnim");
static_assert(offsetof(UIConfigurationDraw_Start_InAnim, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_Start_InAnim::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.Start_MenuChangeAnim
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_Start_MenuChangeAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_Start_MenuChangeAnim) == 0x000001, "Wrong alignment on UIConfigurationDraw_Start_MenuChangeAnim");
static_assert(sizeof(UIConfigurationDraw_Start_MenuChangeAnim) == 0x000001, "Wrong size on UIConfigurationDraw_Start_MenuChangeAnim");
static_assert(offsetof(UIConfigurationDraw_Start_MenuChangeAnim, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_Start_MenuChangeAnim::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.Start_ToBGMAnim
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_Start_ToBGMAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_Start_ToBGMAnim) == 0x000001, "Wrong alignment on UIConfigurationDraw_Start_ToBGMAnim");
static_assert(sizeof(UIConfigurationDraw_Start_ToBGMAnim) == 0x000001, "Wrong size on UIConfigurationDraw_Start_ToBGMAnim");
static_assert(offsetof(UIConfigurationDraw_Start_ToBGMAnim, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_Start_ToBGMAnim::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.Start_ToConfAnim
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_Start_ToConfAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_Start_ToConfAnim) == 0x000001, "Wrong alignment on UIConfigurationDraw_Start_ToConfAnim");
static_assert(sizeof(UIConfigurationDraw_Start_ToConfAnim) == 0x000001, "Wrong size on UIConfigurationDraw_Start_ToConfAnim");
static_assert(offsetof(UIConfigurationDraw_Start_ToConfAnim, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_Start_ToConfAnim::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.StartInWipe
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_StartInWipe final
{
public:
	bool                                          IsTitle;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_StartInWipe) == 0x000001, "Wrong alignment on UIConfigurationDraw_StartInWipe");
static_assert(sizeof(UIConfigurationDraw_StartInWipe) == 0x000001, "Wrong size on UIConfigurationDraw_StartInWipe");
static_assert(offsetof(UIConfigurationDraw_StartInWipe, IsTitle) == 0x000000, "Member 'UIConfigurationDraw_StartInWipe::IsTitle' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.StateBGMDraw_In
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_StateBGMDraw_In final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_StateBGMDraw_In) == 0x000001, "Wrong alignment on UIConfigurationDraw_StateBGMDraw_In");
static_assert(sizeof(UIConfigurationDraw_StateBGMDraw_In) == 0x000001, "Wrong size on UIConfigurationDraw_StateBGMDraw_In");
static_assert(offsetof(UIConfigurationDraw_StateBGMDraw_In, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_StateBGMDraw_In::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.StateDraw_BG
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_StateDraw_BG final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_StateDraw_BG) == 0x000001, "Wrong alignment on UIConfigurationDraw_StateDraw_BG");
static_assert(sizeof(UIConfigurationDraw_StateDraw_BG) == 0x000001, "Wrong size on UIConfigurationDraw_StateDraw_BG");
static_assert(offsetof(UIConfigurationDraw_StateDraw_BG, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_StateDraw_BG::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.StateDraw_BGMSelect
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_StateDraw_BGMSelect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_StateDraw_BGMSelect) == 0x000001, "Wrong alignment on UIConfigurationDraw_StateDraw_BGMSelect");
static_assert(sizeof(UIConfigurationDraw_StateDraw_BGMSelect) == 0x000001, "Wrong size on UIConfigurationDraw_StateDraw_BGMSelect");
static_assert(offsetof(UIConfigurationDraw_StateDraw_BGMSelect, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_StateDraw_BGMSelect::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.StateDraw_Close
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_StateDraw_Close final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_StateDraw_Close) == 0x000001, "Wrong alignment on UIConfigurationDraw_StateDraw_Close");
static_assert(sizeof(UIConfigurationDraw_StateDraw_Close) == 0x000001, "Wrong size on UIConfigurationDraw_StateDraw_Close");
static_assert(offsetof(UIConfigurationDraw_StateDraw_Close, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_StateDraw_Close::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.StateDraw_IN
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_StateDraw_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_StateDraw_IN) == 0x000001, "Wrong alignment on UIConfigurationDraw_StateDraw_IN");
static_assert(sizeof(UIConfigurationDraw_StateDraw_IN) == 0x000001, "Wrong size on UIConfigurationDraw_StateDraw_IN");
static_assert(offsetof(UIConfigurationDraw_StateDraw_IN, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_StateDraw_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.StateDraw_ListItem
// 0x000C (0x000C - 0x0000)
struct UIConfigurationDraw_StateDraw_ListItem final
{
public:
	int32                                         InMenueID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InListIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_StateDraw_ListItem) == 0x000004, "Wrong alignment on UIConfigurationDraw_StateDraw_ListItem");
static_assert(sizeof(UIConfigurationDraw_StateDraw_ListItem) == 0x00000C, "Wrong size on UIConfigurationDraw_StateDraw_ListItem");
static_assert(offsetof(UIConfigurationDraw_StateDraw_ListItem, InMenueID) == 0x000000, "Member 'UIConfigurationDraw_StateDraw_ListItem::InMenueID' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_StateDraw_ListItem, InListIndex) == 0x000004, "Member 'UIConfigurationDraw_StateDraw_ListItem::InListIndex' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_StateDraw_ListItem, ReturnValue) == 0x000008, "Member 'UIConfigurationDraw_StateDraw_ListItem::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.StateDraw_Main
// 0x0001 (0x0001 - 0x0000)
struct UIConfigurationDraw_StateDraw_Main final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_StateDraw_Main) == 0x000001, "Wrong alignment on UIConfigurationDraw_StateDraw_Main");
static_assert(sizeof(UIConfigurationDraw_StateDraw_Main) == 0x000001, "Wrong size on UIConfigurationDraw_StateDraw_Main");
static_assert(offsetof(UIConfigurationDraw_StateDraw_Main, ReturnValue) == 0x000000, "Member 'UIConfigurationDraw_StateDraw_Main::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.StateDraw_Update
// 0x0008 (0x0008 - 0x0000)
struct UIConfigurationDraw_StateDraw_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_StateDraw_Update) == 0x000004, "Wrong alignment on UIConfigurationDraw_StateDraw_Update");
static_assert(sizeof(UIConfigurationDraw_StateDraw_Update) == 0x000008, "Wrong size on UIConfigurationDraw_StateDraw_Update");
static_assert(offsetof(UIConfigurationDraw_StateDraw_Update, DeltaTime) == 0x000000, "Member 'UIConfigurationDraw_StateDraw_Update::DeltaTime' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_StateDraw_Update, ReturnValue) == 0x000004, "Member 'UIConfigurationDraw_StateDraw_Update::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.StateDraw_UpdateOnlyCursor
// 0x0008 (0x0008 - 0x0000)
struct UIConfigurationDraw_StateDraw_UpdateOnlyCursor final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_StateDraw_UpdateOnlyCursor) == 0x000004, "Wrong alignment on UIConfigurationDraw_StateDraw_UpdateOnlyCursor");
static_assert(sizeof(UIConfigurationDraw_StateDraw_UpdateOnlyCursor) == 0x000008, "Wrong size on UIConfigurationDraw_StateDraw_UpdateOnlyCursor");
static_assert(offsetof(UIConfigurationDraw_StateDraw_UpdateOnlyCursor, DeltaTime) == 0x000000, "Member 'UIConfigurationDraw_StateDraw_UpdateOnlyCursor::DeltaTime' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_StateDraw_UpdateOnlyCursor, ReturnValue) == 0x000004, "Member 'UIConfigurationDraw_StateDraw_UpdateOnlyCursor::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.TimeWithinRangeFrame
// 0x0010 (0x0010 - 0x0000)
struct UIConfigurationDraw_TimeWithinRangeFrame final
{
public:
	float                                         NowTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_TimeWithinRangeFrame) == 0x000004, "Wrong alignment on UIConfigurationDraw_TimeWithinRangeFrame");
static_assert(sizeof(UIConfigurationDraw_TimeWithinRangeFrame) == 0x000010, "Wrong size on UIConfigurationDraw_TimeWithinRangeFrame");
static_assert(offsetof(UIConfigurationDraw_TimeWithinRangeFrame, NowTime) == 0x000000, "Member 'UIConfigurationDraw_TimeWithinRangeFrame::NowTime' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_TimeWithinRangeFrame, StartFrame) == 0x000004, "Member 'UIConfigurationDraw_TimeWithinRangeFrame::StartFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_TimeWithinRangeFrame, EndFrame) == 0x000008, "Member 'UIConfigurationDraw_TimeWithinRangeFrame::EndFrame' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_TimeWithinRangeFrame, ReturnValue) == 0x00000C, "Member 'UIConfigurationDraw_TimeWithinRangeFrame::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.UpdateAnim
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_UpdateAnim final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_UpdateAnim) == 0x000004, "Wrong alignment on UIConfigurationDraw_UpdateAnim");
static_assert(sizeof(UIConfigurationDraw_UpdateAnim) == 0x000004, "Wrong size on UIConfigurationDraw_UpdateAnim");
static_assert(offsetof(UIConfigurationDraw_UpdateAnim, DeltaTime) == 0x000000, "Member 'UIConfigurationDraw_UpdateAnim::DeltaTime' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.UpdateCloseWipe
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_UpdateCloseWipe final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_UpdateCloseWipe) == 0x000004, "Wrong alignment on UIConfigurationDraw_UpdateCloseWipe");
static_assert(sizeof(UIConfigurationDraw_UpdateCloseWipe) == 0x000004, "Wrong size on UIConfigurationDraw_UpdateCloseWipe");
static_assert(offsetof(UIConfigurationDraw_UpdateCloseWipe, InDeltaTime) == 0x000000, "Member 'UIConfigurationDraw_UpdateCloseWipe::InDeltaTime' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.UpdateInWipe
// 0x0004 (0x0004 - 0x0000)
struct UIConfigurationDraw_UpdateInWipe final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfigurationDraw_UpdateInWipe) == 0x000004, "Wrong alignment on UIConfigurationDraw_UpdateInWipe");
static_assert(sizeof(UIConfigurationDraw_UpdateInWipe) == 0x000004, "Wrong size on UIConfigurationDraw_UpdateInWipe");
static_assert(offsetof(UIConfigurationDraw_UpdateInWipe, InDeltaTime) == 0x000000, "Member 'UIConfigurationDraw_UpdateInWipe::InDeltaTime' has a wrong offset!");

// Function xrd777.UIConfigurationDraw.GetUipParameter
// 0x0018 (0x0018 - 0x0000)
struct UIConfigurationDraw_GetUipParameter final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIConfigurationDraw_GetUipParameter) == 0x000008, "Wrong alignment on UIConfigurationDraw_GetUipParameter");
static_assert(sizeof(UIConfigurationDraw_GetUipParameter) == 0x000018, "Wrong size on UIConfigurationDraw_GetUipParameter");
static_assert(offsetof(UIConfigurationDraw_GetUipParameter, Key) == 0x000000, "Member 'UIConfigurationDraw_GetUipParameter::Key' has a wrong offset!");
static_assert(offsetof(UIConfigurationDraw_GetUipParameter, ReturnValue) == 0x000010, "Member 'UIConfigurationDraw_GetUipParameter::ReturnValue' has a wrong offset!");

// Function xrd777.BPExtensionsFunctionLibrary.AttachMeshComponent
// 0x0018 (0x0018 - 0x0000)
struct BPExtensionsFunctionLibrary_AttachMeshComponent final
{
public:
	class UMeshComponent*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         AttachComponent;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPExtensionsFunctionLibrary_AttachMeshComponent) == 0x000008, "Wrong alignment on BPExtensionsFunctionLibrary_AttachMeshComponent");
static_assert(sizeof(BPExtensionsFunctionLibrary_AttachMeshComponent) == 0x000018, "Wrong size on BPExtensionsFunctionLibrary_AttachMeshComponent");
static_assert(offsetof(BPExtensionsFunctionLibrary_AttachMeshComponent, Target) == 0x000000, "Member 'BPExtensionsFunctionLibrary_AttachMeshComponent::Target' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_AttachMeshComponent, SocketName) == 0x000008, "Member 'BPExtensionsFunctionLibrary_AttachMeshComponent::SocketName' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_AttachMeshComponent, AttachComponent) == 0x000010, "Member 'BPExtensionsFunctionLibrary_AttachMeshComponent::AttachComponent' has a wrong offset!");

// Function xrd777.BPExtensionsFunctionLibrary.AttachSkeletalMesh
// 0x0020 (0x0020 - 0x0000)
struct BPExtensionsFunctionLibrary_AttachSkeletalMesh final
{
public:
	class UMeshComponent*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          AttachSKMesh;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPExtensionsFunctionLibrary_AttachSkeletalMesh) == 0x000008, "Wrong alignment on BPExtensionsFunctionLibrary_AttachSkeletalMesh");
static_assert(sizeof(BPExtensionsFunctionLibrary_AttachSkeletalMesh) == 0x000020, "Wrong size on BPExtensionsFunctionLibrary_AttachSkeletalMesh");
static_assert(offsetof(BPExtensionsFunctionLibrary_AttachSkeletalMesh, Target) == 0x000000, "Member 'BPExtensionsFunctionLibrary_AttachSkeletalMesh::Target' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_AttachSkeletalMesh, SocketName) == 0x000008, "Member 'BPExtensionsFunctionLibrary_AttachSkeletalMesh::SocketName' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_AttachSkeletalMesh, AttachSKMesh) == 0x000010, "Member 'BPExtensionsFunctionLibrary_AttachSkeletalMesh::AttachSKMesh' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_AttachSkeletalMesh, ReturnValue) == 0x000018, "Member 'BPExtensionsFunctionLibrary_AttachSkeletalMesh::ReturnValue' has a wrong offset!");

// Function xrd777.BPExtensionsFunctionLibrary.AttachStaticMesh
// 0x0020 (0x0020 - 0x0000)
struct BPExtensionsFunctionLibrary_AttachStaticMesh final
{
public:
	class UMeshComponent*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMesh*                            AttachSTMesh;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPExtensionsFunctionLibrary_AttachStaticMesh) == 0x000008, "Wrong alignment on BPExtensionsFunctionLibrary_AttachStaticMesh");
static_assert(sizeof(BPExtensionsFunctionLibrary_AttachStaticMesh) == 0x000020, "Wrong size on BPExtensionsFunctionLibrary_AttachStaticMesh");
static_assert(offsetof(BPExtensionsFunctionLibrary_AttachStaticMesh, Target) == 0x000000, "Member 'BPExtensionsFunctionLibrary_AttachStaticMesh::Target' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_AttachStaticMesh, SocketName) == 0x000008, "Member 'BPExtensionsFunctionLibrary_AttachStaticMesh::SocketName' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_AttachStaticMesh, AttachSTMesh) == 0x000010, "Member 'BPExtensionsFunctionLibrary_AttachStaticMesh::AttachSTMesh' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_AttachStaticMesh, ReturnValue) == 0x000018, "Member 'BPExtensionsFunctionLibrary_AttachStaticMesh::ReturnValue' has a wrong offset!");

// Function xrd777.BPExtensionsFunctionLibrary.ChangeSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct BPExtensionsFunctionLibrary_ChangeSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          ChangeMesh;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPExtensionsFunctionLibrary_ChangeSkeletalMesh) == 0x000008, "Wrong alignment on BPExtensionsFunctionLibrary_ChangeSkeletalMesh");
static_assert(sizeof(BPExtensionsFunctionLibrary_ChangeSkeletalMesh) == 0x000010, "Wrong size on BPExtensionsFunctionLibrary_ChangeSkeletalMesh");
static_assert(offsetof(BPExtensionsFunctionLibrary_ChangeSkeletalMesh, TargetMesh) == 0x000000, "Member 'BPExtensionsFunctionLibrary_ChangeSkeletalMesh::TargetMesh' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_ChangeSkeletalMesh, ChangeMesh) == 0x000008, "Member 'BPExtensionsFunctionLibrary_ChangeSkeletalMesh::ChangeMesh' has a wrong offset!");

// Function xrd777.BPExtensionsFunctionLibrary.CommitConsoleLog
// 0x0010 (0x0010 - 0x0000)
struct BPExtensionsFunctionLibrary_CommitConsoleLog final
{
public:
	class FString                                 InString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPExtensionsFunctionLibrary_CommitConsoleLog) == 0x000008, "Wrong alignment on BPExtensionsFunctionLibrary_CommitConsoleLog");
static_assert(sizeof(BPExtensionsFunctionLibrary_CommitConsoleLog) == 0x000010, "Wrong size on BPExtensionsFunctionLibrary_CommitConsoleLog");
static_assert(offsetof(BPExtensionsFunctionLibrary_CommitConsoleLog, InString) == 0x000000, "Member 'BPExtensionsFunctionLibrary_CommitConsoleLog::InString' has a wrong offset!");

// Function xrd777.BPExtensionsFunctionLibrary.DetachSocketAttachment
// 0x0010 (0x0010 - 0x0000)
struct BPExtensionsFunctionLibrary_DetachSocketAttachment final
{
public:
	class UMeshComponent*                         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPExtensionsFunctionLibrary_DetachSocketAttachment) == 0x000008, "Wrong alignment on BPExtensionsFunctionLibrary_DetachSocketAttachment");
static_assert(sizeof(BPExtensionsFunctionLibrary_DetachSocketAttachment) == 0x000010, "Wrong size on BPExtensionsFunctionLibrary_DetachSocketAttachment");
static_assert(offsetof(BPExtensionsFunctionLibrary_DetachSocketAttachment, Target) == 0x000000, "Member 'BPExtensionsFunctionLibrary_DetachSocketAttachment::Target' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_DetachSocketAttachment, SocketName) == 0x000008, "Member 'BPExtensionsFunctionLibrary_DetachSocketAttachment::SocketName' has a wrong offset!");

// Function xrd777.BPExtensionsFunctionLibrary.GetInverseMatrix
// 0x0040 (0x0040 - 0x0000)
struct BPExtensionsFunctionLibrary_GetInverseMatrix final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPExtensionsFunctionLibrary_GetInverseMatrix) == 0x000010, "Wrong alignment on BPExtensionsFunctionLibrary_GetInverseMatrix");
static_assert(sizeof(BPExtensionsFunctionLibrary_GetInverseMatrix) == 0x000040, "Wrong size on BPExtensionsFunctionLibrary_GetInverseMatrix");
static_assert(offsetof(BPExtensionsFunctionLibrary_GetInverseMatrix, Transform) == 0x000000, "Member 'BPExtensionsFunctionLibrary_GetInverseMatrix::Transform' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_GetInverseMatrix, ReturnValue) == 0x000030, "Member 'BPExtensionsFunctionLibrary_GetInverseMatrix::ReturnValue' has a wrong offset!");

// Function xrd777.BPExtensionsFunctionLibrary.GetScreenPercentage
// 0x0010 (0x0010 - 0x0000)
struct BPExtensionsFunctionLibrary_GetScreenPercentage final
{
public:
	class UPlanarReflectionComponent*             InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BPExtensionsFunctionLibrary_GetScreenPercentage) == 0x000008, "Wrong alignment on BPExtensionsFunctionLibrary_GetScreenPercentage");
static_assert(sizeof(BPExtensionsFunctionLibrary_GetScreenPercentage) == 0x000010, "Wrong size on BPExtensionsFunctionLibrary_GetScreenPercentage");
static_assert(offsetof(BPExtensionsFunctionLibrary_GetScreenPercentage, InComponent) == 0x000000, "Member 'BPExtensionsFunctionLibrary_GetScreenPercentage::InComponent' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_GetScreenPercentage, ReturnValue) == 0x000008, "Member 'BPExtensionsFunctionLibrary_GetScreenPercentage::ReturnValue' has a wrong offset!");

// Function xrd777.BPExtensionsFunctionLibrary.RemoveRenderMesh
// 0x0008 (0x0008 - 0x0000)
struct BPExtensionsFunctionLibrary_RemoveRenderMesh final
{
public:
	class USkeletalMeshComponent*                 TargetMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BPExtensionsFunctionLibrary_RemoveRenderMesh) == 0x000008, "Wrong alignment on BPExtensionsFunctionLibrary_RemoveRenderMesh");
static_assert(sizeof(BPExtensionsFunctionLibrary_RemoveRenderMesh) == 0x000008, "Wrong size on BPExtensionsFunctionLibrary_RemoveRenderMesh");
static_assert(offsetof(BPExtensionsFunctionLibrary_RemoveRenderMesh, TargetMesh) == 0x000000, "Member 'BPExtensionsFunctionLibrary_RemoveRenderMesh::TargetMesh' has a wrong offset!");

// Function xrd777.BPExtensionsFunctionLibrary.SetScreenPercentage
// 0x0010 (0x0010 - 0x0000)
struct BPExtensionsFunctionLibrary_SetScreenPercentage final
{
public:
	class UPlanarReflectionComponent*             InComponent;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InValue;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BPExtensionsFunctionLibrary_SetScreenPercentage) == 0x000008, "Wrong alignment on BPExtensionsFunctionLibrary_SetScreenPercentage");
static_assert(sizeof(BPExtensionsFunctionLibrary_SetScreenPercentage) == 0x000010, "Wrong size on BPExtensionsFunctionLibrary_SetScreenPercentage");
static_assert(offsetof(BPExtensionsFunctionLibrary_SetScreenPercentage, InComponent) == 0x000000, "Member 'BPExtensionsFunctionLibrary_SetScreenPercentage::InComponent' has a wrong offset!");
static_assert(offsetof(BPExtensionsFunctionLibrary_SetScreenPercentage, InValue) == 0x000008, "Member 'BPExtensionsFunctionLibrary_SetScreenPercentage::InValue' has a wrong offset!");

// Function xrd777.AssetHolder.ChildLoadComplete
// 0x0010 (0x0010 - 0x0000)
struct AssetHolder_ChildLoadComplete final
{
public:
	TArray<class UObject*>                        LoadedAssets_0;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetHolder_ChildLoadComplete) == 0x000008, "Wrong alignment on AssetHolder_ChildLoadComplete");
static_assert(sizeof(AssetHolder_ChildLoadComplete) == 0x000010, "Wrong size on AssetHolder_ChildLoadComplete");
static_assert(offsetof(AssetHolder_ChildLoadComplete, LoadedAssets_0) == 0x000000, "Member 'AssetHolder_ChildLoadComplete::LoadedAssets_0' has a wrong offset!");

// Function xrd777.AssetHolder.GetLoadedDelegate
// 0x0010 (0x0010 - 0x0000)
struct AssetHolder_GetLoadedDelegate final
{
public:
	FMulticastInlineDelegateProperty_             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AssetHolder_GetLoadedDelegate) == 0x000008, "Wrong alignment on AssetHolder_GetLoadedDelegate");
static_assert(sizeof(AssetHolder_GetLoadedDelegate) == 0x000010, "Wrong size on AssetHolder_GetLoadedDelegate");
static_assert(offsetof(AssetHolder_GetLoadedDelegate, ReturnValue) == 0x000000, "Member 'AssetHolder_GetLoadedDelegate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlBossFortuneInterface.FortuneFadein
// 0x0004 (0x0004 - 0x0000)
struct BtlBossFortuneInterface_FortuneFadein final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossFortuneInterface_FortuneFadein) == 0x000004, "Wrong alignment on BtlBossFortuneInterface_FortuneFadein");
static_assert(sizeof(BtlBossFortuneInterface_FortuneFadein) == 0x000004, "Wrong size on BtlBossFortuneInterface_FortuneFadein");
static_assert(offsetof(BtlBossFortuneInterface_FortuneFadein, AnimTime) == 0x000000, "Member 'BtlBossFortuneInterface_FortuneFadein::AnimTime' has a wrong offset!");

// Function xrd777.BtlBossFortuneInterface.FortuneFadeout
// 0x0004 (0x0004 - 0x0000)
struct BtlBossFortuneInterface_FortuneFadeout final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossFortuneInterface_FortuneFadeout) == 0x000004, "Wrong alignment on BtlBossFortuneInterface_FortuneFadeout");
static_assert(sizeof(BtlBossFortuneInterface_FortuneFadeout) == 0x000004, "Wrong size on BtlBossFortuneInterface_FortuneFadeout");
static_assert(offsetof(BtlBossFortuneInterface_FortuneFadeout, AnimTime) == 0x000000, "Member 'BtlBossFortuneInterface_FortuneFadeout::AnimTime' has a wrong offset!");

// Function xrd777.BtlBossFortuneInterface.FortuneFlowerLoopEffectFadein
// 0x0004 (0x0004 - 0x0000)
struct BtlBossFortuneInterface_FortuneFlowerLoopEffectFadein final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossFortuneInterface_FortuneFlowerLoopEffectFadein) == 0x000004, "Wrong alignment on BtlBossFortuneInterface_FortuneFlowerLoopEffectFadein");
static_assert(sizeof(BtlBossFortuneInterface_FortuneFlowerLoopEffectFadein) == 0x000004, "Wrong size on BtlBossFortuneInterface_FortuneFlowerLoopEffectFadein");
static_assert(offsetof(BtlBossFortuneInterface_FortuneFlowerLoopEffectFadein, AnimTime) == 0x000000, "Member 'BtlBossFortuneInterface_FortuneFlowerLoopEffectFadein::AnimTime' has a wrong offset!");

// Function xrd777.BtlBossFortuneInterface.FortuneFlowerLoopEffectFadeout
// 0x0004 (0x0004 - 0x0000)
struct BtlBossFortuneInterface_FortuneFlowerLoopEffectFadeout final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossFortuneInterface_FortuneFlowerLoopEffectFadeout) == 0x000004, "Wrong alignment on BtlBossFortuneInterface_FortuneFlowerLoopEffectFadeout");
static_assert(sizeof(BtlBossFortuneInterface_FortuneFlowerLoopEffectFadeout) == 0x000004, "Wrong size on BtlBossFortuneInterface_FortuneFlowerLoopEffectFadeout");
static_assert(offsetof(BtlBossFortuneInterface_FortuneFlowerLoopEffectFadeout, AnimTime) == 0x000000, "Member 'BtlBossFortuneInterface_FortuneFlowerLoopEffectFadeout::AnimTime' has a wrong offset!");

// Function xrd777.BtlBossFortuneInterface.StrengthFlowerLoopEffectFadeout
// 0x0004 (0x0004 - 0x0000)
struct BtlBossFortuneInterface_StrengthFlowerLoopEffectFadeout final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossFortuneInterface_StrengthFlowerLoopEffectFadeout) == 0x000004, "Wrong alignment on BtlBossFortuneInterface_StrengthFlowerLoopEffectFadeout");
static_assert(sizeof(BtlBossFortuneInterface_StrengthFlowerLoopEffectFadeout) == 0x000004, "Wrong size on BtlBossFortuneInterface_StrengthFlowerLoopEffectFadeout");
static_assert(offsetof(BtlBossFortuneInterface_StrengthFlowerLoopEffectFadeout, AnimTime) == 0x000000, "Member 'BtlBossFortuneInterface_StrengthFlowerLoopEffectFadeout::AnimTime' has a wrong offset!");

// Function xrd777.AnimNotify_BtlPlayMontageNotify.GetBattleNotifyName
// 0x0008 (0x0008 - 0x0000)
struct AnimNotify_BtlPlayMontageNotify_GetBattleNotifyName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotify_BtlPlayMontageNotify_GetBattleNotifyName) == 0x000004, "Wrong alignment on AnimNotify_BtlPlayMontageNotify_GetBattleNotifyName");
static_assert(sizeof(AnimNotify_BtlPlayMontageNotify_GetBattleNotifyName) == 0x000008, "Wrong size on AnimNotify_BtlPlayMontageNotify_GetBattleNotifyName");
static_assert(offsetof(AnimNotify_BtlPlayMontageNotify_GetBattleNotifyName, ReturnValue) == 0x000000, "Member 'AnimNotify_BtlPlayMontageNotify_GetBattleNotifyName::ReturnValue' has a wrong offset!");

// Function xrd777.AnimNotify_BtlPlayMontageNotify.ReplaceNotifyName
// 0x0008 (0x0008 - 0x0000)
struct AnimNotify_BtlPlayMontageNotify_ReplaceNotifyName final
{
public:
	class FName                                   NewName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimNotify_BtlPlayMontageNotify_ReplaceNotifyName) == 0x000004, "Wrong alignment on AnimNotify_BtlPlayMontageNotify_ReplaceNotifyName");
static_assert(sizeof(AnimNotify_BtlPlayMontageNotify_ReplaceNotifyName) == 0x000008, "Wrong size on AnimNotify_BtlPlayMontageNotify_ReplaceNotifyName");
static_assert(offsetof(AnimNotify_BtlPlayMontageNotify_ReplaceNotifyName, NewName) == 0x000000, "Member 'AnimNotify_BtlPlayMontageNotify_ReplaceNotifyName::NewName' has a wrong offset!");

// Function xrd777.UICmmRankUpDraw.isEndAnimStart
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUpDraw_IsEndAnimStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpDraw_IsEndAnimStart) == 0x000001, "Wrong alignment on UICmmRankUpDraw_IsEndAnimStart");
static_assert(sizeof(UICmmRankUpDraw_IsEndAnimStart) == 0x000001, "Wrong size on UICmmRankUpDraw_IsEndAnimStart");
static_assert(offsetof(UICmmRankUpDraw_IsEndAnimStart, ReturnValue) == 0x000000, "Member 'UICmmRankUpDraw_IsEndAnimStart::ReturnValue' has a wrong offset!");

// Function xrd777.UICmmRankUpDraw.UICmmDrawCard
// 0x0008 (0x0008 - 0x0000)
struct UICmmRankUpDraw_UICmmDrawCard final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpDraw_UICmmDrawCard) == 0x000004, "Wrong alignment on UICmmRankUpDraw_UICmmDrawCard");
static_assert(sizeof(UICmmRankUpDraw_UICmmDrawCard) == 0x000008, "Wrong size on UICmmRankUpDraw_UICmmDrawCard");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawCard, X) == 0x000000, "Member 'UICmmRankUpDraw_UICmmDrawCard::X' has a wrong offset!");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawCard, Y) == 0x000004, "Member 'UICmmRankUpDraw_UICmmDrawCard::Y' has a wrong offset!");

// Function xrd777.UICmmRankUpDraw.UICmmDrawEndDraw
// 0x0008 (0x0008 - 0x0000)
struct UICmmRankUpDraw_UICmmDrawEndDraw final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpDraw_UICmmDrawEndDraw) == 0x000004, "Wrong alignment on UICmmRankUpDraw_UICmmDrawEndDraw");
static_assert(sizeof(UICmmRankUpDraw_UICmmDrawEndDraw) == 0x000008, "Wrong size on UICmmRankUpDraw_UICmmDrawEndDraw");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawEndDraw, X) == 0x000000, "Member 'UICmmRankUpDraw_UICmmDrawEndDraw::X' has a wrong offset!");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawEndDraw, Y) == 0x000004, "Member 'UICmmRankUpDraw_UICmmDrawEndDraw::Y' has a wrong offset!");

// Function xrd777.UICmmRankUpDraw.UICmmDrawGradationBG
// 0x0020 (0x0020 - 0x0000)
struct UICmmRankUpDraw_UICmmDrawGradationBG final
{
public:
	struct FVector2D                              VLeftPos;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              VRightPos;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              HLeftPos;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              HRightPos;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpDraw_UICmmDrawGradationBG) == 0x000004, "Wrong alignment on UICmmRankUpDraw_UICmmDrawGradationBG");
static_assert(sizeof(UICmmRankUpDraw_UICmmDrawGradationBG) == 0x000020, "Wrong size on UICmmRankUpDraw_UICmmDrawGradationBG");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawGradationBG, VLeftPos) == 0x000000, "Member 'UICmmRankUpDraw_UICmmDrawGradationBG::VLeftPos' has a wrong offset!");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawGradationBG, VRightPos) == 0x000008, "Member 'UICmmRankUpDraw_UICmmDrawGradationBG::VRightPos' has a wrong offset!");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawGradationBG, HLeftPos) == 0x000010, "Member 'UICmmRankUpDraw_UICmmDrawGradationBG::HLeftPos' has a wrong offset!");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawGradationBG, HRightPos) == 0x000018, "Member 'UICmmRankUpDraw_UICmmDrawGradationBG::HRightPos' has a wrong offset!");

// Function xrd777.UICmmRankUpDraw.UICmmDrawLetter
// 0x0008 (0x0008 - 0x0000)
struct UICmmRankUpDraw_UICmmDrawLetter final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpDraw_UICmmDrawLetter) == 0x000004, "Wrong alignment on UICmmRankUpDraw_UICmmDrawLetter");
static_assert(sizeof(UICmmRankUpDraw_UICmmDrawLetter) == 0x000008, "Wrong size on UICmmRankUpDraw_UICmmDrawLetter");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawLetter, X) == 0x000000, "Member 'UICmmRankUpDraw_UICmmDrawLetter::X' has a wrong offset!");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawLetter, Y) == 0x000004, "Member 'UICmmRankUpDraw_UICmmDrawLetter::Y' has a wrong offset!");

// Function xrd777.UICmmRankUpDraw.UICmmDrawOkKey
// 0x0008 (0x0008 - 0x0000)
struct UICmmRankUpDraw_UICmmDrawOkKey final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpDraw_UICmmDrawOkKey) == 0x000004, "Wrong alignment on UICmmRankUpDraw_UICmmDrawOkKey");
static_assert(sizeof(UICmmRankUpDraw_UICmmDrawOkKey) == 0x000008, "Wrong size on UICmmRankUpDraw_UICmmDrawOkKey");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawOkKey, X) == 0x000000, "Member 'UICmmRankUpDraw_UICmmDrawOkKey::X' has a wrong offset!");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawOkKey, Y) == 0x000004, "Member 'UICmmRankUpDraw_UICmmDrawOkKey::Y' has a wrong offset!");

// Function xrd777.UICmmRankUpDraw.UICmmDrawRankStar
// 0x0008 (0x0008 - 0x0000)
struct UICmmRankUpDraw_UICmmDrawRankStar final
{
public:
	float                                         BasePosX;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BasePosY;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpDraw_UICmmDrawRankStar) == 0x000004, "Wrong alignment on UICmmRankUpDraw_UICmmDrawRankStar");
static_assert(sizeof(UICmmRankUpDraw_UICmmDrawRankStar) == 0x000008, "Wrong size on UICmmRankUpDraw_UICmmDrawRankStar");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawRankStar, BasePosX) == 0x000000, "Member 'UICmmRankUpDraw_UICmmDrawRankStar::BasePosX' has a wrong offset!");
static_assert(offsetof(UICmmRankUpDraw_UICmmDrawRankStar, BasePosY) == 0x000004, "Member 'UICmmRankUpDraw_UICmmDrawRankStar::BasePosY' has a wrong offset!");

// Function xrd777.UICmmRankUpDraw.UICmmReverseBG
// 0x0008 (0x0008 - 0x0000)
struct UICmmRankUpDraw_UICmmReverseBG final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpDraw_UICmmReverseBG) == 0x000004, "Wrong alignment on UICmmRankUpDraw_UICmmReverseBG");
static_assert(sizeof(UICmmRankUpDraw_UICmmReverseBG) == 0x000008, "Wrong size on UICmmRankUpDraw_UICmmReverseBG");
static_assert(offsetof(UICmmRankUpDraw_UICmmReverseBG, X) == 0x000000, "Member 'UICmmRankUpDraw_UICmmReverseBG::X' has a wrong offset!");
static_assert(offsetof(UICmmRankUpDraw_UICmmReverseBG, Y) == 0x000004, "Member 'UICmmRankUpDraw_UICmmReverseBG::Y' has a wrong offset!");

// Function xrd777.UICmmRankUpDraw.Update
// 0x0004 (0x0004 - 0x0000)
struct UICmmRankUpDraw_Update final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpDraw_Update) == 0x000004, "Wrong alignment on UICmmRankUpDraw_Update");
static_assert(sizeof(UICmmRankUpDraw_Update) == 0x000004, "Wrong size on UICmmRankUpDraw_Update");
static_assert(offsetof(UICmmRankUpDraw_Update, InDeltaTime) == 0x000000, "Member 'UICmmRankUpDraw_Update::InDeltaTime' has a wrong offset!");

// Function xrd777.AppPropsCardContainer.DestroyContainer
// 0x0001 (0x0001 - 0x0000)
struct AppPropsCardContainer_DestroyContainer final
{
public:
	bool                                          DestroyCardProps;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPropsCardContainer_DestroyContainer) == 0x000001, "Wrong alignment on AppPropsCardContainer_DestroyContainer");
static_assert(sizeof(AppPropsCardContainer_DestroyContainer) == 0x000001, "Wrong size on AppPropsCardContainer_DestroyContainer");
static_assert(offsetof(AppPropsCardContainer_DestroyContainer, DestroyCardProps) == 0x000000, "Member 'AppPropsCardContainer_DestroyContainer::DestroyCardProps' has a wrong offset!");

// Function xrd777.AppPropsCardContainer.GetCards
// 0x0010 (0x0010 - 0x0000)
struct AppPropsCardContainer_GetCards final
{
public:
	TArray<struct FAppPropsCardData>              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPropsCardContainer_GetCards) == 0x000008, "Wrong alignment on AppPropsCardContainer_GetCards");
static_assert(sizeof(AppPropsCardContainer_GetCards) == 0x000010, "Wrong size on AppPropsCardContainer_GetCards");
static_assert(offsetof(AppPropsCardContainer_GetCards, ReturnValue) == 0x000000, "Member 'AppPropsCardContainer_GetCards::ReturnValue' has a wrong offset!");

// Function xrd777.AppPropsCardContainer.LoadCards
// 0x0010 (0x0010 - 0x0000)
struct AppPropsCardContainer_LoadCards final
{
public:
	TArray<struct FAppPropsCardParam>             Params_0;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPropsCardContainer_LoadCards) == 0x000008, "Wrong alignment on AppPropsCardContainer_LoadCards");
static_assert(sizeof(AppPropsCardContainer_LoadCards) == 0x000010, "Wrong size on AppPropsCardContainer_LoadCards");
static_assert(offsetof(AppPropsCardContainer_LoadCards, Params_0) == 0x000000, "Member 'AppPropsCardContainer_LoadCards::Params_0' has a wrong offset!");

// Function xrd777.AppPropsCardContainer.SyncCards
// 0x0001 (0x0001 - 0x0000)
struct AppPropsCardContainer_SyncCards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPropsCardContainer_SyncCards) == 0x000001, "Wrong alignment on AppPropsCardContainer_SyncCards");
static_assert(sizeof(AppPropsCardContainer_SyncCards) == 0x000001, "Wrong size on AppPropsCardContainer_SyncCards");
static_assert(offsetof(AppPropsCardContainer_SyncCards, ReturnValue) == 0x000000, "Member 'AppPropsCardContainer_SyncCards::ReturnValue' has a wrong offset!");

// Function xrd777.AnimNotify_PlayEvtMultiMontage.OnFinished
// 0x0010 (0x0010 - 0x0000)
struct AnimNotify_PlayEvtMultiMontage_OnFinished final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterapt;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimNotify_PlayEvtMultiMontage_OnFinished) == 0x000008, "Wrong alignment on AnimNotify_PlayEvtMultiMontage_OnFinished");
static_assert(sizeof(AnimNotify_PlayEvtMultiMontage_OnFinished) == 0x000010, "Wrong size on AnimNotify_PlayEvtMultiMontage_OnFinished");
static_assert(offsetof(AnimNotify_PlayEvtMultiMontage_OnFinished, Montage) == 0x000000, "Member 'AnimNotify_PlayEvtMultiMontage_OnFinished::Montage' has a wrong offset!");
static_assert(offsetof(AnimNotify_PlayEvtMultiMontage_OnFinished, bInterapt) == 0x000008, "Member 'AnimNotify_PlayEvtMultiMontage_OnFinished::bInterapt' has a wrong offset!");

// Function xrd777.BtlBossErebusInterface.IsChargeMode
// 0x0001 (0x0001 - 0x0000)
struct BtlBossErebusInterface_IsChargeMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossErebusInterface_IsChargeMode) == 0x000001, "Wrong alignment on BtlBossErebusInterface_IsChargeMode");
static_assert(sizeof(BtlBossErebusInterface_IsChargeMode) == 0x000001, "Wrong size on BtlBossErebusInterface_IsChargeMode");
static_assert(offsetof(BtlBossErebusInterface_IsChargeMode, ReturnValue) == 0x000000, "Member 'BtlBossErebusInterface_IsChargeMode::ReturnValue' has a wrong offset!");

// Function xrd777.BtlBossErebusInterface.IsWaitResurrectAnimation
// 0x0001 (0x0001 - 0x0000)
struct BtlBossErebusInterface_IsWaitResurrectAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossErebusInterface_IsWaitResurrectAnimation) == 0x000001, "Wrong alignment on BtlBossErebusInterface_IsWaitResurrectAnimation");
static_assert(sizeof(BtlBossErebusInterface_IsWaitResurrectAnimation) == 0x000001, "Wrong size on BtlBossErebusInterface_IsWaitResurrectAnimation");
static_assert(offsetof(BtlBossErebusInterface_IsWaitResurrectAnimation, ReturnValue) == 0x000000, "Member 'BtlBossErebusInterface_IsWaitResurrectAnimation::ReturnValue' has a wrong offset!");

// Function xrd777.BtlBossErebusInterface.SetChargeEffect
// 0x0001 (0x0001 - 0x0000)
struct BtlBossErebusInterface_SetChargeEffect final
{
public:
	bool                                          IsShowCharageEffect;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossErebusInterface_SetChargeEffect) == 0x000001, "Wrong alignment on BtlBossErebusInterface_SetChargeEffect");
static_assert(sizeof(BtlBossErebusInterface_SetChargeEffect) == 0x000001, "Wrong size on BtlBossErebusInterface_SetChargeEffect");
static_assert(offsetof(BtlBossErebusInterface_SetChargeEffect, IsShowCharageEffect) == 0x000000, "Member 'BtlBossErebusInterface_SetChargeEffect::IsShowCharageEffect' has a wrong offset!");

// Function xrd777.BtlBossErebusInterface.SetIsInChargeMode
// 0x0001 (0x0001 - 0x0000)
struct BtlBossErebusInterface_SetIsInChargeMode final
{
public:
	bool                                          IsChargeMode;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossErebusInterface_SetIsInChargeMode) == 0x000001, "Wrong alignment on BtlBossErebusInterface_SetIsInChargeMode");
static_assert(sizeof(BtlBossErebusInterface_SetIsInChargeMode) == 0x000001, "Wrong size on BtlBossErebusInterface_SetIsInChargeMode");
static_assert(offsetof(BtlBossErebusInterface_SetIsInChargeMode, IsChargeMode) == 0x000000, "Member 'BtlBossErebusInterface_SetIsInChargeMode::IsChargeMode' has a wrong offset!");

// Function xrd777.BtlBossErebusInterface.SetWaitResurrectAnimation
// 0x0001 (0x0001 - 0x0000)
struct BtlBossErebusInterface_SetWaitResurrectAnimation final
{
public:
	bool                                          IsWaitResurrect;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossErebusInterface_SetWaitResurrectAnimation) == 0x000001, "Wrong alignment on BtlBossErebusInterface_SetWaitResurrectAnimation");
static_assert(sizeof(BtlBossErebusInterface_SetWaitResurrectAnimation) == 0x000001, "Wrong size on BtlBossErebusInterface_SetWaitResurrectAnimation");
static_assert(offsetof(BtlBossErebusInterface_SetWaitResurrectAnimation, IsWaitResurrect) == 0x000000, "Member 'BtlBossErebusInterface_SetWaitResurrectAnimation::IsWaitResurrect' has a wrong offset!");

// Function xrd777.AppActorComponent.AsAActor
// 0x0008 (0x0008 - 0x0000)
struct AppActorComponent_AsAActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppActorComponent_AsAActor) == 0x000008, "Wrong alignment on AppActorComponent_AsAActor");
static_assert(sizeof(AppActorComponent_AsAActor) == 0x000008, "Wrong size on AppActorComponent_AsAActor");
static_assert(offsetof(AppActorComponent_AsAActor, ReturnValue) == 0x000000, "Member 'AppActorComponent_AsAActor::ReturnValue' has a wrong offset!");

// Function xrd777.AppActorComponent.AsUObject
// 0x0008 (0x0008 - 0x0000)
struct AppActorComponent_AsUObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppActorComponent_AsUObject) == 0x000008, "Wrong alignment on AppActorComponent_AsUObject");
static_assert(sizeof(AppActorComponent_AsUObject) == 0x000008, "Wrong size on AppActorComponent_AsUObject");
static_assert(offsetof(AppActorComponent_AsUObject, ReturnValue) == 0x000000, "Member 'AppActorComponent_AsUObject::ReturnValue' has a wrong offset!");

// Function xrd777.AppActorComponent.EndPlay
// 0x0001 (0x0001 - 0x0000)
struct AppActorComponent_EndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppActorComponent_EndPlay) == 0x000001, "Wrong alignment on AppActorComponent_EndPlay");
static_assert(sizeof(AppActorComponent_EndPlay) == 0x000001, "Wrong size on AppActorComponent_EndPlay");
static_assert(offsetof(AppActorComponent_EndPlay, EndPlayReason) == 0x000000, "Member 'AppActorComponent_EndPlay::EndPlayReason' has a wrong offset!");

// Function xrd777.AppActorComponent.GetAppPauseFlags
// 0x0001 (0x0001 - 0x0000)
struct AppActorComponent_GetAppPauseFlags final
{
public:
	EAppPauseObjectFlag                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppActorComponent_GetAppPauseFlags) == 0x000001, "Wrong alignment on AppActorComponent_GetAppPauseFlags");
static_assert(sizeof(AppActorComponent_GetAppPauseFlags) == 0x000001, "Wrong size on AppActorComponent_GetAppPauseFlags");
static_assert(offsetof(AppActorComponent_GetAppPauseFlags, ReturnValue) == 0x000000, "Member 'AppActorComponent_GetAppPauseFlags::ReturnValue' has a wrong offset!");

// Function xrd777.FldFollowerComp.ActoinRequest
// 0x0008 (0x0008 - 0x0000)
struct FldFollowerComp_ActoinRequest final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldFollowerComp_ActoinRequest) == 0x000008, "Wrong alignment on FldFollowerComp_ActoinRequest");
static_assert(sizeof(FldFollowerComp_ActoinRequest) == 0x000008, "Wrong size on FldFollowerComp_ActoinRequest");
static_assert(offsetof(FldFollowerComp_ActoinRequest, Player) == 0x000000, "Member 'FldFollowerComp_ActoinRequest::Player' has a wrong offset!");

// Function xrd777.FldFollowerComp.CheckEnableAction
// 0x0010 (0x0010 - 0x0000)
struct FldFollowerComp_CheckEnableAction final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Check;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldFollowerComp_CheckEnableAction) == 0x000008, "Wrong alignment on FldFollowerComp_CheckEnableAction");
static_assert(sizeof(FldFollowerComp_CheckEnableAction) == 0x000010, "Wrong size on FldFollowerComp_CheckEnableAction");
static_assert(offsetof(FldFollowerComp_CheckEnableAction, Player) == 0x000000, "Member 'FldFollowerComp_CheckEnableAction::Player' has a wrong offset!");
static_assert(offsetof(FldFollowerComp_CheckEnableAction, Check) == 0x000008, "Member 'FldFollowerComp_CheckEnableAction::Check' has a wrong offset!");

// Function xrd777.FldFollowerComp.ProcInEvent
// 0x0008 (0x0008 - 0x0000)
struct FldFollowerComp_ProcInEvent final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldFollowerComp_ProcInEvent) == 0x000008, "Wrong alignment on FldFollowerComp_ProcInEvent");
static_assert(sizeof(FldFollowerComp_ProcInEvent) == 0x000008, "Wrong size on FldFollowerComp_ProcInEvent");
static_assert(offsetof(FldFollowerComp_ProcInEvent, OtherActor) == 0x000000, "Member 'FldFollowerComp_ProcInEvent::OtherActor' has a wrong offset!");

// Function xrd777.FldFollowerComp.ProcOutEvent
// 0x0008 (0x0008 - 0x0000)
struct FldFollowerComp_ProcOutEvent final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldFollowerComp_ProcOutEvent) == 0x000008, "Wrong alignment on FldFollowerComp_ProcOutEvent");
static_assert(sizeof(FldFollowerComp_ProcOutEvent) == 0x000008, "Wrong size on FldFollowerComp_ProcOutEvent");
static_assert(offsetof(FldFollowerComp_ProcOutEvent, OtherActor) == 0x000000, "Member 'FldFollowerComp_ProcOutEvent::OtherActor' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetAllMaterial
// 0x0010 (0x0010 - 0x0000)
struct AppCharBaseComp_GetAllMaterial final
{
public:
	TArray<class UMaterialInterface*>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetAllMaterial) == 0x000008, "Wrong alignment on AppCharBaseComp_GetAllMaterial");
static_assert(sizeof(AppCharBaseComp_GetAllMaterial) == 0x000010, "Wrong size on AppCharBaseComp_GetAllMaterial");
static_assert(offsetof(AppCharBaseComp_GetAllMaterial, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetAllMaterial::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetAnimMontageDefaultSlot
// 0x0008 (0x0008 - 0x0000)
struct AppCharBaseComp_GetAnimMontageDefaultSlot final
{
public:
	class UAnimMontage*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetAnimMontageDefaultSlot) == 0x000008, "Wrong alignment on AppCharBaseComp_GetAnimMontageDefaultSlot");
static_assert(sizeof(AppCharBaseComp_GetAnimMontageDefaultSlot) == 0x000008, "Wrong size on AppCharBaseComp_GetAnimMontageDefaultSlot");
static_assert(offsetof(AppCharBaseComp_GetAnimMontageDefaultSlot, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetAnimMontageDefaultSlot::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetBagAttachSocketName
// 0x0008 (0x0008 - 0x0000)
struct AppCharBaseComp_GetBagAttachSocketName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetBagAttachSocketName) == 0x000004, "Wrong alignment on AppCharBaseComp_GetBagAttachSocketName");
static_assert(sizeof(AppCharBaseComp_GetBagAttachSocketName) == 0x000008, "Wrong size on AppCharBaseComp_GetBagAttachSocketName");
static_assert(offsetof(AppCharBaseComp_GetBagAttachSocketName, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetBagAttachSocketName::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetBagClassPtr
// 0x0028 (0x0028 - 0x0000)
struct AppCharBaseComp_GetBagClassPtr final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetBagClassPtr) == 0x000008, "Wrong alignment on AppCharBaseComp_GetBagClassPtr");
static_assert(sizeof(AppCharBaseComp_GetBagClassPtr) == 0x000028, "Wrong size on AppCharBaseComp_GetBagClassPtr");
static_assert(offsetof(AppCharBaseComp_GetBagClassPtr, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetBagClassPtr::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetEffectWeapons
// 0x0010 (0x0010 - 0x0000)
struct AppCharBaseComp_GetEffectWeapons final
{
public:
	TArray<class AAppCharWeaponBase*>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetEffectWeapons) == 0x000008, "Wrong alignment on AppCharBaseComp_GetEffectWeapons");
static_assert(sizeof(AppCharBaseComp_GetEffectWeapons) == 0x000010, "Wrong size on AppCharBaseComp_GetEffectWeapons");
static_assert(offsetof(AppCharBaseComp_GetEffectWeapons, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetEffectWeapons::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetFootstepsAtom
// 0x0008 (0x0008 - 0x0000)
struct AppCharBaseComp_GetFootstepsAtom final
{
public:
	class UAppCharFootstepsAtom*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetFootstepsAtom) == 0x000008, "Wrong alignment on AppCharBaseComp_GetFootstepsAtom");
static_assert(sizeof(AppCharBaseComp_GetFootstepsAtom) == 0x000008, "Wrong size on AppCharBaseComp_GetFootstepsAtom");
static_assert(offsetof(AppCharBaseComp_GetFootstepsAtom, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetFootstepsAtom::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetWeapon
// 0x0008 (0x0008 - 0x0000)
struct AppCharBaseComp_GetWeapon final
{
public:
	class AAppCharWeaponBase*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetWeapon) == 0x000008, "Wrong alignment on AppCharBaseComp_GetWeapon");
static_assert(sizeof(AppCharBaseComp_GetWeapon) == 0x000008, "Wrong size on AppCharBaseComp_GetWeapon");
static_assert(offsetof(AppCharBaseComp_GetWeapon, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetWeapon::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetWeaponEnable
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_GetWeaponEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetWeaponEnable) == 0x000001, "Wrong alignment on AppCharBaseComp_GetWeaponEnable");
static_assert(sizeof(AppCharBaseComp_GetWeaponEnable) == 0x000001, "Wrong size on AppCharBaseComp_GetWeaponEnable");
static_assert(offsetof(AppCharBaseComp_GetWeaponEnable, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetWeaponEnable::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetWeapons
// 0x0010 (0x0010 - 0x0000)
struct AppCharBaseComp_GetWeapons final
{
public:
	TArray<class AAppCharWeaponBase*>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetWeapons) == 0x000008, "Wrong alignment on AppCharBaseComp_GetWeapons");
static_assert(sizeof(AppCharBaseComp_GetWeapons) == 0x000010, "Wrong size on AppCharBaseComp_GetWeapons");
static_assert(offsetof(AppCharBaseComp_GetWeapons, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetWeapons::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.IsBag
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_IsBag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_IsBag) == 0x000001, "Wrong alignment on AppCharBaseComp_IsBag");
static_assert(sizeof(AppCharBaseComp_IsBag) == 0x000001, "Wrong size on AppCharBaseComp_IsBag");
static_assert(offsetof(AppCharBaseComp_IsBag, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_IsBag::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.IsCostumeChenged
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_IsCostumeChenged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_IsCostumeChenged) == 0x000001, "Wrong alignment on AppCharBaseComp_IsCostumeChenged");
static_assert(sizeof(AppCharBaseComp_IsCostumeChenged) == 0x000001, "Wrong size on AppCharBaseComp_IsCostumeChenged");
static_assert(offsetof(AppCharBaseComp_IsCostumeChenged, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_IsCostumeChenged::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.IsDelayPauseAnimFromMotion
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_IsDelayPauseAnimFromMotion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_IsDelayPauseAnimFromMotion) == 0x000001, "Wrong alignment on AppCharBaseComp_IsDelayPauseAnimFromMotion");
static_assert(sizeof(AppCharBaseComp_IsDelayPauseAnimFromMotion) == 0x000001, "Wrong size on AppCharBaseComp_IsDelayPauseAnimFromMotion");
static_assert(offsetof(AppCharBaseComp_IsDelayPauseAnimFromMotion, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_IsDelayPauseAnimFromMotion::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.IsLoadWeapons
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_IsLoadWeapons final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_IsLoadWeapons) == 0x000001, "Wrong alignment on AppCharBaseComp_IsLoadWeapons");
static_assert(sizeof(AppCharBaseComp_IsLoadWeapons) == 0x000001, "Wrong size on AppCharBaseComp_IsLoadWeapons");
static_assert(offsetof(AppCharBaseComp_IsLoadWeapons, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_IsLoadWeapons::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.IsNeckAnimation
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_IsNeckAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_IsNeckAnimation) == 0x000001, "Wrong alignment on AppCharBaseComp_IsNeckAnimation");
static_assert(sizeof(AppCharBaseComp_IsNeckAnimation) == 0x000001, "Wrong size on AppCharBaseComp_IsNeckAnimation");
static_assert(offsetof(AppCharBaseComp_IsNeckAnimation, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_IsNeckAnimation::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.IsPlayAnim_DefaultSlot
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_IsPlayAnim_DefaultSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_IsPlayAnim_DefaultSlot) == 0x000001, "Wrong alignment on AppCharBaseComp_IsPlayAnim_DefaultSlot");
static_assert(sizeof(AppCharBaseComp_IsPlayAnim_DefaultSlot) == 0x000001, "Wrong size on AppCharBaseComp_IsPlayAnim_DefaultSlot");
static_assert(offsetof(AppCharBaseComp_IsPlayAnim_DefaultSlot, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_IsPlayAnim_DefaultSlot::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.IsTurnAnimation
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_IsTurnAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_IsTurnAnimation) == 0x000001, "Wrong alignment on AppCharBaseComp_IsTurnAnimation");
static_assert(sizeof(AppCharBaseComp_IsTurnAnimation) == 0x000001, "Wrong size on AppCharBaseComp_IsTurnAnimation");
static_assert(offsetof(AppCharBaseComp_IsTurnAnimation, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_IsTurnAnimation::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.Movement
// 0x0010 (0x0010 - 0x0000)
struct AppCharBaseComp_Movement final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_Movement) == 0x000004, "Wrong alignment on AppCharBaseComp_Movement");
static_assert(sizeof(AppCharBaseComp_Movement) == 0x000010, "Wrong size on AppCharBaseComp_Movement");
static_assert(offsetof(AppCharBaseComp_Movement, Location) == 0x000000, "Member 'AppCharBaseComp_Movement::Location' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_Movement, Speed) == 0x00000C, "Member 'AppCharBaseComp_Movement::Speed' has a wrong offset!");

// Function xrd777.AppCharBaseComp.OverwriteTransformMotionAttachedActor
// 0x0030 (0x0030 - 0x0000)
struct AppCharBaseComp_OverwriteTransformMotionAttachedActor final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_OverwriteTransformMotionAttachedActor) == 0x000010, "Wrong alignment on AppCharBaseComp_OverwriteTransformMotionAttachedActor");
static_assert(sizeof(AppCharBaseComp_OverwriteTransformMotionAttachedActor) == 0x000030, "Wrong size on AppCharBaseComp_OverwriteTransformMotionAttachedActor");
static_assert(offsetof(AppCharBaseComp_OverwriteTransformMotionAttachedActor, Transform) == 0x000000, "Member 'AppCharBaseComp_OverwriteTransformMotionAttachedActor::Transform' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PauseAnim
// 0x0010 (0x0010 - 0x0000)
struct AppCharBaseComp_PauseAnim final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           InMontage;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PauseAnim) == 0x000008, "Wrong alignment on AppCharBaseComp_PauseAnim");
static_assert(sizeof(AppCharBaseComp_PauseAnim) == 0x000010, "Wrong size on AppCharBaseComp_PauseAnim");
static_assert(offsetof(AppCharBaseComp_PauseAnim, bPause) == 0x000000, "Member 'AppCharBaseComp_PauseAnim::bPause' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PauseAnim, InMontage) == 0x000008, "Member 'AppCharBaseComp_PauseAnim::InMontage' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayAnim
// 0x0020 (0x0020 - 0x0000)
struct AppCharBaseComp_PlayAnim final
{
public:
	const class UAnimSequenceBase*                Anim;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppCharAnimSlot                              Slot;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayAnim) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayAnim");
static_assert(sizeof(AppCharBaseComp_PlayAnim) == 0x000020, "Wrong size on AppCharBaseComp_PlayAnim");
static_assert(offsetof(AppCharBaseComp_PlayAnim, Anim) == 0x000000, "Member 'AppCharBaseComp_PlayAnim::Anim' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim, Slot) == 0x000008, "Member 'AppCharBaseComp_PlayAnim::Slot' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim, Loop) == 0x000009, "Member 'AppCharBaseComp_PlayAnim::Loop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim, BlendInTime) == 0x00000C, "Member 'AppCharBaseComp_PlayAnim::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim, BlendOutTime) == 0x000010, "Member 'AppCharBaseComp_PlayAnim::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim, InPlayRate) == 0x000014, "Member 'AppCharBaseComp_PlayAnim::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim, ReturnValue) == 0x000018, "Member 'AppCharBaseComp_PlayAnim::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayAnim_DefaultSlot
// 0x0020 (0x0020 - 0x0000)
struct AppCharBaseComp_PlayAnim_DefaultSlot final
{
public:
	const class UAnimSequenceBase*                Anim;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayAnim_DefaultSlot) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayAnim_DefaultSlot");
static_assert(sizeof(AppCharBaseComp_PlayAnim_DefaultSlot) == 0x000020, "Wrong size on AppCharBaseComp_PlayAnim_DefaultSlot");
static_assert(offsetof(AppCharBaseComp_PlayAnim_DefaultSlot, Anim) == 0x000000, "Member 'AppCharBaseComp_PlayAnim_DefaultSlot::Anim' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_DefaultSlot, Loop) == 0x000008, "Member 'AppCharBaseComp_PlayAnim_DefaultSlot::Loop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_DefaultSlot, BlendInTime) == 0x00000C, "Member 'AppCharBaseComp_PlayAnim_DefaultSlot::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_DefaultSlot, BlendOutTime) == 0x000010, "Member 'AppCharBaseComp_PlayAnim_DefaultSlot::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_DefaultSlot, InPlayRate) == 0x000014, "Member 'AppCharBaseComp_PlayAnim_DefaultSlot::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_DefaultSlot, ReturnValue) == 0x000018, "Member 'AppCharBaseComp_PlayAnim_DefaultSlot::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayAnim_FacialSlot
// 0x0020 (0x0020 - 0x0000)
struct AppCharBaseComp_PlayAnim_FacialSlot final
{
public:
	const class UAnimSequenceBase*                Anim;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayAnim_FacialSlot) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayAnim_FacialSlot");
static_assert(sizeof(AppCharBaseComp_PlayAnim_FacialSlot) == 0x000020, "Wrong size on AppCharBaseComp_PlayAnim_FacialSlot");
static_assert(offsetof(AppCharBaseComp_PlayAnim_FacialSlot, Anim) == 0x000000, "Member 'AppCharBaseComp_PlayAnim_FacialSlot::Anim' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_FacialSlot, IsLoop) == 0x000008, "Member 'AppCharBaseComp_PlayAnim_FacialSlot::IsLoop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_FacialSlot, BlendInTime) == 0x00000C, "Member 'AppCharBaseComp_PlayAnim_FacialSlot::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_FacialSlot, BlendOutTime) == 0x000010, "Member 'AppCharBaseComp_PlayAnim_FacialSlot::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_FacialSlot, InPlayRate) == 0x000014, "Member 'AppCharBaseComp_PlayAnim_FacialSlot::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_FacialSlot, ReturnValue) == 0x000018, "Member 'AppCharBaseComp_PlayAnim_FacialSlot::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayAnim_HaveBagSlot
// 0x0028 (0x0028 - 0x0000)
struct AppCharBaseComp_PlayAnim_HaveBagSlot final
{
public:
	const class UAnimSequenceBase*                Anim;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SetSlotName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayAnim_HaveBagSlot) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayAnim_HaveBagSlot");
static_assert(sizeof(AppCharBaseComp_PlayAnim_HaveBagSlot) == 0x000028, "Wrong size on AppCharBaseComp_PlayAnim_HaveBagSlot");
static_assert(offsetof(AppCharBaseComp_PlayAnim_HaveBagSlot, Anim) == 0x000000, "Member 'AppCharBaseComp_PlayAnim_HaveBagSlot::Anim' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_HaveBagSlot, SetSlotName) == 0x000008, "Member 'AppCharBaseComp_PlayAnim_HaveBagSlot::SetSlotName' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_HaveBagSlot, IsLoop) == 0x000010, "Member 'AppCharBaseComp_PlayAnim_HaveBagSlot::IsLoop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_HaveBagSlot, BlendInTime) == 0x000014, "Member 'AppCharBaseComp_PlayAnim_HaveBagSlot::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_HaveBagSlot, BlendOutTime) == 0x000018, "Member 'AppCharBaseComp_PlayAnim_HaveBagSlot::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_HaveBagSlot, InPlayRate) == 0x00001C, "Member 'AppCharBaseComp_PlayAnim_HaveBagSlot::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_HaveBagSlot, ReturnValue) == 0x000020, "Member 'AppCharBaseComp_PlayAnim_HaveBagSlot::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayAnim_NeckSlot
// 0x0020 (0x0020 - 0x0000)
struct AppCharBaseComp_PlayAnim_NeckSlot final
{
public:
	const class UAnimSequenceBase*                Anim;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayAnim_NeckSlot) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayAnim_NeckSlot");
static_assert(sizeof(AppCharBaseComp_PlayAnim_NeckSlot) == 0x000020, "Wrong size on AppCharBaseComp_PlayAnim_NeckSlot");
static_assert(offsetof(AppCharBaseComp_PlayAnim_NeckSlot, Anim) == 0x000000, "Member 'AppCharBaseComp_PlayAnim_NeckSlot::Anim' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_NeckSlot, IsLoop) == 0x000008, "Member 'AppCharBaseComp_PlayAnim_NeckSlot::IsLoop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_NeckSlot, BlendInTime) == 0x00000C, "Member 'AppCharBaseComp_PlayAnim_NeckSlot::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_NeckSlot, BlendOutTime) == 0x000010, "Member 'AppCharBaseComp_PlayAnim_NeckSlot::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_NeckSlot, InPlayRate) == 0x000014, "Member 'AppCharBaseComp_PlayAnim_NeckSlot::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_NeckSlot, ReturnValue) == 0x000018, "Member 'AppCharBaseComp_PlayAnim_NeckSlot::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayAnim_Pack
// 0x0020 (0x0020 - 0x0000)
struct AppCharBaseComp_PlayAnim_Pack final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayAnim_Pack) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayAnim_Pack");
static_assert(sizeof(AppCharBaseComp_PlayAnim_Pack) == 0x000020, "Wrong size on AppCharBaseComp_PlayAnim_Pack");
static_assert(offsetof(AppCharBaseComp_PlayAnim_Pack, ID) == 0x000000, "Member 'AppCharBaseComp_PlayAnim_Pack::ID' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_Pack, Loop) == 0x000004, "Member 'AppCharBaseComp_PlayAnim_Pack::Loop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_Pack, BlendInTime) == 0x000008, "Member 'AppCharBaseComp_PlayAnim_Pack::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_Pack, BlendOutTime) == 0x00000C, "Member 'AppCharBaseComp_PlayAnim_Pack::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_Pack, InPlayRate) == 0x000010, "Member 'AppCharBaseComp_PlayAnim_Pack::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_Pack, ReturnValue) == 0x000018, "Member 'AppCharBaseComp_PlayAnim_Pack::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayAnim_TurnSlot
// 0x0028 (0x0028 - 0x0000)
struct AppCharBaseComp_PlayAnim_TurnSlot final
{
public:
	const class UAnimSequenceBase*                Anim;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InBlendInTime;                                     // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendOutTime;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendWeight;                                     // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayAnim_TurnSlot) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayAnim_TurnSlot");
static_assert(sizeof(AppCharBaseComp_PlayAnim_TurnSlot) == 0x000028, "Wrong size on AppCharBaseComp_PlayAnim_TurnSlot");
static_assert(offsetof(AppCharBaseComp_PlayAnim_TurnSlot, Anim) == 0x000000, "Member 'AppCharBaseComp_PlayAnim_TurnSlot::Anim' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_TurnSlot, IsLoop) == 0x000008, "Member 'AppCharBaseComp_PlayAnim_TurnSlot::IsLoop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_TurnSlot, InBlendInTime) == 0x00000C, "Member 'AppCharBaseComp_PlayAnim_TurnSlot::InBlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_TurnSlot, InBlendOutTime) == 0x000010, "Member 'AppCharBaseComp_PlayAnim_TurnSlot::InBlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_TurnSlot, InPlayRate) == 0x000014, "Member 'AppCharBaseComp_PlayAnim_TurnSlot::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_TurnSlot, InBlendWeight) == 0x000018, "Member 'AppCharBaseComp_PlayAnim_TurnSlot::InBlendWeight' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnim_TurnSlot, ReturnValue) == 0x000020, "Member 'AppCharBaseComp_PlayAnim_TurnSlot::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayAnimationPackMotionAttachedProps
// 0x001C (0x001C - 0x0000)
struct AppCharBaseComp_PlayAnimationPackMotionAttachedProps final
{
public:
	int32                                         InAnimePackIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPlayType;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendInTime;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendOutTime;                                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InAnimSlotName;                                    // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayAnimationPackMotionAttachedProps) == 0x000004, "Wrong alignment on AppCharBaseComp_PlayAnimationPackMotionAttachedProps");
static_assert(sizeof(AppCharBaseComp_PlayAnimationPackMotionAttachedProps) == 0x00001C, "Wrong size on AppCharBaseComp_PlayAnimationPackMotionAttachedProps");
static_assert(offsetof(AppCharBaseComp_PlayAnimationPackMotionAttachedProps, InAnimePackIndex) == 0x000000, "Member 'AppCharBaseComp_PlayAnimationPackMotionAttachedProps::InAnimePackIndex' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnimationPackMotionAttachedProps, InPlayType) == 0x000004, "Member 'AppCharBaseComp_PlayAnimationPackMotionAttachedProps::InPlayType' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnimationPackMotionAttachedProps, InBlendInTime) == 0x000008, "Member 'AppCharBaseComp_PlayAnimationPackMotionAttachedProps::InBlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnimationPackMotionAttachedProps, InBlendOutTime) == 0x00000C, "Member 'AppCharBaseComp_PlayAnimationPackMotionAttachedProps::InBlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnimationPackMotionAttachedProps, InPlayRate) == 0x000010, "Member 'AppCharBaseComp_PlayAnimationPackMotionAttachedProps::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnimationPackMotionAttachedProps, InAnimSlotName) == 0x000014, "Member 'AppCharBaseComp_PlayAnimationPackMotionAttachedProps::InAnimSlotName' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayAnimBagSlot_Pack
// 0x0020 (0x0020 - 0x0000)
struct AppCharBaseComp_PlayAnimBagSlot_Pack final
{
public:
	int32                                         AnimId;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayAnimBagSlot_Pack) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayAnimBagSlot_Pack");
static_assert(sizeof(AppCharBaseComp_PlayAnimBagSlot_Pack) == 0x000020, "Wrong size on AppCharBaseComp_PlayAnimBagSlot_Pack");
static_assert(offsetof(AppCharBaseComp_PlayAnimBagSlot_Pack, AnimId) == 0x000000, "Member 'AppCharBaseComp_PlayAnimBagSlot_Pack::AnimId' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnimBagSlot_Pack, IsLoop) == 0x000004, "Member 'AppCharBaseComp_PlayAnimBagSlot_Pack::IsLoop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnimBagSlot_Pack, BlendInTime) == 0x000008, "Member 'AppCharBaseComp_PlayAnimBagSlot_Pack::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnimBagSlot_Pack, BlendOutTime) == 0x00000C, "Member 'AppCharBaseComp_PlayAnimBagSlot_Pack::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnimBagSlot_Pack, InPlayRate) == 0x000010, "Member 'AppCharBaseComp_PlayAnimBagSlot_Pack::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayAnimBagSlot_Pack, ReturnValue) == 0x000018, "Member 'AppCharBaseComp_PlayAnimBagSlot_Pack::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayFaceAnimation
// 0x0018 (0x0018 - 0x0000)
struct AppCharBaseComp_PlayFaceAnimation final
{
public:
	EAppCharFaceAnimID                            FaceAnimID;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayFaceAnimation) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayFaceAnimation");
static_assert(sizeof(AppCharBaseComp_PlayFaceAnimation) == 0x000018, "Wrong size on AppCharBaseComp_PlayFaceAnimation");
static_assert(offsetof(AppCharBaseComp_PlayFaceAnimation, FaceAnimID) == 0x000000, "Member 'AppCharBaseComp_PlayFaceAnimation::FaceAnimID' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayFaceAnimation, IsLoop) == 0x000001, "Member 'AppCharBaseComp_PlayFaceAnimation::IsLoop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayFaceAnimation, BlendInTime) == 0x000004, "Member 'AppCharBaseComp_PlayFaceAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayFaceAnimation, BlendOutTime) == 0x000008, "Member 'AppCharBaseComp_PlayFaceAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayFaceAnimation, InPlayRate) == 0x00000C, "Member 'AppCharBaseComp_PlayFaceAnimation::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayFaceAnimation, ReturnValue) == 0x000010, "Member 'AppCharBaseComp_PlayFaceAnimation::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayFaceAnimIndex
// 0x0020 (0x0020 - 0x0000)
struct AppCharBaseComp_PlayFaceAnimIndex final
{
public:
	int32                                         AnimIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayFaceAnimIndex) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayFaceAnimIndex");
static_assert(sizeof(AppCharBaseComp_PlayFaceAnimIndex) == 0x000020, "Wrong size on AppCharBaseComp_PlayFaceAnimIndex");
static_assert(offsetof(AppCharBaseComp_PlayFaceAnimIndex, AnimIndex) == 0x000000, "Member 'AppCharBaseComp_PlayFaceAnimIndex::AnimIndex' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayFaceAnimIndex, IsLoop) == 0x000004, "Member 'AppCharBaseComp_PlayFaceAnimIndex::IsLoop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayFaceAnimIndex, BlendInTime) == 0x000008, "Member 'AppCharBaseComp_PlayFaceAnimIndex::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayFaceAnimIndex, BlendOutTime) == 0x00000C, "Member 'AppCharBaseComp_PlayFaceAnimIndex::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayFaceAnimIndex, InPlayRate) == 0x000010, "Member 'AppCharBaseComp_PlayFaceAnimIndex::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayFaceAnimIndex, ReturnValue) == 0x000018, "Member 'AppCharBaseComp_PlayFaceAnimIndex::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayHaveBagAnimation
// 0x0018 (0x0018 - 0x0000)
struct AppCharBaseComp_PlayHaveBagAnimation final
{
public:
	EAppCharBagAnimType                           AnimType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayHaveBagAnimation) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayHaveBagAnimation");
static_assert(sizeof(AppCharBaseComp_PlayHaveBagAnimation) == 0x000018, "Wrong size on AppCharBaseComp_PlayHaveBagAnimation");
static_assert(offsetof(AppCharBaseComp_PlayHaveBagAnimation, AnimType) == 0x000000, "Member 'AppCharBaseComp_PlayHaveBagAnimation::AnimType' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayHaveBagAnimation, IsLoop) == 0x000001, "Member 'AppCharBaseComp_PlayHaveBagAnimation::IsLoop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayHaveBagAnimation, BlendInTime) == 0x000004, "Member 'AppCharBaseComp_PlayHaveBagAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayHaveBagAnimation, BlendOutTime) == 0x000008, "Member 'AppCharBaseComp_PlayHaveBagAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayHaveBagAnimation, InPlayRate) == 0x00000C, "Member 'AppCharBaseComp_PlayHaveBagAnimation::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayHaveBagAnimation, ReturnValue) == 0x000010, "Member 'AppCharBaseComp_PlayHaveBagAnimation::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayNeckAnimation
// 0x0020 (0x0020 - 0x0000)
struct AppCharBaseComp_PlayNeckAnimation final
{
public:
	int32                                         AnimIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayNeckAnimation) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayNeckAnimation");
static_assert(sizeof(AppCharBaseComp_PlayNeckAnimation) == 0x000020, "Wrong size on AppCharBaseComp_PlayNeckAnimation");
static_assert(offsetof(AppCharBaseComp_PlayNeckAnimation, AnimIndex) == 0x000000, "Member 'AppCharBaseComp_PlayNeckAnimation::AnimIndex' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayNeckAnimation, IsLoop) == 0x000004, "Member 'AppCharBaseComp_PlayNeckAnimation::IsLoop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayNeckAnimation, BlendInTime) == 0x000008, "Member 'AppCharBaseComp_PlayNeckAnimation::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayNeckAnimation, BlendOutTime) == 0x00000C, "Member 'AppCharBaseComp_PlayNeckAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayNeckAnimation, InPlayRate) == 0x000010, "Member 'AppCharBaseComp_PlayNeckAnimation::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayNeckAnimation, ReturnValue) == 0x000018, "Member 'AppCharBaseComp_PlayNeckAnimation::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.PlayTurnAnimation
// 0x0020 (0x0020 - 0x0000)
struct AppCharBaseComp_PlayTurnAnimation final
{
public:
	int32                                         AnimIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InBlendInTime;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendOutTime;                                    // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InBlendWeight;                                     // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_PlayTurnAnimation) == 0x000008, "Wrong alignment on AppCharBaseComp_PlayTurnAnimation");
static_assert(sizeof(AppCharBaseComp_PlayTurnAnimation) == 0x000020, "Wrong size on AppCharBaseComp_PlayTurnAnimation");
static_assert(offsetof(AppCharBaseComp_PlayTurnAnimation, AnimIndex) == 0x000000, "Member 'AppCharBaseComp_PlayTurnAnimation::AnimIndex' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayTurnAnimation, IsLoop) == 0x000004, "Member 'AppCharBaseComp_PlayTurnAnimation::IsLoop' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayTurnAnimation, InBlendInTime) == 0x000008, "Member 'AppCharBaseComp_PlayTurnAnimation::InBlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayTurnAnimation, InBlendOutTime) == 0x00000C, "Member 'AppCharBaseComp_PlayTurnAnimation::InBlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayTurnAnimation, InPlayRate) == 0x000010, "Member 'AppCharBaseComp_PlayTurnAnimation::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayTurnAnimation, InBlendWeight) == 0x000014, "Member 'AppCharBaseComp_PlayTurnAnimation::InBlendWeight' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_PlayTurnAnimation, ReturnValue) == 0x000018, "Member 'AppCharBaseComp_PlayTurnAnimation::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.RequestPauseAnimFromMotionIMD
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_RequestPauseAnimFromMotionIMD final
{
public:
	bool                                          IsLookAt;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_RequestPauseAnimFromMotionIMD) == 0x000001, "Wrong alignment on AppCharBaseComp_RequestPauseAnimFromMotionIMD");
static_assert(sizeof(AppCharBaseComp_RequestPauseAnimFromMotionIMD) == 0x000001, "Wrong size on AppCharBaseComp_RequestPauseAnimFromMotionIMD");
static_assert(offsetof(AppCharBaseComp_RequestPauseAnimFromMotionIMD, IsLookAt) == 0x000000, "Member 'AppCharBaseComp_RequestPauseAnimFromMotionIMD::IsLookAt' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetAnimMontageDefaultSlot
// 0x0008 (0x0008 - 0x0000)
struct AppCharBaseComp_SetAnimMontageDefaultSlot final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetAnimMontageDefaultSlot) == 0x000008, "Wrong alignment on AppCharBaseComp_SetAnimMontageDefaultSlot");
static_assert(sizeof(AppCharBaseComp_SetAnimMontageDefaultSlot) == 0x000008, "Wrong size on AppCharBaseComp_SetAnimMontageDefaultSlot");
static_assert(offsetof(AppCharBaseComp_SetAnimMontageDefaultSlot, AnimMontage) == 0x000000, "Member 'AppCharBaseComp_SetAnimMontageDefaultSlot::AnimMontage' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetAnimPackID
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_SetAnimPackID final
{
public:
	EAnimPackID                                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetAnimPackID) == 0x000001, "Wrong alignment on AppCharBaseComp_SetAnimPackID");
static_assert(sizeof(AppCharBaseComp_SetAnimPackID) == 0x000001, "Wrong size on AppCharBaseComp_SetAnimPackID");
static_assert(offsetof(AppCharBaseComp_SetAnimPackID, Value) == 0x000000, "Member 'AppCharBaseComp_SetAnimPackID::Value' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetBag
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_SetBag final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetBag) == 0x000001, "Wrong alignment on AppCharBaseComp_SetBag");
static_assert(sizeof(AppCharBaseComp_SetBag) == 0x000001, "Wrong size on AppCharBaseComp_SetBag");
static_assert(offsetof(AppCharBaseComp_SetBag, Enable) == 0x000000, "Member 'AppCharBaseComp_SetBag::Enable' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetCategoryID
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_SetCategoryID final
{
public:
	EAppCharCategoryType                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetCategoryID) == 0x000001, "Wrong alignment on AppCharBaseComp_SetCategoryID");
static_assert(sizeof(AppCharBaseComp_SetCategoryID) == 0x000001, "Wrong size on AppCharBaseComp_SetCategoryID");
static_assert(offsetof(AppCharBaseComp_SetCategoryID, Value) == 0x000000, "Member 'AppCharBaseComp_SetCategoryID::Value' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetCostumeID
// 0x0004 (0x0004 - 0x0000)
struct AppCharBaseComp_SetCostumeID final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetCostumeID) == 0x000004, "Wrong alignment on AppCharBaseComp_SetCostumeID");
static_assert(sizeof(AppCharBaseComp_SetCostumeID) == 0x000004, "Wrong size on AppCharBaseComp_SetCostumeID");
static_assert(offsetof(AppCharBaseComp_SetCostumeID, Value) == 0x000000, "Member 'AppCharBaseComp_SetCostumeID::Value' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetFadeSettingFromMotion
// 0x000C (0x000C - 0x0000)
struct AppCharBaseComp_SetFadeSettingFromMotion final
{
public:
	int32                                         FadeType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FadeFrame;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FadePattern;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetFadeSettingFromMotion) == 0x000004, "Wrong alignment on AppCharBaseComp_SetFadeSettingFromMotion");
static_assert(sizeof(AppCharBaseComp_SetFadeSettingFromMotion) == 0x00000C, "Wrong size on AppCharBaseComp_SetFadeSettingFromMotion");
static_assert(offsetof(AppCharBaseComp_SetFadeSettingFromMotion, FadeType) == 0x000000, "Member 'AppCharBaseComp_SetFadeSettingFromMotion::FadeType' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_SetFadeSettingFromMotion, FadeFrame) == 0x000004, "Member 'AppCharBaseComp_SetFadeSettingFromMotion::FadeFrame' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_SetFadeSettingFromMotion, FadePattern) == 0x000008, "Member 'AppCharBaseComp_SetFadeSettingFromMotion::FadePattern' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetIndexID
// 0x0004 (0x0004 - 0x0000)
struct AppCharBaseComp_SetIndexID final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetIndexID) == 0x000004, "Wrong alignment on AppCharBaseComp_SetIndexID");
static_assert(sizeof(AppCharBaseComp_SetIndexID) == 0x000004, "Wrong size on AppCharBaseComp_SetIndexID");
static_assert(offsetof(AppCharBaseComp_SetIndexID, Value) == 0x000000, "Member 'AppCharBaseComp_SetIndexID::Value' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetMotionAttachedActor
// 0x0008 (0x0008 - 0x0000)
struct AppCharBaseComp_SetMotionAttachedActor final
{
public:
	class AActor*                                 AttachedActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetMotionAttachedActor) == 0x000008, "Wrong alignment on AppCharBaseComp_SetMotionAttachedActor");
static_assert(sizeof(AppCharBaseComp_SetMotionAttachedActor) == 0x000008, "Wrong size on AppCharBaseComp_SetMotionAttachedActor");
static_assert(offsetof(AppCharBaseComp_SetMotionAttachedActor, AttachedActor) == 0x000000, "Member 'AppCharBaseComp_SetMotionAttachedActor::AttachedActor' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetMotionAttachedActorCore
// 0x0010 (0x0010 - 0x0000)
struct AppCharBaseComp_SetMotionAttachedActorCore final
{
public:
	class AActor*                                 AttachedActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachedSocketName;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetMotionAttachedActorCore) == 0x000008, "Wrong alignment on AppCharBaseComp_SetMotionAttachedActorCore");
static_assert(sizeof(AppCharBaseComp_SetMotionAttachedActorCore) == 0x000010, "Wrong size on AppCharBaseComp_SetMotionAttachedActorCore");
static_assert(offsetof(AppCharBaseComp_SetMotionAttachedActorCore, AttachedActor) == 0x000000, "Member 'AppCharBaseComp_SetMotionAttachedActorCore::AttachedActor' has a wrong offset!");
static_assert(offsetof(AppCharBaseComp_SetMotionAttachedActorCore, AttachedSocketName) == 0x000008, "Member 'AppCharBaseComp_SetMotionAttachedActorCore::AttachedSocketName' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetShoes
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_SetShoes final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetShoes) == 0x000001, "Wrong alignment on AppCharBaseComp_SetShoes");
static_assert(sizeof(AppCharBaseComp_SetShoes) == 0x000001, "Wrong size on AppCharBaseComp_SetShoes");
static_assert(offsetof(AppCharBaseComp_SetShoes, Enable) == 0x000000, "Member 'AppCharBaseComp_SetShoes::Enable' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetShoesId
// 0x0004 (0x0004 - 0x0000)
struct AppCharBaseComp_SetShoesId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetShoesId) == 0x000004, "Wrong alignment on AppCharBaseComp_SetShoesId");
static_assert(sizeof(AppCharBaseComp_SetShoesId) == 0x000004, "Wrong size on AppCharBaseComp_SetShoesId");
static_assert(offsetof(AppCharBaseComp_SetShoesId, ID) == 0x000000, "Member 'AppCharBaseComp_SetShoesId::ID' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetWeaponId
// 0x0004 (0x0004 - 0x0000)
struct AppCharBaseComp_SetWeaponId final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetWeaponId) == 0x000004, "Wrong alignment on AppCharBaseComp_SetWeaponId");
static_assert(sizeof(AppCharBaseComp_SetWeaponId) == 0x000004, "Wrong size on AppCharBaseComp_SetWeaponId");
static_assert(offsetof(AppCharBaseComp_SetWeaponId, Value) == 0x000000, "Member 'AppCharBaseComp_SetWeaponId::Value' has a wrong offset!");

// Function xrd777.AppCharBaseComp.SetWeaponType
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_SetWeaponType final
{
public:
	EAppCharWeaponType                            Value;                                             // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_SetWeaponType) == 0x000001, "Wrong alignment on AppCharBaseComp_SetWeaponType");
static_assert(sizeof(AppCharBaseComp_SetWeaponType) == 0x000001, "Wrong size on AppCharBaseComp_SetWeaponType");
static_assert(offsetof(AppCharBaseComp_SetWeaponType, Value) == 0x000000, "Member 'AppCharBaseComp_SetWeaponType::Value' has a wrong offset!");

// Function xrd777.AppCharBaseComp.StopAnim_DefaultSlot
// 0x0004 (0x0004 - 0x0000)
struct AppCharBaseComp_StopAnim_DefaultSlot final
{
public:
	float                                         InBlendOutTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_StopAnim_DefaultSlot) == 0x000004, "Wrong alignment on AppCharBaseComp_StopAnim_DefaultSlot");
static_assert(sizeof(AppCharBaseComp_StopAnim_DefaultSlot) == 0x000004, "Wrong size on AppCharBaseComp_StopAnim_DefaultSlot");
static_assert(offsetof(AppCharBaseComp_StopAnim_DefaultSlot, InBlendOutTime) == 0x000000, "Member 'AppCharBaseComp_StopAnim_DefaultSlot::InBlendOutTime' has a wrong offset!");

// Function xrd777.AppCharBaseComp.StopFaceAnimation
// 0x0004 (0x0004 - 0x0000)
struct AppCharBaseComp_StopFaceAnimation final
{
public:
	float                                         InBlendOutTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_StopFaceAnimation) == 0x000004, "Wrong alignment on AppCharBaseComp_StopFaceAnimation");
static_assert(sizeof(AppCharBaseComp_StopFaceAnimation) == 0x000004, "Wrong size on AppCharBaseComp_StopFaceAnimation");
static_assert(offsetof(AppCharBaseComp_StopFaceAnimation, InBlendOutTime) == 0x000000, "Member 'AppCharBaseComp_StopFaceAnimation::InBlendOutTime' has a wrong offset!");

// Function xrd777.AppCharBaseComp.StopHaveBagAnimation
// 0x0004 (0x0004 - 0x0000)
struct AppCharBaseComp_StopHaveBagAnimation final
{
public:
	float                                         InBlendOutTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_StopHaveBagAnimation) == 0x000004, "Wrong alignment on AppCharBaseComp_StopHaveBagAnimation");
static_assert(sizeof(AppCharBaseComp_StopHaveBagAnimation) == 0x000004, "Wrong size on AppCharBaseComp_StopHaveBagAnimation");
static_assert(offsetof(AppCharBaseComp_StopHaveBagAnimation, InBlendOutTime) == 0x000000, "Member 'AppCharBaseComp_StopHaveBagAnimation::InBlendOutTime' has a wrong offset!");

// Function xrd777.AppCharBaseComp.StopNeckAnimation
// 0x0004 (0x0004 - 0x0000)
struct AppCharBaseComp_StopNeckAnimation final
{
public:
	float                                         InBlendOutTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_StopNeckAnimation) == 0x000004, "Wrong alignment on AppCharBaseComp_StopNeckAnimation");
static_assert(sizeof(AppCharBaseComp_StopNeckAnimation) == 0x000004, "Wrong size on AppCharBaseComp_StopNeckAnimation");
static_assert(offsetof(AppCharBaseComp_StopNeckAnimation, InBlendOutTime) == 0x000000, "Member 'AppCharBaseComp_StopNeckAnimation::InBlendOutTime' has a wrong offset!");

// Function xrd777.AppCharBaseComp.StopTurnAnimation
// 0x0004 (0x0004 - 0x0000)
struct AppCharBaseComp_StopTurnAnimation final
{
public:
	float                                         InBlendOutTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_StopTurnAnimation) == 0x000004, "Wrong alignment on AppCharBaseComp_StopTurnAnimation");
static_assert(sizeof(AppCharBaseComp_StopTurnAnimation) == 0x000004, "Wrong size on AppCharBaseComp_StopTurnAnimation");
static_assert(offsetof(AppCharBaseComp_StopTurnAnimation, InBlendOutTime) == 0x000000, "Member 'AppCharBaseComp_StopTurnAnimation::InBlendOutTime' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetAnimPackID
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_GetAnimPackID final
{
public:
	EAnimPackID                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetAnimPackID) == 0x000001, "Wrong alignment on AppCharBaseComp_GetAnimPackID");
static_assert(sizeof(AppCharBaseComp_GetAnimPackID) == 0x000001, "Wrong size on AppCharBaseComp_GetAnimPackID");
static_assert(offsetof(AppCharBaseComp_GetAnimPackID, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetAnimPackID::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetCategoryID
// 0x0001 (0x0001 - 0x0000)
struct AppCharBaseComp_GetCategoryID final
{
public:
	EAppCharCategoryType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetCategoryID) == 0x000001, "Wrong alignment on AppCharBaseComp_GetCategoryID");
static_assert(sizeof(AppCharBaseComp_GetCategoryID) == 0x000001, "Wrong size on AppCharBaseComp_GetCategoryID");
static_assert(offsetof(AppCharBaseComp_GetCategoryID, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetCategoryID::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetCostumeID
// 0x0004 (0x0004 - 0x0000)
struct AppCharBaseComp_GetCostumeID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetCostumeID) == 0x000004, "Wrong alignment on AppCharBaseComp_GetCostumeID");
static_assert(sizeof(AppCharBaseComp_GetCostumeID) == 0x000004, "Wrong size on AppCharBaseComp_GetCostumeID");
static_assert(offsetof(AppCharBaseComp_GetCostumeID, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetCostumeID::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetCostumeMesh
// 0x0008 (0x0008 - 0x0000)
struct AppCharBaseComp_GetCostumeMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetCostumeMesh) == 0x000008, "Wrong alignment on AppCharBaseComp_GetCostumeMesh");
static_assert(sizeof(AppCharBaseComp_GetCostumeMesh) == 0x000008, "Wrong size on AppCharBaseComp_GetCostumeMesh");
static_assert(offsetof(AppCharBaseComp_GetCostumeMesh, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetCostumeMesh::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetFaceMesh
// 0x0008 (0x0008 - 0x0000)
struct AppCharBaseComp_GetFaceMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetFaceMesh) == 0x000008, "Wrong alignment on AppCharBaseComp_GetFaceMesh");
static_assert(sizeof(AppCharBaseComp_GetFaceMesh) == 0x000008, "Wrong size on AppCharBaseComp_GetFaceMesh");
static_assert(offsetof(AppCharBaseComp_GetFaceMesh, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetFaceMesh::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetHairMesh
// 0x0008 (0x0008 - 0x0000)
struct AppCharBaseComp_GetHairMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetHairMesh) == 0x000008, "Wrong alignment on AppCharBaseComp_GetHairMesh");
static_assert(sizeof(AppCharBaseComp_GetHairMesh) == 0x000008, "Wrong size on AppCharBaseComp_GetHairMesh");
static_assert(offsetof(AppCharBaseComp_GetHairMesh, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetHairMesh::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetIndexID
// 0x0004 (0x0004 - 0x0000)
struct AppCharBaseComp_GetIndexID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetIndexID) == 0x000004, "Wrong alignment on AppCharBaseComp_GetIndexID");
static_assert(sizeof(AppCharBaseComp_GetIndexID) == 0x000004, "Wrong size on AppCharBaseComp_GetIndexID");
static_assert(offsetof(AppCharBaseComp_GetIndexID, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetIndexID::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharBaseComp.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct AppCharBaseComp_GetMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharBaseComp_GetMesh) == 0x000008, "Wrong alignment on AppCharBaseComp_GetMesh");
static_assert(sizeof(AppCharBaseComp_GetMesh) == 0x000008, "Wrong size on AppCharBaseComp_GetMesh");
static_assert(offsetof(AppCharBaseComp_GetMesh, ReturnValue) == 0x000000, "Member 'AppCharBaseComp_GetMesh::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharacterComp.SetVisibleAttachComponent
// 0x0001 (0x0001 - 0x0000)
struct AppCharacterComp_SetVisibleAttachComponent final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharacterComp_SetVisibleAttachComponent) == 0x000001, "Wrong alignment on AppCharacterComp_SetVisibleAttachComponent");
static_assert(sizeof(AppCharacterComp_SetVisibleAttachComponent) == 0x000001, "Wrong size on AppCharacterComp_SetVisibleAttachComponent");
static_assert(offsetof(AppCharacterComp_SetVisibleAttachComponent, Visible) == 0x000000, "Member 'AppCharacterComp_SetVisibleAttachComponent::Visible' has a wrong offset!");

// Function xrd777.AppCharacterComp.GetCapsule
// 0x0008 (0x0008 - 0x0000)
struct AppCharacterComp_GetCapsule final
{
public:
	class UCapsuleComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharacterComp_GetCapsule) == 0x000008, "Wrong alignment on AppCharacterComp_GetCapsule");
static_assert(sizeof(AppCharacterComp_GetCapsule) == 0x000008, "Wrong size on AppCharacterComp_GetCapsule");
static_assert(offsetof(AppCharacterComp_GetCapsule, ReturnValue) == 0x000000, "Member 'AppCharacterComp_GetCapsule::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharacterComp.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct AppCharacterComp_GetCharacter final
{
public:
	class ACharacterBaseCore*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharacterComp_GetCharacter) == 0x000008, "Wrong alignment on AppCharacterComp_GetCharacter");
static_assert(sizeof(AppCharacterComp_GetCharacter) == 0x000008, "Wrong size on AppCharacterComp_GetCharacter");
static_assert(offsetof(AppCharacterComp_GetCharacter, ReturnValue) == 0x000000, "Member 'AppCharacterComp_GetCharacter::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharacterComp.GetMovement
// 0x0008 (0x0008 - 0x0000)
struct AppCharacterComp_GetMovement final
{
public:
	class UCharacterMovementComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharacterComp_GetMovement) == 0x000008, "Wrong alignment on AppCharacterComp_GetMovement");
static_assert(sizeof(AppCharacterComp_GetMovement) == 0x000008, "Wrong size on AppCharacterComp_GetMovement");
static_assert(offsetof(AppCharacterComp_GetMovement, ReturnValue) == 0x000000, "Member 'AppCharacterComp_GetMovement::ReturnValue' has a wrong offset!");

// Function xrd777.BtlBossHangedManInterface.FadeinHangedManEffect
// 0x0004 (0x0004 - 0x0000)
struct BtlBossHangedManInterface_FadeinHangedManEffect final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossHangedManInterface_FadeinHangedManEffect) == 0x000004, "Wrong alignment on BtlBossHangedManInterface_FadeinHangedManEffect");
static_assert(sizeof(BtlBossHangedManInterface_FadeinHangedManEffect) == 0x000004, "Wrong size on BtlBossHangedManInterface_FadeinHangedManEffect");
static_assert(offsetof(BtlBossHangedManInterface_FadeinHangedManEffect, AnimTime) == 0x000000, "Member 'BtlBossHangedManInterface_FadeinHangedManEffect::AnimTime' has a wrong offset!");

// Function xrd777.BtlBossHangedManInterface.FadeoutHangedManEffect
// 0x0004 (0x0004 - 0x0000)
struct BtlBossHangedManInterface_FadeoutHangedManEffect final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossHangedManInterface_FadeoutHangedManEffect) == 0x000004, "Wrong alignment on BtlBossHangedManInterface_FadeoutHangedManEffect");
static_assert(sizeof(BtlBossHangedManInterface_FadeoutHangedManEffect) == 0x000004, "Wrong size on BtlBossHangedManInterface_FadeoutHangedManEffect");
static_assert(offsetof(BtlBossHangedManInterface_FadeoutHangedManEffect, AnimTime) == 0x000000, "Member 'BtlBossHangedManInterface_FadeoutHangedManEffect::AnimTime' has a wrong offset!");

// Function xrd777.BtlBossHangedManInterface.FadeoutStatueEffect
// 0x0004 (0x0004 - 0x0000)
struct BtlBossHangedManInterface_FadeoutStatueEffect final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossHangedManInterface_FadeoutStatueEffect) == 0x000004, "Wrong alignment on BtlBossHangedManInterface_FadeoutStatueEffect");
static_assert(sizeof(BtlBossHangedManInterface_FadeoutStatueEffect) == 0x000004, "Wrong size on BtlBossHangedManInterface_FadeoutStatueEffect");
static_assert(offsetof(BtlBossHangedManInterface_FadeoutStatueEffect, AnimTime) == 0x000000, "Member 'BtlBossHangedManInterface_FadeoutStatueEffect::AnimTime' has a wrong offset!");

// Function xrd777.UITownMapSymbolComponent.Initialize
// 0x0018 (0x0018 - 0x0000)
struct UITownMapSymbolComponent_Initialize final
{
public:
	class AFldAnimObj*                            FldAnimObj;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkinnedMeshComponent*                  SkinnedComponent;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETownType                                     TownType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UITownMapSymbolComponent_Initialize) == 0x000008, "Wrong alignment on UITownMapSymbolComponent_Initialize");
static_assert(sizeof(UITownMapSymbolComponent_Initialize) == 0x000018, "Wrong size on UITownMapSymbolComponent_Initialize");
static_assert(offsetof(UITownMapSymbolComponent_Initialize, FldAnimObj) == 0x000000, "Member 'UITownMapSymbolComponent_Initialize::FldAnimObj' has a wrong offset!");
static_assert(offsetof(UITownMapSymbolComponent_Initialize, SkinnedComponent) == 0x000008, "Member 'UITownMapSymbolComponent_Initialize::SkinnedComponent' has a wrong offset!");
static_assert(offsetof(UITownMapSymbolComponent_Initialize, TownType) == 0x000010, "Member 'UITownMapSymbolComponent_Initialize::TownType' has a wrong offset!");

// Function xrd777.CommunityShortcut.ScriptFinishedFunction
// 0x0004 (0x0004 - 0x0000)
struct CommunityShortcut_ScriptFinishedFunction final
{
public:
	int32                                         ExitType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommunityShortcut_ScriptFinishedFunction) == 0x000004, "Wrong alignment on CommunityShortcut_ScriptFinishedFunction");
static_assert(sizeof(CommunityShortcut_ScriptFinishedFunction) == 0x000004, "Wrong size on CommunityShortcut_ScriptFinishedFunction");
static_assert(offsetof(CommunityShortcut_ScriptFinishedFunction, ExitType) == 0x000000, "Member 'CommunityShortcut_ScriptFinishedFunction::ExitType' has a wrong offset!");

// Function xrd777.FldLinkAnimObj.Initialize
// 0x0008 (0x0008 - 0x0000)
struct FldLinkAnimObj_Initialize final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldLinkAnimObj_Initialize) == 0x000008, "Wrong alignment on FldLinkAnimObj_Initialize");
static_assert(sizeof(FldLinkAnimObj_Initialize) == 0x000008, "Wrong size on FldLinkAnimObj_Initialize");
static_assert(offsetof(FldLinkAnimObj_Initialize, SkeletalMesh) == 0x000000, "Member 'FldLinkAnimObj_Initialize::SkeletalMesh' has a wrong offset!");

// Function xrd777.FldLinkAnimObj.InitializeArray
// 0x0010 (0x0010 - 0x0000)
struct FldLinkAnimObj_InitializeArray final
{
public:
	TArray<class USkeletalMeshComponent*>         SkeleTalMeshList;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldLinkAnimObj_InitializeArray) == 0x000008, "Wrong alignment on FldLinkAnimObj_InitializeArray");
static_assert(sizeof(FldLinkAnimObj_InitializeArray) == 0x000010, "Wrong size on FldLinkAnimObj_InitializeArray");
static_assert(offsetof(FldLinkAnimObj_InitializeArray, SkeleTalMeshList) == 0x000000, "Member 'FldLinkAnimObj_InitializeArray::SkeleTalMeshList' has a wrong offset!");

// Function xrd777.UIGenericSelectDraw.UpdateTimes
// 0x0004 (0x0004 - 0x0000)
struct UIGenericSelectDraw_UpdateTimes final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGenericSelectDraw_UpdateTimes) == 0x000004, "Wrong alignment on UIGenericSelectDraw_UpdateTimes");
static_assert(sizeof(UIGenericSelectDraw_UpdateTimes) == 0x000004, "Wrong size on UIGenericSelectDraw_UpdateTimes");
static_assert(offsetof(UIGenericSelectDraw_UpdateTimes, DeltaTime) == 0x000000, "Member 'UIGenericSelectDraw_UpdateTimes::DeltaTime' has a wrong offset!");

// Function xrd777.AppCharFaceAnimDataAsset.GetAssetPath
// 0x0020 (0x0020 - 0x0000)
struct AppCharFaceAnimDataAsset_GetAssetPath final
{
public:
	EAppCharFaceAnimID                            FaceAnimID;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppCharCategoryType                          CharCategory;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharId_0;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppCharAnimCategoryType                      AnimCategory;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharFaceAnimDataAsset_GetAssetPath) == 0x000008, "Wrong alignment on AppCharFaceAnimDataAsset_GetAssetPath");
static_assert(sizeof(AppCharFaceAnimDataAsset_GetAssetPath) == 0x000020, "Wrong size on AppCharFaceAnimDataAsset_GetAssetPath");
static_assert(offsetof(AppCharFaceAnimDataAsset_GetAssetPath, FaceAnimID) == 0x000000, "Member 'AppCharFaceAnimDataAsset_GetAssetPath::FaceAnimID' has a wrong offset!");
static_assert(offsetof(AppCharFaceAnimDataAsset_GetAssetPath, CharCategory) == 0x000001, "Member 'AppCharFaceAnimDataAsset_GetAssetPath::CharCategory' has a wrong offset!");
static_assert(offsetof(AppCharFaceAnimDataAsset_GetAssetPath, CharId_0) == 0x000004, "Member 'AppCharFaceAnimDataAsset_GetAssetPath::CharId_0' has a wrong offset!");
static_assert(offsetof(AppCharFaceAnimDataAsset_GetAssetPath, AnimCategory) == 0x000008, "Member 'AppCharFaceAnimDataAsset_GetAssetPath::AnimCategory' has a wrong offset!");
static_assert(offsetof(AppCharFaceAnimDataAsset_GetAssetPath, ReturnValue) == 0x000010, "Member 'AppCharFaceAnimDataAsset_GetAssetPath::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharFootstepsAtom.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct AppCharFootstepsAtom_SetEnable final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharFootstepsAtom_SetEnable) == 0x000001, "Wrong alignment on AppCharFootstepsAtom_SetEnable");
static_assert(sizeof(AppCharFootstepsAtom_SetEnable) == 0x000001, "Wrong size on AppCharFootstepsAtom_SetEnable");
static_assert(offsetof(AppCharFootstepsAtom_SetEnable, Value) == 0x000000, "Member 'AppCharFootstepsAtom_SetEnable::Value' has a wrong offset!");

// Function xrd777.AppCharFootstepsAtom.SetRunCue
// 0x0008 (0x0008 - 0x0000)
struct AppCharFootstepsAtom_SetRunCue final
{
public:
	class USoundAtomCue*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharFootstepsAtom_SetRunCue) == 0x000008, "Wrong alignment on AppCharFootstepsAtom_SetRunCue");
static_assert(sizeof(AppCharFootstepsAtom_SetRunCue) == 0x000008, "Wrong size on AppCharFootstepsAtom_SetRunCue");
static_assert(offsetof(AppCharFootstepsAtom_SetRunCue, Value) == 0x000000, "Member 'AppCharFootstepsAtom_SetRunCue::Value' has a wrong offset!");

// Function xrd777.AppCharFootstepsAtom.SetWalkCue
// 0x0008 (0x0008 - 0x0000)
struct AppCharFootstepsAtom_SetWalkCue final
{
public:
	class USoundAtomCue*                          Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharFootstepsAtom_SetWalkCue) == 0x000008, "Wrong alignment on AppCharFootstepsAtom_SetWalkCue");
static_assert(sizeof(AppCharFootstepsAtom_SetWalkCue) == 0x000008, "Wrong size on AppCharFootstepsAtom_SetWalkCue");
static_assert(offsetof(AppCharFootstepsAtom_SetWalkCue, Value) == 0x000000, "Member 'AppCharFootstepsAtom_SetWalkCue::Value' has a wrong offset!");

// Function xrd777.FclShopBase.OnFinishedScr
// 0x0004 (0x0004 - 0x0000)
struct FclShopBase_OnFinishedScr final
{
public:
	int32                                         ExitType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FclShopBase_OnFinishedScr) == 0x000004, "Wrong alignment on FclShopBase_OnFinishedScr");
static_assert(sizeof(FclShopBase_OnFinishedScr) == 0x000004, "Wrong size on FclShopBase_OnFinishedScr");
static_assert(offsetof(FclShopBase_OnFinishedScr, ExitType) == 0x000000, "Member 'FclShopBase_OnFinishedScr::ExitType' has a wrong offset!");

// Function xrd777.AppCharFootstepsTriggerComp_BOX.OnOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct AppCharFootstepsTriggerComp_BOX_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharFootstepsTriggerComp_BOX_OnOverlapBegin) == 0x000008, "Wrong alignment on AppCharFootstepsTriggerComp_BOX_OnOverlapBegin");
static_assert(sizeof(AppCharFootstepsTriggerComp_BOX_OnOverlapBegin) == 0x0000A8, "Wrong size on AppCharFootstepsTriggerComp_BOX_OnOverlapBegin");
static_assert(offsetof(AppCharFootstepsTriggerComp_BOX_OnOverlapBegin, OverlappedComponent) == 0x000000, "Member 'AppCharFootstepsTriggerComp_BOX_OnOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_BOX_OnOverlapBegin, OtherActor) == 0x000008, "Member 'AppCharFootstepsTriggerComp_BOX_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_BOX_OnOverlapBegin, OtherComp) == 0x000010, "Member 'AppCharFootstepsTriggerComp_BOX_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_BOX_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'AppCharFootstepsTriggerComp_BOX_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_BOX_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'AppCharFootstepsTriggerComp_BOX_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_BOX_OnOverlapBegin, SweepResult) == 0x000020, "Member 'AppCharFootstepsTriggerComp_BOX_OnOverlapBegin::SweepResult' has a wrong offset!");

// Function xrd777.AppCharFootstepsTriggerComp_BOX.OnOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct AppCharFootstepsTriggerComp_BOX_OnOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppCharFootstepsTriggerComp_BOX_OnOverlapEnd) == 0x000008, "Wrong alignment on AppCharFootstepsTriggerComp_BOX_OnOverlapEnd");
static_assert(sizeof(AppCharFootstepsTriggerComp_BOX_OnOverlapEnd) == 0x000020, "Wrong size on AppCharFootstepsTriggerComp_BOX_OnOverlapEnd");
static_assert(offsetof(AppCharFootstepsTriggerComp_BOX_OnOverlapEnd, OverlappedComponent) == 0x000000, "Member 'AppCharFootstepsTriggerComp_BOX_OnOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_BOX_OnOverlapEnd, OtherActor) == 0x000008, "Member 'AppCharFootstepsTriggerComp_BOX_OnOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_BOX_OnOverlapEnd, OtherComp) == 0x000010, "Member 'AppCharFootstepsTriggerComp_BOX_OnOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_BOX_OnOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'AppCharFootstepsTriggerComp_BOX_OnOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function xrd777.AppCharFootstepsTriggerComp_CIRCLE.OnOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin) == 0x000008, "Wrong alignment on AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin");
static_assert(sizeof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin) == 0x0000A8, "Wrong size on AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin");
static_assert(offsetof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin, OverlappedComponent) == 0x000000, "Member 'AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin, OtherActor) == 0x000008, "Member 'AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin, OtherComp) == 0x000010, "Member 'AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin, bFromSweep) == 0x00001C, "Member 'AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin, SweepResult) == 0x000020, "Member 'AppCharFootstepsTriggerComp_CIRCLE_OnOverlapBegin::SweepResult' has a wrong offset!");

// Function xrd777.AppCharFootstepsTriggerComp_CIRCLE.OnOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd) == 0x000008, "Wrong alignment on AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd");
static_assert(sizeof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd) == 0x000020, "Wrong size on AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd");
static_assert(offsetof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd, OverlappedComponent) == 0x000000, "Member 'AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd, OtherActor) == 0x000008, "Member 'AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd, OtherComp) == 0x000010, "Member 'AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'AppCharFootstepsTriggerComp_CIRCLE_OnOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function xrd777.AppCharFootstepsTriggerVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct AppCharFootstepsTriggerVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharFootstepsTriggerVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on AppCharFootstepsTriggerVolume_OnOverlapBegin");
static_assert(sizeof(AppCharFootstepsTriggerVolume_OnOverlapBegin) == 0x000010, "Wrong size on AppCharFootstepsTriggerVolume_OnOverlapBegin");
static_assert(offsetof(AppCharFootstepsTriggerVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'AppCharFootstepsTriggerVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'AppCharFootstepsTriggerVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function xrd777.AppCharFootstepsTriggerVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct AppCharFootstepsTriggerVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharFootstepsTriggerVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on AppCharFootstepsTriggerVolume_OnOverlapEnd");
static_assert(sizeof(AppCharFootstepsTriggerVolume_OnOverlapEnd) == 0x000010, "Wrong size on AppCharFootstepsTriggerVolume_OnOverlapEnd");
static_assert(offsetof(AppCharFootstepsTriggerVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'AppCharFootstepsTriggerVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(AppCharFootstepsTriggerVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'AppCharFootstepsTriggerVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function xrd777.AppCharLib.GetMaterial
// 0x0018 (0x0018 - 0x0000)
struct AppCharLib_GetMaterial final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharLib_GetMaterial) == 0x000008, "Wrong alignment on AppCharLib_GetMaterial");
static_assert(sizeof(AppCharLib_GetMaterial) == 0x000018, "Wrong size on AppCharLib_GetMaterial");
static_assert(offsetof(AppCharLib_GetMaterial, Target) == 0x000000, "Member 'AppCharLib_GetMaterial::Target' has a wrong offset!");
static_assert(offsetof(AppCharLib_GetMaterial, ReturnValue) == 0x000008, "Member 'AppCharLib_GetMaterial::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharLib.GetMaterialSlotName
// 0x0020 (0x0020 - 0x0000)
struct AppCharLib_GetMaterialSlotName final
{
public:
	class USkeletalMeshComponent*                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharLib_GetMaterialSlotName) == 0x000008, "Wrong alignment on AppCharLib_GetMaterialSlotName");
static_assert(sizeof(AppCharLib_GetMaterialSlotName) == 0x000020, "Wrong size on AppCharLib_GetMaterialSlotName");
static_assert(offsetof(AppCharLib_GetMaterialSlotName, Target) == 0x000000, "Member 'AppCharLib_GetMaterialSlotName::Target' has a wrong offset!");
static_assert(offsetof(AppCharLib_GetMaterialSlotName, ID) == 0x000008, "Member 'AppCharLib_GetMaterialSlotName::ID' has a wrong offset!");
static_assert(offsetof(AppCharLib_GetMaterialSlotName, ReturnValue) == 0x000010, "Member 'AppCharLib_GetMaterialSlotName::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharLib.IsDungeonChara
// 0x0010 (0x0010 - 0x0000)
struct AppCharLib_IsDungeonChara final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppCharLib_IsDungeonChara) == 0x000008, "Wrong alignment on AppCharLib_IsDungeonChara");
static_assert(sizeof(AppCharLib_IsDungeonChara) == 0x000010, "Wrong size on AppCharLib_IsDungeonChara");
static_assert(offsetof(AppCharLib_IsDungeonChara, Target) == 0x000000, "Member 'AppCharLib_IsDungeonChara::Target' has a wrong offset!");
static_assert(offsetof(AppCharLib_IsDungeonChara, ReturnValue) == 0x000008, "Member 'AppCharLib_IsDungeonChara::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharLib.IsUniqueNpc
// 0x0008 (0x0008 - 0x0000)
struct AppCharLib_IsUniqueNpc final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppCharLib_IsUniqueNpc) == 0x000004, "Wrong alignment on AppCharLib_IsUniqueNpc");
static_assert(sizeof(AppCharLib_IsUniqueNpc) == 0x000008, "Wrong size on AppCharLib_IsUniqueNpc");
static_assert(offsetof(AppCharLib_IsUniqueNpc, ID) == 0x000000, "Member 'AppCharLib_IsUniqueNpc::ID' has a wrong offset!");
static_assert(offsetof(AppCharLib_IsUniqueNpc, ReturnValue) == 0x000004, "Member 'AppCharLib_IsUniqueNpc::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharLib.SetOpacity
// 0x0010 (0x0010 - 0x0000)
struct AppCharLib_SetOpacity final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppCharLib_SetOpacity) == 0x000008, "Wrong alignment on AppCharLib_SetOpacity");
static_assert(sizeof(AppCharLib_SetOpacity) == 0x000010, "Wrong size on AppCharLib_SetOpacity");
static_assert(offsetof(AppCharLib_SetOpacity, Target) == 0x000000, "Member 'AppCharLib_SetOpacity::Target' has a wrong offset!");
static_assert(offsetof(AppCharLib_SetOpacity, Value) == 0x000008, "Member 'AppCharLib_SetOpacity::Value' has a wrong offset!");

// Function xrd777.AppCharLib.SetOpacityNiagaraOnly
// 0x0010 (0x0010 - 0x0000)
struct AppCharLib_SetOpacityNiagaraOnly final
{
public:
	const class AActor*                           Target;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppCharLib_SetOpacityNiagaraOnly) == 0x000008, "Wrong alignment on AppCharLib_SetOpacityNiagaraOnly");
static_assert(sizeof(AppCharLib_SetOpacityNiagaraOnly) == 0x000010, "Wrong size on AppCharLib_SetOpacityNiagaraOnly");
static_assert(offsetof(AppCharLib_SetOpacityNiagaraOnly, Target) == 0x000000, "Member 'AppCharLib_SetOpacityNiagaraOnly::Target' has a wrong offset!");
static_assert(offsetof(AppCharLib_SetOpacityNiagaraOnly, Value) == 0x000008, "Member 'AppCharLib_SetOpacityNiagaraOnly::Value' has a wrong offset!");

// Function xrd777.UICmmRankUPAnimManager.PlaySE
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUPAnimManager_PlaySE final
{
public:
	EUICmmRankUpSE                                SEType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUPAnimManager_PlaySE) == 0x000001, "Wrong alignment on UICmmRankUPAnimManager_PlaySE");
static_assert(sizeof(UICmmRankUPAnimManager_PlaySE) == 0x000001, "Wrong size on UICmmRankUPAnimManager_PlaySE");
static_assert(offsetof(UICmmRankUPAnimManager_PlaySE, SEType) == 0x000000, "Member 'UICmmRankUPAnimManager_PlaySE::SEType' has a wrong offset!");

// Function xrd777.UICmmRankUPAnimManager.SetEndGameoverOneLine
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUPAnimManager_SetEndGameoverOneLine final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUPAnimManager_SetEndGameoverOneLine) == 0x000001, "Wrong alignment on UICmmRankUPAnimManager_SetEndGameoverOneLine");
static_assert(sizeof(UICmmRankUPAnimManager_SetEndGameoverOneLine) == 0x000001, "Wrong size on UICmmRankUPAnimManager_SetEndGameoverOneLine");
static_assert(offsetof(UICmmRankUPAnimManager_SetEndGameoverOneLine, Flag) == 0x000000, "Member 'UICmmRankUPAnimManager_SetEndGameoverOneLine::Flag' has a wrong offset!");

// Function xrd777.UICmmRankUPAnimManager.SetEndRecoveryAnime
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUPAnimManager_SetEndRecoveryAnime final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUPAnimManager_SetEndRecoveryAnime) == 0x000001, "Wrong alignment on UICmmRankUPAnimManager_SetEndRecoveryAnime");
static_assert(sizeof(UICmmRankUPAnimManager_SetEndRecoveryAnime) == 0x000001, "Wrong size on UICmmRankUPAnimManager_SetEndRecoveryAnime");
static_assert(offsetof(UICmmRankUPAnimManager_SetEndRecoveryAnime, Flag) == 0x000000, "Member 'UICmmRankUPAnimManager_SetEndRecoveryAnime::Flag' has a wrong offset!");

// Function xrd777.UICmmRankUPAnimManager.SetEndReverseInAnime
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUPAnimManager_SetEndReverseInAnime final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUPAnimManager_SetEndReverseInAnime) == 0x000001, "Wrong alignment on UICmmRankUPAnimManager_SetEndReverseInAnime");
static_assert(sizeof(UICmmRankUPAnimManager_SetEndReverseInAnime) == 0x000001, "Wrong size on UICmmRankUPAnimManager_SetEndReverseInAnime");
static_assert(offsetof(UICmmRankUPAnimManager_SetEndReverseInAnime, Flag) == 0x000000, "Member 'UICmmRankUPAnimManager_SetEndReverseInAnime::Flag' has a wrong offset!");

// Function xrd777.UICmmRankUPAnimManager.SetEndReverseOutAnime
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUPAnimManager_SetEndReverseOutAnime final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUPAnimManager_SetEndReverseOutAnime) == 0x000001, "Wrong alignment on UICmmRankUPAnimManager_SetEndReverseOutAnime");
static_assert(sizeof(UICmmRankUPAnimManager_SetEndReverseOutAnime) == 0x000001, "Wrong size on UICmmRankUPAnimManager_SetEndReverseOutAnime");
static_assert(offsetof(UICmmRankUPAnimManager_SetEndReverseOutAnime, Flag) == 0x000000, "Member 'UICmmRankUPAnimManager_SetEndReverseOutAnime::Flag' has a wrong offset!");

// Function xrd777.UICmmRankUPAnimManager.SetEndReverseRankInAnime
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUPAnimManager_SetEndReverseRankInAnime final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUPAnimManager_SetEndReverseRankInAnime) == 0x000001, "Wrong alignment on UICmmRankUPAnimManager_SetEndReverseRankInAnime");
static_assert(sizeof(UICmmRankUPAnimManager_SetEndReverseRankInAnime) == 0x000001, "Wrong size on UICmmRankUPAnimManager_SetEndReverseRankInAnime");
static_assert(offsetof(UICmmRankUPAnimManager_SetEndReverseRankInAnime, Flag) == 0x000000, "Member 'UICmmRankUPAnimManager_SetEndReverseRankInAnime::Flag' has a wrong offset!");

// Function xrd777.UICmmRankUPAnimManager.SetEndUIInAnime
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUPAnimManager_SetEndUIInAnime final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUPAnimManager_SetEndUIInAnime) == 0x000001, "Wrong alignment on UICmmRankUPAnimManager_SetEndUIInAnime");
static_assert(sizeof(UICmmRankUPAnimManager_SetEndUIInAnime) == 0x000001, "Wrong size on UICmmRankUPAnimManager_SetEndUIInAnime");
static_assert(offsetof(UICmmRankUPAnimManager_SetEndUIInAnime, Flag) == 0x000000, "Member 'UICmmRankUPAnimManager_SetEndUIInAnime::Flag' has a wrong offset!");

// Function xrd777.UICmmRankUPAnimManager.SetEndUIOutAnime
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUPAnimManager_SetEndUIOutAnime final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUPAnimManager_SetEndUIOutAnime) == 0x000001, "Wrong alignment on UICmmRankUPAnimManager_SetEndUIOutAnime");
static_assert(sizeof(UICmmRankUPAnimManager_SetEndUIOutAnime) == 0x000001, "Wrong size on UICmmRankUPAnimManager_SetEndUIOutAnime");
static_assert(offsetof(UICmmRankUPAnimManager_SetEndUIOutAnime, Flag) == 0x000000, "Member 'UICmmRankUPAnimManager_SetEndUIOutAnime::Flag' has a wrong offset!");

// Function xrd777.UICmmRankUPAnimManager.SetPlayBGCardOutAnime
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUPAnimManager_SetPlayBGCardOutAnime final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUPAnimManager_SetPlayBGCardOutAnime) == 0x000001, "Wrong alignment on UICmmRankUPAnimManager_SetPlayBGCardOutAnime");
static_assert(sizeof(UICmmRankUPAnimManager_SetPlayBGCardOutAnime) == 0x000001, "Wrong size on UICmmRankUPAnimManager_SetPlayBGCardOutAnime");
static_assert(offsetof(UICmmRankUPAnimManager_SetPlayBGCardOutAnime, Flag) == 0x000000, "Member 'UICmmRankUPAnimManager_SetPlayBGCardOutAnime::Flag' has a wrong offset!");

// Function xrd777.UICmmRankUPAnimManager.SetPlayStarInAnime
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUPAnimManager_SetPlayStarInAnime final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUPAnimManager_SetPlayStarInAnime) == 0x000001, "Wrong alignment on UICmmRankUPAnimManager_SetPlayStarInAnime");
static_assert(sizeof(UICmmRankUPAnimManager_SetPlayStarInAnime) == 0x000001, "Wrong size on UICmmRankUPAnimManager_SetPlayStarInAnime");
static_assert(offsetof(UICmmRankUPAnimManager_SetPlayStarInAnime, Flag) == 0x000000, "Member 'UICmmRankUPAnimManager_SetPlayStarInAnime::Flag' has a wrong offset!");

// Function xrd777.UICmmRankUPAnimManager.SetShowKeyHelp
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUPAnimManager_SetShowKeyHelp final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUPAnimManager_SetShowKeyHelp) == 0x000001, "Wrong alignment on UICmmRankUPAnimManager_SetShowKeyHelp");
static_assert(sizeof(UICmmRankUPAnimManager_SetShowKeyHelp) == 0x000001, "Wrong size on UICmmRankUPAnimManager_SetShowKeyHelp");
static_assert(offsetof(UICmmRankUPAnimManager_SetShowKeyHelp, Flag) == 0x000000, "Member 'UICmmRankUPAnimManager_SetShowKeyHelp::Flag' has a wrong offset!");

// Function xrd777.FldCrowdNpcBase.UpdateOpacityByPlayerActor
// 0x0018 (0x0018 - 0x0000)
struct FldCrowdNpcBase_UpdateOpacityByPlayerActor final
{
public:
	float                                         Opacity;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldCrowdNpcBase_UpdateOpacityByPlayerActor) == 0x000008, "Wrong alignment on FldCrowdNpcBase_UpdateOpacityByPlayerActor");
static_assert(sizeof(FldCrowdNpcBase_UpdateOpacityByPlayerActor) == 0x000018, "Wrong size on FldCrowdNpcBase_UpdateOpacityByPlayerActor");
static_assert(offsetof(FldCrowdNpcBase_UpdateOpacityByPlayerActor, Opacity) == 0x000000, "Member 'FldCrowdNpcBase_UpdateOpacityByPlayerActor::Opacity' has a wrong offset!");
static_assert(offsetof(FldCrowdNpcBase_UpdateOpacityByPlayerActor, TargetActor) == 0x000008, "Member 'FldCrowdNpcBase_UpdateOpacityByPlayerActor::TargetActor' has a wrong offset!");
static_assert(offsetof(FldCrowdNpcBase_UpdateOpacityByPlayerActor, ReturnValue) == 0x000010, "Member 'FldCrowdNpcBase_UpdateOpacityByPlayerActor::ReturnValue' has a wrong offset!");

// Function xrd777.AppCharWeaponBase.PlayAnim
// 0x0014 (0x0014 - 0x0000)
struct AppCharWeaponBase_PlayAnim final
{
public:
	int32                                         AnimNo;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharWeaponBase_PlayAnim) == 0x000004, "Wrong alignment on AppCharWeaponBase_PlayAnim");
static_assert(sizeof(AppCharWeaponBase_PlayAnim) == 0x000014, "Wrong size on AppCharWeaponBase_PlayAnim");
static_assert(offsetof(AppCharWeaponBase_PlayAnim, AnimNo) == 0x000000, "Member 'AppCharWeaponBase_PlayAnim::AnimNo' has a wrong offset!");
static_assert(offsetof(AppCharWeaponBase_PlayAnim, Loop) == 0x000004, "Member 'AppCharWeaponBase_PlayAnim::Loop' has a wrong offset!");
static_assert(offsetof(AppCharWeaponBase_PlayAnim, BlendInTime) == 0x000008, "Member 'AppCharWeaponBase_PlayAnim::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharWeaponBase_PlayAnim, BlendOutTime) == 0x00000C, "Member 'AppCharWeaponBase_PlayAnim::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharWeaponBase_PlayAnim, InPlayRate) == 0x000010, "Member 'AppCharWeaponBase_PlayAnim::InPlayRate' has a wrong offset!");

// Function xrd777.AppCharWeaponBase.PlayAnimSequence
// 0x0018 (0x0018 - 0x0000)
struct AppCharWeaponBase_PlayAnimSequence final
{
public:
	class UAnimSequenceBase*                      PSequence;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharWeaponBase_PlayAnimSequence) == 0x000008, "Wrong alignment on AppCharWeaponBase_PlayAnimSequence");
static_assert(sizeof(AppCharWeaponBase_PlayAnimSequence) == 0x000018, "Wrong size on AppCharWeaponBase_PlayAnimSequence");
static_assert(offsetof(AppCharWeaponBase_PlayAnimSequence, PSequence) == 0x000000, "Member 'AppCharWeaponBase_PlayAnimSequence::PSequence' has a wrong offset!");
static_assert(offsetof(AppCharWeaponBase_PlayAnimSequence, Loop) == 0x000008, "Member 'AppCharWeaponBase_PlayAnimSequence::Loop' has a wrong offset!");
static_assert(offsetof(AppCharWeaponBase_PlayAnimSequence, BlendInTime) == 0x00000C, "Member 'AppCharWeaponBase_PlayAnimSequence::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppCharWeaponBase_PlayAnimSequence, BlendOutTime) == 0x000010, "Member 'AppCharWeaponBase_PlayAnimSequence::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppCharWeaponBase_PlayAnimSequence, InPlayRate) == 0x000014, "Member 'AppCharWeaponBase_PlayAnimSequence::InPlayRate' has a wrong offset!");

// Function xrd777.AppCharWeaponBase.GetWaitAnimNo
// 0x0004 (0x0004 - 0x0000)
struct AppCharWeaponBase_GetWaitAnimNo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCharWeaponBase_GetWaitAnimNo) == 0x000004, "Wrong alignment on AppCharWeaponBase_GetWaitAnimNo");
static_assert(sizeof(AppCharWeaponBase_GetWaitAnimNo) == 0x000004, "Wrong size on AppCharWeaponBase_GetWaitAnimNo");
static_assert(offsetof(AppCharWeaponBase_GetWaitAnimNo, ReturnValue) == 0x000000, "Member 'AppCharWeaponBase_GetWaitAnimNo::ReturnValue' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlAutoPlay
// 0x0010 (0x0010 - 0x0000)
struct AppCheatManager_AtlAutoPlay final
{
public:
	class FString                                 OPTION;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlAutoPlay) == 0x000008, "Wrong alignment on AppCheatManager_AtlAutoPlay");
static_assert(sizeof(AppCheatManager_AtlAutoPlay) == 0x000010, "Wrong size on AppCheatManager_AtlAutoPlay");
static_assert(offsetof(AppCheatManager_AtlAutoPlay, OPTION) == 0x000000, "Member 'AppCheatManager_AtlAutoPlay::OPTION' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlAutoPlayExecDungeonPassingTest
// 0x000C (0x000C - 0x0000)
struct AppCheatManager_AtlAutoPlayExecDungeonPassingTest final
{
public:
	int32                                         BeginFloor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFloor;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRebuild;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAstrea;                                           // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppCheatManager_AtlAutoPlayExecDungeonPassingTest) == 0x000004, "Wrong alignment on AppCheatManager_AtlAutoPlayExecDungeonPassingTest");
static_assert(sizeof(AppCheatManager_AtlAutoPlayExecDungeonPassingTest) == 0x00000C, "Wrong size on AppCheatManager_AtlAutoPlayExecDungeonPassingTest");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecDungeonPassingTest, BeginFloor) == 0x000000, "Member 'AppCheatManager_AtlAutoPlayExecDungeonPassingTest::BeginFloor' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecDungeonPassingTest, EndFloor) == 0x000004, "Member 'AppCheatManager_AtlAutoPlayExecDungeonPassingTest::EndFloor' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecDungeonPassingTest, bLoop) == 0x000008, "Member 'AppCheatManager_AtlAutoPlayExecDungeonPassingTest::bLoop' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecDungeonPassingTest, bRebuild) == 0x000009, "Member 'AppCheatManager_AtlAutoPlayExecDungeonPassingTest::bRebuild' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecDungeonPassingTest, bAstrea) == 0x00000A, "Member 'AppCheatManager_AtlAutoPlayExecDungeonPassingTest::bAstrea' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlAutoPlayExecDungeonTBoxTest
// 0x000C (0x000C - 0x0000)
struct AppCheatManager_AtlAutoPlayExecDungeonTBoxTest final
{
public:
	int32                                         BeginFloor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFloor;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAstrea;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppCheatManager_AtlAutoPlayExecDungeonTBoxTest) == 0x000004, "Wrong alignment on AppCheatManager_AtlAutoPlayExecDungeonTBoxTest");
static_assert(sizeof(AppCheatManager_AtlAutoPlayExecDungeonTBoxTest) == 0x00000C, "Wrong size on AppCheatManager_AtlAutoPlayExecDungeonTBoxTest");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecDungeonTBoxTest, BeginFloor) == 0x000000, "Member 'AppCheatManager_AtlAutoPlayExecDungeonTBoxTest::BeginFloor' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecDungeonTBoxTest, EndFloor) == 0x000004, "Member 'AppCheatManager_AtlAutoPlayExecDungeonTBoxTest::EndFloor' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecDungeonTBoxTest, bLoop) == 0x000008, "Member 'AppCheatManager_AtlAutoPlayExecDungeonTBoxTest::bLoop' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecDungeonTBoxTest, bAstrea) == 0x000009, "Member 'AppCheatManager_AtlAutoPlayExecDungeonTBoxTest::bAstrea' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlAutoPlayExecEnemyAILoggingTest
// 0x0008 (0x0008 - 0x0000)
struct AppCheatManager_AtlAutoPlayExecEnemyAILoggingTest final
{
public:
	int32                                         MinEncountID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxEncountID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlAutoPlayExecEnemyAILoggingTest) == 0x000004, "Wrong alignment on AppCheatManager_AtlAutoPlayExecEnemyAILoggingTest");
static_assert(sizeof(AppCheatManager_AtlAutoPlayExecEnemyAILoggingTest) == 0x000008, "Wrong size on AppCheatManager_AtlAutoPlayExecEnemyAILoggingTest");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecEnemyAILoggingTest, MinEncountID) == 0x000000, "Member 'AppCheatManager_AtlAutoPlayExecEnemyAILoggingTest::MinEncountID' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecEnemyAILoggingTest, MaxEncountID) == 0x000004, "Member 'AppCheatManager_AtlAutoPlayExecEnemyAILoggingTest::MaxEncountID' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlAutoPlayExecEnemyDropItemLoggingTest
// 0x0008 (0x0008 - 0x0000)
struct AppCheatManager_AtlAutoPlayExecEnemyDropItemLoggingTest final
{
public:
	int32                                         MinEncountID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxEncountID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlAutoPlayExecEnemyDropItemLoggingTest) == 0x000004, "Wrong alignment on AppCheatManager_AtlAutoPlayExecEnemyDropItemLoggingTest");
static_assert(sizeof(AppCheatManager_AtlAutoPlayExecEnemyDropItemLoggingTest) == 0x000008, "Wrong size on AppCheatManager_AtlAutoPlayExecEnemyDropItemLoggingTest");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecEnemyDropItemLoggingTest, MinEncountID) == 0x000000, "Member 'AppCheatManager_AtlAutoPlayExecEnemyDropItemLoggingTest::MinEncountID' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecEnemyDropItemLoggingTest, MaxEncountID) == 0x000004, "Member 'AppCheatManager_AtlAutoPlayExecEnemyDropItemLoggingTest::MaxEncountID' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlAutoPlayExecSkillMutationPowerUpTest
// 0x0008 (0x0008 - 0x0000)
struct AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpTest final
{
public:
	int32                                         StartIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTryCount;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpTest) == 0x000004, "Wrong alignment on AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpTest");
static_assert(sizeof(AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpTest) == 0x000008, "Wrong size on AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpTest");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpTest, StartIndex) == 0x000000, "Member 'AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpTest::StartIndex' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpTest, MaxTryCount) == 0x000004, "Member 'AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpTest::MaxTryCount' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlAutoPlayExecSkillMutationPowerUpUnitTest
// 0x0008 (0x0008 - 0x0000)
struct AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpUnitTest final
{
public:
	int32                                         OldSkillID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewSkillID;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpUnitTest) == 0x000004, "Wrong alignment on AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpUnitTest");
static_assert(sizeof(AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpUnitTest) == 0x000008, "Wrong size on AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpUnitTest");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpUnitTest, OldSkillID) == 0x000000, "Member 'AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpUnitTest::OldSkillID' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpUnitTest, NewSkillID) == 0x000004, "Member 'AppCheatManager_AtlAutoPlayExecSkillMutationPowerUpUnitTest::NewSkillID' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlAutoPlayExecSkillMutationTest
// 0x0008 (0x0008 - 0x0000)
struct AppCheatManager_AtlAutoPlayExecSkillMutationTest final
{
public:
	int32                                         SkillPackIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTryCount;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlAutoPlayExecSkillMutationTest) == 0x000004, "Wrong alignment on AppCheatManager_AtlAutoPlayExecSkillMutationTest");
static_assert(sizeof(AppCheatManager_AtlAutoPlayExecSkillMutationTest) == 0x000008, "Wrong size on AppCheatManager_AtlAutoPlayExecSkillMutationTest");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecSkillMutationTest, SkillPackIndex) == 0x000000, "Member 'AppCheatManager_AtlAutoPlayExecSkillMutationTest::SkillPackIndex' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlAutoPlayExecSkillMutationTest, MaxTryCount) == 0x000004, "Member 'AppCheatManager_AtlAutoPlayExecSkillMutationTest::MaxTryCount' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlBtlCountdownSetTime
// 0x0004 (0x0004 - 0x0000)
struct AppCheatManager_AtlBtlCountdownSetTime final
{
public:
	int32                                         InSecond;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlBtlCountdownSetTime) == 0x000004, "Wrong alignment on AppCheatManager_AtlBtlCountdownSetTime");
static_assert(sizeof(AppCheatManager_AtlBtlCountdownSetTime) == 0x000004, "Wrong size on AppCheatManager_AtlBtlCountdownSetTime");
static_assert(offsetof(AppCheatManager_AtlBtlCountdownSetTime, InSecond) == 0x000000, "Member 'AppCheatManager_AtlBtlCountdownSetTime::InSecond' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlBtlFadeManagerOldProcessEnable
// 0x0001 (0x0001 - 0x0000)
struct AppCheatManager_AtlBtlFadeManagerOldProcessEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlBtlFadeManagerOldProcessEnable) == 0x000001, "Wrong alignment on AppCheatManager_AtlBtlFadeManagerOldProcessEnable");
static_assert(sizeof(AppCheatManager_AtlBtlFadeManagerOldProcessEnable) == 0x000001, "Wrong size on AppCheatManager_AtlBtlFadeManagerOldProcessEnable");
static_assert(offsetof(AppCheatManager_AtlBtlFadeManagerOldProcessEnable, bEnable) == 0x000000, "Member 'AppCheatManager_AtlBtlFadeManagerOldProcessEnable::bEnable' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlCallEvent
// 0x0008 (0x0008 - 0x0000)
struct AppCheatManager_AtlCallEvent final
{
public:
	int32                                         EventMajorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlCallEvent) == 0x000004, "Wrong alignment on AppCheatManager_AtlCallEvent");
static_assert(sizeof(AppCheatManager_AtlCallEvent) == 0x000008, "Wrong size on AppCheatManager_AtlCallEvent");
static_assert(offsetof(AppCheatManager_AtlCallEvent, EventMajorID) == 0x000000, "Member 'AppCheatManager_AtlCallEvent::EventMajorID' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlCallEvent, EventMinorID) == 0x000004, "Member 'AppCheatManager_AtlCallEvent::EventMinorID' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlCallEventCmmu
// 0x0008 (0x0008 - 0x0000)
struct AppCheatManager_AtlCallEventCmmu final
{
public:
	int32                                         EventMaojorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlCallEventCmmu) == 0x000004, "Wrong alignment on AppCheatManager_AtlCallEventCmmu");
static_assert(sizeof(AppCheatManager_AtlCallEventCmmu) == 0x000008, "Wrong size on AppCheatManager_AtlCallEventCmmu");
static_assert(offsetof(AppCheatManager_AtlCallEventCmmu, EventMaojorID) == 0x000000, "Member 'AppCheatManager_AtlCallEventCmmu::EventMaojorID' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlCallEventCmmu, EventMinorID) == 0x000004, "Member 'AppCheatManager_AtlCallEventCmmu::EventMinorID' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlCallEventFild
// 0x0008 (0x0008 - 0x0000)
struct AppCheatManager_AtlCallEventFild final
{
public:
	int32                                         EventMaojorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlCallEventFild) == 0x000004, "Wrong alignment on AppCheatManager_AtlCallEventFild");
static_assert(sizeof(AppCheatManager_AtlCallEventFild) == 0x000008, "Wrong size on AppCheatManager_AtlCallEventFild");
static_assert(offsetof(AppCheatManager_AtlCallEventFild, EventMaojorID) == 0x000000, "Member 'AppCheatManager_AtlCallEventFild::EventMaojorID' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlCallEventFild, EventMinorID) == 0x000004, "Member 'AppCheatManager_AtlCallEventFild::EventMinorID' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlDevPlayLogging
// 0x0001 (0x0001 - 0x0000)
struct AppCheatManager_AtlDevPlayLogging final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlDevPlayLogging) == 0x000001, "Wrong alignment on AppCheatManager_AtlDevPlayLogging");
static_assert(sizeof(AppCheatManager_AtlDevPlayLogging) == 0x000001, "Wrong size on AppCheatManager_AtlDevPlayLogging");
static_assert(offsetof(AppCheatManager_AtlDevPlayLogging, bEnable) == 0x000000, "Member 'AppCheatManager_AtlDevPlayLogging::bEnable' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlDrawPlayLog
// 0x0001 (0x0001 - 0x0000)
struct AppCheatManager_AtlDrawPlayLog final
{
public:
	bool                                          bVisible;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlDrawPlayLog) == 0x000001, "Wrong alignment on AppCheatManager_AtlDrawPlayLog");
static_assert(sizeof(AppCheatManager_AtlDrawPlayLog) == 0x000001, "Wrong size on AppCheatManager_AtlDrawPlayLog");
static_assert(offsetof(AppCheatManager_AtlDrawPlayLog, bVisible) == 0x000000, "Member 'AppCheatManager_AtlDrawPlayLog::bVisible' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlFieldCameraShakeEnd
// 0x0004 (0x0004 - 0x0000)
struct AppCheatManager_AtlFieldCameraShakeEnd final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlFieldCameraShakeEnd) == 0x000004, "Wrong alignment on AppCheatManager_AtlFieldCameraShakeEnd");
static_assert(sizeof(AppCheatManager_AtlFieldCameraShakeEnd) == 0x000004, "Wrong size on AppCheatManager_AtlFieldCameraShakeEnd");
static_assert(offsetof(AppCheatManager_AtlFieldCameraShakeEnd, InTime) == 0x000000, "Member 'AppCheatManager_AtlFieldCameraShakeEnd::InTime' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlFieldCameraShakeStart
// 0x0010 (0x0010 - 0x0000)
struct AppCheatManager_AtlFieldCameraShakeStart final
{
public:
	float                                         InFrequency;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPowerX;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPowerY;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTime;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlFieldCameraShakeStart) == 0x000004, "Wrong alignment on AppCheatManager_AtlFieldCameraShakeStart");
static_assert(sizeof(AppCheatManager_AtlFieldCameraShakeStart) == 0x000010, "Wrong size on AppCheatManager_AtlFieldCameraShakeStart");
static_assert(offsetof(AppCheatManager_AtlFieldCameraShakeStart, InFrequency) == 0x000000, "Member 'AppCheatManager_AtlFieldCameraShakeStart::InFrequency' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlFieldCameraShakeStart, InPowerX) == 0x000004, "Member 'AppCheatManager_AtlFieldCameraShakeStart::InPowerX' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlFieldCameraShakeStart, InPowerY) == 0x000008, "Member 'AppCheatManager_AtlFieldCameraShakeStart::InPowerY' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlFieldCameraShakeStart, InTime) == 0x00000C, "Member 'AppCheatManager_AtlFieldCameraShakeStart::InTime' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlFieldPauseActorALL
// 0x0001 (0x0001 - 0x0000)
struct AppCheatManager_AtlFieldPauseActorALL final
{
public:
	bool                                          bPaused;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlFieldPauseActorALL) == 0x000001, "Wrong alignment on AppCheatManager_AtlFieldPauseActorALL");
static_assert(sizeof(AppCheatManager_AtlFieldPauseActorALL) == 0x000001, "Wrong size on AppCheatManager_AtlFieldPauseActorALL");
static_assert(offsetof(AppCheatManager_AtlFieldPauseActorALL, bPaused) == 0x000000, "Member 'AppCheatManager_AtlFieldPauseActorALL::bPaused' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlFieldPlayerPos
// 0x000C (0x000C - 0x0000)
struct AppCheatManager_AtlFieldPlayerPos final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlFieldPlayerPos) == 0x000004, "Wrong alignment on AppCheatManager_AtlFieldPlayerPos");
static_assert(sizeof(AppCheatManager_AtlFieldPlayerPos) == 0x00000C, "Wrong size on AppCheatManager_AtlFieldPlayerPos");
static_assert(offsetof(AppCheatManager_AtlFieldPlayerPos, X) == 0x000000, "Member 'AppCheatManager_AtlFieldPlayerPos::X' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlFieldPlayerPos, Y) == 0x000004, "Member 'AppCheatManager_AtlFieldPlayerPos::Y' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlFieldPlayerPos, Z) == 0x000008, "Member 'AppCheatManager_AtlFieldPlayerPos::Z' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlGraphicConfigFPS
// 0x0004 (0x0004 - 0x0000)
struct AppCheatManager_AtlGraphicConfigFPS final
{
public:
	int32                                         MaxFPS;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlGraphicConfigFPS) == 0x000004, "Wrong alignment on AppCheatManager_AtlGraphicConfigFPS");
static_assert(sizeof(AppCheatManager_AtlGraphicConfigFPS) == 0x000004, "Wrong size on AppCheatManager_AtlGraphicConfigFPS");
static_assert(offsetof(AppCheatManager_AtlGraphicConfigFPS, MaxFPS) == 0x000000, "Member 'AppCheatManager_AtlGraphicConfigFPS::MaxFPS' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlGraphicConfigPreset
// 0x0004 (0x0004 - 0x0000)
struct AppCheatManager_AtlGraphicConfigPreset final
{
public:
	int32                                         Preset;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlGraphicConfigPreset) == 0x000004, "Wrong alignment on AppCheatManager_AtlGraphicConfigPreset");
static_assert(sizeof(AppCheatManager_AtlGraphicConfigPreset) == 0x000004, "Wrong size on AppCheatManager_AtlGraphicConfigPreset");
static_assert(offsetof(AppCheatManager_AtlGraphicConfigPreset, Preset) == 0x000000, "Member 'AppCheatManager_AtlGraphicConfigPreset::Preset' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlGraphicConfigScreen
// 0x0010 (0x0010 - 0x0000)
struct AppCheatManager_AtlGraphicConfigScreen final
{
public:
	int32                                         ResX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScreenMode;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayNo;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlGraphicConfigScreen) == 0x000004, "Wrong alignment on AppCheatManager_AtlGraphicConfigScreen");
static_assert(sizeof(AppCheatManager_AtlGraphicConfigScreen) == 0x000010, "Wrong size on AppCheatManager_AtlGraphicConfigScreen");
static_assert(offsetof(AppCheatManager_AtlGraphicConfigScreen, ResX) == 0x000000, "Member 'AppCheatManager_AtlGraphicConfigScreen::ResX' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlGraphicConfigScreen, ResY) == 0x000004, "Member 'AppCheatManager_AtlGraphicConfigScreen::ResY' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlGraphicConfigScreen, ScreenMode) == 0x000008, "Member 'AppCheatManager_AtlGraphicConfigScreen::ScreenMode' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlGraphicConfigScreen, DisplayNo) == 0x00000C, "Member 'AppCheatManager_AtlGraphicConfigScreen::DisplayNo' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlGraphicConfigScreenMode
// 0x0008 (0x0008 - 0x0000)
struct AppCheatManager_AtlGraphicConfigScreenMode final
{
public:
	int32                                         ScreenMode;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisplayNo;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlGraphicConfigScreenMode) == 0x000004, "Wrong alignment on AppCheatManager_AtlGraphicConfigScreenMode");
static_assert(sizeof(AppCheatManager_AtlGraphicConfigScreenMode) == 0x000008, "Wrong size on AppCheatManager_AtlGraphicConfigScreenMode");
static_assert(offsetof(AppCheatManager_AtlGraphicConfigScreenMode, ScreenMode) == 0x000000, "Member 'AppCheatManager_AtlGraphicConfigScreenMode::ScreenMode' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlGraphicConfigScreenMode, DisplayNo) == 0x000004, "Member 'AppCheatManager_AtlGraphicConfigScreenMode::DisplayNo' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlGraphicConfigShadowQuality
// 0x0004 (0x0004 - 0x0000)
struct AppCheatManager_AtlGraphicConfigShadowQuality final
{
public:
	int32                                         Quality;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlGraphicConfigShadowQuality) == 0x000004, "Wrong alignment on AppCheatManager_AtlGraphicConfigShadowQuality");
static_assert(sizeof(AppCheatManager_AtlGraphicConfigShadowQuality) == 0x000004, "Wrong size on AppCheatManager_AtlGraphicConfigShadowQuality");
static_assert(offsetof(AppCheatManager_AtlGraphicConfigShadowQuality, Quality) == 0x000000, "Member 'AppCheatManager_AtlGraphicConfigShadowQuality::Quality' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlMessageScaleNewProcessEnable
// 0x0001 (0x0001 - 0x0000)
struct AppCheatManager_AtlMessageScaleNewProcessEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlMessageScaleNewProcessEnable) == 0x000001, "Wrong alignment on AppCheatManager_AtlMessageScaleNewProcessEnable");
static_assert(sizeof(AppCheatManager_AtlMessageScaleNewProcessEnable) == 0x000001, "Wrong size on AppCheatManager_AtlMessageScaleNewProcessEnable");
static_assert(offsetof(AppCheatManager_AtlMessageScaleNewProcessEnable, bEnable) == 0x000000, "Member 'AppCheatManager_AtlMessageScaleNewProcessEnable::bEnable' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlPlanarReflectionPercentage
// 0x0004 (0x0004 - 0x0000)
struct AppCheatManager_AtlPlanarReflectionPercentage final
{
public:
	int32                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlPlanarReflectionPercentage) == 0x000004, "Wrong alignment on AppCheatManager_AtlPlanarReflectionPercentage");
static_assert(sizeof(AppCheatManager_AtlPlanarReflectionPercentage) == 0x000004, "Wrong size on AppCheatManager_AtlPlanarReflectionPercentage");
static_assert(offsetof(AppCheatManager_AtlPlanarReflectionPercentage, Percent) == 0x000000, "Member 'AppCheatManager_AtlPlanarReflectionPercentage::Percent' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlRayTraceEnable
// 0x0008 (0x0008 - 0x0000)
struct AppCheatManager_AtlRayTraceEnable final
{
public:
	int32                                         Raytrace;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlanarReflection;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlRayTraceEnable) == 0x000004, "Wrong alignment on AppCheatManager_AtlRayTraceEnable");
static_assert(sizeof(AppCheatManager_AtlRayTraceEnable) == 0x000008, "Wrong size on AppCheatManager_AtlRayTraceEnable");
static_assert(offsetof(AppCheatManager_AtlRayTraceEnable, Raytrace) == 0x000000, "Member 'AppCheatManager_AtlRayTraceEnable::Raytrace' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlRayTraceEnable, PlanarReflection) == 0x000004, "Member 'AppCheatManager_AtlRayTraceEnable::PlanarReflection' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlRushEffectRate
// 0x0004 (0x0004 - 0x0000)
struct AppCheatManager_AtlRushEffectRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlRushEffectRate) == 0x000004, "Wrong alignment on AppCheatManager_AtlRushEffectRate");
static_assert(sizeof(AppCheatManager_AtlRushEffectRate) == 0x000004, "Wrong size on AppCheatManager_AtlRushEffectRate");
static_assert(offsetof(AppCheatManager_AtlRushEffectRate, Rate) == 0x000000, "Member 'AppCheatManager_AtlRushEffectRate::Rate' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlSaveDataAccessorMask
// 0x0010 (0x0010 - 0x0000)
struct AppCheatManager_AtlSaveDataAccessorMask final
{
public:
	class FString                                 Mask;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlSaveDataAccessorMask) == 0x000008, "Wrong alignment on AppCheatManager_AtlSaveDataAccessorMask");
static_assert(sizeof(AppCheatManager_AtlSaveDataAccessorMask) == 0x000010, "Wrong size on AppCheatManager_AtlSaveDataAccessorMask");
static_assert(offsetof(AppCheatManager_AtlSaveDataAccessorMask, Mask) == 0x000000, "Member 'AppCheatManager_AtlSaveDataAccessorMask::Mask' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlSaveDataConvert
// 0x0028 (0x0028 - 0x0000)
struct AppCheatManager_AtlSaveDataConvert final
{
public:
	class FString                                 Mode;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaveDataID;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppCheatManager_AtlSaveDataConvert) == 0x000008, "Wrong alignment on AppCheatManager_AtlSaveDataConvert");
static_assert(sizeof(AppCheatManager_AtlSaveDataConvert) == 0x000028, "Wrong size on AppCheatManager_AtlSaveDataConvert");
static_assert(offsetof(AppCheatManager_AtlSaveDataConvert, Mode) == 0x000000, "Member 'AppCheatManager_AtlSaveDataConvert::Mode' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlSaveDataConvert, SaveDataID) == 0x000010, "Member 'AppCheatManager_AtlSaveDataConvert::SaveDataID' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlSaveDataConvert, SlotIndex) == 0x000020, "Member 'AppCheatManager_AtlSaveDataConvert::SlotIndex' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlSetCameraTransform
// 0x0018 (0x0018 - 0x0000)
struct AppCheatManager_AtlSetCameraTransform final
{
public:
	float                                         PosX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosZ;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotX;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotY;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotZ;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlSetCameraTransform) == 0x000004, "Wrong alignment on AppCheatManager_AtlSetCameraTransform");
static_assert(sizeof(AppCheatManager_AtlSetCameraTransform) == 0x000018, "Wrong size on AppCheatManager_AtlSetCameraTransform");
static_assert(offsetof(AppCheatManager_AtlSetCameraTransform, PosX) == 0x000000, "Member 'AppCheatManager_AtlSetCameraTransform::PosX' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlSetCameraTransform, PosY) == 0x000004, "Member 'AppCheatManager_AtlSetCameraTransform::PosY' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlSetCameraTransform, PosZ) == 0x000008, "Member 'AppCheatManager_AtlSetCameraTransform::PosZ' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlSetCameraTransform, RotX) == 0x00000C, "Member 'AppCheatManager_AtlSetCameraTransform::RotX' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlSetCameraTransform, RotY) == 0x000010, "Member 'AppCheatManager_AtlSetCameraTransform::RotY' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlSetCameraTransform, RotZ) == 0x000014, "Member 'AppCheatManager_AtlSetCameraTransform::RotZ' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlSetDayTime
// 0x000C (0x000C - 0x0000)
struct AppCheatManager_AtlSetDayTime final
{
public:
	int32                                         Month;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlSetDayTime) == 0x000004, "Wrong alignment on AppCheatManager_AtlSetDayTime");
static_assert(sizeof(AppCheatManager_AtlSetDayTime) == 0x00000C, "Wrong size on AppCheatManager_AtlSetDayTime");
static_assert(offsetof(AppCheatManager_AtlSetDayTime, Month) == 0x000000, "Member 'AppCheatManager_AtlSetDayTime::Month' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlSetDayTime, Day) == 0x000004, "Member 'AppCheatManager_AtlSetDayTime::Day' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlSetDayTime, Time) == 0x000008, "Member 'AppCheatManager_AtlSetDayTime::Time' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlSetNextDayTime
// 0x000C (0x000C - 0x0000)
struct AppCheatManager_AtlSetNextDayTime final
{
public:
	int32                                         Month;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlSetNextDayTime) == 0x000004, "Wrong alignment on AppCheatManager_AtlSetNextDayTime");
static_assert(sizeof(AppCheatManager_AtlSetNextDayTime) == 0x00000C, "Wrong size on AppCheatManager_AtlSetNextDayTime");
static_assert(offsetof(AppCheatManager_AtlSetNextDayTime, Month) == 0x000000, "Member 'AppCheatManager_AtlSetNextDayTime::Month' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlSetNextDayTime, Day) == 0x000004, "Member 'AppCheatManager_AtlSetNextDayTime::Day' has a wrong offset!");
static_assert(offsetof(AppCheatManager_AtlSetNextDayTime, Time) == 0x000008, "Member 'AppCheatManager_AtlSetNextDayTime::Time' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlSetWorldTimeSec
// 0x0004 (0x0004 - 0x0000)
struct AppCheatManager_AtlSetWorldTimeSec final
{
public:
	float                                         Sec;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlSetWorldTimeSec) == 0x000004, "Wrong alignment on AppCheatManager_AtlSetWorldTimeSec");
static_assert(sizeof(AppCheatManager_AtlSetWorldTimeSec) == 0x000004, "Wrong size on AppCheatManager_AtlSetWorldTimeSec");
static_assert(offsetof(AppCheatManager_AtlSetWorldTimeSec, Sec) == 0x000000, "Member 'AppCheatManager_AtlSetWorldTimeSec::Sec' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlSoundConfigDevice
// 0x0004 (0x0004 - 0x0000)
struct AppCheatManager_AtlSoundConfigDevice final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlSoundConfigDevice) == 0x000004, "Wrong alignment on AppCheatManager_AtlSoundConfigDevice");
static_assert(sizeof(AppCheatManager_AtlSoundConfigDevice) == 0x000004, "Wrong size on AppCheatManager_AtlSoundConfigDevice");
static_assert(offsetof(AppCheatManager_AtlSoundConfigDevice, Index_0) == 0x000000, "Member 'AppCheatManager_AtlSoundConfigDevice::Index_0' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlUObjectLeakChecker
// 0x0001 (0x0001 - 0x0000)
struct AppCheatManager_AtlUObjectLeakChecker final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlUObjectLeakChecker) == 0x000001, "Wrong alignment on AppCheatManager_AtlUObjectLeakChecker");
static_assert(sizeof(AppCheatManager_AtlUObjectLeakChecker) == 0x000001, "Wrong size on AppCheatManager_AtlUObjectLeakChecker");
static_assert(offsetof(AppCheatManager_AtlUObjectLeakChecker, bEnable) == 0x000000, "Member 'AppCheatManager_AtlUObjectLeakChecker::bEnable' has a wrong offset!");

// Function xrd777.AppCheatManager.AtlWindowPosSaveEnable
// 0x0001 (0x0001 - 0x0000)
struct AppCheatManager_AtlWindowPosSaveEnable final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCheatManager_AtlWindowPosSaveEnable) == 0x000001, "Wrong alignment on AppCheatManager_AtlWindowPosSaveEnable");
static_assert(sizeof(AppCheatManager_AtlWindowPosSaveEnable) == 0x000001, "Wrong size on AppCheatManager_AtlWindowPosSaveEnable");
static_assert(offsetof(AppCheatManager_AtlWindowPosSaveEnable, bEnable) == 0x000000, "Member 'AppCheatManager_AtlWindowPosSaveEnable::bEnable' has a wrong offset!");

// Function xrd777.FldDbgEmMaker.SetScale
// 0x0010 (0x0010 - 0x0000)
struct FldDbgEmMaker_SetScale final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldDbgEmMaker_SetScale) == 0x000008, "Wrong alignment on FldDbgEmMaker_SetScale");
static_assert(sizeof(FldDbgEmMaker_SetScale) == 0x000010, "Wrong size on FldDbgEmMaker_SetScale");
static_assert(offsetof(FldDbgEmMaker_SetScale, Target) == 0x000000, "Member 'FldDbgEmMaker_SetScale::Target' has a wrong offset!");
static_assert(offsetof(FldDbgEmMaker_SetScale, Scale) == 0x000008, "Member 'FldDbgEmMaker_SetScale::Scale' has a wrong offset!");

// Function xrd777.ApplicationWindowState.OnFocusChangeBP
// 0x0001 (0x0001 - 0x0000)
struct ApplicationWindowState_OnFocusChangeBP final
{
public:
	bool                                          IsFocus;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ApplicationWindowState_OnFocusChangeBP) == 0x000001, "Wrong alignment on ApplicationWindowState_OnFocusChangeBP");
static_assert(sizeof(ApplicationWindowState_OnFocusChangeBP) == 0x000001, "Wrong size on ApplicationWindowState_OnFocusChangeBP");
static_assert(offsetof(ApplicationWindowState_OnFocusChangeBP, IsFocus) == 0x000000, "Member 'ApplicationWindowState_OnFocusChangeBP::IsFocus' has a wrong offset!");

// Function xrd777.AppNpcComp.SetCosTexID
// 0x0004 (0x0004 - 0x0000)
struct AppNpcComp_SetCosTexID final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppNpcComp_SetCosTexID) == 0x000004, "Wrong alignment on AppNpcComp_SetCosTexID");
static_assert(sizeof(AppNpcComp_SetCosTexID) == 0x000004, "Wrong size on AppNpcComp_SetCosTexID");
static_assert(offsetof(AppNpcComp_SetCosTexID, Index_0) == 0x000000, "Member 'AppNpcComp_SetCosTexID::Index_0' has a wrong offset!");

// Function xrd777.AppNpcComp.SetFootForBP
// 0x0004 (0x0004 - 0x0000)
struct AppNpcComp_SetFootForBP final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppNpcComp_SetFootForBP) == 0x000004, "Wrong alignment on AppNpcComp_SetFootForBP");
static_assert(sizeof(AppNpcComp_SetFootForBP) == 0x000004, "Wrong size on AppNpcComp_SetFootForBP");
static_assert(offsetof(AppNpcComp_SetFootForBP, ID) == 0x000000, "Member 'AppNpcComp_SetFootForBP::ID' has a wrong offset!");

// Function xrd777.AppNpcComp.GetBaseCore
// 0x0008 (0x0008 - 0x0000)
struct AppNpcComp_GetBaseCore final
{
public:
	class ANpcBaseCore*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppNpcComp_GetBaseCore) == 0x000008, "Wrong alignment on AppNpcComp_GetBaseCore");
static_assert(sizeof(AppNpcComp_GetBaseCore) == 0x000008, "Wrong size on AppNpcComp_GetBaseCore");
static_assert(offsetof(AppNpcComp_GetBaseCore, ReturnValue) == 0x000000, "Member 'AppNpcComp_GetBaseCore::ReturnValue' has a wrong offset!");

// Function xrd777.AppPauseableListener.AppPauseableEndPlay
// 0x0001 (0x0001 - 0x0000)
struct AppPauseableListener_AppPauseableEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPauseableListener_AppPauseableEndPlay) == 0x000001, "Wrong alignment on AppPauseableListener_AppPauseableEndPlay");
static_assert(sizeof(AppPauseableListener_AppPauseableEndPlay) == 0x000001, "Wrong size on AppPauseableListener_AppPauseableEndPlay");
static_assert(offsetof(AppPauseableListener_AppPauseableEndPlay, EndPlayReason) == 0x000000, "Member 'AppPauseableListener_AppPauseableEndPlay::EndPlayReason' has a wrong offset!");

// Function xrd777.AppPauseableListener.AsAActor
// 0x0008 (0x0008 - 0x0000)
struct AppPauseableListener_AsAActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPauseableListener_AsAActor) == 0x000008, "Wrong alignment on AppPauseableListener_AsAActor");
static_assert(sizeof(AppPauseableListener_AsAActor) == 0x000008, "Wrong size on AppPauseableListener_AsAActor");
static_assert(offsetof(AppPauseableListener_AsAActor, ReturnValue) == 0x000000, "Member 'AppPauseableListener_AsAActor::ReturnValue' has a wrong offset!");

// Function xrd777.AppPauseableListener.AsUObject
// 0x0008 (0x0008 - 0x0000)
struct AppPauseableListener_AsUObject final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPauseableListener_AsUObject) == 0x000008, "Wrong alignment on AppPauseableListener_AsUObject");
static_assert(sizeof(AppPauseableListener_AsUObject) == 0x000008, "Wrong size on AppPauseableListener_AsUObject");
static_assert(offsetof(AppPauseableListener_AsUObject, ReturnValue) == 0x000000, "Member 'AppPauseableListener_AsUObject::ReturnValue' has a wrong offset!");

// Function xrd777.AppPauseableListener.Paused
// 0x0001 (0x0001 - 0x0000)
struct AppPauseableListener_Paused final
{
public:
	EAppPauseType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPauseableListener_Paused) == 0x000001, "Wrong alignment on AppPauseableListener_Paused");
static_assert(sizeof(AppPauseableListener_Paused) == 0x000001, "Wrong size on AppPauseableListener_Paused");
static_assert(offsetof(AppPauseableListener_Paused, Type) == 0x000000, "Member 'AppPauseableListener_Paused::Type' has a wrong offset!");

// Function xrd777.AppPauseableListener.UnPaused
// 0x0001 (0x0001 - 0x0000)
struct AppPauseableListener_UnPaused final
{
public:
	EAppPauseType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPauseableListener_UnPaused) == 0x000001, "Wrong alignment on AppPauseableListener_UnPaused");
static_assert(sizeof(AppPauseableListener_UnPaused) == 0x000001, "Wrong size on AppPauseableListener_UnPaused");
static_assert(offsetof(AppPauseableListener_UnPaused, Type) == 0x000000, "Member 'AppPauseableListener_UnPaused::Type' has a wrong offset!");

// Function xrd777.AppPauseableListener.GetAppPauseFlags
// 0x0001 (0x0001 - 0x0000)
struct AppPauseableListener_GetAppPauseFlags final
{
public:
	EAppPauseObjectFlag                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPauseableListener_GetAppPauseFlags) == 0x000001, "Wrong alignment on AppPauseableListener_GetAppPauseFlags");
static_assert(sizeof(AppPauseableListener_GetAppPauseFlags) == 0x000001, "Wrong size on AppPauseableListener_GetAppPauseFlags");
static_assert(offsetof(AppPauseableListener_GetAppPauseFlags, ReturnValue) == 0x000000, "Member 'AppPauseableListener_GetAppPauseFlags::ReturnValue' has a wrong offset!");

// Function xrd777.AppPauseManagerSubsystem.IsPause
// 0x0002 (0x0002 - 0x0000)
struct AppPauseManagerSubsystem_IsPause final
{
public:
	EAppPauseType                                 PauseType;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPauseManagerSubsystem_IsPause) == 0x000001, "Wrong alignment on AppPauseManagerSubsystem_IsPause");
static_assert(sizeof(AppPauseManagerSubsystem_IsPause) == 0x000002, "Wrong size on AppPauseManagerSubsystem_IsPause");
static_assert(offsetof(AppPauseManagerSubsystem_IsPause, PauseType) == 0x000000, "Member 'AppPauseManagerSubsystem_IsPause::PauseType' has a wrong offset!");
static_assert(offsetof(AppPauseManagerSubsystem_IsPause, ReturnValue) == 0x000001, "Member 'AppPauseManagerSubsystem_IsPause::ReturnValue' has a wrong offset!");

// Function xrd777.AppPauseManagerSubsystem.Pause
// 0x0001 (0x0001 - 0x0000)
struct AppPauseManagerSubsystem_Pause final
{
public:
	EAppPauseType                                 InPauseType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPauseManagerSubsystem_Pause) == 0x000001, "Wrong alignment on AppPauseManagerSubsystem_Pause");
static_assert(sizeof(AppPauseManagerSubsystem_Pause) == 0x000001, "Wrong size on AppPauseManagerSubsystem_Pause");
static_assert(offsetof(AppPauseManagerSubsystem_Pause, InPauseType) == 0x000000, "Member 'AppPauseManagerSubsystem_Pause::InPauseType' has a wrong offset!");

// Function xrd777.AppPropsCardInterface.GetBackMaterial
// 0x0008 (0x0008 - 0x0000)
struct AppPropsCardInterface_GetBackMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPropsCardInterface_GetBackMaterial) == 0x000008, "Wrong alignment on AppPropsCardInterface_GetBackMaterial");
static_assert(sizeof(AppPropsCardInterface_GetBackMaterial) == 0x000008, "Wrong size on AppPropsCardInterface_GetBackMaterial");
static_assert(offsetof(AppPropsCardInterface_GetBackMaterial, ReturnValue) == 0x000000, "Member 'AppPropsCardInterface_GetBackMaterial::ReturnValue' has a wrong offset!");

// Function xrd777.AppPropsCardInterface.GetFrontMaterial
// 0x0008 (0x0008 - 0x0000)
struct AppPropsCardInterface_GetFrontMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPropsCardInterface_GetFrontMaterial) == 0x000008, "Wrong alignment on AppPropsCardInterface_GetFrontMaterial");
static_assert(sizeof(AppPropsCardInterface_GetFrontMaterial) == 0x000008, "Wrong size on AppPropsCardInterface_GetFrontMaterial");
static_assert(offsetof(AppPropsCardInterface_GetFrontMaterial, ReturnValue) == 0x000000, "Member 'AppPropsCardInterface_GetFrontMaterial::ReturnValue' has a wrong offset!");

// Function xrd777.AppPropsCardInterface.TarotCardSetup
// 0x000C (0x000C - 0x0000)
struct AppPropsCardInterface_TarotCardSetup final
{
public:
	struct FAppPropsCardParam                     Param;                                             // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPropsCardInterface_TarotCardSetup) == 0x000004, "Wrong alignment on AppPropsCardInterface_TarotCardSetup");
static_assert(sizeof(AppPropsCardInterface_TarotCardSetup) == 0x00000C, "Wrong size on AppPropsCardInterface_TarotCardSetup");
static_assert(offsetof(AppPropsCardInterface_TarotCardSetup, Param) == 0x000000, "Member 'AppPropsCardInterface_TarotCardSetup::Param' has a wrong offset!");

// Function xrd777.AppPropsCardInterface.TarotCardSync
// 0x0001 (0x0001 - 0x0000)
struct AppPropsCardInterface_TarotCardSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPropsCardInterface_TarotCardSync) == 0x000001, "Wrong alignment on AppPropsCardInterface_TarotCardSync");
static_assert(sizeof(AppPropsCardInterface_TarotCardSync) == 0x000001, "Wrong size on AppPropsCardInterface_TarotCardSync");
static_assert(offsetof(AppPropsCardInterface_TarotCardSync, ReturnValue) == 0x000000, "Member 'AppPropsCardInterface_TarotCardSync::ReturnValue' has a wrong offset!");

// Function xrd777.AppPropsCore.CompareToHiddenCharacter
// 0x000C (0x000C - 0x0000)
struct AppPropsCore_CompareToHiddenCharacter final
{
public:
	int32                                         LocalDataIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionalValue;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtConditionalBranchCompType                 CompareType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AppPropsCore_CompareToHiddenCharacter) == 0x000004, "Wrong alignment on AppPropsCore_CompareToHiddenCharacter");
static_assert(sizeof(AppPropsCore_CompareToHiddenCharacter) == 0x00000C, "Wrong size on AppPropsCore_CompareToHiddenCharacter");
static_assert(offsetof(AppPropsCore_CompareToHiddenCharacter, LocalDataIndex) == 0x000000, "Member 'AppPropsCore_CompareToHiddenCharacter::LocalDataIndex' has a wrong offset!");
static_assert(offsetof(AppPropsCore_CompareToHiddenCharacter, ConditionalValue) == 0x000004, "Member 'AppPropsCore_CompareToHiddenCharacter::ConditionalValue' has a wrong offset!");
static_assert(offsetof(AppPropsCore_CompareToHiddenCharacter, CompareType) == 0x000008, "Member 'AppPropsCore_CompareToHiddenCharacter::CompareType' has a wrong offset!");

// Function xrd777.AppPropsCore.PlayAnimationPack
// 0x001C (0x001C - 0x0000)
struct AppPropsCore_PlayAnimationPack final
{
public:
	int32                                         AnimePackIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimSlotName;                                      // 0x0014(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppPropsCore_PlayAnimationPack) == 0x000004, "Wrong alignment on AppPropsCore_PlayAnimationPack");
static_assert(sizeof(AppPropsCore_PlayAnimationPack) == 0x00001C, "Wrong size on AppPropsCore_PlayAnimationPack");
static_assert(offsetof(AppPropsCore_PlayAnimationPack, AnimePackIndex) == 0x000000, "Member 'AppPropsCore_PlayAnimationPack::AnimePackIndex' has a wrong offset!");
static_assert(offsetof(AppPropsCore_PlayAnimationPack, IsLoop) == 0x000004, "Member 'AppPropsCore_PlayAnimationPack::IsLoop' has a wrong offset!");
static_assert(offsetof(AppPropsCore_PlayAnimationPack, BlendInTime) == 0x000008, "Member 'AppPropsCore_PlayAnimationPack::BlendInTime' has a wrong offset!");
static_assert(offsetof(AppPropsCore_PlayAnimationPack, BlendOutTime) == 0x00000C, "Member 'AppPropsCore_PlayAnimationPack::BlendOutTime' has a wrong offset!");
static_assert(offsetof(AppPropsCore_PlayAnimationPack, InPlayRate) == 0x000010, "Member 'AppPropsCore_PlayAnimationPack::InPlayRate' has a wrong offset!");
static_assert(offsetof(AppPropsCore_PlayAnimationPack, AnimSlotName) == 0x000014, "Member 'AppPropsCore_PlayAnimationPack::AnimSlotName' has a wrong offset!");

// Function xrd777.AstreaFuncLib.GetCostumeAstreaDaily
// 0x0008 (0x0008 - 0x0000)
struct AstreaFuncLib_GetCostumeAstreaDaily final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_GetCostumeAstreaDaily) == 0x000004, "Wrong alignment on AstreaFuncLib_GetCostumeAstreaDaily");
static_assert(sizeof(AstreaFuncLib_GetCostumeAstreaDaily) == 0x000008, "Wrong size on AstreaFuncLib_GetCostumeAstreaDaily");
static_assert(offsetof(AstreaFuncLib_GetCostumeAstreaDaily, PlayerId) == 0x000000, "Member 'AstreaFuncLib_GetCostumeAstreaDaily::PlayerId' has a wrong offset!");
static_assert(offsetof(AstreaFuncLib_GetCostumeAstreaDaily, ReturnValue) == 0x000004, "Member 'AstreaFuncLib_GetCostumeAstreaDaily::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.GetCurrentDesignTypeId
// 0x0004 (0x0004 - 0x0000)
struct AstreaFuncLib_GetCurrentDesignTypeId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_GetCurrentDesignTypeId) == 0x000004, "Wrong alignment on AstreaFuncLib_GetCurrentDesignTypeId");
static_assert(sizeof(AstreaFuncLib_GetCurrentDesignTypeId) == 0x000004, "Wrong size on AstreaFuncLib_GetCurrentDesignTypeId");
static_assert(offsetof(AstreaFuncLib_GetCurrentDesignTypeId, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_GetCurrentDesignTypeId::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.GetCurrentEpisodeHero
// 0x0004 (0x0004 - 0x0000)
struct AstreaFuncLib_GetCurrentEpisodeHero final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_GetCurrentEpisodeHero) == 0x000004, "Wrong alignment on AstreaFuncLib_GetCurrentEpisodeHero");
static_assert(sizeof(AstreaFuncLib_GetCurrentEpisodeHero) == 0x000004, "Wrong size on AstreaFuncLib_GetCurrentEpisodeHero");
static_assert(offsetof(AstreaFuncLib_GetCurrentEpisodeHero, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_GetCurrentEpisodeHero::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.GetLibraSaveDataState
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_GetLibraSaveDataState final
{
public:
	ELibraSaveDataState                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_GetLibraSaveDataState) == 0x000001, "Wrong alignment on AstreaFuncLib_GetLibraSaveDataState");
static_assert(sizeof(AstreaFuncLib_GetLibraSaveDataState) == 0x000001, "Wrong size on AstreaFuncLib_GetLibraSaveDataState");
static_assert(offsetof(AstreaFuncLib_GetLibraSaveDataState, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_GetLibraSaveDataState::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsAbyssOfTimeField
// 0x000C (0x000C - 0x0000)
struct AstreaFuncLib_IsAbyssOfTimeField final
{
public:
	int32                                         FieldMajorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AstreaFuncLib_IsAbyssOfTimeField) == 0x000004, "Wrong alignment on AstreaFuncLib_IsAbyssOfTimeField");
static_assert(sizeof(AstreaFuncLib_IsAbyssOfTimeField) == 0x00000C, "Wrong size on AstreaFuncLib_IsAbyssOfTimeField");
static_assert(offsetof(AstreaFuncLib_IsAbyssOfTimeField, FieldMajorID) == 0x000000, "Member 'AstreaFuncLib_IsAbyssOfTimeField::FieldMajorID' has a wrong offset!");
static_assert(offsetof(AstreaFuncLib_IsAbyssOfTimeField, FieldMinorID) == 0x000004, "Member 'AstreaFuncLib_IsAbyssOfTimeField::FieldMinorID' has a wrong offset!");
static_assert(offsetof(AstreaFuncLib_IsAbyssOfTimeField, ReturnValue) == 0x000008, "Member 'AstreaFuncLib_IsAbyssOfTimeField::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsAstreaField
// 0x000C (0x000C - 0x0000)
struct AstreaFuncLib_IsAstreaField final
{
public:
	int32                                         FieldMajorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AstreaFuncLib_IsAstreaField) == 0x000004, "Wrong alignment on AstreaFuncLib_IsAstreaField");
static_assert(sizeof(AstreaFuncLib_IsAstreaField) == 0x00000C, "Wrong size on AstreaFuncLib_IsAstreaField");
static_assert(offsetof(AstreaFuncLib_IsAstreaField, FieldMajorID) == 0x000000, "Member 'AstreaFuncLib_IsAstreaField::FieldMajorID' has a wrong offset!");
static_assert(offsetof(AstreaFuncLib_IsAstreaField, FieldMinorID) == 0x000004, "Member 'AstreaFuncLib_IsAstreaField::FieldMinorID' has a wrong offset!");
static_assert(offsetof(AstreaFuncLib_IsAstreaField, ReturnValue) == 0x000008, "Member 'AstreaFuncLib_IsAstreaField::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsAvailableAstrea
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_IsAvailableAstrea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_IsAvailableAstrea) == 0x000001, "Wrong alignment on AstreaFuncLib_IsAvailableAstrea");
static_assert(sizeof(AstreaFuncLib_IsAvailableAstrea) == 0x000001, "Wrong size on AstreaFuncLib_IsAvailableAstrea");
static_assert(offsetof(AstreaFuncLib_IsAvailableAstrea, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_IsAvailableAstrea::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsColosseumBattle
// 0x0008 (0x0008 - 0x0000)
struct AstreaFuncLib_IsColosseumBattle final
{
public:
	int32                                         EncounterID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AstreaFuncLib_IsColosseumBattle) == 0x000004, "Wrong alignment on AstreaFuncLib_IsColosseumBattle");
static_assert(sizeof(AstreaFuncLib_IsColosseumBattle) == 0x000008, "Wrong size on AstreaFuncLib_IsColosseumBattle");
static_assert(offsetof(AstreaFuncLib_IsColosseumBattle, EncounterID) == 0x000000, "Member 'AstreaFuncLib_IsColosseumBattle::EncounterID' has a wrong offset!");
static_assert(offsetof(AstreaFuncLib_IsColosseumBattle, ReturnValue) == 0x000004, "Member 'AstreaFuncLib_IsColosseumBattle::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsCurrentEpisodeMember
// 0x0008 (0x0008 - 0x0000)
struct AstreaFuncLib_IsCurrentEpisodeMember final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AstreaFuncLib_IsCurrentEpisodeMember) == 0x000004, "Wrong alignment on AstreaFuncLib_IsCurrentEpisodeMember");
static_assert(sizeof(AstreaFuncLib_IsCurrentEpisodeMember) == 0x000008, "Wrong size on AstreaFuncLib_IsCurrentEpisodeMember");
static_assert(offsetof(AstreaFuncLib_IsCurrentEpisodeMember, PlayerId) == 0x000000, "Member 'AstreaFuncLib_IsCurrentEpisodeMember::PlayerId' has a wrong offset!");
static_assert(offsetof(AstreaFuncLib_IsCurrentEpisodeMember, ReturnValue) == 0x000004, "Member 'AstreaFuncLib_IsCurrentEpisodeMember::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsDateUnknown
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_IsDateUnknown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_IsDateUnknown) == 0x000001, "Wrong alignment on AstreaFuncLib_IsDateUnknown");
static_assert(sizeof(AstreaFuncLib_IsDateUnknown) == 0x000001, "Wrong size on AstreaFuncLib_IsDateUnknown");
static_assert(offsetof(AstreaFuncLib_IsDateUnknown, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_IsDateUnknown::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsDateUnknowText
// 0x0018 (0x0018 - 0x0000)
struct AstreaFuncLib_IsDateUnknowText final
{
public:
	class FString                                 Date;                                              // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AstreaFuncLib_IsDateUnknowText) == 0x000008, "Wrong alignment on AstreaFuncLib_IsDateUnknowText");
static_assert(sizeof(AstreaFuncLib_IsDateUnknowText) == 0x000018, "Wrong size on AstreaFuncLib_IsDateUnknowText");
static_assert(offsetof(AstreaFuncLib_IsDateUnknowText, Date) == 0x000000, "Member 'AstreaFuncLib_IsDateUnknowText::Date' has a wrong offset!");
static_assert(offsetof(AstreaFuncLib_IsDateUnknowText, ReturnValue) == 0x000010, "Member 'AstreaFuncLib_IsDateUnknowText::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsEnableAstreaSaveFormat
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_IsEnableAstreaSaveFormat final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_IsEnableAstreaSaveFormat) == 0x000001, "Wrong alignment on AstreaFuncLib_IsEnableAstreaSaveFormat");
static_assert(sizeof(AstreaFuncLib_IsEnableAstreaSaveFormat) == 0x000001, "Wrong size on AstreaFuncLib_IsEnableAstreaSaveFormat");
static_assert(offsetof(AstreaFuncLib_IsEnableAstreaSaveFormat, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_IsEnableAstreaSaveFormat::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsExtraEpisodeMember
// 0x0008 (0x0008 - 0x0000)
struct AstreaFuncLib_IsExtraEpisodeMember final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AstreaFuncLib_IsExtraEpisodeMember) == 0x000004, "Wrong alignment on AstreaFuncLib_IsExtraEpisodeMember");
static_assert(sizeof(AstreaFuncLib_IsExtraEpisodeMember) == 0x000008, "Wrong size on AstreaFuncLib_IsExtraEpisodeMember");
static_assert(offsetof(AstreaFuncLib_IsExtraEpisodeMember, PlayerId) == 0x000000, "Member 'AstreaFuncLib_IsExtraEpisodeMember::PlayerId' has a wrong offset!");
static_assert(offsetof(AstreaFuncLib_IsExtraEpisodeMember, ReturnValue) == 0x000004, "Member 'AstreaFuncLib_IsExtraEpisodeMember::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsLongRangeAttackEnhanced
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_IsLongRangeAttackEnhanced final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_IsLongRangeAttackEnhanced) == 0x000001, "Wrong alignment on AstreaFuncLib_IsLongRangeAttackEnhanced");
static_assert(sizeof(AstreaFuncLib_IsLongRangeAttackEnhanced) == 0x000001, "Wrong size on AstreaFuncLib_IsLongRangeAttackEnhanced");
static_assert(offsetof(AstreaFuncLib_IsLongRangeAttackEnhanced, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_IsLongRangeAttackEnhanced::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsMonadoBattle
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_IsMonadoBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_IsMonadoBattle) == 0x000001, "Wrong alignment on AstreaFuncLib_IsMonadoBattle");
static_assert(sizeof(AstreaFuncLib_IsMonadoBattle) == 0x000001, "Wrong size on AstreaFuncLib_IsMonadoBattle");
static_assert(offsetof(AstreaFuncLib_IsMonadoBattle, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_IsMonadoBattle::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsOpenedAddAstreaMsg
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_IsOpenedAddAstreaMsg final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_IsOpenedAddAstreaMsg) == 0x000001, "Wrong alignment on AstreaFuncLib_IsOpenedAddAstreaMsg");
static_assert(sizeof(AstreaFuncLib_IsOpenedAddAstreaMsg) == 0x000001, "Wrong size on AstreaFuncLib_IsOpenedAddAstreaMsg");
static_assert(offsetof(AstreaFuncLib_IsOpenedAddAstreaMsg, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_IsOpenedAddAstreaMsg::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsOriginEpisodeMember
// 0x0008 (0x0008 - 0x0000)
struct AstreaFuncLib_IsOriginEpisodeMember final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AstreaFuncLib_IsOriginEpisodeMember) == 0x000004, "Wrong alignment on AstreaFuncLib_IsOriginEpisodeMember");
static_assert(sizeof(AstreaFuncLib_IsOriginEpisodeMember) == 0x000008, "Wrong size on AstreaFuncLib_IsOriginEpisodeMember");
static_assert(offsetof(AstreaFuncLib_IsOriginEpisodeMember, PlayerId) == 0x000000, "Member 'AstreaFuncLib_IsOriginEpisodeMember::PlayerId' has a wrong offset!");
static_assert(offsetof(AstreaFuncLib_IsOriginEpisodeMember, ReturnValue) == 0x000004, "Member 'AstreaFuncLib_IsOriginEpisodeMember::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsPlayingAstrea
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_IsPlayingAstrea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_IsPlayingAstrea) == 0x000001, "Wrong alignment on AstreaFuncLib_IsPlayingAstrea");
static_assert(sizeof(AstreaFuncLib_IsPlayingAstrea) == 0x000001, "Wrong size on AstreaFuncLib_IsPlayingAstrea");
static_assert(offsetof(AstreaFuncLib_IsPlayingAstrea, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_IsPlayingAstrea::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsRequestDisplayNetworkSlot
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_IsRequestDisplayNetworkSlot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_IsRequestDisplayNetworkSlot) == 0x000001, "Wrong alignment on AstreaFuncLib_IsRequestDisplayNetworkSlot");
static_assert(sizeof(AstreaFuncLib_IsRequestDisplayNetworkSlot) == 0x000001, "Wrong size on AstreaFuncLib_IsRequestDisplayNetworkSlot");
static_assert(offsetof(AstreaFuncLib_IsRequestDisplayNetworkSlot, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_IsRequestDisplayNetworkSlot::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsUnlockAstrea
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_IsUnlockAstrea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_IsUnlockAstrea) == 0x000001, "Wrong alignment on AstreaFuncLib_IsUnlockAstrea");
static_assert(sizeof(AstreaFuncLib_IsUnlockAstrea) == 0x000001, "Wrong size on AstreaFuncLib_IsUnlockAstrea");
static_assert(offsetof(AstreaFuncLib_IsUnlockAstrea, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_IsUnlockAstrea::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsUsingAstreaPersonaBook
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_IsUsingAstreaPersonaBook final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_IsUsingAstreaPersonaBook) == 0x000001, "Wrong alignment on AstreaFuncLib_IsUsingAstreaPersonaBook");
static_assert(sizeof(AstreaFuncLib_IsUsingAstreaPersonaBook) == 0x000001, "Wrong size on AstreaFuncLib_IsUsingAstreaPersonaBook");
static_assert(offsetof(AstreaFuncLib_IsUsingAstreaPersonaBook, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_IsUsingAstreaPersonaBook::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.IsUsingAstreaSavedata
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_IsUsingAstreaSavedata final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_IsUsingAstreaSavedata) == 0x000001, "Wrong alignment on AstreaFuncLib_IsUsingAstreaSavedata");
static_assert(sizeof(AstreaFuncLib_IsUsingAstreaSavedata) == 0x000001, "Wrong size on AstreaFuncLib_IsUsingAstreaSavedata");
static_assert(offsetof(AstreaFuncLib_IsUsingAstreaSavedata, ReturnValue) == 0x000000, "Member 'AstreaFuncLib_IsUsingAstreaSavedata::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.ReplaceContentRootPath
// 0x0020 (0x0020 - 0x0000)
struct AstreaFuncLib_ReplaceContentRootPath final
{
public:
	class FString                                 InOriginal;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_ReplaceContentRootPath) == 0x000008, "Wrong alignment on AstreaFuncLib_ReplaceContentRootPath");
static_assert(sizeof(AstreaFuncLib_ReplaceContentRootPath) == 0x000020, "Wrong size on AstreaFuncLib_ReplaceContentRootPath");
static_assert(offsetof(AstreaFuncLib_ReplaceContentRootPath, InOriginal) == 0x000000, "Member 'AstreaFuncLib_ReplaceContentRootPath::InOriginal' has a wrong offset!");
static_assert(offsetof(AstreaFuncLib_ReplaceContentRootPath, ReturnValue) == 0x000010, "Member 'AstreaFuncLib_ReplaceContentRootPath::ReturnValue' has a wrong offset!");

// Function xrd777.AstreaFuncLib.SetLibraSaveDataState
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_SetLibraSaveDataState final
{
public:
	ELibraSaveDataState                           SaveDataState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_SetLibraSaveDataState) == 0x000001, "Wrong alignment on AstreaFuncLib_SetLibraSaveDataState");
static_assert(sizeof(AstreaFuncLib_SetLibraSaveDataState) == 0x000001, "Wrong size on AstreaFuncLib_SetLibraSaveDataState");
static_assert(offsetof(AstreaFuncLib_SetLibraSaveDataState, SaveDataState) == 0x000000, "Member 'AstreaFuncLib_SetLibraSaveDataState::SaveDataState' has a wrong offset!");

// Function xrd777.AstreaFuncLib.SetOpenAddAstreaMsg
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_SetOpenAddAstreaMsg final
{
public:
	bool                                          bIsOpen;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_SetOpenAddAstreaMsg) == 0x000001, "Wrong alignment on AstreaFuncLib_SetOpenAddAstreaMsg");
static_assert(sizeof(AstreaFuncLib_SetOpenAddAstreaMsg) == 0x000001, "Wrong size on AstreaFuncLib_SetOpenAddAstreaMsg");
static_assert(offsetof(AstreaFuncLib_SetOpenAddAstreaMsg, bIsOpen) == 0x000000, "Member 'AstreaFuncLib_SetOpenAddAstreaMsg::bIsOpen' has a wrong offset!");

// Function xrd777.AstreaFuncLib.SetPlayingAstrea
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_SetPlayingAstrea final
{
public:
	bool                                          bPlaying;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_SetPlayingAstrea) == 0x000001, "Wrong alignment on AstreaFuncLib_SetPlayingAstrea");
static_assert(sizeof(AstreaFuncLib_SetPlayingAstrea) == 0x000001, "Wrong size on AstreaFuncLib_SetPlayingAstrea");
static_assert(offsetof(AstreaFuncLib_SetPlayingAstrea, bPlaying) == 0x000000, "Member 'AstreaFuncLib_SetPlayingAstrea::bPlaying' has a wrong offset!");

// Function xrd777.AstreaFuncLib.SetRequestDisplayNetworkSlot
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_SetRequestDisplayNetworkSlot final
{
public:
	bool                                          bIsDisplay;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_SetRequestDisplayNetworkSlot) == 0x000001, "Wrong alignment on AstreaFuncLib_SetRequestDisplayNetworkSlot");
static_assert(sizeof(AstreaFuncLib_SetRequestDisplayNetworkSlot) == 0x000001, "Wrong size on AstreaFuncLib_SetRequestDisplayNetworkSlot");
static_assert(offsetof(AstreaFuncLib_SetRequestDisplayNetworkSlot, bIsDisplay) == 0x000000, "Member 'AstreaFuncLib_SetRequestDisplayNetworkSlot::bIsDisplay' has a wrong offset!");

// Function xrd777.AstreaFuncLib.SetUsingAstreaSaveData
// 0x0001 (0x0001 - 0x0000)
struct AstreaFuncLib_SetUsingAstreaSaveData final
{
public:
	bool                                          bUsingAstrea;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaFuncLib_SetUsingAstreaSaveData) == 0x000001, "Wrong alignment on AstreaFuncLib_SetUsingAstreaSaveData");
static_assert(sizeof(AstreaFuncLib_SetUsingAstreaSaveData) == 0x000001, "Wrong size on AstreaFuncLib_SetUsingAstreaSaveData");
static_assert(offsetof(AstreaFuncLib_SetUsingAstreaSaveData, bUsingAstrea) == 0x000000, "Member 'AstreaFuncLib_SetUsingAstreaSaveData::bUsingAstrea' has a wrong offset!");

// Function xrd777.AstreaProgressProcActor.OnFinishedAtlScr
// 0x0004 (0x0004 - 0x0000)
struct AstreaProgressProcActor_OnFinishedAtlScr final
{
public:
	int32                                         ExitType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaProgressProcActor_OnFinishedAtlScr) == 0x000004, "Wrong alignment on AstreaProgressProcActor_OnFinishedAtlScr");
static_assert(sizeof(AstreaProgressProcActor_OnFinishedAtlScr) == 0x000004, "Wrong size on AstreaProgressProcActor_OnFinishedAtlScr");
static_assert(offsetof(AstreaProgressProcActor_OnFinishedAtlScr, ExitType) == 0x000000, "Member 'AstreaProgressProcActor_OnFinishedAtlScr::ExitType' has a wrong offset!");

// Function xrd777.AstreaProgressProcActor.OnFinishedProc
// 0x0004 (0x0004 - 0x0000)
struct AstreaProgressProcActor_OnFinishedProc final
{
public:
	int32                                         ExitType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AstreaProgressProcActor_OnFinishedProc) == 0x000004, "Wrong alignment on AstreaProgressProcActor_OnFinishedProc");
static_assert(sizeof(AstreaProgressProcActor_OnFinishedProc) == 0x000004, "Wrong size on AstreaProgressProcActor_OnFinishedProc");
static_assert(offsetof(AstreaProgressProcActor_OnFinishedProc, ExitType) == 0x000000, "Member 'AstreaProgressProcActor_OnFinishedProc::ExitType' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.CalcEvtLocomotionTeleportVelocity
// 0x0028 (0x0028 - 0x0000)
struct AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity final
{
public:
	struct FVector                                SimVelocity;                                       // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PrevSimVelocity;                                   // 0x000C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityRate;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity) == 0x000004, "Wrong alignment on AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity");
static_assert(sizeof(AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity) == 0x000028, "Wrong size on AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity");
static_assert(offsetof(AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity, SimVelocity) == 0x000000, "Member 'AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity::SimVelocity' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity, PrevSimVelocity) == 0x00000C, "Member 'AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity::PrevSimVelocity' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity, VelocityRate) == 0x000018, "Member 'AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity::VelocityRate' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity, ReturnValue) == 0x00001C, "Member 'AtlEvtActorComponent_CalcEvtLocomotionTeleportVelocity::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.CompareToHiddenCharacter
// 0x000C (0x000C - 0x0000)
struct AtlEvtActorComponent_CompareToHiddenCharacter final
{
public:
	int32                                         LocalDataIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConditionalValue;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtConditionalBranchCompType                 CompareType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlEvtActorComponent_CompareToHiddenCharacter) == 0x000004, "Wrong alignment on AtlEvtActorComponent_CompareToHiddenCharacter");
static_assert(sizeof(AtlEvtActorComponent_CompareToHiddenCharacter) == 0x00000C, "Wrong size on AtlEvtActorComponent_CompareToHiddenCharacter");
static_assert(offsetof(AtlEvtActorComponent_CompareToHiddenCharacter, LocalDataIndex) == 0x000000, "Member 'AtlEvtActorComponent_CompareToHiddenCharacter::LocalDataIndex' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_CompareToHiddenCharacter, ConditionalValue) == 0x000004, "Member 'AtlEvtActorComponent_CompareToHiddenCharacter::ConditionalValue' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_CompareToHiddenCharacter, CompareType) == 0x000008, "Member 'AtlEvtActorComponent_CompareToHiddenCharacter::CompareType' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.SetEnableAtlEvtLocomotionVelocitySimulation
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtActorComponent_SetEnableAtlEvtLocomotionVelocitySimulation final
{
public:
	bool                                          bInEnableAtlEvtLocomotionVelocitySimulation;       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_SetEnableAtlEvtLocomotionVelocitySimulation) == 0x000001, "Wrong alignment on AtlEvtActorComponent_SetEnableAtlEvtLocomotionVelocitySimulation");
static_assert(sizeof(AtlEvtActorComponent_SetEnableAtlEvtLocomotionVelocitySimulation) == 0x000001, "Wrong size on AtlEvtActorComponent_SetEnableAtlEvtLocomotionVelocitySimulation");
static_assert(offsetof(AtlEvtActorComponent_SetEnableAtlEvtLocomotionVelocitySimulation, bInEnableAtlEvtLocomotionVelocitySimulation) == 0x000000, "Member 'AtlEvtActorComponent_SetEnableAtlEvtLocomotionVelocitySimulation::bInEnableAtlEvtLocomotionVelocitySimulation' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.SetEnableBag
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtActorComponent_SetEnableBag final
{
public:
	bool                                          bInEnableAtlEvtBag;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_SetEnableBag) == 0x000001, "Wrong alignment on AtlEvtActorComponent_SetEnableBag");
static_assert(sizeof(AtlEvtActorComponent_SetEnableBag) == 0x000001, "Wrong size on AtlEvtActorComponent_SetEnableBag");
static_assert(offsetof(AtlEvtActorComponent_SetEnableBag, bInEnableAtlEvtBag) == 0x000000, "Member 'AtlEvtActorComponent_SetEnableBag::bInEnableAtlEvtBag' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.SetLocomotionTeleportVelocityType
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtActorComponent_SetLocomotionTeleportVelocityType final
{
public:
	EAtlEvtLocomotionTeleportVelocityType         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_SetLocomotionTeleportVelocityType) == 0x000001, "Wrong alignment on AtlEvtActorComponent_SetLocomotionTeleportVelocityType");
static_assert(sizeof(AtlEvtActorComponent_SetLocomotionTeleportVelocityType) == 0x000001, "Wrong size on AtlEvtActorComponent_SetLocomotionTeleportVelocityType");
static_assert(offsetof(AtlEvtActorComponent_SetLocomotionTeleportVelocityType, Type) == 0x000000, "Member 'AtlEvtActorComponent_SetLocomotionTeleportVelocityType::Type' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.SetOverrideAnimPackID
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtActorComponent_SetOverrideAnimPackID final
{
public:
	EAnimPackID                                   InAnimPackID;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_SetOverrideAnimPackID) == 0x000001, "Wrong alignment on AtlEvtActorComponent_SetOverrideAnimPackID");
static_assert(sizeof(AtlEvtActorComponent_SetOverrideAnimPackID) == 0x000001, "Wrong size on AtlEvtActorComponent_SetOverrideAnimPackID");
static_assert(offsetof(AtlEvtActorComponent_SetOverrideAnimPackID, InAnimPackID) == 0x000000, "Member 'AtlEvtActorComponent_SetOverrideAnimPackID::InAnimPackID' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.SetOverwriteDettachPropTransform
// 0x0030 (0x0030 - 0x0000)
struct AtlEvtActorComponent_SetOverwriteDettachPropTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_SetOverwriteDettachPropTransform) == 0x000010, "Wrong alignment on AtlEvtActorComponent_SetOverwriteDettachPropTransform");
static_assert(sizeof(AtlEvtActorComponent_SetOverwriteDettachPropTransform) == 0x000030, "Wrong size on AtlEvtActorComponent_SetOverwriteDettachPropTransform");
static_assert(offsetof(AtlEvtActorComponent_SetOverwriteDettachPropTransform, Transform) == 0x000000, "Member 'AtlEvtActorComponent_SetOverwriteDettachPropTransform::Transform' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.SetShoesId
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtActorComponent_SetShoesId final
{
public:
	EAppCharShoesID                               ID;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_SetShoesId) == 0x000001, "Wrong alignment on AtlEvtActorComponent_SetShoesId");
static_assert(sizeof(AtlEvtActorComponent_SetShoesId) == 0x000001, "Wrong size on AtlEvtActorComponent_SetShoesId");
static_assert(offsetof(AtlEvtActorComponent_SetShoesId, ID) == 0x000000, "Member 'AtlEvtActorComponent_SetShoesId::ID' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.SetUseAnimPack
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtActorComponent_SetUseAnimPack final
{
public:
	bool                                          bInUseAnimPack;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_SetUseAnimPack) == 0x000001, "Wrong alignment on AtlEvtActorComponent_SetUseAnimPack");
static_assert(sizeof(AtlEvtActorComponent_SetUseAnimPack) == 0x000001, "Wrong size on AtlEvtActorComponent_SetUseAnimPack");
static_assert(offsetof(AtlEvtActorComponent_SetUseAnimPack, bInUseAnimPack) == 0x000000, "Member 'AtlEvtActorComponent_SetUseAnimPack::bInUseAnimPack' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.SpawnHandwritingAttached
// 0x0048 (0x0048 - 0x0000)
struct AtlEvtActorComponent_SpawnHandwritingAttached final
{
public:
	EAtlEvtHandwritingType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoopCount;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraOffset;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttached;                                         // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHandwritingSpawner*                    ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_SpawnHandwritingAttached) == 0x000008, "Wrong alignment on AtlEvtActorComponent_SpawnHandwritingAttached");
static_assert(sizeof(AtlEvtActorComponent_SpawnHandwritingAttached) == 0x000048, "Wrong size on AtlEvtActorComponent_SpawnHandwritingAttached");
static_assert(offsetof(AtlEvtActorComponent_SpawnHandwritingAttached, Type) == 0x000000, "Member 'AtlEvtActorComponent_SpawnHandwritingAttached::Type' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_SpawnHandwritingAttached, LoopCount) == 0x000004, "Member 'AtlEvtActorComponent_SpawnHandwritingAttached::LoopCount' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_SpawnHandwritingAttached, CameraOffset) == 0x000008, "Member 'AtlEvtActorComponent_SpawnHandwritingAttached::CameraOffset' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_SpawnHandwritingAttached, AttachPointName) == 0x00000C, "Member 'AtlEvtActorComponent_SpawnHandwritingAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_SpawnHandwritingAttached, Location) == 0x000014, "Member 'AtlEvtActorComponent_SpawnHandwritingAttached::Location' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_SpawnHandwritingAttached, Rotation) == 0x000020, "Member 'AtlEvtActorComponent_SpawnHandwritingAttached::Rotation' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_SpawnHandwritingAttached, Scale) == 0x00002C, "Member 'AtlEvtActorComponent_SpawnHandwritingAttached::Scale' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_SpawnHandwritingAttached, bAttached) == 0x000038, "Member 'AtlEvtActorComponent_SpawnHandwritingAttached::bAttached' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_SpawnHandwritingAttached, ReturnValue) == 0x000040, "Member 'AtlEvtActorComponent_SpawnHandwritingAttached::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.SpawnHandwritingAttachedDefaultParam
// 0x0010 (0x0010 - 0x0000)
struct AtlEvtActorComponent_SpawnHandwritingAttachedDefaultParam final
{
public:
	EAtlEvtHandwritingType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttached;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHandwritingSpawner*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_SpawnHandwritingAttachedDefaultParam) == 0x000008, "Wrong alignment on AtlEvtActorComponent_SpawnHandwritingAttachedDefaultParam");
static_assert(sizeof(AtlEvtActorComponent_SpawnHandwritingAttachedDefaultParam) == 0x000010, "Wrong size on AtlEvtActorComponent_SpawnHandwritingAttachedDefaultParam");
static_assert(offsetof(AtlEvtActorComponent_SpawnHandwritingAttachedDefaultParam, Type) == 0x000000, "Member 'AtlEvtActorComponent_SpawnHandwritingAttachedDefaultParam::Type' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_SpawnHandwritingAttachedDefaultParam, bAttached) == 0x000001, "Member 'AtlEvtActorComponent_SpawnHandwritingAttachedDefaultParam::bAttached' has a wrong offset!");
static_assert(offsetof(AtlEvtActorComponent_SpawnHandwritingAttachedDefaultParam, ReturnValue) == 0x000008, "Member 'AtlEvtActorComponent_SpawnHandwritingAttachedDefaultParam::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.GetLocomotionTeleportVelocityType
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtActorComponent_GetLocomotionTeleportVelocityType final
{
public:
	EAtlEvtLocomotionTeleportVelocityType         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_GetLocomotionTeleportVelocityType) == 0x000001, "Wrong alignment on AtlEvtActorComponent_GetLocomotionTeleportVelocityType");
static_assert(sizeof(AtlEvtActorComponent_GetLocomotionTeleportVelocityType) == 0x000001, "Wrong size on AtlEvtActorComponent_GetLocomotionTeleportVelocityType");
static_assert(offsetof(AtlEvtActorComponent_GetLocomotionTeleportVelocityType, ReturnValue) == 0x000000, "Member 'AtlEvtActorComponent_GetLocomotionTeleportVelocityType::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.GetShoesID
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtActorComponent_GetShoesID final
{
public:
	EAppCharShoesID                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_GetShoesID) == 0x000001, "Wrong alignment on AtlEvtActorComponent_GetShoesID");
static_assert(sizeof(AtlEvtActorComponent_GetShoesID) == 0x000001, "Wrong size on AtlEvtActorComponent_GetShoesID");
static_assert(offsetof(AtlEvtActorComponent_GetShoesID, ReturnValue) == 0x000000, "Member 'AtlEvtActorComponent_GetShoesID::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.IsEnableBag
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtActorComponent_IsEnableBag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_IsEnableBag) == 0x000001, "Wrong alignment on AtlEvtActorComponent_IsEnableBag");
static_assert(sizeof(AtlEvtActorComponent_IsEnableBag) == 0x000001, "Wrong size on AtlEvtActorComponent_IsEnableBag");
static_assert(offsetof(AtlEvtActorComponent_IsEnableBag, ReturnValue) == 0x000000, "Member 'AtlEvtActorComponent_IsEnableBag::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.IsEnableLocomotionVelocitySimulate
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtActorComponent_IsEnableLocomotionVelocitySimulate final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_IsEnableLocomotionVelocitySimulate) == 0x000001, "Wrong alignment on AtlEvtActorComponent_IsEnableLocomotionVelocitySimulate");
static_assert(sizeof(AtlEvtActorComponent_IsEnableLocomotionVelocitySimulate) == 0x000001, "Wrong size on AtlEvtActorComponent_IsEnableLocomotionVelocitySimulate");
static_assert(offsetof(AtlEvtActorComponent_IsEnableLocomotionVelocitySimulate, ReturnValue) == 0x000000, "Member 'AtlEvtActorComponent_IsEnableLocomotionVelocitySimulate::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtActorComponent.IsUseAnimPack
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtActorComponent_IsUseAnimPack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtActorComponent_IsUseAnimPack) == 0x000001, "Wrong alignment on AtlEvtActorComponent_IsUseAnimPack");
static_assert(sizeof(AtlEvtActorComponent_IsUseAnimPack) == 0x000001, "Wrong size on AtlEvtActorComponent_IsUseAnimPack");
static_assert(offsetof(AtlEvtActorComponent_IsUseAnimPack, ReturnValue) == 0x000000, "Member 'AtlEvtActorComponent_IsUseAnimPack::ReturnValue' has a wrong offset!");

// Function xrd777.Loading.SpawnDrawActor
// 0x0008 (0x0008 - 0x0000)
struct Loading_SpawnDrawActor final
{
public:
	class ALoadingDraw*                           LoadingDraw;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Loading_SpawnDrawActor) == 0x000008, "Wrong alignment on Loading_SpawnDrawActor");
static_assert(sizeof(Loading_SpawnDrawActor) == 0x000008, "Wrong size on Loading_SpawnDrawActor");
static_assert(offsetof(Loading_SpawnDrawActor, LoadingDraw) == 0x000000, "Member 'Loading_SpawnDrawActor::LoadingDraw' has a wrong offset!");

// Function xrd777.Loading.Start
// 0x0001 (0x0001 - 0x0000)
struct Loading_Start final
{
public:
	ECldTimeZone                                  Time;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Loading_Start) == 0x000001, "Wrong alignment on Loading_Start");
static_assert(sizeof(Loading_Start) == 0x000001, "Wrong size on Loading_Start");
static_assert(offsetof(Loading_Start, Time) == 0x000000, "Member 'Loading_Start::Time' has a wrong offset!");

// Function xrd777.KimuraURO.Enable
// 0x0001 (0x0001 - 0x0000)
struct KimuraURO_Enable final
{
public:
	bool                                          F;                                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KimuraURO_Enable) == 0x000001, "Wrong alignment on KimuraURO_Enable");
static_assert(sizeof(KimuraURO_Enable) == 0x000001, "Wrong size on KimuraURO_Enable");
static_assert(offsetof(KimuraURO_Enable, F) == 0x000000, "Member 'KimuraURO_Enable::F' has a wrong offset!");

// Function xrd777.KimuraURO.Update
// 0x0010 (0x0010 - 0x0000)
struct KimuraURO_Update final
{
public:
	TArray<float>                                 V;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KimuraURO_Update) == 0x000008, "Wrong alignment on KimuraURO_Update");
static_assert(sizeof(KimuraURO_Update) == 0x000010, "Wrong size on KimuraURO_Update");
static_assert(offsetof(KimuraURO_Update, V) == 0x000000, "Member 'KimuraURO_Update::V' has a wrong offset!");

// Function xrd777.AtlEvtEventEditHelper.SetPreviewCrowdSettings
// 0x000C (0x000C - 0x0000)
struct AtlEvtEventEditHelper_SetPreviewCrowdSettings final
{
public:
	int32                                         InCrowdMonth;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCrowdDay;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldTimeZone                                  InCrowdTimeZone;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPreviewCrowd;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlEvtEventEditHelper_SetPreviewCrowdSettings) == 0x000004, "Wrong alignment on AtlEvtEventEditHelper_SetPreviewCrowdSettings");
static_assert(sizeof(AtlEvtEventEditHelper_SetPreviewCrowdSettings) == 0x00000C, "Wrong size on AtlEvtEventEditHelper_SetPreviewCrowdSettings");
static_assert(offsetof(AtlEvtEventEditHelper_SetPreviewCrowdSettings, InCrowdMonth) == 0x000000, "Member 'AtlEvtEventEditHelper_SetPreviewCrowdSettings::InCrowdMonth' has a wrong offset!");
static_assert(offsetof(AtlEvtEventEditHelper_SetPreviewCrowdSettings, InCrowdDay) == 0x000004, "Member 'AtlEvtEventEditHelper_SetPreviewCrowdSettings::InCrowdDay' has a wrong offset!");
static_assert(offsetof(AtlEvtEventEditHelper_SetPreviewCrowdSettings, InCrowdTimeZone) == 0x000008, "Member 'AtlEvtEventEditHelper_SetPreviewCrowdSettings::InCrowdTimeZone' has a wrong offset!");
static_assert(offsetof(AtlEvtEventEditHelper_SetPreviewCrowdSettings, bInPreviewCrowd) == 0x000009, "Member 'AtlEvtEventEditHelper_SetPreviewCrowdSettings::bInPreviewCrowd' has a wrong offset!");

// Function xrd777.AtlEvtEventEditHelper.IsRankAEvent
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtEventEditHelper_IsRankAEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventEditHelper_IsRankAEvent) == 0x000001, "Wrong alignment on AtlEvtEventEditHelper_IsRankAEvent");
static_assert(sizeof(AtlEvtEventEditHelper_IsRankAEvent) == 0x000001, "Wrong size on AtlEvtEventEditHelper_IsRankAEvent");
static_assert(offsetof(AtlEvtEventEditHelper_IsRankAEvent, ReturnValue) == 0x000000, "Member 'AtlEvtEventEditHelper_IsRankAEvent::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.ExecuteBmdMessage
// 0x0020 (0x0020 - 0x0000)
struct AtlEvtEventManager_ExecuteBmdMessage final
{
public:
	class UBmdAsset*                              InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageMajorID;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageMinorID;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageSubID;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessagePageID;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnableMessageRef;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSeqEventMessageID;                               // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_ExecuteBmdMessage) == 0x000008, "Wrong alignment on AtlEvtEventManager_ExecuteBmdMessage");
static_assert(sizeof(AtlEvtEventManager_ExecuteBmdMessage) == 0x000020, "Wrong size on AtlEvtEventManager_ExecuteBmdMessage");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessage, InAsset) == 0x000000, "Member 'AtlEvtEventManager_ExecuteBmdMessage::InAsset' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessage, InMessageMajorID) == 0x000008, "Member 'AtlEvtEventManager_ExecuteBmdMessage::InMessageMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessage, InMessageMinorID) == 0x00000C, "Member 'AtlEvtEventManager_ExecuteBmdMessage::InMessageMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessage, InMessageSubID) == 0x000010, "Member 'AtlEvtEventManager_ExecuteBmdMessage::InMessageSubID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessage, InMessagePageID) == 0x000014, "Member 'AtlEvtEventManager_ExecuteBmdMessage::InMessagePageID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessage, bInEnableMessageRef) == 0x000018, "Member 'AtlEvtEventManager_ExecuteBmdMessage::bInEnableMessageRef' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessage, InSeqEventMessageID) == 0x00001C, "Member 'AtlEvtEventManager_ExecuteBmdMessage::InSeqEventMessageID' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.ExecuteBmdMessageSubtitle
// 0x0028 (0x0028 - 0x0000)
struct AtlEvtEventManager_ExecuteBmdMessageSubtitle final
{
public:
	class UBmdAsset*                              InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageMajorID;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageMinorID;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageSubID;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessagePageID;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDrawFrame;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnableMessageRef;                               // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSeqEventMessageID;                               // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlEvtEventManager_ExecuteBmdMessageSubtitle) == 0x000008, "Wrong alignment on AtlEvtEventManager_ExecuteBmdMessageSubtitle");
static_assert(sizeof(AtlEvtEventManager_ExecuteBmdMessageSubtitle) == 0x000028, "Wrong size on AtlEvtEventManager_ExecuteBmdMessageSubtitle");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitle, InAsset) == 0x000000, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitle::InAsset' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitle, InMessageMajorID) == 0x000008, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitle::InMessageMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitle, InMessageMinorID) == 0x00000C, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitle::InMessageMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitle, InMessageSubID) == 0x000010, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitle::InMessageSubID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitle, InMessagePageID) == 0x000014, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitle::InMessagePageID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitle, InDrawFrame) == 0x000018, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitle::InDrawFrame' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitle, bInEnableMessageRef) == 0x00001C, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitle::bInEnableMessageRef' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitle, InSeqEventMessageID) == 0x000020, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitle::InSeqEventMessageID' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.ExecuteBmdMessageSubtitleSelect
// 0x0018 (0x0018 - 0x0000)
struct AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect final
{
public:
	class UBmdAsset*                              InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectMessageMajorID;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectMessageMinorID;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectMessageSubID;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectResponceToLocalDataID;                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect) == 0x000008, "Wrong alignment on AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect");
static_assert(sizeof(AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect) == 0x000018, "Wrong size on AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect, InAsset) == 0x000000, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect::InAsset' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect, InSelectMessageMajorID) == 0x000008, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect::InSelectMessageMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect, InSelectMessageMinorID) == 0x00000C, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect::InSelectMessageMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect, InSelectMessageSubID) == 0x000010, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect::InSelectMessageSubID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect, InSelectResponceToLocalDataID) == 0x000014, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleSelect::InSelectResponceToLocalDataID' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.ExecuteBmdMessageSubtitleWithSelect
// 0x0038 (0x0038 - 0x0000)
struct AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect final
{
public:
	class UBmdAsset*                              InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageMajorID;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageMinorID;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageSubID;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessagePageID;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InDrawFrame;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectMessageMajorID;                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectMessageMinorID;                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectMessageSubID;                              // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectResponceToLocalDataID;                     // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnableMessageRef;                               // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InSeqEventMessageID;                               // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect) == 0x000008, "Wrong alignment on AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect");
static_assert(sizeof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect) == 0x000038, "Wrong size on AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect, InAsset) == 0x000000, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect::InAsset' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect, InMessageMajorID) == 0x000008, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect::InMessageMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect, InMessageMinorID) == 0x00000C, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect::InMessageMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect, InMessageSubID) == 0x000010, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect::InMessageSubID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect, InMessagePageID) == 0x000014, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect::InMessagePageID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect, InDrawFrame) == 0x000018, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect::InDrawFrame' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect, InSelectMessageMajorID) == 0x00001C, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect::InSelectMessageMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect, InSelectMessageMinorID) == 0x000020, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect::InSelectMessageMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect, InSelectMessageSubID) == 0x000024, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect::InSelectMessageSubID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect, InSelectResponceToLocalDataID) == 0x000028, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect::InSelectResponceToLocalDataID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect, bInEnableMessageRef) == 0x00002C, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect::bInEnableMessageRef' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect, InSeqEventMessageID) == 0x000030, "Member 'AtlEvtEventManager_ExecuteBmdMessageSubtitleWithSelect::InSeqEventMessageID' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.ExecuteBmdMessageWithSelect
// 0x0030 (0x0030 - 0x0000)
struct AtlEvtEventManager_ExecuteBmdMessageWithSelect final
{
public:
	class UBmdAsset*                              InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageMajorID;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageMinorID;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageSubID;                                    // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessagePageID;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectMessageMajorID;                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectMessageMinorID;                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectMessageSubID;                              // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectResponceToLocalDataID;                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInEnableMessageRef;                               // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InEventMessageID;                                  // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_ExecuteBmdMessageWithSelect) == 0x000008, "Wrong alignment on AtlEvtEventManager_ExecuteBmdMessageWithSelect");
static_assert(sizeof(AtlEvtEventManager_ExecuteBmdMessageWithSelect) == 0x000030, "Wrong size on AtlEvtEventManager_ExecuteBmdMessageWithSelect");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageWithSelect, InAsset) == 0x000000, "Member 'AtlEvtEventManager_ExecuteBmdMessageWithSelect::InAsset' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageWithSelect, InMessageMajorID) == 0x000008, "Member 'AtlEvtEventManager_ExecuteBmdMessageWithSelect::InMessageMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageWithSelect, InMessageMinorID) == 0x00000C, "Member 'AtlEvtEventManager_ExecuteBmdMessageWithSelect::InMessageMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageWithSelect, InMessageSubID) == 0x000010, "Member 'AtlEvtEventManager_ExecuteBmdMessageWithSelect::InMessageSubID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageWithSelect, InMessagePageID) == 0x000014, "Member 'AtlEvtEventManager_ExecuteBmdMessageWithSelect::InMessagePageID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageWithSelect, InSelectMessageMajorID) == 0x000018, "Member 'AtlEvtEventManager_ExecuteBmdMessageWithSelect::InSelectMessageMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageWithSelect, InSelectMessageMinorID) == 0x00001C, "Member 'AtlEvtEventManager_ExecuteBmdMessageWithSelect::InSelectMessageMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageWithSelect, InSelectMessageSubID) == 0x000020, "Member 'AtlEvtEventManager_ExecuteBmdMessageWithSelect::InSelectMessageSubID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageWithSelect, InSelectResponceToLocalDataID) == 0x000024, "Member 'AtlEvtEventManager_ExecuteBmdMessageWithSelect::InSelectResponceToLocalDataID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageWithSelect, bInEnableMessageRef) == 0x000028, "Member 'AtlEvtEventManager_ExecuteBmdMessageWithSelect::bInEnableMessageRef' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteBmdMessageWithSelect, InEventMessageID) == 0x00002C, "Member 'AtlEvtEventManager_ExecuteBmdMessageWithSelect::InEventMessageID' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.ExecuteMessage
// 0x0010 (0x0010 - 0x0000)
struct AtlEvtEventManager_ExecuteMessage final
{
public:
	class UBmdAsset*                              InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageNo;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InEventMessageID;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_ExecuteMessage) == 0x000008, "Wrong alignment on AtlEvtEventManager_ExecuteMessage");
static_assert(sizeof(AtlEvtEventManager_ExecuteMessage) == 0x000010, "Wrong size on AtlEvtEventManager_ExecuteMessage");
static_assert(offsetof(AtlEvtEventManager_ExecuteMessage, InAsset) == 0x000000, "Member 'AtlEvtEventManager_ExecuteMessage::InAsset' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteMessage, InMessageNo) == 0x000008, "Member 'AtlEvtEventManager_ExecuteMessage::InMessageNo' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteMessage, InEventMessageID) == 0x00000C, "Member 'AtlEvtEventManager_ExecuteMessage::InEventMessageID' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.ExecuteMessageWithSelect
// 0x0018 (0x0018 - 0x0000)
struct AtlEvtEventManager_ExecuteMessageWithSelect final
{
public:
	class UBmdAsset*                              InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageNo;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectNo;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectResponceToLocalDataID;                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSeqEventMessageID;                               // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_ExecuteMessageWithSelect) == 0x000008, "Wrong alignment on AtlEvtEventManager_ExecuteMessageWithSelect");
static_assert(sizeof(AtlEvtEventManager_ExecuteMessageWithSelect) == 0x000018, "Wrong size on AtlEvtEventManager_ExecuteMessageWithSelect");
static_assert(offsetof(AtlEvtEventManager_ExecuteMessageWithSelect, InAsset) == 0x000000, "Member 'AtlEvtEventManager_ExecuteMessageWithSelect::InAsset' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteMessageWithSelect, InMessageNo) == 0x000008, "Member 'AtlEvtEventManager_ExecuteMessageWithSelect::InMessageNo' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteMessageWithSelect, InSelectNo) == 0x00000C, "Member 'AtlEvtEventManager_ExecuteMessageWithSelect::InSelectNo' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteMessageWithSelect, InSelectResponceToLocalDataID) == 0x000010, "Member 'AtlEvtEventManager_ExecuteMessageWithSelect::InSelectResponceToLocalDataID' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteMessageWithSelect, InSeqEventMessageID) == 0x000014, "Member 'AtlEvtEventManager_ExecuteMessageWithSelect::InSeqEventMessageID' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.ExecuteMsgScript
// 0x0004 (0x0004 - 0x0000)
struct AtlEvtEventManager_ExecuteMsgScript final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_ExecuteMsgScript) == 0x000004, "Wrong alignment on AtlEvtEventManager_ExecuteMsgScript");
static_assert(sizeof(AtlEvtEventManager_ExecuteMsgScript) == 0x000004, "Wrong size on AtlEvtEventManager_ExecuteMsgScript");
static_assert(offsetof(AtlEvtEventManager_ExecuteMsgScript, ReturnValue) == 0x000000, "Member 'AtlEvtEventManager_ExecuteMsgScript::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.ExecuteScript
// 0x0018 (0x0018 - 0x0000)
struct AtlEvtEventManager_ExecuteScript final
{
public:
	class UBfAsset*                               InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InProcNo;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBmdAssetInBfAsset;                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBmdAsset*                              InBmdAsset;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_ExecuteScript) == 0x000008, "Wrong alignment on AtlEvtEventManager_ExecuteScript");
static_assert(sizeof(AtlEvtEventManager_ExecuteScript) == 0x000018, "Wrong size on AtlEvtEventManager_ExecuteScript");
static_assert(offsetof(AtlEvtEventManager_ExecuteScript, InAsset) == 0x000000, "Member 'AtlEvtEventManager_ExecuteScript::InAsset' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteScript, InProcNo) == 0x000008, "Member 'AtlEvtEventManager_ExecuteScript::InProcNo' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteScript, bUseBmdAssetInBfAsset) == 0x00000C, "Member 'AtlEvtEventManager_ExecuteScript::bUseBmdAssetInBfAsset' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ExecuteScript, InBmdAsset) == 0x000010, "Member 'AtlEvtEventManager_ExecuteScript::InBmdAsset' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.ExecuteSelectScript
// 0x0004 (0x0004 - 0x0000)
struct AtlEvtEventManager_ExecuteSelectScript final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_ExecuteSelectScript) == 0x000004, "Wrong alignment on AtlEvtEventManager_ExecuteSelectScript");
static_assert(sizeof(AtlEvtEventManager_ExecuteSelectScript) == 0x000004, "Wrong size on AtlEvtEventManager_ExecuteSelectScript");
static_assert(offsetof(AtlEvtEventManager_ExecuteSelectScript, ReturnValue) == 0x000000, "Member 'AtlEvtEventManager_ExecuteSelectScript::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.ForceClick
// 0x0020 (0x0020 - 0x0000)
struct AtlEvtEventManager_ForceClick final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputEvent                                   EventType;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlEvtEventManager_ForceClick) == 0x000008, "Wrong alignment on AtlEvtEventManager_ForceClick");
static_assert(sizeof(AtlEvtEventManager_ForceClick) == 0x000020, "Wrong size on AtlEvtEventManager_ForceClick");
static_assert(offsetof(AtlEvtEventManager_ForceClick, Key) == 0x000000, "Member 'AtlEvtEventManager_ForceClick::Key' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_ForceClick, EventType) == 0x000018, "Member 'AtlEvtEventManager_ForceClick::EventType' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtEventManager_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_IsPlaying) == 0x000001, "Wrong alignment on AtlEvtEventManager_IsPlaying");
static_assert(sizeof(AtlEvtEventManager_IsPlaying) == 0x000001, "Wrong size on AtlEvtEventManager_IsPlaying");
static_assert(offsetof(AtlEvtEventManager_IsPlaying, ReturnValue) == 0x000000, "Member 'AtlEvtEventManager_IsPlaying::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.OnFinishedAtlScr
// 0x0004 (0x0004 - 0x0000)
struct AtlEvtEventManager_OnFinishedAtlScr final
{
public:
	int32                                         ExitType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_OnFinishedAtlScr) == 0x000004, "Wrong alignment on AtlEvtEventManager_OnFinishedAtlScr");
static_assert(sizeof(AtlEvtEventManager_OnFinishedAtlScr) == 0x000004, "Wrong size on AtlEvtEventManager_OnFinishedAtlScr");
static_assert(offsetof(AtlEvtEventManager_OnFinishedAtlScr, ExitType) == 0x000000, "Member 'AtlEvtEventManager_OnFinishedAtlScr::ExitType' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.SetLocalData
// 0x0008 (0x0008 - 0x0000)
struct AtlEvtEventManager_SetLocalData final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_SetLocalData) == 0x000004, "Wrong alignment on AtlEvtEventManager_SetLocalData");
static_assert(sizeof(AtlEvtEventManager_SetLocalData) == 0x000008, "Wrong size on AtlEvtEventManager_SetLocalData");
static_assert(offsetof(AtlEvtEventManager_SetLocalData, Index_0) == 0x000000, "Member 'AtlEvtEventManager_SetLocalData::Index_0' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_SetLocalData, Data) == 0x000004, "Member 'AtlEvtEventManager_SetLocalData::Data' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.GetLocalData
// 0x0008 (0x0008 - 0x0000)
struct AtlEvtEventManager_GetLocalData final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_GetLocalData) == 0x000004, "Wrong alignment on AtlEvtEventManager_GetLocalData");
static_assert(sizeof(AtlEvtEventManager_GetLocalData) == 0x000008, "Wrong size on AtlEvtEventManager_GetLocalData");
static_assert(offsetof(AtlEvtEventManager_GetLocalData, Index_0) == 0x000000, "Member 'AtlEvtEventManager_GetLocalData::Index_0' has a wrong offset!");
static_assert(offsetof(AtlEvtEventManager_GetLocalData, ReturnValue) == 0x000004, "Member 'AtlEvtEventManager_GetLocalData::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtEventManager.IsEventRankA
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtEventManager_IsEventRankA final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtEventManager_IsEventRankA) == 0x000001, "Wrong alignment on AtlEvtEventManager_IsEventRankA");
static_assert(sizeof(AtlEvtEventManager_IsEventRankA) == 0x000001, "Wrong size on AtlEvtEventManager_IsEventRankA");
static_assert(offsetof(AtlEvtEventManager_IsEventRankA, ReturnValue) == 0x000000, "Member 'AtlEvtEventManager_IsEventRankA::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtHighStreamingLocator.SetEnableHighStreaming
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtHighStreamingLocator_SetEnableHighStreaming final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtHighStreamingLocator_SetEnableHighStreaming) == 0x000001, "Wrong alignment on AtlEvtHighStreamingLocator_SetEnableHighStreaming");
static_assert(sizeof(AtlEvtHighStreamingLocator_SetEnableHighStreaming) == 0x000001, "Wrong size on AtlEvtHighStreamingLocator_SetEnableHighStreaming");
static_assert(offsetof(AtlEvtHighStreamingLocator_SetEnableHighStreaming, bEnable) == 0x000000, "Member 'AtlEvtHighStreamingLocator_SetEnableHighStreaming::bEnable' has a wrong offset!");

// Function xrd777.LoadingDraw.SetTimeZone
// 0x0001 (0x0001 - 0x0000)
struct LoadingDraw_SetTimeZone final
{
public:
	ECldTimeZone                                  InTimeShifting;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadingDraw_SetTimeZone) == 0x000001, "Wrong alignment on LoadingDraw_SetTimeZone");
static_assert(sizeof(LoadingDraw_SetTimeZone) == 0x000001, "Wrong size on LoadingDraw_SetTimeZone");
static_assert(offsetof(LoadingDraw_SetTimeZone, InTimeShifting) == 0x000000, "Member 'LoadingDraw_SetTimeZone::InTimeShifting' has a wrong offset!");

// Function xrd777.LoadingDraw.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct LoadingDraw_SetVisible final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadingDraw_SetVisible) == 0x000001, "Wrong alignment on LoadingDraw_SetVisible");
static_assert(sizeof(LoadingDraw_SetVisible) == 0x000001, "Wrong size on LoadingDraw_SetVisible");
static_assert(offsetof(LoadingDraw_SetVisible, On) == 0x000000, "Member 'LoadingDraw_SetVisible::On' has a wrong offset!");

// Function xrd777.AtlEvtLevelSequenceActor.OnHighSpeed
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtLevelSequenceActor_OnHighSpeed final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtLevelSequenceActor_OnHighSpeed) == 0x000001, "Wrong alignment on AtlEvtLevelSequenceActor_OnHighSpeed");
static_assert(sizeof(AtlEvtLevelSequenceActor_OnHighSpeed) == 0x000001, "Wrong size on AtlEvtLevelSequenceActor_OnHighSpeed");
static_assert(offsetof(AtlEvtLevelSequenceActor_OnHighSpeed, bEnable) == 0x000000, "Member 'AtlEvtLevelSequenceActor_OnHighSpeed::bEnable' has a wrong offset!");

// DelegateFunction xrd777.AtlEvtLevelSequenceActor.OnTickFromSequenceTickManager__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct AtlEvtLevelSequenceActor_OnTickFromSequenceTickManager__DelegateSignature final
{
public:
	struct FQualifiedFrameTime                    CurrentTime;                                       // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQualifiedFrameTime                    PreviousTime;                                      // 0x0010(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtLevelSequenceActor_OnTickFromSequenceTickManager__DelegateSignature) == 0x000004, "Wrong alignment on AtlEvtLevelSequenceActor_OnTickFromSequenceTickManager__DelegateSignature");
static_assert(sizeof(AtlEvtLevelSequenceActor_OnTickFromSequenceTickManager__DelegateSignature) == 0x000020, "Wrong size on AtlEvtLevelSequenceActor_OnTickFromSequenceTickManager__DelegateSignature");
static_assert(offsetof(AtlEvtLevelSequenceActor_OnTickFromSequenceTickManager__DelegateSignature, CurrentTime) == 0x000000, "Member 'AtlEvtLevelSequenceActor_OnTickFromSequenceTickManager__DelegateSignature::CurrentTime' has a wrong offset!");
static_assert(offsetof(AtlEvtLevelSequenceActor_OnTickFromSequenceTickManager__DelegateSignature, PreviousTime) == 0x000010, "Member 'AtlEvtLevelSequenceActor_OnTickFromSequenceTickManager__DelegateSignature::PreviousTime' has a wrong offset!");

// Function xrd777.AtlEvtLevelSequenceActor.PreloadEvtDialogueTime
// 0x0010 (0x0010 - 0x0000)
struct AtlEvtLevelSequenceActor_PreloadEvtDialogueTime final
{
public:
	class UMovieSceneSequence*                    MovieSceneSequence;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMovieSceneSubSection*                  CurrentSubSceneSection;                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtLevelSequenceActor_PreloadEvtDialogueTime) == 0x000008, "Wrong alignment on AtlEvtLevelSequenceActor_PreloadEvtDialogueTime");
static_assert(sizeof(AtlEvtLevelSequenceActor_PreloadEvtDialogueTime) == 0x000010, "Wrong size on AtlEvtLevelSequenceActor_PreloadEvtDialogueTime");
static_assert(offsetof(AtlEvtLevelSequenceActor_PreloadEvtDialogueTime, MovieSceneSequence) == 0x000000, "Member 'AtlEvtLevelSequenceActor_PreloadEvtDialogueTime::MovieSceneSequence' has a wrong offset!");
static_assert(offsetof(AtlEvtLevelSequenceActor_PreloadEvtDialogueTime, CurrentSubSceneSection) == 0x000008, "Member 'AtlEvtLevelSequenceActor_PreloadEvtDialogueTime::CurrentSubSceneSection' has a wrong offset!");

// Function xrd777.AtlEvtLevelSequenceActor.IsCompletedLoadSoundAssets
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtLevelSequenceActor_IsCompletedLoadSoundAssets final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtLevelSequenceActor_IsCompletedLoadSoundAssets) == 0x000001, "Wrong alignment on AtlEvtLevelSequenceActor_IsCompletedLoadSoundAssets");
static_assert(sizeof(AtlEvtLevelSequenceActor_IsCompletedLoadSoundAssets) == 0x000001, "Wrong size on AtlEvtLevelSequenceActor_IsCompletedLoadSoundAssets");
static_assert(offsetof(AtlEvtLevelSequenceActor_IsCompletedLoadSoundAssets, ReturnValue) == 0x000000, "Member 'AtlEvtLevelSequenceActor_IsCompletedLoadSoundAssets::ReturnValue' has a wrong offset!");

// Function xrd777.FldCrowdWalkManager.SaveMobWalkInitTable
// 0x0008 (0x0008 - 0x0000)
struct FldCrowdWalkManager_SaveMobWalkInitTable final
{
public:
	class UDataTable*                             InitTable;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldCrowdWalkManager_SaveMobWalkInitTable) == 0x000008, "Wrong alignment on FldCrowdWalkManager_SaveMobWalkInitTable");
static_assert(sizeof(FldCrowdWalkManager_SaveMobWalkInitTable) == 0x000008, "Wrong size on FldCrowdWalkManager_SaveMobWalkInitTable");
static_assert(offsetof(FldCrowdWalkManager_SaveMobWalkInitTable, InitTable) == 0x000000, "Member 'FldCrowdWalkManager_SaveMobWalkInitTable::InitTable' has a wrong offset!");

// Function xrd777.AtlEvtLightScenarioTransitionController.AddLightScenario
// 0x000C (0x000C - 0x0000)
struct AtlEvtLightScenarioTransitionController_AddLightScenario final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtLightScenarioTransitionController_AddLightScenario) == 0x000004, "Wrong alignment on AtlEvtLightScenarioTransitionController_AddLightScenario");
static_assert(sizeof(AtlEvtLightScenarioTransitionController_AddLightScenario) == 0x00000C, "Wrong size on AtlEvtLightScenarioTransitionController_AddLightScenario");
static_assert(offsetof(AtlEvtLightScenarioTransitionController_AddLightScenario, LevelName) == 0x000000, "Member 'AtlEvtLightScenarioTransitionController_AddLightScenario::LevelName' has a wrong offset!");
static_assert(offsetof(AtlEvtLightScenarioTransitionController_AddLightScenario, ReturnValue) == 0x000008, "Member 'AtlEvtLightScenarioTransitionController_AddLightScenario::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtLightScenarioTransitionController.OnLoadFinished
// 0x0004 (0x0004 - 0x0000)
struct AtlEvtLightScenarioTransitionController_OnLoadFinished final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtLightScenarioTransitionController_OnLoadFinished) == 0x000004, "Wrong alignment on AtlEvtLightScenarioTransitionController_OnLoadFinished");
static_assert(sizeof(AtlEvtLightScenarioTransitionController_OnLoadFinished) == 0x000004, "Wrong size on AtlEvtLightScenarioTransitionController_OnLoadFinished");
static_assert(offsetof(AtlEvtLightScenarioTransitionController_OnLoadFinished, Index_0) == 0x000000, "Member 'AtlEvtLightScenarioTransitionController_OnLoadFinished::Index_0' has a wrong offset!");

// Function xrd777.AtlEvtLightScenarioTransitionController.OnUnloadFinished
// 0x0004 (0x0004 - 0x0000)
struct AtlEvtLightScenarioTransitionController_OnUnloadFinished final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtLightScenarioTransitionController_OnUnloadFinished) == 0x000004, "Wrong alignment on AtlEvtLightScenarioTransitionController_OnUnloadFinished");
static_assert(sizeof(AtlEvtLightScenarioTransitionController_OnUnloadFinished) == 0x000004, "Wrong size on AtlEvtLightScenarioTransitionController_OnUnloadFinished");
static_assert(offsetof(AtlEvtLightScenarioTransitionController_OnUnloadFinished, Index_0) == 0x000000, "Member 'AtlEvtLightScenarioTransitionController_OnUnloadFinished::Index_0' has a wrong offset!");

// Function xrd777.AtlEvtLightScenarioTransitionController.TransitionLightScenario
// 0x0004 (0x0004 - 0x0000)
struct AtlEvtLightScenarioTransitionController_TransitionLightScenario final
{
public:
	int32                                         InNextLightScenarioIndex;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtLightScenarioTransitionController_TransitionLightScenario) == 0x000004, "Wrong alignment on AtlEvtLightScenarioTransitionController_TransitionLightScenario");
static_assert(sizeof(AtlEvtLightScenarioTransitionController_TransitionLightScenario) == 0x000004, "Wrong size on AtlEvtLightScenarioTransitionController_TransitionLightScenario");
static_assert(offsetof(AtlEvtLightScenarioTransitionController_TransitionLightScenario, InNextLightScenarioIndex) == 0x000000, "Member 'AtlEvtLightScenarioTransitionController_TransitionLightScenario::InNextLightScenarioIndex' has a wrong offset!");

// Function xrd777.AtlEvtLightScenarioTransitionController.GetLightScenarioNum
// 0x0004 (0x0004 - 0x0000)
struct AtlEvtLightScenarioTransitionController_GetLightScenarioNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtLightScenarioTransitionController_GetLightScenarioNum) == 0x000004, "Wrong alignment on AtlEvtLightScenarioTransitionController_GetLightScenarioNum");
static_assert(sizeof(AtlEvtLightScenarioTransitionController_GetLightScenarioNum) == 0x000004, "Wrong size on AtlEvtLightScenarioTransitionController_GetLightScenarioNum");
static_assert(offsetof(AtlEvtLightScenarioTransitionController_GetLightScenarioNum, ReturnValue) == 0x000000, "Member 'AtlEvtLightScenarioTransitionController_GetLightScenarioNum::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtLightScenarioTransitionController.IsDoingTransition
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtLightScenarioTransitionController_IsDoingTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtLightScenarioTransitionController_IsDoingTransition) == 0x000001, "Wrong alignment on AtlEvtLightScenarioTransitionController_IsDoingTransition");
static_assert(sizeof(AtlEvtLightScenarioTransitionController_IsDoingTransition) == 0x000001, "Wrong size on AtlEvtLightScenarioTransitionController_IsDoingTransition");
static_assert(offsetof(AtlEvtLightScenarioTransitionController_IsDoingTransition, ReturnValue) == 0x000000, "Member 'AtlEvtLightScenarioTransitionController_IsDoingTransition::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.SetOT
// 0x0004 (0x0004 - 0x0000)
struct AtlEvtSubsystem_SetOT final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_SetOT) == 0x000004, "Wrong alignment on AtlEvtSubsystem_SetOT");
static_assert(sizeof(AtlEvtSubsystem_SetOT) == 0x000004, "Wrong size on AtlEvtSubsystem_SetOT");
static_assert(offsetof(AtlEvtSubsystem_SetOT, Color) == 0x000000, "Member 'AtlEvtSubsystem_SetOT::Color' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.CallCategoryEvent
// 0x0050 (0x0050 - 0x0000)
struct AtlEvtSubsystem_CallCategoryEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtlEvtEventCategoryType                      CategoryType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventMajorID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtlEvtPlayParameter                   Param;                                             // 0x0018(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_CallCategoryEvent) == 0x000008, "Wrong alignment on AtlEvtSubsystem_CallCategoryEvent");
static_assert(sizeof(AtlEvtSubsystem_CallCategoryEvent) == 0x000050, "Wrong size on AtlEvtSubsystem_CallCategoryEvent");
static_assert(offsetof(AtlEvtSubsystem_CallCategoryEvent, WorldContextObject) == 0x000000, "Member 'AtlEvtSubsystem_CallCategoryEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallCategoryEvent, CategoryType) == 0x000008, "Member 'AtlEvtSubsystem_CallCategoryEvent::CategoryType' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallCategoryEvent, EventMajorID) == 0x00000C, "Member 'AtlEvtSubsystem_CallCategoryEvent::EventMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallCategoryEvent, EventMinorID) == 0x000010, "Member 'AtlEvtSubsystem_CallCategoryEvent::EventMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallCategoryEvent, Param) == 0x000018, "Member 'AtlEvtSubsystem_CallCategoryEvent::Param' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.CallEvent
// 0x0048 (0x0048 - 0x0000)
struct AtlEvtSubsystem_CallEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMajorID;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlEvtPlayParameter                   Param;                                             // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_CallEvent) == 0x000008, "Wrong alignment on AtlEvtSubsystem_CallEvent");
static_assert(sizeof(AtlEvtSubsystem_CallEvent) == 0x000048, "Wrong size on AtlEvtSubsystem_CallEvent");
static_assert(offsetof(AtlEvtSubsystem_CallEvent, WorldContextObject) == 0x000000, "Member 'AtlEvtSubsystem_CallEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEvent, EventMajorID) == 0x000008, "Member 'AtlEvtSubsystem_CallEvent::EventMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEvent, EventMinorID) == 0x00000C, "Member 'AtlEvtSubsystem_CallEvent::EventMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEvent, Param) == 0x000010, "Member 'AtlEvtSubsystem_CallEvent::Param' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.CallEvent_InternalFinishedEvent
// 0x0004 (0x0004 - 0x0000)
struct AtlEvtSubsystem_CallEvent_InternalFinishedEvent final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_CallEvent_InternalFinishedEvent) == 0x000004, "Wrong alignment on AtlEvtSubsystem_CallEvent_InternalFinishedEvent");
static_assert(sizeof(AtlEvtSubsystem_CallEvent_InternalFinishedEvent) == 0x000004, "Wrong size on AtlEvtSubsystem_CallEvent_InternalFinishedEvent");
static_assert(offsetof(AtlEvtSubsystem_CallEvent_InternalFinishedEvent, Value) == 0x000000, "Member 'AtlEvtSubsystem_CallEvent_InternalFinishedEvent::Value' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.CallEvent_SpawnLoadSublevelActor
// 0x00E8 (0x00E8 - 0x0000)
struct AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StreamTargetLevelName;                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlEvtPlayParameter                   Param;                                             // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAtlEvtPreData                         PreData;                                           // 0x0048(0x0070)(Parm, OutParm, NativeAccessSpecifierPublic)
	EAtlEvtSublevelType                           SublevelType;                                      // 0x00B8(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x00C0(0x0018)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class UObject*                                WorldContextObject;                                // 0x00D8(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAtlEvtPlayObject*                      ReturnValue;                                       // 0x00E0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor) == 0x000008, "Wrong alignment on AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor");
static_assert(sizeof(AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor) == 0x0000E8, "Wrong size on AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor");
static_assert(offsetof(AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor, World) == 0x000000, "Member 'AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor::World' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor, StreamTargetLevelName) == 0x000008, "Member 'AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor::StreamTargetLevelName' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor, Param) == 0x000010, "Member 'AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor::Param' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor, PreData) == 0x000048, "Member 'AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor::PreData' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor, SublevelType) == 0x0000B8, "Member 'AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor::SublevelType' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor, LatentInfo) == 0x0000C0, "Member 'AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor::LatentInfo' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor, WorldContextObject) == 0x0000D8, "Member 'AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor, ReturnValue) == 0x0000E0, "Member 'AtlEvtSubsystem_CallEvent_SpawnLoadSublevelActor::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.CallEventCmmu
// 0x0048 (0x0048 - 0x0000)
struct AtlEvtSubsystem_CallEventCmmu final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMajorID;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlEvtPlayParameter                   Param;                                             // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_CallEventCmmu) == 0x000008, "Wrong alignment on AtlEvtSubsystem_CallEventCmmu");
static_assert(sizeof(AtlEvtSubsystem_CallEventCmmu) == 0x000048, "Wrong size on AtlEvtSubsystem_CallEventCmmu");
static_assert(offsetof(AtlEvtSubsystem_CallEventCmmu, WorldContextObject) == 0x000000, "Member 'AtlEvtSubsystem_CallEventCmmu::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEventCmmu, EventMajorID) == 0x000008, "Member 'AtlEvtSubsystem_CallEventCmmu::EventMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEventCmmu, EventMinorID) == 0x00000C, "Member 'AtlEvtSubsystem_CallEventCmmu::EventMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEventCmmu, Param) == 0x000010, "Member 'AtlEvtSubsystem_CallEventCmmu::Param' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.CallEventField
// 0x0048 (0x0048 - 0x0000)
struct AtlEvtSubsystem_CallEventField final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMajorID;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlEvtPlayParameter                   Param;                                             // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_CallEventField) == 0x000008, "Wrong alignment on AtlEvtSubsystem_CallEventField");
static_assert(sizeof(AtlEvtSubsystem_CallEventField) == 0x000048, "Wrong size on AtlEvtSubsystem_CallEventField");
static_assert(offsetof(AtlEvtSubsystem_CallEventField, WorldContextObject) == 0x000000, "Member 'AtlEvtSubsystem_CallEventField::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEventField, EventMajorID) == 0x000008, "Member 'AtlEvtSubsystem_CallEventField::EventMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEventField, EventMinorID) == 0x00000C, "Member 'AtlEvtSubsystem_CallEventField::EventMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_CallEventField, Param) == 0x000010, "Member 'AtlEvtSubsystem_CallEventField::Param' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.DateOffDelegate
// 0x0004 (0x0004 - 0x0000)
struct AtlEvtSubsystem_DateOffDelegate final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_DateOffDelegate) == 0x000004, "Wrong alignment on AtlEvtSubsystem_DateOffDelegate");
static_assert(sizeof(AtlEvtSubsystem_DateOffDelegate) == 0x000004, "Wrong size on AtlEvtSubsystem_DateOffDelegate");
static_assert(offsetof(AtlEvtSubsystem_DateOffDelegate, Idx) == 0x000000, "Member 'AtlEvtSubsystem_DateOffDelegate::Idx' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.EvtPlay
// 0x0060 (0x0060 - 0x0000)
struct AtlEvtSubsystem_EvtPlay final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EvtName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InEventRank;                                       // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlEvtPlayParameter                   Param;                                             // 0x0028(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_EvtPlay) == 0x000008, "Wrong alignment on AtlEvtSubsystem_EvtPlay");
static_assert(sizeof(AtlEvtSubsystem_EvtPlay) == 0x000060, "Wrong size on AtlEvtSubsystem_EvtPlay");
static_assert(offsetof(AtlEvtSubsystem_EvtPlay, WorldContextObject) == 0x000000, "Member 'AtlEvtSubsystem_EvtPlay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_EvtPlay, EvtName) == 0x000008, "Member 'AtlEvtSubsystem_EvtPlay::EvtName' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_EvtPlay, InEventRank) == 0x000018, "Member 'AtlEvtSubsystem_EvtPlay::InEventRank' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_EvtPlay, Param) == 0x000028, "Member 'AtlEvtSubsystem_EvtPlay::Param' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.InitScriptFinishFunction
// 0x0004 (0x0004 - 0x0000)
struct AtlEvtSubsystem_InitScriptFinishFunction final
{
public:
	int32                                         ExitType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_InitScriptFinishFunction) == 0x000004, "Wrong alignment on AtlEvtSubsystem_InitScriptFinishFunction");
static_assert(sizeof(AtlEvtSubsystem_InitScriptFinishFunction) == 0x000004, "Wrong size on AtlEvtSubsystem_InitScriptFinishFunction");
static_assert(offsetof(AtlEvtSubsystem_InitScriptFinishFunction, ExitType) == 0x000000, "Member 'AtlEvtSubsystem_InitScriptFinishFunction::ExitType' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.IsConditionalBranchFromLocalData
// 0x0010 (0x0010 - 0x0000)
struct AtlEvtSubsystem_IsConditionalBranchFromLocalData final
{
public:
	EEvtConditionalBranchCompType                 CompType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlEvtSubsystem_IsConditionalBranchFromLocalData) == 0x000004, "Wrong alignment on AtlEvtSubsystem_IsConditionalBranchFromLocalData");
static_assert(sizeof(AtlEvtSubsystem_IsConditionalBranchFromLocalData) == 0x000010, "Wrong size on AtlEvtSubsystem_IsConditionalBranchFromLocalData");
static_assert(offsetof(AtlEvtSubsystem_IsConditionalBranchFromLocalData, CompType) == 0x000000, "Member 'AtlEvtSubsystem_IsConditionalBranchFromLocalData::CompType' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_IsConditionalBranchFromLocalData, LHS) == 0x000004, "Member 'AtlEvtSubsystem_IsConditionalBranchFromLocalData::LHS' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_IsConditionalBranchFromLocalData, Index_0) == 0x000008, "Member 'AtlEvtSubsystem_IsConditionalBranchFromLocalData::Index_0' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_IsConditionalBranchFromLocalData, ReturnValue) == 0x00000C, "Member 'AtlEvtSubsystem_IsConditionalBranchFromLocalData::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.MakeFieldSublevelPathList
// 0x0060 (0x0060 - 0x0000)
struct AtlEvtSubsystem_MakeFieldSublevelPathList final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtlEvtEventCategoryType                      CategoryType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventMajorID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtlEvtPlayParameter                   Param;                                             // 0x0018(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_MakeFieldSublevelPathList) == 0x000008, "Wrong alignment on AtlEvtSubsystem_MakeFieldSublevelPathList");
static_assert(sizeof(AtlEvtSubsystem_MakeFieldSublevelPathList) == 0x000060, "Wrong size on AtlEvtSubsystem_MakeFieldSublevelPathList");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathList, WorldContextObject) == 0x000000, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathList::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathList, CategoryType) == 0x000008, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathList::CategoryType' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathList, EventMajorID) == 0x00000C, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathList::EventMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathList, EventMinorID) == 0x000010, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathList::EventMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathList, Param) == 0x000018, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathList::Param' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathList, ReturnValue) == 0x000050, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathList::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.MakeFieldSublevelPathListCmmu
// 0x0058 (0x0058 - 0x0000)
struct AtlEvtSubsystem_MakeFieldSublevelPathListCmmu final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMajorID;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlEvtPlayParameter                   Param;                                             // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_MakeFieldSublevelPathListCmmu) == 0x000008, "Wrong alignment on AtlEvtSubsystem_MakeFieldSublevelPathListCmmu");
static_assert(sizeof(AtlEvtSubsystem_MakeFieldSublevelPathListCmmu) == 0x000058, "Wrong size on AtlEvtSubsystem_MakeFieldSublevelPathListCmmu");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListCmmu, WorldContextObject) == 0x000000, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListCmmu::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListCmmu, EventMajorID) == 0x000008, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListCmmu::EventMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListCmmu, EventMinorID) == 0x00000C, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListCmmu::EventMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListCmmu, Param) == 0x000010, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListCmmu::Param' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListCmmu, ReturnValue) == 0x000048, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListCmmu::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.MakeFieldSublevelPathListEvent
// 0x0058 (0x0058 - 0x0000)
struct AtlEvtSubsystem_MakeFieldSublevelPathListEvent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMajorID;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlEvtPlayParameter                   Param;                                             // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_MakeFieldSublevelPathListEvent) == 0x000008, "Wrong alignment on AtlEvtSubsystem_MakeFieldSublevelPathListEvent");
static_assert(sizeof(AtlEvtSubsystem_MakeFieldSublevelPathListEvent) == 0x000058, "Wrong size on AtlEvtSubsystem_MakeFieldSublevelPathListEvent");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListEvent, WorldContextObject) == 0x000000, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListEvent, EventMajorID) == 0x000008, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListEvent::EventMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListEvent, EventMinorID) == 0x00000C, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListEvent::EventMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListEvent, Param) == 0x000010, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListEvent::Param' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListEvent, ReturnValue) == 0x000048, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListEvent::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.MakeFieldSublevelPathListField
// 0x0058 (0x0058 - 0x0000)
struct AtlEvtSubsystem_MakeFieldSublevelPathListField final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMajorID;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlEvtPlayParameter                   Param;                                             // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         ReturnValue;                                       // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_MakeFieldSublevelPathListField) == 0x000008, "Wrong alignment on AtlEvtSubsystem_MakeFieldSublevelPathListField");
static_assert(sizeof(AtlEvtSubsystem_MakeFieldSublevelPathListField) == 0x000058, "Wrong size on AtlEvtSubsystem_MakeFieldSublevelPathListField");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListField, WorldContextObject) == 0x000000, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListField::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListField, EventMajorID) == 0x000008, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListField::EventMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListField, EventMinorID) == 0x00000C, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListField::EventMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListField, Param) == 0x000010, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListField::Param' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_MakeFieldSublevelPathListField, ReturnValue) == 0x000048, "Member 'AtlEvtSubsystem_MakeFieldSublevelPathListField::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.OnActorSpawnedEventSublevel
// 0x0008 (0x0008 - 0x0000)
struct AtlEvtSubsystem_OnActorSpawnedEventSublevel final
{
public:
	class AActor*                                 SpawnedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_OnActorSpawnedEventSublevel) == 0x000008, "Wrong alignment on AtlEvtSubsystem_OnActorSpawnedEventSublevel");
static_assert(sizeof(AtlEvtSubsystem_OnActorSpawnedEventSublevel) == 0x000008, "Wrong size on AtlEvtSubsystem_OnActorSpawnedEventSublevel");
static_assert(offsetof(AtlEvtSubsystem_OnActorSpawnedEventSublevel, SpawnedActor) == 0x000000, "Member 'AtlEvtSubsystem_OnActorSpawnedEventSublevel::SpawnedActor' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.SetEventPlayMode
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtSubsystem_SetEventPlayMode final
{
public:
	EAtlEvtPlayMode                               InPlayMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_SetEventPlayMode) == 0x000001, "Wrong alignment on AtlEvtSubsystem_SetEventPlayMode");
static_assert(sizeof(AtlEvtSubsystem_SetEventPlayMode) == 0x000001, "Wrong size on AtlEvtSubsystem_SetEventPlayMode");
static_assert(offsetof(AtlEvtSubsystem_SetEventPlayMode, InPlayMode) == 0x000000, "Member 'AtlEvtSubsystem_SetEventPlayMode::InPlayMode' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.SetLocalData
// 0x0008 (0x0008 - 0x0000)
struct AtlEvtSubsystem_SetLocalData final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_SetLocalData) == 0x000004, "Wrong alignment on AtlEvtSubsystem_SetLocalData");
static_assert(sizeof(AtlEvtSubsystem_SetLocalData) == 0x000008, "Wrong size on AtlEvtSubsystem_SetLocalData");
static_assert(offsetof(AtlEvtSubsystem_SetLocalData, Index_0) == 0x000000, "Member 'AtlEvtSubsystem_SetLocalData::Index_0' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_SetLocalData, Data) == 0x000004, "Member 'AtlEvtSubsystem_SetLocalData::Data' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.SetShowCinemaScope
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtSubsystem_SetShowCinemaScope final
{
public:
	bool                                          bShow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_SetShowCinemaScope) == 0x000001, "Wrong alignment on AtlEvtSubsystem_SetShowCinemaScope");
static_assert(sizeof(AtlEvtSubsystem_SetShowCinemaScope) == 0x000001, "Wrong size on AtlEvtSubsystem_SetShowCinemaScope");
static_assert(offsetof(AtlEvtSubsystem_SetShowCinemaScope, bShow) == 0x000000, "Member 'AtlEvtSubsystem_SetShowCinemaScope::bShow' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.TransitionLightScenarioSublevel
// 0x0004 (0x0004 - 0x0000)
struct AtlEvtSubsystem_TransitionLightScenarioSublevel final
{
public:
	int32                                         NextLightScenarioIndex;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_TransitionLightScenarioSublevel) == 0x000004, "Wrong alignment on AtlEvtSubsystem_TransitionLightScenarioSublevel");
static_assert(sizeof(AtlEvtSubsystem_TransitionLightScenarioSublevel) == 0x000004, "Wrong size on AtlEvtSubsystem_TransitionLightScenarioSublevel");
static_assert(offsetof(AtlEvtSubsystem_TransitionLightScenarioSublevel, NextLightScenarioIndex) == 0x000000, "Member 'AtlEvtSubsystem_TransitionLightScenarioSublevel::NextLightScenarioIndex' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.CallEvent_IsCompleteFieldLoadingSublevel
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtSubsystem_CallEvent_IsCompleteFieldLoadingSublevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_CallEvent_IsCompleteFieldLoadingSublevel) == 0x000001, "Wrong alignment on AtlEvtSubsystem_CallEvent_IsCompleteFieldLoadingSublevel");
static_assert(sizeof(AtlEvtSubsystem_CallEvent_IsCompleteFieldLoadingSublevel) == 0x000001, "Wrong size on AtlEvtSubsystem_CallEvent_IsCompleteFieldLoadingSublevel");
static_assert(offsetof(AtlEvtSubsystem_CallEvent_IsCompleteFieldLoadingSublevel, ReturnValue) == 0x000000, "Member 'AtlEvtSubsystem_CallEvent_IsCompleteFieldLoadingSublevel::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.GetAppEventCharacter
// 0x0018 (0x0018 - 0x0000)
struct AtlEvtSubsystem_GetAppEventCharacter final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlEvtPlayingCharacterInfo            ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_GetAppEventCharacter) == 0x000008, "Wrong alignment on AtlEvtSubsystem_GetAppEventCharacter");
static_assert(sizeof(AtlEvtSubsystem_GetAppEventCharacter) == 0x000018, "Wrong size on AtlEvtSubsystem_GetAppEventCharacter");
static_assert(offsetof(AtlEvtSubsystem_GetAppEventCharacter, CharcterCategoryType) == 0x000000, "Member 'AtlEvtSubsystem_GetAppEventCharacter::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetAppEventCharacter, CharaIndexID) == 0x000004, "Member 'AtlEvtSubsystem_GetAppEventCharacter::CharaIndexID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetAppEventCharacter, ReturnValue) == 0x000008, "Member 'AtlEvtSubsystem_GetAppEventCharacter::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.GetAppEvtCharactersHash
// 0x000C (0x000C - 0x0000)
struct AtlEvtSubsystem_GetAppEvtCharactersHash final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_GetAppEvtCharactersHash) == 0x000004, "Wrong alignment on AtlEvtSubsystem_GetAppEvtCharactersHash");
static_assert(sizeof(AtlEvtSubsystem_GetAppEvtCharactersHash) == 0x00000C, "Wrong size on AtlEvtSubsystem_GetAppEvtCharactersHash");
static_assert(offsetof(AtlEvtSubsystem_GetAppEvtCharactersHash, CharcterCategoryType) == 0x000000, "Member 'AtlEvtSubsystem_GetAppEvtCharactersHash::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetAppEvtCharactersHash, CharaIndexID) == 0x000004, "Member 'AtlEvtSubsystem_GetAppEvtCharactersHash::CharaIndexID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetAppEvtCharactersHash, ReturnValue) == 0x000008, "Member 'AtlEvtSubsystem_GetAppEvtCharactersHash::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.GetEventPlayMode
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtSubsystem_GetEventPlayMode final
{
public:
	EAtlEvtPlayMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_GetEventPlayMode) == 0x000001, "Wrong alignment on AtlEvtSubsystem_GetEventPlayMode");
static_assert(sizeof(AtlEvtSubsystem_GetEventPlayMode) == 0x000001, "Wrong size on AtlEvtSubsystem_GetEventPlayMode");
static_assert(offsetof(AtlEvtSubsystem_GetEventPlayMode, ReturnValue) == 0x000000, "Member 'AtlEvtSubsystem_GetEventPlayMode::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.GetEvtPreData
// 0x0080 (0x0080 - 0x0000)
struct AtlEvtSubsystem_GetEvtPreData final
{
public:
	EAtlEvtEventCategoryType                      CategoryType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventMajorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtlEvtPreData                         ReturnValue;                                       // 0x0010(0x0070)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_GetEvtPreData) == 0x000008, "Wrong alignment on AtlEvtSubsystem_GetEvtPreData");
static_assert(sizeof(AtlEvtSubsystem_GetEvtPreData) == 0x000080, "Wrong size on AtlEvtSubsystem_GetEvtPreData");
static_assert(offsetof(AtlEvtSubsystem_GetEvtPreData, CategoryType) == 0x000000, "Member 'AtlEvtSubsystem_GetEvtPreData::CategoryType' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetEvtPreData, EventMajorID) == 0x000004, "Member 'AtlEvtSubsystem_GetEvtPreData::EventMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetEvtPreData, EventMinorID) == 0x000008, "Member 'AtlEvtSubsystem_GetEvtPreData::EventMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetEvtPreData, ReturnValue) == 0x000010, "Member 'AtlEvtSubsystem_GetEvtPreData::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.GetEvtPreDataHash
// 0x0010 (0x0010 - 0x0000)
struct AtlEvtSubsystem_GetEvtPreDataHash final
{
public:
	EAtlEvtEventCategoryType                      CategoryType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventMajorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinorID;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_GetEvtPreDataHash) == 0x000004, "Wrong alignment on AtlEvtSubsystem_GetEvtPreDataHash");
static_assert(sizeof(AtlEvtSubsystem_GetEvtPreDataHash) == 0x000010, "Wrong size on AtlEvtSubsystem_GetEvtPreDataHash");
static_assert(offsetof(AtlEvtSubsystem_GetEvtPreDataHash, CategoryType) == 0x000000, "Member 'AtlEvtSubsystem_GetEvtPreDataHash::CategoryType' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetEvtPreDataHash, EventMajorID) == 0x000004, "Member 'AtlEvtSubsystem_GetEvtPreDataHash::EventMajorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetEvtPreDataHash, EventMinorID) == 0x000008, "Member 'AtlEvtSubsystem_GetEvtPreDataHash::EventMinorID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetEvtPreDataHash, ReturnValue) == 0x00000C, "Member 'AtlEvtSubsystem_GetEvtPreDataHash::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.GetFirstAppEventCharacter
// 0x0010 (0x0010 - 0x0000)
struct AtlEvtSubsystem_GetFirstAppEventCharacter final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_GetFirstAppEventCharacter) == 0x000008, "Wrong alignment on AtlEvtSubsystem_GetFirstAppEventCharacter");
static_assert(sizeof(AtlEvtSubsystem_GetFirstAppEventCharacter) == 0x000010, "Wrong size on AtlEvtSubsystem_GetFirstAppEventCharacter");
static_assert(offsetof(AtlEvtSubsystem_GetFirstAppEventCharacter, CharcterCategoryType) == 0x000000, "Member 'AtlEvtSubsystem_GetFirstAppEventCharacter::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetFirstAppEventCharacter, CharaIndexID) == 0x000004, "Member 'AtlEvtSubsystem_GetFirstAppEventCharacter::CharaIndexID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetFirstAppEventCharacter, ReturnValue) == 0x000008, "Member 'AtlEvtSubsystem_GetFirstAppEventCharacter::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.GetFirstAppEventCharacterByLipUniqueID
// 0x0010 (0x0010 - 0x0000)
struct AtlEvtSubsystem_GetFirstAppEventCharacterByLipUniqueID final
{
public:
	int32                                         LipUniqueID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_GetFirstAppEventCharacterByLipUniqueID) == 0x000008, "Wrong alignment on AtlEvtSubsystem_GetFirstAppEventCharacterByLipUniqueID");
static_assert(sizeof(AtlEvtSubsystem_GetFirstAppEventCharacterByLipUniqueID) == 0x000010, "Wrong size on AtlEvtSubsystem_GetFirstAppEventCharacterByLipUniqueID");
static_assert(offsetof(AtlEvtSubsystem_GetFirstAppEventCharacterByLipUniqueID, LipUniqueID) == 0x000000, "Member 'AtlEvtSubsystem_GetFirstAppEventCharacterByLipUniqueID::LipUniqueID' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetFirstAppEventCharacterByLipUniqueID, ReturnValue) == 0x000008, "Member 'AtlEvtSubsystem_GetFirstAppEventCharacterByLipUniqueID::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.GetLoadedEventSublevelInfos
// 0x0010 (0x0010 - 0x0000)
struct AtlEvtSubsystem_GetLoadedEventSublevelInfos final
{
public:
	TArray<struct FAtlEvtPlayLoadSublevelInfo>    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_GetLoadedEventSublevelInfos) == 0x000008, "Wrong alignment on AtlEvtSubsystem_GetLoadedEventSublevelInfos");
static_assert(sizeof(AtlEvtSubsystem_GetLoadedEventSublevelInfos) == 0x000010, "Wrong size on AtlEvtSubsystem_GetLoadedEventSublevelInfos");
static_assert(offsetof(AtlEvtSubsystem_GetLoadedEventSublevelInfos, ReturnValue) == 0x000000, "Member 'AtlEvtSubsystem_GetLoadedEventSublevelInfos::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.GetLocalData
// 0x0008 (0x0008 - 0x0000)
struct AtlEvtSubsystem_GetLocalData final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_GetLocalData) == 0x000004, "Wrong alignment on AtlEvtSubsystem_GetLocalData");
static_assert(sizeof(AtlEvtSubsystem_GetLocalData) == 0x000008, "Wrong size on AtlEvtSubsystem_GetLocalData");
static_assert(offsetof(AtlEvtSubsystem_GetLocalData, Index_0) == 0x000000, "Member 'AtlEvtSubsystem_GetLocalData::Index_0' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetLocalData, ReturnValue) == 0x000004, "Member 'AtlEvtSubsystem_GetLocalData::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.GetPlayingVisibleEventInfo
// 0x0060 (0x0060 - 0x0000)
struct AtlEvtSubsystem_GetPlayingVisibleEventInfo final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlEvtVisibleEventInfo                ReturnValue;                                       // 0x0008(0x0058)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_GetPlayingVisibleEventInfo) == 0x000008, "Wrong alignment on AtlEvtSubsystem_GetPlayingVisibleEventInfo");
static_assert(sizeof(AtlEvtSubsystem_GetPlayingVisibleEventInfo) == 0x000060, "Wrong size on AtlEvtSubsystem_GetPlayingVisibleEventInfo");
static_assert(offsetof(AtlEvtSubsystem_GetPlayingVisibleEventInfo, WorldContextObject) == 0x000000, "Member 'AtlEvtSubsystem_GetPlayingVisibleEventInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystem_GetPlayingVisibleEventInfo, ReturnValue) == 0x000008, "Member 'AtlEvtSubsystem_GetPlayingVisibleEventInfo::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.IsDoingTransitionLightScenarioSublevel
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtSubsystem_IsDoingTransitionLightScenarioSublevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_IsDoingTransitionLightScenarioSublevel) == 0x000001, "Wrong alignment on AtlEvtSubsystem_IsDoingTransitionLightScenarioSublevel");
static_assert(sizeof(AtlEvtSubsystem_IsDoingTransitionLightScenarioSublevel) == 0x000001, "Wrong size on AtlEvtSubsystem_IsDoingTransitionLightScenarioSublevel");
static_assert(offsetof(AtlEvtSubsystem_IsDoingTransitionLightScenarioSublevel, ReturnValue) == 0x000000, "Member 'AtlEvtSubsystem_IsDoingTransitionLightScenarioSublevel::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.IsEventPlayModeEditHelper
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtSubsystem_IsEventPlayModeEditHelper final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_IsEventPlayModeEditHelper) == 0x000001, "Wrong alignment on AtlEvtSubsystem_IsEventPlayModeEditHelper");
static_assert(sizeof(AtlEvtSubsystem_IsEventPlayModeEditHelper) == 0x000001, "Wrong size on AtlEvtSubsystem_IsEventPlayModeEditHelper");
static_assert(offsetof(AtlEvtSubsystem_IsEventPlayModeEditHelper, ReturnValue) == 0x000000, "Member 'AtlEvtSubsystem_IsEventPlayModeEditHelper::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.IsFinishedPreloadLightScenarioSublevels
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtSubsystem_IsFinishedPreloadLightScenarioSublevels final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_IsFinishedPreloadLightScenarioSublevels) == 0x000001, "Wrong alignment on AtlEvtSubsystem_IsFinishedPreloadLightScenarioSublevels");
static_assert(sizeof(AtlEvtSubsystem_IsFinishedPreloadLightScenarioSublevels) == 0x000001, "Wrong size on AtlEvtSubsystem_IsFinishedPreloadLightScenarioSublevels");
static_assert(offsetof(AtlEvtSubsystem_IsFinishedPreloadLightScenarioSublevels, ReturnValue) == 0x000000, "Member 'AtlEvtSubsystem_IsFinishedPreloadLightScenarioSublevels::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.IsHighSpeed
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtSubsystem_IsHighSpeed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_IsHighSpeed) == 0x000001, "Wrong alignment on AtlEvtSubsystem_IsHighSpeed");
static_assert(sizeof(AtlEvtSubsystem_IsHighSpeed) == 0x000001, "Wrong size on AtlEvtSubsystem_IsHighSpeed");
static_assert(offsetof(AtlEvtSubsystem_IsHighSpeed, ReturnValue) == 0x000000, "Member 'AtlEvtSubsystem_IsHighSpeed::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.IsPlayingEvent
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtSubsystem_IsPlayingEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_IsPlayingEvent) == 0x000001, "Wrong alignment on AtlEvtSubsystem_IsPlayingEvent");
static_assert(sizeof(AtlEvtSubsystem_IsPlayingEvent) == 0x000001, "Wrong size on AtlEvtSubsystem_IsPlayingEvent");
static_assert(offsetof(AtlEvtSubsystem_IsPlayingEvent, ReturnValue) == 0x000000, "Member 'AtlEvtSubsystem_IsPlayingEvent::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.IsPlayingEventOrEditHelperMode
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtSubsystem_IsPlayingEventOrEditHelperMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_IsPlayingEventOrEditHelperMode) == 0x000001, "Wrong alignment on AtlEvtSubsystem_IsPlayingEventOrEditHelperMode");
static_assert(sizeof(AtlEvtSubsystem_IsPlayingEventOrEditHelperMode) == 0x000001, "Wrong size on AtlEvtSubsystem_IsPlayingEventOrEditHelperMode");
static_assert(offsetof(AtlEvtSubsystem_IsPlayingEventOrEditHelperMode, ReturnValue) == 0x000000, "Member 'AtlEvtSubsystem_IsPlayingEventOrEditHelperMode::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystem.IsShowCinemaScope
// 0x0001 (0x0001 - 0x0000)
struct AtlEvtSubsystem_IsShowCinemaScope final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystem_IsShowCinemaScope) == 0x000001, "Wrong alignment on AtlEvtSubsystem_IsShowCinemaScope");
static_assert(sizeof(AtlEvtSubsystem_IsShowCinemaScope) == 0x000001, "Wrong size on AtlEvtSubsystem_IsShowCinemaScope");
static_assert(offsetof(AtlEvtSubsystem_IsShowCinemaScope, ReturnValue) == 0x000000, "Member 'AtlEvtSubsystem_IsShowCinemaScope::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.ConvFrameToTime
// 0x0008 (0x0008 - 0x0000)
struct UINameEntryDraw_ConvFrameToTime final
{
public:
	int32                                         InFrame;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_ConvFrameToTime) == 0x000004, "Wrong alignment on UINameEntryDraw_ConvFrameToTime");
static_assert(sizeof(UINameEntryDraw_ConvFrameToTime) == 0x000008, "Wrong size on UINameEntryDraw_ConvFrameToTime");
static_assert(offsetof(UINameEntryDraw_ConvFrameToTime, InFrame) == 0x000000, "Member 'UINameEntryDraw_ConvFrameToTime::InFrame' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_ConvFrameToTime, ReturnValue) == 0x000004, "Member 'UINameEntryDraw_ConvFrameToTime::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.DrawBlueLight
// 0x000C (0x000C - 0x0000)
struct UINameEntryDraw_DrawBlueLight final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_DrawBlueLight) == 0x000004, "Wrong alignment on UINameEntryDraw_DrawBlueLight");
static_assert(sizeof(UINameEntryDraw_DrawBlueLight) == 0x00000C, "Wrong size on UINameEntryDraw_DrawBlueLight");
static_assert(offsetof(UINameEntryDraw_DrawBlueLight, InPos) == 0x000000, "Member 'UINameEntryDraw_DrawBlueLight::InPos' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawBlueLight, InColor) == 0x000008, "Member 'UINameEntryDraw_DrawBlueLight::InColor' has a wrong offset!");

// Function xrd777.UINameEntryDraw.DrawCursor1
// 0x000C (0x000C - 0x0000)
struct UINameEntryDraw_DrawCursor1 final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_DrawCursor1) == 0x000004, "Wrong alignment on UINameEntryDraw_DrawCursor1");
static_assert(sizeof(UINameEntryDraw_DrawCursor1) == 0x00000C, "Wrong size on UINameEntryDraw_DrawCursor1");
static_assert(offsetof(UINameEntryDraw_DrawCursor1, InPos) == 0x000000, "Member 'UINameEntryDraw_DrawCursor1::InPos' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawCursor1, InColor) == 0x000008, "Member 'UINameEntryDraw_DrawCursor1::InColor' has a wrong offset!");

// Function xrd777.UINameEntryDraw.DrawGradationScreen
// 0x000C (0x000C - 0x0000)
struct UINameEntryDraw_DrawGradationScreen final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_DrawGradationScreen) == 0x000004, "Wrong alignment on UINameEntryDraw_DrawGradationScreen");
static_assert(sizeof(UINameEntryDraw_DrawGradationScreen) == 0x00000C, "Wrong size on UINameEntryDraw_DrawGradationScreen");
static_assert(offsetof(UINameEntryDraw_DrawGradationScreen, InPos) == 0x000000, "Member 'UINameEntryDraw_DrawGradationScreen::InPos' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawGradationScreen, InColor) == 0x000008, "Member 'UINameEntryDraw_DrawGradationScreen::InColor' has a wrong offset!");

// Function xrd777.UINameEntryDraw.DrawName1Text
// 0x0014 (0x0014 - 0x0000)
struct UINameEntryDraw_DrawName1Text final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColorDown;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColorUp;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_DrawName1Text) == 0x000004, "Wrong alignment on UINameEntryDraw_DrawName1Text");
static_assert(sizeof(UINameEntryDraw_DrawName1Text) == 0x000014, "Wrong size on UINameEntryDraw_DrawName1Text");
static_assert(offsetof(UINameEntryDraw_DrawName1Text, InPos) == 0x000000, "Member 'UINameEntryDraw_DrawName1Text::InPos' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawName1Text, InColor) == 0x000008, "Member 'UINameEntryDraw_DrawName1Text::InColor' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawName1Text, InColorDown) == 0x00000C, "Member 'UINameEntryDraw_DrawName1Text::InColorDown' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawName1Text, InColorUp) == 0x000010, "Member 'UINameEntryDraw_DrawName1Text::InColorUp' has a wrong offset!");

// Function xrd777.UINameEntryDraw.DrawName2Text
// 0x0014 (0x0014 - 0x0000)
struct UINameEntryDraw_DrawName2Text final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColorDown;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColorUp;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_DrawName2Text) == 0x000004, "Wrong alignment on UINameEntryDraw_DrawName2Text");
static_assert(sizeof(UINameEntryDraw_DrawName2Text) == 0x000014, "Wrong size on UINameEntryDraw_DrawName2Text");
static_assert(offsetof(UINameEntryDraw_DrawName2Text, InPos) == 0x000000, "Member 'UINameEntryDraw_DrawName2Text::InPos' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawName2Text, InColor) == 0x000008, "Member 'UINameEntryDraw_DrawName2Text::InColor' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawName2Text, InColorDown) == 0x00000C, "Member 'UINameEntryDraw_DrawName2Text::InColorDown' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawName2Text, InColorUp) == 0x000010, "Member 'UINameEntryDraw_DrawName2Text::InColorUp' has a wrong offset!");

// Function xrd777.UINameEntryDraw.DrawOptions
// 0x001C (0x001C - 0x0000)
struct UINameEntryDraw_DrawOptions final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Scale;                                             // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINameEntryDraw_DrawOptions) == 0x000004, "Wrong alignment on UINameEntryDraw_DrawOptions");
static_assert(sizeof(UINameEntryDraw_DrawOptions) == 0x00001C, "Wrong size on UINameEntryDraw_DrawOptions");
static_assert(offsetof(UINameEntryDraw_DrawOptions, InPos) == 0x000000, "Member 'UINameEntryDraw_DrawOptions::InPos' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawOptions, InColor) == 0x000008, "Member 'UINameEntryDraw_DrawOptions::InColor' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawOptions, Scale) == 0x00000C, "Member 'UINameEntryDraw_DrawOptions::Scale' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawOptions, Angle) == 0x000014, "Member 'UINameEntryDraw_DrawOptions::Angle' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawOptions, DrawPoint) == 0x000018, "Member 'UINameEntryDraw_DrawOptions::DrawPoint' has a wrong offset!");

// Function xrd777.UINameEntryDraw.DrawOptionsBase
// 0x001C (0x001C - 0x0000)
struct UINameEntryDraw_DrawOptionsBase final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Scale;                                             // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINameEntryDraw_DrawOptionsBase) == 0x000004, "Wrong alignment on UINameEntryDraw_DrawOptionsBase");
static_assert(sizeof(UINameEntryDraw_DrawOptionsBase) == 0x00001C, "Wrong size on UINameEntryDraw_DrawOptionsBase");
static_assert(offsetof(UINameEntryDraw_DrawOptionsBase, InPos) == 0x000000, "Member 'UINameEntryDraw_DrawOptionsBase::InPos' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawOptionsBase, InColor) == 0x000008, "Member 'UINameEntryDraw_DrawOptionsBase::InColor' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawOptionsBase, Scale) == 0x00000C, "Member 'UINameEntryDraw_DrawOptionsBase::Scale' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawOptionsBase, Angle) == 0x000014, "Member 'UINameEntryDraw_DrawOptionsBase::Angle' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawOptionsBase, DrawPoint) == 0x000018, "Member 'UINameEntryDraw_DrawOptionsBase::DrawPoint' has a wrong offset!");

// Function xrd777.UINameEntryDraw.DrawTranslation
// 0x000C (0x000C - 0x0000)
struct UINameEntryDraw_DrawTranslation final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_DrawTranslation) == 0x000004, "Wrong alignment on UINameEntryDraw_DrawTranslation");
static_assert(sizeof(UINameEntryDraw_DrawTranslation) == 0x00000C, "Wrong size on UINameEntryDraw_DrawTranslation");
static_assert(offsetof(UINameEntryDraw_DrawTranslation, InPos) == 0x000000, "Member 'UINameEntryDraw_DrawTranslation::InPos' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_DrawTranslation, InColor) == 0x000008, "Member 'UINameEntryDraw_DrawTranslation::InColor' has a wrong offset!");

// Function xrd777.UINameEntryDraw.GetAdjustedLayoutPosition
// 0x0014 (0x0014 - 0x0000)
struct UINameEntryDraw_GetAdjustedLayoutPosition final
{
public:
	EUINameEntryLayout                            InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDefaultPos;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_GetAdjustedLayoutPosition) == 0x000004, "Wrong alignment on UINameEntryDraw_GetAdjustedLayoutPosition");
static_assert(sizeof(UINameEntryDraw_GetAdjustedLayoutPosition) == 0x000014, "Wrong size on UINameEntryDraw_GetAdjustedLayoutPosition");
static_assert(offsetof(UINameEntryDraw_GetAdjustedLayoutPosition, InLayoutId) == 0x000000, "Member 'UINameEntryDraw_GetAdjustedLayoutPosition::InLayoutId' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_GetAdjustedLayoutPosition, InDefaultPos) == 0x000004, "Member 'UINameEntryDraw_GetAdjustedLayoutPosition::InDefaultPos' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_GetAdjustedLayoutPosition, ReturnValue) == 0x00000C, "Member 'UINameEntryDraw_GetAdjustedLayoutPosition::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.GetAdjustedLayoutScale
// 0x0014 (0x0014 - 0x0000)
struct UINameEntryDraw_GetAdjustedLayoutScale final
{
public:
	EUINameEntryLayout                            InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDefaultScale;                                    // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_GetAdjustedLayoutScale) == 0x000004, "Wrong alignment on UINameEntryDraw_GetAdjustedLayoutScale");
static_assert(sizeof(UINameEntryDraw_GetAdjustedLayoutScale) == 0x000014, "Wrong size on UINameEntryDraw_GetAdjustedLayoutScale");
static_assert(offsetof(UINameEntryDraw_GetAdjustedLayoutScale, InLayoutId) == 0x000000, "Member 'UINameEntryDraw_GetAdjustedLayoutScale::InLayoutId' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_GetAdjustedLayoutScale, InDefaultScale) == 0x000004, "Member 'UINameEntryDraw_GetAdjustedLayoutScale::InDefaultScale' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_GetAdjustedLayoutScale, ReturnValue) == 0x00000C, "Member 'UINameEntryDraw_GetAdjustedLayoutScale::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.InitDraw_IN
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_InitDraw_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_InitDraw_IN) == 0x000001, "Wrong alignment on UINameEntryDraw_InitDraw_IN");
static_assert(sizeof(UINameEntryDraw_InitDraw_IN) == 0x000001, "Wrong size on UINameEntryDraw_InitDraw_IN");
static_assert(offsetof(UINameEntryDraw_InitDraw_IN, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_InitDraw_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.InitDraw_Out
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_InitDraw_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_InitDraw_Out) == 0x000001, "Wrong alignment on UINameEntryDraw_InitDraw_Out");
static_assert(sizeof(UINameEntryDraw_InitDraw_Out) == 0x000001, "Wrong size on UINameEntryDraw_InitDraw_Out");
static_assert(offsetof(UINameEntryDraw_InitDraw_Out, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_InitDraw_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.IsAllNameEntered
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_IsAllNameEntered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_IsAllNameEntered) == 0x000001, "Wrong alignment on UINameEntryDraw_IsAllNameEntered");
static_assert(sizeof(UINameEntryDraw_IsAllNameEntered) == 0x000001, "Wrong size on UINameEntryDraw_IsAllNameEntered");
static_assert(offsetof(UINameEntryDraw_IsAllNameEntered, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_IsAllNameEntered::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.IsCursorName1Use
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_IsCursorName1Use final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_IsCursorName1Use) == 0x000001, "Wrong alignment on UINameEntryDraw_IsCursorName1Use");
static_assert(sizeof(UINameEntryDraw_IsCursorName1Use) == 0x000001, "Wrong size on UINameEntryDraw_IsCursorName1Use");
static_assert(offsetof(UINameEntryDraw_IsCursorName1Use, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_IsCursorName1Use::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.IsCursorName2Use
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_IsCursorName2Use final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_IsCursorName2Use) == 0x000001, "Wrong alignment on UINameEntryDraw_IsCursorName2Use");
static_assert(sizeof(UINameEntryDraw_IsCursorName2Use) == 0x000001, "Wrong size on UINameEntryDraw_IsCursorName2Use");
static_assert(offsetof(UINameEntryDraw_IsCursorName2Use, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_IsCursorName2Use::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.IsCursorPreName1Use
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_IsCursorPreName1Use final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_IsCursorPreName1Use) == 0x000001, "Wrong alignment on UINameEntryDraw_IsCursorPreName1Use");
static_assert(sizeof(UINameEntryDraw_IsCursorPreName1Use) == 0x000001, "Wrong size on UINameEntryDraw_IsCursorPreName1Use");
static_assert(offsetof(UINameEntryDraw_IsCursorPreName1Use, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_IsCursorPreName1Use::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.IsCursorPreName2Use
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_IsCursorPreName2Use final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_IsCursorPreName2Use) == 0x000001, "Wrong alignment on UINameEntryDraw_IsCursorPreName2Use");
static_assert(sizeof(UINameEntryDraw_IsCursorPreName2Use) == 0x000001, "Wrong size on UINameEntryDraw_IsCursorPreName2Use");
static_assert(offsetof(UINameEntryDraw_IsCursorPreName2Use, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_IsCursorPreName2Use::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.IsEnableOption
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_IsEnableOption final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_IsEnableOption) == 0x000001, "Wrong alignment on UINameEntryDraw_IsEnableOption");
static_assert(sizeof(UINameEntryDraw_IsEnableOption) == 0x000001, "Wrong size on UINameEntryDraw_IsEnableOption");
static_assert(offsetof(UINameEntryDraw_IsEnableOption, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_IsEnableOption::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.IsIsDeterminedByCross
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_IsIsDeterminedByCross final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_IsIsDeterminedByCross) == 0x000001, "Wrong alignment on UINameEntryDraw_IsIsDeterminedByCross");
static_assert(sizeof(UINameEntryDraw_IsIsDeterminedByCross) == 0x000001, "Wrong size on UINameEntryDraw_IsIsDeterminedByCross");
static_assert(offsetof(UINameEntryDraw_IsIsDeterminedByCross, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_IsIsDeterminedByCross::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.IsKeyHelpGray
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_IsKeyHelpGray final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_IsKeyHelpGray) == 0x000001, "Wrong alignment on UINameEntryDraw_IsKeyHelpGray");
static_assert(sizeof(UINameEntryDraw_IsKeyHelpGray) == 0x000001, "Wrong size on UINameEntryDraw_IsKeyHelpGray");
static_assert(offsetof(UINameEntryDraw_IsKeyHelpGray, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_IsKeyHelpGray::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.IsName1Entered
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_IsName1Entered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_IsName1Entered) == 0x000001, "Wrong alignment on UINameEntryDraw_IsName1Entered");
static_assert(sizeof(UINameEntryDraw_IsName1Entered) == 0x000001, "Wrong size on UINameEntryDraw_IsName1Entered");
static_assert(offsetof(UINameEntryDraw_IsName1Entered, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_IsName1Entered::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.IsName1TypingOnKeyboard
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_IsName1TypingOnKeyboard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_IsName1TypingOnKeyboard) == 0x000001, "Wrong alignment on UINameEntryDraw_IsName1TypingOnKeyboard");
static_assert(sizeof(UINameEntryDraw_IsName1TypingOnKeyboard) == 0x000001, "Wrong size on UINameEntryDraw_IsName1TypingOnKeyboard");
static_assert(offsetof(UINameEntryDraw_IsName1TypingOnKeyboard, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_IsName1TypingOnKeyboard::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.IsName2Entered
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_IsName2Entered final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_IsName2Entered) == 0x000001, "Wrong alignment on UINameEntryDraw_IsName2Entered");
static_assert(sizeof(UINameEntryDraw_IsName2Entered) == 0x000001, "Wrong size on UINameEntryDraw_IsName2Entered");
static_assert(offsetof(UINameEntryDraw_IsName2Entered, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_IsName2Entered::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.IsName2TypingOnKeyboard
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_IsName2TypingOnKeyboard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_IsName2TypingOnKeyboard) == 0x000001, "Wrong alignment on UINameEntryDraw_IsName2TypingOnKeyboard");
static_assert(sizeof(UINameEntryDraw_IsName2TypingOnKeyboard) == 0x000001, "Wrong size on UINameEntryDraw_IsName2TypingOnKeyboard");
static_assert(offsetof(UINameEntryDraw_IsName2TypingOnKeyboard, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_IsName2TypingOnKeyboard::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.KeyHelpIn
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_KeyHelpIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_KeyHelpIn) == 0x000001, "Wrong alignment on UINameEntryDraw_KeyHelpIn");
static_assert(sizeof(UINameEntryDraw_KeyHelpIn) == 0x000001, "Wrong size on UINameEntryDraw_KeyHelpIn");
static_assert(offsetof(UINameEntryDraw_KeyHelpIn, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_KeyHelpIn::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.KeyHelpOut
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_KeyHelpOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_KeyHelpOut) == 0x000001, "Wrong alignment on UINameEntryDraw_KeyHelpOut");
static_assert(sizeof(UINameEntryDraw_KeyHelpOut) == 0x000001, "Wrong size on UINameEntryDraw_KeyHelpOut");
static_assert(offsetof(UINameEntryDraw_KeyHelpOut, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_KeyHelpOut::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.ResetDraw
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_ResetDraw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_ResetDraw) == 0x000001, "Wrong alignment on UINameEntryDraw_ResetDraw");
static_assert(sizeof(UINameEntryDraw_ResetDraw) == 0x000001, "Wrong size on UINameEntryDraw_ResetDraw");
static_assert(offsetof(UINameEntryDraw_ResetDraw, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_ResetDraw::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.SetDicitionTouchCollision
// 0x001C (0x001C - 0x0000)
struct UINameEntryDraw_SetDicitionTouchCollision final
{
public:
	struct FVector2D                              InDicitionPos;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OptionScale;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DicitionScale;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINameEntryDraw_SetDicitionTouchCollision) == 0x000004, "Wrong alignment on UINameEntryDraw_SetDicitionTouchCollision");
static_assert(sizeof(UINameEntryDraw_SetDicitionTouchCollision) == 0x00001C, "Wrong size on UINameEntryDraw_SetDicitionTouchCollision");
static_assert(offsetof(UINameEntryDraw_SetDicitionTouchCollision, InDicitionPos) == 0x000000, "Member 'UINameEntryDraw_SetDicitionTouchCollision::InDicitionPos' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_SetDicitionTouchCollision, OptionScale) == 0x000008, "Member 'UINameEntryDraw_SetDicitionTouchCollision::OptionScale' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_SetDicitionTouchCollision, DicitionScale) == 0x000010, "Member 'UINameEntryDraw_SetDicitionTouchCollision::DicitionScale' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_SetDicitionTouchCollision, DrawPoint) == 0x000018, "Member 'UINameEntryDraw_SetDicitionTouchCollision::DrawPoint' has a wrong offset!");

// Function xrd777.UINameEntryDraw.SetNameTouchCollision
// 0x0010 (0x0010 - 0x0000)
struct UINameEntryDraw_SetNameTouchCollision final
{
public:
	struct FVector2D                              InName1Pos;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InName2Pos;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_SetNameTouchCollision) == 0x000004, "Wrong alignment on UINameEntryDraw_SetNameTouchCollision");
static_assert(sizeof(UINameEntryDraw_SetNameTouchCollision) == 0x000010, "Wrong size on UINameEntryDraw_SetNameTouchCollision");
static_assert(offsetof(UINameEntryDraw_SetNameTouchCollision, InName1Pos) == 0x000000, "Member 'UINameEntryDraw_SetNameTouchCollision::InName1Pos' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_SetNameTouchCollision, InName2Pos) == 0x000008, "Member 'UINameEntryDraw_SetNameTouchCollision::InName2Pos' has a wrong offset!");

// Function xrd777.UINameEntryDraw.StateDraw_BG
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_StateDraw_BG final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_StateDraw_BG) == 0x000001, "Wrong alignment on UINameEntryDraw_StateDraw_BG");
static_assert(sizeof(UINameEntryDraw_StateDraw_BG) == 0x000001, "Wrong size on UINameEntryDraw_StateDraw_BG");
static_assert(offsetof(UINameEntryDraw_StateDraw_BG, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_StateDraw_BG::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.StateDraw_Frame
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_StateDraw_Frame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_StateDraw_Frame) == 0x000001, "Wrong alignment on UINameEntryDraw_StateDraw_Frame");
static_assert(sizeof(UINameEntryDraw_StateDraw_Frame) == 0x000001, "Wrong size on UINameEntryDraw_StateDraw_Frame");
static_assert(offsetof(UINameEntryDraw_StateDraw_Frame, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_StateDraw_Frame::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.StateDraw_IN
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_StateDraw_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_StateDraw_IN) == 0x000001, "Wrong alignment on UINameEntryDraw_StateDraw_IN");
static_assert(sizeof(UINameEntryDraw_StateDraw_IN) == 0x000001, "Wrong size on UINameEntryDraw_StateDraw_IN");
static_assert(offsetof(UINameEntryDraw_StateDraw_IN, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_StateDraw_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.StateDraw_Out
// 0x0001 (0x0001 - 0x0000)
struct UINameEntryDraw_StateDraw_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UINameEntryDraw_StateDraw_Out) == 0x000001, "Wrong alignment on UINameEntryDraw_StateDraw_Out");
static_assert(sizeof(UINameEntryDraw_StateDraw_Out) == 0x000001, "Wrong size on UINameEntryDraw_StateDraw_Out");
static_assert(offsetof(UINameEntryDraw_StateDraw_Out, ReturnValue) == 0x000000, "Member 'UINameEntryDraw_StateDraw_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UINameEntryDraw.TimeWithinRangeFrame
// 0x0010 (0x0010 - 0x0000)
struct UINameEntryDraw_TimeWithinRangeFrame final
{
public:
	float                                         NowTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UINameEntryDraw_TimeWithinRangeFrame) == 0x000004, "Wrong alignment on UINameEntryDraw_TimeWithinRangeFrame");
static_assert(sizeof(UINameEntryDraw_TimeWithinRangeFrame) == 0x000010, "Wrong size on UINameEntryDraw_TimeWithinRangeFrame");
static_assert(offsetof(UINameEntryDraw_TimeWithinRangeFrame, NowTime) == 0x000000, "Member 'UINameEntryDraw_TimeWithinRangeFrame::NowTime' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_TimeWithinRangeFrame, StartFrame) == 0x000004, "Member 'UINameEntryDraw_TimeWithinRangeFrame::StartFrame' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_TimeWithinRangeFrame, EndFrame) == 0x000008, "Member 'UINameEntryDraw_TimeWithinRangeFrame::EndFrame' has a wrong offset!");
static_assert(offsetof(UINameEntryDraw_TimeWithinRangeFrame, ReturnValue) == 0x00000C, "Member 'UINameEntryDraw_TimeWithinRangeFrame::ReturnValue' has a wrong offset!");

// Function xrd777.AtlEvtSubsystemDraft.EvtPlay
// 0x0050 (0x0050 - 0x0000)
struct AtlEvtSubsystemDraft_EvtPlay final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EvtName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlEvtPlayParameter                   Param;                                             // 0x0018(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlEvtSubsystemDraft_EvtPlay) == 0x000008, "Wrong alignment on AtlEvtSubsystemDraft_EvtPlay");
static_assert(sizeof(AtlEvtSubsystemDraft_EvtPlay) == 0x000050, "Wrong size on AtlEvtSubsystemDraft_EvtPlay");
static_assert(offsetof(AtlEvtSubsystemDraft_EvtPlay, WorldContextObject) == 0x000000, "Member 'AtlEvtSubsystemDraft_EvtPlay::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystemDraft_EvtPlay, EvtName) == 0x000008, "Member 'AtlEvtSubsystemDraft_EvtPlay::EvtName' has a wrong offset!");
static_assert(offsetof(AtlEvtSubsystemDraft_EvtPlay, Param) == 0x000018, "Member 'AtlEvtSubsystemDraft_EvtPlay::Param' has a wrong offset!");

// Function xrd777.AtlUITextBlock.GetDynamicFontMaterial
// 0x0008 (0x0008 - 0x0000)
struct AtlUITextBlock_GetDynamicFontMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_GetDynamicFontMaterial) == 0x000008, "Wrong alignment on AtlUITextBlock_GetDynamicFontMaterial");
static_assert(sizeof(AtlUITextBlock_GetDynamicFontMaterial) == 0x000008, "Wrong size on AtlUITextBlock_GetDynamicFontMaterial");
static_assert(offsetof(AtlUITextBlock_GetDynamicFontMaterial, ReturnValue) == 0x000000, "Member 'AtlUITextBlock_GetDynamicFontMaterial::ReturnValue' has a wrong offset!");

// Function xrd777.AtlUITextBlock.GetDynamicOutlineMaterial
// 0x0008 (0x0008 - 0x0000)
struct AtlUITextBlock_GetDynamicOutlineMaterial final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_GetDynamicOutlineMaterial) == 0x000008, "Wrong alignment on AtlUITextBlock_GetDynamicOutlineMaterial");
static_assert(sizeof(AtlUITextBlock_GetDynamicOutlineMaterial) == 0x000008, "Wrong size on AtlUITextBlock_GetDynamicOutlineMaterial");
static_assert(offsetof(AtlUITextBlock_GetDynamicOutlineMaterial, ReturnValue) == 0x000000, "Member 'AtlUITextBlock_GetDynamicOutlineMaterial::ReturnValue' has a wrong offset!");

// Function xrd777.AtlUITextBlock.SetAutoWrapText
// 0x0001 (0x0001 - 0x0000)
struct AtlUITextBlock_SetAutoWrapText final
{
public:
	bool                                          InAutoTextWrap;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_SetAutoWrapText) == 0x000001, "Wrong alignment on AtlUITextBlock_SetAutoWrapText");
static_assert(sizeof(AtlUITextBlock_SetAutoWrapText) == 0x000001, "Wrong size on AtlUITextBlock_SetAutoWrapText");
static_assert(offsetof(AtlUITextBlock_SetAutoWrapText, InAutoTextWrap) == 0x000000, "Member 'AtlUITextBlock_SetAutoWrapText::InAutoTextWrap' has a wrong offset!");

// Function xrd777.AtlUITextBlock.SetColorAndOpacity
// 0x0028 (0x0028 - 0x0000)
struct AtlUITextBlock_SetColorAndOpacity final
{
public:
	struct FSlateColor                            InColorAndOpacity;                                 // 0x0000(0x0028)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_SetColorAndOpacity) == 0x000008, "Wrong alignment on AtlUITextBlock_SetColorAndOpacity");
static_assert(sizeof(AtlUITextBlock_SetColorAndOpacity) == 0x000028, "Wrong size on AtlUITextBlock_SetColorAndOpacity");
static_assert(offsetof(AtlUITextBlock_SetColorAndOpacity, InColorAndOpacity) == 0x000000, "Member 'AtlUITextBlock_SetColorAndOpacity::InColorAndOpacity' has a wrong offset!");

// Function xrd777.AtlUITextBlock.SetFont
// 0x0058 (0x0058 - 0x0000)
struct AtlUITextBlock_SetFont final
{
public:
	struct FSlateFontInfo                         InFontInfo;                                        // 0x0000(0x0058)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_SetFont) == 0x000008, "Wrong alignment on AtlUITextBlock_SetFont");
static_assert(sizeof(AtlUITextBlock_SetFont) == 0x000058, "Wrong size on AtlUITextBlock_SetFont");
static_assert(offsetof(AtlUITextBlock_SetFont, InFontInfo) == 0x000000, "Member 'AtlUITextBlock_SetFont::InFontInfo' has a wrong offset!");

// Function xrd777.AtlUITextBlock.SetMinDesiredWidth
// 0x0004 (0x0004 - 0x0000)
struct AtlUITextBlock_SetMinDesiredWidth final
{
public:
	float                                         InMinDesiredWidth;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_SetMinDesiredWidth) == 0x000004, "Wrong alignment on AtlUITextBlock_SetMinDesiredWidth");
static_assert(sizeof(AtlUITextBlock_SetMinDesiredWidth) == 0x000004, "Wrong size on AtlUITextBlock_SetMinDesiredWidth");
static_assert(offsetof(AtlUITextBlock_SetMinDesiredWidth, InMinDesiredWidth) == 0x000000, "Member 'AtlUITextBlock_SetMinDesiredWidth::InMinDesiredWidth' has a wrong offset!");

// Function xrd777.AtlUITextBlock.SetOpacity
// 0x0004 (0x0004 - 0x0000)
struct AtlUITextBlock_SetOpacity final
{
public:
	float                                         InOpacity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_SetOpacity) == 0x000004, "Wrong alignment on AtlUITextBlock_SetOpacity");
static_assert(sizeof(AtlUITextBlock_SetOpacity) == 0x000004, "Wrong size on AtlUITextBlock_SetOpacity");
static_assert(offsetof(AtlUITextBlock_SetOpacity, InOpacity) == 0x000000, "Member 'AtlUITextBlock_SetOpacity::InOpacity' has a wrong offset!");

// Function xrd777.AtlUITextBlock.SetShadowColorAndOpacity
// 0x0010 (0x0010 - 0x0000)
struct AtlUITextBlock_SetShadowColorAndOpacity final
{
public:
	struct FLinearColor                           InShadowColorAndOpacity;                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_SetShadowColorAndOpacity) == 0x000004, "Wrong alignment on AtlUITextBlock_SetShadowColorAndOpacity");
static_assert(sizeof(AtlUITextBlock_SetShadowColorAndOpacity) == 0x000010, "Wrong size on AtlUITextBlock_SetShadowColorAndOpacity");
static_assert(offsetof(AtlUITextBlock_SetShadowColorAndOpacity, InShadowColorAndOpacity) == 0x000000, "Member 'AtlUITextBlock_SetShadowColorAndOpacity::InShadowColorAndOpacity' has a wrong offset!");

// Function xrd777.AtlUITextBlock.SetShadowOffset
// 0x0008 (0x0008 - 0x0000)
struct AtlUITextBlock_SetShadowOffset final
{
public:
	struct FVector2D                              InShadowOffset;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_SetShadowOffset) == 0x000004, "Wrong alignment on AtlUITextBlock_SetShadowOffset");
static_assert(sizeof(AtlUITextBlock_SetShadowOffset) == 0x000008, "Wrong size on AtlUITextBlock_SetShadowOffset");
static_assert(offsetof(AtlUITextBlock_SetShadowOffset, InShadowOffset) == 0x000000, "Member 'AtlUITextBlock_SetShadowOffset::InShadowOffset' has a wrong offset!");

// Function xrd777.AtlUITextBlock.SetStrikeBrush
// 0x0088 (0x0088 - 0x0000)
struct AtlUITextBlock_SetStrikeBrush final
{
public:
	struct FSlateBrush                            InStrikeBrush;                                     // 0x0000(0x0088)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_SetStrikeBrush) == 0x000008, "Wrong alignment on AtlUITextBlock_SetStrikeBrush");
static_assert(sizeof(AtlUITextBlock_SetStrikeBrush) == 0x000088, "Wrong size on AtlUITextBlock_SetStrikeBrush");
static_assert(offsetof(AtlUITextBlock_SetStrikeBrush, InStrikeBrush) == 0x000000, "Member 'AtlUITextBlock_SetStrikeBrush::InStrikeBrush' has a wrong offset!");

// Function xrd777.AtlUITextBlock.SetText
// 0x0018 (0x0018 - 0x0000)
struct AtlUITextBlock_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_SetText) == 0x000008, "Wrong alignment on AtlUITextBlock_SetText");
static_assert(sizeof(AtlUITextBlock_SetText) == 0x000018, "Wrong size on AtlUITextBlock_SetText");
static_assert(offsetof(AtlUITextBlock_SetText, InText) == 0x000000, "Member 'AtlUITextBlock_SetText::InText' has a wrong offset!");

// Function xrd777.AtlUITextBlock.SetTextTransformPolicy
// 0x0001 (0x0001 - 0x0000)
struct AtlUITextBlock_SetTextTransformPolicy final
{
public:
	ETextTransformPolicy                          InTransformPolicy;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_SetTextTransformPolicy) == 0x000001, "Wrong alignment on AtlUITextBlock_SetTextTransformPolicy");
static_assert(sizeof(AtlUITextBlock_SetTextTransformPolicy) == 0x000001, "Wrong size on AtlUITextBlock_SetTextTransformPolicy");
static_assert(offsetof(AtlUITextBlock_SetTextTransformPolicy, InTransformPolicy) == 0x000000, "Member 'AtlUITextBlock_SetTextTransformPolicy::InTransformPolicy' has a wrong offset!");

// Function xrd777.AtlUITextBlock.GetText
// 0x0018 (0x0018 - 0x0000)
struct AtlUITextBlock_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlUITextBlock_GetText) == 0x000008, "Wrong alignment on AtlUITextBlock_GetText");
static_assert(sizeof(AtlUITextBlock_GetText) == 0x000018, "Wrong size on AtlUITextBlock_GetText");
static_assert(offsetof(AtlUITextBlock_GetText, ReturnValue) == 0x000000, "Member 'AtlUITextBlock_GetText::ReturnValue' has a wrong offset!");

// Function xrd777.FldHitCore.OnActorOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct FldHitCore_OnActorOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldHitCore_OnActorOverlapBegin) == 0x000008, "Wrong alignment on FldHitCore_OnActorOverlapBegin");
static_assert(sizeof(FldHitCore_OnActorOverlapBegin) == 0x0000A8, "Wrong size on FldHitCore_OnActorOverlapBegin");
static_assert(offsetof(FldHitCore_OnActorOverlapBegin, OverlappedComponent) == 0x000000, "Member 'FldHitCore_OnActorOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldHitCore_OnActorOverlapBegin, OtherActor) == 0x000008, "Member 'FldHitCore_OnActorOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(FldHitCore_OnActorOverlapBegin, OtherComp) == 0x000010, "Member 'FldHitCore_OnActorOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(FldHitCore_OnActorOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'FldHitCore_OnActorOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FldHitCore_OnActorOverlapBegin, bFromSweep) == 0x00001C, "Member 'FldHitCore_OnActorOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(FldHitCore_OnActorOverlapBegin, SweepResult) == 0x000020, "Member 'FldHitCore_OnActorOverlapBegin::SweepResult' has a wrong offset!");

// Function xrd777.FldHitCore.OnActorOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct FldHitCore_OnActorOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldHitCore_OnActorOverlapEnd) == 0x000008, "Wrong alignment on FldHitCore_OnActorOverlapEnd");
static_assert(sizeof(FldHitCore_OnActorOverlapEnd) == 0x000020, "Wrong size on FldHitCore_OnActorOverlapEnd");
static_assert(offsetof(FldHitCore_OnActorOverlapEnd, OverlappedComponent) == 0x000000, "Member 'FldHitCore_OnActorOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldHitCore_OnActorOverlapEnd, OtherActor) == 0x000008, "Member 'FldHitCore_OnActorOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(FldHitCore_OnActorOverlapEnd, OtherComp) == 0x000010, "Member 'FldHitCore_OnActorOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(FldHitCore_OnActorOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'FldHitCore_OnActorOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function xrd777.BFLAtlEvtCharacter.ConstructCostume
// 0x0018 (0x0018 - 0x0000)
struct BFLAtlEvtCharacter_ConstructCostume final
{
public:
	class ACharacterBaseCore*                     CharacterBaseCore;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppCharCategoryType                          AppCharaCategory;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AppCharaIndex;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppCharaCostumeIndex;                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLAtlEvtCharacter_ConstructCostume) == 0x000008, "Wrong alignment on BFLAtlEvtCharacter_ConstructCostume");
static_assert(sizeof(BFLAtlEvtCharacter_ConstructCostume) == 0x000018, "Wrong size on BFLAtlEvtCharacter_ConstructCostume");
static_assert(offsetof(BFLAtlEvtCharacter_ConstructCostume, CharacterBaseCore) == 0x000000, "Member 'BFLAtlEvtCharacter_ConstructCostume::CharacterBaseCore' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtCharacter_ConstructCostume, AppCharaCategory) == 0x000008, "Member 'BFLAtlEvtCharacter_ConstructCostume::AppCharaCategory' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtCharacter_ConstructCostume, AppCharaIndex) == 0x00000C, "Member 'BFLAtlEvtCharacter_ConstructCostume::AppCharaIndex' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtCharacter_ConstructCostume, AppCharaCostumeIndex) == 0x000010, "Member 'BFLAtlEvtCharacter_ConstructCostume::AppCharaCostumeIndex' has a wrong offset!");

// Function xrd777.BFLAtlEvtCharacter.ConstructNPCCostume
// 0x0018 (0x0018 - 0x0000)
struct BFLAtlEvtCharacter_ConstructNPCCostume final
{
public:
	class ANpcBaseCore*                           NpcBaseCore;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AppNpcCharaCostumeIndex;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NpcIndexId;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HairId;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FaceID;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLAtlEvtCharacter_ConstructNPCCostume) == 0x000008, "Wrong alignment on BFLAtlEvtCharacter_ConstructNPCCostume");
static_assert(sizeof(BFLAtlEvtCharacter_ConstructNPCCostume) == 0x000018, "Wrong size on BFLAtlEvtCharacter_ConstructNPCCostume");
static_assert(offsetof(BFLAtlEvtCharacter_ConstructNPCCostume, NpcBaseCore) == 0x000000, "Member 'BFLAtlEvtCharacter_ConstructNPCCostume::NpcBaseCore' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtCharacter_ConstructNPCCostume, AppNpcCharaCostumeIndex) == 0x000008, "Member 'BFLAtlEvtCharacter_ConstructNPCCostume::AppNpcCharaCostumeIndex' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtCharacter_ConstructNPCCostume, NpcIndexId) == 0x00000C, "Member 'BFLAtlEvtCharacter_ConstructNPCCostume::NpcIndexId' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtCharacter_ConstructNPCCostume, HairId) == 0x000010, "Member 'BFLAtlEvtCharacter_ConstructNPCCostume::HairId' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtCharacter_ConstructNPCCostume, FaceID) == 0x000014, "Member 'BFLAtlEvtCharacter_ConstructNPCCostume::FaceID' has a wrong offset!");

// Function xrd777.BFLAtlEvtCharacter.KoromaruAdjust
// 0x0008 (0x0008 - 0x0000)
struct BFLAtlEvtCharacter_KoromaruAdjust final
{
public:
	class AActor*                                 KoromaruActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLAtlEvtCharacter_KoromaruAdjust) == 0x000008, "Wrong alignment on BFLAtlEvtCharacter_KoromaruAdjust");
static_assert(sizeof(BFLAtlEvtCharacter_KoromaruAdjust) == 0x000008, "Wrong size on BFLAtlEvtCharacter_KoromaruAdjust");
static_assert(offsetof(BFLAtlEvtCharacter_KoromaruAdjust, KoromaruActor) == 0x000000, "Member 'BFLAtlEvtCharacter_KoromaruAdjust::KoromaruActor' has a wrong offset!");

// Function xrd777.BFLAtlEvtCharacter.PersonaCombineAdjust
// 0x0008 (0x0008 - 0x0000)
struct BFLAtlEvtCharacter_PersonaCombineAdjust final
{
public:
	class AActor*                                 PersonaActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLAtlEvtCharacter_PersonaCombineAdjust) == 0x000008, "Wrong alignment on BFLAtlEvtCharacter_PersonaCombineAdjust");
static_assert(sizeof(BFLAtlEvtCharacter_PersonaCombineAdjust) == 0x000008, "Wrong size on BFLAtlEvtCharacter_PersonaCombineAdjust");
static_assert(offsetof(BFLAtlEvtCharacter_PersonaCombineAdjust, PersonaActor) == 0x000000, "Member 'BFLAtlEvtCharacter_PersonaCombineAdjust::PersonaActor' has a wrong offset!");

// Function xrd777.BFLAtlEvtCharacter.TickLookAtEditorOnly
// 0x0018 (0x0018 - 0x0000)
struct BFLAtlEvtCharacter_TickLookAtEditorOnly final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebugLookAtTargetLocation;                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookAtFinalLocation;                               // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLAtlEvtCharacter_TickLookAtEditorOnly) == 0x000008, "Wrong alignment on BFLAtlEvtCharacter_TickLookAtEditorOnly");
static_assert(sizeof(BFLAtlEvtCharacter_TickLookAtEditorOnly) == 0x000018, "Wrong size on BFLAtlEvtCharacter_TickLookAtEditorOnly");
static_assert(offsetof(BFLAtlEvtCharacter_TickLookAtEditorOnly, Character) == 0x000000, "Member 'BFLAtlEvtCharacter_TickLookAtEditorOnly::Character' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtCharacter_TickLookAtEditorOnly, bShowDebugLookAtTargetLocation) == 0x000008, "Member 'BFLAtlEvtCharacter_TickLookAtEditorOnly::bShowDebugLookAtTargetLocation' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtCharacter_TickLookAtEditorOnly, LookAtFinalLocation) == 0x00000C, "Member 'BFLAtlEvtCharacter_TickLookAtEditorOnly::LookAtFinalLocation' has a wrong offset!");

// Function xrd777.UtlBpObjCore.CallOpenLevel
// 0x0008 (0x0008 - 0x0000)
struct UtlBpObjCore_CallOpenLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtlBpObjCore_CallOpenLevel) == 0x000004, "Wrong alignment on UtlBpObjCore_CallOpenLevel");
static_assert(sizeof(UtlBpObjCore_CallOpenLevel) == 0x000008, "Wrong size on UtlBpObjCore_CallOpenLevel");
static_assert(offsetof(UtlBpObjCore_CallOpenLevel, LevelName) == 0x000000, "Member 'UtlBpObjCore_CallOpenLevel::LevelName' has a wrong offset!");

// Function xrd777.UtlBpObjCore.LoadLevel
// 0x0020 (0x0020 - 0x0000)
struct UtlBpObjCore_LoadLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtlBpObjCore_LoadLevel) == 0x000008, "Wrong alignment on UtlBpObjCore_LoadLevel");
static_assert(sizeof(UtlBpObjCore_LoadLevel) == 0x000020, "Wrong size on UtlBpObjCore_LoadLevel");
static_assert(offsetof(UtlBpObjCore_LoadLevel, LevelName) == 0x000000, "Member 'UtlBpObjCore_LoadLevel::LevelName' has a wrong offset!");
static_assert(offsetof(UtlBpObjCore_LoadLevel, LatentInfo) == 0x000008, "Member 'UtlBpObjCore_LoadLevel::LatentInfo' has a wrong offset!");

// Function xrd777.UtlBpObjCore.UnloadLevel
// 0x0020 (0x0020 - 0x0000)
struct UtlBpObjCore_UnloadLevel final
{
public:
	class FName                                   LevelName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtlBpObjCore_UnloadLevel) == 0x000008, "Wrong alignment on UtlBpObjCore_UnloadLevel");
static_assert(sizeof(UtlBpObjCore_UnloadLevel) == 0x000020, "Wrong size on UtlBpObjCore_UnloadLevel");
static_assert(offsetof(UtlBpObjCore_UnloadLevel, LevelName) == 0x000000, "Member 'UtlBpObjCore_UnloadLevel::LevelName' has a wrong offset!");
static_assert(offsetof(UtlBpObjCore_UnloadLevel, LatentInfo) == 0x000008, "Member 'UtlBpObjCore_UnloadLevel::LatentInfo' has a wrong offset!");

// Function xrd777.UtlBpObj.StartFadeIN
// 0x0008 (0x0008 - 0x0000)
struct UtlBpObj_StartFadeIN final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frame;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtlBpObj_StartFadeIN) == 0x000004, "Wrong alignment on UtlBpObj_StartFadeIN");
static_assert(sizeof(UtlBpObj_StartFadeIN) == 0x000008, "Wrong size on UtlBpObj_StartFadeIN");
static_assert(offsetof(UtlBpObj_StartFadeIN, Type) == 0x000000, "Member 'UtlBpObj_StartFadeIN::Type' has a wrong offset!");
static_assert(offsetof(UtlBpObj_StartFadeIN, Frame) == 0x000004, "Member 'UtlBpObj_StartFadeIN::Frame' has a wrong offset!");

// Function xrd777.UtlBpObj.StartFadeOUT
// 0x0008 (0x0008 - 0x0000)
struct UtlBpObj_StartFadeOUT final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frame;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtlBpObj_StartFadeOUT) == 0x000004, "Wrong alignment on UtlBpObj_StartFadeOUT");
static_assert(sizeof(UtlBpObj_StartFadeOUT) == 0x000008, "Wrong size on UtlBpObj_StartFadeOUT");
static_assert(offsetof(UtlBpObj_StartFadeOUT, Type) == 0x000000, "Member 'UtlBpObj_StartFadeOUT::Type' has a wrong offset!");
static_assert(offsetof(UtlBpObj_StartFadeOUT, Frame) == 0x000004, "Member 'UtlBpObj_StartFadeOUT::Frame' has a wrong offset!");

// Function xrd777.UtlBpObj.StartScript
// 0x0050 (0x0050 - 0x0000)
struct UtlBpObj_StartScript final
{
public:
	TSoftObjectPtr<class UBfAsset>                InAsset;                                           // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcNo;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0030(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtlBpObj_StartScript) == 0x000008, "Wrong alignment on UtlBpObj_StartScript");
static_assert(sizeof(UtlBpObj_StartScript) == 0x000050, "Wrong size on UtlBpObj_StartScript");
static_assert(offsetof(UtlBpObj_StartScript, InAsset) == 0x000000, "Member 'UtlBpObj_StartScript::InAsset' has a wrong offset!");
static_assert(offsetof(UtlBpObj_StartScript, ProcNo) == 0x000028, "Member 'UtlBpObj_StartScript::ProcNo' has a wrong offset!");
static_assert(offsetof(UtlBpObj_StartScript, LatentInfo) == 0x000030, "Member 'UtlBpObj_StartScript::LatentInfo' has a wrong offset!");
static_assert(offsetof(UtlBpObj_StartScript, Result) == 0x000048, "Member 'UtlBpObj_StartScript::Result' has a wrong offset!");

// Function xrd777.UtlBpObj.SyncFade
// 0x0020 (0x0020 - 0x0000)
struct UtlBpObj_SyncFade final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtlBpObj_SyncFade) == 0x000008, "Wrong alignment on UtlBpObj_SyncFade");
static_assert(sizeof(UtlBpObj_SyncFade) == 0x000020, "Wrong size on UtlBpObj_SyncFade");
static_assert(offsetof(UtlBpObj_SyncFade, Type) == 0x000000, "Member 'UtlBpObj_SyncFade::Type' has a wrong offset!");
static_assert(offsetof(UtlBpObj_SyncFade, LatentInfo) == 0x000008, "Member 'UtlBpObj_SyncFade::LatentInfo' has a wrong offset!");

// Function xrd777.BFLAtlEvtHandwriting.MakeHandwritingTypeAssetPath
// 0x000C (0x000C - 0x0000)
struct BFLAtlEvtHandwriting_MakeHandwritingTypeAssetPath final
{
public:
	EAtlEvtHandwritingType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLAtlEvtHandwriting_MakeHandwritingTypeAssetPath) == 0x000004, "Wrong alignment on BFLAtlEvtHandwriting_MakeHandwritingTypeAssetPath");
static_assert(sizeof(BFLAtlEvtHandwriting_MakeHandwritingTypeAssetPath) == 0x00000C, "Wrong size on BFLAtlEvtHandwriting_MakeHandwritingTypeAssetPath");
static_assert(offsetof(BFLAtlEvtHandwriting_MakeHandwritingTypeAssetPath, Type) == 0x000000, "Member 'BFLAtlEvtHandwriting_MakeHandwritingTypeAssetPath::Type' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_MakeHandwritingTypeAssetPath, ReturnValue) == 0x000004, "Member 'BFLAtlEvtHandwriting_MakeHandwritingTypeAssetPath::ReturnValue' has a wrong offset!");

// Function xrd777.BFLAtlEvtHandwriting.MakeHandwritingTypeCharaParamAssetPath
// 0x0010 (0x0010 - 0x0000)
struct BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath final
{
public:
	EAtlEvtHandwritingType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAppCharCategoryType                          CharacterTypeCategoryType;                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath) == 0x000004, "Wrong alignment on BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath");
static_assert(sizeof(BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath) == 0x000010, "Wrong size on BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath");
static_assert(offsetof(BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath, Type) == 0x000000, "Member 'BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath::Type' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath, CharacterTypeCategoryType) == 0x000001, "Member 'BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath::CharacterTypeCategoryType' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath, CharaIndexID) == 0x000004, "Member 'BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath::CharaIndexID' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath, ReturnValue) == 0x000008, "Member 'BFLAtlEvtHandwriting_MakeHandwritingTypeCharaParamAssetPath::ReturnValue' has a wrong offset!");

// Function xrd777.BFLAtlEvtHandwriting.MakeHandwritingTypeDefaultParamAssetPath
// 0x000C (0x000C - 0x0000)
struct BFLAtlEvtHandwriting_MakeHandwritingTypeDefaultParamAssetPath final
{
public:
	EAtlEvtHandwritingType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLAtlEvtHandwriting_MakeHandwritingTypeDefaultParamAssetPath) == 0x000004, "Wrong alignment on BFLAtlEvtHandwriting_MakeHandwritingTypeDefaultParamAssetPath");
static_assert(sizeof(BFLAtlEvtHandwriting_MakeHandwritingTypeDefaultParamAssetPath) == 0x00000C, "Wrong size on BFLAtlEvtHandwriting_MakeHandwritingTypeDefaultParamAssetPath");
static_assert(offsetof(BFLAtlEvtHandwriting_MakeHandwritingTypeDefaultParamAssetPath, Type) == 0x000000, "Member 'BFLAtlEvtHandwriting_MakeHandwritingTypeDefaultParamAssetPath::Type' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_MakeHandwritingTypeDefaultParamAssetPath, ReturnValue) == 0x000004, "Member 'BFLAtlEvtHandwriting_MakeHandwritingTypeDefaultParamAssetPath::ReturnValue' has a wrong offset!");

// Function xrd777.BFLAtlEvtHandwriting.MakeHandwritingTypeName
// 0x000C (0x000C - 0x0000)
struct BFLAtlEvtHandwriting_MakeHandwritingTypeName final
{
public:
	EAtlEvtHandwritingType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLAtlEvtHandwriting_MakeHandwritingTypeName) == 0x000004, "Wrong alignment on BFLAtlEvtHandwriting_MakeHandwritingTypeName");
static_assert(sizeof(BFLAtlEvtHandwriting_MakeHandwritingTypeName) == 0x00000C, "Wrong size on BFLAtlEvtHandwriting_MakeHandwritingTypeName");
static_assert(offsetof(BFLAtlEvtHandwriting_MakeHandwritingTypeName, Type) == 0x000000, "Member 'BFLAtlEvtHandwriting_MakeHandwritingTypeName::Type' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_MakeHandwritingTypeName, ReturnValue) == 0x000004, "Member 'BFLAtlEvtHandwriting_MakeHandwritingTypeName::ReturnValue' has a wrong offset!");

// Function xrd777.BFLAtlEvtHandwriting.SpawnHandwritingAtLocation
// 0x0048 (0x0048 - 0x0000)
struct BFLAtlEvtHandwriting_SpawnHandwritingAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtlEvtHandwritingType                        Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoopCount;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraOffset;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoActivate;                                     // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENCPoolMethod                                 PoolingMethod;                                     // 0x003A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreCullCheck;                                     // 0x003B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0040(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation) == 0x000008, "Wrong alignment on BFLAtlEvtHandwriting_SpawnHandwritingAtLocation");
static_assert(sizeof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation) == 0x000048, "Wrong size on BFLAtlEvtHandwriting_SpawnHandwritingAtLocation");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation, WorldContextObject) == 0x000000, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation, Type) == 0x000008, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAtLocation::Type' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation, LoopCount) == 0x00000C, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAtLocation::LoopCount' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation, CameraOffset) == 0x000010, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAtLocation::CameraOffset' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation, Location) == 0x000014, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAtLocation::Location' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation, Rotation) == 0x000020, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation, Scale) == 0x00002C, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAtLocation::Scale' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation, bAutoDestroy) == 0x000038, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAtLocation::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation, bAutoActivate) == 0x000039, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAtLocation::bAutoActivate' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation, PoolingMethod) == 0x00003A, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAtLocation::PoolingMethod' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation, bPreCullCheck) == 0x00003B, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAtLocation::bPreCullCheck' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAtLocation, ReturnValue) == 0x000040, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAtLocation::ReturnValue' has a wrong offset!");

// Function xrd777.BFLAtlEvtHandwriting.SpawnHandwritingAttached
// 0x0058 (0x0058 - 0x0000)
struct BFLAtlEvtHandwriting_SpawnHandwritingAttached final
{
public:
	EAtlEvtHandwritingType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoopCount;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraOffset;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             AttachToCharacter;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x002C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0038(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoActivate;                                     // 0x0046(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENCPoolMethod                                 PoolingMethod;                                     // 0x0047(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreCullCheck;                                     // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0050(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLAtlEvtHandwriting_SpawnHandwritingAttached) == 0x000008, "Wrong alignment on BFLAtlEvtHandwriting_SpawnHandwritingAttached");
static_assert(sizeof(BFLAtlEvtHandwriting_SpawnHandwritingAttached) == 0x000058, "Wrong size on BFLAtlEvtHandwriting_SpawnHandwritingAttached");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, Type) == 0x000000, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::Type' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, LoopCount) == 0x000004, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::LoopCount' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, CameraOffset) == 0x000008, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::CameraOffset' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, AttachToCharacter) == 0x000010, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::AttachToCharacter' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, AttachPointName) == 0x000018, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, Location) == 0x000020, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::Location' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, Rotation) == 0x00002C, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::Rotation' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, Scale) == 0x000038, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::Scale' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, LocationType) == 0x000044, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::LocationType' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, bAutoDestroy) == 0x000045, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, bAutoActivate) == 0x000046, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::bAutoActivate' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, PoolingMethod) == 0x000047, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::PoolingMethod' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, bPreCullCheck) == 0x000048, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::bPreCullCheck' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtHandwriting_SpawnHandwritingAttached, ReturnValue) == 0x000050, "Member 'BFLAtlEvtHandwriting_SpawnHandwritingAttached::ReturnValue' has a wrong offset!");

// Function xrd777.FldAtomSound.CheckEnablePlay
// 0x0001 (0x0001 - 0x0000)
struct FldAtomSound_CheckEnablePlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldAtomSound_CheckEnablePlay) == 0x000001, "Wrong alignment on FldAtomSound_CheckEnablePlay");
static_assert(sizeof(FldAtomSound_CheckEnablePlay) == 0x000001, "Wrong size on FldAtomSound_CheckEnablePlay");
static_assert(offsetof(FldAtomSound_CheckEnablePlay, ReturnValue) == 0x000000, "Member 'FldAtomSound_CheckEnablePlay::ReturnValue' has a wrong offset!");

// Function xrd777.FldAtomSound.FadeInSound
// 0x0004 (0x0004 - 0x0000)
struct FldAtomSound_FadeInSound final
{
public:
	float                                         FadeInDuration;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldAtomSound_FadeInSound) == 0x000004, "Wrong alignment on FldAtomSound_FadeInSound");
static_assert(sizeof(FldAtomSound_FadeInSound) == 0x000004, "Wrong size on FldAtomSound_FadeInSound");
static_assert(offsetof(FldAtomSound_FadeInSound, FadeInDuration) == 0x000000, "Member 'FldAtomSound_FadeInSound::FadeInDuration' has a wrong offset!");

// Function xrd777.FldAtomSound.FadeOutSound
// 0x0004 (0x0004 - 0x0000)
struct FldAtomSound_FadeOutSound final
{
public:
	float                                         FadeOutDuration;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldAtomSound_FadeOutSound) == 0x000004, "Wrong alignment on FldAtomSound_FadeOutSound");
static_assert(sizeof(FldAtomSound_FadeOutSound) == 0x000004, "Wrong size on FldAtomSound_FadeOutSound");
static_assert(offsetof(FldAtomSound_FadeOutSound, FadeOutDuration) == 0x000000, "Member 'FldAtomSound_FadeOutSound::FadeOutDuration' has a wrong offset!");

// Function xrd777.BFLAtlEvtTest.EvtPlayOnBindingActor
// 0x0060 (0x0060 - 0x0000)
struct BFLAtlEvtTest_EvtPlayOnBindingActor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EvtName;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SublevelOnBindingActorName;                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtlEvtPlayParameter                   Param;                                             // 0x0028(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLAtlEvtTest_EvtPlayOnBindingActor) == 0x000008, "Wrong alignment on BFLAtlEvtTest_EvtPlayOnBindingActor");
static_assert(sizeof(BFLAtlEvtTest_EvtPlayOnBindingActor) == 0x000060, "Wrong size on BFLAtlEvtTest_EvtPlayOnBindingActor");
static_assert(offsetof(BFLAtlEvtTest_EvtPlayOnBindingActor, WorldContextObject) == 0x000000, "Member 'BFLAtlEvtTest_EvtPlayOnBindingActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtTest_EvtPlayOnBindingActor, EvtName) == 0x000008, "Member 'BFLAtlEvtTest_EvtPlayOnBindingActor::EvtName' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtTest_EvtPlayOnBindingActor, SublevelOnBindingActorName) == 0x000018, "Member 'BFLAtlEvtTest_EvtPlayOnBindingActor::SublevelOnBindingActorName' has a wrong offset!");
static_assert(offsetof(BFLAtlEvtTest_EvtPlayOnBindingActor, Param) == 0x000028, "Member 'BFLAtlEvtTest_EvtPlayOnBindingActor::Param' has a wrong offset!");

// Function xrd777.UmgDialog.CalcScreenScale
// 0x0004 (0x0004 - 0x0000)
struct UmgDialog_CalcScreenScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgDialog_CalcScreenScale) == 0x000004, "Wrong alignment on UmgDialog_CalcScreenScale");
static_assert(sizeof(UmgDialog_CalcScreenScale) == 0x000004, "Wrong size on UmgDialog_CalcScreenScale");
static_assert(offsetof(UmgDialog_CalcScreenScale, ReturnValue) == 0x000000, "Member 'UmgDialog_CalcScreenScale::ReturnValue' has a wrong offset!");

// Function xrd777.UmgDialog.IsChangeScreenSize
// 0x0001 (0x0001 - 0x0000)
struct UmgDialog_IsChangeScreenSize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgDialog_IsChangeScreenSize) == 0x000001, "Wrong alignment on UmgDialog_IsChangeScreenSize");
static_assert(sizeof(UmgDialog_IsChangeScreenSize) == 0x000001, "Wrong size on UmgDialog_IsChangeScreenSize");
static_assert(offsetof(UmgDialog_IsChangeScreenSize, ReturnValue) == 0x000000, "Member 'UmgDialog_IsChangeScreenSize::ReturnValue' has a wrong offset!");

// Function xrd777.UmgDialog.IsInputBlocked
// 0x0001 (0x0001 - 0x0000)
struct UmgDialog_IsInputBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgDialog_IsInputBlocked) == 0x000001, "Wrong alignment on UmgDialog_IsInputBlocked");
static_assert(sizeof(UmgDialog_IsInputBlocked) == 0x000001, "Wrong size on UmgDialog_IsInputBlocked");
static_assert(offsetof(UmgDialog_IsInputBlocked, ReturnValue) == 0x000000, "Member 'UmgDialog_IsInputBlocked::ReturnValue' has a wrong offset!");

// Function xrd777.UmgDialog.IsStreamingTouch
// 0x0001 (0x0001 - 0x0000)
struct UmgDialog_IsStreamingTouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgDialog_IsStreamingTouch) == 0x000001, "Wrong alignment on UmgDialog_IsStreamingTouch");
static_assert(sizeof(UmgDialog_IsStreamingTouch) == 0x000001, "Wrong size on UmgDialog_IsStreamingTouch");
static_assert(offsetof(UmgDialog_IsStreamingTouch, ReturnValue) == 0x000000, "Member 'UmgDialog_IsStreamingTouch::ReturnValue' has a wrong offset!");

// Function xrd777.UmgDialog.SetText
// 0x0018 (0x0018 - 0x0000)
struct UmgDialog_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgDialog_SetText) == 0x000008, "Wrong alignment on UmgDialog_SetText");
static_assert(sizeof(UmgDialog_SetText) == 0x000018, "Wrong size on UmgDialog_SetText");
static_assert(offsetof(UmgDialog_SetText, InText) == 0x000000, "Member 'UmgDialog_SetText::InText' has a wrong offset!");

// Function xrd777.BFLBtlAnimation.CheckMontageSectionIsLoop
// 0x0018 (0x0018 - 0x0000)
struct BFLBtlAnimation_CheckMontageSectionIsLoop final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLBtlAnimation_CheckMontageSectionIsLoop) == 0x000008, "Wrong alignment on BFLBtlAnimation_CheckMontageSectionIsLoop");
static_assert(sizeof(BFLBtlAnimation_CheckMontageSectionIsLoop) == 0x000018, "Wrong size on BFLBtlAnimation_CheckMontageSectionIsLoop");
static_assert(offsetof(BFLBtlAnimation_CheckMontageSectionIsLoop, AnimMontage) == 0x000000, "Member 'BFLBtlAnimation_CheckMontageSectionIsLoop::AnimMontage' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_CheckMontageSectionIsLoop, SectionName) == 0x000008, "Member 'BFLBtlAnimation_CheckMontageSectionIsLoop::SectionName' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_CheckMontageSectionIsLoop, ReturnValue) == 0x000010, "Member 'BFLBtlAnimation_CheckMontageSectionIsLoop::ReturnValue' has a wrong offset!");

// Function xrd777.BFLBtlAnimation.CoordinateDefaultAnimPose
// 0x0010 (0x0010 - 0x0000)
struct BFLBtlAnimation_CoordinateDefaultAnimPose final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimSequence;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLBtlAnimation_CoordinateDefaultAnimPose) == 0x000008, "Wrong alignment on BFLBtlAnimation_CoordinateDefaultAnimPose");
static_assert(sizeof(BFLBtlAnimation_CoordinateDefaultAnimPose) == 0x000010, "Wrong size on BFLBtlAnimation_CoordinateDefaultAnimPose");
static_assert(offsetof(BFLBtlAnimation_CoordinateDefaultAnimPose, InSkeletalMeshComponent) == 0x000000, "Member 'BFLBtlAnimation_CoordinateDefaultAnimPose::InSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_CoordinateDefaultAnimPose, AnimSequence) == 0x000008, "Member 'BFLBtlAnimation_CoordinateDefaultAnimPose::AnimSequence' has a wrong offset!");

// Function xrd777.BFLBtlAnimation.ForcePoseUpdate
// 0x0008 (0x0008 - 0x0000)
struct BFLBtlAnimation_ForcePoseUpdate final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLBtlAnimation_ForcePoseUpdate) == 0x000008, "Wrong alignment on BFLBtlAnimation_ForcePoseUpdate");
static_assert(sizeof(BFLBtlAnimation_ForcePoseUpdate) == 0x000008, "Wrong size on BFLBtlAnimation_ForcePoseUpdate");
static_assert(offsetof(BFLBtlAnimation_ForcePoseUpdate, SkeletalMesh) == 0x000000, "Member 'BFLBtlAnimation_ForcePoseUpdate::SkeletalMesh' has a wrong offset!");

// Function xrd777.BFLBtlAnimation.GetCurrentSectionName
// 0x0010 (0x0010 - 0x0000)
struct BFLBtlAnimation_GetCurrentSectionName final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLBtlAnimation_GetCurrentSectionName) == 0x000008, "Wrong alignment on BFLBtlAnimation_GetCurrentSectionName");
static_assert(sizeof(BFLBtlAnimation_GetCurrentSectionName) == 0x000010, "Wrong size on BFLBtlAnimation_GetCurrentSectionName");
static_assert(offsetof(BFLBtlAnimation_GetCurrentSectionName, InSkeletalMeshComponent) == 0x000000, "Member 'BFLBtlAnimation_GetCurrentSectionName::InSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_GetCurrentSectionName, ReturnValue) == 0x000008, "Member 'BFLBtlAnimation_GetCurrentSectionName::ReturnValue' has a wrong offset!");

// Function xrd777.BFLBtlAnimation.GetMontageAlignedNextSectionName
// 0x0020 (0x0020 - 0x0000)
struct BFLBtlAnimation_GetMontageAlignedNextSectionName final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextSectionName;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLBtlAnimation_GetMontageAlignedNextSectionName) == 0x000008, "Wrong alignment on BFLBtlAnimation_GetMontageAlignedNextSectionName");
static_assert(sizeof(BFLBtlAnimation_GetMontageAlignedNextSectionName) == 0x000020, "Wrong size on BFLBtlAnimation_GetMontageAlignedNextSectionName");
static_assert(offsetof(BFLBtlAnimation_GetMontageAlignedNextSectionName, AnimMontage) == 0x000000, "Member 'BFLBtlAnimation_GetMontageAlignedNextSectionName::AnimMontage' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_GetMontageAlignedNextSectionName, SectionName) == 0x000008, "Member 'BFLBtlAnimation_GetMontageAlignedNextSectionName::SectionName' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_GetMontageAlignedNextSectionName, NextSectionName) == 0x000010, "Member 'BFLBtlAnimation_GetMontageAlignedNextSectionName::NextSectionName' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_GetMontageAlignedNextSectionName, ReturnValue) == 0x000018, "Member 'BFLBtlAnimation_GetMontageAlignedNextSectionName::ReturnValue' has a wrong offset!");

// Function xrd777.BFLBtlAnimation.GetMontageNextSectionName
// 0x0020 (0x0020 - 0x0000)
struct BFLBtlAnimation_GetMontageNextSectionName final
{
public:
	class UAnimMontage*                           AnimMontage;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   NextSectionName;                                   // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLBtlAnimation_GetMontageNextSectionName) == 0x000008, "Wrong alignment on BFLBtlAnimation_GetMontageNextSectionName");
static_assert(sizeof(BFLBtlAnimation_GetMontageNextSectionName) == 0x000020, "Wrong size on BFLBtlAnimation_GetMontageNextSectionName");
static_assert(offsetof(BFLBtlAnimation_GetMontageNextSectionName, AnimMontage) == 0x000000, "Member 'BFLBtlAnimation_GetMontageNextSectionName::AnimMontage' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_GetMontageNextSectionName, SectionName) == 0x000008, "Member 'BFLBtlAnimation_GetMontageNextSectionName::SectionName' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_GetMontageNextSectionName, NextSectionName) == 0x000010, "Member 'BFLBtlAnimation_GetMontageNextSectionName::NextSectionName' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_GetMontageNextSectionName, ReturnValue) == 0x000018, "Member 'BFLBtlAnimation_GetMontageNextSectionName::ReturnValue' has a wrong offset!");

// Function xrd777.BFLBtlAnimation.GetMontageSectionLength
// 0x0020 (0x0020 - 0x0000)
struct BFLBtlAnimation_GetMontageSectionLength final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLBtlAnimation_GetMontageSectionLength) == 0x000008, "Wrong alignment on BFLBtlAnimation_GetMontageSectionLength");
static_assert(sizeof(BFLBtlAnimation_GetMontageSectionLength) == 0x000020, "Wrong size on BFLBtlAnimation_GetMontageSectionLength");
static_assert(offsetof(BFLBtlAnimation_GetMontageSectionLength, InSkeletalMeshComponent) == 0x000000, "Member 'BFLBtlAnimation_GetMontageSectionLength::InSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_GetMontageSectionLength, AnimMontage) == 0x000008, "Member 'BFLBtlAnimation_GetMontageSectionLength::AnimMontage' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_GetMontageSectionLength, SectionName) == 0x000010, "Member 'BFLBtlAnimation_GetMontageSectionLength::SectionName' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_GetMontageSectionLength, ReturnValue) == 0x000018, "Member 'BFLBtlAnimation_GetMontageSectionLength::ReturnValue' has a wrong offset!");

// Function xrd777.BFLBtlAnimation.GetRemainingTimeFromCurrentSection
// 0x0018 (0x0018 - 0x0000)
struct BFLBtlAnimation_GetRemainingTimeFromCurrentSection final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AnimMontage;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLBtlAnimation_GetRemainingTimeFromCurrentSection) == 0x000008, "Wrong alignment on BFLBtlAnimation_GetRemainingTimeFromCurrentSection");
static_assert(sizeof(BFLBtlAnimation_GetRemainingTimeFromCurrentSection) == 0x000018, "Wrong size on BFLBtlAnimation_GetRemainingTimeFromCurrentSection");
static_assert(offsetof(BFLBtlAnimation_GetRemainingTimeFromCurrentSection, InSkeletalMeshComponent) == 0x000000, "Member 'BFLBtlAnimation_GetRemainingTimeFromCurrentSection::InSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_GetRemainingTimeFromCurrentSection, AnimMontage) == 0x000008, "Member 'BFLBtlAnimation_GetRemainingTimeFromCurrentSection::AnimMontage' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_GetRemainingTimeFromCurrentSection, ReturnValue) == 0x000010, "Member 'BFLBtlAnimation_GetRemainingTimeFromCurrentSection::ReturnValue' has a wrong offset!");

// Function xrd777.BFLBtlAnimation.SetMontageAnimationSpeed
// 0x0018 (0x0018 - 0x0000)
struct BFLBtlAnimation_SetMontageAnimationSpeed final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLBtlAnimation_SetMontageAnimationSpeed) == 0x000008, "Wrong alignment on BFLBtlAnimation_SetMontageAnimationSpeed");
static_assert(sizeof(BFLBtlAnimation_SetMontageAnimationSpeed) == 0x000018, "Wrong size on BFLBtlAnimation_SetMontageAnimationSpeed");
static_assert(offsetof(BFLBtlAnimation_SetMontageAnimationSpeed, InSkeletalMeshComponent) == 0x000000, "Member 'BFLBtlAnimation_SetMontageAnimationSpeed::InSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_SetMontageAnimationSpeed, MontageToPlay) == 0x000008, "Member 'BFLBtlAnimation_SetMontageAnimationSpeed::MontageToPlay' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_SetMontageAnimationSpeed, PlayRate) == 0x000010, "Member 'BFLBtlAnimation_SetMontageAnimationSpeed::PlayRate' has a wrong offset!");

// Function xrd777.BFLBtlAnimation.SetMontagePositionInSection
// 0x0020 (0x0020 - 0x0000)
struct BFLBtlAnimation_SetMontagePositionInSection final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PositionInSection;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLBtlAnimation_SetMontagePositionInSection) == 0x000008, "Wrong alignment on BFLBtlAnimation_SetMontagePositionInSection");
static_assert(sizeof(BFLBtlAnimation_SetMontagePositionInSection) == 0x000020, "Wrong size on BFLBtlAnimation_SetMontagePositionInSection");
static_assert(offsetof(BFLBtlAnimation_SetMontagePositionInSection, InSkeletalMeshComponent) == 0x000000, "Member 'BFLBtlAnimation_SetMontagePositionInSection::InSkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_SetMontagePositionInSection, MontageToPlay) == 0x000008, "Member 'BFLBtlAnimation_SetMontagePositionInSection::MontageToPlay' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_SetMontagePositionInSection, SectionName) == 0x000010, "Member 'BFLBtlAnimation_SetMontagePositionInSection::SectionName' has a wrong offset!");
static_assert(offsetof(BFLBtlAnimation_SetMontagePositionInSection, PositionInSection) == 0x000018, "Member 'BFLBtlAnimation_SetMontagePositionInSection::PositionInSection' has a wrong offset!");

// Function xrd777.BFLBtlAnimation.StopMontageAnimation
// 0x0008 (0x0008 - 0x0000)
struct BFLBtlAnimation_StopMontageAnimation final
{
public:
	class USkeletalMeshComponent*                 InSkeletalMeshComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLBtlAnimation_StopMontageAnimation) == 0x000008, "Wrong alignment on BFLBtlAnimation_StopMontageAnimation");
static_assert(sizeof(BFLBtlAnimation_StopMontageAnimation) == 0x000008, "Wrong size on BFLBtlAnimation_StopMontageAnimation");
static_assert(offsetof(BFLBtlAnimation_StopMontageAnimation, InSkeletalMeshComponent) == 0x000000, "Member 'BFLBtlAnimation_StopMontageAnimation::InSkeletalMeshComponent' has a wrong offset!");

// Function xrd777.BFLBtlManager.CheckBattleCoreLoaded
// 0x0001 (0x0001 - 0x0000)
struct BFLBtlManager_CheckBattleCoreLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLBtlManager_CheckBattleCoreLoaded) == 0x000001, "Wrong alignment on BFLBtlManager_CheckBattleCoreLoaded");
static_assert(sizeof(BFLBtlManager_CheckBattleCoreLoaded) == 0x000001, "Wrong size on BFLBtlManager_CheckBattleCoreLoaded");
static_assert(offsetof(BFLBtlManager_CheckBattleCoreLoaded, ReturnValue) == 0x000000, "Member 'BFLBtlManager_CheckBattleCoreLoaded::ReturnValue' has a wrong offset!");

// Function xrd777.BFLBtlManager.CheckBattleMainLoaded
// 0x0001 (0x0001 - 0x0000)
struct BFLBtlManager_CheckBattleMainLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLBtlManager_CheckBattleMainLoaded) == 0x000001, "Wrong alignment on BFLBtlManager_CheckBattleMainLoaded");
static_assert(sizeof(BFLBtlManager_CheckBattleMainLoaded) == 0x000001, "Wrong size on BFLBtlManager_CheckBattleMainLoaded");
static_assert(offsetof(BFLBtlManager_CheckBattleMainLoaded, ReturnValue) == 0x000000, "Member 'BFLBtlManager_CheckBattleMainLoaded::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.AddPlayEvtMultiMontageAnimNotify
// 0x0040 (0x0040 - 0x0000)
struct BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           NewMontage;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAtlSlotMultiAnimationParam>    AnimAssets;                                        // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtCharaAnimationType                        EvtCharaAnimationType;                             // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentMontageBlendOut;                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NextMontageBlendIn;                                // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify) == 0x000008, "Wrong alignment on BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify");
static_assert(sizeof(BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify) == 0x000040, "Wrong size on BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify");
static_assert(offsetof(BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify, Index_0) == 0x000000, "Member 'BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify::Index_0' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify, NewMontage) == 0x000008, "Member 'BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify::NewMontage' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify, AnimAssets) == 0x000010, "Member 'BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify::AnimAssets' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify, SlotNodeName) == 0x000020, "Member 'BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify::SlotNodeName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify, EvtCharaAnimationType) == 0x000028, "Member 'BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify::EvtCharaAnimationType' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify, CurrentMontageBlendOut) == 0x00002C, "Member 'BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify::CurrentMontageBlendOut' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify, NextMontageBlendIn) == 0x000030, "Member 'BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify::NextMontageBlendIn' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify, ReturnValue) == 0x000038, "Member 'BFLEventMovieScene_AddPlayEvtMultiMontageAnimNotify::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.AddViewSlaveLocation
// 0x0018 (0x0018 - 0x0000)
struct BFLEventMovieScene_AddViewSlaveLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoostFactor;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLocation;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_AddViewSlaveLocation) == 0x000004, "Wrong alignment on BFLEventMovieScene_AddViewSlaveLocation");
static_assert(sizeof(BFLEventMovieScene_AddViewSlaveLocation) == 0x000018, "Wrong size on BFLEventMovieScene_AddViewSlaveLocation");
static_assert(offsetof(BFLEventMovieScene_AddViewSlaveLocation, Location) == 0x000000, "Member 'BFLEventMovieScene_AddViewSlaveLocation::Location' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_AddViewSlaveLocation, BoostFactor) == 0x00000C, "Member 'BFLEventMovieScene_AddViewSlaveLocation::BoostFactor' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_AddViewSlaveLocation, bOverrideLocation) == 0x000010, "Member 'BFLEventMovieScene_AddViewSlaveLocation::bOverrideLocation' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_AddViewSlaveLocation, Duration) == 0x000014, "Member 'BFLEventMovieScene_AddViewSlaveLocation::Duration' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.AllActorBinding
// 0x0020 (0x0020 - 0x0000)
struct BFLEventMovieScene_AllActorBinding final
{
public:
	class AActor*                                 BindingActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetName;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLEventMovieScene_AllActorBinding) == 0x000008, "Wrong alignment on BFLEventMovieScene_AllActorBinding");
static_assert(sizeof(BFLEventMovieScene_AllActorBinding) == 0x000020, "Wrong size on BFLEventMovieScene_AllActorBinding");
static_assert(offsetof(BFLEventMovieScene_AllActorBinding, BindingActor) == 0x000000, "Member 'BFLEventMovieScene_AllActorBinding::BindingActor' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_AllActorBinding, TargetName) == 0x000008, "Member 'BFLEventMovieScene_AllActorBinding::TargetName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_AllActorBinding, ReturnValue) == 0x000018, "Member 'BFLEventMovieScene_AllActorBinding::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.CreateSlotAnimationAsDynamicMontage
// 0x0038 (0x0038 - 0x0000)
struct BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage final
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Asset;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeToStartMontageAt;                            // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage) == 0x000008, "Wrong alignment on BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage");
static_assert(sizeof(BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage) == 0x000038, "Wrong size on BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage");
static_assert(offsetof(BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage, Mesh) == 0x000000, "Member 'BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage::Mesh' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage, Asset) == 0x000008, "Member 'BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage::Asset' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage, SlotNodeName) == 0x000010, "Member 'BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage::SlotNodeName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage, BlendInTime) == 0x000018, "Member 'BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage::BlendInTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage, BlendOutTime) == 0x00001C, "Member 'BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage::BlendOutTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage, InPlayRate) == 0x000020, "Member 'BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage::InPlayRate' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage, LoopCount) == 0x000024, "Member 'BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage::LoopCount' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage, BlendOutTriggerTime) == 0x000028, "Member 'BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage, InTimeToStartMontageAt) == 0x00002C, "Member 'BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage::InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage, ReturnValue) == 0x000030, "Member 'BFLEventMovieScene_CreateSlotAnimationAsDynamicMontage::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.CreateSlotOffsetAnimationAsDynamicMontage
// 0x0040 (0x0040 - 0x0000)
struct BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage final
{
public:
	class USkeletalMesh*                          Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Asset;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffsetTime;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffsetTime;                                     // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeToStartMontageAt;                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage) == 0x000008, "Wrong alignment on BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage");
static_assert(sizeof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage) == 0x000040, "Wrong size on BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage");
static_assert(offsetof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage, Mesh) == 0x000000, "Member 'BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage::Mesh' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage, Asset) == 0x000008, "Member 'BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage::Asset' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage, SlotNodeName) == 0x000010, "Member 'BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage::SlotNodeName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage, StartOffsetTime) == 0x000018, "Member 'BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage, EndOffsetTime) == 0x00001C, "Member 'BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage::EndOffsetTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage, BlendInTime) == 0x000020, "Member 'BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage::BlendInTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage, BlendOutTime) == 0x000024, "Member 'BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage::BlendOutTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage, InPlayRate) == 0x000028, "Member 'BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage::InPlayRate' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage, LoopCount) == 0x00002C, "Member 'BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage::LoopCount' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage, BlendOutTriggerTime) == 0x000030, "Member 'BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage, InTimeToStartMontageAt) == 0x000034, "Member 'BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage::InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage, ReturnValue) == 0x000038, "Member 'BFLEventMovieScene_CreateSlotOffsetAnimationAsDynamicMontage::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.FindAtlEvtEventManager
// 0x0010 (0x0010 - 0x0000)
struct BFLEventMovieScene_FindAtlEvtEventManager final
{
public:
	class ULevelStreaming*                        TargetLevelStreaming;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAtlEvtEventManager*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_FindAtlEvtEventManager) == 0x000008, "Wrong alignment on BFLEventMovieScene_FindAtlEvtEventManager");
static_assert(sizeof(BFLEventMovieScene_FindAtlEvtEventManager) == 0x000010, "Wrong size on BFLEventMovieScene_FindAtlEvtEventManager");
static_assert(offsetof(BFLEventMovieScene_FindAtlEvtEventManager, TargetLevelStreaming) == 0x000000, "Member 'BFLEventMovieScene_FindAtlEvtEventManager::TargetLevelStreaming' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_FindAtlEvtEventManager, ReturnValue) == 0x000008, "Member 'BFLEventMovieScene_FindAtlEvtEventManager::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.FindLevelSequenceActor
// 0x0010 (0x0010 - 0x0000)
struct BFLEventMovieScene_FindLevelSequenceActor final
{
public:
	class ULevelStreaming*                        TargetLevelStreaming;                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_FindLevelSequenceActor) == 0x000008, "Wrong alignment on BFLEventMovieScene_FindLevelSequenceActor");
static_assert(sizeof(BFLEventMovieScene_FindLevelSequenceActor) == 0x000010, "Wrong size on BFLEventMovieScene_FindLevelSequenceActor");
static_assert(offsetof(BFLEventMovieScene_FindLevelSequenceActor, TargetLevelStreaming) == 0x000000, "Member 'BFLEventMovieScene_FindLevelSequenceActor::TargetLevelStreaming' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_FindLevelSequenceActor, ReturnValue) == 0x000008, "Member 'BFLEventMovieScene_FindLevelSequenceActor::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.GetAnimationSlotName
// 0x000C (0x000C - 0x0000)
struct BFLEventMovieScene_GetAnimationSlotName final
{
public:
	EEvtCharaAnimationSlotType                    SlotType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_GetAnimationSlotName) == 0x000004, "Wrong alignment on BFLEventMovieScene_GetAnimationSlotName");
static_assert(sizeof(BFLEventMovieScene_GetAnimationSlotName) == 0x00000C, "Wrong size on BFLEventMovieScene_GetAnimationSlotName");
static_assert(offsetof(BFLEventMovieScene_GetAnimationSlotName, SlotType) == 0x000000, "Member 'BFLEventMovieScene_GetAnimationSlotName::SlotType' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_GetAnimationSlotName, ReturnValue) == 0x000004, "Member 'BFLEventMovieScene_GetAnimationSlotName::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.GetBindingID
// 0x0030 (0x0030 - 0x0000)
struct BFLEventMovieScene_GetBindingID final
{
public:
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectDisplayName;                                 // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_GetBindingID) == 0x000008, "Wrong alignment on BFLEventMovieScene_GetBindingID");
static_assert(sizeof(BFLEventMovieScene_GetBindingID) == 0x000030, "Wrong size on BFLEventMovieScene_GetBindingID");
static_assert(offsetof(BFLEventMovieScene_GetBindingID, SequenceActor) == 0x000000, "Member 'BFLEventMovieScene_GetBindingID::SequenceActor' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_GetBindingID, ObjectDisplayName) == 0x000008, "Member 'BFLEventMovieScene_GetBindingID::ObjectDisplayName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_GetBindingID, ReturnValue) == 0x000018, "Member 'BFLEventMovieScene_GetBindingID::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.IsCondition
// 0x0010 (0x0010 - 0x0000)
struct BFLEventMovieScene_IsCondition final
{
public:
	EEvtConditionalBranchCompType                 CompareType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LHS;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RHS;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLEventMovieScene_IsCondition) == 0x000004, "Wrong alignment on BFLEventMovieScene_IsCondition");
static_assert(sizeof(BFLEventMovieScene_IsCondition) == 0x000010, "Wrong size on BFLEventMovieScene_IsCondition");
static_assert(offsetof(BFLEventMovieScene_IsCondition, CompareType) == 0x000000, "Member 'BFLEventMovieScene_IsCondition::CompareType' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_IsCondition, LHS) == 0x000004, "Member 'BFLEventMovieScene_IsCondition::LHS' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_IsCondition, RHS) == 0x000008, "Member 'BFLEventMovieScene_IsCondition::RHS' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_IsCondition, ReturnValue) == 0x00000C, "Member 'BFLEventMovieScene_IsCondition::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.LoadSublevel
// 0x0010 (0x0010 - 0x0000)
struct BFLEventMovieScene_LoadSublevel final
{
public:
	class FString                                 SublevelName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_LoadSublevel) == 0x000008, "Wrong alignment on BFLEventMovieScene_LoadSublevel");
static_assert(sizeof(BFLEventMovieScene_LoadSublevel) == 0x000010, "Wrong size on BFLEventMovieScene_LoadSublevel");
static_assert(offsetof(BFLEventMovieScene_LoadSublevel, SublevelName) == 0x000000, "Member 'BFLEventMovieScene_LoadSublevel::SublevelName' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.MakeSeasonSublevel
// 0x0014 (0x0014 - 0x0000)
struct BFLEventMovieScene_MakeSeasonSublevel final
{
public:
	int32                                         FieldMajorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldSeason                                    Season;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStreamingPath;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_MakeSeasonSublevel) == 0x000004, "Wrong alignment on BFLEventMovieScene_MakeSeasonSublevel");
static_assert(sizeof(BFLEventMovieScene_MakeSeasonSublevel) == 0x000014, "Wrong size on BFLEventMovieScene_MakeSeasonSublevel");
static_assert(offsetof(BFLEventMovieScene_MakeSeasonSublevel, FieldMajorID) == 0x000000, "Member 'BFLEventMovieScene_MakeSeasonSublevel::FieldMajorID' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_MakeSeasonSublevel, FieldMinorID) == 0x000004, "Member 'BFLEventMovieScene_MakeSeasonSublevel::FieldMinorID' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_MakeSeasonSublevel, Season) == 0x000008, "Member 'BFLEventMovieScene_MakeSeasonSublevel::Season' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_MakeSeasonSublevel, bStreamingPath) == 0x000009, "Member 'BFLEventMovieScene_MakeSeasonSublevel::bStreamingPath' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_MakeSeasonSublevel, ReturnValue) == 0x00000C, "Member 'BFLEventMovieScene_MakeSeasonSublevel::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.PlaySlotAnimationAsDynamicMontageLoop
// 0x0040 (0x0040 - 0x0000)
struct BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Asset;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeToStartMontageAt;                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop) == 0x000008, "Wrong alignment on BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop");
static_assert(sizeof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop) == 0x000040, "Wrong size on BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop, AnimInstance) == 0x000000, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop::AnimInstance' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop, Mesh) == 0x000008, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop::Mesh' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop, Asset) == 0x000010, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop::Asset' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop, SlotNodeName) == 0x000018, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop::SlotNodeName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop, BlendInTime) == 0x000020, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop::BlendInTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop, BlendOutTime) == 0x000024, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop::BlendOutTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop, InPlayRate) == 0x000028, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop::InPlayRate' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop, LoopCount) == 0x00002C, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop::LoopCount' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop, BlendOutTriggerTime) == 0x000030, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop, InTimeToStartMontageAt) == 0x000034, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop::InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop, ReturnValue) == 0x000038, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoop::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.PlaySlotAnimationAsDynamicMontageLoopOnLastFrame
// 0x0040 (0x0040 - 0x0000)
struct BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Asset;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeToStartMontageAt;                            // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame) == 0x000008, "Wrong alignment on BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame");
static_assert(sizeof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame) == 0x000040, "Wrong size on BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame, AnimInstance) == 0x000000, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame::AnimInstance' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame, Mesh) == 0x000008, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame::Mesh' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame, Asset) == 0x000010, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame::Asset' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame, SlotNodeName) == 0x000018, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame::SlotNodeName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame, BlendInTime) == 0x000020, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame::BlendInTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame, BlendOutTime) == 0x000024, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame::BlendOutTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame, InPlayRate) == 0x000028, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame::InPlayRate' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame, LoopCount) == 0x00002C, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame::LoopCount' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame, BlendOutTriggerTime) == 0x000030, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame, InTimeToStartMontageAt) == 0x000034, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame::InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame, ReturnValue) == 0x000038, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopOnLastFrame::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame
// 0x0048 (0x0048 - 0x0000)
struct BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Asset;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffsetTime;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffsetTime;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeToStartMontageAt;                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame) == 0x000008, "Wrong alignment on BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame");
static_assert(sizeof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame) == 0x000048, "Wrong size on BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, AnimInstance) == 0x000000, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::AnimInstance' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, Mesh) == 0x000008, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::Mesh' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, Asset) == 0x000010, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::Asset' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, SlotNodeName) == 0x000018, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::SlotNodeName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, StartOffsetTime) == 0x000020, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, EndOffsetTime) == 0x000024, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::EndOffsetTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, BlendInTime) == 0x000028, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::BlendInTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, BlendOutTime) == 0x00002C, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::BlendOutTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, InPlayRate) == 0x000030, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::InPlayRate' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, LoopCount) == 0x000034, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::LoopCount' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, BlendOutTriggerTime) == 0x000038, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, InTimeToStartMontageAt) == 0x00003C, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame, ReturnValue) == 0x000040, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageLoopSecOnLastFrame::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.PlaySlotAnimationAsDynamicMontageTwo
// 0x0048 (0x0048 - 0x0000)
struct BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Asset;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Asset2;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeToStartMontageAt;                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo) == 0x000008, "Wrong alignment on BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo");
static_assert(sizeof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo) == 0x000048, "Wrong size on BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo, AnimInstance) == 0x000000, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo::AnimInstance' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo, Mesh) == 0x000008, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo::Mesh' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo, Asset) == 0x000010, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo::Asset' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo, Asset2) == 0x000018, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo::Asset2' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo, SlotNodeName) == 0x000020, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo::SlotNodeName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo, BlendInTime) == 0x000028, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo::BlendInTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo, BlendOutTime) == 0x00002C, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo::BlendOutTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo, InPlayRate) == 0x000030, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo::InPlayRate' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo, LoopCount) == 0x000034, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo::LoopCount' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo, BlendOutTriggerTime) == 0x000038, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo, InTimeToStartMontageAt) == 0x00003C, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo::InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo, ReturnValue) == 0x000040, "Member 'BFLEventMovieScene_PlaySlotAnimationAsDynamicMontageTwo::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.PlaySlotMultiAnimationAsDynamicMontage
// 0x0058 (0x0058 - 0x0000)
struct BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      BaseAnimAsset;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAtlSlotMultiAnimationParam>    AnimAssets;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtCharaAnimationType                        EvtCharaAnimationType;                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendInTime;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeToStartMontageAt;                            // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage) == 0x000008, "Wrong alignment on BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage");
static_assert(sizeof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage) == 0x000058, "Wrong size on BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, AnimInstance) == 0x000000, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::AnimInstance' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, Mesh) == 0x000008, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::Mesh' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, BaseAnimAsset) == 0x000010, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::BaseAnimAsset' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, AnimAssets) == 0x000018, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::AnimAssets' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, SlotNodeName) == 0x000028, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::SlotNodeName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, EvtCharaAnimationType) == 0x000030, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::EvtCharaAnimationType' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, BlendInTime) == 0x000034, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::BlendInTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, BlendOutTime) == 0x000038, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::BlendOutTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, InPlayRate) == 0x00003C, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::InPlayRate' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, LoopCount) == 0x000040, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::LoopCount' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, BlendOutTriggerTime) == 0x000044, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, InTimeToStartMontageAt) == 0x000048, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage, ReturnValue) == 0x000050, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationAsDynamicMontage::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.PlaySlotMultiAnimationOffsetAsDynamicMontage
// 0x0060 (0x0060 - 0x0000)
struct BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      BaseAnimAsset;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAtlSlotMultiAnimationParam>    AnimAssets;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEvtCharaAnimationType                        EvtCharaAnimationType;                             // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartOffsetTime;                                   // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffsetTime;                                     // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeToStartMontageAt;                            // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage) == 0x000008, "Wrong alignment on BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage");
static_assert(sizeof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage) == 0x000060, "Wrong size on BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, AnimInstance) == 0x000000, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::AnimInstance' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, Mesh) == 0x000008, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::Mesh' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, BaseAnimAsset) == 0x000010, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::BaseAnimAsset' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, AnimAssets) == 0x000018, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::AnimAssets' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, SlotNodeName) == 0x000028, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::SlotNodeName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, EvtCharaAnimationType) == 0x000030, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::EvtCharaAnimationType' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, StartOffsetTime) == 0x000034, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, EndOffsetTime) == 0x000038, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::EndOffsetTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, BlendInTime) == 0x00003C, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::BlendInTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, BlendOutTime) == 0x000040, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::BlendOutTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, InPlayRate) == 0x000044, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::InPlayRate' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, LoopCount) == 0x000048, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::LoopCount' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, BlendOutTriggerTime) == 0x00004C, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, InTimeToStartMontageAt) == 0x000050, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage, ReturnValue) == 0x000058, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontage::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.PlaySlotMultiAnimationOffsetAsDynamicMontageTwo
// 0x0050 (0x0050 - 0x0000)
struct BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      BaseAnimAsset;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      LoopAsset;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffsetTime;                                   // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffsetTime;                                     // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeToStartMontageAt;                            // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo) == 0x000008, "Wrong alignment on BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo");
static_assert(sizeof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo) == 0x000050, "Wrong size on BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, AnimInstance) == 0x000000, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::AnimInstance' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, Mesh) == 0x000008, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::Mesh' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, BaseAnimAsset) == 0x000010, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::BaseAnimAsset' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, LoopAsset) == 0x000018, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::LoopAsset' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, SlotNodeName) == 0x000020, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::SlotNodeName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, StartOffsetTime) == 0x000028, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, EndOffsetTime) == 0x00002C, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::EndOffsetTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, BlendInTime) == 0x000030, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::BlendInTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, BlendOutTime) == 0x000034, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::BlendOutTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, InPlayRate) == 0x000038, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::InPlayRate' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, LoopCount) == 0x00003C, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::LoopCount' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, BlendOutTriggerTime) == 0x000040, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, InTimeToStartMontageAt) == 0x000044, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo, ReturnValue) == 0x000048, "Member 'BFLEventMovieScene_PlaySlotMultiAnimationOffsetAsDynamicMontageTwo::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.PlaySlotOffsetAnimationAsDynamicMontageLoop
// 0x0048 (0x0048 - 0x0000)
struct BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMesh*                          Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Asset;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffsetTime;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOffsetTime;                                     // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendInTime;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InPlayRate;                                        // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopCount;                                         // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTriggerTime;                               // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InTimeToStartMontageAt;                            // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop) == 0x000008, "Wrong alignment on BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop");
static_assert(sizeof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop) == 0x000048, "Wrong size on BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, AnimInstance) == 0x000000, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::AnimInstance' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, Mesh) == 0x000008, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::Mesh' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, Asset) == 0x000010, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::Asset' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, SlotNodeName) == 0x000018, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::SlotNodeName' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, StartOffsetTime) == 0x000020, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::StartOffsetTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, EndOffsetTime) == 0x000024, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::EndOffsetTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, BlendInTime) == 0x000028, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::BlendInTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, BlendOutTime) == 0x00002C, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::BlendOutTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, InPlayRate) == 0x000030, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::InPlayRate' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, LoopCount) == 0x000034, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::LoopCount' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, BlendOutTriggerTime) == 0x000038, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::BlendOutTriggerTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, InTimeToStartMontageAt) == 0x00003C, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::InTimeToStartMontageAt' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop, ReturnValue) == 0x000040, "Member 'BFLEventMovieScene_PlaySlotOffsetAnimationAsDynamicMontageLoop::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.ResetNearClipPlane
// 0x0008 (0x0008 - 0x0000)
struct BFLEventMovieScene_ResetNearClipPlane final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_ResetNearClipPlane) == 0x000008, "Wrong alignment on BFLEventMovieScene_ResetNearClipPlane");
static_assert(sizeof(BFLEventMovieScene_ResetNearClipPlane) == 0x000008, "Wrong size on BFLEventMovieScene_ResetNearClipPlane");
static_assert(offsetof(BFLEventMovieScene_ResetNearClipPlane, WorldContextObject) == 0x000000, "Member 'BFLEventMovieScene_ResetNearClipPlane::WorldContextObject' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.SetEnableStreamingTexture
// 0x0010 (0x0010 - 0x0000)
struct BFLEventMovieScene_SetEnableStreamingTexture final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLEventMovieScene_SetEnableStreamingTexture) == 0x000008, "Wrong alignment on BFLEventMovieScene_SetEnableStreamingTexture");
static_assert(sizeof(BFLEventMovieScene_SetEnableStreamingTexture) == 0x000010, "Wrong size on BFLEventMovieScene_SetEnableStreamingTexture");
static_assert(offsetof(BFLEventMovieScene_SetEnableStreamingTexture, WorldContextObject) == 0x000000, "Member 'BFLEventMovieScene_SetEnableStreamingTexture::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_SetEnableStreamingTexture, bEnable) == 0x000008, "Member 'BFLEventMovieScene_SetEnableStreamingTexture::bEnable' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.SetNearClipPlane
// 0x0010 (0x0010 - 0x0000)
struct BFLEventMovieScene_SetNearClipPlane final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearClipCm;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLEventMovieScene_SetNearClipPlane) == 0x000008, "Wrong alignment on BFLEventMovieScene_SetNearClipPlane");
static_assert(sizeof(BFLEventMovieScene_SetNearClipPlane) == 0x000010, "Wrong size on BFLEventMovieScene_SetNearClipPlane");
static_assert(offsetof(BFLEventMovieScene_SetNearClipPlane, WorldContextObject) == 0x000000, "Member 'BFLEventMovieScene_SetNearClipPlane::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_SetNearClipPlane, NearClipCm) == 0x000008, "Member 'BFLEventMovieScene_SetNearClipPlane::NearClipCm' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.SkeletalMeshComponentFromObject
// 0x0010 (0x0010 - 0x0000)
struct BFLEventMovieScene_SkeletalMeshComponentFromObject final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BFLEventMovieScene_SkeletalMeshComponentFromObject) == 0x000008, "Wrong alignment on BFLEventMovieScene_SkeletalMeshComponentFromObject");
static_assert(sizeof(BFLEventMovieScene_SkeletalMeshComponentFromObject) == 0x000010, "Wrong size on BFLEventMovieScene_SkeletalMeshComponentFromObject");
static_assert(offsetof(BFLEventMovieScene_SkeletalMeshComponentFromObject, InObject) == 0x000000, "Member 'BFLEventMovieScene_SkeletalMeshComponentFromObject::InObject' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_SkeletalMeshComponentFromObject, ReturnValue) == 0x000008, "Member 'BFLEventMovieScene_SkeletalMeshComponentFromObject::ReturnValue' has a wrong offset!");

// Function xrd777.BFLEventMovieScene.StopSlotAnimation
// 0x0018 (0x0018 - 0x0000)
struct BFLEventMovieScene_StopSlotAnimation final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTime;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SlotNodeName;                                      // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BFLEventMovieScene_StopSlotAnimation) == 0x000008, "Wrong alignment on BFLEventMovieScene_StopSlotAnimation");
static_assert(sizeof(BFLEventMovieScene_StopSlotAnimation) == 0x000018, "Wrong size on BFLEventMovieScene_StopSlotAnimation");
static_assert(offsetof(BFLEventMovieScene_StopSlotAnimation, AnimInstance) == 0x000000, "Member 'BFLEventMovieScene_StopSlotAnimation::AnimInstance' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_StopSlotAnimation, BlendOutTime) == 0x000008, "Member 'BFLEventMovieScene_StopSlotAnimation::BlendOutTime' has a wrong offset!");
static_assert(offsetof(BFLEventMovieScene_StopSlotAnimation, SlotNodeName) == 0x00000C, "Member 'BFLEventMovieScene_StopSlotAnimation::SlotNodeName' has a wrong offset!");

// Function xrd777.BtlActionManagerComponent.SetCommand
// 0x0010 (0x0010 - 0x0000)
struct BtlActionManagerComponent_SetCommand final
{
public:
	class ABtlActor*                              Commander;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlCommandType                               Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActionManagerComponent_SetCommand) == 0x000008, "Wrong alignment on BtlActionManagerComponent_SetCommand");
static_assert(sizeof(BtlActionManagerComponent_SetCommand) == 0x000010, "Wrong size on BtlActionManagerComponent_SetCommand");
static_assert(offsetof(BtlActionManagerComponent_SetCommand, Commander) == 0x000000, "Member 'BtlActionManagerComponent_SetCommand::Commander' has a wrong offset!");
static_assert(offsetof(BtlActionManagerComponent_SetCommand, Type) == 0x000008, "Member 'BtlActionManagerComponent_SetCommand::Type' has a wrong offset!");
static_assert(offsetof(BtlActionManagerComponent_SetCommand, ID) == 0x00000C, "Member 'BtlActionManagerComponent_SetCommand::ID' has a wrong offset!");

// Function xrd777.BtlActionManagerComponent.SetCommander
// 0x0008 (0x0008 - 0x0000)
struct BtlActionManagerComponent_SetCommander final
{
public:
	class ABtlActor*                              Commander;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActionManagerComponent_SetCommander) == 0x000008, "Wrong alignment on BtlActionManagerComponent_SetCommander");
static_assert(sizeof(BtlActionManagerComponent_SetCommander) == 0x000008, "Wrong size on BtlActionManagerComponent_SetCommander");
static_assert(offsetof(BtlActionManagerComponent_SetCommander, Commander) == 0x000000, "Member 'BtlActionManagerComponent_SetCommander::Commander' has a wrong offset!");

// Function xrd777.BtlActionManagerComponent.SetCommandTargets
// 0x0010 (0x0010 - 0x0000)
struct BtlActionManagerComponent_SetCommandTargets final
{
public:
	TArray<class ABtlActor*>                      Targets;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActionManagerComponent_SetCommandTargets) == 0x000008, "Wrong alignment on BtlActionManagerComponent_SetCommandTargets");
static_assert(sizeof(BtlActionManagerComponent_SetCommandTargets) == 0x000010, "Wrong size on BtlActionManagerComponent_SetCommandTargets");
static_assert(offsetof(BtlActionManagerComponent_SetCommandTargets, Targets) == 0x000000, "Member 'BtlActionManagerComponent_SetCommandTargets::Targets' has a wrong offset!");

// Function xrd777.BtlActionManagerComponent.SetCommandWithTargets
// 0x0020 (0x0020 - 0x0000)
struct BtlActionManagerComponent_SetCommandWithTargets final
{
public:
	class ABtlActor*                              Commander;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlCommandType                               Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABtlActor*>                      Targets;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActionManagerComponent_SetCommandWithTargets) == 0x000008, "Wrong alignment on BtlActionManagerComponent_SetCommandWithTargets");
static_assert(sizeof(BtlActionManagerComponent_SetCommandWithTargets) == 0x000020, "Wrong size on BtlActionManagerComponent_SetCommandWithTargets");
static_assert(offsetof(BtlActionManagerComponent_SetCommandWithTargets, Commander) == 0x000000, "Member 'BtlActionManagerComponent_SetCommandWithTargets::Commander' has a wrong offset!");
static_assert(offsetof(BtlActionManagerComponent_SetCommandWithTargets, Type) == 0x000008, "Member 'BtlActionManagerComponent_SetCommandWithTargets::Type' has a wrong offset!");
static_assert(offsetof(BtlActionManagerComponent_SetCommandWithTargets, ID) == 0x00000C, "Member 'BtlActionManagerComponent_SetCommandWithTargets::ID' has a wrong offset!");
static_assert(offsetof(BtlActionManagerComponent_SetCommandWithTargets, Targets) == 0x000010, "Member 'BtlActionManagerComponent_SetCommandWithTargets::Targets' has a wrong offset!");

// Function xrd777.BtlActor.ActionPrepareAct
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_ActionPrepareAct final
{
public:
	class UBtlCoreComponent*                      BtlCore_0;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_ActionPrepareAct) == 0x000008, "Wrong alignment on BtlActor_ActionPrepareAct");
static_assert(sizeof(BtlActor_ActionPrepareAct) == 0x000008, "Wrong size on BtlActor_ActionPrepareAct");
static_assert(offsetof(BtlActor_ActionPrepareAct, BtlCore_0) == 0x000000, "Member 'BtlActor_ActionPrepareAct::BtlCore_0' has a wrong offset!");

// Function xrd777.BtlActor.ActionPrepareSkill
// 0x0010 (0x0010 - 0x0000)
struct BtlActor_ActionPrepareSkill final
{
public:
	class UBtlCoreComponent*                      BtlCore_0;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ABtlSkill*                        Skill;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_ActionPrepareSkill) == 0x000008, "Wrong alignment on BtlActor_ActionPrepareSkill");
static_assert(sizeof(BtlActor_ActionPrepareSkill) == 0x000010, "Wrong size on BtlActor_ActionPrepareSkill");
static_assert(offsetof(BtlActor_ActionPrepareSkill, BtlCore_0) == 0x000000, "Member 'BtlActor_ActionPrepareSkill::BtlCore_0' has a wrong offset!");
static_assert(offsetof(BtlActor_ActionPrepareSkill, Skill) == 0x000008, "Member 'BtlActor_ActionPrepareSkill::Skill' has a wrong offset!");

// Function xrd777.BtlActor.ActionReady
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_ActionReady final
{
public:
	class UBtlCoreComponent*                      BtlCore_0;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_ActionReady) == 0x000008, "Wrong alignment on BtlActor_ActionReady");
static_assert(sizeof(BtlActor_ActionReady) == 0x000008, "Wrong size on BtlActor_ActionReady");
static_assert(offsetof(BtlActor_ActionReady, BtlCore_0) == 0x000000, "Member 'BtlActor_ActionReady::BtlCore_0' has a wrong offset!");

// Function xrd777.BtlActor.AddStatusEffect
// 0x0018 (0x0018 - 0x0000)
struct BtlActor_AddStatusEffect final
{
public:
	class UNiagaraComponent*                      Ref;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlBadStatusIcon                             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ParentEmpActor;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_AddStatusEffect) == 0x000008, "Wrong alignment on BtlActor_AddStatusEffect");
static_assert(sizeof(BtlActor_AddStatusEffect) == 0x000018, "Wrong size on BtlActor_AddStatusEffect");
static_assert(offsetof(BtlActor_AddStatusEffect, Ref) == 0x000000, "Member 'BtlActor_AddStatusEffect::Ref' has a wrong offset!");
static_assert(offsetof(BtlActor_AddStatusEffect, Type) == 0x000008, "Member 'BtlActor_AddStatusEffect::Type' has a wrong offset!");
static_assert(offsetof(BtlActor_AddStatusEffect, ParentEmpActor) == 0x000010, "Member 'BtlActor_AddStatusEffect::ParentEmpActor' has a wrong offset!");

// Function xrd777.BtlActor.AddStatusEffectRequestList
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_AddStatusEffectRequestList final
{
public:
	EBtlBadStatusIcon                             RequestType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_AddStatusEffectRequestList) == 0x000001, "Wrong alignment on BtlActor_AddStatusEffectRequestList");
static_assert(sizeof(BtlActor_AddStatusEffectRequestList) == 0x000001, "Wrong size on BtlActor_AddStatusEffectRequestList");
static_assert(offsetof(BtlActor_AddStatusEffectRequestList, RequestType) == 0x000000, "Member 'BtlActor_AddStatusEffectRequestList::RequestType' has a wrong offset!");

// Function xrd777.BtlActor.AddTheurgiaGauge
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_AddTheurgiaGauge final
{
public:
	EBtlTheurgiaBoostType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_AddTheurgiaGauge) == 0x000001, "Wrong alignment on BtlActor_AddTheurgiaGauge");
static_assert(sizeof(BtlActor_AddTheurgiaGauge) == 0x000001, "Wrong size on BtlActor_AddTheurgiaGauge");
static_assert(offsetof(BtlActor_AddTheurgiaGauge, Type) == 0x000000, "Member 'BtlActor_AddTheurgiaGauge::Type' has a wrong offset!");

// Function xrd777.BtlActor.AffectRecoveryBadStatus
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_AffectRecoveryBadStatus final
{
public:
	class UBtlCoreComponent*                      BtlCore_0;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_AffectRecoveryBadStatus) == 0x000008, "Wrong alignment on BtlActor_AffectRecoveryBadStatus");
static_assert(sizeof(BtlActor_AffectRecoveryBadStatus) == 0x000008, "Wrong size on BtlActor_AffectRecoveryBadStatus");
static_assert(offsetof(BtlActor_AffectRecoveryBadStatus, BtlCore_0) == 0x000000, "Member 'BtlActor_AffectRecoveryBadStatus::BtlCore_0' has a wrong offset!");

// Function xrd777.BtlActor.AffectRecoveryFromEvent
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_AffectRecoveryFromEvent final
{
public:
	float                                         RecoveryHpRatio;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_AffectRecoveryFromEvent) == 0x000004, "Wrong alignment on BtlActor_AffectRecoveryFromEvent");
static_assert(sizeof(BtlActor_AffectRecoveryFromEvent) == 0x000004, "Wrong size on BtlActor_AffectRecoveryFromEvent");
static_assert(offsetof(BtlActor_AffectRecoveryFromEvent, RecoveryHpRatio) == 0x000000, "Member 'BtlActor_AffectRecoveryFromEvent::RecoveryHpRatio' has a wrong offset!");

// Function xrd777.BtlActor.CalcClosedStandLocation
// 0x0028 (0x0028 - 0x0000)
struct BtlActor_CalcClosedStandLocation final
{
public:
	class UBtlCoreComponent*                      PCore;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Pos;                                               // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandRange;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CoordinateFromEnemyCenter;                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CalcClosedStandLocation) == 0x000008, "Wrong alignment on BtlActor_CalcClosedStandLocation");
static_assert(sizeof(BtlActor_CalcClosedStandLocation) == 0x000028, "Wrong size on BtlActor_CalcClosedStandLocation");
static_assert(offsetof(BtlActor_CalcClosedStandLocation, PCore) == 0x000000, "Member 'BtlActor_CalcClosedStandLocation::PCore' has a wrong offset!");
static_assert(offsetof(BtlActor_CalcClosedStandLocation, Pos) == 0x000008, "Member 'BtlActor_CalcClosedStandLocation::Pos' has a wrong offset!");
static_assert(offsetof(BtlActor_CalcClosedStandLocation, StandRange) == 0x000014, "Member 'BtlActor_CalcClosedStandLocation::StandRange' has a wrong offset!");
static_assert(offsetof(BtlActor_CalcClosedStandLocation, CoordinateFromEnemyCenter) == 0x000018, "Member 'BtlActor_CalcClosedStandLocation::CoordinateFromEnemyCenter' has a wrong offset!");
static_assert(offsetof(BtlActor_CalcClosedStandLocation, ReturnValue) == 0x00001C, "Member 'BtlActor_CalcClosedStandLocation::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckDownContinuedState
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckDownContinuedState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckDownContinuedState) == 0x000001, "Wrong alignment on BtlActor_CheckDownContinuedState");
static_assert(sizeof(BtlActor_CheckDownContinuedState) == 0x000001, "Wrong size on BtlActor_CheckDownContinuedState");
static_assert(offsetof(BtlActor_CheckDownContinuedState, ReturnValue) == 0x000000, "Member 'BtlActor_CheckDownContinuedState::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckExpireSupportStatus
// 0x0010 (0x0010 - 0x0000)
struct BtlActor_CheckExpireSupportStatus final
{
public:
	class UBtlCoreComponent*                      BtlCore_0;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlActor_CheckExpireSupportStatus) == 0x000008, "Wrong alignment on BtlActor_CheckExpireSupportStatus");
static_assert(sizeof(BtlActor_CheckExpireSupportStatus) == 0x000010, "Wrong size on BtlActor_CheckExpireSupportStatus");
static_assert(offsetof(BtlActor_CheckExpireSupportStatus, BtlCore_0) == 0x000000, "Member 'BtlActor_CheckExpireSupportStatus::BtlCore_0' has a wrong offset!");
static_assert(offsetof(BtlActor_CheckExpireSupportStatus, ReturnValue) == 0x000008, "Member 'BtlActor_CheckExpireSupportStatus::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckPersonaValid
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckPersonaValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckPersonaValid) == 0x000001, "Wrong alignment on BtlActor_CheckPersonaValid");
static_assert(sizeof(BtlActor_CheckPersonaValid) == 0x000001, "Wrong size on BtlActor_CheckPersonaValid");
static_assert(offsetof(BtlActor_CheckPersonaValid, ReturnValue) == 0x000000, "Member 'BtlActor_CheckPersonaValid::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckReady
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckReady) == 0x000001, "Wrong alignment on BtlActor_CheckReady");
static_assert(sizeof(BtlActor_CheckReady) == 0x000001, "Wrong size on BtlActor_CheckReady");
static_assert(offsetof(BtlActor_CheckReady, ReturnValue) == 0x000000, "Member 'BtlActor_CheckReady::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckReadyCharacterBP
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckReadyCharacterBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckReadyCharacterBP) == 0x000001, "Wrong alignment on BtlActor_CheckReadyCharacterBP");
static_assert(sizeof(BtlActor_CheckReadyCharacterBP) == 0x000001, "Wrong size on BtlActor_CheckReadyCharacterBP");
static_assert(offsetof(BtlActor_CheckReadyCharacterBP, ReturnValue) == 0x000000, "Member 'BtlActor_CheckReadyCharacterBP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckReadyFukaForTheurgia
// 0x0010 (0x0010 - 0x0000)
struct BtlActor_CheckReadyFukaForTheurgia final
{
public:
	class ABtlActor*                              PFuka;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlActor_CheckReadyFukaForTheurgia) == 0x000008, "Wrong alignment on BtlActor_CheckReadyFukaForTheurgia");
static_assert(sizeof(BtlActor_CheckReadyFukaForTheurgia) == 0x000010, "Wrong size on BtlActor_CheckReadyFukaForTheurgia");
static_assert(offsetof(BtlActor_CheckReadyFukaForTheurgia, PFuka) == 0x000000, "Member 'BtlActor_CheckReadyFukaForTheurgia::PFuka' has a wrong offset!");
static_assert(offsetof(BtlActor_CheckReadyFukaForTheurgia, ReturnValue) == 0x000008, "Member 'BtlActor_CheckReadyFukaForTheurgia::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckRecoveryFromBadStatus
// 0x0010 (0x0010 - 0x0000)
struct BtlActor_CheckRecoveryFromBadStatus final
{
public:
	class UBtlCoreComponent*                      BtlCore_0;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlActor_CheckRecoveryFromBadStatus) == 0x000008, "Wrong alignment on BtlActor_CheckRecoveryFromBadStatus");
static_assert(sizeof(BtlActor_CheckRecoveryFromBadStatus) == 0x000010, "Wrong size on BtlActor_CheckRecoveryFromBadStatus");
static_assert(offsetof(BtlActor_CheckRecoveryFromBadStatus, BtlCore_0) == 0x000000, "Member 'BtlActor_CheckRecoveryFromBadStatus::BtlCore_0' has a wrong offset!");
static_assert(offsetof(BtlActor_CheckRecoveryFromBadStatus, ReturnValue) == 0x000008, "Member 'BtlActor_CheckRecoveryFromBadStatus::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CleanupStatusEffect
// 0x0003 (0x0003 - 0x0000)
struct BtlActor_CleanupStatusEffect final
{
public:
	bool                                          Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Down;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepSwoon;                                         // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CleanupStatusEffect) == 0x000001, "Wrong alignment on BtlActor_CleanupStatusEffect");
static_assert(sizeof(BtlActor_CleanupStatusEffect) == 0x000003, "Wrong size on BtlActor_CleanupStatusEffect");
static_assert(offsetof(BtlActor_CleanupStatusEffect, Status) == 0x000000, "Member 'BtlActor_CleanupStatusEffect::Status' has a wrong offset!");
static_assert(offsetof(BtlActor_CleanupStatusEffect, Down) == 0x000001, "Member 'BtlActor_CleanupStatusEffect::Down' has a wrong offset!");
static_assert(offsetof(BtlActor_CleanupStatusEffect, KeepSwoon) == 0x000002, "Member 'BtlActor_CleanupStatusEffect::KeepSwoon' has a wrong offset!");

// Function xrd777.BtlActor.CoordinateSkillBPForSpecificSituations
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_CoordinateSkillBPForSpecificSituations final
{
public:
	class ABtlSkill*                              Skill;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CoordinateSkillBPForSpecificSituations) == 0x000008, "Wrong alignment on BtlActor_CoordinateSkillBPForSpecificSituations");
static_assert(sizeof(BtlActor_CoordinateSkillBPForSpecificSituations) == 0x000008, "Wrong size on BtlActor_CoordinateSkillBPForSpecificSituations");
static_assert(offsetof(BtlActor_CoordinateSkillBPForSpecificSituations, Skill) == 0x000000, "Member 'BtlActor_CoordinateSkillBPForSpecificSituations::Skill' has a wrong offset!");

// Function xrd777.BtlActor.DestroyEffect
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_DestroyEffect final
{
public:
	class UNiagaraComponent*                      PNiagara;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_DestroyEffect) == 0x000008, "Wrong alignment on BtlActor_DestroyEffect");
static_assert(sizeof(BtlActor_DestroyEffect) == 0x000008, "Wrong size on BtlActor_DestroyEffect");
static_assert(offsetof(BtlActor_DestroyEffect, PNiagara) == 0x000000, "Member 'BtlActor_DestroyEffect::PNiagara' has a wrong offset!");

// Function xrd777.BtlActor.DestroyFukaForTheurgia
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_DestroyFukaForTheurgia final
{
public:
	class ABtlActor*                              PFuka;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_DestroyFukaForTheurgia) == 0x000008, "Wrong alignment on BtlActor_DestroyFukaForTheurgia");
static_assert(sizeof(BtlActor_DestroyFukaForTheurgia) == 0x000008, "Wrong size on BtlActor_DestroyFukaForTheurgia");
static_assert(offsetof(BtlActor_DestroyFukaForTheurgia, PFuka) == 0x000000, "Member 'BtlActor_DestroyFukaForTheurgia::PFuka' has a wrong offset!");

// Function xrd777.BtlActor.DoAutoSkillRecovery
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_DoAutoSkillRecovery final
{
public:
	bool                                          RecoveryValid;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_DoAutoSkillRecovery) == 0x000001, "Wrong alignment on BtlActor_DoAutoSkillRecovery");
static_assert(sizeof(BtlActor_DoAutoSkillRecovery) == 0x000001, "Wrong size on BtlActor_DoAutoSkillRecovery");
static_assert(offsetof(BtlActor_DoAutoSkillRecovery, RecoveryValid) == 0x000000, "Member 'BtlActor_DoAutoSkillRecovery::RecoveryValid' has a wrong offset!");

// Function xrd777.BtlActor.DoBadStatusAction
// 0x0003 (0x0003 - 0x0000)
struct BtlActor_DoBadStatusAction final
{
public:
	bool                                          ActBadStatusSkillAction;                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedToWaitProcess;                                 // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverheatInterrupt;                               // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_DoBadStatusAction) == 0x000001, "Wrong alignment on BtlActor_DoBadStatusAction");
static_assert(sizeof(BtlActor_DoBadStatusAction) == 0x000003, "Wrong size on BtlActor_DoBadStatusAction");
static_assert(offsetof(BtlActor_DoBadStatusAction, ActBadStatusSkillAction) == 0x000000, "Member 'BtlActor_DoBadStatusAction::ActBadStatusSkillAction' has a wrong offset!");
static_assert(offsetof(BtlActor_DoBadStatusAction, NeedToWaitProcess) == 0x000001, "Member 'BtlActor_DoBadStatusAction::NeedToWaitProcess' has a wrong offset!");
static_assert(offsetof(BtlActor_DoBadStatusAction, IsOverheatInterrupt) == 0x000002, "Member 'BtlActor_DoBadStatusAction::IsOverheatInterrupt' has a wrong offset!");

// Function xrd777.BtlActor.DoBadStatusDamage
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_DoBadStatusDamage final
{
public:
	bool                                          IsDamageOccurred;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_DoBadStatusDamage) == 0x000001, "Wrong alignment on BtlActor_DoBadStatusDamage");
static_assert(sizeof(BtlActor_DoBadStatusDamage) == 0x000001, "Wrong size on BtlActor_DoBadStatusDamage");
static_assert(offsetof(BtlActor_DoBadStatusDamage, IsDamageOccurred) == 0x000000, "Member 'BtlActor_DoBadStatusDamage::IsDamageOccurred' has a wrong offset!");

// Function xrd777.BtlActor.DoClearSupportStatus
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_DoClearSupportStatus final
{
public:
	class UBtlCoreComponent*                      BtlCore_0;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_DoClearSupportStatus) == 0x000008, "Wrong alignment on BtlActor_DoClearSupportStatus");
static_assert(sizeof(BtlActor_DoClearSupportStatus) == 0x000008, "Wrong size on BtlActor_DoClearSupportStatus");
static_assert(offsetof(BtlActor_DoClearSupportStatus, BtlCore_0) == 0x000000, "Member 'BtlActor_DoClearSupportStatus::BtlCore_0' has a wrong offset!");

// Function xrd777.BtlActor.DoSpecificAction
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_DoSpecificAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_DoSpecificAction) == 0x000001, "Wrong alignment on BtlActor_DoSpecificAction");
static_assert(sizeof(BtlActor_DoSpecificAction) == 0x000001, "Wrong size on BtlActor_DoSpecificAction");
static_assert(offsetof(BtlActor_DoSpecificAction, ReturnValue) == 0x000000, "Member 'BtlActor_DoSpecificAction::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetActionManager
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_GetActionManager final
{
public:
	class UBtlActionManagerComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetActionManager) == 0x000008, "Wrong alignment on BtlActor_GetActionManager");
static_assert(sizeof(BtlActor_GetActionManager) == 0x000008, "Wrong size on BtlActor_GetActionManager");
static_assert(offsetof(BtlActor_GetActionManager, ReturnValue) == 0x000000, "Member 'BtlActor_GetActionManager::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetActionTargets
// 0x0010 (0x0010 - 0x0000)
struct BtlActor_GetActionTargets final
{
public:
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetActionTargets) == 0x000008, "Wrong alignment on BtlActor_GetActionTargets");
static_assert(sizeof(BtlActor_GetActionTargets) == 0x000010, "Wrong size on BtlActor_GetActionTargets");
static_assert(offsetof(BtlActor_GetActionTargets, ReturnValue) == 0x000000, "Member 'BtlActor_GetActionTargets::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetCharaBPFromCode
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_GetCharaBPFromCode final
{
public:
	class UAppCharBaseComp*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetCharaBPFromCode) == 0x000008, "Wrong alignment on BtlActor_GetCharaBPFromCode");
static_assert(sizeof(BtlActor_GetCharaBPFromCode) == 0x000008, "Wrong size on BtlActor_GetCharaBPFromCode");
static_assert(offsetof(BtlActor_GetCharaBPFromCode, ReturnValue) == 0x000000, "Member 'BtlActor_GetCharaBPFromCode::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetCurrentAnimation
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_GetCurrentAnimation final
{
public:
	EBtlAnimationType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetCurrentAnimation) == 0x000001, "Wrong alignment on BtlActor_GetCurrentAnimation");
static_assert(sizeof(BtlActor_GetCurrentAnimation) == 0x000001, "Wrong size on BtlActor_GetCurrentAnimation");
static_assert(offsetof(BtlActor_GetCurrentAnimation, ReturnValue) == 0x000000, "Member 'BtlActor_GetCurrentAnimation::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetPersona
// 0x0010 (0x0010 - 0x0000)
struct BtlActor_GetPersona final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetPersona) == 0x000008, "Wrong alignment on BtlActor_GetPersona");
static_assert(sizeof(BtlActor_GetPersona) == 0x000010, "Wrong size on BtlActor_GetPersona");
static_assert(offsetof(BtlActor_GetPersona, Index_0) == 0x000000, "Member 'BtlActor_GetPersona::Index_0' has a wrong offset!");
static_assert(offsetof(BtlActor_GetPersona, ReturnValue) == 0x000008, "Member 'BtlActor_GetPersona::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetSocketTransformFromCpp
// 0x0040 (0x0040 - 0x0000)
struct BtlActor_GetSocketTransformFromCpp final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetSocketTransformFromCpp) == 0x000010, "Wrong alignment on BtlActor_GetSocketTransformFromCpp");
static_assert(sizeof(BtlActor_GetSocketTransformFromCpp) == 0x000040, "Wrong size on BtlActor_GetSocketTransformFromCpp");
static_assert(offsetof(BtlActor_GetSocketTransformFromCpp, SocketName) == 0x000000, "Member 'BtlActor_GetSocketTransformFromCpp::SocketName' has a wrong offset!");
static_assert(offsetof(BtlActor_GetSocketTransformFromCpp, ReturnValue) == 0x000010, "Member 'BtlActor_GetSocketTransformFromCpp::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetTargetsManager
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_GetTargetsManager final
{
public:
	class UBtlTargetsManagerComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetTargetsManager) == 0x000008, "Wrong alignment on BtlActor_GetTargetsManager");
static_assert(sizeof(BtlActor_GetTargetsManager) == 0x000008, "Wrong size on BtlActor_GetTargetsManager");
static_assert(offsetof(BtlActor_GetTargetsManager, ReturnValue) == 0x000000, "Member 'BtlActor_GetTargetsManager::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.HideForOtherAction
// 0x0003 (0x0003 - 0x0000)
struct BtlActor_HideForOtherAction final
{
public:
	bool                                          CriticalHindrance;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Rapid;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HalfMode;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_HideForOtherAction) == 0x000001, "Wrong alignment on BtlActor_HideForOtherAction");
static_assert(sizeof(BtlActor_HideForOtherAction) == 0x000003, "Wrong size on BtlActor_HideForOtherAction");
static_assert(offsetof(BtlActor_HideForOtherAction, CriticalHindrance) == 0x000000, "Member 'BtlActor_HideForOtherAction::CriticalHindrance' has a wrong offset!");
static_assert(offsetof(BtlActor_HideForOtherAction, Rapid) == 0x000001, "Member 'BtlActor_HideForOtherAction::Rapid' has a wrong offset!");
static_assert(offsetof(BtlActor_HideForOtherAction, HalfMode) == 0x000002, "Member 'BtlActor_HideForOtherAction::HalfMode' has a wrong offset!");

// Function xrd777.BtlActor.IsAnimationChant
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsAnimationChant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsAnimationChant) == 0x000001, "Wrong alignment on BtlActor_IsAnimationChant");
static_assert(sizeof(BtlActor_IsAnimationChant) == 0x000001, "Wrong size on BtlActor_IsAnimationChant");
static_assert(offsetof(BtlActor_IsAnimationChant, ReturnValue) == 0x000000, "Member 'BtlActor_IsAnimationChant::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsAnimationWait
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsAnimationWait final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsAnimationWait) == 0x000001, "Wrong alignment on BtlActor_IsAnimationWait");
static_assert(sizeof(BtlActor_IsAnimationWait) == 0x000001, "Wrong size on BtlActor_IsAnimationWait");
static_assert(offsetof(BtlActor_IsAnimationWait, ReturnValue) == 0x000000, "Member 'BtlActor_IsAnimationWait::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.PlayVoicePersonaSkillCutin
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_PlayVoicePersonaSkillCutin final
{
public:
	bool                                          IsFirstSummon;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_PlayVoicePersonaSkillCutin) == 0x000001, "Wrong alignment on BtlActor_PlayVoicePersonaSkillCutin");
static_assert(sizeof(BtlActor_PlayVoicePersonaSkillCutin) == 0x000001, "Wrong size on BtlActor_PlayVoicePersonaSkillCutin");
static_assert(offsetof(BtlActor_PlayVoicePersonaSkillCutin, IsFirstSummon) == 0x000000, "Member 'BtlActor_PlayVoicePersonaSkillCutin::IsFirstSummon' has a wrong offset!");

// Function xrd777.BtlActor.PlayVoiceTheurgia
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_PlayVoiceTheurgia final
{
public:
	int32                                         TypeIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_PlayVoiceTheurgia) == 0x000004, "Wrong alignment on BtlActor_PlayVoiceTheurgia");
static_assert(sizeof(BtlActor_PlayVoiceTheurgia) == 0x000004, "Wrong size on BtlActor_PlayVoiceTheurgia");
static_assert(offsetof(BtlActor_PlayVoiceTheurgia, TypeIndex) == 0x000000, "Member 'BtlActor_PlayVoiceTheurgia::TypeIndex' has a wrong offset!");

// Function xrd777.BtlActor.PlayWaitAnimation
// 0x0010 (0x0010 - 0x0000)
struct BtlActor_PlayWaitAnimation final
{
public:
	float                                         StartingPosition;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBlendSetting;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreWhenSamePose;                                // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlActor_PlayWaitAnimation) == 0x000004, "Wrong alignment on BtlActor_PlayWaitAnimation");
static_assert(sizeof(BtlActor_PlayWaitAnimation) == 0x000010, "Wrong size on BtlActor_PlayWaitAnimation");
static_assert(offsetof(BtlActor_PlayWaitAnimation, StartingPosition) == 0x000000, "Member 'BtlActor_PlayWaitAnimation::StartingPosition' has a wrong offset!");
static_assert(offsetof(BtlActor_PlayWaitAnimation, UseBlendSetting) == 0x000004, "Member 'BtlActor_PlayWaitAnimation::UseBlendSetting' has a wrong offset!");
static_assert(offsetof(BtlActor_PlayWaitAnimation, Blend) == 0x000008, "Member 'BtlActor_PlayWaitAnimation::Blend' has a wrong offset!");
static_assert(offsetof(BtlActor_PlayWaitAnimation, IgnoreWhenSamePose) == 0x00000C, "Member 'BtlActor_PlayWaitAnimation::IgnoreWhenSamePose' has a wrong offset!");

// Function xrd777.BtlActor.PreAffectSkillDamagePortion
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_PreAffectSkillDamagePortion final
{
public:
	float                                         PortionRatio;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_PreAffectSkillDamagePortion) == 0x000004, "Wrong alignment on BtlActor_PreAffectSkillDamagePortion");
static_assert(sizeof(BtlActor_PreAffectSkillDamagePortion) == 0x000004, "Wrong size on BtlActor_PreAffectSkillDamagePortion");
static_assert(offsetof(BtlActor_PreAffectSkillDamagePortion, PortionRatio) == 0x000000, "Member 'BtlActor_PreAffectSkillDamagePortion::PortionRatio' has a wrong offset!");

// Function xrd777.BtlActor.RemoveEffectItem
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_RemoveEffectItem final
{
public:
	EBtlBadStatusIcon                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_RemoveEffectItem) == 0x000001, "Wrong alignment on BtlActor_RemoveEffectItem");
static_assert(sizeof(BtlActor_RemoveEffectItem) == 0x000001, "Wrong size on BtlActor_RemoveEffectItem");
static_assert(offsetof(BtlActor_RemoveEffectItem, Type) == 0x000000, "Member 'BtlActor_RemoveEffectItem::Type' has a wrong offset!");

// Function xrd777.BtlActor.RequestAddStatusEffect
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_RequestAddStatusEffect final
{
public:
	EBtlBadStatusIcon                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_RequestAddStatusEffect) == 0x000001, "Wrong alignment on BtlActor_RequestAddStatusEffect");
static_assert(sizeof(BtlActor_RequestAddStatusEffect) == 0x000001, "Wrong size on BtlActor_RequestAddStatusEffect");
static_assert(offsetof(BtlActor_RequestAddStatusEffect, Type) == 0x000000, "Member 'BtlActor_RequestAddStatusEffect::Type' has a wrong offset!");

// Function xrd777.BtlActor.RequestAnimation
// 0x0010 (0x0010 - 0x0000)
struct BtlActor_RequestAnimation final
{
public:
	EBtlAnimationType                             AnimType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartingPosition;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBlendSetting;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_RequestAnimation) == 0x000004, "Wrong alignment on BtlActor_RequestAnimation");
static_assert(sizeof(BtlActor_RequestAnimation) == 0x000010, "Wrong size on BtlActor_RequestAnimation");
static_assert(offsetof(BtlActor_RequestAnimation, AnimType) == 0x000000, "Member 'BtlActor_RequestAnimation::AnimType' has a wrong offset!");
static_assert(offsetof(BtlActor_RequestAnimation, StartingPosition) == 0x000004, "Member 'BtlActor_RequestAnimation::StartingPosition' has a wrong offset!");
static_assert(offsetof(BtlActor_RequestAnimation, UseBlendSetting) == 0x000008, "Member 'BtlActor_RequestAnimation::UseBlendSetting' has a wrong offset!");
static_assert(offsetof(BtlActor_RequestAnimation, Blend) == 0x00000C, "Member 'BtlActor_RequestAnimation::Blend' has a wrong offset!");

// Function xrd777.BtlActor.RequestAnimationWithNext
// 0x0002 (0x0002 - 0x0000)
struct BtlActor_RequestAnimationWithNext final
{
public:
	EBtlAnimationType                             AnimType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlAnimationType                             AnimNextType;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_RequestAnimationWithNext) == 0x000001, "Wrong alignment on BtlActor_RequestAnimationWithNext");
static_assert(sizeof(BtlActor_RequestAnimationWithNext) == 0x000002, "Wrong size on BtlActor_RequestAnimationWithNext");
static_assert(offsetof(BtlActor_RequestAnimationWithNext, AnimType) == 0x000000, "Member 'BtlActor_RequestAnimationWithNext::AnimType' has a wrong offset!");
static_assert(offsetof(BtlActor_RequestAnimationWithNext, AnimNextType) == 0x000001, "Member 'BtlActor_RequestAnimationWithNext::AnimNextType' has a wrong offset!");

// Function xrd777.BtlActor.RequestFaceAnimation
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_RequestFaceAnimation final
{
public:
	EAppCharFaceAnimID                            AnimType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseBlendSetting;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_RequestFaceAnimation) == 0x000004, "Wrong alignment on BtlActor_RequestFaceAnimation");
static_assert(sizeof(BtlActor_RequestFaceAnimation) == 0x000008, "Wrong size on BtlActor_RequestFaceAnimation");
static_assert(offsetof(BtlActor_RequestFaceAnimation, AnimType) == 0x000000, "Member 'BtlActor_RequestFaceAnimation::AnimType' has a wrong offset!");
static_assert(offsetof(BtlActor_RequestFaceAnimation, UseBlendSetting) == 0x000001, "Member 'BtlActor_RequestFaceAnimation::UseBlendSetting' has a wrong offset!");
static_assert(offsetof(BtlActor_RequestFaceAnimation, Blend) == 0x000004, "Member 'BtlActor_RequestFaceAnimation::Blend' has a wrong offset!");

// Function xrd777.BtlActor.SearchSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct BtlActor_SearchSkeletalMesh final
{
public:
	class UObject*                                InObject;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SearchSkeletalMesh) == 0x000008, "Wrong alignment on BtlActor_SearchSkeletalMesh");
static_assert(sizeof(BtlActor_SearchSkeletalMesh) == 0x000010, "Wrong size on BtlActor_SearchSkeletalMesh");
static_assert(offsetof(BtlActor_SearchSkeletalMesh, InObject) == 0x000000, "Member 'BtlActor_SearchSkeletalMesh::InObject' has a wrong offset!");
static_assert(offsetof(BtlActor_SearchSkeletalMesh, ReturnValue) == 0x000008, "Member 'BtlActor_SearchSkeletalMesh::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.SetActionID
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_SetActionID final
{
public:
	int32                                         ActionID;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SetActionID) == 0x000004, "Wrong alignment on BtlActor_SetActionID");
static_assert(sizeof(BtlActor_SetActionID) == 0x000004, "Wrong size on BtlActor_SetActionID");
static_assert(offsetof(BtlActor_SetActionID, ActionID) == 0x000000, "Member 'BtlActor_SetActionID::ActionID' has a wrong offset!");

// Function xrd777.BtlActor.SetActiveMode
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_SetActiveMode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SetActiveMode) == 0x000001, "Wrong alignment on BtlActor_SetActiveMode");
static_assert(sizeof(BtlActor_SetActiveMode) == 0x000001, "Wrong size on BtlActor_SetActiveMode");
static_assert(offsetof(BtlActor_SetActiveMode, Enable) == 0x000000, "Member 'BtlActor_SetActiveMode::Enable' has a wrong offset!");

// Function xrd777.BtlActor.SetDisableUpdateFaceAnimFromBody
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_SetDisableUpdateFaceAnimFromBody final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SetDisableUpdateFaceAnimFromBody) == 0x000001, "Wrong alignment on BtlActor_SetDisableUpdateFaceAnimFromBody");
static_assert(sizeof(BtlActor_SetDisableUpdateFaceAnimFromBody) == 0x000001, "Wrong size on BtlActor_SetDisableUpdateFaceAnimFromBody");
static_assert(offsetof(BtlActor_SetDisableUpdateFaceAnimFromBody, Disable) == 0x000000, "Member 'BtlActor_SetDisableUpdateFaceAnimFromBody::Disable' has a wrong offset!");

// Function xrd777.BtlActor.SetEventMode
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_SetEventMode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SetEventMode) == 0x000001, "Wrong alignment on BtlActor_SetEventMode");
static_assert(sizeof(BtlActor_SetEventMode) == 0x000001, "Wrong size on BtlActor_SetEventMode");
static_assert(offsetof(BtlActor_SetEventMode, Enable) == 0x000000, "Member 'BtlActor_SetEventMode::Enable' has a wrong offset!");

// Function xrd777.BtlActor.SetGeneralAttackResult
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_SetGeneralAttackResult final
{
public:
	EBtlAlloutAttackResult                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SetGeneralAttackResult) == 0x000001, "Wrong alignment on BtlActor_SetGeneralAttackResult");
static_assert(sizeof(BtlActor_SetGeneralAttackResult) == 0x000001, "Wrong size on BtlActor_SetGeneralAttackResult");
static_assert(offsetof(BtlActor_SetGeneralAttackResult, Type) == 0x000000, "Member 'BtlActor_SetGeneralAttackResult::Type' has a wrong offset!");

// Function xrd777.BtlActor.SetPersonaLocation
// 0x0040 (0x0040 - 0x0000)
struct BtlActor_SetPersonaLocation final
{
public:
	struct FTransform                             RelativeTrans;                                     // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlActor_SetPersonaLocation) == 0x000010, "Wrong alignment on BtlActor_SetPersonaLocation");
static_assert(sizeof(BtlActor_SetPersonaLocation) == 0x000040, "Wrong size on BtlActor_SetPersonaLocation");
static_assert(offsetof(BtlActor_SetPersonaLocation, RelativeTrans) == 0x000000, "Member 'BtlActor_SetPersonaLocation::RelativeTrans' has a wrong offset!");
static_assert(offsetof(BtlActor_SetPersonaLocation, Index_0) == 0x000030, "Member 'BtlActor_SetPersonaLocation::Index_0' has a wrong offset!");

// Function xrd777.BtlActor.SetPersonaWorldLocation
// 0x0040 (0x0040 - 0x0000)
struct BtlActor_SetPersonaWorldLocation final
{
public:
	struct FTransform                             WorldTrans;                                        // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlActor_SetPersonaWorldLocation) == 0x000010, "Wrong alignment on BtlActor_SetPersonaWorldLocation");
static_assert(sizeof(BtlActor_SetPersonaWorldLocation) == 0x000040, "Wrong size on BtlActor_SetPersonaWorldLocation");
static_assert(offsetof(BtlActor_SetPersonaWorldLocation, WorldTrans) == 0x000000, "Member 'BtlActor_SetPersonaWorldLocation::WorldTrans' has a wrong offset!");
static_assert(offsetof(BtlActor_SetPersonaWorldLocation, Index_0) == 0x000030, "Member 'BtlActor_SetPersonaWorldLocation::Index_0' has a wrong offset!");

// Function xrd777.BtlActor.SetStatusColor
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_SetStatusColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SetStatusColor) == 0x000004, "Wrong alignment on BtlActor_SetStatusColor");
static_assert(sizeof(BtlActor_SetStatusColor) == 0x000004, "Wrong size on BtlActor_SetStatusColor");
static_assert(offsetof(BtlActor_SetStatusColor, Color) == 0x000000, "Member 'BtlActor_SetStatusColor::Color' has a wrong offset!");

// Function xrd777.BtlActor.SetupForEventMode
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_SetupForEventMode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SetupForEventMode) == 0x000001, "Wrong alignment on BtlActor_SetupForEventMode");
static_assert(sizeof(BtlActor_SetupForEventMode) == 0x000001, "Wrong size on BtlActor_SetupForEventMode");
static_assert(offsetof(BtlActor_SetupForEventMode, Enable) == 0x000000, "Member 'BtlActor_SetupForEventMode::Enable' has a wrong offset!");

// Function xrd777.BtlActor.SetVisibleFromCode
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_SetVisibleFromCode final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SetVisibleFromCode) == 0x000001, "Wrong alignment on BtlActor_SetVisibleFromCode");
static_assert(sizeof(BtlActor_SetVisibleFromCode) == 0x000001, "Wrong size on BtlActor_SetVisibleFromCode");
static_assert(offsetof(BtlActor_SetVisibleFromCode, Visible) == 0x000000, "Member 'BtlActor_SetVisibleFromCode::Visible' has a wrong offset!");

// Function xrd777.BtlActor.SpawnAllSummonEnemy
// 0x0010 (0x0010 - 0x0000)
struct BtlActor_SpawnAllSummonEnemy final
{
public:
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SpawnAllSummonEnemy) == 0x000008, "Wrong alignment on BtlActor_SpawnAllSummonEnemy");
static_assert(sizeof(BtlActor_SpawnAllSummonEnemy) == 0x000010, "Wrong size on BtlActor_SpawnAllSummonEnemy");
static_assert(offsetof(BtlActor_SpawnAllSummonEnemy, ReturnValue) == 0x000000, "Member 'BtlActor_SpawnAllSummonEnemy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.SpawnCharacterBP
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_SpawnCharacterBP final
{
public:
	bool                                          InitialHiding;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SpawnCharacterBP) == 0x000001, "Wrong alignment on BtlActor_SpawnCharacterBP");
static_assert(sizeof(BtlActor_SpawnCharacterBP) == 0x000001, "Wrong size on BtlActor_SpawnCharacterBP");
static_assert(offsetof(BtlActor_SpawnCharacterBP, InitialHiding) == 0x000000, "Member 'BtlActor_SpawnCharacterBP::InitialHiding' has a wrong offset!");

// Function xrd777.BtlActor.SpawnFukaForTheurgia
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_SpawnFukaForTheurgia final
{
public:
	class ABtlActor*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SpawnFukaForTheurgia) == 0x000008, "Wrong alignment on BtlActor_SpawnFukaForTheurgia");
static_assert(sizeof(BtlActor_SpawnFukaForTheurgia) == 0x000008, "Wrong size on BtlActor_SpawnFukaForTheurgia");
static_assert(offsetof(BtlActor_SpawnFukaForTheurgia, ReturnValue) == 0x000000, "Member 'BtlActor_SpawnFukaForTheurgia::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.SpawnPersona
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_SpawnPersona final
{
public:
	bool                                          WithoutEmergeEffect;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SpawnPersona) == 0x000001, "Wrong alignment on BtlActor_SpawnPersona");
static_assert(sizeof(BtlActor_SpawnPersona) == 0x000001, "Wrong size on BtlActor_SpawnPersona");
static_assert(offsetof(BtlActor_SpawnPersona, WithoutEmergeEffect) == 0x000000, "Member 'BtlActor_SpawnPersona::WithoutEmergeEffect' has a wrong offset!");

// Function xrd777.BtlActor.SpawnSummonEnemy
// 0x0008 (0x0008 - 0x0000)
struct BtlActor_SpawnSummonEnemy final
{
public:
	class ABtlActor*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SpawnSummonEnemy) == 0x000008, "Wrong alignment on BtlActor_SpawnSummonEnemy");
static_assert(sizeof(BtlActor_SpawnSummonEnemy) == 0x000008, "Wrong size on BtlActor_SpawnSummonEnemy");
static_assert(offsetof(BtlActor_SpawnSummonEnemy, ReturnValue) == 0x000000, "Member 'BtlActor_SpawnSummonEnemy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.SyncModelsForAlloutAttack
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_SyncModelsForAlloutAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SyncModelsForAlloutAttack) == 0x000001, "Wrong alignment on BtlActor_SyncModelsForAlloutAttack");
static_assert(sizeof(BtlActor_SyncModelsForAlloutAttack) == 0x000001, "Wrong size on BtlActor_SyncModelsForAlloutAttack");
static_assert(offsetof(BtlActor_SyncModelsForAlloutAttack, ReturnValue) == 0x000000, "Member 'BtlActor_SyncModelsForAlloutAttack::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.SyncModelsForEvent
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_SyncModelsForEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SyncModelsForEvent) == 0x000001, "Wrong alignment on BtlActor_SyncModelsForEvent");
static_assert(sizeof(BtlActor_SyncModelsForEvent) == 0x000001, "Wrong size on BtlActor_SyncModelsForEvent");
static_assert(offsetof(BtlActor_SyncModelsForEvent, ReturnValue) == 0x000000, "Member 'BtlActor_SyncModelsForEvent::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.TurnOffOrgia
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_TurnOffOrgia final
{
public:
	bool                                          Dead;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_TurnOffOrgia) == 0x000001, "Wrong alignment on BtlActor_TurnOffOrgia");
static_assert(sizeof(BtlActor_TurnOffOrgia) == 0x000001, "Wrong size on BtlActor_TurnOffOrgia");
static_assert(offsetof(BtlActor_TurnOffOrgia, Dead) == 0x000000, "Member 'BtlActor_TurnOffOrgia::Dead' has a wrong offset!");

// Function xrd777.BtlActor.CheckActiveMode
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckActiveMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckActiveMode) == 0x000001, "Wrong alignment on BtlActor_CheckActiveMode");
static_assert(sizeof(BtlActor_CheckActiveMode) == 0x000001, "Wrong size on BtlActor_CheckActiveMode");
static_assert(offsetof(BtlActor_CheckActiveMode, ReturnValue) == 0x000000, "Member 'BtlActor_CheckActiveMode::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckAlive
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckAlive) == 0x000001, "Wrong alignment on BtlActor_CheckAlive");
static_assert(sizeof(BtlActor_CheckAlive) == 0x000001, "Wrong size on BtlActor_CheckAlive");
static_assert(offsetof(BtlActor_CheckAlive, ReturnValue) == 0x000000, "Member 'BtlActor_CheckAlive::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckAlreadyTakeover
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckAlreadyTakeover final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckAlreadyTakeover) == 0x000001, "Wrong alignment on BtlActor_CheckAlreadyTakeover");
static_assert(sizeof(BtlActor_CheckAlreadyTakeover) == 0x000001, "Wrong size on BtlActor_CheckAlreadyTakeover");
static_assert(offsetof(BtlActor_CheckAlreadyTakeover, ReturnValue) == 0x000000, "Member 'BtlActor_CheckAlreadyTakeover::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckBackshotDisable
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckBackshotDisable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckBackshotDisable) == 0x000001, "Wrong alignment on BtlActor_CheckBackshotDisable");
static_assert(sizeof(BtlActor_CheckBackshotDisable) == 0x000001, "Wrong size on BtlActor_CheckBackshotDisable");
static_assert(offsetof(BtlActor_CheckBackshotDisable, ReturnValue) == 0x000000, "Member 'BtlActor_CheckBackshotDisable::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckBadStatusAction
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckBadStatusAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckBadStatusAction) == 0x000001, "Wrong alignment on BtlActor_CheckBadStatusAction");
static_assert(sizeof(BtlActor_CheckBadStatusAction) == 0x000001, "Wrong size on BtlActor_CheckBadStatusAction");
static_assert(offsetof(BtlActor_CheckBadStatusAction, ReturnValue) == 0x000000, "Member 'BtlActor_CheckBadStatusAction::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckBadStatusDamage
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckBadStatusDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckBadStatusDamage) == 0x000001, "Wrong alignment on BtlActor_CheckBadStatusDamage");
static_assert(sizeof(BtlActor_CheckBadStatusDamage) == 0x000001, "Wrong size on BtlActor_CheckBadStatusDamage");
static_assert(offsetof(BtlActor_CheckBadStatusDamage, ReturnValue) == 0x000000, "Member 'BtlActor_CheckBadStatusDamage::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckBadStatusEscape
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckBadStatusEscape final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckBadStatusEscape) == 0x000001, "Wrong alignment on BtlActor_CheckBadStatusEscape");
static_assert(sizeof(BtlActor_CheckBadStatusEscape) == 0x000001, "Wrong size on BtlActor_CheckBadStatusEscape");
static_assert(offsetof(BtlActor_CheckBadStatusEscape, ReturnValue) == 0x000000, "Member 'BtlActor_CheckBadStatusEscape::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckCutinOccur
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckCutinOccur final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckCutinOccur) == 0x000001, "Wrong alignment on BtlActor_CheckCutinOccur");
static_assert(sizeof(BtlActor_CheckCutinOccur) == 0x000001, "Wrong size on BtlActor_CheckCutinOccur");
static_assert(offsetof(BtlActor_CheckCutinOccur, ReturnValue) == 0x000000, "Member 'BtlActor_CheckCutinOccur::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckDisableUpdateFaceAnimFromBody
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckDisableUpdateFaceAnimFromBody final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckDisableUpdateFaceAnimFromBody) == 0x000001, "Wrong alignment on BtlActor_CheckDisableUpdateFaceAnimFromBody");
static_assert(sizeof(BtlActor_CheckDisableUpdateFaceAnimFromBody) == 0x000001, "Wrong size on BtlActor_CheckDisableUpdateFaceAnimFromBody");
static_assert(offsetof(BtlActor_CheckDisableUpdateFaceAnimFromBody, ReturnValue) == 0x000000, "Member 'BtlActor_CheckDisableUpdateFaceAnimFromBody::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckEnableDeadAnimation
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckEnableDeadAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckEnableDeadAnimation) == 0x000001, "Wrong alignment on BtlActor_CheckEnableDeadAnimation");
static_assert(sizeof(BtlActor_CheckEnableDeadAnimation) == 0x000001, "Wrong size on BtlActor_CheckEnableDeadAnimation");
static_assert(offsetof(BtlActor_CheckEnableDeadAnimation, ReturnValue) == 0x000000, "Member 'BtlActor_CheckEnableDeadAnimation::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckEnableRotation
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckEnableRotation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckEnableRotation) == 0x000001, "Wrong alignment on BtlActor_CheckEnableRotation");
static_assert(sizeof(BtlActor_CheckEnableRotation) == 0x000001, "Wrong size on BtlActor_CheckEnableRotation");
static_assert(offsetof(BtlActor_CheckEnableRotation, ReturnValue) == 0x000000, "Member 'BtlActor_CheckEnableRotation::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckEnableTakeover
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckEnableTakeover final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckEnableTakeover) == 0x000001, "Wrong alignment on BtlActor_CheckEnableTakeover");
static_assert(sizeof(BtlActor_CheckEnableTakeover) == 0x000001, "Wrong size on BtlActor_CheckEnableTakeover");
static_assert(offsetof(BtlActor_CheckEnableTakeover, ReturnValue) == 0x000000, "Member 'BtlActor_CheckEnableTakeover::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckEnableTheurgiaSkillUse
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckEnableTheurgiaSkillUse final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckEnableTheurgiaSkillUse) == 0x000001, "Wrong alignment on BtlActor_CheckEnableTheurgiaSkillUse");
static_assert(sizeof(BtlActor_CheckEnableTheurgiaSkillUse) == 0x000001, "Wrong size on BtlActor_CheckEnableTheurgiaSkillUse");
static_assert(offsetof(BtlActor_CheckEnableTheurgiaSkillUse, ReturnValue) == 0x000000, "Member 'BtlActor_CheckEnableTheurgiaSkillUse::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckEnableTranslucence
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckEnableTranslucence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckEnableTranslucence) == 0x000001, "Wrong alignment on BtlActor_CheckEnableTranslucence");
static_assert(sizeof(BtlActor_CheckEnableTranslucence) == 0x000001, "Wrong size on BtlActor_CheckEnableTranslucence");
static_assert(offsetof(BtlActor_CheckEnableTranslucence, ReturnValue) == 0x000000, "Member 'BtlActor_CheckEnableTranslucence::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckExistStatusEffect
// 0x0002 (0x0002 - 0x0000)
struct BtlActor_CheckExistStatusEffect final
{
public:
	EBtlBadStatusIcon                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckExistStatusEffect) == 0x000001, "Wrong alignment on BtlActor_CheckExistStatusEffect");
static_assert(sizeof(BtlActor_CheckExistStatusEffect) == 0x000002, "Wrong size on BtlActor_CheckExistStatusEffect");
static_assert(offsetof(BtlActor_CheckExistStatusEffect, Type) == 0x000000, "Member 'BtlActor_CheckExistStatusEffect::Type' has a wrong offset!");
static_assert(offsetof(BtlActor_CheckExistStatusEffect, ReturnValue) == 0x000001, "Member 'BtlActor_CheckExistStatusEffect::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckExistStatusEffectRequestList
// 0x0002 (0x0002 - 0x0000)
struct BtlActor_CheckExistStatusEffectRequestList final
{
public:
	EBtlBadStatusIcon                             RequestType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckExistStatusEffectRequestList) == 0x000001, "Wrong alignment on BtlActor_CheckExistStatusEffectRequestList");
static_assert(sizeof(BtlActor_CheckExistStatusEffectRequestList) == 0x000002, "Wrong size on BtlActor_CheckExistStatusEffectRequestList");
static_assert(offsetof(BtlActor_CheckExistStatusEffectRequestList, RequestType) == 0x000000, "Member 'BtlActor_CheckExistStatusEffectRequestList::RequestType' has a wrong offset!");
static_assert(offsetof(BtlActor_CheckExistStatusEffectRequestList, ReturnValue) == 0x000001, "Member 'BtlActor_CheckExistStatusEffectRequestList::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckGeneralAttackAnnihilation
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckGeneralAttackAnnihilation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckGeneralAttackAnnihilation) == 0x000001, "Wrong alignment on BtlActor_CheckGeneralAttackAnnihilation");
static_assert(sizeof(BtlActor_CheckGeneralAttackAnnihilation) == 0x000001, "Wrong size on BtlActor_CheckGeneralAttackAnnihilation");
static_assert(offsetof(BtlActor_CheckGeneralAttackAnnihilation, ReturnValue) == 0x000000, "Member 'BtlActor_CheckGeneralAttackAnnihilation::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckGuest
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckGuest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckGuest) == 0x000001, "Wrong alignment on BtlActor_CheckGuest");
static_assert(sizeof(BtlActor_CheckGuest) == 0x000001, "Wrong size on BtlActor_CheckGuest");
static_assert(offsetof(BtlActor_CheckGuest, ReturnValue) == 0x000000, "Member 'BtlActor_CheckGuest::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckHiddingWeaponMode
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckHiddingWeaponMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckHiddingWeaponMode) == 0x000001, "Wrong alignment on BtlActor_CheckHiddingWeaponMode");
static_assert(sizeof(BtlActor_CheckHiddingWeaponMode) == 0x000001, "Wrong size on BtlActor_CheckHiddingWeaponMode");
static_assert(offsetof(BtlActor_CheckHiddingWeaponMode, ReturnValue) == 0x000000, "Member 'BtlActor_CheckHiddingWeaponMode::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckHidingPersonaForSkillScene
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckHidingPersonaForSkillScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckHidingPersonaForSkillScene) == 0x000001, "Wrong alignment on BtlActor_CheckHidingPersonaForSkillScene");
static_assert(sizeof(BtlActor_CheckHidingPersonaForSkillScene) == 0x000001, "Wrong size on BtlActor_CheckHidingPersonaForSkillScene");
static_assert(offsetof(BtlActor_CheckHidingPersonaForSkillScene, ReturnValue) == 0x000000, "Member 'BtlActor_CheckHidingPersonaForSkillScene::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckIdle
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckIdle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckIdle) == 0x000001, "Wrong alignment on BtlActor_CheckIdle");
static_assert(sizeof(BtlActor_CheckIdle) == 0x000001, "Wrong size on BtlActor_CheckIdle");
static_assert(offsetof(BtlActor_CheckIdle, ReturnValue) == 0x000000, "Member 'BtlActor_CheckIdle::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckInAlloutSequence
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckInAlloutSequence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckInAlloutSequence) == 0x000001, "Wrong alignment on BtlActor_CheckInAlloutSequence");
static_assert(sizeof(BtlActor_CheckInAlloutSequence) == 0x000001, "Wrong size on BtlActor_CheckInAlloutSequence");
static_assert(offsetof(BtlActor_CheckInAlloutSequence, ReturnValue) == 0x000000, "Member 'BtlActor_CheckInAlloutSequence::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckInOverheatProc
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckInOverheatProc final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckInOverheatProc) == 0x000001, "Wrong alignment on BtlActor_CheckInOverheatProc");
static_assert(sizeof(BtlActor_CheckInOverheatProc) == 0x000001, "Wrong size on BtlActor_CheckInOverheatProc");
static_assert(offsetof(BtlActor_CheckInOverheatProc, ReturnValue) == 0x000000, "Member 'BtlActor_CheckInOverheatProc::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckKeepDeadAnimation
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckKeepDeadAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckKeepDeadAnimation) == 0x000001, "Wrong alignment on BtlActor_CheckKeepDeadAnimation");
static_assert(sizeof(BtlActor_CheckKeepDeadAnimation) == 0x000001, "Wrong size on BtlActor_CheckKeepDeadAnimation");
static_assert(offsetof(BtlActor_CheckKeepDeadAnimation, ReturnValue) == 0x000000, "Member 'BtlActor_CheckKeepDeadAnimation::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckLookatEnable
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckLookatEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckLookatEnable) == 0x000001, "Wrong alignment on BtlActor_CheckLookatEnable");
static_assert(sizeof(BtlActor_CheckLookatEnable) == 0x000001, "Wrong size on BtlActor_CheckLookatEnable");
static_assert(offsetof(BtlActor_CheckLookatEnable, ReturnValue) == 0x000000, "Member 'BtlActor_CheckLookatEnable::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckNeedOverheatScene
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckNeedOverheatScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckNeedOverheatScene) == 0x000001, "Wrong alignment on BtlActor_CheckNeedOverheatScene");
static_assert(sizeof(BtlActor_CheckNeedOverheatScene) == 0x000001, "Wrong size on BtlActor_CheckNeedOverheatScene");
static_assert(offsetof(BtlActor_CheckNeedOverheatScene, ReturnValue) == 0x000000, "Member 'BtlActor_CheckNeedOverheatScene::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckNeedToCallFirstSummonScene
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckNeedToCallFirstSummonScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckNeedToCallFirstSummonScene) == 0x000001, "Wrong alignment on BtlActor_CheckNeedToCallFirstSummonScene");
static_assert(sizeof(BtlActor_CheckNeedToCallFirstSummonScene) == 0x000001, "Wrong size on BtlActor_CheckNeedToCallFirstSummonScene");
static_assert(offsetof(BtlActor_CheckNeedToCallFirstSummonScene, ReturnValue) == 0x000000, "Member 'BtlActor_CheckNeedToCallFirstSummonScene::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckNeedToPlayPreSkillPorc
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckNeedToPlayPreSkillPorc final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckNeedToPlayPreSkillPorc) == 0x000001, "Wrong alignment on BtlActor_CheckNeedToPlayPreSkillPorc");
static_assert(sizeof(BtlActor_CheckNeedToPlayPreSkillPorc) == 0x000001, "Wrong size on BtlActor_CheckNeedToPlayPreSkillPorc");
static_assert(offsetof(BtlActor_CheckNeedToPlayPreSkillPorc, ReturnValue) == 0x000000, "Member 'BtlActor_CheckNeedToPlayPreSkillPorc::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckNotSummonPersonaSkill
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckNotSummonPersonaSkill final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckNotSummonPersonaSkill) == 0x000001, "Wrong alignment on BtlActor_CheckNotSummonPersonaSkill");
static_assert(sizeof(BtlActor_CheckNotSummonPersonaSkill) == 0x000001, "Wrong size on BtlActor_CheckNotSummonPersonaSkill");
static_assert(offsetof(BtlActor_CheckNotSummonPersonaSkill, ReturnValue) == 0x000000, "Member 'BtlActor_CheckNotSummonPersonaSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckPersonaAlreadyChanged
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckPersonaAlreadyChanged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckPersonaAlreadyChanged) == 0x000001, "Wrong alignment on BtlActor_CheckPersonaAlreadyChanged");
static_assert(sizeof(BtlActor_CheckPersonaAlreadyChanged) == 0x000001, "Wrong size on BtlActor_CheckPersonaAlreadyChanged");
static_assert(offsetof(BtlActor_CheckPersonaAlreadyChanged, ReturnValue) == 0x000000, "Member 'BtlActor_CheckPersonaAlreadyChanged::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckPersonaStartWithoutEmergePerformance
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckPersonaStartWithoutEmergePerformance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckPersonaStartWithoutEmergePerformance) == 0x000001, "Wrong alignment on BtlActor_CheckPersonaStartWithoutEmergePerformance");
static_assert(sizeof(BtlActor_CheckPersonaStartWithoutEmergePerformance) == 0x000001, "Wrong size on BtlActor_CheckPersonaStartWithoutEmergePerformance");
static_assert(offsetof(BtlActor_CheckPersonaStartWithoutEmergePerformance, ReturnValue) == 0x000000, "Member 'BtlActor_CheckPersonaStartWithoutEmergePerformance::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckPlayableShortSkillSceneAfterCutin
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckPlayableShortSkillSceneAfterCutin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckPlayableShortSkillSceneAfterCutin) == 0x000001, "Wrong alignment on BtlActor_CheckPlayableShortSkillSceneAfterCutin");
static_assert(sizeof(BtlActor_CheckPlayableShortSkillSceneAfterCutin) == 0x000001, "Wrong size on BtlActor_CheckPlayableShortSkillSceneAfterCutin");
static_assert(offsetof(BtlActor_CheckPlayableShortSkillSceneAfterCutin, ReturnValue) == 0x000000, "Member 'BtlActor_CheckPlayableShortSkillSceneAfterCutin::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckPlayableWaitAnimation
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckPlayableWaitAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckPlayableWaitAnimation) == 0x000001, "Wrong alignment on BtlActor_CheckPlayableWaitAnimation");
static_assert(sizeof(BtlActor_CheckPlayableWaitAnimation) == 0x000001, "Wrong size on BtlActor_CheckPlayableWaitAnimation");
static_assert(offsetof(BtlActor_CheckPlayableWaitAnimation, ReturnValue) == 0x000000, "Member 'BtlActor_CheckPlayableWaitAnimation::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckPlayedStandbyCamera
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckPlayedStandbyCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckPlayedStandbyCamera) == 0x000001, "Wrong alignment on BtlActor_CheckPlayedStandbyCamera");
static_assert(sizeof(BtlActor_CheckPlayedStandbyCamera) == 0x000001, "Wrong size on BtlActor_CheckPlayedStandbyCamera");
static_assert(offsetof(BtlActor_CheckPlayedStandbyCamera, ReturnValue) == 0x000000, "Member 'BtlActor_CheckPlayedStandbyCamera::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckPriorConvExAnimSection
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckPriorConvExAnimSection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckPriorConvExAnimSection) == 0x000001, "Wrong alignment on BtlActor_CheckPriorConvExAnimSection");
static_assert(sizeof(BtlActor_CheckPriorConvExAnimSection) == 0x000001, "Wrong size on BtlActor_CheckPriorConvExAnimSection");
static_assert(offsetof(BtlActor_CheckPriorConvExAnimSection, ReturnValue) == 0x000000, "Member 'BtlActor_CheckPriorConvExAnimSection::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckProgressToHoldup
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckProgressToHoldup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckProgressToHoldup) == 0x000001, "Wrong alignment on BtlActor_CheckProgressToHoldup");
static_assert(sizeof(BtlActor_CheckProgressToHoldup) == 0x000001, "Wrong size on BtlActor_CheckProgressToHoldup");
static_assert(offsetof(BtlActor_CheckProgressToHoldup, ReturnValue) == 0x000000, "Member 'BtlActor_CheckProgressToHoldup::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckRecoveryFromDown
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckRecoveryFromDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckRecoveryFromDown) == 0x000001, "Wrong alignment on BtlActor_CheckRecoveryFromDown");
static_assert(sizeof(BtlActor_CheckRecoveryFromDown) == 0x000001, "Wrong size on BtlActor_CheckRecoveryFromDown");
static_assert(offsetof(BtlActor_CheckRecoveryFromDown, ReturnValue) == 0x000000, "Member 'BtlActor_CheckRecoveryFromDown::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckShakingWhenDownDamage
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckShakingWhenDownDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckShakingWhenDownDamage) == 0x000001, "Wrong alignment on BtlActor_CheckShakingWhenDownDamage");
static_assert(sizeof(BtlActor_CheckShakingWhenDownDamage) == 0x000001, "Wrong size on BtlActor_CheckShakingWhenDownDamage");
static_assert(offsetof(BtlActor_CheckShakingWhenDownDamage, ReturnValue) == 0x000000, "Member 'BtlActor_CheckShakingWhenDownDamage::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckSkillCameraCharacterHideDisable
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckSkillCameraCharacterHideDisable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckSkillCameraCharacterHideDisable) == 0x000001, "Wrong alignment on BtlActor_CheckSkillCameraCharacterHideDisable");
static_assert(sizeof(BtlActor_CheckSkillCameraCharacterHideDisable) == 0x000001, "Wrong size on BtlActor_CheckSkillCameraCharacterHideDisable");
static_assert(offsetof(BtlActor_CheckSkillCameraCharacterHideDisable, ReturnValue) == 0x000000, "Member 'BtlActor_CheckSkillCameraCharacterHideDisable::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckSkipAction
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckSkipAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckSkipAction) == 0x000001, "Wrong alignment on BtlActor_CheckSkipAction");
static_assert(sizeof(BtlActor_CheckSkipAction) == 0x000001, "Wrong size on BtlActor_CheckSkipAction");
static_assert(offsetof(BtlActor_CheckSkipAction, ReturnValue) == 0x000000, "Member 'BtlActor_CheckSkipAction::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckSkipSkillChantAnim
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckSkipSkillChantAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckSkipSkillChantAnim) == 0x000001, "Wrong alignment on BtlActor_CheckSkipSkillChantAnim");
static_assert(sizeof(BtlActor_CheckSkipSkillChantAnim) == 0x000001, "Wrong size on BtlActor_CheckSkipSkillChantAnim");
static_assert(offsetof(BtlActor_CheckSkipSkillChantAnim, ReturnValue) == 0x000000, "Member 'BtlActor_CheckSkipSkillChantAnim::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckSkipSkillEndAnim
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckSkipSkillEndAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckSkipSkillEndAnim) == 0x000001, "Wrong alignment on BtlActor_CheckSkipSkillEndAnim");
static_assert(sizeof(BtlActor_CheckSkipSkillEndAnim) == 0x000001, "Wrong size on BtlActor_CheckSkipSkillEndAnim");
static_assert(offsetof(BtlActor_CheckSkipSkillEndAnim, ReturnValue) == 0x000000, "Member 'BtlActor_CheckSkipSkillEndAnim::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckSkipTurn
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckSkipTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckSkipTurn) == 0x000001, "Wrong alignment on BtlActor_CheckSkipTurn");
static_assert(sizeof(BtlActor_CheckSkipTurn) == 0x000001, "Wrong size on BtlActor_CheckSkipTurn");
static_assert(offsetof(BtlActor_CheckSkipTurn, ReturnValue) == 0x000000, "Member 'BtlActor_CheckSkipTurn::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckTurnFromGuardCancel
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckTurnFromGuardCancel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckTurnFromGuardCancel) == 0x000001, "Wrong alignment on BtlActor_CheckTurnFromGuardCancel");
static_assert(sizeof(BtlActor_CheckTurnFromGuardCancel) == 0x000001, "Wrong size on BtlActor_CheckTurnFromGuardCancel");
static_assert(offsetof(BtlActor_CheckTurnFromGuardCancel, ReturnValue) == 0x000000, "Member 'BtlActor_CheckTurnFromGuardCancel::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckUseSkillShotSeqCam
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckUseSkillShotSeqCam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckUseSkillShotSeqCam) == 0x000001, "Wrong alignment on BtlActor_CheckUseSkillShotSeqCam");
static_assert(sizeof(BtlActor_CheckUseSkillShotSeqCam) == 0x000001, "Wrong size on BtlActor_CheckUseSkillShotSeqCam");
static_assert(offsetof(BtlActor_CheckUseSkillShotSeqCam, ReturnValue) == 0x000000, "Member 'BtlActor_CheckUseSkillShotSeqCam::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.CheckUsingTakeoverOtherCamera
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_CheckUsingTakeoverOtherCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_CheckUsingTakeoverOtherCamera) == 0x000001, "Wrong alignment on BtlActor_CheckUsingTakeoverOtherCamera");
static_assert(sizeof(BtlActor_CheckUsingTakeoverOtherCamera) == 0x000001, "Wrong size on BtlActor_CheckUsingTakeoverOtherCamera");
static_assert(offsetof(BtlActor_CheckUsingTakeoverOtherCamera, ReturnValue) == 0x000000, "Member 'BtlActor_CheckUsingTakeoverOtherCamera::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.ConvExAnimSectionName
// 0x0018 (0x0018 - 0x0000)
struct BtlActor_ConvExAnimSectionName final
{
public:
	bool                                          Found;                                             // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlAnimationType                             Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceShowWeapon;                                   // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlBossAnimRequestParam               Params_0;                                          // 0x0004(0x000C)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_ConvExAnimSectionName) == 0x000004, "Wrong alignment on BtlActor_ConvExAnimSectionName");
static_assert(sizeof(BtlActor_ConvExAnimSectionName) == 0x000018, "Wrong size on BtlActor_ConvExAnimSectionName");
static_assert(offsetof(BtlActor_ConvExAnimSectionName, Found) == 0x000000, "Member 'BtlActor_ConvExAnimSectionName::Found' has a wrong offset!");
static_assert(offsetof(BtlActor_ConvExAnimSectionName, Type) == 0x000001, "Member 'BtlActor_ConvExAnimSectionName::Type' has a wrong offset!");
static_assert(offsetof(BtlActor_ConvExAnimSectionName, ForceShowWeapon) == 0x000002, "Member 'BtlActor_ConvExAnimSectionName::ForceShowWeapon' has a wrong offset!");
static_assert(offsetof(BtlActor_ConvExAnimSectionName, Params_0) == 0x000004, "Member 'BtlActor_ConvExAnimSectionName::Params_0' has a wrong offset!");
static_assert(offsetof(BtlActor_ConvExAnimSectionName, ReturnValue) == 0x000010, "Member 'BtlActor_ConvExAnimSectionName::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetActionID
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_GetActionID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetActionID) == 0x000004, "Wrong alignment on BtlActor_GetActionID");
static_assert(sizeof(BtlActor_GetActionID) == 0x000004, "Wrong size on BtlActor_GetActionID");
static_assert(offsetof(BtlActor_GetActionID, ReturnValue) == 0x000000, "Member 'BtlActor_GetActionID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetActionType
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_GetActionType final
{
public:
	EBtlCommandType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetActionType) == 0x000001, "Wrong alignment on BtlActor_GetActionType");
static_assert(sizeof(BtlActor_GetActionType) == 0x000001, "Wrong size on BtlActor_GetActionType");
static_assert(offsetof(BtlActor_GetActionType, ReturnValue) == 0x000000, "Member 'BtlActor_GetActionType::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetAnimationBaseSpeedRatio
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_GetAnimationBaseSpeedRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetAnimationBaseSpeedRatio) == 0x000004, "Wrong alignment on BtlActor_GetAnimationBaseSpeedRatio");
static_assert(sizeof(BtlActor_GetAnimationBaseSpeedRatio) == 0x000004, "Wrong size on BtlActor_GetAnimationBaseSpeedRatio");
static_assert(offsetof(BtlActor_GetAnimationBaseSpeedRatio, ReturnValue) == 0x000000, "Member 'BtlActor_GetAnimationBaseSpeedRatio::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetAttackAttr
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_GetAttackAttr final
{
public:
	EBtlDataAttr                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetAttackAttr) == 0x000001, "Wrong alignment on BtlActor_GetAttackAttr");
static_assert(sizeof(BtlActor_GetAttackAttr) == 0x000001, "Wrong size on BtlActor_GetAttackAttr");
static_assert(offsetof(BtlActor_GetAttackAttr, ReturnValue) == 0x000000, "Member 'BtlActor_GetAttackAttr::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetAttackPerformanceType
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_GetAttackPerformanceType final
{
public:
	EBtlAttackPerformanceType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetAttackPerformanceType) == 0x000001, "Wrong alignment on BtlActor_GetAttackPerformanceType");
static_assert(sizeof(BtlActor_GetAttackPerformanceType) == 0x000001, "Wrong size on BtlActor_GetAttackPerformanceType");
static_assert(offsetof(BtlActor_GetAttackPerformanceType, ReturnValue) == 0x000000, "Member 'BtlActor_GetAttackPerformanceType::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetAttackType
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_GetAttackType final
{
public:
	EBtlAttackType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetAttackType) == 0x000001, "Wrong alignment on BtlActor_GetAttackType");
static_assert(sizeof(BtlActor_GetAttackType) == 0x000001, "Wrong size on BtlActor_GetAttackType");
static_assert(offsetof(BtlActor_GetAttackType, ReturnValue) == 0x000000, "Member 'BtlActor_GetAttackType::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetAttackWeaponAnimType
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_GetAttackWeaponAnimType final
{
public:
	EBtlAttackWeaponAnimType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetAttackWeaponAnimType) == 0x000001, "Wrong alignment on BtlActor_GetAttackWeaponAnimType");
static_assert(sizeof(BtlActor_GetAttackWeaponAnimType) == 0x000001, "Wrong size on BtlActor_GetAttackWeaponAnimType");
static_assert(offsetof(BtlActor_GetAttackWeaponAnimType, ReturnValue) == 0x000000, "Member 'BtlActor_GetAttackWeaponAnimType::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetBadStatusActionWaitTime
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_GetBadStatusActionWaitTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetBadStatusActionWaitTime) == 0x000004, "Wrong alignment on BtlActor_GetBadStatusActionWaitTime");
static_assert(sizeof(BtlActor_GetBadStatusActionWaitTime) == 0x000004, "Wrong size on BtlActor_GetBadStatusActionWaitTime");
static_assert(offsetof(BtlActor_GetBadStatusActionWaitTime, ReturnValue) == 0x000000, "Member 'BtlActor_GetBadStatusActionWaitTime::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetBadStatusEffectName
// 0x000C (0x000C - 0x0000)
struct BtlActor_GetBadStatusEffectName final
{
public:
	EBtlBadStatusIcon                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetBadStatusEffectName) == 0x000004, "Wrong alignment on BtlActor_GetBadStatusEffectName");
static_assert(sizeof(BtlActor_GetBadStatusEffectName) == 0x00000C, "Wrong size on BtlActor_GetBadStatusEffectName");
static_assert(offsetof(BtlActor_GetBadStatusEffectName, Type) == 0x000000, "Member 'BtlActor_GetBadStatusEffectName::Type' has a wrong offset!");
static_assert(offsetof(BtlActor_GetBadStatusEffectName, ReturnValue) == 0x000004, "Member 'BtlActor_GetBadStatusEffectName::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetCharacterID
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_GetCharacterID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetCharacterID) == 0x000004, "Wrong alignment on BtlActor_GetCharacterID");
static_assert(sizeof(BtlActor_GetCharacterID) == 0x000004, "Wrong size on BtlActor_GetCharacterID");
static_assert(offsetof(BtlActor_GetCharacterID, ReturnValue) == 0x000000, "Member 'BtlActor_GetCharacterID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetCurrentStatusEffectType
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_GetCurrentStatusEffectType final
{
public:
	EBtlBadStatusIcon                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetCurrentStatusEffectType) == 0x000001, "Wrong alignment on BtlActor_GetCurrentStatusEffectType");
static_assert(sizeof(BtlActor_GetCurrentStatusEffectType) == 0x000001, "Wrong size on BtlActor_GetCurrentStatusEffectType");
static_assert(offsetof(BtlActor_GetCurrentStatusEffectType, ReturnValue) == 0x000000, "Member 'BtlActor_GetCurrentStatusEffectType::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetExpireSupportWaitTime
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_GetExpireSupportWaitTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetExpireSupportWaitTime) == 0x000004, "Wrong alignment on BtlActor_GetExpireSupportWaitTime");
static_assert(sizeof(BtlActor_GetExpireSupportWaitTime) == 0x000004, "Wrong size on BtlActor_GetExpireSupportWaitTime");
static_assert(offsetof(BtlActor_GetExpireSupportWaitTime, ReturnValue) == 0x000000, "Member 'BtlActor_GetExpireSupportWaitTime::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetGeneralAttackResult
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_GetGeneralAttackResult final
{
public:
	EBtlAlloutAttackResult                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetGeneralAttackResult) == 0x000001, "Wrong alignment on BtlActor_GetGeneralAttackResult");
static_assert(sizeof(BtlActor_GetGeneralAttackResult) == 0x000001, "Wrong size on BtlActor_GetGeneralAttackResult");
static_assert(offsetof(BtlActor_GetGeneralAttackResult, ReturnValue) == 0x000000, "Member 'BtlActor_GetGeneralAttackResult::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetHomePosition
// 0x000C (0x000C - 0x0000)
struct BtlActor_GetHomePosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetHomePosition) == 0x000004, "Wrong alignment on BtlActor_GetHomePosition");
static_assert(sizeof(BtlActor_GetHomePosition) == 0x00000C, "Wrong size on BtlActor_GetHomePosition");
static_assert(offsetof(BtlActor_GetHomePosition, ReturnValue) == 0x000000, "Member 'BtlActor_GetHomePosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetId
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_GetId final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetId) == 0x000004, "Wrong alignment on BtlActor_GetId");
static_assert(sizeof(BtlActor_GetId) == 0x000004, "Wrong size on BtlActor_GetId");
static_assert(offsetof(BtlActor_GetId, ReturnValue) == 0x000000, "Member 'BtlActor_GetId::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetItemID
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_GetItemID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetItemID) == 0x000004, "Wrong alignment on BtlActor_GetItemID");
static_assert(sizeof(BtlActor_GetItemID) == 0x000004, "Wrong size on BtlActor_GetItemID");
static_assert(offsetof(BtlActor_GetItemID, ReturnValue) == 0x000000, "Member 'BtlActor_GetItemID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetOriginalID
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_GetOriginalID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetOriginalID) == 0x000004, "Wrong alignment on BtlActor_GetOriginalID");
static_assert(sizeof(BtlActor_GetOriginalID) == 0x000004, "Wrong size on BtlActor_GetOriginalID");
static_assert(offsetof(BtlActor_GetOriginalID, ReturnValue) == 0x000000, "Member 'BtlActor_GetOriginalID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetPersonaTransform
// 0x0040 (0x0040 - 0x0000)
struct BtlActor_GetPersonaTransform final
{
public:
	bool                                          ForCutin;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetPersonaTransform) == 0x000010, "Wrong alignment on BtlActor_GetPersonaTransform");
static_assert(sizeof(BtlActor_GetPersonaTransform) == 0x000040, "Wrong size on BtlActor_GetPersonaTransform");
static_assert(offsetof(BtlActor_GetPersonaTransform, ForCutin) == 0x000000, "Member 'BtlActor_GetPersonaTransform::ForCutin' has a wrong offset!");
static_assert(offsetof(BtlActor_GetPersonaTransform, ReturnValue) == 0x000010, "Member 'BtlActor_GetPersonaTransform::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetPersonaTransformFromSkillCondition
// 0x0040 (0x0040 - 0x0000)
struct BtlActor_GetPersonaTransformFromSkillCondition final
{
public:
	const class ABtlActor*                        PersonaOwner;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetPersonaTransformFromSkillCondition) == 0x000010, "Wrong alignment on BtlActor_GetPersonaTransformFromSkillCondition");
static_assert(sizeof(BtlActor_GetPersonaTransformFromSkillCondition) == 0x000040, "Wrong size on BtlActor_GetPersonaTransformFromSkillCondition");
static_assert(offsetof(BtlActor_GetPersonaTransformFromSkillCondition, PersonaOwner) == 0x000000, "Member 'BtlActor_GetPersonaTransformFromSkillCondition::PersonaOwner' has a wrong offset!");
static_assert(offsetof(BtlActor_GetPersonaTransformFromSkillCondition, ReturnValue) == 0x000010, "Member 'BtlActor_GetPersonaTransformFromSkillCondition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetRecoveryWaitTime
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_GetRecoveryWaitTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetRecoveryWaitTime) == 0x000004, "Wrong alignment on BtlActor_GetRecoveryWaitTime");
static_assert(sizeof(BtlActor_GetRecoveryWaitTime) == 0x000004, "Wrong size on BtlActor_GetRecoveryWaitTime");
static_assert(offsetof(BtlActor_GetRecoveryWaitTime, ReturnValue) == 0x000000, "Member 'BtlActor_GetRecoveryWaitTime::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetSizeCategory
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_GetSizeCategory final
{
public:
	EBtlSizeCategoryType                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetSizeCategory) == 0x000001, "Wrong alignment on BtlActor_GetSizeCategory");
static_assert(sizeof(BtlActor_GetSizeCategory) == 0x000001, "Wrong size on BtlActor_GetSizeCategory");
static_assert(offsetof(BtlActor_GetSizeCategory, ReturnValue) == 0x000000, "Member 'BtlActor_GetSizeCategory::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetSkillChantAnim
// 0x000C (0x000C - 0x0000)
struct BtlActor_GetSkillChantAnim final
{
public:
	struct FBtlBossAnimRequestParam               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetSkillChantAnim) == 0x000004, "Wrong alignment on BtlActor_GetSkillChantAnim");
static_assert(sizeof(BtlActor_GetSkillChantAnim) == 0x00000C, "Wrong size on BtlActor_GetSkillChantAnim");
static_assert(offsetof(BtlActor_GetSkillChantAnim, ReturnValue) == 0x000000, "Member 'BtlActor_GetSkillChantAnim::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetSkillEndAnim
// 0x000C (0x000C - 0x0000)
struct BtlActor_GetSkillEndAnim final
{
public:
	struct FBtlBossAnimRequestParam               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetSkillEndAnim) == 0x000004, "Wrong alignment on BtlActor_GetSkillEndAnim");
static_assert(sizeof(BtlActor_GetSkillEndAnim) == 0x00000C, "Wrong size on BtlActor_GetSkillEndAnim");
static_assert(offsetof(BtlActor_GetSkillEndAnim, ReturnValue) == 0x000000, "Member 'BtlActor_GetSkillEndAnim::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetSkillID
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_GetSkillID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetSkillID) == 0x000004, "Wrong alignment on BtlActor_GetSkillID");
static_assert(sizeof(BtlActor_GetSkillID) == 0x000004, "Wrong size on BtlActor_GetSkillID");
static_assert(offsetof(BtlActor_GetSkillID, ReturnValue) == 0x000000, "Member 'BtlActor_GetSkillID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetSkillShotAnim
// 0x000C (0x000C - 0x0000)
struct BtlActor_GetSkillShotAnim final
{
public:
	struct FBtlBossAnimRequestParam               ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetSkillShotAnim) == 0x000004, "Wrong alignment on BtlActor_GetSkillShotAnim");
static_assert(sizeof(BtlActor_GetSkillShotAnim) == 0x00000C, "Wrong size on BtlActor_GetSkillShotAnim");
static_assert(offsetof(BtlActor_GetSkillShotAnim, ReturnValue) == 0x000000, "Member 'BtlActor_GetSkillShotAnim::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetSummonEnemyID
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_GetSummonEnemyID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetSummonEnemyID) == 0x000004, "Wrong alignment on BtlActor_GetSummonEnemyID");
static_assert(sizeof(BtlActor_GetSummonEnemyID) == 0x000004, "Wrong size on BtlActor_GetSummonEnemyID");
static_assert(offsetof(BtlActor_GetSummonEnemyID, ReturnValue) == 0x000000, "Member 'BtlActor_GetSummonEnemyID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.GetUID
// 0x0004 (0x0004 - 0x0000)
struct BtlActor_GetUID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_GetUID) == 0x000004, "Wrong alignment on BtlActor_GetUID");
static_assert(sizeof(BtlActor_GetUID) == 0x000004, "Wrong size on BtlActor_GetUID");
static_assert(offsetof(BtlActor_GetUID, ReturnValue) == 0x000000, "Member 'BtlActor_GetUID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsAstreaColosseoEnemy
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsAstreaColosseoEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsAstreaColosseoEnemy) == 0x000001, "Wrong alignment on BtlActor_IsAstreaColosseoEnemy");
static_assert(sizeof(BtlActor_IsAstreaColosseoEnemy) == 0x000001, "Wrong size on BtlActor_IsAstreaColosseoEnemy");
static_assert(offsetof(BtlActor_IsAstreaColosseoEnemy, ReturnValue) == 0x000000, "Member 'BtlActor_IsAstreaColosseoEnemy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsAstreaCutinEnemy
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsAstreaCutinEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsAstreaCutinEnemy) == 0x000001, "Wrong alignment on BtlActor_IsAstreaCutinEnemy");
static_assert(sizeof(BtlActor_IsAstreaCutinEnemy) == 0x000001, "Wrong size on BtlActor_IsAstreaCutinEnemy");
static_assert(offsetof(BtlActor_IsAstreaCutinEnemy, ReturnValue) == 0x000000, "Member 'BtlActor_IsAstreaCutinEnemy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsAttackControlledByAI
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsAttackControlledByAI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsAttackControlledByAI) == 0x000001, "Wrong alignment on BtlActor_IsAttackControlledByAI");
static_assert(sizeof(BtlActor_IsAttackControlledByAI) == 0x000001, "Wrong size on BtlActor_IsAttackControlledByAI");
static_assert(offsetof(BtlActor_IsAttackControlledByAI, ReturnValue) == 0x000000, "Member 'BtlActor_IsAttackControlledByAI::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsAttackFailed
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsAttackFailed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsAttackFailed) == 0x000001, "Wrong alignment on BtlActor_IsAttackFailed");
static_assert(sizeof(BtlActor_IsAttackFailed) == 0x000001, "Wrong size on BtlActor_IsAttackFailed");
static_assert(offsetof(BtlActor_IsAttackFailed, ReturnValue) == 0x000000, "Member 'BtlActor_IsAttackFailed::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsAttackHit
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsAttackHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsAttackHit) == 0x000001, "Wrong alignment on BtlActor_IsAttackHit");
static_assert(sizeof(BtlActor_IsAttackHit) == 0x000001, "Wrong size on BtlActor_IsAttackHit");
static_assert(offsetof(BtlActor_IsAttackHit, ReturnValue) == 0x000000, "Member 'BtlActor_IsAttackHit::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsAttackMiss
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsAttackMiss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsAttackMiss) == 0x000001, "Wrong alignment on BtlActor_IsAttackMiss");
static_assert(sizeof(BtlActor_IsAttackMiss) == 0x000001, "Wrong size on BtlActor_IsAttackMiss");
static_assert(offsetof(BtlActor_IsAttackMiss, ReturnValue) == 0x000000, "Member 'BtlActor_IsAttackMiss::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsBoss
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsBoss final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsBoss) == 0x000001, "Wrong alignment on BtlActor_IsBoss");
static_assert(sizeof(BtlActor_IsBoss) == 0x000001, "Wrong size on BtlActor_IsBoss");
static_assert(offsetof(BtlActor_IsBoss, ReturnValue) == 0x000000, "Member 'BtlActor_IsBoss::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsDead
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsDead) == 0x000001, "Wrong alignment on BtlActor_IsDead");
static_assert(sizeof(BtlActor_IsDead) == 0x000001, "Wrong size on BtlActor_IsDead");
static_assert(offsetof(BtlActor_IsDead, ReturnValue) == 0x000000, "Member 'BtlActor_IsDead::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsDormancy
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsDormancy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsDormancy) == 0x000001, "Wrong alignment on BtlActor_IsDormancy");
static_assert(sizeof(BtlActor_IsDormancy) == 0x000001, "Wrong size on BtlActor_IsDormancy");
static_assert(offsetof(BtlActor_IsDormancy, ReturnValue) == 0x000000, "Member 'BtlActor_IsDormancy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsDown
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsDown) == 0x000001, "Wrong alignment on BtlActor_IsDown");
static_assert(sizeof(BtlActor_IsDown) == 0x000001, "Wrong size on BtlActor_IsDown");
static_assert(offsetof(BtlActor_IsDown, ReturnValue) == 0x000000, "Member 'BtlActor_IsDown::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsDying
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsDying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsDying) == 0x000001, "Wrong alignment on BtlActor_IsDying");
static_assert(sizeof(BtlActor_IsDying) == 0x000001, "Wrong size on BtlActor_IsDying");
static_assert(offsetof(BtlActor_IsDying, ReturnValue) == 0x000000, "Member 'BtlActor_IsDying::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsDyingBadStatus
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsDyingBadStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsDyingBadStatus) == 0x000001, "Wrong alignment on BtlActor_IsDyingBadStatus");
static_assert(sizeof(BtlActor_IsDyingBadStatus) == 0x000001, "Wrong size on BtlActor_IsDyingBadStatus");
static_assert(offsetof(BtlActor_IsDyingBadStatus, ReturnValue) == 0x000000, "Member 'BtlActor_IsDyingBadStatus::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsEnemy
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsEnemy) == 0x000001, "Wrong alignment on BtlActor_IsEnemy");
static_assert(sizeof(BtlActor_IsEnemy) == 0x000001, "Wrong size on BtlActor_IsEnemy");
static_assert(offsetof(BtlActor_IsEnemy, ReturnValue) == 0x000000, "Member 'BtlActor_IsEnemy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsEnemyInParty
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsEnemyInParty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsEnemyInParty) == 0x000001, "Wrong alignment on BtlActor_IsEnemyInParty");
static_assert(sizeof(BtlActor_IsEnemyInParty) == 0x000001, "Wrong size on BtlActor_IsEnemyInParty");
static_assert(offsetof(BtlActor_IsEnemyInParty, ReturnValue) == 0x000000, "Member 'BtlActor_IsEnemyInParty::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsGuard
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsGuard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsGuard) == 0x000001, "Wrong alignment on BtlActor_IsGuard");
static_assert(sizeof(BtlActor_IsGuard) == 0x000001, "Wrong size on BtlActor_IsGuard");
static_assert(offsetof(BtlActor_IsGuard, ReturnValue) == 0x000000, "Member 'BtlActor_IsGuard::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsInActionTurn
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsInActionTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsInActionTurn) == 0x000001, "Wrong alignment on BtlActor_IsInActionTurn");
static_assert(sizeof(BtlActor_IsInActionTurn) == 0x000001, "Wrong size on BtlActor_IsInActionTurn");
static_assert(offsetof(BtlActor_IsInActionTurn, ReturnValue) == 0x000000, "Member 'BtlActor_IsInActionTurn::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsInOneMore
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsInOneMore final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsInOneMore) == 0x000001, "Wrong alignment on BtlActor_IsInOneMore");
static_assert(sizeof(BtlActor_IsInOneMore) == 0x000001, "Wrong size on BtlActor_IsInOneMore");
static_assert(offsetof(BtlActor_IsInOneMore, ReturnValue) == 0x000000, "Member 'BtlActor_IsInOneMore::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsInTakeOver
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsInTakeOver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsInTakeOver) == 0x000001, "Wrong alignment on BtlActor_IsInTakeOver");
static_assert(sizeof(BtlActor_IsInTakeOver) == 0x000001, "Wrong size on BtlActor_IsInTakeOver");
static_assert(offsetof(BtlActor_IsInTakeOver, ReturnValue) == 0x000000, "Member 'BtlActor_IsInTakeOver::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsKoromaru
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsKoromaru final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsKoromaru) == 0x000001, "Wrong alignment on BtlActor_IsKoromaru");
static_assert(sizeof(BtlActor_IsKoromaru) == 0x000001, "Wrong size on BtlActor_IsKoromaru");
static_assert(offsetof(BtlActor_IsKoromaru, ReturnValue) == 0x000000, "Member 'BtlActor_IsKoromaru::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsManualOperation
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsManualOperation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsManualOperation) == 0x000001, "Wrong alignment on BtlActor_IsManualOperation");
static_assert(sizeof(BtlActor_IsManualOperation) == 0x000001, "Wrong size on BtlActor_IsManualOperation");
static_assert(offsetof(BtlActor_IsManualOperation, ReturnValue) == 0x000000, "Member 'BtlActor_IsManualOperation::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsNewBattleOutfit
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsNewBattleOutfit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsNewBattleOutfit) == 0x000001, "Wrong alignment on BtlActor_IsNewBattleOutfit");
static_assert(sizeof(BtlActor_IsNewBattleOutfit) == 0x000001, "Wrong size on BtlActor_IsNewBattleOutfit");
static_assert(offsetof(BtlActor_IsNewBattleOutfit, ReturnValue) == 0x000000, "Member 'BtlActor_IsNewBattleOutfit::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsNewBattleOutfitForAlloutFinish
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsNewBattleOutfitForAlloutFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsNewBattleOutfitForAlloutFinish) == 0x000001, "Wrong alignment on BtlActor_IsNewBattleOutfitForAlloutFinish");
static_assert(sizeof(BtlActor_IsNewBattleOutfitForAlloutFinish) == 0x000001, "Wrong size on BtlActor_IsNewBattleOutfitForAlloutFinish");
static_assert(offsetof(BtlActor_IsNewBattleOutfitForAlloutFinish, ReturnValue) == 0x000000, "Member 'BtlActor_IsNewBattleOutfitForAlloutFinish::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsOccurringSkillAbsorption
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsOccurringSkillAbsorption final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsOccurringSkillAbsorption) == 0x000001, "Wrong alignment on BtlActor_IsOccurringSkillAbsorption");
static_assert(sizeof(BtlActor_IsOccurringSkillAbsorption) == 0x000001, "Wrong size on BtlActor_IsOccurringSkillAbsorption");
static_assert(offsetof(BtlActor_IsOccurringSkillAbsorption, ReturnValue) == 0x000000, "Member 'BtlActor_IsOccurringSkillAbsorption::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsOccurringSkillBlock
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsOccurringSkillBlock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsOccurringSkillBlock) == 0x000001, "Wrong alignment on BtlActor_IsOccurringSkillBlock");
static_assert(sizeof(BtlActor_IsOccurringSkillBlock) == 0x000001, "Wrong size on BtlActor_IsOccurringSkillBlock");
static_assert(offsetof(BtlActor_IsOccurringSkillBlock, ReturnValue) == 0x000000, "Member 'BtlActor_IsOccurringSkillBlock::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsOccurringSkillReflection
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsOccurringSkillReflection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsOccurringSkillReflection) == 0x000001, "Wrong alignment on BtlActor_IsOccurringSkillReflection");
static_assert(sizeof(BtlActor_IsOccurringSkillReflection) == 0x000001, "Wrong size on BtlActor_IsOccurringSkillReflection");
static_assert(offsetof(BtlActor_IsOccurringSkillReflection, ReturnValue) == 0x000000, "Member 'BtlActor_IsOccurringSkillReflection::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsOrgia
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsOrgia final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsOrgia) == 0x000001, "Wrong alignment on BtlActor_IsOrgia");
static_assert(sizeof(BtlActor_IsOrgia) == 0x000001, "Wrong size on BtlActor_IsOrgia");
static_assert(offsetof(BtlActor_IsOrgia, ReturnValue) == 0x000000, "Member 'BtlActor_IsOrgia::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsPersona
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsPersona final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsPersona) == 0x000001, "Wrong alignment on BtlActor_IsPersona");
static_assert(sizeof(BtlActor_IsPersona) == 0x000001, "Wrong size on BtlActor_IsPersona");
static_assert(offsetof(BtlActor_IsPersona, ReturnValue) == 0x000000, "Member 'BtlActor_IsPersona::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsPersonaEvolved
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsPersonaEvolved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsPersonaEvolved) == 0x000001, "Wrong alignment on BtlActor_IsPersonaEvolved");
static_assert(sizeof(BtlActor_IsPersonaEvolved) == 0x000001, "Wrong size on BtlActor_IsPersonaEvolved");
static_assert(offsetof(BtlActor_IsPersonaEvolved, ReturnValue) == 0x000000, "Member 'BtlActor_IsPersonaEvolved::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsPlayableDyingAnim
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsPlayableDyingAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsPlayableDyingAnim) == 0x000001, "Wrong alignment on BtlActor_IsPlayableDyingAnim");
static_assert(sizeof(BtlActor_IsPlayableDyingAnim) == 0x000001, "Wrong size on BtlActor_IsPlayableDyingAnim");
static_assert(offsetof(BtlActor_IsPlayableDyingAnim, ReturnValue) == 0x000000, "Member 'BtlActor_IsPlayableDyingAnim::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsPossibleAITarget
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsPossibleAITarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsPossibleAITarget) == 0x000001, "Wrong alignment on BtlActor_IsPossibleAITarget");
static_assert(sizeof(BtlActor_IsPossibleAITarget) == 0x000001, "Wrong size on BtlActor_IsPossibleAITarget");
static_assert(offsetof(BtlActor_IsPossibleAITarget, ReturnValue) == 0x000000, "Member 'BtlActor_IsPossibleAITarget::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsPossibleAlloutMember
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsPossibleAlloutMember final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsPossibleAlloutMember) == 0x000001, "Wrong alignment on BtlActor_IsPossibleAlloutMember");
static_assert(sizeof(BtlActor_IsPossibleAlloutMember) == 0x000001, "Wrong size on BtlActor_IsPossibleAlloutMember");
static_assert(offsetof(BtlActor_IsPossibleAlloutMember, ReturnValue) == 0x000000, "Member 'BtlActor_IsPossibleAlloutMember::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsPossibleEventTarget
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsPossibleEventTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsPossibleEventTarget) == 0x000001, "Wrong alignment on BtlActor_IsPossibleEventTarget");
static_assert(sizeof(BtlActor_IsPossibleEventTarget) == 0x000001, "Wrong size on BtlActor_IsPossibleEventTarget");
static_assert(offsetof(BtlActor_IsPossibleEventTarget, ReturnValue) == 0x000000, "Member 'BtlActor_IsPossibleEventTarget::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsPossibleTakeoverTarget
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsPossibleTakeoverTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsPossibleTakeoverTarget) == 0x000001, "Wrong alignment on BtlActor_IsPossibleTakeoverTarget");
static_assert(sizeof(BtlActor_IsPossibleTakeoverTarget) == 0x000001, "Wrong size on BtlActor_IsPossibleTakeoverTarget");
static_assert(offsetof(BtlActor_IsPossibleTakeoverTarget, ReturnValue) == 0x000000, "Member 'BtlActor_IsPossibleTakeoverTarget::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsRushAttack
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsRushAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsRushAttack) == 0x000001, "Wrong alignment on BtlActor_IsRushAttack");
static_assert(sizeof(BtlActor_IsRushAttack) == 0x000001, "Wrong size on BtlActor_IsRushAttack");
static_assert(offsetof(BtlActor_IsRushAttack, ReturnValue) == 0x000000, "Member 'BtlActor_IsRushAttack::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsSkillEffective
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsSkillEffective final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsSkillEffective) == 0x000001, "Wrong alignment on BtlActor_IsSkillEffective");
static_assert(sizeof(BtlActor_IsSkillEffective) == 0x000001, "Wrong size on BtlActor_IsSkillEffective");
static_assert(offsetof(BtlActor_IsSkillEffective, ReturnValue) == 0x000000, "Member 'BtlActor_IsSkillEffective::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsSkillFukaTheurgia
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsSkillFukaTheurgia final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsSkillFukaTheurgia) == 0x000001, "Wrong alignment on BtlActor_IsSkillFukaTheurgia");
static_assert(sizeof(BtlActor_IsSkillFukaTheurgia) == 0x000001, "Wrong size on BtlActor_IsSkillFukaTheurgia");
static_assert(offsetof(BtlActor_IsSkillFukaTheurgia, ReturnValue) == 0x000000, "Member 'BtlActor_IsSkillFukaTheurgia::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsSkillHit
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsSkillHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsSkillHit) == 0x000001, "Wrong alignment on BtlActor_IsSkillHit");
static_assert(sizeof(BtlActor_IsSkillHit) == 0x000001, "Wrong size on BtlActor_IsSkillHit");
static_assert(offsetof(BtlActor_IsSkillHit, ReturnValue) == 0x000000, "Member 'BtlActor_IsSkillHit::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsSkillItemDumping
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsSkillItemDumping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsSkillItemDumping) == 0x000001, "Wrong alignment on BtlActor_IsSkillItemDumping");
static_assert(sizeof(BtlActor_IsSkillItemDumping) == 0x000001, "Wrong size on BtlActor_IsSkillItemDumping");
static_assert(offsetof(BtlActor_IsSkillItemDumping, ReturnValue) == 0x000000, "Member 'BtlActor_IsSkillItemDumping::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsSkillMixraid
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsSkillMixraid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsSkillMixraid) == 0x000001, "Wrong alignment on BtlActor_IsSkillMixraid");
static_assert(sizeof(BtlActor_IsSkillMixraid) == 0x000001, "Wrong size on BtlActor_IsSkillMixraid");
static_assert(offsetof(BtlActor_IsSkillMixraid, ReturnValue) == 0x000000, "Member 'BtlActor_IsSkillMixraid::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsSkillOrgia
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsSkillOrgia final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsSkillOrgia) == 0x000001, "Wrong alignment on BtlActor_IsSkillOrgia");
static_assert(sizeof(BtlActor_IsSkillOrgia) == 0x000001, "Wrong size on BtlActor_IsSkillOrgia");
static_assert(offsetof(BtlActor_IsSkillOrgia, ReturnValue) == 0x000000, "Member 'BtlActor_IsSkillOrgia::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsSkillPhysicalType
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsSkillPhysicalType final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsSkillPhysicalType) == 0x000001, "Wrong alignment on BtlActor_IsSkillPhysicalType");
static_assert(sizeof(BtlActor_IsSkillPhysicalType) == 0x000001, "Wrong size on BtlActor_IsSkillPhysicalType");
static_assert(offsetof(BtlActor_IsSkillPhysicalType, ReturnValue) == 0x000000, "Member 'BtlActor_IsSkillPhysicalType::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsSkillTheurgia
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsSkillTheurgia final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsSkillTheurgia) == 0x000001, "Wrong alignment on BtlActor_IsSkillTheurgia");
static_assert(sizeof(BtlActor_IsSkillTheurgia) == 0x000001, "Wrong size on BtlActor_IsSkillTheurgia");
static_assert(offsetof(BtlActor_IsSkillTheurgia, ReturnValue) == 0x000000, "Member 'BtlActor_IsSkillTheurgia::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsSkillTrafuliEscape
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsSkillTrafuliEscape final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsSkillTrafuliEscape) == 0x000001, "Wrong alignment on BtlActor_IsSkillTrafuliEscape");
static_assert(sizeof(BtlActor_IsSkillTrafuliEscape) == 0x000001, "Wrong size on BtlActor_IsSkillTrafuliEscape");
static_assert(offsetof(BtlActor_IsSkillTrafuliEscape, ReturnValue) == 0x000000, "Member 'BtlActor_IsSkillTrafuliEscape::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsStrega
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsStrega final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsStrega) == 0x000001, "Wrong alignment on BtlActor_IsStrega");
static_assert(sizeof(BtlActor_IsStrega) == 0x000001, "Wrong size on BtlActor_IsStrega");
static_assert(offsetof(BtlActor_IsStrega, ReturnValue) == 0x000000, "Member 'BtlActor_IsStrega::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsSummonedEnemy
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsSummonedEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsSummonedEnemy) == 0x000001, "Wrong alignment on BtlActor_IsSummonedEnemy");
static_assert(sizeof(BtlActor_IsSummonedEnemy) == 0x000001, "Wrong size on BtlActor_IsSummonedEnemy");
static_assert(offsetof(BtlActor_IsSummonedEnemy, ReturnValue) == 0x000000, "Member 'BtlActor_IsSummonedEnemy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsUsingAllTargetSkill
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsUsingAllTargetSkill final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsUsingAllTargetSkill) == 0x000001, "Wrong alignment on BtlActor_IsUsingAllTargetSkill");
static_assert(sizeof(BtlActor_IsUsingAllTargetSkill) == 0x000001, "Wrong size on BtlActor_IsUsingAllTargetSkill");
static_assert(offsetof(BtlActor_IsUsingAllTargetSkill, ReturnValue) == 0x000000, "Member 'BtlActor_IsUsingAllTargetSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsUsingDamageSkill
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsUsingDamageSkill final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsUsingDamageSkill) == 0x000001, "Wrong alignment on BtlActor_IsUsingDamageSkill");
static_assert(sizeof(BtlActor_IsUsingDamageSkill) == 0x000001, "Wrong size on BtlActor_IsUsingDamageSkill");
static_assert(offsetof(BtlActor_IsUsingDamageSkill, ReturnValue) == 0x000000, "Member 'BtlActor_IsUsingDamageSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsUsingGroupTargetSkill
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsUsingGroupTargetSkill final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsUsingGroupTargetSkill) == 0x000001, "Wrong alignment on BtlActor_IsUsingGroupTargetSkill");
static_assert(sizeof(BtlActor_IsUsingGroupTargetSkill) == 0x000001, "Wrong size on BtlActor_IsUsingGroupTargetSkill");
static_assert(offsetof(BtlActor_IsUsingGroupTargetSkill, ReturnValue) == 0x000000, "Member 'BtlActor_IsUsingGroupTargetSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsUsingOffensiveSkill
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsUsingOffensiveSkill final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsUsingOffensiveSkill) == 0x000001, "Wrong alignment on BtlActor_IsUsingOffensiveSkill");
static_assert(sizeof(BtlActor_IsUsingOffensiveSkill) == 0x000001, "Wrong size on BtlActor_IsUsingOffensiveSkill");
static_assert(offsetof(BtlActor_IsUsingOffensiveSkill, ReturnValue) == 0x000000, "Member 'BtlActor_IsUsingOffensiveSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsUsingSummonSkill
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsUsingSummonSkill final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsUsingSummonSkill) == 0x000001, "Wrong alignment on BtlActor_IsUsingSummonSkill");
static_assert(sizeof(BtlActor_IsUsingSummonSkill) == 0x000001, "Wrong size on BtlActor_IsUsingSummonSkill");
static_assert(offsetof(BtlActor_IsUsingSummonSkill, ReturnValue) == 0x000000, "Member 'BtlActor_IsUsingSummonSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsValidUnit
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsValidUnit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsValidUnit) == 0x000001, "Wrong alignment on BtlActor_IsValidUnit");
static_assert(sizeof(BtlActor_IsValidUnit) == 0x000001, "Wrong size on BtlActor_IsValidUnit");
static_assert(offsetof(BtlActor_IsValidUnit, ReturnValue) == 0x000000, "Member 'BtlActor_IsValidUnit::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.IsVelvet
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_IsVelvet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_IsVelvet) == 0x000001, "Wrong alignment on BtlActor_IsVelvet");
static_assert(sizeof(BtlActor_IsVelvet) == 0x000001, "Wrong size on BtlActor_IsVelvet");
static_assert(offsetof(BtlActor_IsVelvet, ReturnValue) == 0x000000, "Member 'BtlActor_IsVelvet::ReturnValue' has a wrong offset!");

// Function xrd777.BtlActor.SyncSkillTimeline
// 0x0001 (0x0001 - 0x0000)
struct BtlActor_SyncSkillTimeline final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlActor_SyncSkillTimeline) == 0x000001, "Wrong alignment on BtlActor_SyncSkillTimeline");
static_assert(sizeof(BtlActor_SyncSkillTimeline) == 0x000001, "Wrong size on BtlActor_SyncSkillTimeline");
static_assert(offsetof(BtlActor_SyncSkillTimeline, ReturnValue) == 0x000000, "Member 'BtlActor_SyncSkillTimeline::ReturnValue' has a wrong offset!");

// Function xrd777.BtlPersonaInterface.SetPersonaOwner
// 0x0008 (0x0008 - 0x0000)
struct BtlPersonaInterface_SetPersonaOwner final
{
public:
	class ABtlActor*                              PersonaOwner;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPersonaInterface_SetPersonaOwner) == 0x000008, "Wrong alignment on BtlPersonaInterface_SetPersonaOwner");
static_assert(sizeof(BtlPersonaInterface_SetPersonaOwner) == 0x000008, "Wrong size on BtlPersonaInterface_SetPersonaOwner");
static_assert(offsetof(BtlPersonaInterface_SetPersonaOwner, PersonaOwner) == 0x000000, "Member 'BtlPersonaInterface_SetPersonaOwner::PersonaOwner' has a wrong offset!");

// Function xrd777.BtlPersonaInterface.GetPersonaTransformFromSkillCondition
// 0x0040 (0x0040 - 0x0000)
struct BtlPersonaInterface_GetPersonaTransformFromSkillCondition final
{
public:
	const class ABtlActor*                        PersonaOwner;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPersonaInterface_GetPersonaTransformFromSkillCondition) == 0x000010, "Wrong alignment on BtlPersonaInterface_GetPersonaTransformFromSkillCondition");
static_assert(sizeof(BtlPersonaInterface_GetPersonaTransformFromSkillCondition) == 0x000040, "Wrong size on BtlPersonaInterface_GetPersonaTransformFromSkillCondition");
static_assert(offsetof(BtlPersonaInterface_GetPersonaTransformFromSkillCondition, PersonaOwner) == 0x000000, "Member 'BtlPersonaInterface_GetPersonaTransformFromSkillCondition::PersonaOwner' has a wrong offset!");
static_assert(offsetof(BtlPersonaInterface_GetPersonaTransformFromSkillCondition, ReturnValue) == 0x000010, "Member 'BtlPersonaInterface_GetPersonaTransformFromSkillCondition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlAegisInterface.SetupOrgia
// 0x0001 (0x0001 - 0x0000)
struct BtlAegisInterface_SetupOrgia final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlAegisInterface_SetupOrgia) == 0x000001, "Wrong alignment on BtlAegisInterface_SetupOrgia");
static_assert(sizeof(BtlAegisInterface_SetupOrgia) == 0x000001, "Wrong size on BtlAegisInterface_SetupOrgia");
static_assert(offsetof(BtlAegisInterface_SetupOrgia, Enable) == 0x000000, "Member 'BtlAegisInterface_SetupOrgia::Enable' has a wrong offset!");

// Function xrd777.BtlAegisInterface.SetupOrgiaAttackEffect
// 0x0001 (0x0001 - 0x0000)
struct BtlAegisInterface_SetupOrgiaAttackEffect final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlAegisInterface_SetupOrgiaAttackEffect) == 0x000001, "Wrong alignment on BtlAegisInterface_SetupOrgiaAttackEffect");
static_assert(sizeof(BtlAegisInterface_SetupOrgiaAttackEffect) == 0x000001, "Wrong size on BtlAegisInterface_SetupOrgiaAttackEffect");
static_assert(offsetof(BtlAegisInterface_SetupOrgiaAttackEffect, Enable) == 0x000000, "Member 'BtlAegisInterface_SetupOrgiaAttackEffect::Enable' has a wrong offset!");

// Function xrd777.BtlAegisInterface.SetupOrgiaWaitingEffect
// 0x0001 (0x0001 - 0x0000)
struct BtlAegisInterface_SetupOrgiaWaitingEffect final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlAegisInterface_SetupOrgiaWaitingEffect) == 0x000001, "Wrong alignment on BtlAegisInterface_SetupOrgiaWaitingEffect");
static_assert(sizeof(BtlAegisInterface_SetupOrgiaWaitingEffect) == 0x000001, "Wrong size on BtlAegisInterface_SetupOrgiaWaitingEffect");
static_assert(offsetof(BtlAegisInterface_SetupOrgiaWaitingEffect, Enable) == 0x000000, "Member 'BtlAegisInterface_SetupOrgiaWaitingEffect::Enable' has a wrong offset!");

// Function xrd777.BtlAegisInterface.SetupOverheat
// 0x0001 (0x0001 - 0x0000)
struct BtlAegisInterface_SetupOverheat final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlAegisInterface_SetupOverheat) == 0x000001, "Wrong alignment on BtlAegisInterface_SetupOverheat");
static_assert(sizeof(BtlAegisInterface_SetupOverheat) == 0x000001, "Wrong size on BtlAegisInterface_SetupOverheat");
static_assert(offsetof(BtlAegisInterface_SetupOverheat, Enable) == 0x000000, "Member 'BtlAegisInterface_SetupOverheat::Enable' has a wrong offset!");

// Function xrd777.FclWeaponShopDrawActorBase.SetMcaCamera
// 0x0010 (0x0010 - 0x0000)
struct FclWeaponShopDrawActorBase_SetMcaCamera final
{
public:
	class UMcaAsset*                              McaAsset;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Play;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FclWeaponShopDrawActorBase_SetMcaCamera) == 0x000008, "Wrong alignment on FclWeaponShopDrawActorBase_SetMcaCamera");
static_assert(sizeof(FclWeaponShopDrawActorBase_SetMcaCamera) == 0x000010, "Wrong size on FclWeaponShopDrawActorBase_SetMcaCamera");
static_assert(offsetof(FclWeaponShopDrawActorBase_SetMcaCamera, McaAsset) == 0x000000, "Member 'FclWeaponShopDrawActorBase_SetMcaCamera::McaAsset' has a wrong offset!");
static_assert(offsetof(FclWeaponShopDrawActorBase_SetMcaCamera, Play) == 0x000008, "Member 'FclWeaponShopDrawActorBase_SetMcaCamera::Play' has a wrong offset!");

// Function xrd777.FclAntiqueShopDrawActor.EventMcaCameraCombine
// 0x0004 (0x0004 - 0x0000)
struct FclAntiqueShopDrawActor_EventMcaCameraCombine final
{
public:
	int32                                         Tag;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FclAntiqueShopDrawActor_EventMcaCameraCombine) == 0x000004, "Wrong alignment on FclAntiqueShopDrawActor_EventMcaCameraCombine");
static_assert(sizeof(FclAntiqueShopDrawActor_EventMcaCameraCombine) == 0x000004, "Wrong size on FclAntiqueShopDrawActor_EventMcaCameraCombine");
static_assert(offsetof(FclAntiqueShopDrawActor_EventMcaCameraCombine, Tag) == 0x000000, "Member 'FclAntiqueShopDrawActor_EventMcaCameraCombine::Tag' has a wrong offset!");

// Function xrd777.FclAntiqueShopDrawActor.EventMcaCameraExchange
// 0x0004 (0x0004 - 0x0000)
struct FclAntiqueShopDrawActor_EventMcaCameraExchange final
{
public:
	int32                                         Tag;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FclAntiqueShopDrawActor_EventMcaCameraExchange) == 0x000004, "Wrong alignment on FclAntiqueShopDrawActor_EventMcaCameraExchange");
static_assert(sizeof(FclAntiqueShopDrawActor_EventMcaCameraExchange) == 0x000004, "Wrong size on FclAntiqueShopDrawActor_EventMcaCameraExchange");
static_assert(offsetof(FclAntiqueShopDrawActor_EventMcaCameraExchange, Tag) == 0x000000, "Member 'FclAntiqueShopDrawActor_EventMcaCameraExchange::Tag' has a wrong offset!");

// Function xrd777.FclAntiqueShopDrawActor.EventMcaCameraInit
// 0x0004 (0x0004 - 0x0000)
struct FclAntiqueShopDrawActor_EventMcaCameraInit final
{
public:
	int32                                         Tag;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FclAntiqueShopDrawActor_EventMcaCameraInit) == 0x000004, "Wrong alignment on FclAntiqueShopDrawActor_EventMcaCameraInit");
static_assert(sizeof(FclAntiqueShopDrawActor_EventMcaCameraInit) == 0x000004, "Wrong size on FclAntiqueShopDrawActor_EventMcaCameraInit");
static_assert(offsetof(FclAntiqueShopDrawActor_EventMcaCameraInit, Tag) == 0x000000, "Member 'FclAntiqueShopDrawActor_EventMcaCameraInit::Tag' has a wrong offset!");

// Function xrd777.BtlAIManagerComponent.DetermineAIAction
// 0x0010 (0x0010 - 0x0000)
struct BtlAIManagerComponent_DetermineAIAction final
{
public:
	class UBtlActionManagerComponent*             ActionManager;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABtlActor*                              Commander;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlAIManagerComponent_DetermineAIAction) == 0x000008, "Wrong alignment on BtlAIManagerComponent_DetermineAIAction");
static_assert(sizeof(BtlAIManagerComponent_DetermineAIAction) == 0x000010, "Wrong size on BtlAIManagerComponent_DetermineAIAction");
static_assert(offsetof(BtlAIManagerComponent_DetermineAIAction, ActionManager) == 0x000000, "Member 'BtlAIManagerComponent_DetermineAIAction::ActionManager' has a wrong offset!");
static_assert(offsetof(BtlAIManagerComponent_DetermineAIAction, Commander) == 0x000008, "Member 'BtlAIManagerComponent_DetermineAIAction::Commander' has a wrong offset!");

// Function xrd777.FldBpFuncLib.CallFieldKeyFreeEventLevel
// 0x0018 (0x0018 - 0x0000)
struct FldBpFuncLib_CallFieldKeyFreeEventLevel final
{
public:
	int32                                         FieldMajorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDay;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldTimeZone                                  TimeZone;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EventId;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerStartID;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_CallFieldKeyFreeEventLevel) == 0x000004, "Wrong alignment on FldBpFuncLib_CallFieldKeyFreeEventLevel");
static_assert(sizeof(FldBpFuncLib_CallFieldKeyFreeEventLevel) == 0x000018, "Wrong size on FldBpFuncLib_CallFieldKeyFreeEventLevel");
static_assert(offsetof(FldBpFuncLib_CallFieldKeyFreeEventLevel, FieldMajorID) == 0x000000, "Member 'FldBpFuncLib_CallFieldKeyFreeEventLevel::FieldMajorID' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_CallFieldKeyFreeEventLevel, FieldMinorID) == 0x000004, "Member 'FldBpFuncLib_CallFieldKeyFreeEventLevel::FieldMinorID' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_CallFieldKeyFreeEventLevel, TotalDay) == 0x000008, "Member 'FldBpFuncLib_CallFieldKeyFreeEventLevel::TotalDay' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_CallFieldKeyFreeEventLevel, TimeZone) == 0x00000C, "Member 'FldBpFuncLib_CallFieldKeyFreeEventLevel::TimeZone' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_CallFieldKeyFreeEventLevel, EventId) == 0x000010, "Member 'FldBpFuncLib_CallFieldKeyFreeEventLevel::EventId' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_CallFieldKeyFreeEventLevel, PlayerStartID) == 0x000014, "Member 'FldBpFuncLib_CallFieldKeyFreeEventLevel::PlayerStartID' has a wrong offset!");

// Function xrd777.FldBpFuncLib.CallFieldLevel
// 0x0014 (0x0014 - 0x0000)
struct FldBpFuncLib_CallFieldLevel final
{
public:
	int32                                         FieldMajorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDay;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldTimeZone                                  TimeZone;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartID;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_CallFieldLevel) == 0x000004, "Wrong alignment on FldBpFuncLib_CallFieldLevel");
static_assert(sizeof(FldBpFuncLib_CallFieldLevel) == 0x000014, "Wrong size on FldBpFuncLib_CallFieldLevel");
static_assert(offsetof(FldBpFuncLib_CallFieldLevel, FieldMajorID) == 0x000000, "Member 'FldBpFuncLib_CallFieldLevel::FieldMajorID' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_CallFieldLevel, FieldMinorID) == 0x000004, "Member 'FldBpFuncLib_CallFieldLevel::FieldMinorID' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_CallFieldLevel, TotalDay) == 0x000008, "Member 'FldBpFuncLib_CallFieldLevel::TotalDay' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_CallFieldLevel, TimeZone) == 0x00000C, "Member 'FldBpFuncLib_CallFieldLevel::TimeZone' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_CallFieldLevel, StartID) == 0x000010, "Member 'FldBpFuncLib_CallFieldLevel::StartID' has a wrong offset!");

// Function xrd777.FldBpFuncLib.CheckLoadedCommonData
// 0x0020 (0x0020 - 0x0000)
struct FldBpFuncLib_CheckLoadedCommonData final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_CheckLoadedCommonData) == 0x000008, "Wrong alignment on FldBpFuncLib_CheckLoadedCommonData");
static_assert(sizeof(FldBpFuncLib_CheckLoadedCommonData) == 0x000020, "Wrong size on FldBpFuncLib_CheckLoadedCommonData");
static_assert(offsetof(FldBpFuncLib_CheckLoadedCommonData, WorldContextObject) == 0x000000, "Member 'FldBpFuncLib_CheckLoadedCommonData::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_CheckLoadedCommonData, LatentInfo) == 0x000008, "Member 'FldBpFuncLib_CheckLoadedCommonData::LatentInfo' has a wrong offset!");

// Function xrd777.FldBpFuncLib.CheckRegistedSubLevel
// 0x0020 (0x0020 - 0x0000)
struct FldBpFuncLib_CheckRegistedSubLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelName;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldBpRetBool                                 Result;                                            // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldBpFuncLib_CheckRegistedSubLevel) == 0x000008, "Wrong alignment on FldBpFuncLib_CheckRegistedSubLevel");
static_assert(sizeof(FldBpFuncLib_CheckRegistedSubLevel) == 0x000020, "Wrong size on FldBpFuncLib_CheckRegistedSubLevel");
static_assert(offsetof(FldBpFuncLib_CheckRegistedSubLevel, WorldContextObject) == 0x000000, "Member 'FldBpFuncLib_CheckRegistedSubLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_CheckRegistedSubLevel, LevelName) == 0x000008, "Member 'FldBpFuncLib_CheckRegistedSubLevel::LevelName' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_CheckRegistedSubLevel, Result) == 0x000018, "Member 'FldBpFuncLib_CheckRegistedSubLevel::Result' has a wrong offset!");

// Function xrd777.FldBpFuncLib.FldGetPlayerActor
// 0x0008 (0x0008 - 0x0000)
struct FldBpFuncLib_FldGetPlayerActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_FldGetPlayerActor) == 0x000008, "Wrong alignment on FldBpFuncLib_FldGetPlayerActor");
static_assert(sizeof(FldBpFuncLib_FldGetPlayerActor) == 0x000008, "Wrong size on FldBpFuncLib_FldGetPlayerActor");
static_assert(offsetof(FldBpFuncLib_FldGetPlayerActor, ReturnValue) == 0x000000, "Member 'FldBpFuncLib_FldGetPlayerActor::ReturnValue' has a wrong offset!");

// Function xrd777.FldBpFuncLib.FldLibUpdateCmmNpcLayoutTable
// 0x0010 (0x0010 - 0x0000)
struct FldBpFuncLib_FldLibUpdateCmmNpcLayoutTable final
{
public:
	class UDataTable*                             SubLevelTable;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             DataTable;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_FldLibUpdateCmmNpcLayoutTable) == 0x000008, "Wrong alignment on FldBpFuncLib_FldLibUpdateCmmNpcLayoutTable");
static_assert(sizeof(FldBpFuncLib_FldLibUpdateCmmNpcLayoutTable) == 0x000010, "Wrong size on FldBpFuncLib_FldLibUpdateCmmNpcLayoutTable");
static_assert(offsetof(FldBpFuncLib_FldLibUpdateCmmNpcLayoutTable, SubLevelTable) == 0x000000, "Member 'FldBpFuncLib_FldLibUpdateCmmNpcLayoutTable::SubLevelTable' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_FldLibUpdateCmmNpcLayoutTable, DataTable) == 0x000008, "Member 'FldBpFuncLib_FldLibUpdateCmmNpcLayoutTable::DataTable' has a wrong offset!");

// Function xrd777.FldBpFuncLib.FldLibUpdateNpcLayoutTable
// 0x0010 (0x0010 - 0x0000)
struct FldBpFuncLib_FldLibUpdateNpcLayoutTable final
{
public:
	class UDataTable*                             SubLevelTable;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             DataTable;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_FldLibUpdateNpcLayoutTable) == 0x000008, "Wrong alignment on FldBpFuncLib_FldLibUpdateNpcLayoutTable");
static_assert(sizeof(FldBpFuncLib_FldLibUpdateNpcLayoutTable) == 0x000010, "Wrong size on FldBpFuncLib_FldLibUpdateNpcLayoutTable");
static_assert(offsetof(FldBpFuncLib_FldLibUpdateNpcLayoutTable, SubLevelTable) == 0x000000, "Member 'FldBpFuncLib_FldLibUpdateNpcLayoutTable::SubLevelTable' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_FldLibUpdateNpcLayoutTable, DataTable) == 0x000008, "Member 'FldBpFuncLib_FldLibUpdateNpcLayoutTable::DataTable' has a wrong offset!");

// Function xrd777.FldBpFuncLib.FldSetDisableNpcActor
// 0x000C (0x000C - 0x0000)
struct FldBpFuncLib_FldSetDisableNpcActor final
{
public:
	int32                                         NpcMajorID;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NpcMinorID;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ToHide;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldBpFuncLib_FldSetDisableNpcActor) == 0x000004, "Wrong alignment on FldBpFuncLib_FldSetDisableNpcActor");
static_assert(sizeof(FldBpFuncLib_FldSetDisableNpcActor) == 0x00000C, "Wrong size on FldBpFuncLib_FldSetDisableNpcActor");
static_assert(offsetof(FldBpFuncLib_FldSetDisableNpcActor, NpcMajorID) == 0x000000, "Member 'FldBpFuncLib_FldSetDisableNpcActor::NpcMajorID' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_FldSetDisableNpcActor, NpcMinorID) == 0x000004, "Member 'FldBpFuncLib_FldSetDisableNpcActor::NpcMinorID' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_FldSetDisableNpcActor, ToHide) == 0x000008, "Member 'FldBpFuncLib_FldSetDisableNpcActor::ToHide' has a wrong offset!");

// Function xrd777.FldBpFuncLib.FldSoundManagerSetAisacValue_FRONT_VELVETROOM
// 0x0004 (0x0004 - 0x0000)
struct FldBpFuncLib_FldSoundManagerSetAisacValue_FRONT_VELVETROOM final
{
public:
	float                                         ControlValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_FldSoundManagerSetAisacValue_FRONT_VELVETROOM) == 0x000004, "Wrong alignment on FldBpFuncLib_FldSoundManagerSetAisacValue_FRONT_VELVETROOM");
static_assert(sizeof(FldBpFuncLib_FldSoundManagerSetAisacValue_FRONT_VELVETROOM) == 0x000004, "Wrong size on FldBpFuncLib_FldSoundManagerSetAisacValue_FRONT_VELVETROOM");
static_assert(offsetof(FldBpFuncLib_FldSoundManagerSetAisacValue_FRONT_VELVETROOM, ControlValue) == 0x000000, "Member 'FldBpFuncLib_FldSoundManagerSetAisacValue_FRONT_VELVETROOM::ControlValue' has a wrong offset!");

// Function xrd777.FldBpFuncLib.GetLocalCounter
// 0x000C (0x000C - 0x0000)
struct FldBpFuncLib_GetLocalCounter final
{
public:
	class FName                                   CntName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_GetLocalCounter) == 0x000004, "Wrong alignment on FldBpFuncLib_GetLocalCounter");
static_assert(sizeof(FldBpFuncLib_GetLocalCounter) == 0x00000C, "Wrong size on FldBpFuncLib_GetLocalCounter");
static_assert(offsetof(FldBpFuncLib_GetLocalCounter, CntName) == 0x000000, "Member 'FldBpFuncLib_GetLocalCounter::CntName' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_GetLocalCounter, ReturnValue) == 0x000008, "Member 'FldBpFuncLib_GetLocalCounter::ReturnValue' has a wrong offset!");

// Function xrd777.FldBpFuncLib.GetLocalFlag
// 0x000C (0x000C - 0x0000)
struct FldBpFuncLib_GetLocalFlag final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldBpRetFlag                                 RetFlag;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldBpFuncLib_GetLocalFlag) == 0x000004, "Wrong alignment on FldBpFuncLib_GetLocalFlag");
static_assert(sizeof(FldBpFuncLib_GetLocalFlag) == 0x00000C, "Wrong size on FldBpFuncLib_GetLocalFlag");
static_assert(offsetof(FldBpFuncLib_GetLocalFlag, FlagName) == 0x000000, "Member 'FldBpFuncLib_GetLocalFlag::FlagName' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_GetLocalFlag, RetFlag) == 0x000008, "Member 'FldBpFuncLib_GetLocalFlag::RetFlag' has a wrong offset!");

// Function xrd777.FldBpFuncLib.GetPersistentType
// 0x000C (0x000C - 0x0000)
struct FldBpFuncLib_GetPersistentType final
{
public:
	int32                                         FieldMajorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldLoadPersistentType                        ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldBpFuncLib_GetPersistentType) == 0x000004, "Wrong alignment on FldBpFuncLib_GetPersistentType");
static_assert(sizeof(FldBpFuncLib_GetPersistentType) == 0x00000C, "Wrong size on FldBpFuncLib_GetPersistentType");
static_assert(offsetof(FldBpFuncLib_GetPersistentType, FieldMajorID) == 0x000000, "Member 'FldBpFuncLib_GetPersistentType::FieldMajorID' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_GetPersistentType, FieldMinorID) == 0x000004, "Member 'FldBpFuncLib_GetPersistentType::FieldMinorID' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_GetPersistentType, ReturnValue) == 0x000008, "Member 'FldBpFuncLib_GetPersistentType::ReturnValue' has a wrong offset!");

// Function xrd777.FldBpFuncLib.HideSubLevellOrigin
// 0x0020 (0x0020 - 0x0000)
struct FldBpFuncLib_HideSubLevellOrigin final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelAssetPath;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldBpFuncLib_HideSubLevellOrigin) == 0x000008, "Wrong alignment on FldBpFuncLib_HideSubLevellOrigin");
static_assert(sizeof(FldBpFuncLib_HideSubLevellOrigin) == 0x000020, "Wrong size on FldBpFuncLib_HideSubLevellOrigin");
static_assert(offsetof(FldBpFuncLib_HideSubLevellOrigin, WorldContextObject) == 0x000000, "Member 'FldBpFuncLib_HideSubLevellOrigin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_HideSubLevellOrigin, LevelAssetPath) == 0x000008, "Member 'FldBpFuncLib_HideSubLevellOrigin::LevelAssetPath' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_HideSubLevellOrigin, ReturnValue) == 0x000018, "Member 'FldBpFuncLib_HideSubLevellOrigin::ReturnValue' has a wrong offset!");

// Function xrd777.FldBpFuncLib.RequestLoadSubLevelOrigin
// 0x0018 (0x0018 - 0x0000)
struct FldBpFuncLib_RequestLoadSubLevelOrigin final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelAssetPath;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_RequestLoadSubLevelOrigin) == 0x000008, "Wrong alignment on FldBpFuncLib_RequestLoadSubLevelOrigin");
static_assert(sizeof(FldBpFuncLib_RequestLoadSubLevelOrigin) == 0x000018, "Wrong size on FldBpFuncLib_RequestLoadSubLevelOrigin");
static_assert(offsetof(FldBpFuncLib_RequestLoadSubLevelOrigin, WorldContextObject) == 0x000000, "Member 'FldBpFuncLib_RequestLoadSubLevelOrigin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_RequestLoadSubLevelOrigin, LevelAssetPath) == 0x000008, "Member 'FldBpFuncLib_RequestLoadSubLevelOrigin::LevelAssetPath' has a wrong offset!");

// Function xrd777.FldBpFuncLib.RequestUnloadSubLevellOrigin
// 0x0018 (0x0018 - 0x0000)
struct FldBpFuncLib_RequestUnloadSubLevellOrigin final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelAssetPath;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_RequestUnloadSubLevellOrigin) == 0x000008, "Wrong alignment on FldBpFuncLib_RequestUnloadSubLevellOrigin");
static_assert(sizeof(FldBpFuncLib_RequestUnloadSubLevellOrigin) == 0x000018, "Wrong size on FldBpFuncLib_RequestUnloadSubLevellOrigin");
static_assert(offsetof(FldBpFuncLib_RequestUnloadSubLevellOrigin, WorldContextObject) == 0x000000, "Member 'FldBpFuncLib_RequestUnloadSubLevellOrigin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_RequestUnloadSubLevellOrigin, LevelAssetPath) == 0x000008, "Member 'FldBpFuncLib_RequestUnloadSubLevellOrigin::LevelAssetPath' has a wrong offset!");

// Function xrd777.FldBpFuncLib.SetLocalCounter
// 0x000C (0x000C - 0x0000)
struct FldBpFuncLib_SetLocalCounter final
{
public:
	class FName                                   CntName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_SetLocalCounter) == 0x000004, "Wrong alignment on FldBpFuncLib_SetLocalCounter");
static_assert(sizeof(FldBpFuncLib_SetLocalCounter) == 0x00000C, "Wrong size on FldBpFuncLib_SetLocalCounter");
static_assert(offsetof(FldBpFuncLib_SetLocalCounter, CntName) == 0x000000, "Member 'FldBpFuncLib_SetLocalCounter::CntName' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_SetLocalCounter, Value) == 0x000008, "Member 'FldBpFuncLib_SetLocalCounter::Value' has a wrong offset!");

// Function xrd777.FldBpFuncLib.SetLocalFlag
// 0x000C (0x000C - 0x0000)
struct FldBpFuncLib_SetLocalFlag final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnOff;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldBpFuncLib_SetLocalFlag) == 0x000004, "Wrong alignment on FldBpFuncLib_SetLocalFlag");
static_assert(sizeof(FldBpFuncLib_SetLocalFlag) == 0x00000C, "Wrong size on FldBpFuncLib_SetLocalFlag");
static_assert(offsetof(FldBpFuncLib_SetLocalFlag, FlagName) == 0x000000, "Member 'FldBpFuncLib_SetLocalFlag::FlagName' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_SetLocalFlag, OnOff) == 0x000008, "Member 'FldBpFuncLib_SetLocalFlag::OnOff' has a wrong offset!");

// Function xrd777.FldBpFuncLib.SetSkelMeshCompUpdateAnimationInEditor
// 0x0010 (0x0010 - 0x0000)
struct FldBpFuncLib_SetSkelMeshCompUpdateAnimationInEditor final
{
public:
	class USkeletalMeshComponent*                 Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewUpdateState;                                    // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldBpFuncLib_SetSkelMeshCompUpdateAnimationInEditor) == 0x000008, "Wrong alignment on FldBpFuncLib_SetSkelMeshCompUpdateAnimationInEditor");
static_assert(sizeof(FldBpFuncLib_SetSkelMeshCompUpdateAnimationInEditor) == 0x000010, "Wrong size on FldBpFuncLib_SetSkelMeshCompUpdateAnimationInEditor");
static_assert(offsetof(FldBpFuncLib_SetSkelMeshCompUpdateAnimationInEditor, Component) == 0x000000, "Member 'FldBpFuncLib_SetSkelMeshCompUpdateAnimationInEditor::Component' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_SetSkelMeshCompUpdateAnimationInEditor, NewUpdateState) == 0x000008, "Member 'FldBpFuncLib_SetSkelMeshCompUpdateAnimationInEditor::NewUpdateState' has a wrong offset!");

// Function xrd777.FldBpFuncLib.ShowSubLevellOrigin
// 0x0020 (0x0020 - 0x0000)
struct FldBpFuncLib_ShowSubLevellOrigin final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LevelAssetPath;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldBpFuncLib_ShowSubLevellOrigin) == 0x000008, "Wrong alignment on FldBpFuncLib_ShowSubLevellOrigin");
static_assert(sizeof(FldBpFuncLib_ShowSubLevellOrigin) == 0x000020, "Wrong size on FldBpFuncLib_ShowSubLevellOrigin");
static_assert(offsetof(FldBpFuncLib_ShowSubLevellOrigin, WorldContextObject) == 0x000000, "Member 'FldBpFuncLib_ShowSubLevellOrigin::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_ShowSubLevellOrigin, LevelAssetPath) == 0x000008, "Member 'FldBpFuncLib_ShowSubLevellOrigin::LevelAssetPath' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_ShowSubLevellOrigin, ReturnValue) == 0x000018, "Member 'FldBpFuncLib_ShowSubLevellOrigin::ReturnValue' has a wrong offset!");

// Function xrd777.FldBpFuncLib.StartFadeIN
// 0x0028 (0x0028 - 0x0000)
struct FldBpFuncLib_StartFadeIN final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frame;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_StartFadeIN) == 0x000008, "Wrong alignment on FldBpFuncLib_StartFadeIN");
static_assert(sizeof(FldBpFuncLib_StartFadeIN) == 0x000028, "Wrong size on FldBpFuncLib_StartFadeIN");
static_assert(offsetof(FldBpFuncLib_StartFadeIN, Type) == 0x000000, "Member 'FldBpFuncLib_StartFadeIN::Type' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_StartFadeIN, Frame) == 0x000004, "Member 'FldBpFuncLib_StartFadeIN::Frame' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_StartFadeIN, WorldContextObject) == 0x000008, "Member 'FldBpFuncLib_StartFadeIN::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_StartFadeIN, LatentInfo) == 0x000010, "Member 'FldBpFuncLib_StartFadeIN::LatentInfo' has a wrong offset!");

// Function xrd777.FldBpFuncLib.StartFadeOUT
// 0x0028 (0x0028 - 0x0000)
struct FldBpFuncLib_StartFadeOUT final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frame;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_StartFadeOUT) == 0x000008, "Wrong alignment on FldBpFuncLib_StartFadeOUT");
static_assert(sizeof(FldBpFuncLib_StartFadeOUT) == 0x000028, "Wrong size on FldBpFuncLib_StartFadeOUT");
static_assert(offsetof(FldBpFuncLib_StartFadeOUT, Type) == 0x000000, "Member 'FldBpFuncLib_StartFadeOUT::Type' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_StartFadeOUT, Frame) == 0x000004, "Member 'FldBpFuncLib_StartFadeOUT::Frame' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_StartFadeOUT, WorldContextObject) == 0x000008, "Member 'FldBpFuncLib_StartFadeOUT::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_StartFadeOUT, LatentInfo) == 0x000010, "Member 'FldBpFuncLib_StartFadeOUT::LatentInfo' has a wrong offset!");

// Function xrd777.FldBpFuncLib.SyncFade
// 0x0020 (0x0020 - 0x0000)
struct FldBpFuncLib_SyncFade final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldBpFuncLib_SyncFade) == 0x000008, "Wrong alignment on FldBpFuncLib_SyncFade");
static_assert(sizeof(FldBpFuncLib_SyncFade) == 0x000020, "Wrong size on FldBpFuncLib_SyncFade");
static_assert(offsetof(FldBpFuncLib_SyncFade, WorldContextObject) == 0x000000, "Member 'FldBpFuncLib_SyncFade::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FldBpFuncLib_SyncFade, LatentInfo) == 0x000008, "Member 'FldBpFuncLib_SyncFade::LatentInfo' has a wrong offset!");

// Function xrd777.BtlBossHermitInterface.SetVisibleChargeEffect
// 0x0002 (0x0002 - 0x0000)
struct BtlBossHermitInterface_SetVisibleChargeEffect final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StrongEffect;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossHermitInterface_SetVisibleChargeEffect) == 0x000001, "Wrong alignment on BtlBossHermitInterface_SetVisibleChargeEffect");
static_assert(sizeof(BtlBossHermitInterface_SetVisibleChargeEffect) == 0x000002, "Wrong size on BtlBossHermitInterface_SetVisibleChargeEffect");
static_assert(offsetof(BtlBossHermitInterface_SetVisibleChargeEffect, Visible) == 0x000000, "Member 'BtlBossHermitInterface_SetVisibleChargeEffect::Visible' has a wrong offset!");
static_assert(offsetof(BtlBossHermitInterface_SetVisibleChargeEffect, StrongEffect) == 0x000001, "Member 'BtlBossHermitInterface_SetVisibleChargeEffect::StrongEffect' has a wrong offset!");

// Function xrd777.BtlBossHermitInterface.SetVisibleChargeEffectFromLevel
// 0x0008 (0x0008 - 0x0000)
struct BtlBossHermitInterface_SetVisibleChargeEffectFromLevel final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossHermitInterface_SetVisibleChargeEffectFromLevel) == 0x000004, "Wrong alignment on BtlBossHermitInterface_SetVisibleChargeEffectFromLevel");
static_assert(sizeof(BtlBossHermitInterface_SetVisibleChargeEffectFromLevel) == 0x000008, "Wrong size on BtlBossHermitInterface_SetVisibleChargeEffectFromLevel");
static_assert(offsetof(BtlBossHermitInterface_SetVisibleChargeEffectFromLevel, Visible) == 0x000000, "Member 'BtlBossHermitInterface_SetVisibleChargeEffectFromLevel::Visible' has a wrong offset!");
static_assert(offsetof(BtlBossHermitInterface_SetVisibleChargeEffectFromLevel, Level) == 0x000004, "Member 'BtlBossHermitInterface_SetVisibleChargeEffectFromLevel::Level' has a wrong offset!");

// Function xrd777.BtlBossHermitInterface.SetVisibleChargeStartEffect
// 0x0001 (0x0001 - 0x0000)
struct BtlBossHermitInterface_SetVisibleChargeStartEffect final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossHermitInterface_SetVisibleChargeStartEffect) == 0x000001, "Wrong alignment on BtlBossHermitInterface_SetVisibleChargeStartEffect");
static_assert(sizeof(BtlBossHermitInterface_SetVisibleChargeStartEffect) == 0x000001, "Wrong size on BtlBossHermitInterface_SetVisibleChargeStartEffect");
static_assert(offsetof(BtlBossHermitInterface_SetVisibleChargeStartEffect, Visible) == 0x000000, "Member 'BtlBossHermitInterface_SetVisibleChargeStartEffect::Visible' has a wrong offset!");

// Function xrd777.FldAnimalCompCore.CreateAnimalActor
// 0x0060 (0x0060 - 0x0000)
struct FldAnimalCompCore_CreateAnimalActor final
{
public:
	class UWorld*                                 InWorld;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIndex;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AAppPropsCore>              InClassPtr;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0020(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 InOwner;                                           // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AAppPropsCore*                          ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldAnimalCompCore_CreateAnimalActor) == 0x000010, "Wrong alignment on FldAnimalCompCore_CreateAnimalActor");
static_assert(sizeof(FldAnimalCompCore_CreateAnimalActor) == 0x000060, "Wrong size on FldAnimalCompCore_CreateAnimalActor");
static_assert(offsetof(FldAnimalCompCore_CreateAnimalActor, InWorld) == 0x000000, "Member 'FldAnimalCompCore_CreateAnimalActor::InWorld' has a wrong offset!");
static_assert(offsetof(FldAnimalCompCore_CreateAnimalActor, InIndex) == 0x000008, "Member 'FldAnimalCompCore_CreateAnimalActor::InIndex' has a wrong offset!");
static_assert(offsetof(FldAnimalCompCore_CreateAnimalActor, InClassPtr) == 0x000010, "Member 'FldAnimalCompCore_CreateAnimalActor::InClassPtr' has a wrong offset!");
static_assert(offsetof(FldAnimalCompCore_CreateAnimalActor, InTransform) == 0x000020, "Member 'FldAnimalCompCore_CreateAnimalActor::InTransform' has a wrong offset!");
static_assert(offsetof(FldAnimalCompCore_CreateAnimalActor, InOwner) == 0x000050, "Member 'FldAnimalCompCore_CreateAnimalActor::InOwner' has a wrong offset!");
static_assert(offsetof(FldAnimalCompCore_CreateAnimalActor, ReturnValue) == 0x000058, "Member 'FldAnimalCompCore_CreateAnimalActor::ReturnValue' has a wrong offset!");

// Function xrd777.FldHitCharacter.GetCharaModelNpcComp
// 0x0010 (0x0010 - 0x0000)
struct FldHitCharacter_GetCharaModelNpcComp final
{
public:
	int32                                         ModelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFldNpcComp*                            ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldHitCharacter_GetCharaModelNpcComp) == 0x000008, "Wrong alignment on FldHitCharacter_GetCharaModelNpcComp");
static_assert(sizeof(FldHitCharacter_GetCharaModelNpcComp) == 0x000010, "Wrong size on FldHitCharacter_GetCharaModelNpcComp");
static_assert(offsetof(FldHitCharacter_GetCharaModelNpcComp, ModelIndex) == 0x000000, "Member 'FldHitCharacter_GetCharaModelNpcComp::ModelIndex' has a wrong offset!");
static_assert(offsetof(FldHitCharacter_GetCharaModelNpcComp, ReturnValue) == 0x000008, "Member 'FldHitCharacter_GetCharaModelNpcComp::ReturnValue' has a wrong offset!");

// Function xrd777.FldHitCharacter.GetCharaModelNum
// 0x0004 (0x0004 - 0x0000)
struct FldHitCharacter_GetCharaModelNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldHitCharacter_GetCharaModelNum) == 0x000004, "Wrong alignment on FldHitCharacter_GetCharaModelNum");
static_assert(sizeof(FldHitCharacter_GetCharaModelNum) == 0x000004, "Wrong size on FldHitCharacter_GetCharaModelNum");
static_assert(offsetof(FldHitCharacter_GetCharaModelNum, ReturnValue) == 0x000000, "Member 'FldHitCharacter_GetCharaModelNum::ReturnValue' has a wrong offset!");

// Function xrd777.BtlBossNyxAvatarInterface.FadeoutFeatherAnim
// 0x0004 (0x0004 - 0x0000)
struct BtlBossNyxAvatarInterface_FadeoutFeatherAnim final
{
public:
	float                                         AnimSeconds;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossNyxAvatarInterface_FadeoutFeatherAnim) == 0x000004, "Wrong alignment on BtlBossNyxAvatarInterface_FadeoutFeatherAnim");
static_assert(sizeof(BtlBossNyxAvatarInterface_FadeoutFeatherAnim) == 0x000004, "Wrong size on BtlBossNyxAvatarInterface_FadeoutFeatherAnim");
static_assert(offsetof(BtlBossNyxAvatarInterface_FadeoutFeatherAnim, AnimSeconds) == 0x000000, "Member 'BtlBossNyxAvatarInterface_FadeoutFeatherAnim::AnimSeconds' has a wrong offset!");

// Function xrd777.BtlBossNyxAvatarInterface.FadeoutWeaponEffect
// 0x0004 (0x0004 - 0x0000)
struct BtlBossNyxAvatarInterface_FadeoutWeaponEffect final
{
public:
	float                                         AnimSeconds;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossNyxAvatarInterface_FadeoutWeaponEffect) == 0x000004, "Wrong alignment on BtlBossNyxAvatarInterface_FadeoutWeaponEffect");
static_assert(sizeof(BtlBossNyxAvatarInterface_FadeoutWeaponEffect) == 0x000004, "Wrong size on BtlBossNyxAvatarInterface_FadeoutWeaponEffect");
static_assert(offsetof(BtlBossNyxAvatarInterface_FadeoutWeaponEffect, AnimSeconds) == 0x000000, "Member 'BtlBossNyxAvatarInterface_FadeoutWeaponEffect::AnimSeconds' has a wrong offset!");

// Function xrd777.BtlBossNyxAvatarInterface.PlayFeatherAnim
// 0x0004 (0x0004 - 0x0000)
struct BtlBossNyxAvatarInterface_PlayFeatherAnim final
{
public:
	float                                         AnimSeconds;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossNyxAvatarInterface_PlayFeatherAnim) == 0x000004, "Wrong alignment on BtlBossNyxAvatarInterface_PlayFeatherAnim");
static_assert(sizeof(BtlBossNyxAvatarInterface_PlayFeatherAnim) == 0x000004, "Wrong size on BtlBossNyxAvatarInterface_PlayFeatherAnim");
static_assert(offsetof(BtlBossNyxAvatarInterface_PlayFeatherAnim, AnimSeconds) == 0x000000, "Member 'BtlBossNyxAvatarInterface_PlayFeatherAnim::AnimSeconds' has a wrong offset!");

// Function xrd777.BtlBossNyxAvatarInterface.SetVisibleWeaponEffect
// 0x0001 (0x0001 - 0x0000)
struct BtlBossNyxAvatarInterface_SetVisibleWeaponEffect final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossNyxAvatarInterface_SetVisibleWeaponEffect) == 0x000001, "Wrong alignment on BtlBossNyxAvatarInterface_SetVisibleWeaponEffect");
static_assert(sizeof(BtlBossNyxAvatarInterface_SetVisibleWeaponEffect) == 0x000001, "Wrong size on BtlBossNyxAvatarInterface_SetVisibleWeaponEffect");
static_assert(offsetof(BtlBossNyxAvatarInterface_SetVisibleWeaponEffect, Visible) == 0x000000, "Member 'BtlBossNyxAvatarInterface_SetVisibleWeaponEffect::Visible' has a wrong offset!");

// Function xrd777.BtlBossStregaInterface.PlayJinDrugLoopEffect
// 0x0008 (0x0008 - 0x0000)
struct BtlBossStregaInterface_PlayJinDrugLoopEffect final
{
public:
	bool                                          IsFadeIn;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossStregaInterface_PlayJinDrugLoopEffect) == 0x000004, "Wrong alignment on BtlBossStregaInterface_PlayJinDrugLoopEffect");
static_assert(sizeof(BtlBossStregaInterface_PlayJinDrugLoopEffect) == 0x000008, "Wrong size on BtlBossStregaInterface_PlayJinDrugLoopEffect");
static_assert(offsetof(BtlBossStregaInterface_PlayJinDrugLoopEffect, IsFadeIn) == 0x000000, "Member 'BtlBossStregaInterface_PlayJinDrugLoopEffect::IsFadeIn' has a wrong offset!");
static_assert(offsetof(BtlBossStregaInterface_PlayJinDrugLoopEffect, FadeTime) == 0x000004, "Member 'BtlBossStregaInterface_PlayJinDrugLoopEffect::FadeTime' has a wrong offset!");

// Function xrd777.BtlBossStregaInterface.SetTakayaTheurgiaMode
// 0x0001 (0x0001 - 0x0000)
struct BtlBossStregaInterface_SetTakayaTheurgiaMode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossStregaInterface_SetTakayaTheurgiaMode) == 0x000001, "Wrong alignment on BtlBossStregaInterface_SetTakayaTheurgiaMode");
static_assert(sizeof(BtlBossStregaInterface_SetTakayaTheurgiaMode) == 0x000001, "Wrong size on BtlBossStregaInterface_SetTakayaTheurgiaMode");
static_assert(offsetof(BtlBossStregaInterface_SetTakayaTheurgiaMode, Enable) == 0x000000, "Member 'BtlBossStregaInterface_SetTakayaTheurgiaMode::Enable' has a wrong offset!");

// Function xrd777.PreloadVolume.OnOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct PreloadVolume_OnOverlapBegin final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreloadVolume_OnOverlapBegin) == 0x000008, "Wrong alignment on PreloadVolume_OnOverlapBegin");
static_assert(sizeof(PreloadVolume_OnOverlapBegin) == 0x000010, "Wrong size on PreloadVolume_OnOverlapBegin");
static_assert(offsetof(PreloadVolume_OnOverlapBegin, OverlappedActor) == 0x000000, "Member 'PreloadVolume_OnOverlapBegin::OverlappedActor' has a wrong offset!");
static_assert(offsetof(PreloadVolume_OnOverlapBegin, OtherActor) == 0x000008, "Member 'PreloadVolume_OnOverlapBegin::OtherActor' has a wrong offset!");

// Function xrd777.PreloadVolume.OnOverlapEnd
// 0x0010 (0x0010 - 0x0000)
struct PreloadVolume_OnOverlapEnd final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreloadVolume_OnOverlapEnd) == 0x000008, "Wrong alignment on PreloadVolume_OnOverlapEnd");
static_assert(sizeof(PreloadVolume_OnOverlapEnd) == 0x000010, "Wrong size on PreloadVolume_OnOverlapEnd");
static_assert(offsetof(PreloadVolume_OnOverlapEnd, OverlappedActor) == 0x000000, "Member 'PreloadVolume_OnOverlapEnd::OverlappedActor' has a wrong offset!");
static_assert(offsetof(PreloadVolume_OnOverlapEnd, OtherActor) == 0x000008, "Member 'PreloadVolume_OnOverlapEnd::OtherActor' has a wrong offset!");

// Function xrd777.BtlBossUraBossInterface.AttachGunModel
// 0x0001 (0x0001 - 0x0000)
struct BtlBossUraBossInterface_AttachGunModel final
{
public:
	bool                                          IsAttachGunModel;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossUraBossInterface_AttachGunModel) == 0x000001, "Wrong alignment on BtlBossUraBossInterface_AttachGunModel");
static_assert(sizeof(BtlBossUraBossInterface_AttachGunModel) == 0x000001, "Wrong size on BtlBossUraBossInterface_AttachGunModel");
static_assert(offsetof(BtlBossUraBossInterface_AttachGunModel, IsAttachGunModel) == 0x000000, "Member 'BtlBossUraBossInterface_AttachGunModel::IsAttachGunModel' has a wrong offset!");

// Function xrd777.BtlBossUraBossInterface.AttachSkillCamera
// 0x0008 (0x0008 - 0x0000)
struct BtlBossUraBossInterface_AttachSkillCamera final
{
public:
	class AActor*                                 InCameraActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossUraBossInterface_AttachSkillCamera) == 0x000008, "Wrong alignment on BtlBossUraBossInterface_AttachSkillCamera");
static_assert(sizeof(BtlBossUraBossInterface_AttachSkillCamera) == 0x000008, "Wrong size on BtlBossUraBossInterface_AttachSkillCamera");
static_assert(offsetof(BtlBossUraBossInterface_AttachSkillCamera, InCameraActor) == 0x000000, "Member 'BtlBossUraBossInterface_AttachSkillCamera::InCameraActor' has a wrong offset!");

// Function xrd777.BtlBossUraBossInterface.IsUsingCutinFlag
// 0x0001 (0x0001 - 0x0000)
struct BtlBossUraBossInterface_IsUsingCutinFlag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossUraBossInterface_IsUsingCutinFlag) == 0x000001, "Wrong alignment on BtlBossUraBossInterface_IsUsingCutinFlag");
static_assert(sizeof(BtlBossUraBossInterface_IsUsingCutinFlag) == 0x000001, "Wrong size on BtlBossUraBossInterface_IsUsingCutinFlag");
static_assert(offsetof(BtlBossUraBossInterface_IsUsingCutinFlag, ReturnValue) == 0x000000, "Member 'BtlBossUraBossInterface_IsUsingCutinFlag::ReturnValue' has a wrong offset!");

// Function xrd777.BtlBossUraBossInterface.SetIsUsingCutin
// 0x0001 (0x0001 - 0x0000)
struct BtlBossUraBossInterface_SetIsUsingCutin final
{
public:
	bool                                          IsUsingCutin;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlBossUraBossInterface_SetIsUsingCutin) == 0x000001, "Wrong alignment on BtlBossUraBossInterface_SetIsUsingCutin");
static_assert(sizeof(BtlBossUraBossInterface_SetIsUsingCutin) == 0x000001, "Wrong size on BtlBossUraBossInterface_SetIsUsingCutin");
static_assert(offsetof(BtlBossUraBossInterface_SetIsUsingCutin, IsUsingCutin) == 0x000000, "Member 'BtlBossUraBossInterface_SetIsUsingCutin::IsUsingCutin' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcAccuracyRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_CalcAccuracyRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcAccuracyRate) == 0x000004, "Wrong alignment on BtlCalcBase_CalcAccuracyRate");
static_assert(sizeof(BtlCalcBase_CalcAccuracyRate) == 0x000004, "Wrong size on BtlCalcBase_CalcAccuracyRate");
static_assert(offsetof(BtlCalcBase_CalcAccuracyRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CalcAccuracyRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcAllOutAttackDamage
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_CalcAllOutAttackDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcAllOutAttackDamage) == 0x000004, "Wrong alignment on BtlCalcBase_CalcAllOutAttackDamage");
static_assert(sizeof(BtlCalcBase_CalcAllOutAttackDamage) == 0x000004, "Wrong size on BtlCalcBase_CalcAllOutAttackDamage");
static_assert(offsetof(BtlCalcBase_CalcAllOutAttackDamage, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CalcAllOutAttackDamage::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcBadStatusHitRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_CalcBadStatusHitRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcBadStatusHitRate) == 0x000004, "Wrong alignment on BtlCalcBase_CalcBadStatusHitRate");
static_assert(sizeof(BtlCalcBase_CalcBadStatusHitRate) == 0x000004, "Wrong size on BtlCalcBase_CalcBadStatusHitRate");
static_assert(offsetof(BtlCalcBase_CalcBadStatusHitRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CalcBadStatusHitRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcBadStatusRecoveryRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_CalcBadStatusRecoveryRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcBadStatusRecoveryRate) == 0x000004, "Wrong alignment on BtlCalcBase_CalcBadStatusRecoveryRate");
static_assert(sizeof(BtlCalcBase_CalcBadStatusRecoveryRate) == 0x000004, "Wrong size on BtlCalcBase_CalcBadStatusRecoveryRate");
static_assert(offsetof(BtlCalcBase_CalcBadStatusRecoveryRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CalcBadStatusRecoveryRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcCriticalHitRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_CalcCriticalHitRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcCriticalHitRate) == 0x000004, "Wrong alignment on BtlCalcBase_CalcCriticalHitRate");
static_assert(sizeof(BtlCalcBase_CalcCriticalHitRate) == 0x000004, "Wrong size on BtlCalcBase_CalcCriticalHitRate");
static_assert(offsetof(BtlCalcBase_CalcCriticalHitRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CalcCriticalHitRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcDownRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_CalcDownRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcDownRate) == 0x000004, "Wrong alignment on BtlCalcBase_CalcDownRate");
static_assert(sizeof(BtlCalcBase_CalcDownRate) == 0x000004, "Wrong size on BtlCalcBase_CalcDownRate");
static_assert(offsetof(BtlCalcBase_CalcDownRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CalcDownRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcEscapeRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_CalcEscapeRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcEscapeRate) == 0x000004, "Wrong alignment on BtlCalcBase_CalcEscapeRate");
static_assert(sizeof(BtlCalcBase_CalcEscapeRate) == 0x000004, "Wrong size on BtlCalcBase_CalcEscapeRate");
static_assert(offsetof(BtlCalcBase_CalcEscapeRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CalcEscapeRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcExpPersonaLevelUp
// 0x000C (0x000C - 0x0000)
struct BtlCalcBase_CalcExpPersonaLevelUp final
{
public:
	float                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultLevel;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcExpPersonaLevelUp) == 0x000004, "Wrong alignment on BtlCalcBase_CalcExpPersonaLevelUp");
static_assert(sizeof(BtlCalcBase_CalcExpPersonaLevelUp) == 0x00000C, "Wrong size on BtlCalcBase_CalcExpPersonaLevelUp");
static_assert(offsetof(BtlCalcBase_CalcExpPersonaLevelUp, Level) == 0x000000, "Member 'BtlCalcBase_CalcExpPersonaLevelUp::Level' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_CalcExpPersonaLevelUp, DefaultLevel) == 0x000004, "Member 'BtlCalcBase_CalcExpPersonaLevelUp::DefaultLevel' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_CalcExpPersonaLevelUp, ReturnValue) == 0x000008, "Member 'BtlCalcBase_CalcExpPersonaLevelUp::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcHealRecovery
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_CalcHealRecovery final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcHealRecovery) == 0x000004, "Wrong alignment on BtlCalcBase_CalcHealRecovery");
static_assert(sizeof(BtlCalcBase_CalcHealRecovery) == 0x000004, "Wrong size on BtlCalcBase_CalcHealRecovery");
static_assert(offsetof(BtlCalcBase_CalcHealRecovery, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CalcHealRecovery::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcMagicDamage
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_CalcMagicDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcMagicDamage) == 0x000004, "Wrong alignment on BtlCalcBase_CalcMagicDamage");
static_assert(sizeof(BtlCalcBase_CalcMagicDamage) == 0x000004, "Wrong size on BtlCalcBase_CalcMagicDamage");
static_assert(offsetof(BtlCalcBase_CalcMagicDamage, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CalcMagicDamage::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcPhysicalDamage
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_CalcPhysicalDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcPhysicalDamage) == 0x000004, "Wrong alignment on BtlCalcBase_CalcPhysicalDamage");
static_assert(sizeof(BtlCalcBase_CalcPhysicalDamage) == 0x000004, "Wrong size on BtlCalcBase_CalcPhysicalDamage");
static_assert(offsetof(BtlCalcBase_CalcPhysicalDamage, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CalcPhysicalDamage::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcRushDamage
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_CalcRushDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcRushDamage) == 0x000004, "Wrong alignment on BtlCalcBase_CalcRushDamage");
static_assert(sizeof(BtlCalcBase_CalcRushDamage) == 0x000004, "Wrong size on BtlCalcBase_CalcRushDamage");
static_assert(offsetof(BtlCalcBase_CalcRushDamage, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CalcRushDamage::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CalcTheurgiaSkillDamage
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_CalcTheurgiaSkillDamage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CalcTheurgiaSkillDamage) == 0x000004, "Wrong alignment on BtlCalcBase_CalcTheurgiaSkillDamage");
static_assert(sizeof(BtlCalcBase_CalcTheurgiaSkillDamage) == 0x000004, "Wrong size on BtlCalcBase_CalcTheurgiaSkillDamage");
static_assert(offsetof(BtlCalcBase_CalcTheurgiaSkillDamage, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CalcTheurgiaSkillDamage::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetAllOutAttackSwoonRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_GetAllOutAttackSwoonRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetAllOutAttackSwoonRate) == 0x000004, "Wrong alignment on BtlCalcBase_GetAllOutAttackSwoonRate");
static_assert(sizeof(BtlCalcBase_GetAllOutAttackSwoonRate) == 0x000004, "Wrong size on BtlCalcBase_GetAllOutAttackSwoonRate");
static_assert(offsetof(BtlCalcBase_GetAllOutAttackSwoonRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetAllOutAttackSwoonRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetDamageRateToEnemy
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_GetDamageRateToEnemy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetDamageRateToEnemy) == 0x000004, "Wrong alignment on BtlCalcBase_GetDamageRateToEnemy");
static_assert(sizeof(BtlCalcBase_GetDamageRateToEnemy) == 0x000004, "Wrong size on BtlCalcBase_GetDamageRateToEnemy");
static_assert(offsetof(BtlCalcBase_GetDamageRateToEnemy, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetDamageRateToEnemy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetDamageRateToPlayer
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_GetDamageRateToPlayer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetDamageRateToPlayer) == 0x000004, "Wrong alignment on BtlCalcBase_GetDamageRateToPlayer");
static_assert(sizeof(BtlCalcBase_GetDamageRateToPlayer) == 0x000004, "Wrong size on BtlCalcBase_GetDamageRateToPlayer");
static_assert(offsetof(BtlCalcBase_GetDamageRateToPlayer, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetDamageRateToPlayer::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetDownAgilityForEnemy
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_GetDownAgilityForEnemy final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetDownAgilityForEnemy) == 0x000004, "Wrong alignment on BtlCalcBase_GetDownAgilityForEnemy");
static_assert(sizeof(BtlCalcBase_GetDownAgilityForEnemy) == 0x000004, "Wrong size on BtlCalcBase_GetDownAgilityForEnemy");
static_assert(offsetof(BtlCalcBase_GetDownAgilityForEnemy, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetDownAgilityForEnemy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetEnemyCriticalDamageRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_GetEnemyCriticalDamageRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetEnemyCriticalDamageRate) == 0x000004, "Wrong alignment on BtlCalcBase_GetEnemyCriticalDamageRate");
static_assert(sizeof(BtlCalcBase_GetEnemyCriticalDamageRate) == 0x000004, "Wrong size on BtlCalcBase_GetEnemyCriticalDamageRate");
static_assert(offsetof(BtlCalcBase_GetEnemyCriticalDamageRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetEnemyCriticalDamageRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetEnemyWeakDamageRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_GetEnemyWeakDamageRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetEnemyWeakDamageRate) == 0x000004, "Wrong alignment on BtlCalcBase_GetEnemyWeakDamageRate");
static_assert(sizeof(BtlCalcBase_GetEnemyWeakDamageRate) == 0x000004, "Wrong size on BtlCalcBase_GetEnemyWeakDamageRate");
static_assert(offsetof(BtlCalcBase_GetEnemyWeakDamageRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetEnemyWeakDamageRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetExpRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_GetExpRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetExpRate) == 0x000004, "Wrong alignment on BtlCalcBase_GetExpRate");
static_assert(sizeof(BtlCalcBase_GetExpRate) == 0x000004, "Wrong size on BtlCalcBase_GetExpRate");
static_assert(offsetof(BtlCalcBase_GetExpRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetExpRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetMoneyRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_GetMoneyRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetMoneyRate) == 0x000004, "Wrong alignment on BtlCalcBase_GetMoneyRate");
static_assert(sizeof(BtlCalcBase_GetMoneyRate) == 0x000004, "Wrong size on BtlCalcBase_GetMoneyRate");
static_assert(offsetof(BtlCalcBase_GetMoneyRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetMoneyRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetPlayerCriticalDamageRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_GetPlayerCriticalDamageRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetPlayerCriticalDamageRate) == 0x000004, "Wrong alignment on BtlCalcBase_GetPlayerCriticalDamageRate");
static_assert(sizeof(BtlCalcBase_GetPlayerCriticalDamageRate) == 0x000004, "Wrong size on BtlCalcBase_GetPlayerCriticalDamageRate");
static_assert(offsetof(BtlCalcBase_GetPlayerCriticalDamageRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetPlayerCriticalDamageRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetPlayerWeakDamageRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_GetPlayerWeakDamageRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetPlayerWeakDamageRate) == 0x000004, "Wrong alignment on BtlCalcBase_GetPlayerWeakDamageRate");
static_assert(sizeof(BtlCalcBase_GetPlayerWeakDamageRate) == 0x000004, "Wrong size on BtlCalcBase_GetPlayerWeakDamageRate");
static_assert(offsetof(BtlCalcBase_GetPlayerWeakDamageRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetPlayerWeakDamageRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetSaleMerchMoneyRate
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_GetSaleMerchMoneyRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetSaleMerchMoneyRate) == 0x000004, "Wrong alignment on BtlCalcBase_GetSaleMerchMoneyRate");
static_assert(sizeof(BtlCalcBase_GetSaleMerchMoneyRate) == 0x000004, "Wrong size on BtlCalcBase_GetSaleMerchMoneyRate");
static_assert(offsetof(BtlCalcBase_GetSaleMerchMoneyRate, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetSaleMerchMoneyRate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.AttackRatioByANGER
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_AttackRatioByANGER final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_AttackRatioByANGER) == 0x000004, "Wrong alignment on BtlCalcBase_AttackRatioByANGER");
static_assert(sizeof(BtlCalcBase_AttackRatioByANGER) == 0x000004, "Wrong size on BtlCalcBase_AttackRatioByANGER");
static_assert(offsetof(BtlCalcBase_AttackRatioByANGER, ReturnValue) == 0x000000, "Member 'BtlCalcBase_AttackRatioByANGER::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.AttackRatioByOVERLIMIT
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_AttackRatioByOVERLIMIT final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_AttackRatioByOVERLIMIT) == 0x000004, "Wrong alignment on BtlCalcBase_AttackRatioByOVERLIMIT");
static_assert(sizeof(BtlCalcBase_AttackRatioByOVERLIMIT) == 0x000004, "Wrong size on BtlCalcBase_AttackRatioByOVERLIMIT");
static_assert(offsetof(BtlCalcBase_AttackRatioByOVERLIMIT, ReturnValue) == 0x000000, "Member 'BtlCalcBase_AttackRatioByOVERLIMIT::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.AttackRatioByUPSET
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_AttackRatioByUPSET final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_AttackRatioByUPSET) == 0x000004, "Wrong alignment on BtlCalcBase_AttackRatioByUPSET");
static_assert(sizeof(BtlCalcBase_AttackRatioByUPSET) == 0x000004, "Wrong size on BtlCalcBase_AttackRatioByUPSET");
static_assert(offsetof(BtlCalcBase_AttackRatioByUPSET, ReturnValue) == 0x000000, "Member 'BtlCalcBase_AttackRatioByUPSET::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CheckAttackerIsEnemy
// 0x0001 (0x0001 - 0x0000)
struct BtlCalcBase_CheckAttackerIsEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CheckAttackerIsEnemy) == 0x000001, "Wrong alignment on BtlCalcBase_CheckAttackerIsEnemy");
static_assert(sizeof(BtlCalcBase_CheckAttackerIsEnemy) == 0x000001, "Wrong size on BtlCalcBase_CheckAttackerIsEnemy");
static_assert(offsetof(BtlCalcBase_CheckAttackerIsEnemy, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CheckAttackerIsEnemy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CheckSkillIsAttack
// 0x0001 (0x0001 - 0x0000)
struct BtlCalcBase_CheckSkillIsAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CheckSkillIsAttack) == 0x000001, "Wrong alignment on BtlCalcBase_CheckSkillIsAttack");
static_assert(sizeof(BtlCalcBase_CheckSkillIsAttack) == 0x000001, "Wrong size on BtlCalcBase_CheckSkillIsAttack");
static_assert(offsetof(BtlCalcBase_CheckSkillIsAttack, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CheckSkillIsAttack::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.CheckTargetIsEnemy
// 0x0001 (0x0001 - 0x0000)
struct BtlCalcBase_CheckTargetIsEnemy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_CheckTargetIsEnemy) == 0x000001, "Wrong alignment on BtlCalcBase_CheckTargetIsEnemy");
static_assert(sizeof(BtlCalcBase_CheckTargetIsEnemy) == 0x000001, "Wrong size on BtlCalcBase_CheckTargetIsEnemy");
static_assert(offsetof(BtlCalcBase_CheckTargetIsEnemy, ReturnValue) == 0x000000, "Member 'BtlCalcBase_CheckTargetIsEnemy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.DamageRatioByANGER
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_DamageRatioByANGER final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_DamageRatioByANGER) == 0x000004, "Wrong alignment on BtlCalcBase_DamageRatioByANGER");
static_assert(sizeof(BtlCalcBase_DamageRatioByANGER) == 0x000004, "Wrong size on BtlCalcBase_DamageRatioByANGER");
static_assert(offsetof(BtlCalcBase_DamageRatioByANGER, ReturnValue) == 0x000000, "Member 'BtlCalcBase_DamageRatioByANGER::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.DamageRatioByOVERHEAT
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_DamageRatioByOVERHEAT final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_DamageRatioByOVERHEAT) == 0x000004, "Wrong alignment on BtlCalcBase_DamageRatioByOVERHEAT");
static_assert(sizeof(BtlCalcBase_DamageRatioByOVERHEAT) == 0x000004, "Wrong size on BtlCalcBase_DamageRatioByOVERHEAT");
static_assert(offsetof(BtlCalcBase_DamageRatioByOVERHEAT, ReturnValue) == 0x000000, "Member 'BtlCalcBase_DamageRatioByOVERHEAT::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.DamageRatioByOVERLIMIT
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_DamageRatioByOVERLIMIT final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_DamageRatioByOVERLIMIT) == 0x000004, "Wrong alignment on BtlCalcBase_DamageRatioByOVERLIMIT");
static_assert(sizeof(BtlCalcBase_DamageRatioByOVERLIMIT) == 0x000004, "Wrong size on BtlCalcBase_DamageRatioByOVERLIMIT");
static_assert(offsetof(BtlCalcBase_DamageRatioByOVERLIMIT, ReturnValue) == 0x000000, "Member 'BtlCalcBase_DamageRatioByOVERLIMIT::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.DamageRatioByUPSET
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_DamageRatioByUPSET final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_DamageRatioByUPSET) == 0x000004, "Wrong alignment on BtlCalcBase_DamageRatioByUPSET");
static_assert(sizeof(BtlCalcBase_DamageRatioByUPSET) == 0x000004, "Wrong size on BtlCalcBase_DamageRatioByUPSET");
static_assert(offsetof(BtlCalcBase_DamageRatioByUPSET, ReturnValue) == 0x000000, "Member 'BtlCalcBase_DamageRatioByUPSET::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetAttackSupportRatio
// 0x000C (0x000C - 0x0000)
struct BtlCalcBase_GetAttackSupportRatio final
{
public:
	bool                                          IsPlayer;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Point;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetAttackSupportRatio) == 0x000004, "Wrong alignment on BtlCalcBase_GetAttackSupportRatio");
static_assert(sizeof(BtlCalcBase_GetAttackSupportRatio) == 0x00000C, "Wrong size on BtlCalcBase_GetAttackSupportRatio");
static_assert(offsetof(BtlCalcBase_GetAttackSupportRatio, IsPlayer) == 0x000000, "Member 'BtlCalcBase_GetAttackSupportRatio::IsPlayer' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetAttackSupportRatio, Point) == 0x000004, "Member 'BtlCalcBase_GetAttackSupportRatio::Point' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetAttackSupportRatio, ReturnValue) == 0x000008, "Member 'BtlCalcBase_GetAttackSupportRatio::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetDefenseSupportRatio
// 0x000C (0x000C - 0x0000)
struct BtlCalcBase_GetDefenseSupportRatio final
{
public:
	bool                                          IsPlayer;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Point;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetDefenseSupportRatio) == 0x000004, "Wrong alignment on BtlCalcBase_GetDefenseSupportRatio");
static_assert(sizeof(BtlCalcBase_GetDefenseSupportRatio) == 0x00000C, "Wrong size on BtlCalcBase_GetDefenseSupportRatio");
static_assert(offsetof(BtlCalcBase_GetDefenseSupportRatio, IsPlayer) == 0x000000, "Member 'BtlCalcBase_GetDefenseSupportRatio::IsPlayer' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetDefenseSupportRatio, Point) == 0x000004, "Member 'BtlCalcBase_GetDefenseSupportRatio::Point' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetDefenseSupportRatio, ReturnValue) == 0x000008, "Member 'BtlCalcBase_GetDefenseSupportRatio::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetDifficulty
// 0x0001 (0x0001 - 0x0000)
struct BtlCalcBase_GetDifficulty final
{
public:
	EBtlGameDifficulty                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetDifficulty) == 0x000001, "Wrong alignment on BtlCalcBase_GetDifficulty");
static_assert(sizeof(BtlCalcBase_GetDifficulty) == 0x000001, "Wrong size on BtlCalcBase_GetDifficulty");
static_assert(offsetof(BtlCalcBase_GetDifficulty, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetDifficulty::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetFullmoonSkillPowerRatio
// 0x0008 (0x0008 - 0x0000)
struct BtlCalcBase_GetFullmoonSkillPowerRatio final
{
public:
	int32                                         MoonAge;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetFullmoonSkillPowerRatio) == 0x000004, "Wrong alignment on BtlCalcBase_GetFullmoonSkillPowerRatio");
static_assert(sizeof(BtlCalcBase_GetFullmoonSkillPowerRatio) == 0x000008, "Wrong size on BtlCalcBase_GetFullmoonSkillPowerRatio");
static_assert(offsetof(BtlCalcBase_GetFullmoonSkillPowerRatio, MoonAge) == 0x000000, "Member 'BtlCalcBase_GetFullmoonSkillPowerRatio::MoonAge' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetFullmoonSkillPowerRatio, ReturnValue) == 0x000004, "Member 'BtlCalcBase_GetFullmoonSkillPowerRatio::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetLevelAccuracyRatio
// 0x000C (0x000C - 0x0000)
struct BtlCalcBase_GetLevelAccuracyRatio final
{
public:
	int32                                         LevelAttacker;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelTarget;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetLevelAccuracyRatio) == 0x000004, "Wrong alignment on BtlCalcBase_GetLevelAccuracyRatio");
static_assert(sizeof(BtlCalcBase_GetLevelAccuracyRatio) == 0x00000C, "Wrong size on BtlCalcBase_GetLevelAccuracyRatio");
static_assert(offsetof(BtlCalcBase_GetLevelAccuracyRatio, LevelAttacker) == 0x000000, "Member 'BtlCalcBase_GetLevelAccuracyRatio::LevelAttacker' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetLevelAccuracyRatio, LevelTarget) == 0x000004, "Member 'BtlCalcBase_GetLevelAccuracyRatio::LevelTarget' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetLevelAccuracyRatio, ReturnValue) == 0x000008, "Member 'BtlCalcBase_GetLevelAccuracyRatio::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetLevelDamageBossRatio
// 0x000C (0x000C - 0x0000)
struct BtlCalcBase_GetLevelDamageBossRatio final
{
public:
	int32                                         LevelAttacker;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelTarget;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetLevelDamageBossRatio) == 0x000004, "Wrong alignment on BtlCalcBase_GetLevelDamageBossRatio");
static_assert(sizeof(BtlCalcBase_GetLevelDamageBossRatio) == 0x00000C, "Wrong size on BtlCalcBase_GetLevelDamageBossRatio");
static_assert(offsetof(BtlCalcBase_GetLevelDamageBossRatio, LevelAttacker) == 0x000000, "Member 'BtlCalcBase_GetLevelDamageBossRatio::LevelAttacker' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetLevelDamageBossRatio, LevelTarget) == 0x000004, "Member 'BtlCalcBase_GetLevelDamageBossRatio::LevelTarget' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetLevelDamageBossRatio, ReturnValue) == 0x000008, "Member 'BtlCalcBase_GetLevelDamageBossRatio::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetLevelDamageRatio
// 0x000C (0x000C - 0x0000)
struct BtlCalcBase_GetLevelDamageRatio final
{
public:
	int32                                         LevelAttacker;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelTarget;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetLevelDamageRatio) == 0x000004, "Wrong alignment on BtlCalcBase_GetLevelDamageRatio");
static_assert(sizeof(BtlCalcBase_GetLevelDamageRatio) == 0x00000C, "Wrong size on BtlCalcBase_GetLevelDamageRatio");
static_assert(offsetof(BtlCalcBase_GetLevelDamageRatio, LevelAttacker) == 0x000000, "Member 'BtlCalcBase_GetLevelDamageRatio::LevelAttacker' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetLevelDamageRatio, LevelTarget) == 0x000004, "Member 'BtlCalcBase_GetLevelDamageRatio::LevelTarget' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetLevelDamageRatio, ReturnValue) == 0x000008, "Member 'BtlCalcBase_GetLevelDamageRatio::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetLevelExpRatio
// 0x0008 (0x0008 - 0x0000)
struct BtlCalcBase_GetLevelExpRatio final
{
public:
	int32                                         LevelDifference;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetLevelExpRatio) == 0x000004, "Wrong alignment on BtlCalcBase_GetLevelExpRatio");
static_assert(sizeof(BtlCalcBase_GetLevelExpRatio) == 0x000008, "Wrong size on BtlCalcBase_GetLevelExpRatio");
static_assert(offsetof(BtlCalcBase_GetLevelExpRatio, LevelDifference) == 0x000000, "Member 'BtlCalcBase_GetLevelExpRatio::LevelDifference' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetLevelExpRatio, ReturnValue) == 0x000004, "Member 'BtlCalcBase_GetLevelExpRatio::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetMagicBonusDamage
// 0x0008 (0x0008 - 0x0000)
struct BtlCalcBase_GetMagicBonusDamage final
{
public:
	int32                                         MagicAttacker;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetMagicBonusDamage) == 0x000004, "Wrong alignment on BtlCalcBase_GetMagicBonusDamage");
static_assert(sizeof(BtlCalcBase_GetMagicBonusDamage) == 0x000008, "Wrong size on BtlCalcBase_GetMagicBonusDamage");
static_assert(offsetof(BtlCalcBase_GetMagicBonusDamage, MagicAttacker) == 0x000000, "Member 'BtlCalcBase_GetMagicBonusDamage::MagicAttacker' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetMagicBonusDamage, ReturnValue) == 0x000004, "Member 'BtlCalcBase_GetMagicBonusDamage::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetMagicBonusRecovery
// 0x0008 (0x0008 - 0x0000)
struct BtlCalcBase_GetMagicBonusRecovery final
{
public:
	int32                                         MagicAttacker;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetMagicBonusRecovery) == 0x000004, "Wrong alignment on BtlCalcBase_GetMagicBonusRecovery");
static_assert(sizeof(BtlCalcBase_GetMagicBonusRecovery) == 0x000008, "Wrong size on BtlCalcBase_GetMagicBonusRecovery");
static_assert(offsetof(BtlCalcBase_GetMagicBonusRecovery, MagicAttacker) == 0x000000, "Member 'BtlCalcBase_GetMagicBonusRecovery::MagicAttacker' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetMagicBonusRecovery, ReturnValue) == 0x000004, "Member 'BtlCalcBase_GetMagicBonusRecovery::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetNewmoonSkillPowerRatio
// 0x0008 (0x0008 - 0x0000)
struct BtlCalcBase_GetNewmoonSkillPowerRatio final
{
public:
	int32                                         MoonAge;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetNewmoonSkillPowerRatio) == 0x000004, "Wrong alignment on BtlCalcBase_GetNewmoonSkillPowerRatio");
static_assert(sizeof(BtlCalcBase_GetNewmoonSkillPowerRatio) == 0x000008, "Wrong size on BtlCalcBase_GetNewmoonSkillPowerRatio");
static_assert(offsetof(BtlCalcBase_GetNewmoonSkillPowerRatio, MoonAge) == 0x000000, "Member 'BtlCalcBase_GetNewmoonSkillPowerRatio::MoonAge' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetNewmoonSkillPowerRatio, ReturnValue) == 0x000004, "Member 'BtlCalcBase_GetNewmoonSkillPowerRatio::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetParam
// 0x000C (0x000C - 0x0000)
struct BtlCalcBase_GetParam final
{
public:
	EBtlCalcParamType                             Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Param;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetParam) == 0x000004, "Wrong alignment on BtlCalcBase_GetParam");
static_assert(sizeof(BtlCalcBase_GetParam) == 0x00000C, "Wrong size on BtlCalcBase_GetParam");
static_assert(offsetof(BtlCalcBase_GetParam, Type) == 0x000000, "Member 'BtlCalcBase_GetParam::Type' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetParam, Param) == 0x000004, "Member 'BtlCalcBase_GetParam::Param' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetParam, ReturnValue) == 0x000008, "Member 'BtlCalcBase_GetParam::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetShuffleTimeMajorPercent
// 0x0008 (0x0008 - 0x0000)
struct BtlCalcBase_GetShuffleTimeMajorPercent final
{
public:
	int32                                         EncountNumFromLastMajor;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetShuffleTimeMajorPercent) == 0x000004, "Wrong alignment on BtlCalcBase_GetShuffleTimeMajorPercent");
static_assert(sizeof(BtlCalcBase_GetShuffleTimeMajorPercent) == 0x000008, "Wrong size on BtlCalcBase_GetShuffleTimeMajorPercent");
static_assert(offsetof(BtlCalcBase_GetShuffleTimeMajorPercent, EncountNumFromLastMajor) == 0x000000, "Member 'BtlCalcBase_GetShuffleTimeMajorPercent::EncountNumFromLastMajor' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetShuffleTimeMajorPercent, ReturnValue) == 0x000004, "Member 'BtlCalcBase_GetShuffleTimeMajorPercent::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetShuffleTimeOccurPercent
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_GetShuffleTimeOccurPercent final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetShuffleTimeOccurPercent) == 0x000004, "Wrong alignment on BtlCalcBase_GetShuffleTimeOccurPercent");
static_assert(sizeof(BtlCalcBase_GetShuffleTimeOccurPercent) == 0x000004, "Wrong size on BtlCalcBase_GetShuffleTimeOccurPercent");
static_assert(offsetof(BtlCalcBase_GetShuffleTimeOccurPercent, ReturnValue) == 0x000000, "Member 'BtlCalcBase_GetShuffleTimeOccurPercent::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.GetSpeedSupportRatio
// 0x000C (0x000C - 0x0000)
struct BtlCalcBase_GetSpeedSupportRatio final
{
public:
	bool                                          IsPlayer;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Point;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_GetSpeedSupportRatio) == 0x000004, "Wrong alignment on BtlCalcBase_GetSpeedSupportRatio");
static_assert(sizeof(BtlCalcBase_GetSpeedSupportRatio) == 0x00000C, "Wrong size on BtlCalcBase_GetSpeedSupportRatio");
static_assert(offsetof(BtlCalcBase_GetSpeedSupportRatio, IsPlayer) == 0x000000, "Member 'BtlCalcBase_GetSpeedSupportRatio::IsPlayer' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetSpeedSupportRatio, Point) == 0x000004, "Member 'BtlCalcBase_GetSpeedSupportRatio::Point' has a wrong offset!");
static_assert(offsetof(BtlCalcBase_GetSpeedSupportRatio, ReturnValue) == 0x000008, "Member 'BtlCalcBase_GetSpeedSupportRatio::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.RecoveryRatioFromANGER
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_RecoveryRatioFromANGER final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_RecoveryRatioFromANGER) == 0x000004, "Wrong alignment on BtlCalcBase_RecoveryRatioFromANGER");
static_assert(sizeof(BtlCalcBase_RecoveryRatioFromANGER) == 0x000004, "Wrong size on BtlCalcBase_RecoveryRatioFromANGER");
static_assert(offsetof(BtlCalcBase_RecoveryRatioFromANGER, ReturnValue) == 0x000000, "Member 'BtlCalcBase_RecoveryRatioFromANGER::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.RecoveryRatioFromCHARM
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_RecoveryRatioFromCHARM final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_RecoveryRatioFromCHARM) == 0x000004, "Wrong alignment on BtlCalcBase_RecoveryRatioFromCHARM");
static_assert(sizeof(BtlCalcBase_RecoveryRatioFromCHARM) == 0x000004, "Wrong size on BtlCalcBase_RecoveryRatioFromCHARM");
static_assert(offsetof(BtlCalcBase_RecoveryRatioFromCHARM, ReturnValue) == 0x000000, "Member 'BtlCalcBase_RecoveryRatioFromCHARM::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.RecoveryRatioFromFEAR
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_RecoveryRatioFromFEAR final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_RecoveryRatioFromFEAR) == 0x000004, "Wrong alignment on BtlCalcBase_RecoveryRatioFromFEAR");
static_assert(sizeof(BtlCalcBase_RecoveryRatioFromFEAR) == 0x000004, "Wrong size on BtlCalcBase_RecoveryRatioFromFEAR");
static_assert(offsetof(BtlCalcBase_RecoveryRatioFromFEAR, ReturnValue) == 0x000000, "Member 'BtlCalcBase_RecoveryRatioFromFEAR::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.RecoveryRatioFromPANIC
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_RecoveryRatioFromPANIC final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_RecoveryRatioFromPANIC) == 0x000004, "Wrong alignment on BtlCalcBase_RecoveryRatioFromPANIC");
static_assert(sizeof(BtlCalcBase_RecoveryRatioFromPANIC) == 0x000004, "Wrong size on BtlCalcBase_RecoveryRatioFromPANIC");
static_assert(offsetof(BtlCalcBase_RecoveryRatioFromPANIC, ReturnValue) == 0x000000, "Member 'BtlCalcBase_RecoveryRatioFromPANIC::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCalcBase.RecoveryRatioFromUPSET
// 0x0004 (0x0004 - 0x0000)
struct BtlCalcBase_RecoveryRatioFromUPSET final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCalcBase_RecoveryRatioFromUPSET) == 0x000004, "Wrong alignment on BtlCalcBase_RecoveryRatioFromUPSET");
static_assert(sizeof(BtlCalcBase_RecoveryRatioFromUPSET) == 0x000004, "Wrong size on BtlCalcBase_RecoveryRatioFromUPSET");
static_assert(offsetof(BtlCalcBase_RecoveryRatioFromUPSET, ReturnValue) == 0x000000, "Member 'BtlCalcBase_RecoveryRatioFromUPSET::ReturnValue' has a wrong offset!");

// Function xrd777.SeqBpFuncLib.CallBattle
// 0x0028 (0x0028 - 0x0000)
struct SeqBpFuncLib_CallBattle final
{
public:
	int32                                         EncountID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeqBpFuncLib_CallBattle) == 0x000008, "Wrong alignment on SeqBpFuncLib_CallBattle");
static_assert(sizeof(SeqBpFuncLib_CallBattle) == 0x000028, "Wrong size on SeqBpFuncLib_CallBattle");
static_assert(offsetof(SeqBpFuncLib_CallBattle, EncountID) == 0x000000, "Member 'SeqBpFuncLib_CallBattle::EncountID' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallBattle, WorldContextObject) == 0x000008, "Member 'SeqBpFuncLib_CallBattle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallBattle, LatentInfo) == 0x000010, "Member 'SeqBpFuncLib_CallBattle::LatentInfo' has a wrong offset!");

// Function xrd777.SeqBpFuncLib.CallEvent
// 0x0028 (0x0028 - 0x0000)
struct SeqBpFuncLib_CallEvent final
{
public:
	int32                                         EventMajor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinor;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeqBpFuncLib_CallEvent) == 0x000008, "Wrong alignment on SeqBpFuncLib_CallEvent");
static_assert(sizeof(SeqBpFuncLib_CallEvent) == 0x000028, "Wrong size on SeqBpFuncLib_CallEvent");
static_assert(offsetof(SeqBpFuncLib_CallEvent, EventMajor) == 0x000000, "Member 'SeqBpFuncLib_CallEvent::EventMajor' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallEvent, EventMinor) == 0x000004, "Member 'SeqBpFuncLib_CallEvent::EventMinor' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallEvent, WorldContextObject) == 0x000008, "Member 'SeqBpFuncLib_CallEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallEvent, LatentInfo) == 0x000010, "Member 'SeqBpFuncLib_CallEvent::LatentInfo' has a wrong offset!");

// Function xrd777.SeqBpFuncLib.CallEventCmm
// 0x0028 (0x0028 - 0x0000)
struct SeqBpFuncLib_CallEventCmm final
{
public:
	int32                                         EventMajor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventMinor;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeqBpFuncLib_CallEventCmm) == 0x000008, "Wrong alignment on SeqBpFuncLib_CallEventCmm");
static_assert(sizeof(SeqBpFuncLib_CallEventCmm) == 0x000028, "Wrong size on SeqBpFuncLib_CallEventCmm");
static_assert(offsetof(SeqBpFuncLib_CallEventCmm, EventMajor) == 0x000000, "Member 'SeqBpFuncLib_CallEventCmm::EventMajor' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallEventCmm, EventMinor) == 0x000004, "Member 'SeqBpFuncLib_CallEventCmm::EventMinor' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallEventCmm, WorldContextObject) == 0x000008, "Member 'SeqBpFuncLib_CallEventCmm::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallEventCmm, LatentInfo) == 0x000010, "Member 'SeqBpFuncLib_CallEventCmm::LatentInfo' has a wrong offset!");

// Function xrd777.SeqBpFuncLib.CallField
// 0x000C (0x000C - 0x0000)
struct SeqBpFuncLib_CallField final
{
public:
	int32                                         FieldMajor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinor;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerStartID;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeqBpFuncLib_CallField) == 0x000004, "Wrong alignment on SeqBpFuncLib_CallField");
static_assert(sizeof(SeqBpFuncLib_CallField) == 0x00000C, "Wrong size on SeqBpFuncLib_CallField");
static_assert(offsetof(SeqBpFuncLib_CallField, FieldMajor) == 0x000000, "Member 'SeqBpFuncLib_CallField::FieldMajor' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallField, FieldMinor) == 0x000004, "Member 'SeqBpFuncLib_CallField::FieldMinor' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallField, PlayerStartID) == 0x000008, "Member 'SeqBpFuncLib_CallField::PlayerStartID' has a wrong offset!");

// Function xrd777.SeqBpFuncLib.CallItemShop
// 0x0020 (0x0020 - 0x0000)
struct SeqBpFuncLib_CallItemShop final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeqBpFuncLib_CallItemShop) == 0x000008, "Wrong alignment on SeqBpFuncLib_CallItemShop");
static_assert(sizeof(SeqBpFuncLib_CallItemShop) == 0x000020, "Wrong size on SeqBpFuncLib_CallItemShop");
static_assert(offsetof(SeqBpFuncLib_CallItemShop, WorldContextObject) == 0x000000, "Member 'SeqBpFuncLib_CallItemShop::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallItemShop, LatentInfo) == 0x000008, "Member 'SeqBpFuncLib_CallItemShop::LatentInfo' has a wrong offset!");

// Function xrd777.SeqBpFuncLib.CallKeyfreeEvent
// 0x0010 (0x0010 - 0x0000)
struct SeqBpFuncLib_CallKeyfreeEvent final
{
public:
	int32                                         FieldMajor;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinor;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KeyfreeEventID;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerStartID;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeqBpFuncLib_CallKeyfreeEvent) == 0x000004, "Wrong alignment on SeqBpFuncLib_CallKeyfreeEvent");
static_assert(sizeof(SeqBpFuncLib_CallKeyfreeEvent) == 0x000010, "Wrong size on SeqBpFuncLib_CallKeyfreeEvent");
static_assert(offsetof(SeqBpFuncLib_CallKeyfreeEvent, FieldMajor) == 0x000000, "Member 'SeqBpFuncLib_CallKeyfreeEvent::FieldMajor' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallKeyfreeEvent, FieldMinor) == 0x000004, "Member 'SeqBpFuncLib_CallKeyfreeEvent::FieldMinor' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallKeyfreeEvent, KeyfreeEventID) == 0x000008, "Member 'SeqBpFuncLib_CallKeyfreeEvent::KeyfreeEventID' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallKeyfreeEvent, PlayerStartID) == 0x00000C, "Member 'SeqBpFuncLib_CallKeyfreeEvent::PlayerStartID' has a wrong offset!");

// Function xrd777.SeqBpFuncLib.CallWeaponShop
// 0x0020 (0x0020 - 0x0000)
struct SeqBpFuncLib_CallWeaponShop final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeqBpFuncLib_CallWeaponShop) == 0x000008, "Wrong alignment on SeqBpFuncLib_CallWeaponShop");
static_assert(sizeof(SeqBpFuncLib_CallWeaponShop) == 0x000020, "Wrong size on SeqBpFuncLib_CallWeaponShop");
static_assert(offsetof(SeqBpFuncLib_CallWeaponShop, WorldContextObject) == 0x000000, "Member 'SeqBpFuncLib_CallWeaponShop::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CallWeaponShop, LatentInfo) == 0x000008, "Member 'SeqBpFuncLib_CallWeaponShop::LatentInfo' has a wrong offset!");

// Function xrd777.SeqBpFuncLib.CheckAstreaProgressOver
// 0x0008 (0x0008 - 0x0000)
struct SeqBpFuncLib_CheckAstreaProgressOver final
{
public:
	int32                                         CheckProgress;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeqBpFuncLib_CheckAstreaProgressOver) == 0x000004, "Wrong alignment on SeqBpFuncLib_CheckAstreaProgressOver");
static_assert(sizeof(SeqBpFuncLib_CheckAstreaProgressOver) == 0x000008, "Wrong size on SeqBpFuncLib_CheckAstreaProgressOver");
static_assert(offsetof(SeqBpFuncLib_CheckAstreaProgressOver, CheckProgress) == 0x000000, "Member 'SeqBpFuncLib_CheckAstreaProgressOver::CheckProgress' has a wrong offset!");
static_assert(offsetof(SeqBpFuncLib_CheckAstreaProgressOver, ReturnValue) == 0x000004, "Member 'SeqBpFuncLib_CheckAstreaProgressOver::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCamera.GetCameraMainCharacter
// 0x0008 (0x0008 - 0x0000)
struct BtlCamera_GetCameraMainCharacter final
{
public:
	class ABtlActor*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCamera_GetCameraMainCharacter) == 0x000008, "Wrong alignment on BtlCamera_GetCameraMainCharacter");
static_assert(sizeof(BtlCamera_GetCameraMainCharacter) == 0x000008, "Wrong size on BtlCamera_GetCameraMainCharacter");
static_assert(offsetof(BtlCamera_GetCameraMainCharacter, ReturnValue) == 0x000000, "Member 'BtlCamera_GetCameraMainCharacter::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCamera.GetCameraTargets
// 0x0010 (0x0010 - 0x0000)
struct BtlCamera_GetCameraTargets final
{
public:
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCamera_GetCameraTargets) == 0x000008, "Wrong alignment on BtlCamera_GetCameraTargets");
static_assert(sizeof(BtlCamera_GetCameraTargets) == 0x000010, "Wrong size on BtlCamera_GetCameraTargets");
static_assert(offsetof(BtlCamera_GetCameraTargets, ReturnValue) == 0x000000, "Member 'BtlCamera_GetCameraTargets::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCamera.SetCameraMainCharacter
// 0x0008 (0x0008 - 0x0000)
struct BtlCamera_SetCameraMainCharacter final
{
public:
	class ABtlActor*                              CameraMainCharacter_0;                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCamera_SetCameraMainCharacter) == 0x000008, "Wrong alignment on BtlCamera_SetCameraMainCharacter");
static_assert(sizeof(BtlCamera_SetCameraMainCharacter) == 0x000008, "Wrong size on BtlCamera_SetCameraMainCharacter");
static_assert(offsetof(BtlCamera_SetCameraMainCharacter, CameraMainCharacter_0) == 0x000000, "Member 'BtlCamera_SetCameraMainCharacter::CameraMainCharacter_0' has a wrong offset!");

// Function xrd777.BtlCamera.SetCameraTargets
// 0x0010 (0x0010 - 0x0000)
struct BtlCamera_SetCameraTargets final
{
public:
	TArray<class ABtlActor*>                      Targets;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCamera_SetCameraTargets) == 0x000008, "Wrong alignment on BtlCamera_SetCameraTargets");
static_assert(sizeof(BtlCamera_SetCameraTargets) == 0x000010, "Wrong size on BtlCamera_SetCameraTargets");
static_assert(offsetof(BtlCamera_SetCameraTargets, Targets) == 0x000000, "Member 'BtlCamera_SetCameraTargets::Targets' has a wrong offset!");

// Function xrd777.BtlCoreComponent.AddUtensilEffect
// 0x0008 (0x0008 - 0x0000)
struct BtlCoreComponent_AddUtensilEffect final
{
public:
	class AAppActor*                              Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_AddUtensilEffect) == 0x000008, "Wrong alignment on BtlCoreComponent_AddUtensilEffect");
static_assert(sizeof(BtlCoreComponent_AddUtensilEffect) == 0x000008, "Wrong size on BtlCoreComponent_AddUtensilEffect");
static_assert(offsetof(BtlCoreComponent_AddUtensilEffect, Target) == 0x000000, "Member 'BtlCoreComponent_AddUtensilEffect::Target' has a wrong offset!");

// Function xrd777.BtlCoreComponent.AffectHighAnalyze
// 0x0008 (0x0008 - 0x0000)
struct BtlCoreComponent_AffectHighAnalyze final
{
public:
	class ABtlActor*                              PTarget;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_AffectHighAnalyze) == 0x000008, "Wrong alignment on BtlCoreComponent_AffectHighAnalyze");
static_assert(sizeof(BtlCoreComponent_AffectHighAnalyze) == 0x000008, "Wrong size on BtlCoreComponent_AffectHighAnalyze");
static_assert(offsetof(BtlCoreComponent_AffectHighAnalyze, PTarget) == 0x000000, "Member 'BtlCoreComponent_AffectHighAnalyze::PTarget' has a wrong offset!");

// Function xrd777.BtlCoreComponent.BattleFadeIn
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_BattleFadeIn final
{
public:
	bool                                          ForceRapid;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_BattleFadeIn) == 0x000001, "Wrong alignment on BtlCoreComponent_BattleFadeIn");
static_assert(sizeof(BtlCoreComponent_BattleFadeIn) == 0x000001, "Wrong size on BtlCoreComponent_BattleFadeIn");
static_assert(offsetof(BtlCoreComponent_BattleFadeIn, ForceRapid) == 0x000000, "Member 'BtlCoreComponent_BattleFadeIn::ForceRapid' has a wrong offset!");

// Function xrd777.BtlCoreComponent.BattleFadeOut
// 0x0002 (0x0002 - 0x0000)
struct BtlCoreComponent_BattleFadeOut final
{
public:
	bool                                          ForceRapid;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          White;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_BattleFadeOut) == 0x000001, "Wrong alignment on BtlCoreComponent_BattleFadeOut");
static_assert(sizeof(BtlCoreComponent_BattleFadeOut) == 0x000002, "Wrong size on BtlCoreComponent_BattleFadeOut");
static_assert(offsetof(BtlCoreComponent_BattleFadeOut, ForceRapid) == 0x000000, "Member 'BtlCoreComponent_BattleFadeOut::ForceRapid' has a wrong offset!");
static_assert(offsetof(BtlCoreComponent_BattleFadeOut, White) == 0x000001, "Member 'BtlCoreComponent_BattleFadeOut::White' has a wrong offset!");

// Function xrd777.BtlCoreComponent.BattleFadeOutSync
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_BattleFadeOutSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_BattleFadeOutSync) == 0x000001, "Wrong alignment on BtlCoreComponent_BattleFadeOutSync");
static_assert(sizeof(BtlCoreComponent_BattleFadeOutSync) == 0x000001, "Wrong size on BtlCoreComponent_BattleFadeOutSync");
static_assert(offsetof(BtlCoreComponent_BattleFadeOutSync, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_BattleFadeOutSync::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.BeginLoadingRecord
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_BeginLoadingRecord final
{
public:
	EBtlLoadingTimeCategory                       Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_BeginLoadingRecord) == 0x000001, "Wrong alignment on BtlCoreComponent_BeginLoadingRecord");
static_assert(sizeof(BtlCoreComponent_BeginLoadingRecord) == 0x000001, "Wrong size on BtlCoreComponent_BeginLoadingRecord");
static_assert(offsetof(BtlCoreComponent_BeginLoadingRecord, Category) == 0x000000, "Member 'BtlCoreComponent_BeginLoadingRecord::Category' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckBattleInProgress
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckBattleInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckBattleInProgress) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckBattleInProgress");
static_assert(sizeof(BtlCoreComponent_CheckBattleInProgress) == 0x000001, "Wrong size on BtlCoreComponent_CheckBattleInProgress");
static_assert(offsetof(BtlCoreComponent_CheckBattleInProgress, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckBattleInProgress::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckBattleProgressToNextBattle
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckBattleProgressToNextBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckBattleProgressToNextBattle) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckBattleProgressToNextBattle");
static_assert(sizeof(BtlCoreComponent_CheckBattleProgressToNextBattle) == 0x000001, "Wrong size on BtlCoreComponent_CheckBattleProgressToNextBattle");
static_assert(offsetof(BtlCoreComponent_CheckBattleProgressToNextBattle, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckBattleProgressToNextBattle::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckEventBattleFinish
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckEventBattleFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckEventBattleFinish) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckEventBattleFinish");
static_assert(sizeof(BtlCoreComponent_CheckEventBattleFinish) == 0x000001, "Wrong size on BtlCoreComponent_CheckEventBattleFinish");
static_assert(offsetof(BtlCoreComponent_CheckEventBattleFinish, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckEventBattleFinish::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckKnockedoutHero
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckKnockedoutHero final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckKnockedoutHero) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckKnockedoutHero");
static_assert(sizeof(BtlCoreComponent_CheckKnockedoutHero) == 0x000001, "Wrong size on BtlCoreComponent_CheckKnockedoutHero");
static_assert(offsetof(BtlCoreComponent_CheckKnockedoutHero, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckKnockedoutHero::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CoordinateBattleCondition
// 0x0024 (0x0024 - 0x0000)
struct BtlCoreComponent_CoordinateBattleCondition final
{
public:
	struct FBtlEncountParam                       EncountParam;                                      // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CoordinateBattleCondition) == 0x000004, "Wrong alignment on BtlCoreComponent_CoordinateBattleCondition");
static_assert(sizeof(BtlCoreComponent_CoordinateBattleCondition) == 0x000024, "Wrong size on BtlCoreComponent_CoordinateBattleCondition");
static_assert(offsetof(BtlCoreComponent_CoordinateBattleCondition, EncountParam) == 0x000000, "Member 'BtlCoreComponent_CoordinateBattleCondition::EncountParam' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CoordinateEncountParam
// 0x0048 (0x0048 - 0x0000)
struct BtlCoreComponent_CoordinateEncountParam final
{
public:
	struct FBtlEncountParam                       Encount;                                           // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBtlEncountParam                       ReturnValue;                                       // 0x0024(0x0024)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CoordinateEncountParam) == 0x000004, "Wrong alignment on BtlCoreComponent_CoordinateEncountParam");
static_assert(sizeof(BtlCoreComponent_CoordinateEncountParam) == 0x000048, "Wrong size on BtlCoreComponent_CoordinateEncountParam");
static_assert(offsetof(BtlCoreComponent_CoordinateEncountParam, Encount) == 0x000000, "Member 'BtlCoreComponent_CoordinateEncountParam::Encount' has a wrong offset!");
static_assert(offsetof(BtlCoreComponent_CoordinateEncountParam, ReturnValue) == 0x000024, "Member 'BtlCoreComponent_CoordinateEncountParam::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.DebugSetCustomDamage
// 0x0004 (0x0004 - 0x0000)
struct BtlCoreComponent_DebugSetCustomDamage final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_DebugSetCustomDamage) == 0x000004, "Wrong alignment on BtlCoreComponent_DebugSetCustomDamage");
static_assert(sizeof(BtlCoreComponent_DebugSetCustomDamage) == 0x000004, "Wrong size on BtlCoreComponent_DebugSetCustomDamage");
static_assert(offsetof(BtlCoreComponent_DebugSetCustomDamage, Damage) == 0x000000, "Member 'BtlCoreComponent_DebugSetCustomDamage::Damage' has a wrong offset!");

// Function xrd777.BtlCoreComponent.FadeoutBGM
// 0x0004 (0x0004 - 0x0000)
struct BtlCoreComponent_FadeoutBGM final
{
public:
	int32                                         FadeFrame;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_FadeoutBGM) == 0x000004, "Wrong alignment on BtlCoreComponent_FadeoutBGM");
static_assert(sizeof(BtlCoreComponent_FadeoutBGM) == 0x000004, "Wrong size on BtlCoreComponent_FadeoutBGM");
static_assert(offsetof(BtlCoreComponent_FadeoutBGM, FadeFrame) == 0x000000, "Member 'BtlCoreComponent_FadeoutBGM::FadeFrame' has a wrong offset!");

// Function xrd777.BtlCoreComponent.FinishLoadingRecord
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_FinishLoadingRecord final
{
public:
	EBtlLoadingTimeCategory                       Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_FinishLoadingRecord) == 0x000001, "Wrong alignment on BtlCoreComponent_FinishLoadingRecord");
static_assert(sizeof(BtlCoreComponent_FinishLoadingRecord) == 0x000001, "Wrong size on BtlCoreComponent_FinishLoadingRecord");
static_assert(offsetof(BtlCoreComponent_FinishLoadingRecord, Category) == 0x000000, "Member 'BtlCoreComponent_FinishLoadingRecord::Category' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetAction
// 0x0008 (0x0008 - 0x0000)
struct BtlCoreComponent_GetAction final
{
public:
	class ABtlActor*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetAction) == 0x000008, "Wrong alignment on BtlCoreComponent_GetAction");
static_assert(sizeof(BtlCoreComponent_GetAction) == 0x000008, "Wrong size on BtlCoreComponent_GetAction");
static_assert(offsetof(BtlCoreComponent_GetAction, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetAction::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetAllCharacterList
// 0x0010 (0x0010 - 0x0000)
struct BtlCoreComponent_GetAllCharacterList final
{
public:
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetAllCharacterList) == 0x000008, "Wrong alignment on BtlCoreComponent_GetAllCharacterList");
static_assert(sizeof(BtlCoreComponent_GetAllCharacterList) == 0x000010, "Wrong size on BtlCoreComponent_GetAllCharacterList");
static_assert(offsetof(BtlCoreComponent_GetAllCharacterList, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetAllCharacterList::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetBossCameraTable
// 0x0008 (0x0008 - 0x0000)
struct BtlCoreComponent_GetBossCameraTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetBossCameraTable) == 0x000008, "Wrong alignment on BtlCoreComponent_GetBossCameraTable");
static_assert(sizeof(BtlCoreComponent_GetBossCameraTable) == 0x000008, "Wrong size on BtlCoreComponent_GetBossCameraTable");
static_assert(offsetof(BtlCoreComponent_GetBossCameraTable, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetBossCameraTable::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetEncountParamForBP
// 0x0024 (0x0024 - 0x0000)
struct BtlCoreComponent_GetEncountParamForBP final
{
public:
	struct FBtlEncountParam                       ReturnValue;                                       // 0x0000(0x0024)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetEncountParamForBP) == 0x000004, "Wrong alignment on BtlCoreComponent_GetEncountParamForBP");
static_assert(sizeof(BtlCoreComponent_GetEncountParamForBP) == 0x000024, "Wrong size on BtlCoreComponent_GetEncountParamForBP");
static_assert(offsetof(BtlCoreComponent_GetEncountParamForBP, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetEncountParamForBP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetEnemyFormationName
// 0x0010 (0x0010 - 0x0000)
struct BtlCoreComponent_GetEnemyFormationName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetEnemyFormationName) == 0x000008, "Wrong alignment on BtlCoreComponent_GetEnemyFormationName");
static_assert(sizeof(BtlCoreComponent_GetEnemyFormationName) == 0x000010, "Wrong size on BtlCoreComponent_GetEnemyFormationName");
static_assert(offsetof(BtlCoreComponent_GetEnemyFormationName, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetEnemyFormationName::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetEnemyList
// 0x0010 (0x0010 - 0x0000)
struct BtlCoreComponent_GetEnemyList final
{
public:
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetEnemyList) == 0x000008, "Wrong alignment on BtlCoreComponent_GetEnemyList");
static_assert(sizeof(BtlCoreComponent_GetEnemyList) == 0x000010, "Wrong size on BtlCoreComponent_GetEnemyList");
static_assert(offsetof(BtlCoreComponent_GetEnemyList, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetEnemyList::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetEventMainAction
// 0x0008 (0x0008 - 0x0000)
struct BtlCoreComponent_GetEventMainAction final
{
public:
	class ABtlActor*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetEventMainAction) == 0x000008, "Wrong alignment on BtlCoreComponent_GetEventMainAction");
static_assert(sizeof(BtlCoreComponent_GetEventMainAction) == 0x000008, "Wrong size on BtlCoreComponent_GetEventMainAction");
static_assert(offsetof(BtlCoreComponent_GetEventMainAction, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetEventMainAction::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetHero
// 0x0008 (0x0008 - 0x0000)
struct BtlCoreComponent_GetHero final
{
public:
	class ABtlActor*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetHero) == 0x000008, "Wrong alignment on BtlCoreComponent_GetHero");
static_assert(sizeof(BtlCoreComponent_GetHero) == 0x000008, "Wrong size on BtlCoreComponent_GetHero");
static_assert(offsetof(BtlCoreComponent_GetHero, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetHero::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetNextAction
// 0x0010 (0x0010 - 0x0000)
struct BtlCoreComponent_GetNextAction final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetNextAction) == 0x000008, "Wrong alignment on BtlCoreComponent_GetNextAction");
static_assert(sizeof(BtlCoreComponent_GetNextAction) == 0x000010, "Wrong size on BtlCoreComponent_GetNextAction");
static_assert(offsetof(BtlCoreComponent_GetNextAction, Index_0) == 0x000000, "Member 'BtlCoreComponent_GetNextAction::Index_0' has a wrong offset!");
static_assert(offsetof(BtlCoreComponent_GetNextAction, ReturnValue) == 0x000008, "Member 'BtlCoreComponent_GetNextAction::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetPhase
// 0x0008 (0x0008 - 0x0000)
struct BtlCoreComponent_GetPhase final
{
public:
	class ABtlPhase*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetPhase) == 0x000008, "Wrong alignment on BtlCoreComponent_GetPhase");
static_assert(sizeof(BtlCoreComponent_GetPhase) == 0x000008, "Wrong size on BtlCoreComponent_GetPhase");
static_assert(offsetof(BtlCoreComponent_GetPhase, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetPhase::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetPlayerList
// 0x0010 (0x0010 - 0x0000)
struct BtlCoreComponent_GetPlayerList final
{
public:
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetPlayerList) == 0x000008, "Wrong alignment on BtlCoreComponent_GetPlayerList");
static_assert(sizeof(BtlCoreComponent_GetPlayerList) == 0x000010, "Wrong size on BtlCoreComponent_GetPlayerList");
static_assert(offsetof(BtlCoreComponent_GetPlayerList, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetPlayerList::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetResultMainPlayer
// 0x0008 (0x0008 - 0x0000)
struct BtlCoreComponent_GetResultMainPlayer final
{
public:
	class ABtlActor*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetResultMainPlayer) == 0x000008, "Wrong alignment on BtlCoreComponent_GetResultMainPlayer");
static_assert(sizeof(BtlCoreComponent_GetResultMainPlayer) == 0x000008, "Wrong size on BtlCoreComponent_GetResultMainPlayer");
static_assert(offsetof(BtlCoreComponent_GetResultMainPlayer, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetResultMainPlayer::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.LoadData
// 0x0024 (0x0024 - 0x0000)
struct BtlCoreComponent_LoadData final
{
public:
	struct FBtlEncountParam                       EncountParam;                                      // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_LoadData) == 0x000004, "Wrong alignment on BtlCoreComponent_LoadData");
static_assert(sizeof(BtlCoreComponent_LoadData) == 0x000024, "Wrong size on BtlCoreComponent_LoadData");
static_assert(offsetof(BtlCoreComponent_LoadData, EncountParam) == 0x000000, "Member 'BtlCoreComponent_LoadData::EncountParam' has a wrong offset!");

// Function xrd777.BtlCoreComponent.LoadEnemyData
// 0x0024 (0x0024 - 0x0000)
struct BtlCoreComponent_LoadEnemyData final
{
public:
	struct FBtlEncountParam                       EncountParam;                                      // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_LoadEnemyData) == 0x000004, "Wrong alignment on BtlCoreComponent_LoadEnemyData");
static_assert(sizeof(BtlCoreComponent_LoadEnemyData) == 0x000024, "Wrong size on BtlCoreComponent_LoadEnemyData");
static_assert(offsetof(BtlCoreComponent_LoadEnemyData, EncountParam) == 0x000000, "Member 'BtlCoreComponent_LoadEnemyData::EncountParam' has a wrong offset!");

// Function xrd777.BtlCoreComponent.LoadResidentData
// 0x0024 (0x0024 - 0x0000)
struct BtlCoreComponent_LoadResidentData final
{
public:
	struct FBtlEncountParam                       EncountParam;                                      // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_LoadResidentData) == 0x000004, "Wrong alignment on BtlCoreComponent_LoadResidentData");
static_assert(sizeof(BtlCoreComponent_LoadResidentData) == 0x000024, "Wrong size on BtlCoreComponent_LoadResidentData");
static_assert(offsetof(BtlCoreComponent_LoadResidentData, EncountParam) == 0x000000, "Member 'BtlCoreComponent_LoadResidentData::EncountParam' has a wrong offset!");

// Function xrd777.BtlCoreComponent.RegisterTakeoverCharacter
// 0x0010 (0x0010 - 0x0000)
struct BtlCoreComponent_RegisterTakeoverCharacter final
{
public:
	class ABtlActor*                              Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABtlActor*                              TakeoverFrom;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_RegisterTakeoverCharacter) == 0x000008, "Wrong alignment on BtlCoreComponent_RegisterTakeoverCharacter");
static_assert(sizeof(BtlCoreComponent_RegisterTakeoverCharacter) == 0x000010, "Wrong size on BtlCoreComponent_RegisterTakeoverCharacter");
static_assert(offsetof(BtlCoreComponent_RegisterTakeoverCharacter, Target) == 0x000000, "Member 'BtlCoreComponent_RegisterTakeoverCharacter::Target' has a wrong offset!");
static_assert(offsetof(BtlCoreComponent_RegisterTakeoverCharacter, TakeoverFrom) == 0x000008, "Member 'BtlCoreComponent_RegisterTakeoverCharacter::TakeoverFrom' has a wrong offset!");

// Function xrd777.BtlCoreComponent.Relocation
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_Relocation final
{
public:
	bool                                          PlayerOnly;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_Relocation) == 0x000001, "Wrong alignment on BtlCoreComponent_Relocation");
static_assert(sizeof(BtlCoreComponent_Relocation) == 0x000001, "Wrong size on BtlCoreComponent_Relocation");
static_assert(offsetof(BtlCoreComponent_Relocation, PlayerOnly) == 0x000000, "Member 'BtlCoreComponent_Relocation::PlayerOnly' has a wrong offset!");

// Function xrd777.BtlCoreComponent.RelocationCustom
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_RelocationCustom final
{
public:
	EBtlRelocationType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_RelocationCustom) == 0x000001, "Wrong alignment on BtlCoreComponent_RelocationCustom");
static_assert(sizeof(BtlCoreComponent_RelocationCustom) == 0x000001, "Wrong size on BtlCoreComponent_RelocationCustom");
static_assert(offsetof(BtlCoreComponent_RelocationCustom, Type) == 0x000000, "Member 'BtlCoreComponent_RelocationCustom::Type' has a wrong offset!");

// Function xrd777.BtlCoreComponent.RelocationRequestOnBCDPlay
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_RelocationRequestOnBCDPlay final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_RelocationRequestOnBCDPlay) == 0x000001, "Wrong alignment on BtlCoreComponent_RelocationRequestOnBCDPlay");
static_assert(sizeof(BtlCoreComponent_RelocationRequestOnBCDPlay) == 0x000001, "Wrong size on BtlCoreComponent_RelocationRequestOnBCDPlay");
static_assert(offsetof(BtlCoreComponent_RelocationRequestOnBCDPlay, Enable) == 0x000000, "Member 'BtlCoreComponent_RelocationRequestOnBCDPlay::Enable' has a wrong offset!");

// Function xrd777.BtlCoreComponent.RemoveUtensilEffect
// 0x0008 (0x0008 - 0x0000)
struct BtlCoreComponent_RemoveUtensilEffect final
{
public:
	class AAppActor*                              Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_RemoveUtensilEffect) == 0x000008, "Wrong alignment on BtlCoreComponent_RemoveUtensilEffect");
static_assert(sizeof(BtlCoreComponent_RemoveUtensilEffect) == 0x000008, "Wrong size on BtlCoreComponent_RemoveUtensilEffect");
static_assert(offsetof(BtlCoreComponent_RemoveUtensilEffect, Target) == 0x000000, "Member 'BtlCoreComponent_RemoveUtensilEffect::Target' has a wrong offset!");

// Function xrd777.BtlCoreComponent.RequestBGM
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_RequestBGM final
{
public:
	EBtlBGMType                                   Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_RequestBGM) == 0x000001, "Wrong alignment on BtlCoreComponent_RequestBGM");
static_assert(sizeof(BtlCoreComponent_RequestBGM) == 0x000001, "Wrong size on BtlCoreComponent_RequestBGM");
static_assert(offsetof(BtlCoreComponent_RequestBGM, Type) == 0x000000, "Member 'BtlCoreComponent_RequestBGM::Type' has a wrong offset!");

// Function xrd777.BtlCoreComponent.RequestCutinAging
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_RequestCutinAging final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_RequestCutinAging) == 0x000001, "Wrong alignment on BtlCoreComponent_RequestCutinAging");
static_assert(sizeof(BtlCoreComponent_RequestCutinAging) == 0x000001, "Wrong size on BtlCoreComponent_RequestCutinAging");
static_assert(offsetof(BtlCoreComponent_RequestCutinAging, Enable) == 0x000000, "Member 'BtlCoreComponent_RequestCutinAging::Enable' has a wrong offset!");

// Function xrd777.BtlCoreComponent.RequestEncountProcess
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_RequestEncountProcess final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_RequestEncountProcess) == 0x000001, "Wrong alignment on BtlCoreComponent_RequestEncountProcess");
static_assert(sizeof(BtlCoreComponent_RequestEncountProcess) == 0x000001, "Wrong size on BtlCoreComponent_RequestEncountProcess");
static_assert(offsetof(BtlCoreComponent_RequestEncountProcess, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_RequestEncountProcess::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.RequestPartyPanelVisible
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_RequestPartyPanelVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_RequestPartyPanelVisible) == 0x000001, "Wrong alignment on BtlCoreComponent_RequestPartyPanelVisible");
static_assert(sizeof(BtlCoreComponent_RequestPartyPanelVisible) == 0x000001, "Wrong size on BtlCoreComponent_RequestPartyPanelVisible");
static_assert(offsetof(BtlCoreComponent_RequestPartyPanelVisible, Visible) == 0x000000, "Member 'BtlCoreComponent_RequestPartyPanelVisible::Visible' has a wrong offset!");

// Function xrd777.BtlCoreComponent.RequestRushMode
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_RequestRushMode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_RequestRushMode) == 0x000001, "Wrong alignment on BtlCoreComponent_RequestRushMode");
static_assert(sizeof(BtlCoreComponent_RequestRushMode) == 0x000001, "Wrong size on BtlCoreComponent_RequestRushMode");
static_assert(offsetof(BtlCoreComponent_RequestRushMode, Enable) == 0x000000, "Member 'BtlCoreComponent_RequestRushMode::Enable' has a wrong offset!");

// Function xrd777.BtlCoreComponent.RequestSituationHelp
// 0x0010 (0x0010 - 0x0000)
struct BtlCoreComponent_RequestSituationHelp final
{
public:
	class ABtlActor*                              PEmploy;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlJyokyohelpType                            Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlCoreComponent_RequestSituationHelp) == 0x000008, "Wrong alignment on BtlCoreComponent_RequestSituationHelp");
static_assert(sizeof(BtlCoreComponent_RequestSituationHelp) == 0x000010, "Wrong size on BtlCoreComponent_RequestSituationHelp");
static_assert(offsetof(BtlCoreComponent_RequestSituationHelp, PEmploy) == 0x000000, "Member 'BtlCoreComponent_RequestSituationHelp::PEmploy' has a wrong offset!");
static_assert(offsetof(BtlCoreComponent_RequestSituationHelp, Type) == 0x000008, "Member 'BtlCoreComponent_RequestSituationHelp::Type' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SetAnalyzeMode
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_SetAnalyzeMode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SetAnalyzeMode) == 0x000001, "Wrong alignment on BtlCoreComponent_SetAnalyzeMode");
static_assert(sizeof(BtlCoreComponent_SetAnalyzeMode) == 0x000001, "Wrong size on BtlCoreComponent_SetAnalyzeMode");
static_assert(offsetof(BtlCoreComponent_SetAnalyzeMode, Enable) == 0x000000, "Member 'BtlCoreComponent_SetAnalyzeMode::Enable' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SetBattleTimeDilation
// 0x0004 (0x0004 - 0x0000)
struct BtlCoreComponent_SetBattleTimeDilation final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SetBattleTimeDilation) == 0x000004, "Wrong alignment on BtlCoreComponent_SetBattleTimeDilation");
static_assert(sizeof(BtlCoreComponent_SetBattleTimeDilation) == 0x000004, "Wrong size on BtlCoreComponent_SetBattleTimeDilation");
static_assert(offsetof(BtlCoreComponent_SetBattleTimeDilation, Rate) == 0x000000, "Member 'BtlCoreComponent_SetBattleTimeDilation::Rate' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SetBGMTheurgiaMode
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_SetBGMTheurgiaMode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SetBGMTheurgiaMode) == 0x000001, "Wrong alignment on BtlCoreComponent_SetBGMTheurgiaMode");
static_assert(sizeof(BtlCoreComponent_SetBGMTheurgiaMode) == 0x000001, "Wrong size on BtlCoreComponent_SetBGMTheurgiaMode");
static_assert(offsetof(BtlCoreComponent_SetBGMTheurgiaMode, Enable) == 0x000000, "Member 'BtlCoreComponent_SetBGMTheurgiaMode::Enable' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SetDebugLatestCamera
// 0x0010 (0x0010 - 0x0000)
struct BtlCoreComponent_SetDebugLatestCamera final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SetDebugLatestCamera) == 0x000008, "Wrong alignment on BtlCoreComponent_SetDebugLatestCamera");
static_assert(sizeof(BtlCoreComponent_SetDebugLatestCamera) == 0x000010, "Wrong size on BtlCoreComponent_SetDebugLatestCamera");
static_assert(offsetof(BtlCoreComponent_SetDebugLatestCamera, Str) == 0x000000, "Member 'BtlCoreComponent_SetDebugLatestCamera::Str' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SetDebugStateString
// 0x0010 (0x0010 - 0x0000)
struct BtlCoreComponent_SetDebugStateString final
{
public:
	class FString                                 Str;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SetDebugStateString) == 0x000008, "Wrong alignment on BtlCoreComponent_SetDebugStateString");
static_assert(sizeof(BtlCoreComponent_SetDebugStateString) == 0x000010, "Wrong size on BtlCoreComponent_SetDebugStateString");
static_assert(offsetof(BtlCoreComponent_SetDebugStateString, Str) == 0x000000, "Member 'BtlCoreComponent_SetDebugStateString::Str' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SetEncountParam
// 0x0024 (0x0024 - 0x0000)
struct BtlCoreComponent_SetEncountParam final
{
public:
	struct FBtlEncountParam                       Encount;                                           // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SetEncountParam) == 0x000004, "Wrong alignment on BtlCoreComponent_SetEncountParam");
static_assert(sizeof(BtlCoreComponent_SetEncountParam) == 0x000024, "Wrong size on BtlCoreComponent_SetEncountParam");
static_assert(offsetof(BtlCoreComponent_SetEncountParam, Encount) == 0x000000, "Member 'BtlCoreComponent_SetEncountParam::Encount' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SetPersonaStatusMode
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_SetPersonaStatusMode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SetPersonaStatusMode) == 0x000001, "Wrong alignment on BtlCoreComponent_SetPersonaStatusMode");
static_assert(sizeof(BtlCoreComponent_SetPersonaStatusMode) == 0x000001, "Wrong size on BtlCoreComponent_SetPersonaStatusMode");
static_assert(offsetof(BtlCoreComponent_SetPersonaStatusMode, Enable) == 0x000000, "Member 'BtlCoreComponent_SetPersonaStatusMode::Enable' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SetPhase
// 0x0008 (0x0008 - 0x0000)
struct BtlCoreComponent_SetPhase final
{
public:
	class ABtlPhase*                              NextPhase;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SetPhase) == 0x000008, "Wrong alignment on BtlCoreComponent_SetPhase");
static_assert(sizeof(BtlCoreComponent_SetPhase) == 0x000008, "Wrong size on BtlCoreComponent_SetPhase");
static_assert(offsetof(BtlCoreComponent_SetPhase, NextPhase) == 0x000000, "Member 'BtlCoreComponent_SetPhase::NextPhase' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SetRushDisable
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_SetRushDisable final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SetRushDisable) == 0x000001, "Wrong alignment on BtlCoreComponent_SetRushDisable");
static_assert(sizeof(BtlCoreComponent_SetRushDisable) == 0x000001, "Wrong size on BtlCoreComponent_SetRushDisable");
static_assert(offsetof(BtlCoreComponent_SetRushDisable, Disable) == 0x000000, "Member 'BtlCoreComponent_SetRushDisable::Disable' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SetRushMode
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_SetRushMode final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SetRushMode) == 0x000001, "Wrong alignment on BtlCoreComponent_SetRushMode");
static_assert(sizeof(BtlCoreComponent_SetRushMode) == 0x000001, "Wrong size on BtlCoreComponent_SetRushMode");
static_assert(offsetof(BtlCoreComponent_SetRushMode, Enable) == 0x000000, "Member 'BtlCoreComponent_SetRushMode::Enable' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SetupDebugKill
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_SetupDebugKill final
{
public:
	bool                                          RejectDebugKillRequest;                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SetupDebugKill) == 0x000001, "Wrong alignment on BtlCoreComponent_SetupDebugKill");
static_assert(sizeof(BtlCoreComponent_SetupDebugKill) == 0x000001, "Wrong size on BtlCoreComponent_SetupDebugKill");
static_assert(offsetof(BtlCoreComponent_SetupDebugKill, RejectDebugKillRequest) == 0x000000, "Member 'BtlCoreComponent_SetupDebugKill::RejectDebugKillRequest' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SetupIndependentBattle
// 0x0048 (0x0048 - 0x0000)
struct BtlCoreComponent_SetupIndependentBattle final
{
public:
	struct FBtlEncountParam                       EncountParam;                                      // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBtlEncountParam                       ReturnValue;                                       // 0x0024(0x0024)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SetupIndependentBattle) == 0x000004, "Wrong alignment on BtlCoreComponent_SetupIndependentBattle");
static_assert(sizeof(BtlCoreComponent_SetupIndependentBattle) == 0x000048, "Wrong size on BtlCoreComponent_SetupIndependentBattle");
static_assert(offsetof(BtlCoreComponent_SetupIndependentBattle, EncountParam) == 0x000000, "Member 'BtlCoreComponent_SetupIndependentBattle::EncountParam' has a wrong offset!");
static_assert(offsetof(BtlCoreComponent_SetupIndependentBattle, ReturnValue) == 0x000024, "Member 'BtlCoreComponent_SetupIndependentBattle::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SpawnCharacters
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_SpawnCharacters final
{
public:
	bool                                          InitialHiding;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SpawnCharacters) == 0x000001, "Wrong alignment on BtlCoreComponent_SpawnCharacters");
static_assert(sizeof(BtlCoreComponent_SpawnCharacters) == 0x000001, "Wrong size on BtlCoreComponent_SpawnCharacters");
static_assert(offsetof(BtlCoreComponent_SpawnCharacters, InitialHiding) == 0x000000, "Member 'BtlCoreComponent_SpawnCharacters::InitialHiding' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SyncInfoGameover
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_SyncInfoGameover final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SyncInfoGameover) == 0x000001, "Wrong alignment on BtlCoreComponent_SyncInfoGameover");
static_assert(sizeof(BtlCoreComponent_SyncInfoGameover) == 0x000001, "Wrong size on BtlCoreComponent_SyncInfoGameover");
static_assert(offsetof(BtlCoreComponent_SyncInfoGameover, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_SyncInfoGameover::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.SyncReadyIndependentBattle
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_SyncReadyIndependentBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_SyncReadyIndependentBattle) == 0x000001, "Wrong alignment on BtlCoreComponent_SyncReadyIndependentBattle");
static_assert(sizeof(BtlCoreComponent_SyncReadyIndependentBattle) == 0x000001, "Wrong size on BtlCoreComponent_SyncReadyIndependentBattle");
static_assert(offsetof(BtlCoreComponent_SyncReadyIndependentBattle, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_SyncReadyIndependentBattle::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckAlloutResult
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckAlloutResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckAlloutResult) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckAlloutResult");
static_assert(sizeof(BtlCoreComponent_CheckAlloutResult) == 0x000001, "Wrong size on BtlCoreComponent_CheckAlloutResult");
static_assert(offsetof(BtlCoreComponent_CheckAlloutResult, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckAlloutResult::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckAllowEnemyAttackBackshotCamera
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckAllowEnemyAttackBackshotCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckAllowEnemyAttackBackshotCamera) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckAllowEnemyAttackBackshotCamera");
static_assert(sizeof(BtlCoreComponent_CheckAllowEnemyAttackBackshotCamera) == 0x000001, "Wrong size on BtlCoreComponent_CheckAllowEnemyAttackBackshotCamera");
static_assert(offsetof(BtlCoreComponent_CheckAllowEnemyAttackBackshotCamera, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckAllowEnemyAttackBackshotCamera::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckAnyInterruptProcessBetweenTurn
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckAnyInterruptProcessBetweenTurn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckAnyInterruptProcessBetweenTurn) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckAnyInterruptProcessBetweenTurn");
static_assert(sizeof(BtlCoreComponent_CheckAnyInterruptProcessBetweenTurn) == 0x000001, "Wrong size on BtlCoreComponent_CheckAnyInterruptProcessBetweenTurn");
static_assert(offsetof(BtlCoreComponent_CheckAnyInterruptProcessBetweenTurn, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckAnyInterruptProcessBetweenTurn::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckCutinAging
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckCutinAging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckCutinAging) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckCutinAging");
static_assert(sizeof(BtlCoreComponent_CheckCutinAging) == 0x000001, "Wrong size on BtlCoreComponent_CheckCutinAging");
static_assert(offsetof(BtlCoreComponent_CheckCutinAging, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckCutinAging::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckDecideRetry
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckDecideRetry final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckDecideRetry) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckDecideRetry");
static_assert(sizeof(BtlCoreComponent_CheckDecideRetry) == 0x000001, "Wrong size on BtlCoreComponent_CheckDecideRetry");
static_assert(offsetof(BtlCoreComponent_CheckDecideRetry, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckDecideRetry::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckEnableActEndEvent
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckEnableActEndEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckEnableActEndEvent) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckEnableActEndEvent");
static_assert(sizeof(BtlCoreComponent_CheckEnableActEndEvent) == 0x000001, "Wrong size on BtlCoreComponent_CheckEnableActEndEvent");
static_assert(offsetof(BtlCoreComponent_CheckEnableActEndEvent, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckEnableActEndEvent::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckEnableActEndProc
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckEnableActEndProc final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckEnableActEndProc) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckEnableActEndProc");
static_assert(sizeof(BtlCoreComponent_CheckEnableActEndProc) == 0x000001, "Wrong size on BtlCoreComponent_CheckEnableActEndProc");
static_assert(offsetof(BtlCoreComponent_CheckEnableActEndProc, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckEnableActEndProc::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckEnableFukaCutin
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckEnableFukaCutin final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckEnableFukaCutin) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckEnableFukaCutin");
static_assert(sizeof(BtlCoreComponent_CheckEnableFukaCutin) == 0x000001, "Wrong size on BtlCoreComponent_CheckEnableFukaCutin");
static_assert(offsetof(BtlCoreComponent_CheckEnableFukaCutin, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckEnableFukaCutin::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckEnableRelocationClosedFormation
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckEnableRelocationClosedFormation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckEnableRelocationClosedFormation) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckEnableRelocationClosedFormation");
static_assert(sizeof(BtlCoreComponent_CheckEnableRelocationClosedFormation) == 0x000001, "Wrong size on BtlCoreComponent_CheckEnableRelocationClosedFormation");
static_assert(offsetof(BtlCoreComponent_CheckEnableRelocationClosedFormation, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckEnableRelocationClosedFormation::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckEnemyLoadFinished
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckEnemyLoadFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckEnemyLoadFinished) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckEnemyLoadFinished");
static_assert(sizeof(BtlCoreComponent_CheckEnemyLoadFinished) == 0x000001, "Wrong size on BtlCoreComponent_CheckEnemyLoadFinished");
static_assert(offsetof(BtlCoreComponent_CheckEnemyLoadFinished, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckEnemyLoadFinished::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckHasHighAnalyzeEvent
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckHasHighAnalyzeEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckHasHighAnalyzeEvent) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckHasHighAnalyzeEvent");
static_assert(sizeof(BtlCoreComponent_CheckHasHighAnalyzeEvent) == 0x000001, "Wrong size on BtlCoreComponent_CheckHasHighAnalyzeEvent");
static_assert(offsetof(BtlCoreComponent_CheckHasHighAnalyzeEvent, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckHasHighAnalyzeEvent::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckHighAnalyzeEnable
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckHighAnalyzeEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckHighAnalyzeEnable) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckHighAnalyzeEnable");
static_assert(sizeof(BtlCoreComponent_CheckHighAnalyzeEnable) == 0x000001, "Wrong size on BtlCoreComponent_CheckHighAnalyzeEnable");
static_assert(offsetof(BtlCoreComponent_CheckHighAnalyzeEnable, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckHighAnalyzeEnable::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckHighAnalyzeUnlocked
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckHighAnalyzeUnlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckHighAnalyzeUnlocked) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckHighAnalyzeUnlocked");
static_assert(sizeof(BtlCoreComponent_CheckHighAnalyzeUnlocked) == 0x000001, "Wrong size on BtlCoreComponent_CheckHighAnalyzeUnlocked");
static_assert(offsetof(BtlCoreComponent_CheckHighAnalyzeUnlocked, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckHighAnalyzeUnlocked::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckIgnoreShowingCharacterAtPreAct
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckIgnoreShowingCharacterAtPreAct final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckIgnoreShowingCharacterAtPreAct) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckIgnoreShowingCharacterAtPreAct");
static_assert(sizeof(BtlCoreComponent_CheckIgnoreShowingCharacterAtPreAct) == 0x000001, "Wrong size on BtlCoreComponent_CheckIgnoreShowingCharacterAtPreAct");
static_assert(offsetof(BtlCoreComponent_CheckIgnoreShowingCharacterAtPreAct, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckIgnoreShowingCharacterAtPreAct::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckInAllout
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckInAllout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckInAllout) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckInAllout");
static_assert(sizeof(BtlCoreComponent_CheckInAllout) == 0x000001, "Wrong size on BtlCoreComponent_CheckInAllout");
static_assert(offsetof(BtlCoreComponent_CheckInAllout, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckInAllout::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckInRush
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckInRush final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckInRush) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckInRush");
static_assert(sizeof(BtlCoreComponent_CheckInRush) == 0x000001, "Wrong size on BtlCoreComponent_CheckInRush");
static_assert(offsetof(BtlCoreComponent_CheckInRush, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckInRush::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckInterruptProcessEscape
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckInterruptProcessEscape final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckInterruptProcessEscape) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckInterruptProcessEscape");
static_assert(sizeof(BtlCoreComponent_CheckInterruptProcessEscape) == 0x000001, "Wrong size on BtlCoreComponent_CheckInterruptProcessEscape");
static_assert(offsetof(BtlCoreComponent_CheckInterruptProcessEscape, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckInterruptProcessEscape::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckIsSerialEncountBattle
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckIsSerialEncountBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckIsSerialEncountBattle) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckIsSerialEncountBattle");
static_assert(sizeof(BtlCoreComponent_CheckIsSerialEncountBattle) == 0x000001, "Wrong size on BtlCoreComponent_CheckIsSerialEncountBattle");
static_assert(offsetof(BtlCoreComponent_CheckIsSerialEncountBattle, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckIsSerialEncountBattle::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckLineFormation
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckLineFormation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckLineFormation) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckLineFormation");
static_assert(sizeof(BtlCoreComponent_CheckLineFormation) == 0x000001, "Wrong size on BtlCoreComponent_CheckLineFormation");
static_assert(offsetof(BtlCoreComponent_CheckLineFormation, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckLineFormation::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckNeedResult
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckNeedResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckNeedResult) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckNeedResult");
static_assert(sizeof(BtlCoreComponent_CheckNeedResult) == 0x000001, "Wrong size on BtlCoreComponent_CheckNeedResult");
static_assert(offsetof(BtlCoreComponent_CheckNeedResult, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckNeedResult::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckNeedTurningTable
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckNeedTurningTable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckNeedTurningTable) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckNeedTurningTable");
static_assert(sizeof(BtlCoreComponent_CheckNeedTurningTable) == 0x000001, "Wrong size on BtlCoreComponent_CheckNeedTurningTable");
static_assert(offsetof(BtlCoreComponent_CheckNeedTurningTable, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckNeedTurningTable::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckPlayableDesignedCommonAttackCamera
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckPlayableDesignedCommonAttackCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckPlayableDesignedCommonAttackCamera) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckPlayableDesignedCommonAttackCamera");
static_assert(sizeof(BtlCoreComponent_CheckPlayableDesignedCommonAttackCamera) == 0x000001, "Wrong size on BtlCoreComponent_CheckPlayableDesignedCommonAttackCamera");
static_assert(offsetof(BtlCoreComponent_CheckPlayableDesignedCommonAttackCamera, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckPlayableDesignedCommonAttackCamera::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckPlayingEventScript
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckPlayingEventScript final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckPlayingEventScript) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckPlayingEventScript");
static_assert(sizeof(BtlCoreComponent_CheckPlayingEventScript) == 0x000001, "Wrong size on BtlCoreComponent_CheckPlayingEventScript");
static_assert(offsetof(BtlCoreComponent_CheckPlayingEventScript, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckPlayingEventScript::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckRequestRushMode
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckRequestRushMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckRequestRushMode) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckRequestRushMode");
static_assert(sizeof(BtlCoreComponent_CheckRequestRushMode) == 0x000001, "Wrong size on BtlCoreComponent_CheckRequestRushMode");
static_assert(offsetof(BtlCoreComponent_CheckRequestRushMode, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckRequestRushMode::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckRushDisable
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckRushDisable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckRushDisable) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckRushDisable");
static_assert(sizeof(BtlCoreComponent_CheckRushDisable) == 0x000001, "Wrong size on BtlCoreComponent_CheckRushDisable");
static_assert(offsetof(BtlCoreComponent_CheckRushDisable, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckRushDisable::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckRushSwitchable
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckRushSwitchable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckRushSwitchable) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckRushSwitchable");
static_assert(sizeof(BtlCoreComponent_CheckRushSwitchable) == 0x000001, "Wrong size on BtlCoreComponent_CheckRushSwitchable");
static_assert(offsetof(BtlCoreComponent_CheckRushSwitchable, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckRushSwitchable::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckShadowExChantCamMustPlay
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckShadowExChantCamMustPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckShadowExChantCamMustPlay) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckShadowExChantCamMustPlay");
static_assert(sizeof(BtlCoreComponent_CheckShadowExChantCamMustPlay) == 0x000001, "Wrong size on BtlCoreComponent_CheckShadowExChantCamMustPlay");
static_assert(offsetof(BtlCoreComponent_CheckShadowExChantCamMustPlay, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckShadowExChantCamMustPlay::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckShaffleTimeAllowed
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckShaffleTimeAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckShaffleTimeAllowed) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckShaffleTimeAllowed");
static_assert(sizeof(BtlCoreComponent_CheckShaffleTimeAllowed) == 0x000001, "Wrong size on BtlCoreComponent_CheckShaffleTimeAllowed");
static_assert(offsetof(BtlCoreComponent_CheckShaffleTimeAllowed, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckShaffleTimeAllowed::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckShuffleTimeOccurrence
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckShuffleTimeOccurrence final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckShuffleTimeOccurrence) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckShuffleTimeOccurrence");
static_assert(sizeof(BtlCoreComponent_CheckShuffleTimeOccurrence) == 0x000001, "Wrong size on BtlCoreComponent_CheckShuffleTimeOccurrence");
static_assert(offsetof(BtlCoreComponent_CheckShuffleTimeOccurrence, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckShuffleTimeOccurrence::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckSuspendTurnProgress
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckSuspendTurnProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckSuspendTurnProgress) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckSuspendTurnProgress");
static_assert(sizeof(BtlCoreComponent_CheckSuspendTurnProgress) == 0x000001, "Wrong size on BtlCoreComponent_CheckSuspendTurnProgress");
static_assert(offsetof(BtlCoreComponent_CheckSuspendTurnProgress, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckSuspendTurnProgress::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckUsableFukaTheurgia
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckUsableFukaTheurgia final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckUsableFukaTheurgia) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckUsableFukaTheurgia");
static_assert(sizeof(BtlCoreComponent_CheckUsableFukaTheurgia) == 0x000001, "Wrong size on BtlCoreComponent_CheckUsableFukaTheurgia");
static_assert(offsetof(BtlCoreComponent_CheckUsableFukaTheurgia, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckUsableFukaTheurgia::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckUsableRetry
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckUsableRetry final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckUsableRetry) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckUsableRetry");
static_assert(sizeof(BtlCoreComponent_CheckUsableRetry) == 0x000001, "Wrong size on BtlCoreComponent_CheckUsableRetry");
static_assert(offsetof(BtlCoreComponent_CheckUsableRetry, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckUsableRetry::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckUseQuickEncount
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckUseQuickEncount final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckUseQuickEncount) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckUseQuickEncount");
static_assert(sizeof(BtlCoreComponent_CheckUseQuickEncount) == 0x000001, "Wrong size on BtlCoreComponent_CheckUseQuickEncount");
static_assert(offsetof(BtlCoreComponent_CheckUseQuickEncount, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckUseQuickEncount::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.CheckValidFukaTheurgia
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_CheckValidFukaTheurgia final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_CheckValidFukaTheurgia) == 0x000001, "Wrong alignment on BtlCoreComponent_CheckValidFukaTheurgia");
static_assert(sizeof(BtlCoreComponent_CheckValidFukaTheurgia) == 0x000001, "Wrong size on BtlCoreComponent_CheckValidFukaTheurgia");
static_assert(offsetof(BtlCoreComponent_CheckValidFukaTheurgia, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_CheckValidFukaTheurgia::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.DebugGetCustomDamage
// 0x0004 (0x0004 - 0x0000)
struct BtlCoreComponent_DebugGetCustomDamage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_DebugGetCustomDamage) == 0x000004, "Wrong alignment on BtlCoreComponent_DebugGetCustomDamage");
static_assert(sizeof(BtlCoreComponent_DebugGetCustomDamage) == 0x000004, "Wrong size on BtlCoreComponent_DebugGetCustomDamage");
static_assert(offsetof(BtlCoreComponent_DebugGetCustomDamage, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_DebugGetCustomDamage::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetDebugCalcFlag
// 0x0004 (0x0004 - 0x0000)
struct BtlCoreComponent_GetDebugCalcFlag final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetDebugCalcFlag) == 0x000004, "Wrong alignment on BtlCoreComponent_GetDebugCalcFlag");
static_assert(sizeof(BtlCoreComponent_GetDebugCalcFlag) == 0x000004, "Wrong size on BtlCoreComponent_GetDebugCalcFlag");
static_assert(offsetof(BtlCoreComponent_GetDebugCalcFlag, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetDebugCalcFlag::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetDebugLatestCamera
// 0x0010 (0x0010 - 0x0000)
struct BtlCoreComponent_GetDebugLatestCamera final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetDebugLatestCamera) == 0x000008, "Wrong alignment on BtlCoreComponent_GetDebugLatestCamera");
static_assert(sizeof(BtlCoreComponent_GetDebugLatestCamera) == 0x000010, "Wrong size on BtlCoreComponent_GetDebugLatestCamera");
static_assert(offsetof(BtlCoreComponent_GetDebugLatestCamera, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetDebugLatestCamera::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetDebugModeName
// 0x0010 (0x0010 - 0x0000)
struct BtlCoreComponent_GetDebugModeName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetDebugModeName) == 0x000008, "Wrong alignment on BtlCoreComponent_GetDebugModeName");
static_assert(sizeof(BtlCoreComponent_GetDebugModeName) == 0x000010, "Wrong size on BtlCoreComponent_GetDebugModeName");
static_assert(offsetof(BtlCoreComponent_GetDebugModeName, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetDebugModeName::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetDebugStateString
// 0x0010 (0x0010 - 0x0000)
struct BtlCoreComponent_GetDebugStateString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetDebugStateString) == 0x000008, "Wrong alignment on BtlCoreComponent_GetDebugStateString");
static_assert(sizeof(BtlCoreComponent_GetDebugStateString) == 0x000010, "Wrong size on BtlCoreComponent_GetDebugStateString");
static_assert(offsetof(BtlCoreComponent_GetDebugStateString, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetDebugStateString::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetDeltaTime
// 0x0004 (0x0004 - 0x0000)
struct BtlCoreComponent_GetDeltaTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetDeltaTime) == 0x000004, "Wrong alignment on BtlCoreComponent_GetDeltaTime");
static_assert(sizeof(BtlCoreComponent_GetDeltaTime) == 0x000004, "Wrong size on BtlCoreComponent_GetDeltaTime");
static_assert(offsetof(BtlCoreComponent_GetDeltaTime, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetDeltaTime::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct BtlCoreComponent_GetElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetElapsedTime) == 0x000004, "Wrong alignment on BtlCoreComponent_GetElapsedTime");
static_assert(sizeof(BtlCoreComponent_GetElapsedTime) == 0x000004, "Wrong size on BtlCoreComponent_GetElapsedTime");
static_assert(offsetof(BtlCoreComponent_GetElapsedTime, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetElapsedTime::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.GetPhaseType
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_GetPhaseType final
{
public:
	EBtlPhaseType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_GetPhaseType) == 0x000001, "Wrong alignment on BtlCoreComponent_GetPhaseType");
static_assert(sizeof(BtlCoreComponent_GetPhaseType) == 0x000001, "Wrong size on BtlCoreComponent_GetPhaseType");
static_assert(offsetof(BtlCoreComponent_GetPhaseType, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_GetPhaseType::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.IsDisableSequenceCamera
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_IsDisableSequenceCamera final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_IsDisableSequenceCamera) == 0x000001, "Wrong alignment on BtlCoreComponent_IsDisableSequenceCamera");
static_assert(sizeof(BtlCoreComponent_IsDisableSequenceCamera) == 0x000001, "Wrong size on BtlCoreComponent_IsDisableSequenceCamera");
static_assert(offsetof(BtlCoreComponent_IsDisableSequenceCamera, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_IsDisableSequenceCamera::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.IsEventBattle
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_IsEventBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_IsEventBattle) == 0x000001, "Wrong alignment on BtlCoreComponent_IsEventBattle");
static_assert(sizeof(BtlCoreComponent_IsEventBattle) == 0x000001, "Wrong size on BtlCoreComponent_IsEventBattle");
static_assert(offsetof(BtlCoreComponent_IsEventBattle, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_IsEventBattle::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.IsEventResult
// 0x0002 (0x0002 - 0x0000)
struct BtlCoreComponent_IsEventResult final
{
public:
	bool                                          IsCaptureResult;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_IsEventResult) == 0x000001, "Wrong alignment on BtlCoreComponent_IsEventResult");
static_assert(sizeof(BtlCoreComponent_IsEventResult) == 0x000002, "Wrong size on BtlCoreComponent_IsEventResult");
static_assert(offsetof(BtlCoreComponent_IsEventResult, IsCaptureResult) == 0x000000, "Member 'BtlCoreComponent_IsEventResult::IsCaptureResult' has a wrong offset!");
static_assert(offsetof(BtlCoreComponent_IsEventResult, ReturnValue) == 0x000001, "Member 'BtlCoreComponent_IsEventResult::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCoreComponent.IsNeedToFinale
// 0x0001 (0x0001 - 0x0000)
struct BtlCoreComponent_IsNeedToFinale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCoreComponent_IsNeedToFinale) == 0x000001, "Wrong alignment on BtlCoreComponent_IsNeedToFinale");
static_assert(sizeof(BtlCoreComponent_IsNeedToFinale) == 0x000001, "Wrong size on BtlCoreComponent_IsNeedToFinale");
static_assert(offsetof(BtlCoreComponent_IsNeedToFinale, ReturnValue) == 0x000000, "Member 'BtlCoreComponent_IsNeedToFinale::ReturnValue' has a wrong offset!");

// Function xrd777.BtlCountdown.PullTime
// 0x0004 (0x0004 - 0x0000)
struct BtlCountdown_PullTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCountdown_PullTime) == 0x000004, "Wrong alignment on BtlCountdown_PullTime");
static_assert(sizeof(BtlCountdown_PullTime) == 0x000004, "Wrong size on BtlCountdown_PullTime");
static_assert(offsetof(BtlCountdown_PullTime, Time) == 0x000000, "Member 'BtlCountdown_PullTime::Time' has a wrong offset!");

// Function xrd777.BtlCountdown.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct BtlCountdown_SetVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlCountdown_SetVisible) == 0x000001, "Wrong alignment on BtlCountdown_SetVisible");
static_assert(sizeof(BtlCountdown_SetVisible) == 0x000001, "Wrong size on BtlCountdown_SetVisible");
static_assert(offsetof(BtlCountdown_SetVisible, Visible) == 0x000000, "Member 'BtlCountdown_SetVisible::Visible' has a wrong offset!");

// Function xrd777.SaveLoadDraw.AdjustedDateLayoutPos
// 0x0014 (0x0014 - 0x0000)
struct SaveLoadDraw_AdjustedDateLayoutPos final
{
public:
	ESaveLoadDateLayout                           InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDefaultPos;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_AdjustedDateLayoutPos) == 0x000004, "Wrong alignment on SaveLoadDraw_AdjustedDateLayoutPos");
static_assert(sizeof(SaveLoadDraw_AdjustedDateLayoutPos) == 0x000014, "Wrong size on SaveLoadDraw_AdjustedDateLayoutPos");
static_assert(offsetof(SaveLoadDraw_AdjustedDateLayoutPos, InLayoutId) == 0x000000, "Member 'SaveLoadDraw_AdjustedDateLayoutPos::InLayoutId' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_AdjustedDateLayoutPos, InDefaultPos) == 0x000004, "Member 'SaveLoadDraw_AdjustedDateLayoutPos::InDefaultPos' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_AdjustedDateLayoutPos, ReturnValue) == 0x00000C, "Member 'SaveLoadDraw_AdjustedDateLayoutPos::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.AdjustedLayout2Pos
// 0x0014 (0x0014 - 0x0000)
struct SaveLoadDraw_AdjustedLayout2Pos final
{
public:
	ESaveLoadLayout2                              InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDefaultPos;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_AdjustedLayout2Pos) == 0x000004, "Wrong alignment on SaveLoadDraw_AdjustedLayout2Pos");
static_assert(sizeof(SaveLoadDraw_AdjustedLayout2Pos) == 0x000014, "Wrong size on SaveLoadDraw_AdjustedLayout2Pos");
static_assert(offsetof(SaveLoadDraw_AdjustedLayout2Pos, InLayoutId) == 0x000000, "Member 'SaveLoadDraw_AdjustedLayout2Pos::InLayoutId' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_AdjustedLayout2Pos, InDefaultPos) == 0x000004, "Member 'SaveLoadDraw_AdjustedLayout2Pos::InDefaultPos' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_AdjustedLayout2Pos, ReturnValue) == 0x00000C, "Member 'SaveLoadDraw_AdjustedLayout2Pos::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.AdjustedLayoutPos
// 0x0014 (0x0014 - 0x0000)
struct SaveLoadDraw_AdjustedLayoutPos final
{
public:
	ESaveLoadLayout                               InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDefaultPos;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_AdjustedLayoutPos) == 0x000004, "Wrong alignment on SaveLoadDraw_AdjustedLayoutPos");
static_assert(sizeof(SaveLoadDraw_AdjustedLayoutPos) == 0x000014, "Wrong size on SaveLoadDraw_AdjustedLayoutPos");
static_assert(offsetof(SaveLoadDraw_AdjustedLayoutPos, InLayoutId) == 0x000000, "Member 'SaveLoadDraw_AdjustedLayoutPos::InLayoutId' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_AdjustedLayoutPos, InDefaultPos) == 0x000004, "Member 'SaveLoadDraw_AdjustedLayoutPos::InDefaultPos' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_AdjustedLayoutPos, ReturnValue) == 0x00000C, "Member 'SaveLoadDraw_AdjustedLayoutPos::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.AdjustedLayoutPosAstrea
// 0x0014 (0x0014 - 0x0000)
struct SaveLoadDraw_AdjustedLayoutPosAstrea final
{
public:
	ESaveLoadLayoutAstrea                         InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDefaultPos;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_AdjustedLayoutPosAstrea) == 0x000004, "Wrong alignment on SaveLoadDraw_AdjustedLayoutPosAstrea");
static_assert(sizeof(SaveLoadDraw_AdjustedLayoutPosAstrea) == 0x000014, "Wrong size on SaveLoadDraw_AdjustedLayoutPosAstrea");
static_assert(offsetof(SaveLoadDraw_AdjustedLayoutPosAstrea, InLayoutId) == 0x000000, "Member 'SaveLoadDraw_AdjustedLayoutPosAstrea::InLayoutId' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_AdjustedLayoutPosAstrea, InDefaultPos) == 0x000004, "Member 'SaveLoadDraw_AdjustedLayoutPosAstrea::InDefaultPos' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_AdjustedLayoutPosAstrea, ReturnValue) == 0x00000C, "Member 'SaveLoadDraw_AdjustedLayoutPosAstrea::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.AdjustedTimeZoneLayoutPosAstrea
// 0x0014 (0x0014 - 0x0000)
struct SaveLoadDraw_AdjustedTimeZoneLayoutPosAstrea final
{
public:
	ESaveLoadTimeZoneLayoutAstrea                 InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDefaultPos;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_AdjustedTimeZoneLayoutPosAstrea) == 0x000004, "Wrong alignment on SaveLoadDraw_AdjustedTimeZoneLayoutPosAstrea");
static_assert(sizeof(SaveLoadDraw_AdjustedTimeZoneLayoutPosAstrea) == 0x000014, "Wrong size on SaveLoadDraw_AdjustedTimeZoneLayoutPosAstrea");
static_assert(offsetof(SaveLoadDraw_AdjustedTimeZoneLayoutPosAstrea, InLayoutId) == 0x000000, "Member 'SaveLoadDraw_AdjustedTimeZoneLayoutPosAstrea::InLayoutId' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_AdjustedTimeZoneLayoutPosAstrea, InDefaultPos) == 0x000004, "Member 'SaveLoadDraw_AdjustedTimeZoneLayoutPosAstrea::InDefaultPos' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_AdjustedTimeZoneLayoutPosAstrea, ReturnValue) == 0x00000C, "Member 'SaveLoadDraw_AdjustedTimeZoneLayoutPosAstrea::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.ConvFrameToTime
// 0x0008 (0x0008 - 0x0000)
struct SaveLoadDraw_ConvFrameToTime final
{
public:
	int32                                         InFrame;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_ConvFrameToTime) == 0x000004, "Wrong alignment on SaveLoadDraw_ConvFrameToTime");
static_assert(sizeof(SaveLoadDraw_ConvFrameToTime) == 0x000008, "Wrong size on SaveLoadDraw_ConvFrameToTime");
static_assert(offsetof(SaveLoadDraw_ConvFrameToTime, InFrame) == 0x000000, "Member 'SaveLoadDraw_ConvFrameToTime::InFrame' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_ConvFrameToTime, ReturnValue) == 0x000004, "Member 'SaveLoadDraw_ConvFrameToTime::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.DrawTextureEx
// 0x0020 (0x0020 - 0x0000)
struct SaveLoadDraw_DrawTextureEx final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UTexture*                         TextureHandle;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveLoadDraw_DrawTextureEx) == 0x000008, "Wrong alignment on SaveLoadDraw_DrawTextureEx");
static_assert(sizeof(SaveLoadDraw_DrawTextureEx) == 0x000020, "Wrong size on SaveLoadDraw_DrawTextureEx");
static_assert(offsetof(SaveLoadDraw_DrawTextureEx, X) == 0x000000, "Member 'SaveLoadDraw_DrawTextureEx::X' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_DrawTextureEx, Y) == 0x000004, "Member 'SaveLoadDraw_DrawTextureEx::Y' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_DrawTextureEx, Width) == 0x000008, "Member 'SaveLoadDraw_DrawTextureEx::Width' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_DrawTextureEx, Height) == 0x00000C, "Member 'SaveLoadDraw_DrawTextureEx::Height' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_DrawTextureEx, TextureHandle) == 0x000010, "Member 'SaveLoadDraw_DrawTextureEx::TextureHandle' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_DrawTextureEx, DrawPoint) == 0x000018, "Member 'SaveLoadDraw_DrawTextureEx::DrawPoint' has a wrong offset!");

// Function xrd777.SaveLoadDraw.GetDebugDay
// 0x0008 (0x0008 - 0x0000)
struct SaveLoadDraw_GetDebugDay final
{
public:
	int32                                         InDay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_GetDebugDay) == 0x000004, "Wrong alignment on SaveLoadDraw_GetDebugDay");
static_assert(sizeof(SaveLoadDraw_GetDebugDay) == 0x000008, "Wrong size on SaveLoadDraw_GetDebugDay");
static_assert(offsetof(SaveLoadDraw_GetDebugDay, InDay) == 0x000000, "Member 'SaveLoadDraw_GetDebugDay::InDay' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_GetDebugDay, ReturnValue) == 0x000004, "Member 'SaveLoadDraw_GetDebugDay::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.GetDebugMonth
// 0x0008 (0x0008 - 0x0000)
struct SaveLoadDraw_GetDebugMonth final
{
public:
	int32                                         InMonth;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_GetDebugMonth) == 0x000004, "Wrong alignment on SaveLoadDraw_GetDebugMonth");
static_assert(sizeof(SaveLoadDraw_GetDebugMonth) == 0x000008, "Wrong size on SaveLoadDraw_GetDebugMonth");
static_assert(offsetof(SaveLoadDraw_GetDebugMonth, InMonth) == 0x000000, "Member 'SaveLoadDraw_GetDebugMonth::InMonth' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_GetDebugMonth, ReturnValue) == 0x000004, "Member 'SaveLoadDraw_GetDebugMonth::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.GetSelDebugDay
// 0x0008 (0x0008 - 0x0000)
struct SaveLoadDraw_GetSelDebugDay final
{
public:
	int32                                         InDay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_GetSelDebugDay) == 0x000004, "Wrong alignment on SaveLoadDraw_GetSelDebugDay");
static_assert(sizeof(SaveLoadDraw_GetSelDebugDay) == 0x000008, "Wrong size on SaveLoadDraw_GetSelDebugDay");
static_assert(offsetof(SaveLoadDraw_GetSelDebugDay, InDay) == 0x000000, "Member 'SaveLoadDraw_GetSelDebugDay::InDay' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_GetSelDebugDay, ReturnValue) == 0x000004, "Member 'SaveLoadDraw_GetSelDebugDay::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.GetSelDebugMonth
// 0x0008 (0x0008 - 0x0000)
struct SaveLoadDraw_GetSelDebugMonth final
{
public:
	int32                                         InMonth;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_GetSelDebugMonth) == 0x000004, "Wrong alignment on SaveLoadDraw_GetSelDebugMonth");
static_assert(sizeof(SaveLoadDraw_GetSelDebugMonth) == 0x000008, "Wrong size on SaveLoadDraw_GetSelDebugMonth");
static_assert(offsetof(SaveLoadDraw_GetSelDebugMonth, InMonth) == 0x000000, "Member 'SaveLoadDraw_GetSelDebugMonth::InMonth' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_GetSelDebugMonth, ReturnValue) == 0x000004, "Member 'SaveLoadDraw_GetSelDebugMonth::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.IsCheckedNetworkSave
// 0x0001 (0x0001 - 0x0000)
struct SaveLoadDraw_IsCheckedNetworkSave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_IsCheckedNetworkSave) == 0x000001, "Wrong alignment on SaveLoadDraw_IsCheckedNetworkSave");
static_assert(sizeof(SaveLoadDraw_IsCheckedNetworkSave) == 0x000001, "Wrong size on SaveLoadDraw_IsCheckedNetworkSave");
static_assert(offsetof(SaveLoadDraw_IsCheckedNetworkSave, ReturnValue) == 0x000000, "Member 'SaveLoadDraw_IsCheckedNetworkSave::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.IsDayZeroPaddingLanguages
// 0x0008 (0x0008 - 0x0000)
struct SaveLoadDraw_IsDayZeroPaddingLanguages final
{
public:
	int32                                         InMonth;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveLoadDraw_IsDayZeroPaddingLanguages) == 0x000004, "Wrong alignment on SaveLoadDraw_IsDayZeroPaddingLanguages");
static_assert(sizeof(SaveLoadDraw_IsDayZeroPaddingLanguages) == 0x000008, "Wrong size on SaveLoadDraw_IsDayZeroPaddingLanguages");
static_assert(offsetof(SaveLoadDraw_IsDayZeroPaddingLanguages, InMonth) == 0x000000, "Member 'SaveLoadDraw_IsDayZeroPaddingLanguages::InMonth' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_IsDayZeroPaddingLanguages, ReturnValue) == 0x000004, "Member 'SaveLoadDraw_IsDayZeroPaddingLanguages::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.IsDebugDrawClearData
// 0x0001 (0x0001 - 0x0000)
struct SaveLoadDraw_IsDebugDrawClearData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_IsDebugDrawClearData) == 0x000001, "Wrong alignment on SaveLoadDraw_IsDebugDrawClearData");
static_assert(sizeof(SaveLoadDraw_IsDebugDrawClearData) == 0x000001, "Wrong size on SaveLoadDraw_IsDebugDrawClearData");
static_assert(offsetof(SaveLoadDraw_IsDebugDrawClearData, ReturnValue) == 0x000000, "Member 'SaveLoadDraw_IsDebugDrawClearData::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.IsMonthDayDisplayLanguages
// 0x0001 (0x0001 - 0x0000)
struct SaveLoadDraw_IsMonthDayDisplayLanguages final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_IsMonthDayDisplayLanguages) == 0x000001, "Wrong alignment on SaveLoadDraw_IsMonthDayDisplayLanguages");
static_assert(sizeof(SaveLoadDraw_IsMonthDayDisplayLanguages) == 0x000001, "Wrong size on SaveLoadDraw_IsMonthDayDisplayLanguages");
static_assert(offsetof(SaveLoadDraw_IsMonthDayDisplayLanguages, ReturnValue) == 0x000000, "Member 'SaveLoadDraw_IsMonthDayDisplayLanguages::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.LocationNameDraw
// 0x0030 (0x0030 - 0x0000)
struct SaveLoadDraw_LocationNameDraw final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 String;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         R;                                                 // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         G;                                                 // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         B;                                                 // 0x0022(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         A;                                                 // 0x0023(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0024(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0028(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x002C(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIFontStyle                                  Style;                                             // 0x002D(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveLoadDraw_LocationNameDraw) == 0x000008, "Wrong alignment on SaveLoadDraw_LocationNameDraw");
static_assert(sizeof(SaveLoadDraw_LocationNameDraw) == 0x000030, "Wrong size on SaveLoadDraw_LocationNameDraw");
static_assert(offsetof(SaveLoadDraw_LocationNameDraw, X) == 0x000000, "Member 'SaveLoadDraw_LocationNameDraw::X' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_LocationNameDraw, Y) == 0x000004, "Member 'SaveLoadDraw_LocationNameDraw::Y' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_LocationNameDraw, Z) == 0x000008, "Member 'SaveLoadDraw_LocationNameDraw::Z' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_LocationNameDraw, String) == 0x000010, "Member 'SaveLoadDraw_LocationNameDraw::String' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_LocationNameDraw, R) == 0x000020, "Member 'SaveLoadDraw_LocationNameDraw::R' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_LocationNameDraw, G) == 0x000021, "Member 'SaveLoadDraw_LocationNameDraw::G' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_LocationNameDraw, B) == 0x000022, "Member 'SaveLoadDraw_LocationNameDraw::B' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_LocationNameDraw, A) == 0x000023, "Member 'SaveLoadDraw_LocationNameDraw::A' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_LocationNameDraw, Scale) == 0x000024, "Member 'SaveLoadDraw_LocationNameDraw::Scale' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_LocationNameDraw, Angle) == 0x000028, "Member 'SaveLoadDraw_LocationNameDraw::Angle' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_LocationNameDraw, DrawPoint) == 0x00002C, "Member 'SaveLoadDraw_LocationNameDraw::DrawPoint' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_LocationNameDraw, Style) == 0x00002D, "Member 'SaveLoadDraw_LocationNameDraw::Style' has a wrong offset!");

// Function xrd777.SaveLoadDraw.PLNameFontDraw
// 0x0028 (0x0028 - 0x0000)
struct SaveLoadDraw_PLNameFontDraw final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 String;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x001C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0024(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIFontStyle                                  Style;                                             // 0x0025(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveLoadDraw_PLNameFontDraw) == 0x000008, "Wrong alignment on SaveLoadDraw_PLNameFontDraw");
static_assert(sizeof(SaveLoadDraw_PLNameFontDraw) == 0x000028, "Wrong size on SaveLoadDraw_PLNameFontDraw");
static_assert(offsetof(SaveLoadDraw_PLNameFontDraw, X) == 0x000000, "Member 'SaveLoadDraw_PLNameFontDraw::X' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_PLNameFontDraw, Y) == 0x000004, "Member 'SaveLoadDraw_PLNameFontDraw::Y' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_PLNameFontDraw, String) == 0x000008, "Member 'SaveLoadDraw_PLNameFontDraw::String' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_PLNameFontDraw, Color) == 0x000018, "Member 'SaveLoadDraw_PLNameFontDraw::Color' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_PLNameFontDraw, Scale) == 0x00001C, "Member 'SaveLoadDraw_PLNameFontDraw::Scale' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_PLNameFontDraw, Angle) == 0x000020, "Member 'SaveLoadDraw_PLNameFontDraw::Angle' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_PLNameFontDraw, DrawPoint) == 0x000024, "Member 'SaveLoadDraw_PLNameFontDraw::DrawPoint' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_PLNameFontDraw, Style) == 0x000025, "Member 'SaveLoadDraw_PLNameFontDraw::Style' has a wrong offset!");

// Function xrd777.SaveLoadDraw.SetScrollBarBaseCollision
// 0x0024 (0x0024 - 0x0000)
struct SaveLoadDraw_SetScrollBarBaseCollision final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollRange;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScrollPos;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawListNum;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListNum;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveLoadDraw_SetScrollBarBaseCollision) == 0x000004, "Wrong alignment on SaveLoadDraw_SetScrollBarBaseCollision");
static_assert(sizeof(SaveLoadDraw_SetScrollBarBaseCollision) == 0x000024, "Wrong size on SaveLoadDraw_SetScrollBarBaseCollision");
static_assert(offsetof(SaveLoadDraw_SetScrollBarBaseCollision, X) == 0x000000, "Member 'SaveLoadDraw_SetScrollBarBaseCollision::X' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarBaseCollision, Y) == 0x000004, "Member 'SaveLoadDraw_SetScrollBarBaseCollision::Y' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarBaseCollision, Width) == 0x000008, "Member 'SaveLoadDraw_SetScrollBarBaseCollision::Width' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarBaseCollision, Height) == 0x00000C, "Member 'SaveLoadDraw_SetScrollBarBaseCollision::Height' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarBaseCollision, ScrollRange) == 0x000010, "Member 'SaveLoadDraw_SetScrollBarBaseCollision::ScrollRange' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarBaseCollision, ScrollPos) == 0x000014, "Member 'SaveLoadDraw_SetScrollBarBaseCollision::ScrollPos' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarBaseCollision, DrawListNum) == 0x000018, "Member 'SaveLoadDraw_SetScrollBarBaseCollision::DrawListNum' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarBaseCollision, MaxListNum) == 0x00001C, "Member 'SaveLoadDraw_SetScrollBarBaseCollision::MaxListNum' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarBaseCollision, DrawPoint) == 0x000020, "Member 'SaveLoadDraw_SetScrollBarBaseCollision::DrawPoint' has a wrong offset!");

// Function xrd777.SaveLoadDraw.SetScrollBarCollision
// 0x0024 (0x0024 - 0x0000)
struct SaveLoadDraw_SetScrollBarCollision final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollRange;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScrollPos;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawListNum;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListNum;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveLoadDraw_SetScrollBarCollision) == 0x000004, "Wrong alignment on SaveLoadDraw_SetScrollBarCollision");
static_assert(sizeof(SaveLoadDraw_SetScrollBarCollision) == 0x000024, "Wrong size on SaveLoadDraw_SetScrollBarCollision");
static_assert(offsetof(SaveLoadDraw_SetScrollBarCollision, X) == 0x000000, "Member 'SaveLoadDraw_SetScrollBarCollision::X' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarCollision, Y) == 0x000004, "Member 'SaveLoadDraw_SetScrollBarCollision::Y' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarCollision, Width) == 0x000008, "Member 'SaveLoadDraw_SetScrollBarCollision::Width' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarCollision, Height) == 0x00000C, "Member 'SaveLoadDraw_SetScrollBarCollision::Height' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarCollision, ScrollRange) == 0x000010, "Member 'SaveLoadDraw_SetScrollBarCollision::ScrollRange' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarCollision, ScrollPos) == 0x000014, "Member 'SaveLoadDraw_SetScrollBarCollision::ScrollPos' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarCollision, DrawListNum) == 0x000018, "Member 'SaveLoadDraw_SetScrollBarCollision::DrawListNum' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarCollision, MaxListNum) == 0x00001C, "Member 'SaveLoadDraw_SetScrollBarCollision::MaxListNum' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarCollision, DrawPoint) == 0x000020, "Member 'SaveLoadDraw_SetScrollBarCollision::DrawPoint' has a wrong offset!");

// Function xrd777.SaveLoadDraw.SetScrollBarSliderCollision
// 0x0024 (0x0024 - 0x0000)
struct SaveLoadDraw_SetScrollBarSliderCollision final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollRange;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScrollPos;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawListNum;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListNum;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveLoadDraw_SetScrollBarSliderCollision) == 0x000004, "Wrong alignment on SaveLoadDraw_SetScrollBarSliderCollision");
static_assert(sizeof(SaveLoadDraw_SetScrollBarSliderCollision) == 0x000024, "Wrong size on SaveLoadDraw_SetScrollBarSliderCollision");
static_assert(offsetof(SaveLoadDraw_SetScrollBarSliderCollision, X) == 0x000000, "Member 'SaveLoadDraw_SetScrollBarSliderCollision::X' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarSliderCollision, Y) == 0x000004, "Member 'SaveLoadDraw_SetScrollBarSliderCollision::Y' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarSliderCollision, Width) == 0x000008, "Member 'SaveLoadDraw_SetScrollBarSliderCollision::Width' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarSliderCollision, Height) == 0x00000C, "Member 'SaveLoadDraw_SetScrollBarSliderCollision::Height' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarSliderCollision, ScrollRange) == 0x000010, "Member 'SaveLoadDraw_SetScrollBarSliderCollision::ScrollRange' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarSliderCollision, ScrollPos) == 0x000014, "Member 'SaveLoadDraw_SetScrollBarSliderCollision::ScrollPos' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarSliderCollision, DrawListNum) == 0x000018, "Member 'SaveLoadDraw_SetScrollBarSliderCollision::DrawListNum' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarSliderCollision, MaxListNum) == 0x00001C, "Member 'SaveLoadDraw_SetScrollBarSliderCollision::MaxListNum' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetScrollBarSliderCollision, DrawPoint) == 0x000020, "Member 'SaveLoadDraw_SetScrollBarSliderCollision::DrawPoint' has a wrong offset!");

// Function xrd777.SaveLoadDraw.SetTouchCollision
// 0x001C (0x001C - 0x0000)
struct SaveLoadDraw_SetTouchCollision final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         X;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveLoadDraw_SetTouchCollision) == 0x000004, "Wrong alignment on SaveLoadDraw_SetTouchCollision");
static_assert(sizeof(SaveLoadDraw_SetTouchCollision) == 0x00001C, "Wrong size on SaveLoadDraw_SetTouchCollision");
static_assert(offsetof(SaveLoadDraw_SetTouchCollision, Index_0) == 0x000000, "Member 'SaveLoadDraw_SetTouchCollision::Index_0' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetTouchCollision, IsSelected) == 0x000004, "Member 'SaveLoadDraw_SetTouchCollision::IsSelected' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetTouchCollision, X) == 0x000008, "Member 'SaveLoadDraw_SetTouchCollision::X' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetTouchCollision, Y) == 0x00000C, "Member 'SaveLoadDraw_SetTouchCollision::Y' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetTouchCollision, Width) == 0x000010, "Member 'SaveLoadDraw_SetTouchCollision::Width' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetTouchCollision, Height) == 0x000014, "Member 'SaveLoadDraw_SetTouchCollision::Height' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_SetTouchCollision, DrawPoint) == 0x000018, "Member 'SaveLoadDraw_SetTouchCollision::DrawPoint' has a wrong offset!");

// Function xrd777.SaveLoadDraw.StateDraw_BG
// 0x0001 (0x0001 - 0x0000)
struct SaveLoadDraw_StateDraw_BG final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_StateDraw_BG) == 0x000001, "Wrong alignment on SaveLoadDraw_StateDraw_BG");
static_assert(sizeof(SaveLoadDraw_StateDraw_BG) == 0x000001, "Wrong size on SaveLoadDraw_StateDraw_BG");
static_assert(offsetof(SaveLoadDraw_StateDraw_BG, ReturnValue) == 0x000000, "Member 'SaveLoadDraw_StateDraw_BG::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.StateDraw_Close
// 0x0001 (0x0001 - 0x0000)
struct SaveLoadDraw_StateDraw_Close final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_StateDraw_Close) == 0x000001, "Wrong alignment on SaveLoadDraw_StateDraw_Close");
static_assert(sizeof(SaveLoadDraw_StateDraw_Close) == 0x000001, "Wrong size on SaveLoadDraw_StateDraw_Close");
static_assert(offsetof(SaveLoadDraw_StateDraw_Close, ReturnValue) == 0x000000, "Member 'SaveLoadDraw_StateDraw_Close::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.StateDraw_SaveDataList
// 0x0001 (0x0001 - 0x0000)
struct SaveLoadDraw_StateDraw_SaveDataList final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveLoadDraw_StateDraw_SaveDataList) == 0x000001, "Wrong alignment on SaveLoadDraw_StateDraw_SaveDataList");
static_assert(sizeof(SaveLoadDraw_StateDraw_SaveDataList) == 0x000001, "Wrong size on SaveLoadDraw_StateDraw_SaveDataList");
static_assert(offsetof(SaveLoadDraw_StateDraw_SaveDataList, ReturnValue) == 0x000000, "Member 'SaveLoadDraw_StateDraw_SaveDataList::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.StateDraw_Update
// 0x0008 (0x0008 - 0x0000)
struct SaveLoadDraw_StateDraw_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveLoadDraw_StateDraw_Update) == 0x000004, "Wrong alignment on SaveLoadDraw_StateDraw_Update");
static_assert(sizeof(SaveLoadDraw_StateDraw_Update) == 0x000008, "Wrong size on SaveLoadDraw_StateDraw_Update");
static_assert(offsetof(SaveLoadDraw_StateDraw_Update, DeltaTime) == 0x000000, "Member 'SaveLoadDraw_StateDraw_Update::DeltaTime' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_StateDraw_Update, ReturnValue) == 0x000004, "Member 'SaveLoadDraw_StateDraw_Update::ReturnValue' has a wrong offset!");

// Function xrd777.SaveLoadDraw.TimeWithinRangeFrame
// 0x0010 (0x0010 - 0x0000)
struct SaveLoadDraw_TimeWithinRangeFrame final
{
public:
	float                                         NowTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveLoadDraw_TimeWithinRangeFrame) == 0x000004, "Wrong alignment on SaveLoadDraw_TimeWithinRangeFrame");
static_assert(sizeof(SaveLoadDraw_TimeWithinRangeFrame) == 0x000010, "Wrong size on SaveLoadDraw_TimeWithinRangeFrame");
static_assert(offsetof(SaveLoadDraw_TimeWithinRangeFrame, NowTime) == 0x000000, "Member 'SaveLoadDraw_TimeWithinRangeFrame::NowTime' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_TimeWithinRangeFrame, StartFrame) == 0x000004, "Member 'SaveLoadDraw_TimeWithinRangeFrame::StartFrame' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_TimeWithinRangeFrame, EndFrame) == 0x000008, "Member 'SaveLoadDraw_TimeWithinRangeFrame::EndFrame' has a wrong offset!");
static_assert(offsetof(SaveLoadDraw_TimeWithinRangeFrame, ReturnValue) == 0x00000C, "Member 'SaveLoadDraw_TimeWithinRangeFrame::ReturnValue' has a wrong offset!");

// Function xrd777.FldDbgNpcMaker.GetNpcActor
// 0x0008 (0x0008 - 0x0000)
struct FldDbgNpcMaker_GetNpcActor final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDbgNpcMaker_GetNpcActor) == 0x000008, "Wrong alignment on FldDbgNpcMaker_GetNpcActor");
static_assert(sizeof(FldDbgNpcMaker_GetNpcActor) == 0x000008, "Wrong size on FldDbgNpcMaker_GetNpcActor");
static_assert(offsetof(FldDbgNpcMaker_GetNpcActor, ReturnValue) == 0x000000, "Member 'FldDbgNpcMaker_GetNpcActor::ReturnValue' has a wrong offset!");

// Function xrd777.FldDbgNpcMaker.GetNpcActors
// 0x0010 (0x0010 - 0x0000)
struct FldDbgNpcMaker_GetNpcActors final
{
public:
	TArray<class APawn*>                          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDbgNpcMaker_GetNpcActors) == 0x000008, "Wrong alignment on FldDbgNpcMaker_GetNpcActors");
static_assert(sizeof(FldDbgNpcMaker_GetNpcActors) == 0x000010, "Wrong size on FldDbgNpcMaker_GetNpcActors");
static_assert(offsetof(FldDbgNpcMaker_GetNpcActors, ReturnValue) == 0x000000, "Member 'FldDbgNpcMaker_GetNpcActors::ReturnValue' has a wrong offset!");

// Function xrd777.AppCalculaterComponent.BPCommand_CalculationUpdate
// 0x0028 (0x0028 - 0x0000)
struct AppCalculaterComponent_BPCommand_CalculationUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAppCalculaterComponentWork            Work;                                              // 0x0008(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsReverse;                                         // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0021(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReset;                                           // 0x0022(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AppCalculaterComponent_BPCommand_CalculationUpdate) == 0x000008, "Wrong alignment on AppCalculaterComponent_BPCommand_CalculationUpdate");
static_assert(sizeof(AppCalculaterComponent_BPCommand_CalculationUpdate) == 0x000028, "Wrong size on AppCalculaterComponent_BPCommand_CalculationUpdate");
static_assert(offsetof(AppCalculaterComponent_BPCommand_CalculationUpdate, DeltaTime) == 0x000000, "Member 'AppCalculaterComponent_BPCommand_CalculationUpdate::DeltaTime' has a wrong offset!");
static_assert(offsetof(AppCalculaterComponent_BPCommand_CalculationUpdate, Work) == 0x000008, "Member 'AppCalculaterComponent_BPCommand_CalculationUpdate::Work' has a wrong offset!");
static_assert(offsetof(AppCalculaterComponent_BPCommand_CalculationUpdate, IsReverse) == 0x000020, "Member 'AppCalculaterComponent_BPCommand_CalculationUpdate::IsReverse' has a wrong offset!");
static_assert(offsetof(AppCalculaterComponent_BPCommand_CalculationUpdate, IsLoop) == 0x000021, "Member 'AppCalculaterComponent_BPCommand_CalculationUpdate::IsLoop' has a wrong offset!");
static_assert(offsetof(AppCalculaterComponent_BPCommand_CalculationUpdate, IsReset) == 0x000022, "Member 'AppCalculaterComponent_BPCommand_CalculationUpdate::IsReset' has a wrong offset!");
static_assert(offsetof(AppCalculaterComponent_BPCommand_CalculationUpdate, ReturnValue) == 0x000024, "Member 'AppCalculaterComponent_BPCommand_CalculationUpdate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.CallCheckAlreadyRequestEscape
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_CallCheckAlreadyRequestEscape final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_CallCheckAlreadyRequestEscape) == 0x000008, "Wrong alignment on BtlDataBaseComponent_CallCheckAlreadyRequestEscape");
static_assert(sizeof(BtlDataBaseComponent_CallCheckAlreadyRequestEscape) == 0x000010, "Wrong size on BtlDataBaseComponent_CallCheckAlreadyRequestEscape");
static_assert(offsetof(BtlDataBaseComponent_CallCheckAlreadyRequestEscape, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_CallCheckAlreadyRequestEscape::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_CallCheckAlreadyRequestEscape, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_CallCheckAlreadyRequestEscape::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.CallCheckEncountEscape
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_CallCheckEncountEscape final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_CallCheckEncountEscape) == 0x000008, "Wrong alignment on BtlDataBaseComponent_CallCheckEncountEscape");
static_assert(sizeof(BtlDataBaseComponent_CallCheckEncountEscape) == 0x000010, "Wrong size on BtlDataBaseComponent_CallCheckEncountEscape");
static_assert(offsetof(BtlDataBaseComponent_CallCheckEncountEscape, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_CallCheckEncountEscape::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_CallCheckEncountEscape, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_CallCheckEncountEscape::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.CallRequestEscape
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_CallRequestEscape final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_CallRequestEscape) == 0x000008, "Wrong alignment on BtlDataBaseComponent_CallRequestEscape");
static_assert(sizeof(BtlDataBaseComponent_CallRequestEscape) == 0x000008, "Wrong size on BtlDataBaseComponent_CallRequestEscape");
static_assert(offsetof(BtlDataBaseComponent_CallRequestEscape, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_CallRequestEscape::BtlCore' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.CallSupportInfoDisableShift
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_CallSupportInfoDisableShift final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_CallSupportInfoDisableShift) == 0x000008, "Wrong alignment on BtlDataBaseComponent_CallSupportInfoDisableShift");
static_assert(sizeof(BtlDataBaseComponent_CallSupportInfoDisableShift) == 0x000008, "Wrong size on BtlDataBaseComponent_CallSupportInfoDisableShift");
static_assert(offsetof(BtlDataBaseComponent_CallSupportInfoDisableShift, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_CallSupportInfoDisableShift::BtlCore' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.CheckExistTarget
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_CheckExistTarget final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_CheckExistTarget) == 0x000008, "Wrong alignment on BtlDataBaseComponent_CheckExistTarget");
static_assert(sizeof(BtlDataBaseComponent_CheckExistTarget) == 0x000010, "Wrong size on BtlDataBaseComponent_CheckExistTarget");
static_assert(offsetof(BtlDataBaseComponent_CheckExistTarget, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_CheckExistTarget::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_CheckExistTarget, SkillId) == 0x000008, "Member 'BtlDataBaseComponent_CheckExistTarget::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_CheckExistTarget, ReturnValue) == 0x00000C, "Member 'BtlDataBaseComponent_CheckExistTarget::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.CheckExistTutorial
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_CheckExistTutorial final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_CheckExistTutorial) == 0x000008, "Wrong alignment on BtlDataBaseComponent_CheckExistTutorial");
static_assert(sizeof(BtlDataBaseComponent_CheckExistTutorial) == 0x000010, "Wrong size on BtlDataBaseComponent_CheckExistTutorial");
static_assert(offsetof(BtlDataBaseComponent_CheckExistTutorial, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_CheckExistTutorial::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_CheckExistTutorial, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_CheckExistTutorial::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.CheckNyxCoreBattle
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_CheckNyxCoreBattle final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_CheckNyxCoreBattle) == 0x000008, "Wrong alignment on BtlDataBaseComponent_CheckNyxCoreBattle");
static_assert(sizeof(BtlDataBaseComponent_CheckNyxCoreBattle) == 0x000010, "Wrong size on BtlDataBaseComponent_CheckNyxCoreBattle");
static_assert(offsetof(BtlDataBaseComponent_CheckNyxCoreBattle, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_CheckNyxCoreBattle::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_CheckNyxCoreBattle, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_CheckNyxCoreBattle::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.CheckSupport
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_CheckSupport final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_CheckSupport) == 0x000008, "Wrong alignment on BtlDataBaseComponent_CheckSupport");
static_assert(sizeof(BtlDataBaseComponent_CheckSupport) == 0x000010, "Wrong size on BtlDataBaseComponent_CheckSupport");
static_assert(offsetof(BtlDataBaseComponent_CheckSupport, Actor) == 0x000000, "Member 'BtlDataBaseComponent_CheckSupport::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_CheckSupport, Type) == 0x000008, "Member 'BtlDataBaseComponent_CheckSupport::Type' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_CheckSupport, ReturnValue) == 0x00000C, "Member 'BtlDataBaseComponent_CheckSupport::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.CheckSupportDownUp
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_CheckSupportDownUp final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlDataSupportTable                          Support;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_CheckSupportDownUp) == 0x000008, "Wrong alignment on BtlDataBaseComponent_CheckSupportDownUp");
static_assert(sizeof(BtlDataBaseComponent_CheckSupportDownUp) == 0x000010, "Wrong size on BtlDataBaseComponent_CheckSupportDownUp");
static_assert(offsetof(BtlDataBaseComponent_CheckSupportDownUp, Actor) == 0x000000, "Member 'BtlDataBaseComponent_CheckSupportDownUp::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_CheckSupportDownUp, Support) == 0x000008, "Member 'BtlDataBaseComponent_CheckSupportDownUp::Support' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_CheckSupportDownUp, ReturnValue) == 0x000009, "Member 'BtlDataBaseComponent_CheckSupportDownUp::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.CheckTacticsIconLLSize
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_CheckTacticsIconLLSize final
{
public:
	class ABtlActor*                              Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_CheckTacticsIconLLSize) == 0x000008, "Wrong alignment on BtlDataBaseComponent_CheckTacticsIconLLSize");
static_assert(sizeof(BtlDataBaseComponent_CheckTacticsIconLLSize) == 0x000010, "Wrong size on BtlDataBaseComponent_CheckTacticsIconLLSize");
static_assert(offsetof(BtlDataBaseComponent_CheckTacticsIconLLSize, Target) == 0x000000, "Member 'BtlDataBaseComponent_CheckTacticsIconLLSize::Target' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_CheckTacticsIconLLSize, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_CheckTacticsIconLLSize::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkAllCostOff
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_ChkAllCostOff final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkAllCostOff) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkAllCostOff");
static_assert(sizeof(BtlDataBaseComponent_ChkAllCostOff) == 0x000010, "Wrong size on BtlDataBaseComponent_ChkAllCostOff");
static_assert(offsetof(BtlDataBaseComponent_ChkAllCostOff, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_ChkAllCostOff::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkAllCostOff, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_ChkAllCostOff::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkAutoSkill
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_ChkAutoSkill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkAutoSkill) == 0x000004, "Wrong alignment on BtlDataBaseComponent_ChkAutoSkill");
static_assert(sizeof(BtlDataBaseComponent_ChkAutoSkill) == 0x000008, "Wrong size on BtlDataBaseComponent_ChkAutoSkill");
static_assert(offsetof(BtlDataBaseComponent_ChkAutoSkill, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_ChkAutoSkill::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkAutoSkill, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_ChkAutoSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkEnemySideWeak
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_ChkEnemySideWeak final
{
public:
	class ABtlActor*                              Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABtlActor*>                      EnemyList;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBtlDataAttr                                  Attr;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkEnemySideWeak) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkEnemySideWeak");
static_assert(sizeof(BtlDataBaseComponent_ChkEnemySideWeak) == 0x000020, "Wrong size on BtlDataBaseComponent_ChkEnemySideWeak");
static_assert(offsetof(BtlDataBaseComponent_ChkEnemySideWeak, Action) == 0x000000, "Member 'BtlDataBaseComponent_ChkEnemySideWeak::Action' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkEnemySideWeak, EnemyList) == 0x000008, "Member 'BtlDataBaseComponent_ChkEnemySideWeak::EnemyList' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkEnemySideWeak, Attr) == 0x000018, "Member 'BtlDataBaseComponent_ChkEnemySideWeak::Attr' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkEnemySideWeak, ReturnValue) == 0x000019, "Member 'BtlDataBaseComponent_ChkEnemySideWeak::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkEnemySideWeakAll
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_ChkEnemySideWeakAll final
{
public:
	class ABtlActor*                              Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABtlActor*>                      EnemyList;                                         // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkEnemySideWeakAll) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkEnemySideWeakAll");
static_assert(sizeof(BtlDataBaseComponent_ChkEnemySideWeakAll) == 0x000020, "Wrong size on BtlDataBaseComponent_ChkEnemySideWeakAll");
static_assert(offsetof(BtlDataBaseComponent_ChkEnemySideWeakAll, Action) == 0x000000, "Member 'BtlDataBaseComponent_ChkEnemySideWeakAll::Action' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkEnemySideWeakAll, EnemyList) == 0x000008, "Member 'BtlDataBaseComponent_ChkEnemySideWeakAll::EnemyList' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkEnemySideWeakAll, ReturnValue) == 0x000018, "Member 'BtlDataBaseComponent_ChkEnemySideWeakAll::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkExcessEfficary
// 0x0028 (0x0028 - 0x0000)
struct BtlDataBaseComponent_ChkExcessEfficary final
{
public:
	class ABtlActor*                              PAction;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABtlActor*>                      TargetList;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SkillId;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsItem;                                            // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkExcessEfficary) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkExcessEfficary");
static_assert(sizeof(BtlDataBaseComponent_ChkExcessEfficary) == 0x000028, "Wrong size on BtlDataBaseComponent_ChkExcessEfficary");
static_assert(offsetof(BtlDataBaseComponent_ChkExcessEfficary, PAction) == 0x000000, "Member 'BtlDataBaseComponent_ChkExcessEfficary::PAction' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkExcessEfficary, TargetList) == 0x000008, "Member 'BtlDataBaseComponent_ChkExcessEfficary::TargetList' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkExcessEfficary, SkillId) == 0x000018, "Member 'BtlDataBaseComponent_ChkExcessEfficary::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkExcessEfficary, IsItem) == 0x00001C, "Member 'BtlDataBaseComponent_ChkExcessEfficary::IsItem' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkExcessEfficary, ReturnValue) == 0x000020, "Member 'BtlDataBaseComponent_ChkExcessEfficary::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkLastActionLoop
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_ChkLastActionLoop final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkLastActionLoop) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkLastActionLoop");
static_assert(sizeof(BtlDataBaseComponent_ChkLastActionLoop) == 0x000010, "Wrong size on BtlDataBaseComponent_ChkLastActionLoop");
static_assert(offsetof(BtlDataBaseComponent_ChkLastActionLoop, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_ChkLastActionLoop::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkLastActionLoop, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_ChkLastActionLoop::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkPlayerDamageOff
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_ChkPlayerDamageOff final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkPlayerDamageOff) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkPlayerDamageOff");
static_assert(sizeof(BtlDataBaseComponent_ChkPlayerDamageOff) == 0x000010, "Wrong size on BtlDataBaseComponent_ChkPlayerDamageOff");
static_assert(offsetof(BtlDataBaseComponent_ChkPlayerDamageOff, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_ChkPlayerDamageOff::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkPlayerDamageOff, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_ChkPlayerDamageOff::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkPrevUseSkillIDFrag
// 0x0001 (0x0001 - 0x0000)
struct BtlDataBaseComponent_ChkPrevUseSkillIDFrag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_ChkPrevUseSkillIDFrag) == 0x000001, "Wrong alignment on BtlDataBaseComponent_ChkPrevUseSkillIDFrag");
static_assert(sizeof(BtlDataBaseComponent_ChkPrevUseSkillIDFrag) == 0x000001, "Wrong size on BtlDataBaseComponent_ChkPrevUseSkillIDFrag");
static_assert(offsetof(BtlDataBaseComponent_ChkPrevUseSkillIDFrag, ReturnValue) == 0x000000, "Member 'BtlDataBaseComponent_ChkPrevUseSkillIDFrag::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkSelectAllPersona
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_ChkSelectAllPersona final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkSelectAllPersona) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkSelectAllPersona");
static_assert(sizeof(BtlDataBaseComponent_ChkSelectAllPersona) == 0x000010, "Wrong size on BtlDataBaseComponent_ChkSelectAllPersona");
static_assert(offsetof(BtlDataBaseComponent_ChkSelectAllPersona, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_ChkSelectAllPersona::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkSelectAllPersona, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_ChkSelectAllPersona::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkSelectAllSkill
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_ChkSelectAllSkill final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkSelectAllSkill) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkSelectAllSkill");
static_assert(sizeof(BtlDataBaseComponent_ChkSelectAllSkill) == 0x000010, "Wrong size on BtlDataBaseComponent_ChkSelectAllSkill");
static_assert(offsetof(BtlDataBaseComponent_ChkSelectAllSkill, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_ChkSelectAllSkill::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkSelectAllSkill, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_ChkSelectAllSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkSkillIgnoreResistances
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_ChkSkillIgnoreResistances final
{
public:
	class ABtlActor*                              Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkSkillIgnoreResistances) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkSkillIgnoreResistances");
static_assert(sizeof(BtlDataBaseComponent_ChkSkillIgnoreResistances) == 0x000010, "Wrong size on BtlDataBaseComponent_ChkSkillIgnoreResistances");
static_assert(offsetof(BtlDataBaseComponent_ChkSkillIgnoreResistances, Action) == 0x000000, "Member 'BtlDataBaseComponent_ChkSkillIgnoreResistances::Action' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkSkillIgnoreResistances, SkillId) == 0x000008, "Member 'BtlDataBaseComponent_ChkSkillIgnoreResistances::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkSkillIgnoreResistances, ReturnValue) == 0x00000C, "Member 'BtlDataBaseComponent_ChkSkillIgnoreResistances::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkSpecialSkillID
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_ChkSpecialSkillID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkSpecialSkillID) == 0x000004, "Wrong alignment on BtlDataBaseComponent_ChkSpecialSkillID");
static_assert(sizeof(BtlDataBaseComponent_ChkSpecialSkillID) == 0x000008, "Wrong size on BtlDataBaseComponent_ChkSpecialSkillID");
static_assert(offsetof(BtlDataBaseComponent_ChkSpecialSkillID, ID) == 0x000000, "Member 'BtlDataBaseComponent_ChkSpecialSkillID::ID' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkSpecialSkillID, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_ChkSpecialSkillID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkTPValid
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_ChkTPValid final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkTPValid) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkTPValid");
static_assert(sizeof(BtlDataBaseComponent_ChkTPValid) == 0x000010, "Wrong size on BtlDataBaseComponent_ChkTPValid");
static_assert(offsetof(BtlDataBaseComponent_ChkTPValid, Actor) == 0x000000, "Member 'BtlDataBaseComponent_ChkTPValid::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkTPValid, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_ChkTPValid::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkTurnOff
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_ChkTurnOff final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkTurnOff) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkTurnOff");
static_assert(sizeof(BtlDataBaseComponent_ChkTurnOff) == 0x000010, "Wrong size on BtlDataBaseComponent_ChkTurnOff");
static_assert(offsetof(BtlDataBaseComponent_ChkTurnOff, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_ChkTurnOff::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkTurnOff, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_ChkTurnOff::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkTutorialSkillList
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_ChkTutorialSkillList final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkTutorialSkillList) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkTutorialSkillList");
static_assert(sizeof(BtlDataBaseComponent_ChkTutorialSkillList) == 0x000010, "Wrong size on BtlDataBaseComponent_ChkTutorialSkillList");
static_assert(offsetof(BtlDataBaseComponent_ChkTutorialSkillList, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_ChkTutorialSkillList::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkTutorialSkillList, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_ChkTutorialSkillList::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ChkUseAllSkillAgeing
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_ChkUseAllSkillAgeing final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ChkUseAllSkillAgeing) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ChkUseAllSkillAgeing");
static_assert(sizeof(BtlDataBaseComponent_ChkUseAllSkillAgeing) == 0x000010, "Wrong size on BtlDataBaseComponent_ChkUseAllSkillAgeing");
static_assert(offsetof(BtlDataBaseComponent_ChkUseAllSkillAgeing, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_ChkUseAllSkillAgeing::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ChkUseAllSkillAgeing, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_ChkUseAllSkillAgeing::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ClearBadStatus
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_ClearBadStatus final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_ClearBadStatus) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ClearBadStatus");
static_assert(sizeof(BtlDataBaseComponent_ClearBadStatus) == 0x000008, "Wrong size on BtlDataBaseComponent_ClearBadStatus");
static_assert(offsetof(BtlDataBaseComponent_ClearBadStatus, Actor) == 0x000000, "Member 'BtlDataBaseComponent_ClearBadStatus::Actor' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ClearSupport
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_ClearSupport final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_ClearSupport) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ClearSupport");
static_assert(sizeof(BtlDataBaseComponent_ClearSupport) == 0x000008, "Wrong size on BtlDataBaseComponent_ClearSupport");
static_assert(offsetof(BtlDataBaseComponent_ClearSupport, Actor) == 0x000000, "Member 'BtlDataBaseComponent_ClearSupport::Actor' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.ClearTargetSupport
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_ClearTargetSupport final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_ClearTargetSupport) == 0x000008, "Wrong alignment on BtlDataBaseComponent_ClearTargetSupport");
static_assert(sizeof(BtlDataBaseComponent_ClearTargetSupport) == 0x000010, "Wrong size on BtlDataBaseComponent_ClearTargetSupport");
static_assert(offsetof(BtlDataBaseComponent_ClearTargetSupport, Actor) == 0x000000, "Member 'BtlDataBaseComponent_ClearTargetSupport::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_ClearTargetSupport, Type) == 0x000008, "Member 'BtlDataBaseComponent_ClearTargetSupport::Type' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.CloseAllAttr
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_CloseAllAttr final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_CloseAllAttr) == 0x000008, "Wrong alignment on BtlDataBaseComponent_CloseAllAttr");
static_assert(sizeof(BtlDataBaseComponent_CloseAllAttr) == 0x000008, "Wrong size on BtlDataBaseComponent_CloseAllAttr");
static_assert(offsetof(BtlDataBaseComponent_CloseAllAttr, Actor) == 0x000000, "Member 'BtlDataBaseComponent_CloseAllAttr::Actor' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GatAnalizeAttr
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GatAnalizeAttr final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Attr;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlDataAnalyze                               ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GatAnalizeAttr) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GatAnalizeAttr");
static_assert(sizeof(BtlDataBaseComponent_GatAnalizeAttr) == 0x000010, "Wrong size on BtlDataBaseComponent_GatAnalizeAttr");
static_assert(offsetof(BtlDataBaseComponent_GatAnalizeAttr, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GatAnalizeAttr::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GatAnalizeAttr, Attr) == 0x000008, "Member 'BtlDataBaseComponent_GatAnalizeAttr::Attr' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GatAnalizeAttr, ReturnValue) == 0x000009, "Member 'BtlDataBaseComponent_GatAnalizeAttr::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetAnalyzeAttrMaxNum
// 0x0004 (0x0004 - 0x0000)
struct BtlDataBaseComponent_GetAnalyzeAttrMaxNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetAnalyzeAttrMaxNum) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetAnalyzeAttrMaxNum");
static_assert(sizeof(BtlDataBaseComponent_GetAnalyzeAttrMaxNum) == 0x000004, "Wrong size on BtlDataBaseComponent_GetAnalyzeAttrMaxNum");
static_assert(offsetof(BtlDataBaseComponent_GetAnalyzeAttrMaxNum, ReturnValue) == 0x000000, "Member 'BtlDataBaseComponent_GetAnalyzeAttrMaxNum::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetAttackName
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_GetAttackName final
{
public:
	int32                                         Attr;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetAttackName) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetAttackName");
static_assert(sizeof(BtlDataBaseComponent_GetAttackName) == 0x000020, "Wrong size on BtlDataBaseComponent_GetAttackName");
static_assert(offsetof(BtlDataBaseComponent_GetAttackName, Attr) == 0x000000, "Member 'BtlDataBaseComponent_GetAttackName::Attr' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetAttackName, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetAttackName::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetBadStatus
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetBadStatus final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetBadStatus) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetBadStatus");
static_assert(sizeof(BtlDataBaseComponent_GetBadStatus) == 0x000010, "Wrong size on BtlDataBaseComponent_GetBadStatus");
static_assert(offsetof(BtlDataBaseComponent_GetBadStatus, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetBadStatus::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetBadStatus, Type) == 0x000008, "Member 'BtlDataBaseComponent_GetBadStatus::Type' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetBadStatus, ReturnValue) == 0x00000C, "Member 'BtlDataBaseComponent_GetBadStatus::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetBtlCommonText
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_GetBtlCommonText final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetBtlCommonText) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetBtlCommonText");
static_assert(sizeof(BtlDataBaseComponent_GetBtlCommonText) == 0x000020, "Wrong size on BtlDataBaseComponent_GetBtlCommonText");
static_assert(offsetof(BtlDataBaseComponent_GetBtlCommonText, Key) == 0x000000, "Member 'BtlDataBaseComponent_GetBtlCommonText::Key' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetBtlCommonText, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetBtlCommonText::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetCorrespondList
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_GetCorrespondList final
{
public:
	TArray<class ABtlActor*>                      Out;                                               // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class ABtlActor*                              SpEmployment;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlCommandType                               Command;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetCorrespondList) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetCorrespondList");
static_assert(sizeof(BtlDataBaseComponent_GetCorrespondList) == 0x000020, "Wrong size on BtlDataBaseComponent_GetCorrespondList");
static_assert(offsetof(BtlDataBaseComponent_GetCorrespondList, Out) == 0x000000, "Member 'BtlDataBaseComponent_GetCorrespondList::Out' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetCorrespondList, SpEmployment) == 0x000010, "Member 'BtlDataBaseComponent_GetCorrespondList::SpEmployment' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetCorrespondList, Command) == 0x000018, "Member 'BtlDataBaseComponent_GetCorrespondList::Command' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetCorrespondList, ID) == 0x00001C, "Member 'BtlDataBaseComponent_GetCorrespondList::ID' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetEnemyDropItem
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetEnemyDropItem final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetEnemyDropItem) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetEnemyDropItem");
static_assert(sizeof(BtlDataBaseComponent_GetEnemyDropItem) == 0x000010, "Wrong size on BtlDataBaseComponent_GetEnemyDropItem");
static_assert(offsetof(BtlDataBaseComponent_GetEnemyDropItem, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetEnemyDropItem::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetEnemyDropItem, Index_0) == 0x000008, "Member 'BtlDataBaseComponent_GetEnemyDropItem::Index_0' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetEnemyDropItem, ReturnValue) == 0x00000C, "Member 'BtlDataBaseComponent_GetEnemyDropItem::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetFukaTheurgiaSkill
// 0x0004 (0x0004 - 0x0000)
struct BtlDataBaseComponent_GetFukaTheurgiaSkill final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetFukaTheurgiaSkill) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetFukaTheurgiaSkill");
static_assert(sizeof(BtlDataBaseComponent_GetFukaTheurgiaSkill) == 0x000004, "Wrong size on BtlDataBaseComponent_GetFukaTheurgiaSkill");
static_assert(offsetof(BtlDataBaseComponent_GetFukaTheurgiaSkill, ReturnValue) == 0x000000, "Member 'BtlDataBaseComponent_GetFukaTheurgiaSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetInputDecideKeyCross
// 0x0001 (0x0001 - 0x0000)
struct BtlDataBaseComponent_GetInputDecideKeyCross final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetInputDecideKeyCross) == 0x000001, "Wrong alignment on BtlDataBaseComponent_GetInputDecideKeyCross");
static_assert(sizeof(BtlDataBaseComponent_GetInputDecideKeyCross) == 0x000001, "Wrong size on BtlDataBaseComponent_GetInputDecideKeyCross");
static_assert(offsetof(BtlDataBaseComponent_GetInputDecideKeyCross, ReturnValue) == 0x000000, "Member 'BtlDataBaseComponent_GetInputDecideKeyCross::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetItemBagData
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetItemBagData final
{
public:
	TArray<struct FBtlItemData>                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetItemBagData) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetItemBagData");
static_assert(sizeof(BtlDataBaseComponent_GetItemBagData) == 0x000010, "Wrong size on BtlDataBaseComponent_GetItemBagData");
static_assert(offsetof(BtlDataBaseComponent_GetItemBagData, ReturnValue) == 0x000000, "Member 'BtlDataBaseComponent_GetItemBagData::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetItemIconSprNo
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetItemIconSprNo final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetItemIconSprNo) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetItemIconSprNo");
static_assert(sizeof(BtlDataBaseComponent_GetItemIconSprNo) == 0x000008, "Wrong size on BtlDataBaseComponent_GetItemIconSprNo");
static_assert(offsetof(BtlDataBaseComponent_GetItemIconSprNo, ItemId) == 0x000000, "Member 'BtlDataBaseComponent_GetItemIconSprNo::ItemId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetItemIconSprNo, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetItemIconSprNo::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetItemName
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_GetItemName final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetItemName) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetItemName");
static_assert(sizeof(BtlDataBaseComponent_GetItemName) == 0x000020, "Wrong size on BtlDataBaseComponent_GetItemName");
static_assert(offsetof(BtlDataBaseComponent_GetItemName, ItemId) == 0x000000, "Member 'BtlDataBaseComponent_GetItemName::ItemId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetItemName, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetItemName::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetItemSkillID
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetItemSkillID final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetItemSkillID) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetItemSkillID");
static_assert(sizeof(BtlDataBaseComponent_GetItemSkillID) == 0x000008, "Wrong size on BtlDataBaseComponent_GetItemSkillID");
static_assert(offsetof(BtlDataBaseComponent_GetItemSkillID, ItemId) == 0x000000, "Member 'BtlDataBaseComponent_GetItemSkillID::ItemId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetItemSkillID, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetItemSkillID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetItemUseType
// 0x0018 (0x0018 - 0x0000)
struct BtlDataBaseComponent_GetItemUseType final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlCommandType                               Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlDataItemUseType                           ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetItemUseType) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetItemUseType");
static_assert(sizeof(BtlDataBaseComponent_GetItemUseType) == 0x000018, "Wrong size on BtlDataBaseComponent_GetItemUseType");
static_assert(offsetof(BtlDataBaseComponent_GetItemUseType, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_GetItemUseType::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetItemUseType, Type) == 0x000008, "Member 'BtlDataBaseComponent_GetItemUseType::Type' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetItemUseType, ID) == 0x00000C, "Member 'BtlDataBaseComponent_GetItemUseType::ID' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetItemUseType, ReturnValue) == 0x000010, "Member 'BtlDataBaseComponent_GetItemUseType::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetKeyControl
// 0x0018 (0x0018 - 0x0000)
struct BtlDataBaseComponent_GetKeyControl final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<bool>                                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetKeyControl) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetKeyControl");
static_assert(sizeof(BtlDataBaseComponent_GetKeyControl) == 0x000018, "Wrong size on BtlDataBaseComponent_GetKeyControl");
static_assert(offsetof(BtlDataBaseComponent_GetKeyControl, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_GetKeyControl::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetKeyControl, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetKeyControl::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetManualOperate
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetManualOperate final
{
public:
	class ABtlActor*                              Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetManualOperate) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetManualOperate");
static_assert(sizeof(BtlDataBaseComponent_GetManualOperate) == 0x000010, "Wrong size on BtlDataBaseComponent_GetManualOperate");
static_assert(offsetof(BtlDataBaseComponent_GetManualOperate, Action) == 0x000000, "Member 'BtlDataBaseComponent_GetManualOperate::Action' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetManualOperate, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetManualOperate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetNormalSkillMaxNum
// 0x0004 (0x0004 - 0x0000)
struct BtlDataBaseComponent_GetNormalSkillMaxNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetNormalSkillMaxNum) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetNormalSkillMaxNum");
static_assert(sizeof(BtlDataBaseComponent_GetNormalSkillMaxNum) == 0x000004, "Wrong size on BtlDataBaseComponent_GetNormalSkillMaxNum");
static_assert(offsetof(BtlDataBaseComponent_GetNormalSkillMaxNum, ReturnValue) == 0x000000, "Member 'BtlDataBaseComponent_GetNormalSkillMaxNum::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetOperation
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetOperation final
{
public:
	class ABtlActor*                              Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetOperation) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetOperation");
static_assert(sizeof(BtlDataBaseComponent_GetOperation) == 0x000010, "Wrong size on BtlDataBaseComponent_GetOperation");
static_assert(offsetof(BtlDataBaseComponent_GetOperation, Action) == 0x000000, "Member 'BtlDataBaseComponent_GetOperation::Action' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetOperation, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetOperation::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetOrgiaMode
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetOrgiaMode final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetOrgiaMode) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetOrgiaMode");
static_assert(sizeof(BtlDataBaseComponent_GetOrgiaMode) == 0x000010, "Wrong size on BtlDataBaseComponent_GetOrgiaMode");
static_assert(offsetof(BtlDataBaseComponent_GetOrgiaMode, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetOrgiaMode::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetOrgiaMode, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetOrgiaMode::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPersonaBySpecialSkill
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetPersonaBySpecialSkill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersonaID1;                                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersonaID2;                                        // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TwoPersona;                                        // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetPersonaBySpecialSkill) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetPersonaBySpecialSkill");
static_assert(sizeof(BtlDataBaseComponent_GetPersonaBySpecialSkill) == 0x000010, "Wrong size on BtlDataBaseComponent_GetPersonaBySpecialSkill");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaBySpecialSkill, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetPersonaBySpecialSkill::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaBySpecialSkill, PersonaID1) == 0x000004, "Member 'BtlDataBaseComponent_GetPersonaBySpecialSkill::PersonaID1' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaBySpecialSkill, PersonaID2) == 0x000008, "Member 'BtlDataBaseComponent_GetPersonaBySpecialSkill::PersonaID2' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaBySpecialSkill, TwoPersona) == 0x00000C, "Member 'BtlDataBaseComponent_GetPersonaBySpecialSkill::TwoPersona' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPersonaEquipID
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetPersonaEquipID final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetPersonaEquipID) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetPersonaEquipID");
static_assert(sizeof(BtlDataBaseComponent_GetPersonaEquipID) == 0x000010, "Wrong size on BtlDataBaseComponent_GetPersonaEquipID");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaEquipID, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetPersonaEquipID::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaEquipID, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetPersonaEquipID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPersonaEquipIndex
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetPersonaEquipIndex final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetPersonaEquipIndex) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetPersonaEquipIndex");
static_assert(sizeof(BtlDataBaseComponent_GetPersonaEquipIndex) == 0x000010, "Wrong size on BtlDataBaseComponent_GetPersonaEquipIndex");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaEquipIndex, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetPersonaEquipIndex::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaEquipIndex, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetPersonaEquipIndex::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPersonaEquipName
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_GetPersonaEquipName final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetPersonaEquipName) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetPersonaEquipName");
static_assert(sizeof(BtlDataBaseComponent_GetPersonaEquipName) == 0x000020, "Wrong size on BtlDataBaseComponent_GetPersonaEquipName");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaEquipName, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetPersonaEquipName::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaEquipName, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetPersonaEquipName::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPersonaEquipSkillList
// 0x0018 (0x0018 - 0x0000)
struct BtlDataBaseComponent_GetPersonaEquipSkillList final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetPersonaEquipSkillList) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetPersonaEquipSkillList");
static_assert(sizeof(BtlDataBaseComponent_GetPersonaEquipSkillList) == 0x000018, "Wrong size on BtlDataBaseComponent_GetPersonaEquipSkillList");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaEquipSkillList, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetPersonaEquipSkillList::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaEquipSkillList, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetPersonaEquipSkillList::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPersonaMaxNum
// 0x0004 (0x0004 - 0x0000)
struct BtlDataBaseComponent_GetPersonaMaxNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetPersonaMaxNum) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetPersonaMaxNum");
static_assert(sizeof(BtlDataBaseComponent_GetPersonaMaxNum) == 0x000004, "Wrong size on BtlDataBaseComponent_GetPersonaMaxNum");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaMaxNum, ReturnValue) == 0x000000, "Member 'BtlDataBaseComponent_GetPersonaMaxNum::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPersonaName
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_GetPersonaName final
{
public:
	int32                                         PersonaID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetPersonaName) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetPersonaName");
static_assert(sizeof(BtlDataBaseComponent_GetPersonaName) == 0x000020, "Wrong size on BtlDataBaseComponent_GetPersonaName");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaName, PersonaID) == 0x000000, "Member 'BtlDataBaseComponent_GetPersonaName::PersonaID' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaName, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetPersonaName::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPersonaNameList
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_GetPersonaNameList final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FText>                           NameList;                                          // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Equip;                                             // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetPersonaNameList) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetPersonaNameList");
static_assert(sizeof(BtlDataBaseComponent_GetPersonaNameList) == 0x000020, "Wrong size on BtlDataBaseComponent_GetPersonaNameList");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaNameList, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetPersonaNameList::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaNameList, NameList) == 0x000008, "Member 'BtlDataBaseComponent_GetPersonaNameList::NameList' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaNameList, Count) == 0x000018, "Member 'BtlDataBaseComponent_GetPersonaNameList::Count' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaNameList, Equip) == 0x00001C, "Member 'BtlDataBaseComponent_GetPersonaNameList::Equip' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPersonaSkillList
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_GetPersonaSkillList final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetPersonaSkillList) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetPersonaSkillList");
static_assert(sizeof(BtlDataBaseComponent_GetPersonaSkillList) == 0x000020, "Wrong size on BtlDataBaseComponent_GetPersonaSkillList");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaSkillList, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetPersonaSkillList::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaSkillList, Index_0) == 0x000008, "Member 'BtlDataBaseComponent_GetPersonaSkillList::Index_0' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaSkillList, ReturnValue) == 0x000010, "Member 'BtlDataBaseComponent_GetPersonaSkillList::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPersonaStockIndexList
// 0x0018 (0x0018 - 0x0000)
struct BtlDataBaseComponent_GetPersonaStockIndexList final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetPersonaStockIndexList) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetPersonaStockIndexList");
static_assert(sizeof(BtlDataBaseComponent_GetPersonaStockIndexList) == 0x000018, "Wrong size on BtlDataBaseComponent_GetPersonaStockIndexList");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaStockIndexList, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetPersonaStockIndexList::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaStockIndexList, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetPersonaStockIndexList::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPersonaTableSkillList
// 0x0018 (0x0018 - 0x0000)
struct BtlDataBaseComponent_GetPersonaTableSkillList final
{
public:
	int32                                         PersonaID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetPersonaTableSkillList) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetPersonaTableSkillList");
static_assert(sizeof(BtlDataBaseComponent_GetPersonaTableSkillList) == 0x000018, "Wrong size on BtlDataBaseComponent_GetPersonaTableSkillList");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaTableSkillList, PersonaID) == 0x000000, "Member 'BtlDataBaseComponent_GetPersonaTableSkillList::PersonaID' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPersonaTableSkillList, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetPersonaTableSkillList::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPlatFormButtonColor
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetPlatFormButtonColor final
{
public:
	int32                                         ButtonType;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetPlatFormButtonColor) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetPlatFormButtonColor");
static_assert(sizeof(BtlDataBaseComponent_GetPlatFormButtonColor) == 0x000008, "Wrong size on BtlDataBaseComponent_GetPlatFormButtonColor");
static_assert(offsetof(BtlDataBaseComponent_GetPlatFormButtonColor, ButtonType) == 0x000000, "Member 'BtlDataBaseComponent_GetPlatFormButtonColor::ButtonType' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPlatFormButtonColor, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetPlatFormButtonColor::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPrevUseItemID
// 0x0004 (0x0004 - 0x0000)
struct BtlDataBaseComponent_GetPrevUseItemID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetPrevUseItemID) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetPrevUseItemID");
static_assert(sizeof(BtlDataBaseComponent_GetPrevUseItemID) == 0x000004, "Wrong size on BtlDataBaseComponent_GetPrevUseItemID");
static_assert(offsetof(BtlDataBaseComponent_GetPrevUseItemID, ReturnValue) == 0x000000, "Member 'BtlDataBaseComponent_GetPrevUseItemID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetPrevUseSkillID
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetPrevUseSkillID final
{
public:
	class ABtlActor*                              Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetPrevUseSkillID) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetPrevUseSkillID");
static_assert(sizeof(BtlDataBaseComponent_GetPrevUseSkillID) == 0x000010, "Wrong size on BtlDataBaseComponent_GetPrevUseSkillID");
static_assert(offsetof(BtlDataBaseComponent_GetPrevUseSkillID, Action) == 0x000000, "Member 'BtlDataBaseComponent_GetPrevUseSkillID::Action' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetPrevUseSkillID, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetPrevUseSkillID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillAttr
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillAttr final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlDataAttr                                  ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillAttr) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillAttr");
static_assert(sizeof(BtlDataBaseComponent_GetSkillAttr) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillAttr");
static_assert(offsetof(BtlDataBaseComponent_GetSkillAttr, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillAttr::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillAttr, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillAttr::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillCost
// 0x0018 (0x0018 - 0x0000)
struct BtlDataBaseComponent_GetSkillCost final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              Action;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sucsess;                                           // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlDataCostType                              Cost;                                              // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetSkillCost) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetSkillCost");
static_assert(sizeof(BtlDataBaseComponent_GetSkillCost) == 0x000018, "Wrong size on BtlDataBaseComponent_GetSkillCost");
static_assert(offsetof(BtlDataBaseComponent_GetSkillCost, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillCost::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillCost, Action) == 0x000008, "Member 'BtlDataBaseComponent_GetSkillCost::Action' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillCost, Sucsess) == 0x000010, "Member 'BtlDataBaseComponent_GetSkillCost::Sucsess' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillCost, Cost) == 0x000011, "Member 'BtlDataBaseComponent_GetSkillCost::Cost' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillCost, ReturnValue) == 0x000014, "Member 'BtlDataBaseComponent_GetSkillCost::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillCostCheckOff
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillCostCheckOff final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillCostCheckOff) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillCostCheckOff");
static_assert(sizeof(BtlDataBaseComponent_GetSkillCostCheckOff) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillCostCheckOff");
static_assert(offsetof(BtlDataBaseComponent_GetSkillCostCheckOff, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillCostCheckOff::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillCostCheckOff, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillCostCheckOff::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillEfficacyType
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillEfficacyType final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlDataEfficacyType                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillEfficacyType) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillEfficacyType");
static_assert(sizeof(BtlDataBaseComponent_GetSkillEfficacyType) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillEfficacyType");
static_assert(offsetof(BtlDataBaseComponent_GetSkillEfficacyType, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillEfficacyType::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillEfficacyType, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillEfficacyType::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillIconSprNo
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillIconSprNo final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetSkillIconSprNo) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillIconSprNo");
static_assert(sizeof(BtlDataBaseComponent_GetSkillIconSprNo) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillIconSprNo");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIconSprNo, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillIconSprNo::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIconSprNo, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillIconSprNo::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillIconSprNoByAttr
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillIconSprNoByAttr final
{
public:
	EBtlDataAttr                                  Attr;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetSkillIconSprNoByAttr) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillIconSprNoByAttr");
static_assert(sizeof(BtlDataBaseComponent_GetSkillIconSprNoByAttr) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillIconSprNoByAttr");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIconSprNoByAttr, Attr) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillIconSprNoByAttr::Attr' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIconSprNoByAttr, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillIconSprNoByAttr::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillIsBadStatus
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillIsBadStatus final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillIsBadStatus) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillIsBadStatus");
static_assert(sizeof(BtlDataBaseComponent_GetSkillIsBadStatus) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillIsBadStatus");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsBadStatus, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillIsBadStatus::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsBadStatus, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillIsBadStatus::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillIsCharge
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillIsCharge final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillIsCharge) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillIsCharge");
static_assert(sizeof(BtlDataBaseComponent_GetSkillIsCharge) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillIsCharge");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsCharge, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillIsCharge::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsCharge, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillIsCharge::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillIsDamage
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillIsDamage final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlDataCostType                              Type;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillIsDamage) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillIsDamage");
static_assert(sizeof(BtlDataBaseComponent_GetSkillIsDamage) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillIsDamage");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsDamage, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillIsDamage::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsDamage, Type) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillIsDamage::Type' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsDamage, ReturnValue) == 0x000005, "Member 'BtlDataBaseComponent_GetSkillIsDamage::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillIsDamageBit
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillIsDamageBit final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillIsDamageBit) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillIsDamageBit");
static_assert(sizeof(BtlDataBaseComponent_GetSkillIsDamageBit) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillIsDamageBit");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsDamageBit, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillIsDamageBit::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsDamageBit, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillIsDamageBit::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillIsHealSupport
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillIsHealSupport final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlDataSupportTable                          Support;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillIsHealSupport) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillIsHealSupport");
static_assert(sizeof(BtlDataBaseComponent_GetSkillIsHealSupport) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillIsHealSupport");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsHealSupport, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillIsHealSupport::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsHealSupport, Support) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillIsHealSupport::Support' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsHealSupport, ReturnValue) == 0x000005, "Member 'BtlDataBaseComponent_GetSkillIsHealSupport::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillIsNoPanel
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillIsNoPanel final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillIsNoPanel) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillIsNoPanel");
static_assert(sizeof(BtlDataBaseComponent_GetSkillIsNoPanel) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillIsNoPanel");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsNoPanel, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillIsNoPanel::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsNoPanel, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillIsNoPanel::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillIsRecovery
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillIsRecovery final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlDataCostType                              Type;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillIsRecovery) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillIsRecovery");
static_assert(sizeof(BtlDataBaseComponent_GetSkillIsRecovery) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillIsRecovery");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsRecovery, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillIsRecovery::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsRecovery, Type) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillIsRecovery::Type' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsRecovery, ReturnValue) == 0x000005, "Member 'BtlDataBaseComponent_GetSkillIsRecovery::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillIsSupport
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillIsSupport final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillIsSupport) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillIsSupport");
static_assert(sizeof(BtlDataBaseComponent_GetSkillIsSupport) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillIsSupport");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsSupport, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillIsSupport::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillIsSupport, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillIsSupport::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillList
// 0x0018 (0x0018 - 0x0000)
struct BtlDataBaseComponent_GetSkillList final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Output;                                            // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetSkillList) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetSkillList");
static_assert(sizeof(BtlDataBaseComponent_GetSkillList) == 0x000018, "Wrong size on BtlDataBaseComponent_GetSkillList");
static_assert(offsetof(BtlDataBaseComponent_GetSkillList, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillList::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillList, Output) == 0x000008, "Member 'BtlDataBaseComponent_GetSkillList::Output' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillMaxNum
// 0x0004 (0x0004 - 0x0000)
struct BtlDataBaseComponent_GetSkillMaxNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetSkillMaxNum) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillMaxNum");
static_assert(sizeof(BtlDataBaseComponent_GetSkillMaxNum) == 0x000004, "Wrong size on BtlDataBaseComponent_GetSkillMaxNum");
static_assert(offsetof(BtlDataBaseComponent_GetSkillMaxNum, ReturnValue) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillMaxNum::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillName
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_GetSkillName final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sucsess;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetSkillName) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetSkillName");
static_assert(sizeof(BtlDataBaseComponent_GetSkillName) == 0x000020, "Wrong size on BtlDataBaseComponent_GetSkillName");
static_assert(offsetof(BtlDataBaseComponent_GetSkillName, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillName::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillName, Sucsess) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillName::Sucsess' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillName, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetSkillName::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillParamN
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_GetSkillParamN final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sucsess;                                           // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetSkillParamN) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetSkillParamN");
static_assert(sizeof(BtlDataBaseComponent_GetSkillParamN) == 0x000020, "Wrong size on BtlDataBaseComponent_GetSkillParamN");
static_assert(offsetof(BtlDataBaseComponent_GetSkillParamN, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillParamN::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillParamN, Sucsess) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillParamN::Sucsess' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillParamN, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetSkillParamN::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillTargetArea
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillTargetArea final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlDataTargetArea                            ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillTargetArea) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillTargetArea");
static_assert(sizeof(BtlDataBaseComponent_GetSkillTargetArea) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillTargetArea");
static_assert(offsetof(BtlDataBaseComponent_GetSkillTargetArea, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillTargetArea::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillTargetArea, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillTargetArea::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillTargetRule
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillTargetRule final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBtlDataTargetRule                     ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetSkillTargetRule) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillTargetRule");
static_assert(sizeof(BtlDataBaseComponent_GetSkillTargetRule) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillTargetRule");
static_assert(offsetof(BtlDataBaseComponent_GetSkillTargetRule, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillTargetRule::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillTargetRule, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillTargetRule::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSkillTargetType
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetSkillTargetType final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlDataTargetType                            ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetSkillTargetType) == 0x000004, "Wrong alignment on BtlDataBaseComponent_GetSkillTargetType");
static_assert(sizeof(BtlDataBaseComponent_GetSkillTargetType) == 0x000008, "Wrong size on BtlDataBaseComponent_GetSkillTargetType");
static_assert(offsetof(BtlDataBaseComponent_GetSkillTargetType, SkillId) == 0x000000, "Member 'BtlDataBaseComponent_GetSkillTargetType::SkillId' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSkillTargetType, ReturnValue) == 0x000004, "Member 'BtlDataBaseComponent_GetSkillTargetType::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSpecialAutoSkill
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetSpecialAutoSkill final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPowerUp;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetSpecialAutoSkill) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetSpecialAutoSkill");
static_assert(sizeof(BtlDataBaseComponent_GetSpecialAutoSkill) == 0x000010, "Wrong size on BtlDataBaseComponent_GetSpecialAutoSkill");
static_assert(offsetof(BtlDataBaseComponent_GetSpecialAutoSkill, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetSpecialAutoSkill::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSpecialAutoSkill, bPowerUp) == 0x000008, "Member 'BtlDataBaseComponent_GetSpecialAutoSkill::bPowerUp' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSpecialAutoSkill, ReturnValue) == 0x00000C, "Member 'BtlDataBaseComponent_GetSpecialAutoSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSpecialSkillList
// 0x0018 (0x0018 - 0x0000)
struct BtlDataBaseComponent_GetSpecialSkillList final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetSpecialSkillList) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetSpecialSkillList");
static_assert(sizeof(BtlDataBaseComponent_GetSpecialSkillList) == 0x000018, "Wrong size on BtlDataBaseComponent_GetSpecialSkillList");
static_assert(offsetof(BtlDataBaseComponent_GetSpecialSkillList, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetSpecialSkillList::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSpecialSkillList, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetSpecialSkillList::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetStatusEndurance
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetStatusEndurance final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetStatusEndurance) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetStatusEndurance");
static_assert(sizeof(BtlDataBaseComponent_GetStatusEndurance) == 0x000010, "Wrong size on BtlDataBaseComponent_GetStatusEndurance");
static_assert(offsetof(BtlDataBaseComponent_GetStatusEndurance, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetStatusEndurance::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetStatusEndurance, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetStatusEndurance::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetStatusLuck
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetStatusLuck final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetStatusLuck) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetStatusLuck");
static_assert(sizeof(BtlDataBaseComponent_GetStatusLuck) == 0x000010, "Wrong size on BtlDataBaseComponent_GetStatusLuck");
static_assert(offsetof(BtlDataBaseComponent_GetStatusLuck, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetStatusLuck::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetStatusLuck, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetStatusLuck::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetStatusMagic
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetStatusMagic final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetStatusMagic) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetStatusMagic");
static_assert(sizeof(BtlDataBaseComponent_GetStatusMagic) == 0x000010, "Wrong size on BtlDataBaseComponent_GetStatusMagic");
static_assert(offsetof(BtlDataBaseComponent_GetStatusMagic, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetStatusMagic::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetStatusMagic, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetStatusMagic::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetStatusSpeed
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetStatusSpeed final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetStatusSpeed) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetStatusSpeed");
static_assert(sizeof(BtlDataBaseComponent_GetStatusSpeed) == 0x000010, "Wrong size on BtlDataBaseComponent_GetStatusSpeed");
static_assert(offsetof(BtlDataBaseComponent_GetStatusSpeed, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetStatusSpeed::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetStatusSpeed, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetStatusSpeed::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetStatusStrength
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetStatusStrength final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetStatusStrength) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetStatusStrength");
static_assert(sizeof(BtlDataBaseComponent_GetStatusStrength) == 0x000010, "Wrong size on BtlDataBaseComponent_GetStatusStrength");
static_assert(offsetof(BtlDataBaseComponent_GetStatusStrength, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetStatusStrength::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetStatusStrength, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetStatusStrength::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSupportPoint
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetSupportPoint final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetSupportPoint) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetSupportPoint");
static_assert(sizeof(BtlDataBaseComponent_GetSupportPoint) == 0x000010, "Wrong size on BtlDataBaseComponent_GetSupportPoint");
static_assert(offsetof(BtlDataBaseComponent_GetSupportPoint, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetSupportPoint::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSupportPoint, Type) == 0x000008, "Member 'BtlDataBaseComponent_GetSupportPoint::Type' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSupportPoint, ReturnValue) == 0x00000C, "Member 'BtlDataBaseComponent_GetSupportPoint::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetSupportTurn
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetSupportTurn final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetSupportTurn) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetSupportTurn");
static_assert(sizeof(BtlDataBaseComponent_GetSupportTurn) == 0x000010, "Wrong size on BtlDataBaseComponent_GetSupportTurn");
static_assert(offsetof(BtlDataBaseComponent_GetSupportTurn, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetSupportTurn::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSupportTurn, Type) == 0x000008, "Member 'BtlDataBaseComponent_GetSupportTurn::Type' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetSupportTurn, ReturnValue) == 0x00000C, "Member 'BtlDataBaseComponent_GetSupportTurn::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetTargetEffectiveIndex
// 0x0018 (0x0018 - 0x0000)
struct BtlDataBaseComponent_GetTargetEffectiveIndex final
{
public:
	TArray<class ABtlActor*>                      Target;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBtlDataCostType                              Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetTargetEffectiveIndex) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetTargetEffectiveIndex");
static_assert(sizeof(BtlDataBaseComponent_GetTargetEffectiveIndex) == 0x000018, "Wrong size on BtlDataBaseComponent_GetTargetEffectiveIndex");
static_assert(offsetof(BtlDataBaseComponent_GetTargetEffectiveIndex, Target) == 0x000000, "Member 'BtlDataBaseComponent_GetTargetEffectiveIndex::Target' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetTargetEffectiveIndex, Type) == 0x000010, "Member 'BtlDataBaseComponent_GetTargetEffectiveIndex::Type' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetTargetEffectiveIndex, ReturnValue) == 0x000014, "Member 'BtlDataBaseComponent_GetTargetEffectiveIndex::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetTheurgiaFlavorBMD
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_GetTheurgiaFlavorBMD final
{
public:
	class UBmdAsset*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetTheurgiaFlavorBMD) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetTheurgiaFlavorBMD");
static_assert(sizeof(BtlDataBaseComponent_GetTheurgiaFlavorBMD) == 0x000008, "Wrong size on BtlDataBaseComponent_GetTheurgiaFlavorBMD");
static_assert(offsetof(BtlDataBaseComponent_GetTheurgiaFlavorBMD, ReturnValue) == 0x000000, "Member 'BtlDataBaseComponent_GetTheurgiaFlavorBMD::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetUINextAction
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetUINextAction final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABtlActor*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetUINextAction) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetUINextAction");
static_assert(sizeof(BtlDataBaseComponent_GetUINextAction) == 0x000010, "Wrong size on BtlDataBaseComponent_GetUINextAction");
static_assert(offsetof(BtlDataBaseComponent_GetUINextAction, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_GetUINextAction::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetUINextAction, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetUINextAction::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetUnitArcana
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetUnitArcana final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetUnitArcana) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetUnitArcana");
static_assert(sizeof(BtlDataBaseComponent_GetUnitArcana) == 0x000010, "Wrong size on BtlDataBaseComponent_GetUnitArcana");
static_assert(offsetof(BtlDataBaseComponent_GetUnitArcana, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetUnitArcana::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetUnitArcana, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetUnitArcana::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetUnitHP
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetUnitHP final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetUnitHP) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetUnitHP");
static_assert(sizeof(BtlDataBaseComponent_GetUnitHP) == 0x000010, "Wrong size on BtlDataBaseComponent_GetUnitHP");
static_assert(offsetof(BtlDataBaseComponent_GetUnitHP, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetUnitHP::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetUnitHP, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetUnitHP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetUnitID
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetUnitID final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetUnitID) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetUnitID");
static_assert(sizeof(BtlDataBaseComponent_GetUnitID) == 0x000010, "Wrong size on BtlDataBaseComponent_GetUnitID");
static_assert(offsetof(BtlDataBaseComponent_GetUnitID, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetUnitID::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetUnitID, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetUnitID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetUnitLevel
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetUnitLevel final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetUnitLevel) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetUnitLevel");
static_assert(sizeof(BtlDataBaseComponent_GetUnitLevel) == 0x000010, "Wrong size on BtlDataBaseComponent_GetUnitLevel");
static_assert(offsetof(BtlDataBaseComponent_GetUnitLevel, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetUnitLevel::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetUnitLevel, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetUnitLevel::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetUnitMaxHP
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetUnitMaxHP final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetUnitMaxHP) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetUnitMaxHP");
static_assert(sizeof(BtlDataBaseComponent_GetUnitMaxHP) == 0x000010, "Wrong size on BtlDataBaseComponent_GetUnitMaxHP");
static_assert(offsetof(BtlDataBaseComponent_GetUnitMaxHP, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetUnitMaxHP::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetUnitMaxHP, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetUnitMaxHP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetUnitMaxSP
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetUnitMaxSP final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetUnitMaxSP) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetUnitMaxSP");
static_assert(sizeof(BtlDataBaseComponent_GetUnitMaxSP) == 0x000010, "Wrong size on BtlDataBaseComponent_GetUnitMaxSP");
static_assert(offsetof(BtlDataBaseComponent_GetUnitMaxSP, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetUnitMaxSP::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetUnitMaxSP, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetUnitMaxSP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetUnitMaxTP
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetUnitMaxTP final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetUnitMaxTP) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetUnitMaxTP");
static_assert(sizeof(BtlDataBaseComponent_GetUnitMaxTP) == 0x000010, "Wrong size on BtlDataBaseComponent_GetUnitMaxTP");
static_assert(offsetof(BtlDataBaseComponent_GetUnitMaxTP, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetUnitMaxTP::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetUnitMaxTP, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetUnitMaxTP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetUnitName
// 0x0028 (0x0028 - 0x0000)
struct BtlDataBaseComponent_GetUnitName final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InsertSpace;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetUnitName) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetUnitName");
static_assert(sizeof(BtlDataBaseComponent_GetUnitName) == 0x000028, "Wrong size on BtlDataBaseComponent_GetUnitName");
static_assert(offsetof(BtlDataBaseComponent_GetUnitName, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetUnitName::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetUnitName, InsertSpace) == 0x000008, "Member 'BtlDataBaseComponent_GetUnitName::InsertSpace' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetUnitName, ReturnValue) == 0x000010, "Member 'BtlDataBaseComponent_GetUnitName::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetUnitSP
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetUnitSP final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetUnitSP) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetUnitSP");
static_assert(sizeof(BtlDataBaseComponent_GetUnitSP) == 0x000010, "Wrong size on BtlDataBaseComponent_GetUnitSP");
static_assert(offsetof(BtlDataBaseComponent_GetUnitSP, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetUnitSP::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetUnitSP, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetUnitSP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetUnitTP
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetUnitTP final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_GetUnitTP) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetUnitTP");
static_assert(sizeof(BtlDataBaseComponent_GetUnitTP) == 0x000010, "Wrong size on BtlDataBaseComponent_GetUnitTP");
static_assert(offsetof(BtlDataBaseComponent_GetUnitTP, Actor) == 0x000000, "Member 'BtlDataBaseComponent_GetUnitTP::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetUnitTP, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetUnitTP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.GetViewTargetActor
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_GetViewTargetActor final
{
public:
	class APlayerCameraManager*                   CameraManager;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_GetViewTargetActor) == 0x000008, "Wrong alignment on BtlDataBaseComponent_GetViewTargetActor");
static_assert(sizeof(BtlDataBaseComponent_GetViewTargetActor) == 0x000010, "Wrong size on BtlDataBaseComponent_GetViewTargetActor");
static_assert(offsetof(BtlDataBaseComponent_GetViewTargetActor, CameraManager) == 0x000000, "Member 'BtlDataBaseComponent_GetViewTargetActor::CameraManager' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_GetViewTargetActor, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_GetViewTargetActor::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.MoveCursorTactics
// 0x0038 (0x0038 - 0x0000)
struct BtlDataBaseComponent_MoveCursorTactics final
{
public:
	int32                                         NowIdx;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABtlActor*>                      List;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      PosCursor;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBtlDataMoveCursorTactics                     MoveCursor;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBoss;                                            // 0x0029(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_MoveCursorTactics) == 0x000008, "Wrong alignment on BtlDataBaseComponent_MoveCursorTactics");
static_assert(sizeof(BtlDataBaseComponent_MoveCursorTactics) == 0x000038, "Wrong size on BtlDataBaseComponent_MoveCursorTactics");
static_assert(offsetof(BtlDataBaseComponent_MoveCursorTactics, NowIdx) == 0x000000, "Member 'BtlDataBaseComponent_MoveCursorTactics::NowIdx' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_MoveCursorTactics, List) == 0x000008, "Member 'BtlDataBaseComponent_MoveCursorTactics::List' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_MoveCursorTactics, PosCursor) == 0x000018, "Member 'BtlDataBaseComponent_MoveCursorTactics::PosCursor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_MoveCursorTactics, MoveCursor) == 0x000028, "Member 'BtlDataBaseComponent_MoveCursorTactics::MoveCursor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_MoveCursorTactics, IsBoss) == 0x000029, "Member 'BtlDataBaseComponent_MoveCursorTactics::IsBoss' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_MoveCursorTactics, ReturnValue) == 0x000030, "Member 'BtlDataBaseComponent_MoveCursorTactics::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.MoveCursorTacticsSimple
// 0x0038 (0x0038 - 0x0000)
struct BtlDataBaseComponent_MoveCursorTacticsSimple final
{
public:
	int32                                         NowIdx;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABtlActor*>                      List;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      PosCursor;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBtlDataMoveCursorTactics                     MoveCursor;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_MoveCursorTacticsSimple) == 0x000008, "Wrong alignment on BtlDataBaseComponent_MoveCursorTacticsSimple");
static_assert(sizeof(BtlDataBaseComponent_MoveCursorTacticsSimple) == 0x000038, "Wrong size on BtlDataBaseComponent_MoveCursorTacticsSimple");
static_assert(offsetof(BtlDataBaseComponent_MoveCursorTacticsSimple, NowIdx) == 0x000000, "Member 'BtlDataBaseComponent_MoveCursorTacticsSimple::NowIdx' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_MoveCursorTacticsSimple, List) == 0x000008, "Member 'BtlDataBaseComponent_MoveCursorTacticsSimple::List' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_MoveCursorTacticsSimple, PosCursor) == 0x000018, "Member 'BtlDataBaseComponent_MoveCursorTacticsSimple::PosCursor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_MoveCursorTacticsSimple, MoveCursor) == 0x000028, "Member 'BtlDataBaseComponent_MoveCursorTacticsSimple::MoveCursor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_MoveCursorTacticsSimple, ReturnValue) == 0x000030, "Member 'BtlDataBaseComponent_MoveCursorTacticsSimple::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.OpenAllAttr
// 0x0008 (0x0008 - 0x0000)
struct BtlDataBaseComponent_OpenAllAttr final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_OpenAllAttr) == 0x000008, "Wrong alignment on BtlDataBaseComponent_OpenAllAttr");
static_assert(sizeof(BtlDataBaseComponent_OpenAllAttr) == 0x000008, "Wrong size on BtlDataBaseComponent_OpenAllAttr");
static_assert(offsetof(BtlDataBaseComponent_OpenAllAttr, Actor) == 0x000000, "Member 'BtlDataBaseComponent_OpenAllAttr::Actor' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SavePrevUseItemID
// 0x0004 (0x0004 - 0x0000)
struct BtlDataBaseComponent_SavePrevUseItemID final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_SavePrevUseItemID) == 0x000004, "Wrong alignment on BtlDataBaseComponent_SavePrevUseItemID");
static_assert(sizeof(BtlDataBaseComponent_SavePrevUseItemID) == 0x000004, "Wrong size on BtlDataBaseComponent_SavePrevUseItemID");
static_assert(offsetof(BtlDataBaseComponent_SavePrevUseItemID, ID) == 0x000000, "Member 'BtlDataBaseComponent_SavePrevUseItemID::ID' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SavePrevUseSkillID
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_SavePrevUseSkillID final
{
public:
	class ABtlActor*                              Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_SavePrevUseSkillID) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SavePrevUseSkillID");
static_assert(sizeof(BtlDataBaseComponent_SavePrevUseSkillID) == 0x000010, "Wrong size on BtlDataBaseComponent_SavePrevUseSkillID");
static_assert(offsetof(BtlDataBaseComponent_SavePrevUseSkillID, Action) == 0x000000, "Member 'BtlDataBaseComponent_SavePrevUseSkillID::Action' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SavePrevUseSkillID, ID) == 0x000008, "Member 'BtlDataBaseComponent_SavePrevUseSkillID::ID' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SaveReceiveSkillAttr
// 0x0018 (0x0018 - 0x0000)
struct BtlDataBaseComponent_SaveReceiveSkillAttr final
{
public:
	TArray<class ABtlActor*>                      Targets;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	EBtlDataAttr                                  Attr;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_SaveReceiveSkillAttr) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SaveReceiveSkillAttr");
static_assert(sizeof(BtlDataBaseComponent_SaveReceiveSkillAttr) == 0x000018, "Wrong size on BtlDataBaseComponent_SaveReceiveSkillAttr");
static_assert(offsetof(BtlDataBaseComponent_SaveReceiveSkillAttr, Targets) == 0x000000, "Member 'BtlDataBaseComponent_SaveReceiveSkillAttr::Targets' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SaveReceiveSkillAttr, Attr) == 0x000010, "Member 'BtlDataBaseComponent_SaveReceiveSkillAttr::Attr' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SetBadStatus
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_SetBadStatus final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_SetBadStatus) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SetBadStatus");
static_assert(sizeof(BtlDataBaseComponent_SetBadStatus) == 0x000010, "Wrong size on BtlDataBaseComponent_SetBadStatus");
static_assert(offsetof(BtlDataBaseComponent_SetBadStatus, Actor) == 0x000000, "Member 'BtlDataBaseComponent_SetBadStatus::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SetBadStatus, Type) == 0x000008, "Member 'BtlDataBaseComponent_SetBadStatus::Type' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SetHighStreamingLocation
// 0x000C (0x000C - 0x0000)
struct BtlDataBaseComponent_SetHighStreamingLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_SetHighStreamingLocation) == 0x000004, "Wrong alignment on BtlDataBaseComponent_SetHighStreamingLocation");
static_assert(sizeof(BtlDataBaseComponent_SetHighStreamingLocation) == 0x00000C, "Wrong size on BtlDataBaseComponent_SetHighStreamingLocation");
static_assert(offsetof(BtlDataBaseComponent_SetHighStreamingLocation, Location) == 0x000000, "Member 'BtlDataBaseComponent_SetHighStreamingLocation::Location' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SetManualOperate
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_SetManualOperate final
{
public:
	class ABtlActor*                              Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsManual;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_SetManualOperate) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SetManualOperate");
static_assert(sizeof(BtlDataBaseComponent_SetManualOperate) == 0x000010, "Wrong size on BtlDataBaseComponent_SetManualOperate");
static_assert(offsetof(BtlDataBaseComponent_SetManualOperate, Action) == 0x000000, "Member 'BtlDataBaseComponent_SetManualOperate::Action' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SetManualOperate, IsManual) == 0x000008, "Member 'BtlDataBaseComponent_SetManualOperate::IsManual' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SetOperation
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_SetOperation final
{
public:
	class ABtlActor*                              Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Operation;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_SetOperation) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SetOperation");
static_assert(sizeof(BtlDataBaseComponent_SetOperation) == 0x000010, "Wrong size on BtlDataBaseComponent_SetOperation");
static_assert(offsetof(BtlDataBaseComponent_SetOperation, Action) == 0x000000, "Member 'BtlDataBaseComponent_SetOperation::Action' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SetOperation, Operation) == 0x000008, "Member 'BtlDataBaseComponent_SetOperation::Operation' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SetPersonaDefaultStock
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_SetPersonaDefaultStock final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersonaID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_SetPersonaDefaultStock) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SetPersonaDefaultStock");
static_assert(sizeof(BtlDataBaseComponent_SetPersonaDefaultStock) == 0x000010, "Wrong size on BtlDataBaseComponent_SetPersonaDefaultStock");
static_assert(offsetof(BtlDataBaseComponent_SetPersonaDefaultStock, Actor) == 0x000000, "Member 'BtlDataBaseComponent_SetPersonaDefaultStock::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SetPersonaDefaultStock, PersonaID) == 0x000008, "Member 'BtlDataBaseComponent_SetPersonaDefaultStock::PersonaID' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SetPersonaDefaultStock, Index_0) == 0x00000C, "Member 'BtlDataBaseComponent_SetPersonaDefaultStock::Index_0' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SetPersonaEquipID
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_SetPersonaEquipID final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_SetPersonaEquipID) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SetPersonaEquipID");
static_assert(sizeof(BtlDataBaseComponent_SetPersonaEquipID) == 0x000010, "Wrong size on BtlDataBaseComponent_SetPersonaEquipID");
static_assert(offsetof(BtlDataBaseComponent_SetPersonaEquipID, Actor) == 0x000000, "Member 'BtlDataBaseComponent_SetPersonaEquipID::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SetPersonaEquipID, ID) == 0x000008, "Member 'BtlDataBaseComponent_SetPersonaEquipID::ID' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SetPersonaStockEquip
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_SetPersonaStockEquip final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_SetPersonaStockEquip) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SetPersonaStockEquip");
static_assert(sizeof(BtlDataBaseComponent_SetPersonaStockEquip) == 0x000010, "Wrong size on BtlDataBaseComponent_SetPersonaStockEquip");
static_assert(offsetof(BtlDataBaseComponent_SetPersonaStockEquip, Actor) == 0x000000, "Member 'BtlDataBaseComponent_SetPersonaStockEquip::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SetPersonaStockEquip, Index_0) == 0x000008, "Member 'BtlDataBaseComponent_SetPersonaStockEquip::Index_0' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SetSupport
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_SetSupport final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_SetSupport) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SetSupport");
static_assert(sizeof(BtlDataBaseComponent_SetSupport) == 0x000010, "Wrong size on BtlDataBaseComponent_SetSupport");
static_assert(offsetof(BtlDataBaseComponent_SetSupport, Actor) == 0x000000, "Member 'BtlDataBaseComponent_SetSupport::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SetSupport, Type) == 0x000008, "Member 'BtlDataBaseComponent_SetSupport::Type' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SetUnitHP
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_SetUnitHP final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hp;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_SetUnitHP) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SetUnitHP");
static_assert(sizeof(BtlDataBaseComponent_SetUnitHP) == 0x000010, "Wrong size on BtlDataBaseComponent_SetUnitHP");
static_assert(offsetof(BtlDataBaseComponent_SetUnitHP, Actor) == 0x000000, "Member 'BtlDataBaseComponent_SetUnitHP::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SetUnitHP, Hp) == 0x000008, "Member 'BtlDataBaseComponent_SetUnitHP::Hp' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SetUnitSP
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_SetUnitSP final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hp;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_SetUnitSP) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SetUnitSP");
static_assert(sizeof(BtlDataBaseComponent_SetUnitSP) == 0x000010, "Wrong size on BtlDataBaseComponent_SetUnitSP");
static_assert(offsetof(BtlDataBaseComponent_SetUnitSP, Actor) == 0x000000, "Member 'BtlDataBaseComponent_SetUnitSP::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SetUnitSP, Hp) == 0x000008, "Member 'BtlDataBaseComponent_SetUnitSP::Hp' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SetUnitTP
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_SetUnitTP final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hp;                                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_SetUnitTP) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SetUnitTP");
static_assert(sizeof(BtlDataBaseComponent_SetUnitTP) == 0x000010, "Wrong size on BtlDataBaseComponent_SetUnitTP");
static_assert(offsetof(BtlDataBaseComponent_SetUnitTP, Actor) == 0x000000, "Member 'BtlDataBaseComponent_SetUnitTP::Actor' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SetUnitTP, Hp) == 0x000008, "Member 'BtlDataBaseComponent_SetUnitTP::Hp' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SortEnemyTacticsList
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_SortEnemyTacticsList final
{
public:
	TArray<class ABtlActor*>                      InList;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_SortEnemyTacticsList) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SortEnemyTacticsList");
static_assert(sizeof(BtlDataBaseComponent_SortEnemyTacticsList) == 0x000020, "Wrong size on BtlDataBaseComponent_SortEnemyTacticsList");
static_assert(offsetof(BtlDataBaseComponent_SortEnemyTacticsList, InList) == 0x000000, "Member 'BtlDataBaseComponent_SortEnemyTacticsList::InList' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SortEnemyTacticsList, ReturnValue) == 0x000010, "Member 'BtlDataBaseComponent_SortEnemyTacticsList::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SortItemBagData
// 0x0028 (0x0028 - 0x0000)
struct BtlDataBaseComponent_SortItemBagData final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBtlItemData>                   In;                                                // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBtlItemData>                   ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_SortItemBagData) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SortItemBagData");
static_assert(sizeof(BtlDataBaseComponent_SortItemBagData) == 0x000028, "Wrong size on BtlDataBaseComponent_SortItemBagData");
static_assert(offsetof(BtlDataBaseComponent_SortItemBagData, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_SortItemBagData::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SortItemBagData, In) == 0x000008, "Member 'BtlDataBaseComponent_SortItemBagData::In' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SortItemBagData, ReturnValue) == 0x000018, "Member 'BtlDataBaseComponent_SortItemBagData::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SortPlayerTacticsList
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_SortPlayerTacticsList final
{
public:
	TArray<class ABtlActor*>                      InList;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_SortPlayerTacticsList) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SortPlayerTacticsList");
static_assert(sizeof(BtlDataBaseComponent_SortPlayerTacticsList) == 0x000020, "Wrong size on BtlDataBaseComponent_SortPlayerTacticsList");
static_assert(offsetof(BtlDataBaseComponent_SortPlayerTacticsList, InList) == 0x000000, "Member 'BtlDataBaseComponent_SortPlayerTacticsList::InList' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SortPlayerTacticsList, ReturnValue) == 0x000010, "Member 'BtlDataBaseComponent_SortPlayerTacticsList::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.StartNavigation
// 0x0028 (0x0028 - 0x0000)
struct BtlDataBaseComponent_StartNavigation final
{
public:
	class ABtlActor*                              Action;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiState                                  State;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABtlActor*>                      Target;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PersonaID;                                         // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Physical;                                          // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_StartNavigation) == 0x000008, "Wrong alignment on BtlDataBaseComponent_StartNavigation");
static_assert(sizeof(BtlDataBaseComponent_StartNavigation) == 0x000028, "Wrong size on BtlDataBaseComponent_StartNavigation");
static_assert(offsetof(BtlDataBaseComponent_StartNavigation, Action) == 0x000000, "Member 'BtlDataBaseComponent_StartNavigation::Action' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_StartNavigation, State) == 0x000008, "Member 'BtlDataBaseComponent_StartNavigation::State' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_StartNavigation, ID) == 0x00000C, "Member 'BtlDataBaseComponent_StartNavigation::ID' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_StartNavigation, Target) == 0x000010, "Member 'BtlDataBaseComponent_StartNavigation::Target' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_StartNavigation, PersonaID) == 0x000020, "Member 'BtlDataBaseComponent_StartNavigation::PersonaID' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_StartNavigation, Physical) == 0x000024, "Member 'BtlDataBaseComponent_StartNavigation::Physical' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.StartTheugiaWindow
// 0x0020 (0x0020 - 0x0000)
struct BtlDataBaseComponent_StartTheugiaWindow final
{
public:
	class ABtlActor*                              PAction;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABtlActor*>                      TargetList;                                        // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_StartTheugiaWindow) == 0x000008, "Wrong alignment on BtlDataBaseComponent_StartTheugiaWindow");
static_assert(sizeof(BtlDataBaseComponent_StartTheugiaWindow) == 0x000020, "Wrong size on BtlDataBaseComponent_StartTheugiaWindow");
static_assert(offsetof(BtlDataBaseComponent_StartTheugiaWindow, PAction) == 0x000000, "Member 'BtlDataBaseComponent_StartTheugiaWindow::PAction' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_StartTheugiaWindow, TargetList) == 0x000008, "Member 'BtlDataBaseComponent_StartTheugiaWindow::TargetList' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_StartTheugiaWindow, ReturnValue) == 0x000018, "Member 'BtlDataBaseComponent_StartTheugiaWindow::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SyncRewuestTutorial
// 0x0010 (0x0010 - 0x0000)
struct BtlDataBaseComponent_SyncRewuestTutorial final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlDataBaseComponent_SyncRewuestTutorial) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SyncRewuestTutorial");
static_assert(sizeof(BtlDataBaseComponent_SyncRewuestTutorial) == 0x000010, "Wrong size on BtlDataBaseComponent_SyncRewuestTutorial");
static_assert(offsetof(BtlDataBaseComponent_SyncRewuestTutorial, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_SyncRewuestTutorial::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SyncRewuestTutorial, ReturnValue) == 0x000008, "Member 'BtlDataBaseComponent_SyncRewuestTutorial::ReturnValue' has a wrong offset!");

// Function xrd777.BtlDataBaseComponent.SyncTheugiaWindowEnd
// 0x0018 (0x0018 - 0x0000)
struct BtlDataBaseComponent_SyncTheugiaWindowEnd final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnd;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlDataBaseComponent_SyncTheugiaWindowEnd) == 0x000008, "Wrong alignment on BtlDataBaseComponent_SyncTheugiaWindowEnd");
static_assert(sizeof(BtlDataBaseComponent_SyncTheugiaWindowEnd) == 0x000018, "Wrong size on BtlDataBaseComponent_SyncTheugiaWindowEnd");
static_assert(offsetof(BtlDataBaseComponent_SyncTheugiaWindowEnd, BtlCore) == 0x000000, "Member 'BtlDataBaseComponent_SyncTheugiaWindowEnd::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SyncTheugiaWindowEnd, IsEnd) == 0x000008, "Member 'BtlDataBaseComponent_SyncTheugiaWindowEnd::IsEnd' has a wrong offset!");
static_assert(offsetof(BtlDataBaseComponent_SyncTheugiaWindowEnd, ReturnValue) == 0x000010, "Member 'BtlDataBaseComponent_SyncTheugiaWindowEnd::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEnvironmentBase.GetLoversFogEffects
// 0x0010 (0x0010 - 0x0000)
struct BtlEnvironmentBase_GetLoversFogEffects final
{
public:
	TArray<class ANiagaraActor*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEnvironmentBase_GetLoversFogEffects) == 0x000008, "Wrong alignment on BtlEnvironmentBase_GetLoversFogEffects");
static_assert(sizeof(BtlEnvironmentBase_GetLoversFogEffects) == 0x000010, "Wrong size on BtlEnvironmentBase_GetLoversFogEffects");
static_assert(offsetof(BtlEnvironmentBase_GetLoversFogEffects, ReturnValue) == 0x000000, "Member 'BtlEnvironmentBase_GetLoversFogEffects::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEnvironmentBase.GetMonorailBGObj
// 0x0008 (0x0008 - 0x0000)
struct BtlEnvironmentBase_GetMonorailBGObj final
{
public:
	class AFldAnimObj*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEnvironmentBase_GetMonorailBGObj) == 0x000008, "Wrong alignment on BtlEnvironmentBase_GetMonorailBGObj");
static_assert(sizeof(BtlEnvironmentBase_GetMonorailBGObj) == 0x000008, "Wrong size on BtlEnvironmentBase_GetMonorailBGObj");
static_assert(offsetof(BtlEnvironmentBase_GetMonorailBGObj, ReturnValue) == 0x000000, "Member 'BtlEnvironmentBase_GetMonorailBGObj::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEnvironmentBase.GetMonorailRushEffects
// 0x0010 (0x0010 - 0x0000)
struct BtlEnvironmentBase_GetMonorailRushEffects final
{
public:
	TArray<class ANiagaraActor*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEnvironmentBase_GetMonorailRushEffects) == 0x000008, "Wrong alignment on BtlEnvironmentBase_GetMonorailRushEffects");
static_assert(sizeof(BtlEnvironmentBase_GetMonorailRushEffects) == 0x000010, "Wrong size on BtlEnvironmentBase_GetMonorailRushEffects");
static_assert(offsetof(BtlEnvironmentBase_GetMonorailRushEffects, ReturnValue) == 0x000000, "Member 'BtlEnvironmentBase_GetMonorailRushEffects::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEnvironmentBase.GetMonorailStrapObj
// 0x0010 (0x0010 - 0x0000)
struct BtlEnvironmentBase_GetMonorailStrapObj final
{
public:
	TArray<class AFldAnimObj*>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEnvironmentBase_GetMonorailStrapObj) == 0x000008, "Wrong alignment on BtlEnvironmentBase_GetMonorailStrapObj");
static_assert(sizeof(BtlEnvironmentBase_GetMonorailStrapObj) == 0x000010, "Wrong size on BtlEnvironmentBase_GetMonorailStrapObj");
static_assert(offsetof(BtlEnvironmentBase_GetMonorailStrapObj, ReturnValue) == 0x000000, "Member 'BtlEnvironmentBase_GetMonorailStrapObj::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEnvironmentBase.GetMonorailWallObj
// 0x0010 (0x0010 - 0x0000)
struct BtlEnvironmentBase_GetMonorailWallObj final
{
public:
	TArray<class AFldAnimObj*>                    ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEnvironmentBase_GetMonorailWallObj) == 0x000008, "Wrong alignment on BtlEnvironmentBase_GetMonorailWallObj");
static_assert(sizeof(BtlEnvironmentBase_GetMonorailWallObj) == 0x000010, "Wrong size on BtlEnvironmentBase_GetMonorailWallObj");
static_assert(offsetof(BtlEnvironmentBase_GetMonorailWallObj, ReturnValue) == 0x000000, "Member 'BtlEnvironmentBase_GetMonorailWallObj::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEnvironmentBase.GetNyxAvatarFeatherEffects
// 0x0010 (0x0010 - 0x0000)
struct BtlEnvironmentBase_GetNyxAvatarFeatherEffects final
{
public:
	TArray<class ANiagaraActor*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEnvironmentBase_GetNyxAvatarFeatherEffects) == 0x000008, "Wrong alignment on BtlEnvironmentBase_GetNyxAvatarFeatherEffects");
static_assert(sizeof(BtlEnvironmentBase_GetNyxAvatarFeatherEffects) == 0x000010, "Wrong size on BtlEnvironmentBase_GetNyxAvatarFeatherEffects");
static_assert(offsetof(BtlEnvironmentBase_GetNyxAvatarFeatherEffects, ReturnValue) == 0x000000, "Member 'BtlEnvironmentBase_GetNyxAvatarFeatherEffects::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEventAlloutShuffleMonitor.StartShuffleTime
// 0x0008 (0x0008 - 0x0000)
struct BtlEventAlloutShuffleMonitor_StartShuffleTime final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEventAlloutShuffleMonitor_StartShuffleTime) == 0x000008, "Wrong alignment on BtlEventAlloutShuffleMonitor_StartShuffleTime");
static_assert(sizeof(BtlEventAlloutShuffleMonitor_StartShuffleTime) == 0x000008, "Wrong size on BtlEventAlloutShuffleMonitor_StartShuffleTime");
static_assert(offsetof(BtlEventAlloutShuffleMonitor_StartShuffleTime, BtlCore) == 0x000000, "Member 'BtlEventAlloutShuffleMonitor_StartShuffleTime::BtlCore' has a wrong offset!");

// Function xrd777.BtlEventAlloutShuffleMonitor.CheckReadyToDestroy
// 0x0001 (0x0001 - 0x0000)
struct BtlEventAlloutShuffleMonitor_CheckReadyToDestroy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEventAlloutShuffleMonitor_CheckReadyToDestroy) == 0x000001, "Wrong alignment on BtlEventAlloutShuffleMonitor_CheckReadyToDestroy");
static_assert(sizeof(BtlEventAlloutShuffleMonitor_CheckReadyToDestroy) == 0x000001, "Wrong size on BtlEventAlloutShuffleMonitor_CheckReadyToDestroy");
static_assert(offsetof(BtlEventAlloutShuffleMonitor_CheckReadyToDestroy, ReturnValue) == 0x000000, "Member 'BtlEventAlloutShuffleMonitor_CheckReadyToDestroy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEventController.CommonEventStart
// 0x0001 (0x0001 - 0x0000)
struct BtlEventController_CommonEventStart final
{
public:
	EBtlCommonEventType                           EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEventController_CommonEventStart) == 0x000001, "Wrong alignment on BtlEventController_CommonEventStart");
static_assert(sizeof(BtlEventController_CommonEventStart) == 0x000001, "Wrong size on BtlEventController_CommonEventStart");
static_assert(offsetof(BtlEventController_CommonEventStart, EventType) == 0x000000, "Member 'BtlEventController_CommonEventStart::EventType' has a wrong offset!");

// Function xrd777.BtlEventController.EventStart
// 0x0001 (0x0001 - 0x0000)
struct BtlEventController_EventStart final
{
public:
	EBtlEventType                                 EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEventController_EventStart) == 0x000001, "Wrong alignment on BtlEventController_EventStart");
static_assert(sizeof(BtlEventController_EventStart) == 0x000001, "Wrong size on BtlEventController_EventStart");
static_assert(offsetof(BtlEventController_EventStart, EventType) == 0x000000, "Member 'BtlEventController_EventStart::EventType' has a wrong offset!");

// Function xrd777.BtlEventController.HasEventScriptForBP
// 0x0028 (0x0028 - 0x0000)
struct BtlEventController_HasEventScriptForBP final
{
public:
	struct FBtlEncountParam                       EncParam;                                          // 0x0000(0x0024)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlEventController_HasEventScriptForBP) == 0x000004, "Wrong alignment on BtlEventController_HasEventScriptForBP");
static_assert(sizeof(BtlEventController_HasEventScriptForBP) == 0x000028, "Wrong size on BtlEventController_HasEventScriptForBP");
static_assert(offsetof(BtlEventController_HasEventScriptForBP, EncParam) == 0x000000, "Member 'BtlEventController_HasEventScriptForBP::EncParam' has a wrong offset!");
static_assert(offsetof(BtlEventController_HasEventScriptForBP, ReturnValue) == 0x000024, "Member 'BtlEventController_HasEventScriptForBP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEventController.IsPlayingEvent
// 0x0001 (0x0001 - 0x0000)
struct BtlEventController_IsPlayingEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEventController_IsPlayingEvent) == 0x000001, "Wrong alignment on BtlEventController_IsPlayingEvent");
static_assert(sizeof(BtlEventController_IsPlayingEvent) == 0x000001, "Wrong size on BtlEventController_IsPlayingEvent");
static_assert(offsetof(BtlEventController_IsPlayingEvent, ReturnValue) == 0x000000, "Member 'BtlEventController_IsPlayingEvent::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEventController.SetPerformer
// 0x0010 (0x0010 - 0x0000)
struct BtlEventController_SetPerformer final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlEventAreaType                             Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlEventController_SetPerformer) == 0x000008, "Wrong alignment on BtlEventController_SetPerformer");
static_assert(sizeof(BtlEventController_SetPerformer) == 0x000010, "Wrong size on BtlEventController_SetPerformer");
static_assert(offsetof(BtlEventController_SetPerformer, Actor) == 0x000000, "Member 'BtlEventController_SetPerformer::Actor' has a wrong offset!");
static_assert(offsetof(BtlEventController_SetPerformer, Type) == 0x000008, "Member 'BtlEventController_SetPerformer::Type' has a wrong offset!");

// Function xrd777.BtlFadeManager.BtlCrossFadeIn
// 0x0004 (0x0004 - 0x0000)
struct BtlFadeManager_BtlCrossFadeIn final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlFadeManager_BtlCrossFadeIn) == 0x000004, "Wrong alignment on BtlFadeManager_BtlCrossFadeIn");
static_assert(sizeof(BtlFadeManager_BtlCrossFadeIn) == 0x000004, "Wrong size on BtlFadeManager_BtlCrossFadeIn");
static_assert(offsetof(BtlFadeManager_BtlCrossFadeIn, Frame) == 0x000000, "Member 'BtlFadeManager_BtlCrossFadeIn::Frame' has a wrong offset!");

// Function xrd777.BtlFadeManager.BtlFadeCheckScreenWrap
// 0x0001 (0x0001 - 0x0000)
struct BtlFadeManager_BtlFadeCheckScreenWrap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlFadeManager_BtlFadeCheckScreenWrap) == 0x000001, "Wrong alignment on BtlFadeManager_BtlFadeCheckScreenWrap");
static_assert(sizeof(BtlFadeManager_BtlFadeCheckScreenWrap) == 0x000001, "Wrong size on BtlFadeManager_BtlFadeCheckScreenWrap");
static_assert(offsetof(BtlFadeManager_BtlFadeCheckScreenWrap, ReturnValue) == 0x000000, "Member 'BtlFadeManager_BtlFadeCheckScreenWrap::ReturnValue' has a wrong offset!");

// Function xrd777.BtlFadeManager.BtlFadeIn
// 0x000C (0x000C - 0x0000)
struct BtlFadeManager_BtlFadeIn final
{
public:
	EBtlFadeType                                  Type_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Frame;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnemy;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAIAction;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlFadeManager_BtlFadeIn) == 0x000004, "Wrong alignment on BtlFadeManager_BtlFadeIn");
static_assert(sizeof(BtlFadeManager_BtlFadeIn) == 0x00000C, "Wrong size on BtlFadeManager_BtlFadeIn");
static_assert(offsetof(BtlFadeManager_BtlFadeIn, Type_0) == 0x000000, "Member 'BtlFadeManager_BtlFadeIn::Type_0' has a wrong offset!");
static_assert(offsetof(BtlFadeManager_BtlFadeIn, Frame) == 0x000004, "Member 'BtlFadeManager_BtlFadeIn::Frame' has a wrong offset!");
static_assert(offsetof(BtlFadeManager_BtlFadeIn, IsEnemy) == 0x000008, "Member 'BtlFadeManager_BtlFadeIn::IsEnemy' has a wrong offset!");
static_assert(offsetof(BtlFadeManager_BtlFadeIn, IsAIAction) == 0x000009, "Member 'BtlFadeManager_BtlFadeIn::IsAIAction' has a wrong offset!");

// Function xrd777.BtlFadeManager.BtlFadeManagerGetInstance
// 0x0008 (0x0008 - 0x0000)
struct BtlFadeManager_BtlFadeManagerGetInstance final
{
public:
	class ABtlFadeManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlFadeManager_BtlFadeManagerGetInstance) == 0x000008, "Wrong alignment on BtlFadeManager_BtlFadeManagerGetInstance");
static_assert(sizeof(BtlFadeManager_BtlFadeManagerGetInstance) == 0x000008, "Wrong size on BtlFadeManager_BtlFadeManagerGetInstance");
static_assert(offsetof(BtlFadeManager_BtlFadeManagerGetInstance, ReturnValue) == 0x000000, "Member 'BtlFadeManager_BtlFadeManagerGetInstance::ReturnValue' has a wrong offset!");

// Function xrd777.BtlFadeManager.BtlFadeOut
// 0x000C (0x000C - 0x0000)
struct BtlFadeManager_BtlFadeOut final
{
public:
	EBtlFadeType                                  Type_0;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Frame;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnemy;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAIAction;                                        // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlFadeManager_BtlFadeOut) == 0x000004, "Wrong alignment on BtlFadeManager_BtlFadeOut");
static_assert(sizeof(BtlFadeManager_BtlFadeOut) == 0x00000C, "Wrong size on BtlFadeManager_BtlFadeOut");
static_assert(offsetof(BtlFadeManager_BtlFadeOut, Type_0) == 0x000000, "Member 'BtlFadeManager_BtlFadeOut::Type_0' has a wrong offset!");
static_assert(offsetof(BtlFadeManager_BtlFadeOut, Frame) == 0x000004, "Member 'BtlFadeManager_BtlFadeOut::Frame' has a wrong offset!");
static_assert(offsetof(BtlFadeManager_BtlFadeOut, IsEnemy) == 0x000008, "Member 'BtlFadeManager_BtlFadeOut::IsEnemy' has a wrong offset!");
static_assert(offsetof(BtlFadeManager_BtlFadeOut, IsAIAction) == 0x000009, "Member 'BtlFadeManager_BtlFadeOut::IsAIAction' has a wrong offset!");

// Function xrd777.BtlFadeManager.BtlFadeSync
// 0x0001 (0x0001 - 0x0000)
struct BtlFadeManager_BtlFadeSync final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlFadeManager_BtlFadeSync) == 0x000001, "Wrong alignment on BtlFadeManager_BtlFadeSync");
static_assert(sizeof(BtlFadeManager_BtlFadeSync) == 0x000001, "Wrong size on BtlFadeManager_BtlFadeSync");
static_assert(offsetof(BtlFadeManager_BtlFadeSync, ReturnValue) == 0x000000, "Member 'BtlFadeManager_BtlFadeSync::ReturnValue' has a wrong offset!");

// Function xrd777.BtlFadeManager.FadeInit
// 0x0001 (0x0001 - 0x0000)
struct BtlFadeManager_FadeInit final
{
public:
	bool                                          IsFadeOut;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlFadeManager_FadeInit) == 0x000001, "Wrong alignment on BtlFadeManager_FadeInit");
static_assert(sizeof(BtlFadeManager_FadeInit) == 0x000001, "Wrong size on BtlFadeManager_FadeInit");
static_assert(offsetof(BtlFadeManager_FadeInit, IsFadeOut) == 0x000000, "Member 'BtlFadeManager_FadeInit::IsFadeOut' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.CheckAttrFullOpen
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_CheckAttrFullOpen final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiAnalyzeComponent_CheckAttrFullOpen) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_CheckAttrFullOpen");
static_assert(sizeof(BtlGuiAnalyzeComponent_CheckAttrFullOpen) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_CheckAttrFullOpen");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckAttrFullOpen, Actor) == 0x000000, "Member 'BtlGuiAnalyzeComponent_CheckAttrFullOpen::Actor' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckAttrFullOpen, ReturnValue) == 0x000008, "Member 'BtlGuiAnalyzeComponent_CheckAttrFullOpen::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.CheckEndLoader
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiAnalyzeComponent_CheckEndLoader final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiAnalyzeComponent_CheckEndLoader) == 0x000001, "Wrong alignment on BtlGuiAnalyzeComponent_CheckEndLoader");
static_assert(sizeof(BtlGuiAnalyzeComponent_CheckEndLoader) == 0x000001, "Wrong size on BtlGuiAnalyzeComponent_CheckEndLoader");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckEndLoader, ReturnValue) == 0x000000, "Member 'BtlGuiAnalyzeComponent_CheckEndLoader::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.CheckHighAnalyzeEnableSP
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiAnalyzeComponent_CheckHighAnalyzeEnableSP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiAnalyzeComponent_CheckHighAnalyzeEnableSP) == 0x000001, "Wrong alignment on BtlGuiAnalyzeComponent_CheckHighAnalyzeEnableSP");
static_assert(sizeof(BtlGuiAnalyzeComponent_CheckHighAnalyzeEnableSP) == 0x000001, "Wrong size on BtlGuiAnalyzeComponent_CheckHighAnalyzeEnableSP");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckHighAnalyzeEnableSP, ReturnValue) == 0x000000, "Member 'BtlGuiAnalyzeComponent_CheckHighAnalyzeEnableSP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.CheckPlayHighAnalzeSupport
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_CheckPlayHighAnalzeSupport final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiAnalyzeComponent_CheckPlayHighAnalzeSupport) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_CheckPlayHighAnalzeSupport");
static_assert(sizeof(BtlGuiAnalyzeComponent_CheckPlayHighAnalzeSupport) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_CheckPlayHighAnalzeSupport");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckPlayHighAnalzeSupport, BtlCore) == 0x000000, "Member 'BtlGuiAnalyzeComponent_CheckPlayHighAnalzeSupport::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckPlayHighAnalzeSupport, ReturnValue) == 0x000008, "Member 'BtlGuiAnalyzeComponent_CheckPlayHighAnalzeSupport::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.CheckShowArcana
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_CheckShowArcana final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiAnalyzeComponent_CheckShowArcana) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_CheckShowArcana");
static_assert(sizeof(BtlGuiAnalyzeComponent_CheckShowArcana) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_CheckShowArcana");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckShowArcana, Actor) == 0x000000, "Member 'BtlGuiAnalyzeComponent_CheckShowArcana::Actor' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckShowArcana, ReturnValue) == 0x000008, "Member 'BtlGuiAnalyzeComponent_CheckShowArcana::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.CheckShowAttackAttr
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_CheckShowAttackAttr final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiAnalyzeComponent_CheckShowAttackAttr) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_CheckShowAttackAttr");
static_assert(sizeof(BtlGuiAnalyzeComponent_CheckShowAttackAttr) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_CheckShowAttackAttr");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckShowAttackAttr, Actor) == 0x000000, "Member 'BtlGuiAnalyzeComponent_CheckShowAttackAttr::Actor' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckShowAttackAttr, ReturnValue) == 0x000008, "Member 'BtlGuiAnalyzeComponent_CheckShowAttackAttr::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.CheckShowFukaFukidashi
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_CheckShowFukaFukidashi final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiAnalyzeComponent_CheckShowFukaFukidashi) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_CheckShowFukaFukidashi");
static_assert(sizeof(BtlGuiAnalyzeComponent_CheckShowFukaFukidashi) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_CheckShowFukaFukidashi");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckShowFukaFukidashi, BtlCore) == 0x000000, "Member 'BtlGuiAnalyzeComponent_CheckShowFukaFukidashi::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckShowFukaFukidashi, ReturnValue) == 0x000008, "Member 'BtlGuiAnalyzeComponent_CheckShowFukaFukidashi::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.CheckShowItem
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_CheckShowItem final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiAnalyzeComponent_CheckShowItem) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_CheckShowItem");
static_assert(sizeof(BtlGuiAnalyzeComponent_CheckShowItem) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_CheckShowItem");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckShowItem, Actor) == 0x000000, "Member 'BtlGuiAnalyzeComponent_CheckShowItem::Actor' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckShowItem, ReturnValue) == 0x000008, "Member 'BtlGuiAnalyzeComponent_CheckShowItem::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.CheckShowSkill
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_CheckShowSkill final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiAnalyzeComponent_CheckShowSkill) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_CheckShowSkill");
static_assert(sizeof(BtlGuiAnalyzeComponent_CheckShowSkill) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_CheckShowSkill");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckShowSkill, Actor) == 0x000000, "Member 'BtlGuiAnalyzeComponent_CheckShowSkill::Actor' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckShowSkill, ReturnValue) == 0x000008, "Member 'BtlGuiAnalyzeComponent_CheckShowSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.CheckShowStatus
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_CheckShowStatus final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiAnalyzeComponent_CheckShowStatus) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_CheckShowStatus");
static_assert(sizeof(BtlGuiAnalyzeComponent_CheckShowStatus) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_CheckShowStatus");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckShowStatus, Actor) == 0x000000, "Member 'BtlGuiAnalyzeComponent_CheckShowStatus::Actor' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_CheckShowStatus, ReturnValue) == 0x000008, "Member 'BtlGuiAnalyzeComponent_CheckShowStatus::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.GetAnalyzeSupportInfo
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_GetAnalyzeSupportInfo final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlAnalyzeSupportType                        Type;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiAnalyzeComponent_GetAnalyzeSupportInfo) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_GetAnalyzeSupportInfo");
static_assert(sizeof(BtlGuiAnalyzeComponent_GetAnalyzeSupportInfo) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_GetAnalyzeSupportInfo");
static_assert(offsetof(BtlGuiAnalyzeComponent_GetAnalyzeSupportInfo, BtlCore) == 0x000000, "Member 'BtlGuiAnalyzeComponent_GetAnalyzeSupportInfo::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_GetAnalyzeSupportInfo, Type) == 0x000008, "Member 'BtlGuiAnalyzeComponent_GetAnalyzeSupportInfo::Type' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_GetAnalyzeSupportInfo, ReturnValue) == 0x00000C, "Member 'BtlGuiAnalyzeComponent_GetAnalyzeSupportInfo::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.GetCostHighAnalyze
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiAnalyzeComponent_GetCostHighAnalyze final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiAnalyzeComponent_GetCostHighAnalyze) == 0x000004, "Wrong alignment on BtlGuiAnalyzeComponent_GetCostHighAnalyze");
static_assert(sizeof(BtlGuiAnalyzeComponent_GetCostHighAnalyze) == 0x000004, "Wrong size on BtlGuiAnalyzeComponent_GetCostHighAnalyze");
static_assert(offsetof(BtlGuiAnalyzeComponent_GetCostHighAnalyze, ReturnValue) == 0x000000, "Member 'BtlGuiAnalyzeComponent_GetCostHighAnalyze::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.GetDebugEnableFlag
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_GetDebugEnableFlag final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiAnalyzeComponent_GetDebugEnableFlag) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_GetDebugEnableFlag");
static_assert(sizeof(BtlGuiAnalyzeComponent_GetDebugEnableFlag) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_GetDebugEnableFlag");
static_assert(offsetof(BtlGuiAnalyzeComponent_GetDebugEnableFlag, BtlCore) == 0x000000, "Member 'BtlGuiAnalyzeComponent_GetDebugEnableFlag::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_GetDebugEnableFlag, ReturnValue) == 0x000008, "Member 'BtlGuiAnalyzeComponent_GetDebugEnableFlag::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.GetHighAnalyzeBMD
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_GetHighAnalyzeBMD final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBmdAsset*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiAnalyzeComponent_GetHighAnalyzeBMD) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_GetHighAnalyzeBMD");
static_assert(sizeof(BtlGuiAnalyzeComponent_GetHighAnalyzeBMD) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_GetHighAnalyzeBMD");
static_assert(offsetof(BtlGuiAnalyzeComponent_GetHighAnalyzeBMD, BtlCore) == 0x000000, "Member 'BtlGuiAnalyzeComponent_GetHighAnalyzeBMD::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_GetHighAnalyzeBMD, ReturnValue) == 0x000008, "Member 'BtlGuiAnalyzeComponent_GetHighAnalyzeBMD::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.GetSupportTypeTargetEnemy
// 0x0018 (0x0018 - 0x0000)
struct BtlGuiAnalyzeComponent_GetSupportTypeTargetEnemy final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABtlActor*                              Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlAnalyzeSupportType                        ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiAnalyzeComponent_GetSupportTypeTargetEnemy) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_GetSupportTypeTargetEnemy");
static_assert(sizeof(BtlGuiAnalyzeComponent_GetSupportTypeTargetEnemy) == 0x000018, "Wrong size on BtlGuiAnalyzeComponent_GetSupportTypeTargetEnemy");
static_assert(offsetof(BtlGuiAnalyzeComponent_GetSupportTypeTargetEnemy, BtlCore) == 0x000000, "Member 'BtlGuiAnalyzeComponent_GetSupportTypeTargetEnemy::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_GetSupportTypeTargetEnemy, Actor) == 0x000008, "Member 'BtlGuiAnalyzeComponent_GetSupportTypeTargetEnemy::Actor' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_GetSupportTypeTargetEnemy, ReturnValue) == 0x000010, "Member 'BtlGuiAnalyzeComponent_GetSupportTypeTargetEnemy::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.PlayAnalyzeSupportInfo
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_PlayAnalyzeSupportInfo final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayID;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiAnalyzeComponent_PlayAnalyzeSupportInfo) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_PlayAnalyzeSupportInfo");
static_assert(sizeof(BtlGuiAnalyzeComponent_PlayAnalyzeSupportInfo) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_PlayAnalyzeSupportInfo");
static_assert(offsetof(BtlGuiAnalyzeComponent_PlayAnalyzeSupportInfo, BtlCore) == 0x000000, "Member 'BtlGuiAnalyzeComponent_PlayAnalyzeSupportInfo::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_PlayAnalyzeSupportInfo, PlayID) == 0x000008, "Member 'BtlGuiAnalyzeComponent_PlayAnalyzeSupportInfo::PlayID' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.PlaySupportInfo
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiAnalyzeComponent_PlaySupportInfo final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABtlActor*                              Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiAnalyzeComponent_PlaySupportInfo) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_PlaySupportInfo");
static_assert(sizeof(BtlGuiAnalyzeComponent_PlaySupportInfo) == 0x000010, "Wrong size on BtlGuiAnalyzeComponent_PlaySupportInfo");
static_assert(offsetof(BtlGuiAnalyzeComponent_PlaySupportInfo, BtlCore) == 0x000000, "Member 'BtlGuiAnalyzeComponent_PlaySupportInfo::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_PlaySupportInfo, Actor) == 0x000008, "Member 'BtlGuiAnalyzeComponent_PlaySupportInfo::Actor' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.RemoveSameEnemyID
// 0x0028 (0x0028 - 0x0000)
struct BtlGuiAnalyzeComponent_RemoveSameEnemyID final
{
public:
	TArray<class ABtlActor*>                      InList;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class ABtlActor*                              PriorityActor;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiAnalyzeComponent_RemoveSameEnemyID) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_RemoveSameEnemyID");
static_assert(sizeof(BtlGuiAnalyzeComponent_RemoveSameEnemyID) == 0x000028, "Wrong size on BtlGuiAnalyzeComponent_RemoveSameEnemyID");
static_assert(offsetof(BtlGuiAnalyzeComponent_RemoveSameEnemyID, InList) == 0x000000, "Member 'BtlGuiAnalyzeComponent_RemoveSameEnemyID::InList' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_RemoveSameEnemyID, PriorityActor) == 0x000010, "Member 'BtlGuiAnalyzeComponent_RemoveSameEnemyID::PriorityActor' has a wrong offset!");
static_assert(offsetof(BtlGuiAnalyzeComponent_RemoveSameEnemyID, ReturnValue) == 0x000018, "Member 'BtlGuiAnalyzeComponent_RemoveSameEnemyID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.SetSelectIndex
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiAnalyzeComponent_SetSelectIndex final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiAnalyzeComponent_SetSelectIndex) == 0x000004, "Wrong alignment on BtlGuiAnalyzeComponent_SetSelectIndex");
static_assert(sizeof(BtlGuiAnalyzeComponent_SetSelectIndex) == 0x000004, "Wrong size on BtlGuiAnalyzeComponent_SetSelectIndex");
static_assert(offsetof(BtlGuiAnalyzeComponent_SetSelectIndex, Idx) == 0x000000, "Member 'BtlGuiAnalyzeComponent_SetSelectIndex::Idx' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.ShowMessage
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiAnalyzeComponent_ShowMessage final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiAnalyzeComponent_ShowMessage) == 0x000004, "Wrong alignment on BtlGuiAnalyzeComponent_ShowMessage");
static_assert(sizeof(BtlGuiAnalyzeComponent_ShowMessage) == 0x000004, "Wrong size on BtlGuiAnalyzeComponent_ShowMessage");
static_assert(offsetof(BtlGuiAnalyzeComponent_ShowMessage, Index_0) == 0x000000, "Member 'BtlGuiAnalyzeComponent_ShowMessage::Index_0' has a wrong offset!");

// Function xrd777.BtlGuiAnalyzeComponent.UpdateAnalyze
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiAnalyzeComponent_UpdateAnalyze final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiAnalyzeComponent_UpdateAnalyze) == 0x000008, "Wrong alignment on BtlGuiAnalyzeComponent_UpdateAnalyze");
static_assert(sizeof(BtlGuiAnalyzeComponent_UpdateAnalyze) == 0x000008, "Wrong size on BtlGuiAnalyzeComponent_UpdateAnalyze");
static_assert(offsetof(BtlGuiAnalyzeComponent_UpdateAnalyze, Actor) == 0x000000, "Member 'BtlGuiAnalyzeComponent_UpdateAnalyze::Actor' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.GetAlpha
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiDrawObjectCore_GetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_GetAlpha) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_GetAlpha");
static_assert(sizeof(BtlGuiDrawObjectCore_GetAlpha) == 0x000004, "Wrong size on BtlGuiDrawObjectCore_GetAlpha");
static_assert(offsetof(BtlGuiDrawObjectCore_GetAlpha, ReturnValue) == 0x000000, "Member 'BtlGuiDrawObjectCore_GetAlpha::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.GetAngle
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiDrawObjectCore_GetAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_GetAngle) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_GetAngle");
static_assert(sizeof(BtlGuiDrawObjectCore_GetAngle) == 0x000004, "Wrong size on BtlGuiDrawObjectCore_GetAngle");
static_assert(offsetof(BtlGuiDrawObjectCore_GetAngle, ReturnValue) == 0x000000, "Member 'BtlGuiDrawObjectCore_GetAngle::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.GetAngleAnchorPos
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectCore_GetAngleAnchorPos final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_GetAngleAnchorPos) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_GetAngleAnchorPos");
static_assert(sizeof(BtlGuiDrawObjectCore_GetAngleAnchorPos) == 0x000008, "Wrong size on BtlGuiDrawObjectCore_GetAngleAnchorPos");
static_assert(offsetof(BtlGuiDrawObjectCore_GetAngleAnchorPos, ReturnValue) == 0x000000, "Member 'BtlGuiDrawObjectCore_GetAngleAnchorPos::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.GetColor
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiDrawObjectCore_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_GetColor) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_GetColor");
static_assert(sizeof(BtlGuiDrawObjectCore_GetColor) == 0x000004, "Wrong size on BtlGuiDrawObjectCore_GetColor");
static_assert(offsetof(BtlGuiDrawObjectCore_GetColor, ReturnValue) == 0x000000, "Member 'BtlGuiDrawObjectCore_GetColor::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.GetPos
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectCore_GetPos final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_GetPos) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_GetPos");
static_assert(sizeof(BtlGuiDrawObjectCore_GetPos) == 0x000008, "Wrong size on BtlGuiDrawObjectCore_GetPos");
static_assert(offsetof(BtlGuiDrawObjectCore_GetPos, ReturnValue) == 0x000000, "Member 'BtlGuiDrawObjectCore_GetPos::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.GetScale
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectCore_GetScale final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_GetScale) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_GetScale");
static_assert(sizeof(BtlGuiDrawObjectCore_GetScale) == 0x000008, "Wrong size on BtlGuiDrawObjectCore_GetScale");
static_assert(offsetof(BtlGuiDrawObjectCore_GetScale, ReturnValue) == 0x000000, "Member 'BtlGuiDrawObjectCore_GetScale::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.GetScaleAnchorPos
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectCore_GetScaleAnchorPos final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_GetScaleAnchorPos) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_GetScaleAnchorPos");
static_assert(sizeof(BtlGuiDrawObjectCore_GetScaleAnchorPos) == 0x000008, "Wrong size on BtlGuiDrawObjectCore_GetScaleAnchorPos");
static_assert(offsetof(BtlGuiDrawObjectCore_GetScaleAnchorPos, ReturnValue) == 0x000000, "Member 'BtlGuiDrawObjectCore_GetScaleAnchorPos::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.SetAlpha
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiDrawObjectCore_SetAlpha final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_SetAlpha) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_SetAlpha");
static_assert(sizeof(BtlGuiDrawObjectCore_SetAlpha) == 0x000004, "Wrong size on BtlGuiDrawObjectCore_SetAlpha");
static_assert(offsetof(BtlGuiDrawObjectCore_SetAlpha, Alpha) == 0x000000, "Member 'BtlGuiDrawObjectCore_SetAlpha::Alpha' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.SetAnchorPos
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectCore_SetAnchorPos final
{
public:
	struct FVector2D                              Anchor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_SetAnchorPos) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_SetAnchorPos");
static_assert(sizeof(BtlGuiDrawObjectCore_SetAnchorPos) == 0x000008, "Wrong size on BtlGuiDrawObjectCore_SetAnchorPos");
static_assert(offsetof(BtlGuiDrawObjectCore_SetAnchorPos, Anchor) == 0x000000, "Member 'BtlGuiDrawObjectCore_SetAnchorPos::Anchor' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.SetAngle
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiDrawObjectCore_SetAngle final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_SetAngle) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_SetAngle");
static_assert(sizeof(BtlGuiDrawObjectCore_SetAngle) == 0x000004, "Wrong size on BtlGuiDrawObjectCore_SetAngle");
static_assert(offsetof(BtlGuiDrawObjectCore_SetAngle, Angle) == 0x000000, "Member 'BtlGuiDrawObjectCore_SetAngle::Angle' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.SetAngleAnchorPos
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectCore_SetAngleAnchorPos final
{
public:
	struct FVector2D                              Anchor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_SetAngleAnchorPos) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_SetAngleAnchorPos");
static_assert(sizeof(BtlGuiDrawObjectCore_SetAngleAnchorPos) == 0x000008, "Wrong size on BtlGuiDrawObjectCore_SetAngleAnchorPos");
static_assert(offsetof(BtlGuiDrawObjectCore_SetAngleAnchorPos, Anchor) == 0x000000, "Member 'BtlGuiDrawObjectCore_SetAngleAnchorPos::Anchor' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.SetChildObject
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiDrawObjectCore_SetChildObject final
{
public:
	class UBtlGuiDrawObjectCore*                  Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBtlGuiDrawFlag                        Flag;                                              // 0x0008(0x0003)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiDrawObjectCore_SetChildObject) == 0x000008, "Wrong alignment on BtlGuiDrawObjectCore_SetChildObject");
static_assert(sizeof(BtlGuiDrawObjectCore_SetChildObject) == 0x000010, "Wrong size on BtlGuiDrawObjectCore_SetChildObject");
static_assert(offsetof(BtlGuiDrawObjectCore_SetChildObject, Object) == 0x000000, "Member 'BtlGuiDrawObjectCore_SetChildObject::Object' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectCore_SetChildObject, Flag) == 0x000008, "Member 'BtlGuiDrawObjectCore_SetChildObject::Flag' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.SetColor
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiDrawObjectCore_SetColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_SetColor) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_SetColor");
static_assert(sizeof(BtlGuiDrawObjectCore_SetColor) == 0x000004, "Wrong size on BtlGuiDrawObjectCore_SetColor");
static_assert(offsetof(BtlGuiDrawObjectCore_SetColor, Color) == 0x000000, "Member 'BtlGuiDrawObjectCore_SetColor::Color' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.SetPos
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectCore_SetPos final
{
public:
	struct FVector2D                              Pos;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_SetPos) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_SetPos");
static_assert(sizeof(BtlGuiDrawObjectCore_SetPos) == 0x000008, "Wrong size on BtlGuiDrawObjectCore_SetPos");
static_assert(offsetof(BtlGuiDrawObjectCore_SetPos, Pos) == 0x000000, "Member 'BtlGuiDrawObjectCore_SetPos::Pos' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.SetScale
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiDrawObjectCore_SetScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_SetScale) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_SetScale");
static_assert(sizeof(BtlGuiDrawObjectCore_SetScale) == 0x000004, "Wrong size on BtlGuiDrawObjectCore_SetScale");
static_assert(offsetof(BtlGuiDrawObjectCore_SetScale, Scale) == 0x000000, "Member 'BtlGuiDrawObjectCore_SetScale::Scale' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.SetScaleAnchorPos
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectCore_SetScaleAnchorPos final
{
public:
	struct FVector2D                              Anchor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_SetScaleAnchorPos) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_SetScaleAnchorPos");
static_assert(sizeof(BtlGuiDrawObjectCore_SetScaleAnchorPos) == 0x000008, "Wrong size on BtlGuiDrawObjectCore_SetScaleAnchorPos");
static_assert(offsetof(BtlGuiDrawObjectCore_SetScaleAnchorPos, Anchor) == 0x000000, "Member 'BtlGuiDrawObjectCore_SetScaleAnchorPos::Anchor' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectCore.SetScaleVec2
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectCore_SetScaleVec2 final
{
public:
	struct FVector2D                              Scale;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectCore_SetScaleVec2) == 0x000004, "Wrong alignment on BtlGuiDrawObjectCore_SetScaleVec2");
static_assert(sizeof(BtlGuiDrawObjectCore_SetScaleVec2) == 0x000008, "Wrong size on BtlGuiDrawObjectCore_SetScaleVec2");
static_assert(offsetof(BtlGuiDrawObjectCore_SetScaleVec2, Scale) == 0x000000, "Member 'BtlGuiDrawObjectCore_SetScaleVec2::Scale' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectImage.GetWidthHeight
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectImage_GetWidthHeight final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectImage_GetWidthHeight) == 0x000004, "Wrong alignment on BtlGuiDrawObjectImage_GetWidthHeight");
static_assert(sizeof(BtlGuiDrawObjectImage_GetWidthHeight) == 0x000008, "Wrong size on BtlGuiDrawObjectImage_GetWidthHeight");
static_assert(offsetof(BtlGuiDrawObjectImage_GetWidthHeight, Width) == 0x000000, "Member 'BtlGuiDrawObjectImage_GetWidthHeight::Width' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectImage_GetWidthHeight, Height) == 0x000004, "Member 'BtlGuiDrawObjectImage_GetWidthHeight::Height' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectText.CalcAdjustedScale
// 0x0070 (0x0070 - 0x0000)
struct BtlGuiDrawObjectText_CalcAdjustedScale final
{
public:
	struct FBtlGuiDrawText                        Item;                                              // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	struct FVector2D                              TextCollision;                                     // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScalingOnlyX;                                      // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              AdjustedScale;                                     // 0x0064(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiDrawObjectText_CalcAdjustedScale) == 0x000008, "Wrong alignment on BtlGuiDrawObjectText_CalcAdjustedScale");
static_assert(sizeof(BtlGuiDrawObjectText_CalcAdjustedScale) == 0x000070, "Wrong size on BtlGuiDrawObjectText_CalcAdjustedScale");
static_assert(offsetof(BtlGuiDrawObjectText_CalcAdjustedScale, Item) == 0x000000, "Member 'BtlGuiDrawObjectText_CalcAdjustedScale::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectText_CalcAdjustedScale, TextCollision) == 0x000058, "Member 'BtlGuiDrawObjectText_CalcAdjustedScale::TextCollision' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectText_CalcAdjustedScale, ScalingOnlyX) == 0x000060, "Member 'BtlGuiDrawObjectText_CalcAdjustedScale::ScalingOnlyX' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectText_CalcAdjustedScale, AdjustedScale) == 0x000064, "Member 'BtlGuiDrawObjectText_CalcAdjustedScale::AdjustedScale' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectText.GetTextWidthHeight
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectText_GetTextWidthHeight final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectText_GetTextWidthHeight) == 0x000004, "Wrong alignment on BtlGuiDrawObjectText_GetTextWidthHeight");
static_assert(sizeof(BtlGuiDrawObjectText_GetTextWidthHeight) == 0x000008, "Wrong size on BtlGuiDrawObjectText_GetTextWidthHeight");
static_assert(offsetof(BtlGuiDrawObjectText_GetTextWidthHeight, Width) == 0x000000, "Member 'BtlGuiDrawObjectText_GetTextWidthHeight::Width' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectText_GetTextWidthHeight, Height) == 0x000004, "Member 'BtlGuiDrawObjectText_GetTextWidthHeight::Height' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectMsg.CalcAdjustedScale
// 0x0098 (0x0098 - 0x0000)
struct BtlGuiDrawObjectMsg_CalcAdjustedScale final
{
public:
	struct FBtlGuiDrawMsg                         Item;                                              // 0x0000(0x0080)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              TextCollision;                                     // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AdjustedScale;                                     // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineBreak;                                         // 0x0090(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnKeepScale;                                       // 0x0094(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiDrawObjectMsg_CalcAdjustedScale) == 0x000008, "Wrong alignment on BtlGuiDrawObjectMsg_CalcAdjustedScale");
static_assert(sizeof(BtlGuiDrawObjectMsg_CalcAdjustedScale) == 0x000098, "Wrong size on BtlGuiDrawObjectMsg_CalcAdjustedScale");
static_assert(offsetof(BtlGuiDrawObjectMsg_CalcAdjustedScale, Item) == 0x000000, "Member 'BtlGuiDrawObjectMsg_CalcAdjustedScale::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectMsg_CalcAdjustedScale, TextCollision) == 0x000080, "Member 'BtlGuiDrawObjectMsg_CalcAdjustedScale::TextCollision' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectMsg_CalcAdjustedScale, AdjustedScale) == 0x000088, "Member 'BtlGuiDrawObjectMsg_CalcAdjustedScale::AdjustedScale' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectMsg_CalcAdjustedScale, LineBreak) == 0x000090, "Member 'BtlGuiDrawObjectMsg_CalcAdjustedScale::LineBreak' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectMsg_CalcAdjustedScale, OnKeepScale) == 0x000094, "Member 'BtlGuiDrawObjectMsg_CalcAdjustedScale::OnKeepScale' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectMsg.CalcAdjustedScaleOnlyX
// 0x0090 (0x0090 - 0x0000)
struct BtlGuiDrawObjectMsg_CalcAdjustedScaleOnlyX final
{
public:
	struct FBtlGuiDrawMsg                         Item;                                              // 0x0000(0x0080)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector2D                              TextCollision;                                     // 0x0080(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              AdjustedScale;                                     // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectMsg_CalcAdjustedScaleOnlyX) == 0x000008, "Wrong alignment on BtlGuiDrawObjectMsg_CalcAdjustedScaleOnlyX");
static_assert(sizeof(BtlGuiDrawObjectMsg_CalcAdjustedScaleOnlyX) == 0x000090, "Wrong size on BtlGuiDrawObjectMsg_CalcAdjustedScaleOnlyX");
static_assert(offsetof(BtlGuiDrawObjectMsg_CalcAdjustedScaleOnlyX, Item) == 0x000000, "Member 'BtlGuiDrawObjectMsg_CalcAdjustedScaleOnlyX::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectMsg_CalcAdjustedScaleOnlyX, TextCollision) == 0x000080, "Member 'BtlGuiDrawObjectMsg_CalcAdjustedScaleOnlyX::TextCollision' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectMsg_CalcAdjustedScaleOnlyX, AdjustedScale) == 0x000088, "Member 'BtlGuiDrawObjectMsg_CalcAdjustedScaleOnlyX::AdjustedScale' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectMsg.GetMsgWindowLength
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectMsg_GetMsgWindowLength final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectMsg_GetMsgWindowLength) == 0x000004, "Wrong alignment on BtlGuiDrawObjectMsg_GetMsgWindowLength");
static_assert(sizeof(BtlGuiDrawObjectMsg_GetMsgWindowLength) == 0x000008, "Wrong size on BtlGuiDrawObjectMsg_GetMsgWindowLength");
static_assert(offsetof(BtlGuiDrawObjectMsg_GetMsgWindowLength, Width) == 0x000000, "Member 'BtlGuiDrawObjectMsg_GetMsgWindowLength::Width' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectMsg_GetMsgWindowLength, Height) == 0x000004, "Member 'BtlGuiDrawObjectMsg_GetMsgWindowLength::Height' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectMsg.SetItemHelpMsg
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiDrawObjectMsg_SetItemHelpMsg final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectMsg_SetItemHelpMsg) == 0x000004, "Wrong alignment on BtlGuiDrawObjectMsg_SetItemHelpMsg");
static_assert(sizeof(BtlGuiDrawObjectMsg_SetItemHelpMsg) == 0x000004, "Wrong size on BtlGuiDrawObjectMsg_SetItemHelpMsg");
static_assert(offsetof(BtlGuiDrawObjectMsg_SetItemHelpMsg, ItemId) == 0x000000, "Member 'BtlGuiDrawObjectMsg_SetItemHelpMsg::ItemId' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectRect.OnEnableTouchCollision
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiDrawObjectRect_OnEnableTouchCollision final
{
public:
	bool                                          OnEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectRect_OnEnableTouchCollision) == 0x000001, "Wrong alignment on BtlGuiDrawObjectRect_OnEnableTouchCollision");
static_assert(sizeof(BtlGuiDrawObjectRect_OnEnableTouchCollision) == 0x000001, "Wrong size on BtlGuiDrawObjectRect_OnEnableTouchCollision");
static_assert(offsetof(BtlGuiDrawObjectRect_OnEnableTouchCollision, OnEnable) == 0x000000, "Member 'BtlGuiDrawObjectRect_OnEnableTouchCollision::OnEnable' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectRect.SetListTouchCollision
// 0x0020 (0x0020 - 0x0000)
struct BtlGuiDrawObjectRect_SetListTouchCollision final
{
public:
	EBtlTouchScreenID                             ScreenID;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Idx;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustX;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustY;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustAngle;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustW;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustH;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddLayer;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectRect_SetListTouchCollision) == 0x000004, "Wrong alignment on BtlGuiDrawObjectRect_SetListTouchCollision");
static_assert(sizeof(BtlGuiDrawObjectRect_SetListTouchCollision) == 0x000020, "Wrong size on BtlGuiDrawObjectRect_SetListTouchCollision");
static_assert(offsetof(BtlGuiDrawObjectRect_SetListTouchCollision, ScreenID) == 0x000000, "Member 'BtlGuiDrawObjectRect_SetListTouchCollision::ScreenID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetListTouchCollision, Idx) == 0x000004, "Member 'BtlGuiDrawObjectRect_SetListTouchCollision::Idx' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetListTouchCollision, AdjustX) == 0x000008, "Member 'BtlGuiDrawObjectRect_SetListTouchCollision::AdjustX' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetListTouchCollision, AdjustY) == 0x00000C, "Member 'BtlGuiDrawObjectRect_SetListTouchCollision::AdjustY' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetListTouchCollision, AdjustAngle) == 0x000010, "Member 'BtlGuiDrawObjectRect_SetListTouchCollision::AdjustAngle' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetListTouchCollision, AdjustW) == 0x000014, "Member 'BtlGuiDrawObjectRect_SetListTouchCollision::AdjustW' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetListTouchCollision, AdjustH) == 0x000018, "Member 'BtlGuiDrawObjectRect_SetListTouchCollision::AdjustH' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetListTouchCollision, AddLayer) == 0x00001C, "Member 'BtlGuiDrawObjectRect_SetListTouchCollision::AddLayer' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectRect.SetScrollBarTouchCollision
// 0x001C (0x001C - 0x0000)
struct BtlGuiDrawObjectRect_SetScrollBarTouchCollision final
{
public:
	EBtlTouchScreenID                             ScreenID;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdjustX;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustY;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustAngle;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustW;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustH;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnSlider;                                          // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiDrawObjectRect_SetScrollBarTouchCollision) == 0x000004, "Wrong alignment on BtlGuiDrawObjectRect_SetScrollBarTouchCollision");
static_assert(sizeof(BtlGuiDrawObjectRect_SetScrollBarTouchCollision) == 0x00001C, "Wrong size on BtlGuiDrawObjectRect_SetScrollBarTouchCollision");
static_assert(offsetof(BtlGuiDrawObjectRect_SetScrollBarTouchCollision, ScreenID) == 0x000000, "Member 'BtlGuiDrawObjectRect_SetScrollBarTouchCollision::ScreenID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetScrollBarTouchCollision, AdjustX) == 0x000004, "Member 'BtlGuiDrawObjectRect_SetScrollBarTouchCollision::AdjustX' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetScrollBarTouchCollision, AdjustY) == 0x000008, "Member 'BtlGuiDrawObjectRect_SetScrollBarTouchCollision::AdjustY' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetScrollBarTouchCollision, AdjustAngle) == 0x00000C, "Member 'BtlGuiDrawObjectRect_SetScrollBarTouchCollision::AdjustAngle' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetScrollBarTouchCollision, AdjustW) == 0x000010, "Member 'BtlGuiDrawObjectRect_SetScrollBarTouchCollision::AdjustW' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetScrollBarTouchCollision, AdjustH) == 0x000014, "Member 'BtlGuiDrawObjectRect_SetScrollBarTouchCollision::AdjustH' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetScrollBarTouchCollision, OnSlider) == 0x000018, "Member 'BtlGuiDrawObjectRect_SetScrollBarTouchCollision::OnSlider' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectRect.SetTouchCollision
// 0x001C (0x001C - 0x0000)
struct BtlGuiDrawObjectRect_SetTouchCollision final
{
public:
	EBtlTouchCallbackValue                        CallbackValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdjustX;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustY;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustAngle;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustW;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustH;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddLayer;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectRect_SetTouchCollision) == 0x000004, "Wrong alignment on BtlGuiDrawObjectRect_SetTouchCollision");
static_assert(sizeof(BtlGuiDrawObjectRect_SetTouchCollision) == 0x00001C, "Wrong size on BtlGuiDrawObjectRect_SetTouchCollision");
static_assert(offsetof(BtlGuiDrawObjectRect_SetTouchCollision, CallbackValue) == 0x000000, "Member 'BtlGuiDrawObjectRect_SetTouchCollision::CallbackValue' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetTouchCollision, AdjustX) == 0x000004, "Member 'BtlGuiDrawObjectRect_SetTouchCollision::AdjustX' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetTouchCollision, AdjustY) == 0x000008, "Member 'BtlGuiDrawObjectRect_SetTouchCollision::AdjustY' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetTouchCollision, AdjustAngle) == 0x00000C, "Member 'BtlGuiDrawObjectRect_SetTouchCollision::AdjustAngle' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetTouchCollision, AdjustW) == 0x000010, "Member 'BtlGuiDrawObjectRect_SetTouchCollision::AdjustW' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetTouchCollision, AdjustH) == 0x000014, "Member 'BtlGuiDrawObjectRect_SetTouchCollision::AdjustH' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectRect_SetTouchCollision, AddLayer) == 0x000018, "Member 'BtlGuiDrawObjectRect_SetTouchCollision::AddLayer' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectSprite.GetWidthHeight
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectSprite_GetWidthHeight final
{
public:
	float                                         Width;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectSprite_GetWidthHeight) == 0x000004, "Wrong alignment on BtlGuiDrawObjectSprite_GetWidthHeight");
static_assert(sizeof(BtlGuiDrawObjectSprite_GetWidthHeight) == 0x000008, "Wrong size on BtlGuiDrawObjectSprite_GetWidthHeight");
static_assert(offsetof(BtlGuiDrawObjectSprite_GetWidthHeight, Width) == 0x000000, "Member 'BtlGuiDrawObjectSprite_GetWidthHeight::Width' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_GetWidthHeight, Height) == 0x000004, "Member 'BtlGuiDrawObjectSprite_GetWidthHeight::Height' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectSprite.OnEnableTouchCollision
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiDrawObjectSprite_OnEnableTouchCollision final
{
public:
	bool                                          OnEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectSprite_OnEnableTouchCollision) == 0x000001, "Wrong alignment on BtlGuiDrawObjectSprite_OnEnableTouchCollision");
static_assert(sizeof(BtlGuiDrawObjectSprite_OnEnableTouchCollision) == 0x000001, "Wrong size on BtlGuiDrawObjectSprite_OnEnableTouchCollision");
static_assert(offsetof(BtlGuiDrawObjectSprite_OnEnableTouchCollision, OnEnable) == 0x000000, "Member 'BtlGuiDrawObjectSprite_OnEnableTouchCollision::OnEnable' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectSprite.SetListTouchCollision
// 0x0020 (0x0020 - 0x0000)
struct BtlGuiDrawObjectSprite_SetListTouchCollision final
{
public:
	EBtlTouchScreenID                             ScreenID;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Idx;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustX;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustY;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustAngle;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustW;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustH;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddLayer;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectSprite_SetListTouchCollision) == 0x000004, "Wrong alignment on BtlGuiDrawObjectSprite_SetListTouchCollision");
static_assert(sizeof(BtlGuiDrawObjectSprite_SetListTouchCollision) == 0x000020, "Wrong size on BtlGuiDrawObjectSprite_SetListTouchCollision");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetListTouchCollision, ScreenID) == 0x000000, "Member 'BtlGuiDrawObjectSprite_SetListTouchCollision::ScreenID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetListTouchCollision, Idx) == 0x000004, "Member 'BtlGuiDrawObjectSprite_SetListTouchCollision::Idx' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetListTouchCollision, AdjustX) == 0x000008, "Member 'BtlGuiDrawObjectSprite_SetListTouchCollision::AdjustX' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetListTouchCollision, AdjustY) == 0x00000C, "Member 'BtlGuiDrawObjectSprite_SetListTouchCollision::AdjustY' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetListTouchCollision, AdjustAngle) == 0x000010, "Member 'BtlGuiDrawObjectSprite_SetListTouchCollision::AdjustAngle' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetListTouchCollision, AdjustW) == 0x000014, "Member 'BtlGuiDrawObjectSprite_SetListTouchCollision::AdjustW' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetListTouchCollision, AdjustH) == 0x000018, "Member 'BtlGuiDrawObjectSprite_SetListTouchCollision::AdjustH' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetListTouchCollision, AddLayer) == 0x00001C, "Member 'BtlGuiDrawObjectSprite_SetListTouchCollision::AddLayer' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectSprite.SetTouchCollision
// 0x001C (0x001C - 0x0000)
struct BtlGuiDrawObjectSprite_SetTouchCollision final
{
public:
	EBtlTouchCallbackValue                        CallbackValue;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdjustX;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustY;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustAngle;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustW;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdjustH;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AddLayer;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectSprite_SetTouchCollision) == 0x000004, "Wrong alignment on BtlGuiDrawObjectSprite_SetTouchCollision");
static_assert(sizeof(BtlGuiDrawObjectSprite_SetTouchCollision) == 0x00001C, "Wrong size on BtlGuiDrawObjectSprite_SetTouchCollision");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetTouchCollision, CallbackValue) == 0x000000, "Member 'BtlGuiDrawObjectSprite_SetTouchCollision::CallbackValue' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetTouchCollision, AdjustX) == 0x000004, "Member 'BtlGuiDrawObjectSprite_SetTouchCollision::AdjustX' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetTouchCollision, AdjustY) == 0x000008, "Member 'BtlGuiDrawObjectSprite_SetTouchCollision::AdjustY' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetTouchCollision, AdjustAngle) == 0x00000C, "Member 'BtlGuiDrawObjectSprite_SetTouchCollision::AdjustAngle' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetTouchCollision, AdjustW) == 0x000010, "Member 'BtlGuiDrawObjectSprite_SetTouchCollision::AdjustW' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetTouchCollision, AdjustH) == 0x000014, "Member 'BtlGuiDrawObjectSprite_SetTouchCollision::AdjustH' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectSprite_SetTouchCollision, AddLayer) == 0x000018, "Member 'BtlGuiDrawObjectSprite_SetTouchCollision::AddLayer' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectPlg.GetSize
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectPlg_GetSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectPlg_GetSize) == 0x000004, "Wrong alignment on BtlGuiDrawObjectPlg_GetSize");
static_assert(sizeof(BtlGuiDrawObjectPlg_GetSize) == 0x000008, "Wrong size on BtlGuiDrawObjectPlg_GetSize");
static_assert(offsetof(BtlGuiDrawObjectPlg_GetSize, ReturnValue) == 0x000000, "Member 'BtlGuiDrawObjectPlg_GetSize::ReturnValue' has a wrong offset!");

// Function xrd777.TheurgiaDraw.DrawCharacteristicHelp
// 0x0008 (0x0008 - 0x0000)
struct TheurgiaDraw_DrawCharacteristicHelp final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheurgiaDraw_DrawCharacteristicHelp) == 0x000004, "Wrong alignment on TheurgiaDraw_DrawCharacteristicHelp");
static_assert(sizeof(TheurgiaDraw_DrawCharacteristicHelp) == 0x000008, "Wrong size on TheurgiaDraw_DrawCharacteristicHelp");
static_assert(offsetof(TheurgiaDraw_DrawCharacteristicHelp, X) == 0x000000, "Member 'TheurgiaDraw_DrawCharacteristicHelp::X' has a wrong offset!");
static_assert(offsetof(TheurgiaDraw_DrawCharacteristicHelp, Y) == 0x000004, "Member 'TheurgiaDraw_DrawCharacteristicHelp::Y' has a wrong offset!");

// Function xrd777.TheurgiaDraw.DrawCharacteristicName
// 0x0008 (0x0008 - 0x0000)
struct TheurgiaDraw_DrawCharacteristicName final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheurgiaDraw_DrawCharacteristicName) == 0x000004, "Wrong alignment on TheurgiaDraw_DrawCharacteristicName");
static_assert(sizeof(TheurgiaDraw_DrawCharacteristicName) == 0x000008, "Wrong size on TheurgiaDraw_DrawCharacteristicName");
static_assert(offsetof(TheurgiaDraw_DrawCharacteristicName, X) == 0x000000, "Member 'TheurgiaDraw_DrawCharacteristicName::X' has a wrong offset!");
static_assert(offsetof(TheurgiaDraw_DrawCharacteristicName, Y) == 0x000004, "Member 'TheurgiaDraw_DrawCharacteristicName::Y' has a wrong offset!");

// Function xrd777.TheurgiaDraw.DrawCharaName
// 0x0008 (0x0008 - 0x0000)
struct TheurgiaDraw_DrawCharaName final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheurgiaDraw_DrawCharaName) == 0x000004, "Wrong alignment on TheurgiaDraw_DrawCharaName");
static_assert(sizeof(TheurgiaDraw_DrawCharaName) == 0x000008, "Wrong size on TheurgiaDraw_DrawCharaName");
static_assert(offsetof(TheurgiaDraw_DrawCharaName, X) == 0x000000, "Member 'TheurgiaDraw_DrawCharaName::X' has a wrong offset!");
static_assert(offsetof(TheurgiaDraw_DrawCharaName, Y) == 0x000004, "Member 'TheurgiaDraw_DrawCharaName::Y' has a wrong offset!");

// Function xrd777.TheurgiaDraw.DrawRiseTrend
// 0x0008 (0x0008 - 0x0000)
struct TheurgiaDraw_DrawRiseTrend final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheurgiaDraw_DrawRiseTrend) == 0x000004, "Wrong alignment on TheurgiaDraw_DrawRiseTrend");
static_assert(sizeof(TheurgiaDraw_DrawRiseTrend) == 0x000008, "Wrong size on TheurgiaDraw_DrawRiseTrend");
static_assert(offsetof(TheurgiaDraw_DrawRiseTrend, X) == 0x000000, "Member 'TheurgiaDraw_DrawRiseTrend::X' has a wrong offset!");
static_assert(offsetof(TheurgiaDraw_DrawRiseTrend, Y) == 0x000004, "Member 'TheurgiaDraw_DrawRiseTrend::Y' has a wrong offset!");

// Function xrd777.TheurgiaDraw.DrawTheurgiaHelp
// 0x000C (0x000C - 0x0000)
struct TheurgiaDraw_DrawTheurgiaHelp final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheurgiaDraw_DrawTheurgiaHelp) == 0x000004, "Wrong alignment on TheurgiaDraw_DrawTheurgiaHelp");
static_assert(sizeof(TheurgiaDraw_DrawTheurgiaHelp) == 0x00000C, "Wrong size on TheurgiaDraw_DrawTheurgiaHelp");
static_assert(offsetof(TheurgiaDraw_DrawTheurgiaHelp, X) == 0x000000, "Member 'TheurgiaDraw_DrawTheurgiaHelp::X' has a wrong offset!");
static_assert(offsetof(TheurgiaDraw_DrawTheurgiaHelp, Y) == 0x000004, "Member 'TheurgiaDraw_DrawTheurgiaHelp::Y' has a wrong offset!");
static_assert(offsetof(TheurgiaDraw_DrawTheurgiaHelp, Index_0) == 0x000008, "Member 'TheurgiaDraw_DrawTheurgiaHelp::Index_0' has a wrong offset!");

// Function xrd777.TheurgiaDraw.DrawTheurgiaName
// 0x000C (0x000C - 0x0000)
struct TheurgiaDraw_DrawTheurgiaName final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheurgiaDraw_DrawTheurgiaName) == 0x000004, "Wrong alignment on TheurgiaDraw_DrawTheurgiaName");
static_assert(sizeof(TheurgiaDraw_DrawTheurgiaName) == 0x00000C, "Wrong size on TheurgiaDraw_DrawTheurgiaName");
static_assert(offsetof(TheurgiaDraw_DrawTheurgiaName, X) == 0x000000, "Member 'TheurgiaDraw_DrawTheurgiaName::X' has a wrong offset!");
static_assert(offsetof(TheurgiaDraw_DrawTheurgiaName, Y) == 0x000004, "Member 'TheurgiaDraw_DrawTheurgiaName::Y' has a wrong offset!");
static_assert(offsetof(TheurgiaDraw_DrawTheurgiaName, Index_0) == 0x000008, "Member 'TheurgiaDraw_DrawTheurgiaName::Index_0' has a wrong offset!");

// Function xrd777.TheurgiaDraw.SetCurrsorIndex
// 0x0004 (0x0004 - 0x0000)
struct TheurgiaDraw_SetCurrsorIndex final
{
public:
	int32                                         No;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheurgiaDraw_SetCurrsorIndex) == 0x000004, "Wrong alignment on TheurgiaDraw_SetCurrsorIndex");
static_assert(sizeof(TheurgiaDraw_SetCurrsorIndex) == 0x000004, "Wrong size on TheurgiaDraw_SetCurrsorIndex");
static_assert(offsetof(TheurgiaDraw_SetCurrsorIndex, No) == 0x000000, "Member 'TheurgiaDraw_SetCurrsorIndex::No' has a wrong offset!");

// Function xrd777.TheurgiaDraw.UpdateTimes
// 0x0004 (0x0004 - 0x0000)
struct TheurgiaDraw_UpdateTimes final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheurgiaDraw_UpdateTimes) == 0x000004, "Wrong alignment on TheurgiaDraw_UpdateTimes");
static_assert(sizeof(TheurgiaDraw_UpdateTimes) == 0x000004, "Wrong size on TheurgiaDraw_UpdateTimes");
static_assert(offsetof(TheurgiaDraw_UpdateTimes, DeltaTime) == 0x000000, "Member 'TheurgiaDraw_UpdateTimes::DeltaTime' has a wrong offset!");

// Function xrd777.TheurgiaDraw.GetTheurgiaCursorIndex
// 0x0004 (0x0004 - 0x0000)
struct TheurgiaDraw_GetTheurgiaCursorIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheurgiaDraw_GetTheurgiaCursorIndex) == 0x000004, "Wrong alignment on TheurgiaDraw_GetTheurgiaCursorIndex");
static_assert(sizeof(TheurgiaDraw_GetTheurgiaCursorIndex) == 0x000004, "Wrong size on TheurgiaDraw_GetTheurgiaCursorIndex");
static_assert(offsetof(TheurgiaDraw_GetTheurgiaCursorIndex, ReturnValue) == 0x000000, "Member 'TheurgiaDraw_GetTheurgiaCursorIndex::ReturnValue' has a wrong offset!");

// Function xrd777.TheurgiaDraw.GetTheurgiaListMax
// 0x0004 (0x0004 - 0x0000)
struct TheurgiaDraw_GetTheurgiaListMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheurgiaDraw_GetTheurgiaListMax) == 0x000004, "Wrong alignment on TheurgiaDraw_GetTheurgiaListMax");
static_assert(sizeof(TheurgiaDraw_GetTheurgiaListMax) == 0x000004, "Wrong size on TheurgiaDraw_GetTheurgiaListMax");
static_assert(offsetof(TheurgiaDraw_GetTheurgiaListMax, ReturnValue) == 0x000000, "Member 'TheurgiaDraw_GetTheurgiaListMax::ReturnValue' has a wrong offset!");

// Function xrd777.FclWeaponShopDrawActor.EventMcaCameraInit
// 0x0004 (0x0004 - 0x0000)
struct FclWeaponShopDrawActor_EventMcaCameraInit final
{
public:
	int32                                         Tag;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FclWeaponShopDrawActor_EventMcaCameraInit) == 0x000004, "Wrong alignment on FclWeaponShopDrawActor_EventMcaCameraInit");
static_assert(sizeof(FclWeaponShopDrawActor_EventMcaCameraInit) == 0x000004, "Wrong size on FclWeaponShopDrawActor_EventMcaCameraInit");
static_assert(offsetof(FclWeaponShopDrawActor_EventMcaCameraInit, Tag) == 0x000000, "Member 'FclWeaponShopDrawActor_EventMcaCameraInit::Tag' has a wrong offset!");

// Function xrd777.FclWeaponShopDrawActor.EventMcaCameraMemberSelect
// 0x0004 (0x0004 - 0x0000)
struct FclWeaponShopDrawActor_EventMcaCameraMemberSelect final
{
public:
	int32                                         Tag;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FclWeaponShopDrawActor_EventMcaCameraMemberSelect) == 0x000004, "Wrong alignment on FclWeaponShopDrawActor_EventMcaCameraMemberSelect");
static_assert(sizeof(FclWeaponShopDrawActor_EventMcaCameraMemberSelect) == 0x000004, "Wrong size on FclWeaponShopDrawActor_EventMcaCameraMemberSelect");
static_assert(offsetof(FclWeaponShopDrawActor_EventMcaCameraMemberSelect, Tag) == 0x000000, "Member 'FclWeaponShopDrawActor_EventMcaCameraMemberSelect::Tag' has a wrong offset!");

// Function xrd777.FclWeaponShopDrawActor.EventMcaCameraSell
// 0x0004 (0x0004 - 0x0000)
struct FclWeaponShopDrawActor_EventMcaCameraSell final
{
public:
	int32                                         Tag;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FclWeaponShopDrawActor_EventMcaCameraSell) == 0x000004, "Wrong alignment on FclWeaponShopDrawActor_EventMcaCameraSell");
static_assert(sizeof(FclWeaponShopDrawActor_EventMcaCameraSell) == 0x000004, "Wrong size on FclWeaponShopDrawActor_EventMcaCameraSell");
static_assert(offsetof(FclWeaponShopDrawActor_EventMcaCameraSell, Tag) == 0x000000, "Member 'FclWeaponShopDrawActor_EventMcaCameraSell::Tag' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectPrimitive.MakeCircle
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiDrawObjectPrimitive_MakeCircle final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Scale;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectPrimitive_MakeCircle) == 0x000004, "Wrong alignment on BtlGuiDrawObjectPrimitive_MakeCircle");
static_assert(sizeof(BtlGuiDrawObjectPrimitive_MakeCircle) == 0x000010, "Wrong size on BtlGuiDrawObjectPrimitive_MakeCircle");
static_assert(offsetof(BtlGuiDrawObjectPrimitive_MakeCircle, Radius) == 0x000000, "Member 'BtlGuiDrawObjectPrimitive_MakeCircle::Radius' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectPrimitive_MakeCircle, Color) == 0x000004, "Member 'BtlGuiDrawObjectPrimitive_MakeCircle::Color' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectPrimitive_MakeCircle, Scale) == 0x000008, "Member 'BtlGuiDrawObjectPrimitive_MakeCircle::Scale' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectPrimitive.MakeRhombus
// 0x000C (0x000C - 0x0000)
struct BtlGuiDrawObjectPrimitive_MakeRhombus final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectPrimitive_MakeRhombus) == 0x000004, "Wrong alignment on BtlGuiDrawObjectPrimitive_MakeRhombus");
static_assert(sizeof(BtlGuiDrawObjectPrimitive_MakeRhombus) == 0x00000C, "Wrong size on BtlGuiDrawObjectPrimitive_MakeRhombus");
static_assert(offsetof(BtlGuiDrawObjectPrimitive_MakeRhombus, Size) == 0x000000, "Member 'BtlGuiDrawObjectPrimitive_MakeRhombus::Size' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectPrimitive_MakeRhombus, Color) == 0x000008, "Member 'BtlGuiDrawObjectPrimitive_MakeRhombus::Color' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectPrimitive.SetAntiLength
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiDrawObjectPrimitive_SetAntiLength final
{
public:
	float                                         Anti;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectPrimitive_SetAntiLength) == 0x000004, "Wrong alignment on BtlGuiDrawObjectPrimitive_SetAntiLength");
static_assert(sizeof(BtlGuiDrawObjectPrimitive_SetAntiLength) == 0x000004, "Wrong size on BtlGuiDrawObjectPrimitive_SetAntiLength");
static_assert(offsetof(BtlGuiDrawObjectPrimitive_SetAntiLength, Anti) == 0x000000, "Member 'BtlGuiDrawObjectPrimitive_SetAntiLength::Anti' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectLineFrame.MakeCircle
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawObjectLineFrame_MakeCircle final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectLineFrame_MakeCircle) == 0x000004, "Wrong alignment on BtlGuiDrawObjectLineFrame_MakeCircle");
static_assert(sizeof(BtlGuiDrawObjectLineFrame_MakeCircle) == 0x000008, "Wrong size on BtlGuiDrawObjectLineFrame_MakeCircle");
static_assert(offsetof(BtlGuiDrawObjectLineFrame_MakeCircle, Radius) == 0x000000, "Member 'BtlGuiDrawObjectLineFrame_MakeCircle::Radius' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectLineFrame_MakeCircle, Color) == 0x000004, "Member 'BtlGuiDrawObjectLineFrame_MakeCircle::Color' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectLineFrame.MakeRhombus
// 0x000C (0x000C - 0x0000)
struct BtlGuiDrawObjectLineFrame_MakeRhombus final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectLineFrame_MakeRhombus) == 0x000004, "Wrong alignment on BtlGuiDrawObjectLineFrame_MakeRhombus");
static_assert(sizeof(BtlGuiDrawObjectLineFrame_MakeRhombus) == 0x00000C, "Wrong size on BtlGuiDrawObjectLineFrame_MakeRhombus");
static_assert(offsetof(BtlGuiDrawObjectLineFrame_MakeRhombus, Size) == 0x000000, "Member 'BtlGuiDrawObjectLineFrame_MakeRhombus::Size' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawObjectLineFrame_MakeRhombus, Color) == 0x000008, "Member 'BtlGuiDrawObjectLineFrame_MakeRhombus::Color' has a wrong offset!");

// Function xrd777.BtlGuiDrawObjectLineFrame.SetAntiLength
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiDrawObjectLineFrame_SetAntiLength final
{
public:
	float                                         Anti;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawObjectLineFrame_SetAntiLength) == 0x000004, "Wrong alignment on BtlGuiDrawObjectLineFrame_SetAntiLength");
static_assert(sizeof(BtlGuiDrawObjectLineFrame_SetAntiLength) == 0x000004, "Wrong size on BtlGuiDrawObjectLineFrame_SetAntiLength");
static_assert(offsetof(BtlGuiDrawObjectLineFrame_SetAntiLength, Anti) == 0x000000, "Member 'BtlGuiDrawObjectLineFrame_SetAntiLength::Anti' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.BtlGuiCheckDrawEnable
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiDrawComponent_BtlGuiCheckDrawEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_BtlGuiCheckDrawEnable) == 0x000001, "Wrong alignment on BtlGuiDrawComponent_BtlGuiCheckDrawEnable");
static_assert(sizeof(BtlGuiDrawComponent_BtlGuiCheckDrawEnable) == 0x000001, "Wrong size on BtlGuiDrawComponent_BtlGuiCheckDrawEnable");
static_assert(offsetof(BtlGuiDrawComponent_BtlGuiCheckDrawEnable, Enable) == 0x000000, "Member 'BtlGuiDrawComponent_BtlGuiCheckDrawEnable::Enable' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.BtlGuiSetDrawEnable
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiDrawComponent_BtlGuiSetDrawEnable final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_BtlGuiSetDrawEnable) == 0x000001, "Wrong alignment on BtlGuiDrawComponent_BtlGuiSetDrawEnable");
static_assert(sizeof(BtlGuiDrawComponent_BtlGuiSetDrawEnable) == 0x000001, "Wrong size on BtlGuiDrawComponent_BtlGuiSetDrawEnable");
static_assert(offsetof(BtlGuiDrawComponent_BtlGuiSetDrawEnable, IsEnable) == 0x000000, "Member 'BtlGuiDrawComponent_BtlGuiSetDrawEnable::IsEnable' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.BtlGuiWorldToScreen
// 0x0020 (0x0020 - 0x0000)
struct BtlGuiDrawComponent_BtlGuiWorldToScreen final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PlayerController;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_BtlGuiWorldToScreen) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_BtlGuiWorldToScreen");
static_assert(sizeof(BtlGuiDrawComponent_BtlGuiWorldToScreen) == 0x000020, "Wrong size on BtlGuiDrawComponent_BtlGuiWorldToScreen");
static_assert(offsetof(BtlGuiDrawComponent_BtlGuiWorldToScreen, WorldPos) == 0x000000, "Member 'BtlGuiDrawComponent_BtlGuiWorldToScreen::WorldPos' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_BtlGuiWorldToScreen, PlayerController) == 0x000010, "Member 'BtlGuiDrawComponent_BtlGuiWorldToScreen::PlayerController' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_BtlGuiWorldToScreen, ReturnValue) == 0x000018, "Member 'BtlGuiDrawComponent_BtlGuiWorldToScreen::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.BtlGuiWorldToScreen2
// 0x0038 (0x0038 - 0x0000)
struct BtlGuiDrawComponent_BtlGuiWorldToScreen2 final
{
public:
	struct FVector                                WorldPos;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerCameraManager*                   CameraManager;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPos;                                            // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FZ;                                                // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACameraActor*                           CameraActor;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiDrawComponent_BtlGuiWorldToScreen2) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_BtlGuiWorldToScreen2");
static_assert(sizeof(BtlGuiDrawComponent_BtlGuiWorldToScreen2) == 0x000038, "Wrong size on BtlGuiDrawComponent_BtlGuiWorldToScreen2");
static_assert(offsetof(BtlGuiDrawComponent_BtlGuiWorldToScreen2, WorldPos) == 0x000000, "Member 'BtlGuiDrawComponent_BtlGuiWorldToScreen2::WorldPos' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_BtlGuiWorldToScreen2, CameraManager) == 0x000010, "Member 'BtlGuiDrawComponent_BtlGuiWorldToScreen2::CameraManager' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_BtlGuiWorldToScreen2, OutPos) == 0x000018, "Member 'BtlGuiDrawComponent_BtlGuiWorldToScreen2::OutPos' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_BtlGuiWorldToScreen2, FZ) == 0x000020, "Member 'BtlGuiDrawComponent_BtlGuiWorldToScreen2::FZ' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_BtlGuiWorldToScreen2, CameraActor) == 0x000028, "Member 'BtlGuiDrawComponent_BtlGuiWorldToScreen2::CameraActor' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_BtlGuiWorldToScreen2, ReturnValue) == 0x000030, "Member 'BtlGuiDrawComponent_BtlGuiWorldToScreen2::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.GetViewportSize
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawComponent_GetViewportSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_GetViewportSize) == 0x000004, "Wrong alignment on BtlGuiDrawComponent_GetViewportSize");
static_assert(sizeof(BtlGuiDrawComponent_GetViewportSize) == 0x000008, "Wrong size on BtlGuiDrawComponent_GetViewportSize");
static_assert(offsetof(BtlGuiDrawComponent_GetViewportSize, ReturnValue) == 0x000000, "Member 'BtlGuiDrawComponent_GetViewportSize::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.ClearCanvas
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiDrawComponent_ClearCanvas final
{
public:
	EBtlGuiCanvas                                 Canvas;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBtlBlendState                         Bs;                                                // 0x0008(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_ClearCanvas) == 0x000004, "Wrong alignment on BtlGuiDrawComponent_ClearCanvas");
static_assert(sizeof(BtlGuiDrawComponent_ClearCanvas) == 0x000010, "Wrong size on BtlGuiDrawComponent_ClearCanvas");
static_assert(offsetof(BtlGuiDrawComponent_ClearCanvas, Canvas) == 0x000000, "Member 'BtlGuiDrawComponent_ClearCanvas::Canvas' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_ClearCanvas, Alpha) == 0x000004, "Member 'BtlGuiDrawComponent_ClearCanvas::Alpha' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_ClearCanvas, Bs) == 0x000008, "Member 'BtlGuiDrawComponent_ClearCanvas::Bs' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.ClearScreen
// 0x0018 (0x0018 - 0x0000)
struct BtlGuiDrawComponent_ClearScreen final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectClearScreen*           OutItem;                                           // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlGuiOT                                     OT;                                                // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiDrawComponent_ClearScreen) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_ClearScreen");
static_assert(sizeof(BtlGuiDrawComponent_ClearScreen) == 0x000018, "Wrong size on BtlGuiDrawComponent_ClearScreen");
static_assert(offsetof(BtlGuiDrawComponent_ClearScreen, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_ClearScreen::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_ClearScreen, OutID) == 0x000004, "Member 'BtlGuiDrawComponent_ClearScreen::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_ClearScreen, OutItem) == 0x000008, "Member 'BtlGuiDrawComponent_ClearScreen::OutItem' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_ClearScreen, Color) == 0x000010, "Member 'BtlGuiDrawComponent_ClearScreen::Color' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_ClearScreen, OT) == 0x000014, "Member 'BtlGuiDrawComponent_ClearScreen::OT' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawImage
// 0x0028 (0x0028 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawImage final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Texture;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Pos;                                               // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectImage*                 OutItem;                                           // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawImage) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_CreateDrawImage");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawImage) == 0x000028, "Wrong size on BtlGuiDrawComponent_CreateDrawImage");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawImage, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawImage::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawImage, Texture) == 0x000008, "Member 'BtlGuiDrawComponent_CreateDrawImage::Texture' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawImage, Pos) == 0x000010, "Member 'BtlGuiDrawComponent_CreateDrawImage::Pos' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawImage, OutID) == 0x000018, "Member 'BtlGuiDrawComponent_CreateDrawImage::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawImage, OutItem) == 0x000020, "Member 'BtlGuiDrawComponent_CreateDrawImage::OutItem' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawImageByStruct
// 0x0090 (0x0090 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawImageByStruct final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlGuiDrawImage                       Item;                                              // 0x0010(0x0070)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectImage*                 OutItem;                                           // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawImageByStruct) == 0x000010, "Wrong alignment on BtlGuiDrawComponent_CreateDrawImageByStruct");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawImageByStruct) == 0x000090, "Wrong size on BtlGuiDrawComponent_CreateDrawImageByStruct");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawImageByStruct, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawImageByStruct::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawImageByStruct, Item) == 0x000010, "Member 'BtlGuiDrawComponent_CreateDrawImageByStruct::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawImageByStruct, OutID) == 0x000080, "Member 'BtlGuiDrawComponent_CreateDrawImageByStruct::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawImageByStruct, OutItem) == 0x000088, "Member 'BtlGuiDrawComponent_CreateDrawImageByStruct::OutItem' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawLineFrame
// 0x0070 (0x0070 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawLineFrame final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlGuiDrawLineFrame                   Item;                                              // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectLineFrame*             OutItem;                                           // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawLineFrame) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_CreateDrawLineFrame");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawLineFrame) == 0x000070, "Wrong size on BtlGuiDrawComponent_CreateDrawLineFrame");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawLineFrame, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawLineFrame::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawLineFrame, Item) == 0x000008, "Member 'BtlGuiDrawComponent_CreateDrawLineFrame::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawLineFrame, OutID) == 0x000060, "Member 'BtlGuiDrawComponent_CreateDrawLineFrame::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawLineFrame, OutItem) == 0x000068, "Member 'BtlGuiDrawComponent_CreateDrawLineFrame::OutItem' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawMaterial
// 0x0080 (0x0080 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawMaterial final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlGuiDrawMaterial                    Item;                                              // 0x0010(0x0060)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0070(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectMaterial*              OutItem;                                           // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawMaterial) == 0x000010, "Wrong alignment on BtlGuiDrawComponent_CreateDrawMaterial");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawMaterial) == 0x000080, "Wrong size on BtlGuiDrawComponent_CreateDrawMaterial");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawMaterial, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawMaterial::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawMaterial, Item) == 0x000010, "Member 'BtlGuiDrawComponent_CreateDrawMaterial::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawMaterial, OutID) == 0x000070, "Member 'BtlGuiDrawComponent_CreateDrawMaterial::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawMaterial, OutItem) == 0x000078, "Member 'BtlGuiDrawComponent_CreateDrawMaterial::OutItem' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawMsg
// 0x0098 (0x0098 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawMsg final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlGuiDrawMsg                         Item;                                              // 0x0008(0x0080)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0088(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectMsg*                   OutItem;                                           // 0x0090(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawMsg) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_CreateDrawMsg");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawMsg) == 0x000098, "Wrong size on BtlGuiDrawComponent_CreateDrawMsg");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawMsg, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawMsg::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawMsg, Item) == 0x000008, "Member 'BtlGuiDrawComponent_CreateDrawMsg::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawMsg, OutID) == 0x000088, "Member 'BtlGuiDrawComponent_CreateDrawMsg::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawMsg, OutItem) == 0x000090, "Member 'BtlGuiDrawComponent_CreateDrawMsg::OutItem' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawPanel
// 0x0050 (0x0050 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawPanel final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBtlGuiDrawPanel                       Item;                                              // 0x0004(0x003C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectPanel*                 OutItem;                                           // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawPanel) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_CreateDrawPanel");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawPanel) == 0x000050, "Wrong size on BtlGuiDrawComponent_CreateDrawPanel");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawPanel, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawPanel::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawPanel, Item) == 0x000004, "Member 'BtlGuiDrawComponent_CreateDrawPanel::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawPanel, OutID) == 0x000040, "Member 'BtlGuiDrawComponent_CreateDrawPanel::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawPanel, OutItem) == 0x000048, "Member 'BtlGuiDrawComponent_CreateDrawPanel::OutItem' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawPlg
// 0x0060 (0x0060 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawPlg final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlGuiDrawPlg                         Item;                                              // 0x0008(0x0048)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectPlg*                   OutItem;                                           // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawPlg) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_CreateDrawPlg");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawPlg) == 0x000060, "Wrong size on BtlGuiDrawComponent_CreateDrawPlg");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawPlg, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawPlg::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawPlg, Item) == 0x000008, "Member 'BtlGuiDrawComponent_CreateDrawPlg::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawPlg, OutID) == 0x000050, "Member 'BtlGuiDrawComponent_CreateDrawPlg::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawPlg, OutItem) == 0x000058, "Member 'BtlGuiDrawComponent_CreateDrawPlg::OutItem' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawPrimitive
// 0x0078 (0x0078 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawPrimitive final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlGuiDrawPrimitive                   Item;                                              // 0x0008(0x0060)(Parm, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectPrimitive*             OutItem;                                           // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawPrimitive) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_CreateDrawPrimitive");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawPrimitive) == 0x000078, "Wrong size on BtlGuiDrawComponent_CreateDrawPrimitive");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawPrimitive, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawPrimitive::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawPrimitive, Item) == 0x000008, "Member 'BtlGuiDrawComponent_CreateDrawPrimitive::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawPrimitive, OutID) == 0x000068, "Member 'BtlGuiDrawComponent_CreateDrawPrimitive::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawPrimitive, OutItem) == 0x000070, "Member 'BtlGuiDrawComponent_CreateDrawPrimitive::OutItem' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawRect
// 0x0070 (0x0070 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawRect final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlGuiDrawRect                        Item;                                              // 0x0010(0x0050)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectRect*                  OutItem;                                           // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawRect) == 0x000010, "Wrong alignment on BtlGuiDrawComponent_CreateDrawRect");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawRect) == 0x000070, "Wrong size on BtlGuiDrawComponent_CreateDrawRect");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawRect, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawRect::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawRect, Item) == 0x000010, "Member 'BtlGuiDrawComponent_CreateDrawRect::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawRect, OutID) == 0x000060, "Member 'BtlGuiDrawComponent_CreateDrawRect::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawRect, OutItem) == 0x000068, "Member 'BtlGuiDrawComponent_CreateDrawRect::OutItem' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawRoundRect
// 0x0050 (0x0050 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawRoundRect final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBtlGuiDrawRoundRect                   Item;                                              // 0x0004(0x0040)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0044(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlGuiDrawObjectRoundRect*             OutItem;                                           // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawRoundRect) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_CreateDrawRoundRect");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawRoundRect) == 0x000050, "Wrong size on BtlGuiDrawComponent_CreateDrawRoundRect");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawRoundRect, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawRoundRect::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawRoundRect, Item) == 0x000004, "Member 'BtlGuiDrawComponent_CreateDrawRoundRect::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawRoundRect, OutID) == 0x000044, "Member 'BtlGuiDrawComponent_CreateDrawRoundRect::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawRoundRect, OutItem) == 0x000048, "Member 'BtlGuiDrawComponent_CreateDrawRoundRect::OutItem' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawSilhouette
// 0x0090 (0x0090 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawSilhouette final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlGuiDrawSilhouette                  Item;                                              // 0x0010(0x0070)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectSilhouette*            OutItem;                                           // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawSilhouette) == 0x000010, "Wrong alignment on BtlGuiDrawComponent_CreateDrawSilhouette");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawSilhouette) == 0x000090, "Wrong size on BtlGuiDrawComponent_CreateDrawSilhouette");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawSilhouette, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawSilhouette::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawSilhouette, Item) == 0x000010, "Member 'BtlGuiDrawComponent_CreateDrawSilhouette::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawSilhouette, OutID) == 0x000080, "Member 'BtlGuiDrawComponent_CreateDrawSilhouette::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawSilhouette, OutItem) == 0x000088, "Member 'BtlGuiDrawComponent_CreateDrawSilhouette::OutItem' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawSprite
// 0x0070 (0x0070 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawSprite final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlGuiDrawSprite                      Item;                                              // 0x0008(0x0050)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0058(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectSprite*                OutItem;                                           // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnChangeByPlatform;                                // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawSprite) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_CreateDrawSprite");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawSprite) == 0x000070, "Wrong size on BtlGuiDrawComponent_CreateDrawSprite");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawSprite, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawSprite::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawSprite, Item) == 0x000008, "Member 'BtlGuiDrawComponent_CreateDrawSprite::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawSprite, OutID) == 0x000058, "Member 'BtlGuiDrawComponent_CreateDrawSprite::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawSprite, OutItem) == 0x000060, "Member 'BtlGuiDrawComponent_CreateDrawSprite::OutItem' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawSprite, OnChangeByPlatform) == 0x000068, "Member 'BtlGuiDrawComponent_CreateDrawSprite::OnChangeByPlatform' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.CreateDrawText
// 0x0070 (0x0070 - 0x0000)
struct BtlGuiDrawComponent_CreateDrawText final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBtlGuiDrawText                        Item;                                              // 0x0008(0x0058)(Parm, NativeAccessSpecifierPublic)
	int32                                         OutID;                                             // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectText*                  OutItem;                                           // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_CreateDrawText) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_CreateDrawText");
static_assert(sizeof(BtlGuiDrawComponent_CreateDrawText) == 0x000070, "Wrong size on BtlGuiDrawComponent_CreateDrawText");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawText, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_CreateDrawText::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawText, Item) == 0x000008, "Member 'BtlGuiDrawComponent_CreateDrawText::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawText, OutID) == 0x000060, "Member 'BtlGuiDrawComponent_CreateDrawText::OutID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_CreateDrawText, OutItem) == 0x000068, "Member 'BtlGuiDrawComponent_CreateDrawText::OutItem' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.DrawAtCanvas
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiDrawComponent_DrawAtCanvas final
{
public:
	EBtlGuiCanvas                                 UseCanvas;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_DrawAtCanvas) == 0x000001, "Wrong alignment on BtlGuiDrawComponent_DrawAtCanvas");
static_assert(sizeof(BtlGuiDrawComponent_DrawAtCanvas) == 0x000001, "Wrong size on BtlGuiDrawComponent_DrawAtCanvas");
static_assert(offsetof(BtlGuiDrawComponent_DrawAtCanvas, UseCanvas) == 0x000000, "Member 'BtlGuiDrawComponent_DrawAtCanvas::UseCanvas' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.FrameBufferCapture
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiDrawComponent_FrameBufferCapture final
{
public:
	bool                                          Is2DCapture;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_FrameBufferCapture) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_FrameBufferCapture");
static_assert(sizeof(BtlGuiDrawComponent_FrameBufferCapture) == 0x000010, "Wrong size on BtlGuiDrawComponent_FrameBufferCapture");
static_assert(offsetof(BtlGuiDrawComponent_FrameBufferCapture, Is2DCapture) == 0x000000, "Member 'BtlGuiDrawComponent_FrameBufferCapture::Is2DCapture' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_FrameBufferCapture, ReturnValue) == 0x000008, "Member 'BtlGuiDrawComponent_FrameBufferCapture::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.GetAllDrawItem
// 0x0020 (0x0020 - 0x0000)
struct BtlGuiDrawComponent_GetAllDrawItem final
{
public:
	TArray<int32>                                 IdAry;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UBtlGuiDrawObjectCore*>          ObjAry;                                            // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_GetAllDrawItem) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_GetAllDrawItem");
static_assert(sizeof(BtlGuiDrawComponent_GetAllDrawItem) == 0x000020, "Wrong size on BtlGuiDrawComponent_GetAllDrawItem");
static_assert(offsetof(BtlGuiDrawComponent_GetAllDrawItem, IdAry) == 0x000000, "Member 'BtlGuiDrawComponent_GetAllDrawItem::IdAry' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_GetAllDrawItem, ObjAry) == 0x000010, "Member 'BtlGuiDrawComponent_GetAllDrawItem::ObjAry' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.GetDrawItem
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiDrawComponent_GetDrawItem final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectCore*                  Obj;                                               // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_GetDrawItem) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_GetDrawItem");
static_assert(sizeof(BtlGuiDrawComponent_GetDrawItem) == 0x000010, "Wrong size on BtlGuiDrawComponent_GetDrawItem");
static_assert(offsetof(BtlGuiDrawComponent_GetDrawItem, ID) == 0x000000, "Member 'BtlGuiDrawComponent_GetDrawItem::ID' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_GetDrawItem, Obj) == 0x000008, "Member 'BtlGuiDrawComponent_GetDrawItem::Obj' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.GetGroupDrawItem
// 0x0030 (0x0030 - 0x0000)
struct BtlGuiDrawComponent_GetGroupDrawItem final
{
public:
	int32                                         GrpNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IdAry;                                             // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UBtlGuiDrawObjectCore*>          ObjAry;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Reverse;                                           // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiDrawComponent_GetGroupDrawItem) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_GetGroupDrawItem");
static_assert(sizeof(BtlGuiDrawComponent_GetGroupDrawItem) == 0x000030, "Wrong size on BtlGuiDrawComponent_GetGroupDrawItem");
static_assert(offsetof(BtlGuiDrawComponent_GetGroupDrawItem, GrpNo) == 0x000000, "Member 'BtlGuiDrawComponent_GetGroupDrawItem::GrpNo' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_GetGroupDrawItem, IdAry) == 0x000008, "Member 'BtlGuiDrawComponent_GetGroupDrawItem::IdAry' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_GetGroupDrawItem, ObjAry) == 0x000018, "Member 'BtlGuiDrawComponent_GetGroupDrawItem::ObjAry' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_GetGroupDrawItem, Reverse) == 0x000028, "Member 'BtlGuiDrawComponent_GetGroupDrawItem::Reverse' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.GetRenderTarget
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiDrawComponent_GetRenderTarget final
{
public:
	EBtlGuiCanvas                                 Canvas;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_GetRenderTarget) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_GetRenderTarget");
static_assert(sizeof(BtlGuiDrawComponent_GetRenderTarget) == 0x000010, "Wrong size on BtlGuiDrawComponent_GetRenderTarget");
static_assert(offsetof(BtlGuiDrawComponent_GetRenderTarget, Canvas) == 0x000000, "Member 'BtlGuiDrawComponent_GetRenderTarget::Canvas' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_GetRenderTarget, ReturnValue) == 0x000008, "Member 'BtlGuiDrawComponent_GetRenderTarget::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.GetVisible
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiDrawComponent_GetVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_GetVisible) == 0x000001, "Wrong alignment on BtlGuiDrawComponent_GetVisible");
static_assert(sizeof(BtlGuiDrawComponent_GetVisible) == 0x000001, "Wrong size on BtlGuiDrawComponent_GetVisible");
static_assert(offsetof(BtlGuiDrawComponent_GetVisible, ReturnValue) == 0x000000, "Member 'BtlGuiDrawComponent_GetVisible::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.IsNotUsingPS4PS5GuardYesNoKey
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiDrawComponent_IsNotUsingPS4PS5GuardYesNoKey final
{
public:
	class UBtlGuiDrawObjectSprite*                Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiDrawComponent_IsNotUsingPS4PS5GuardYesNoKey) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_IsNotUsingPS4PS5GuardYesNoKey");
static_assert(sizeof(BtlGuiDrawComponent_IsNotUsingPS4PS5GuardYesNoKey) == 0x000010, "Wrong size on BtlGuiDrawComponent_IsNotUsingPS4PS5GuardYesNoKey");
static_assert(offsetof(BtlGuiDrawComponent_IsNotUsingPS4PS5GuardYesNoKey, Item) == 0x000000, "Member 'BtlGuiDrawComponent_IsNotUsingPS4PS5GuardYesNoKey::Item' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_IsNotUsingPS4PS5GuardYesNoKey, ReturnValue) == 0x000008, "Member 'BtlGuiDrawComponent_IsNotUsingPS4PS5GuardYesNoKey::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.IsWindowsPlatform
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiDrawComponent_IsWindowsPlatform final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_IsWindowsPlatform) == 0x000001, "Wrong alignment on BtlGuiDrawComponent_IsWindowsPlatform");
static_assert(sizeof(BtlGuiDrawComponent_IsWindowsPlatform) == 0x000001, "Wrong size on BtlGuiDrawComponent_IsWindowsPlatform");
static_assert(offsetof(BtlGuiDrawComponent_IsWindowsPlatform, ReturnValue) == 0x000000, "Member 'BtlGuiDrawComponent_IsWindowsPlatform::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.SetAryVisible
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiDrawComponent_SetAryVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_SetAryVisible) == 0x000001, "Wrong alignment on BtlGuiDrawComponent_SetAryVisible");
static_assert(sizeof(BtlGuiDrawComponent_SetAryVisible) == 0x000001, "Wrong size on BtlGuiDrawComponent_SetAryVisible");
static_assert(offsetof(BtlGuiDrawComponent_SetAryVisible, IsVisible) == 0x000000, "Member 'BtlGuiDrawComponent_SetAryVisible::IsVisible' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.SetCanvas
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiDrawComponent_SetCanvas final
{
public:
	EBtlGuiCanvas                                 Canvas;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_SetCanvas) == 0x000001, "Wrong alignment on BtlGuiDrawComponent_SetCanvas");
static_assert(sizeof(BtlGuiDrawComponent_SetCanvas) == 0x000001, "Wrong size on BtlGuiDrawComponent_SetCanvas");
static_assert(offsetof(BtlGuiDrawComponent_SetCanvas, Canvas) == 0x000000, "Member 'BtlGuiDrawComponent_SetCanvas::Canvas' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.SetComponentBoolOff
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiDrawComponent_SetComponentBoolOff final
{
public:
	bool                                          IsOff;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_SetComponentBoolOff) == 0x000001, "Wrong alignment on BtlGuiDrawComponent_SetComponentBoolOff");
static_assert(sizeof(BtlGuiDrawComponent_SetComponentBoolOff) == 0x000001, "Wrong size on BtlGuiDrawComponent_SetComponentBoolOff");
static_assert(offsetof(BtlGuiDrawComponent_SetComponentBoolOff, IsOff) == 0x000000, "Member 'BtlGuiDrawComponent_SetComponentBoolOff::IsOff' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.SetItemVisible
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiDrawComponent_SetItemVisible final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiDrawComponent_SetItemVisible) == 0x000004, "Wrong alignment on BtlGuiDrawComponent_SetItemVisible");
static_assert(sizeof(BtlGuiDrawComponent_SetItemVisible) == 0x000008, "Wrong size on BtlGuiDrawComponent_SetItemVisible");
static_assert(offsetof(BtlGuiDrawComponent_SetItemVisible, Idx) == 0x000000, "Member 'BtlGuiDrawComponent_SetItemVisible::Idx' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_SetItemVisible, IsVisible) == 0x000004, "Member 'BtlGuiDrawComponent_SetItemVisible::IsVisible' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiDrawComponent_SetVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_SetVisible) == 0x000001, "Wrong alignment on BtlGuiDrawComponent_SetVisible");
static_assert(sizeof(BtlGuiDrawComponent_SetVisible) == 0x000001, "Wrong size on BtlGuiDrawComponent_SetVisible");
static_assert(offsetof(BtlGuiDrawComponent_SetVisible, IsVisible) == 0x000000, "Member 'BtlGuiDrawComponent_SetVisible::IsVisible' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.TranslateObjectToAsset
// 0x0018 (0x0018 - 0x0000)
struct BtlGuiDrawComponent_TranslateObjectToAsset final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    TranslateClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OutAsset;                                          // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_TranslateObjectToAsset) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_TranslateObjectToAsset");
static_assert(sizeof(BtlGuiDrawComponent_TranslateObjectToAsset) == 0x000018, "Wrong size on BtlGuiDrawComponent_TranslateObjectToAsset");
static_assert(offsetof(BtlGuiDrawComponent_TranslateObjectToAsset, Obj) == 0x000000, "Member 'BtlGuiDrawComponent_TranslateObjectToAsset::Obj' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_TranslateObjectToAsset, TranslateClass) == 0x000008, "Member 'BtlGuiDrawComponent_TranslateObjectToAsset::TranslateClass' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_TranslateObjectToAsset, OutAsset) == 0x000010, "Member 'BtlGuiDrawComponent_TranslateObjectToAsset::OutAsset' has a wrong offset!");

// Function xrd777.BtlGuiDrawComponent.TranslateObjectToPlgAsset
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiDrawComponent_TranslateObjectToPlgAsset final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlgAsset*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiDrawComponent_TranslateObjectToPlgAsset) == 0x000008, "Wrong alignment on BtlGuiDrawComponent_TranslateObjectToPlgAsset");
static_assert(sizeof(BtlGuiDrawComponent_TranslateObjectToPlgAsset) == 0x000010, "Wrong size on BtlGuiDrawComponent_TranslateObjectToPlgAsset");
static_assert(offsetof(BtlGuiDrawComponent_TranslateObjectToPlgAsset, Obj) == 0x000000, "Member 'BtlGuiDrawComponent_TranslateObjectToPlgAsset::Obj' has a wrong offset!");
static_assert(offsetof(BtlGuiDrawComponent_TranslateObjectToPlgAsset, ReturnValue) == 0x000008, "Member 'BtlGuiDrawComponent_TranslateObjectToPlgAsset::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEncountWipeCore.BtlEncountWipeCheckWraped
// 0x0001 (0x0001 - 0x0000)
struct BtlEncountWipeCore_BtlEncountWipeCheckWraped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEncountWipeCore_BtlEncountWipeCheckWraped) == 0x000001, "Wrong alignment on BtlEncountWipeCore_BtlEncountWipeCheckWraped");
static_assert(sizeof(BtlEncountWipeCore_BtlEncountWipeCheckWraped) == 0x000001, "Wrong size on BtlEncountWipeCore_BtlEncountWipeCheckWraped");
static_assert(offsetof(BtlEncountWipeCore_BtlEncountWipeCheckWraped, ReturnValue) == 0x000000, "Member 'BtlEncountWipeCore_BtlEncountWipeCheckWraped::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEncountWipeCore.BtlEncountWipeGetInstance
// 0x0008 (0x0008 - 0x0000)
struct BtlEncountWipeCore_BtlEncountWipeGetInstance final
{
public:
	class ABtlEncountWipeCore*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEncountWipeCore_BtlEncountWipeGetInstance) == 0x000008, "Wrong alignment on BtlEncountWipeCore_BtlEncountWipeGetInstance");
static_assert(sizeof(BtlEncountWipeCore_BtlEncountWipeGetInstance) == 0x000008, "Wrong size on BtlEncountWipeCore_BtlEncountWipeGetInstance");
static_assert(offsetof(BtlEncountWipeCore_BtlEncountWipeGetInstance, ReturnValue) == 0x000000, "Member 'BtlEncountWipeCore_BtlEncountWipeGetInstance::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEncountWipeCore.CheckFadeInEnd
// 0x0001 (0x0001 - 0x0000)
struct BtlEncountWipeCore_CheckFadeInEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEncountWipeCore_CheckFadeInEnd) == 0x000001, "Wrong alignment on BtlEncountWipeCore_CheckFadeInEnd");
static_assert(sizeof(BtlEncountWipeCore_CheckFadeInEnd) == 0x000001, "Wrong size on BtlEncountWipeCore_CheckFadeInEnd");
static_assert(offsetof(BtlEncountWipeCore_CheckFadeInEnd, ReturnValue) == 0x000000, "Member 'BtlEncountWipeCore_CheckFadeInEnd::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEncountWipeCore.GetWipeType
// 0x0001 (0x0001 - 0x0000)
struct BtlEncountWipeCore_GetWipeType final
{
public:
	EBtlEncountWipeType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEncountWipeCore_GetWipeType) == 0x000001, "Wrong alignment on BtlEncountWipeCore_GetWipeType");
static_assert(sizeof(BtlEncountWipeCore_GetWipeType) == 0x000001, "Wrong size on BtlEncountWipeCore_GetWipeType");
static_assert(offsetof(BtlEncountWipeCore_GetWipeType, ReturnValue) == 0x000000, "Member 'BtlEncountWipeCore_GetWipeType::ReturnValue' has a wrong offset!");

// Function xrd777.BtlEncountWipeCore.RequestEndWipe
// 0x0008 (0x0008 - 0x0000)
struct BtlEncountWipeCore_RequestEndWipe final
{
public:
	class UBtlCoreComponent*                      Core_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlEncountWipeCore_RequestEndWipe) == 0x000008, "Wrong alignment on BtlEncountWipeCore_RequestEndWipe");
static_assert(sizeof(BtlEncountWipeCore_RequestEndWipe) == 0x000008, "Wrong size on BtlEncountWipeCore_RequestEndWipe");
static_assert(offsetof(BtlEncountWipeCore_RequestEndWipe, Core_0) == 0x000000, "Member 'BtlEncountWipeCore_RequestEndWipe::Core_0' has a wrong offset!");

// Function xrd777.BtlGuiEncountWipe.GetCharacterAnimTime
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiEncountWipe_GetCharacterAnimTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiEncountWipe_GetCharacterAnimTime) == 0x000004, "Wrong alignment on BtlGuiEncountWipe_GetCharacterAnimTime");
static_assert(sizeof(BtlGuiEncountWipe_GetCharacterAnimTime) == 0x000004, "Wrong size on BtlGuiEncountWipe_GetCharacterAnimTime");
static_assert(offsetof(BtlGuiEncountWipe_GetCharacterAnimTime, ReturnValue) == 0x000000, "Member 'BtlGuiEncountWipe_GetCharacterAnimTime::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiEncountWipe.GetCharacterComp
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiEncountWipe_GetCharacterComp final
{
public:
	class UAppCharacterComp*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiEncountWipe_GetCharacterComp) == 0x000008, "Wrong alignment on BtlGuiEncountWipe_GetCharacterComp");
static_assert(sizeof(BtlGuiEncountWipe_GetCharacterComp) == 0x000008, "Wrong size on BtlGuiEncountWipe_GetCharacterComp");
static_assert(offsetof(BtlGuiEncountWipe_GetCharacterComp, ReturnValue) == 0x000000, "Member 'BtlGuiEncountWipe_GetCharacterComp::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiEncountWipe.SetCharacterVisible
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiEncountWipe_SetCharacterVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiEncountWipe_SetCharacterVisible) == 0x000001, "Wrong alignment on BtlGuiEncountWipe_SetCharacterVisible");
static_assert(sizeof(BtlGuiEncountWipe_SetCharacterVisible) == 0x000001, "Wrong size on BtlGuiEncountWipe_SetCharacterVisible");
static_assert(offsetof(BtlGuiEncountWipe_SetCharacterVisible, Visible) == 0x000000, "Member 'BtlGuiEncountWipe_SetCharacterVisible::Visible' has a wrong offset!");

// Function xrd777.BtlGuiEncountWipe.SetTransform
// 0x0030 (0x0030 - 0x0000)
struct BtlGuiEncountWipe_SetTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiEncountWipe_SetTransform) == 0x000010, "Wrong alignment on BtlGuiEncountWipe_SetTransform");
static_assert(sizeof(BtlGuiEncountWipe_SetTransform) == 0x000030, "Wrong size on BtlGuiEncountWipe_SetTransform");
static_assert(offsetof(BtlGuiEncountWipe_SetTransform, Transform) == 0x000000, "Member 'BtlGuiEncountWipe_SetTransform::Transform' has a wrong offset!");

// Function xrd777.FldDungeonTBoxController.ForbiddenDoorHitEvent
// 0x0010 (0x0010 - 0x0000)
struct FldDungeonTBoxController_ForbiddenDoorHitEvent final
{
public:
	EDungeonObjHitEvent                           EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFldDungeonObjectActor*                 PObject;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonTBoxController_ForbiddenDoorHitEvent) == 0x000008, "Wrong alignment on FldDungeonTBoxController_ForbiddenDoorHitEvent");
static_assert(sizeof(FldDungeonTBoxController_ForbiddenDoorHitEvent) == 0x000010, "Wrong size on FldDungeonTBoxController_ForbiddenDoorHitEvent");
static_assert(offsetof(FldDungeonTBoxController_ForbiddenDoorHitEvent, EventType) == 0x000000, "Member 'FldDungeonTBoxController_ForbiddenDoorHitEvent::EventType' has a wrong offset!");
static_assert(offsetof(FldDungeonTBoxController_ForbiddenDoorHitEvent, ID) == 0x000004, "Member 'FldDungeonTBoxController_ForbiddenDoorHitEvent::ID' has a wrong offset!");
static_assert(offsetof(FldDungeonTBoxController_ForbiddenDoorHitEvent, PObject) == 0x000008, "Member 'FldDungeonTBoxController_ForbiddenDoorHitEvent::PObject' has a wrong offset!");

// Function xrd777.FldDungeonTBoxController.HitEvent
// 0x0010 (0x0010 - 0x0000)
struct FldDungeonTBoxController_HitEvent final
{
public:
	EDungeonObjHitEvent                           EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFldDungeonObjectActor*                 PObject;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonTBoxController_HitEvent) == 0x000008, "Wrong alignment on FldDungeonTBoxController_HitEvent");
static_assert(sizeof(FldDungeonTBoxController_HitEvent) == 0x000010, "Wrong size on FldDungeonTBoxController_HitEvent");
static_assert(offsetof(FldDungeonTBoxController_HitEvent, EventType) == 0x000000, "Member 'FldDungeonTBoxController_HitEvent::EventType' has a wrong offset!");
static_assert(offsetof(FldDungeonTBoxController_HitEvent, ID) == 0x000004, "Member 'FldDungeonTBoxController_HitEvent::ID' has a wrong offset!");
static_assert(offsetof(FldDungeonTBoxController_HitEvent, PObject) == 0x000008, "Member 'FldDungeonTBoxController_HitEvent::PObject' has a wrong offset!");

// Function xrd777.BtlGuiFBufferCapture.BtlFBufferCaptureCreate
// 0x000C (0x000C - 0x0000)
struct BtlGuiFBufferCapture_BtlFBufferCaptureCreate final
{
public:
	float                                         GrayScale;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WhiteOut;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiFBufferCapture_BtlFBufferCaptureCreate) == 0x000004, "Wrong alignment on BtlGuiFBufferCapture_BtlFBufferCaptureCreate");
static_assert(sizeof(BtlGuiFBufferCapture_BtlFBufferCaptureCreate) == 0x00000C, "Wrong size on BtlGuiFBufferCapture_BtlFBufferCaptureCreate");
static_assert(offsetof(BtlGuiFBufferCapture_BtlFBufferCaptureCreate, GrayScale) == 0x000000, "Member 'BtlGuiFBufferCapture_BtlFBufferCaptureCreate::GrayScale' has a wrong offset!");
static_assert(offsetof(BtlGuiFBufferCapture_BtlFBufferCaptureCreate, WhiteOut) == 0x000004, "Member 'BtlGuiFBufferCapture_BtlFBufferCaptureCreate::WhiteOut' has a wrong offset!");
static_assert(offsetof(BtlGuiFBufferCapture_BtlFBufferCaptureCreate, AnimTime) == 0x000008, "Member 'BtlGuiFBufferCapture_BtlFBufferCaptureCreate::AnimTime' has a wrong offset!");

// Function xrd777.BtlGuiFBufferCapture.BtlFBufferCaptureCreate2D
// 0x000C (0x000C - 0x0000)
struct BtlGuiFBufferCapture_BtlFBufferCaptureCreate2D final
{
public:
	float                                         GrayScale;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WhiteOut;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimTime;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiFBufferCapture_BtlFBufferCaptureCreate2D) == 0x000004, "Wrong alignment on BtlGuiFBufferCapture_BtlFBufferCaptureCreate2D");
static_assert(sizeof(BtlGuiFBufferCapture_BtlFBufferCaptureCreate2D) == 0x00000C, "Wrong size on BtlGuiFBufferCapture_BtlFBufferCaptureCreate2D");
static_assert(offsetof(BtlGuiFBufferCapture_BtlFBufferCaptureCreate2D, GrayScale) == 0x000000, "Member 'BtlGuiFBufferCapture_BtlFBufferCaptureCreate2D::GrayScale' has a wrong offset!");
static_assert(offsetof(BtlGuiFBufferCapture_BtlFBufferCaptureCreate2D, WhiteOut) == 0x000004, "Member 'BtlGuiFBufferCapture_BtlFBufferCaptureCreate2D::WhiteOut' has a wrong offset!");
static_assert(offsetof(BtlGuiFBufferCapture_BtlFBufferCaptureCreate2D, AnimTime) == 0x000008, "Member 'BtlGuiFBufferCapture_BtlFBufferCaptureCreate2D::AnimTime' has a wrong offset!");

// Function xrd777.BtlGuiFBufferCapture.BtlFBufferCaptureGetInstance
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiFBufferCapture_BtlFBufferCaptureGetInstance final
{
public:
	class ABtlGuiFBufferCapture*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiFBufferCapture_BtlFBufferCaptureGetInstance) == 0x000008, "Wrong alignment on BtlGuiFBufferCapture_BtlFBufferCaptureGetInstance");
static_assert(sizeof(BtlGuiFBufferCapture_BtlFBufferCaptureGetInstance) == 0x000008, "Wrong size on BtlGuiFBufferCapture_BtlFBufferCaptureGetInstance");
static_assert(offsetof(BtlGuiFBufferCapture_BtlFBufferCaptureGetInstance, ReturnValue) == 0x000000, "Member 'BtlGuiFBufferCapture_BtlFBufferCaptureGetInstance::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiFBufferCapture.BtlFBufferCaptureStart
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiFBufferCapture_BtlFBufferCaptureStart final
{
public:
	bool                                          Is2DCapture_0;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGrayScale;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiFBufferCapture_BtlFBufferCaptureStart) == 0x000004, "Wrong alignment on BtlGuiFBufferCapture_BtlFBufferCaptureStart");
static_assert(sizeof(BtlGuiFBufferCapture_BtlFBufferCaptureStart) == 0x000008, "Wrong size on BtlGuiFBufferCapture_BtlFBufferCaptureStart");
static_assert(offsetof(BtlGuiFBufferCapture_BtlFBufferCaptureStart, Is2DCapture_0) == 0x000000, "Member 'BtlGuiFBufferCapture_BtlFBufferCaptureStart::Is2DCapture_0' has a wrong offset!");
static_assert(offsetof(BtlGuiFBufferCapture_BtlFBufferCaptureStart, IsGrayScale) == 0x000001, "Member 'BtlGuiFBufferCapture_BtlFBufferCaptureStart::IsGrayScale' has a wrong offset!");
static_assert(offsetof(BtlGuiFBufferCapture_BtlFBufferCaptureStart, AnimTime) == 0x000004, "Member 'BtlGuiFBufferCapture_BtlFBufferCaptureStart::AnimTime' has a wrong offset!");

// Function xrd777.BtlGuiFBufferCapture.SetGrayScale
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiFBufferCapture_SetGrayScale final
{
public:
	float                                         GrayScale;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiFBufferCapture_SetGrayScale) == 0x000004, "Wrong alignment on BtlGuiFBufferCapture_SetGrayScale");
static_assert(sizeof(BtlGuiFBufferCapture_SetGrayScale) == 0x000004, "Wrong size on BtlGuiFBufferCapture_SetGrayScale");
static_assert(offsetof(BtlGuiFBufferCapture_SetGrayScale, GrayScale) == 0x000000, "Member 'BtlGuiFBufferCapture_SetGrayScale::GrayScale' has a wrong offset!");

// Function xrd777.BtlGuiFBufferCapture.SetWhiteOut
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiFBufferCapture_SetWhiteOut final
{
public:
	float                                         WhiteOut;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiFBufferCapture_SetWhiteOut) == 0x000004, "Wrong alignment on BtlGuiFBufferCapture_SetWhiteOut");
static_assert(sizeof(BtlGuiFBufferCapture_SetWhiteOut) == 0x000004, "Wrong size on BtlGuiFBufferCapture_SetWhiteOut");
static_assert(offsetof(BtlGuiFBufferCapture_SetWhiteOut, WhiteOut) == 0x000000, "Member 'BtlGuiFBufferCapture_SetWhiteOut::WhiteOut' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.CheckPartyPanelVisible
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiIconComponent_CheckPartyPanelVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_CheckPartyPanelVisible) == 0x000001, "Wrong alignment on BtlGuiIconComponent_CheckPartyPanelVisible");
static_assert(sizeof(BtlGuiIconComponent_CheckPartyPanelVisible) == 0x000001, "Wrong size on BtlGuiIconComponent_CheckPartyPanelVisible");
static_assert(offsetof(BtlGuiIconComponent_CheckPartyPanelVisible, ReturnValue) == 0x000000, "Member 'BtlGuiIconComponent_CheckPartyPanelVisible::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.CreateDamagePanelForBP
// 0x0020 (0x0020 - 0x0000)
struct BtlGuiIconComponent_CreateDamagePanelForBP final
{
public:
	struct FBtlGuiIconDamage                      Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_CreateDamagePanelForBP) == 0x000008, "Wrong alignment on BtlGuiIconComponent_CreateDamagePanelForBP");
static_assert(sizeof(BtlGuiIconComponent_CreateDamagePanelForBP) == 0x000020, "Wrong size on BtlGuiIconComponent_CreateDamagePanelForBP");
static_assert(offsetof(BtlGuiIconComponent_CreateDamagePanelForBP, Data) == 0x000000, "Member 'BtlGuiIconComponent_CreateDamagePanelForBP::Data' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.CreatePartyPanel
// 0x000C (0x000C - 0x0000)
struct BtlGuiIconComponent_CreatePartyPanel final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_CreatePartyPanel) == 0x000004, "Wrong alignment on BtlGuiIconComponent_CreatePartyPanel");
static_assert(sizeof(BtlGuiIconComponent_CreatePartyPanel) == 0x00000C, "Wrong size on BtlGuiIconComponent_CreatePartyPanel");
static_assert(offsetof(BtlGuiIconComponent_CreatePartyPanel, Scale) == 0x000000, "Member 'BtlGuiIconComponent_CreatePartyPanel::Scale' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_CreatePartyPanel, X) == 0x000004, "Member 'BtlGuiIconComponent_CreatePartyPanel::X' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_CreatePartyPanel, Y) == 0x000008, "Member 'BtlGuiIconComponent_CreatePartyPanel::Y' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.CreateSkillNamePanelForBP
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiIconComponent_CreateSkillNamePanelForBP final
{
public:
	EBtlCommandType                               Cmd;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnemy;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_CreateSkillNamePanelForBP) == 0x000004, "Wrong alignment on BtlGuiIconComponent_CreateSkillNamePanelForBP");
static_assert(sizeof(BtlGuiIconComponent_CreateSkillNamePanelForBP) == 0x000010, "Wrong size on BtlGuiIconComponent_CreateSkillNamePanelForBP");
static_assert(offsetof(BtlGuiIconComponent_CreateSkillNamePanelForBP, Cmd) == 0x000000, "Member 'BtlGuiIconComponent_CreateSkillNamePanelForBP::Cmd' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_CreateSkillNamePanelForBP, ID) == 0x000004, "Member 'BtlGuiIconComponent_CreateSkillNamePanelForBP::ID' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_CreateSkillNamePanelForBP, IsEnemy) == 0x000008, "Member 'BtlGuiIconComponent_CreateSkillNamePanelForBP::IsEnemy' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_CreateSkillNamePanelForBP, Time) == 0x00000C, "Member 'BtlGuiIconComponent_CreateSkillNamePanelForBP::Time' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.CreateTotalDamagePanelForBP
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiIconComponent_CreateTotalDamagePanelForBP final
{
public:
	int32                                         Damage;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_CreateTotalDamagePanelForBP) == 0x000004, "Wrong alignment on BtlGuiIconComponent_CreateTotalDamagePanelForBP");
static_assert(sizeof(BtlGuiIconComponent_CreateTotalDamagePanelForBP) == 0x000004, "Wrong size on BtlGuiIconComponent_CreateTotalDamagePanelForBP");
static_assert(offsetof(BtlGuiIconComponent_CreateTotalDamagePanelForBP, Damage) == 0x000000, "Member 'BtlGuiIconComponent_CreateTotalDamagePanelForBP::Damage' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.DamagePartyPanel
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiIconComponent_DamagePartyPanel final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWeak;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiIconComponent_DamagePartyPanel) == 0x000004, "Wrong alignment on BtlGuiIconComponent_DamagePartyPanel");
static_assert(sizeof(BtlGuiIconComponent_DamagePartyPanel) == 0x000008, "Wrong size on BtlGuiIconComponent_DamagePartyPanel");
static_assert(offsetof(BtlGuiIconComponent_DamagePartyPanel, PlayerId) == 0x000000, "Member 'BtlGuiIconComponent_DamagePartyPanel::PlayerId' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_DamagePartyPanel, IsWeak) == 0x000004, "Member 'BtlGuiIconComponent_DamagePartyPanel::IsWeak' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.GetRenderTargets
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiIconComponent_GetRenderTargets final
{
public:
	int32                                         Num;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_GetRenderTargets) == 0x000008, "Wrong alignment on BtlGuiIconComponent_GetRenderTargets");
static_assert(sizeof(BtlGuiIconComponent_GetRenderTargets) == 0x000010, "Wrong size on BtlGuiIconComponent_GetRenderTargets");
static_assert(offsetof(BtlGuiIconComponent_GetRenderTargets, Num) == 0x000000, "Member 'BtlGuiIconComponent_GetRenderTargets::Num' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_GetRenderTargets, ReturnValue) == 0x000008, "Member 'BtlGuiIconComponent_GetRenderTargets::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.LoadSyncPartyPanel
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiIconComponent_LoadSyncPartyPanel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_LoadSyncPartyPanel) == 0x000001, "Wrong alignment on BtlGuiIconComponent_LoadSyncPartyPanel");
static_assert(sizeof(BtlGuiIconComponent_LoadSyncPartyPanel) == 0x000001, "Wrong size on BtlGuiIconComponent_LoadSyncPartyPanel");
static_assert(offsetof(BtlGuiIconComponent_LoadSyncPartyPanel, ReturnValue) == 0x000000, "Member 'BtlGuiIconComponent_LoadSyncPartyPanel::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.RecoverPartyPanel_BadStatus
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiIconComponent_RecoverPartyPanel_BadStatus final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_RecoverPartyPanel_BadStatus) == 0x000004, "Wrong alignment on BtlGuiIconComponent_RecoverPartyPanel_BadStatus");
static_assert(sizeof(BtlGuiIconComponent_RecoverPartyPanel_BadStatus) == 0x000004, "Wrong size on BtlGuiIconComponent_RecoverPartyPanel_BadStatus");
static_assert(offsetof(BtlGuiIconComponent_RecoverPartyPanel_BadStatus, PlayerId) == 0x000000, "Member 'BtlGuiIconComponent_RecoverPartyPanel_BadStatus::PlayerId' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.RecoverPartyPanel_HP
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiIconComponent_RecoverPartyPanel_HP final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_RecoverPartyPanel_HP) == 0x000004, "Wrong alignment on BtlGuiIconComponent_RecoverPartyPanel_HP");
static_assert(sizeof(BtlGuiIconComponent_RecoverPartyPanel_HP) == 0x000004, "Wrong size on BtlGuiIconComponent_RecoverPartyPanel_HP");
static_assert(offsetof(BtlGuiIconComponent_RecoverPartyPanel_HP, PlayerId) == 0x000000, "Member 'BtlGuiIconComponent_RecoverPartyPanel_HP::PlayerId' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.RecoverPartyPanel_SP
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiIconComponent_RecoverPartyPanel_SP final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_RecoverPartyPanel_SP) == 0x000004, "Wrong alignment on BtlGuiIconComponent_RecoverPartyPanel_SP");
static_assert(sizeof(BtlGuiIconComponent_RecoverPartyPanel_SP) == 0x000004, "Wrong size on BtlGuiIconComponent_RecoverPartyPanel_SP");
static_assert(offsetof(BtlGuiIconComponent_RecoverPartyPanel_SP, PlayerId) == 0x000000, "Member 'BtlGuiIconComponent_RecoverPartyPanel_SP::PlayerId' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.RequestJyokyoHelpForBP
// 0x0024 (0x0024 - 0x0000)
struct BtlGuiIconComponent_RequestJyokyoHelpForBP final
{
public:
	int32                                         Genus;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MsgNo;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Var1;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Var2;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RenderTime;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceOverride;                                     // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Flags_0;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_RequestJyokyoHelpForBP) == 0x000004, "Wrong alignment on BtlGuiIconComponent_RequestJyokyoHelpForBP");
static_assert(sizeof(BtlGuiIconComponent_RequestJyokyoHelpForBP) == 0x000024, "Wrong size on BtlGuiIconComponent_RequestJyokyoHelpForBP");
static_assert(offsetof(BtlGuiIconComponent_RequestJyokyoHelpForBP, Genus) == 0x000000, "Member 'BtlGuiIconComponent_RequestJyokyoHelpForBP::Genus' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_RequestJyokyoHelpForBP, ID) == 0x000004, "Member 'BtlGuiIconComponent_RequestJyokyoHelpForBP::ID' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_RequestJyokyoHelpForBP, MsgNo) == 0x000008, "Member 'BtlGuiIconComponent_RequestJyokyoHelpForBP::MsgNo' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_RequestJyokyoHelpForBP, Var1) == 0x00000C, "Member 'BtlGuiIconComponent_RequestJyokyoHelpForBP::Var1' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_RequestJyokyoHelpForBP, Var2) == 0x000010, "Member 'BtlGuiIconComponent_RequestJyokyoHelpForBP::Var2' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_RequestJyokyoHelpForBP, RenderTime) == 0x000014, "Member 'BtlGuiIconComponent_RequestJyokyoHelpForBP::RenderTime' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_RequestJyokyoHelpForBP, DelayTime) == 0x000018, "Member 'BtlGuiIconComponent_RequestJyokyoHelpForBP::DelayTime' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_RequestJyokyoHelpForBP, ForceOverride) == 0x00001C, "Member 'BtlGuiIconComponent_RequestJyokyoHelpForBP::ForceOverride' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_RequestJyokyoHelpForBP, Flags_0) == 0x000020, "Member 'BtlGuiIconComponent_RequestJyokyoHelpForBP::Flags_0' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.SetCharacterPartyPanel
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiIconComponent_SetCharacterPartyPanel final
{
public:
	class ABtlActor*                              ActiveActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSkipAnim;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiIconComponent_SetCharacterPartyPanel) == 0x000008, "Wrong alignment on BtlGuiIconComponent_SetCharacterPartyPanel");
static_assert(sizeof(BtlGuiIconComponent_SetCharacterPartyPanel) == 0x000010, "Wrong size on BtlGuiIconComponent_SetCharacterPartyPanel");
static_assert(offsetof(BtlGuiIconComponent_SetCharacterPartyPanel, ActiveActor) == 0x000000, "Member 'BtlGuiIconComponent_SetCharacterPartyPanel::ActiveActor' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_SetCharacterPartyPanel, IsSkipAnim) == 0x000008, "Member 'BtlGuiIconComponent_SetCharacterPartyPanel::IsSkipAnim' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.SetKeyHelpOffset
// 0x0018 (0x0018 - 0x0000)
struct BtlGuiIconComponent_SetKeyHelpOffset final
{
public:
	EBtlGuiIconKeyHelp                            Help;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoChange;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableParam;                                      // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiIconComponent_SetKeyHelpOffset) == 0x000008, "Wrong alignment on BtlGuiIconComponent_SetKeyHelpOffset");
static_assert(sizeof(BtlGuiIconComponent_SetKeyHelpOffset) == 0x000018, "Wrong size on BtlGuiIconComponent_SetKeyHelpOffset");
static_assert(offsetof(BtlGuiIconComponent_SetKeyHelpOffset, Help) == 0x000000, "Member 'BtlGuiIconComponent_SetKeyHelpOffset::Help' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_SetKeyHelpOffset, BtlCore) == 0x000008, "Member 'BtlGuiIconComponent_SetKeyHelpOffset::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_SetKeyHelpOffset, NoChange) == 0x000010, "Member 'BtlGuiIconComponent_SetKeyHelpOffset::NoChange' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_SetKeyHelpOffset, DisableParam) == 0x000011, "Member 'BtlGuiIconComponent_SetKeyHelpOffset::DisableParam' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.SetKeyHelpVisible
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiIconComponent_SetKeyHelpVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_SetKeyHelpVisible) == 0x000008, "Wrong alignment on BtlGuiIconComponent_SetKeyHelpVisible");
static_assert(sizeof(BtlGuiIconComponent_SetKeyHelpVisible) == 0x000010, "Wrong size on BtlGuiIconComponent_SetKeyHelpVisible");
static_assert(offsetof(BtlGuiIconComponent_SetKeyHelpVisible, Visible) == 0x000000, "Member 'BtlGuiIconComponent_SetKeyHelpVisible::Visible' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_SetKeyHelpVisible, BtlCore) == 0x000008, "Member 'BtlGuiIconComponent_SetKeyHelpVisible::BtlCore' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.SetPartyPanelVisible
// 0x0002 (0x0002 - 0x0000)
struct BtlGuiIconComponent_SetPartyPanelVisible final
{
public:
	bool                                          Vidible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetAnimFlag;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_SetPartyPanelVisible) == 0x000001, "Wrong alignment on BtlGuiIconComponent_SetPartyPanelVisible");
static_assert(sizeof(BtlGuiIconComponent_SetPartyPanelVisible) == 0x000002, "Wrong size on BtlGuiIconComponent_SetPartyPanelVisible");
static_assert(offsetof(BtlGuiIconComponent_SetPartyPanelVisible, Vidible) == 0x000000, "Member 'BtlGuiIconComponent_SetPartyPanelVisible::Vidible' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_SetPartyPanelVisible, ResetAnimFlag) == 0x000001, "Member 'BtlGuiIconComponent_SetPartyPanelVisible::ResetAnimFlag' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.SetVariableJyokyoHelp
// 0x0020 (0x0020 - 0x0000)
struct BtlGuiIconComponent_SetVariableJyokyoHelp final
{
public:
	class UBtlGuiDrawObjectMsg*                   PMsg;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Genus;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Var1;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Var2;                                              // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Flags_0;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiIconComponent_SetVariableJyokyoHelp) == 0x000008, "Wrong alignment on BtlGuiIconComponent_SetVariableJyokyoHelp");
static_assert(sizeof(BtlGuiIconComponent_SetVariableJyokyoHelp) == 0x000020, "Wrong size on BtlGuiIconComponent_SetVariableJyokyoHelp");
static_assert(offsetof(BtlGuiIconComponent_SetVariableJyokyoHelp, PMsg) == 0x000000, "Member 'BtlGuiIconComponent_SetVariableJyokyoHelp::PMsg' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_SetVariableJyokyoHelp, Genus) == 0x000008, "Member 'BtlGuiIconComponent_SetVariableJyokyoHelp::Genus' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_SetVariableJyokyoHelp, ID) == 0x00000C, "Member 'BtlGuiIconComponent_SetVariableJyokyoHelp::ID' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_SetVariableJyokyoHelp, Var1) == 0x000010, "Member 'BtlGuiIconComponent_SetVariableJyokyoHelp::Var1' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_SetVariableJyokyoHelp, Var2) == 0x000014, "Member 'BtlGuiIconComponent_SetVariableJyokyoHelp::Var2' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_SetVariableJyokyoHelp, Flags_0) == 0x000018, "Member 'BtlGuiIconComponent_SetVariableJyokyoHelp::Flags_0' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.Start1MoreEffectForBP
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiIconComponent_Start1MoreEffectForBP final
{
public:
	bool                                          IsEnemy;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_Start1MoreEffectForBP) == 0x000004, "Wrong alignment on BtlGuiIconComponent_Start1MoreEffectForBP");
static_assert(sizeof(BtlGuiIconComponent_Start1MoreEffectForBP) == 0x000008, "Wrong size on BtlGuiIconComponent_Start1MoreEffectForBP");
static_assert(offsetof(BtlGuiIconComponent_Start1MoreEffectForBP, IsEnemy) == 0x000000, "Member 'BtlGuiIconComponent_Start1MoreEffectForBP::IsEnemy' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_Start1MoreEffectForBP, Time) == 0x000004, "Member 'BtlGuiIconComponent_Start1MoreEffectForBP::Time' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.StartEncountEffectForBP
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiIconComponent_StartEncountEffectForBP final
{
public:
	bool                                          IsPlayerAdvantage;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_StartEncountEffectForBP) == 0x000004, "Wrong alignment on BtlGuiIconComponent_StartEncountEffectForBP");
static_assert(sizeof(BtlGuiIconComponent_StartEncountEffectForBP) == 0x000008, "Wrong size on BtlGuiIconComponent_StartEncountEffectForBP");
static_assert(offsetof(BtlGuiIconComponent_StartEncountEffectForBP, IsPlayerAdvantage) == 0x000000, "Member 'BtlGuiIconComponent_StartEncountEffectForBP::IsPlayerAdvantage' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_StartEncountEffectForBP, Time) == 0x000004, "Member 'BtlGuiIconComponent_StartEncountEffectForBP::Time' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.UpdateParamPartyPanel_HP
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiIconComponent_UpdateParamPartyPanel_HP final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hp;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_UpdateParamPartyPanel_HP) == 0x000004, "Wrong alignment on BtlGuiIconComponent_UpdateParamPartyPanel_HP");
static_assert(sizeof(BtlGuiIconComponent_UpdateParamPartyPanel_HP) == 0x000008, "Wrong size on BtlGuiIconComponent_UpdateParamPartyPanel_HP");
static_assert(offsetof(BtlGuiIconComponent_UpdateParamPartyPanel_HP, PlayerId) == 0x000000, "Member 'BtlGuiIconComponent_UpdateParamPartyPanel_HP::PlayerId' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_UpdateParamPartyPanel_HP, Hp) == 0x000004, "Member 'BtlGuiIconComponent_UpdateParamPartyPanel_HP::Hp' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.UpdateParamPartyPanel_SP
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiIconComponent_UpdateParamPartyPanel_SP final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sp;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_UpdateParamPartyPanel_SP) == 0x000004, "Wrong alignment on BtlGuiIconComponent_UpdateParamPartyPanel_SP");
static_assert(sizeof(BtlGuiIconComponent_UpdateParamPartyPanel_SP) == 0x000008, "Wrong size on BtlGuiIconComponent_UpdateParamPartyPanel_SP");
static_assert(offsetof(BtlGuiIconComponent_UpdateParamPartyPanel_SP, PlayerId) == 0x000000, "Member 'BtlGuiIconComponent_UpdateParamPartyPanel_SP::PlayerId' has a wrong offset!");
static_assert(offsetof(BtlGuiIconComponent_UpdateParamPartyPanel_SP, Sp) == 0x000004, "Member 'BtlGuiIconComponent_UpdateParamPartyPanel_SP::Sp' has a wrong offset!");

// Function xrd777.BtlGuiIconComponent.VisibleActionSuggestion
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiIconComponent_VisibleActionSuggestion final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiIconComponent_VisibleActionSuggestion) == 0x000001, "Wrong alignment on BtlGuiIconComponent_VisibleActionSuggestion");
static_assert(sizeof(BtlGuiIconComponent_VisibleActionSuggestion) == 0x000001, "Wrong size on BtlGuiIconComponent_VisibleActionSuggestion");
static_assert(offsetof(BtlGuiIconComponent_VisibleActionSuggestion, IsVisible) == 0x000000, "Member 'BtlGuiIconComponent_VisibleActionSuggestion::IsVisible' has a wrong offset!");

// Function xrd777.CmpSystem.OnEndPlaySubProcess
// 0x0010 (0x0010 - 0x0000)
struct CmpSystem_OnEndPlaySubProcess final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CmpSystem_OnEndPlaySubProcess) == 0x000008, "Wrong alignment on CmpSystem_OnEndPlaySubProcess");
static_assert(sizeof(CmpSystem_OnEndPlaySubProcess) == 0x000010, "Wrong size on CmpSystem_OnEndPlaySubProcess");
static_assert(offsetof(CmpSystem_OnEndPlaySubProcess, Actor) == 0x000000, "Member 'CmpSystem_OnEndPlaySubProcess::Actor' has a wrong offset!");
static_assert(offsetof(CmpSystem_OnEndPlaySubProcess, EndPlayReason) == 0x000008, "Member 'CmpSystem_OnEndPlaySubProcess::EndPlayReason' has a wrong offset!");

// Function xrd777.BtlGuiListComponent.GetCursor
// 0x000C (0x000C - 0x0000)
struct BtlGuiListComponent_GetCursor final
{
public:
	int32                                         CursorIndex;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopIndex;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentIndex;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiListComponent_GetCursor) == 0x000004, "Wrong alignment on BtlGuiListComponent_GetCursor");
static_assert(sizeof(BtlGuiListComponent_GetCursor) == 0x00000C, "Wrong size on BtlGuiListComponent_GetCursor");
static_assert(offsetof(BtlGuiListComponent_GetCursor, CursorIndex) == 0x000000, "Member 'BtlGuiListComponent_GetCursor::CursorIndex' has a wrong offset!");
static_assert(offsetof(BtlGuiListComponent_GetCursor, TopIndex) == 0x000004, "Member 'BtlGuiListComponent_GetCursor::TopIndex' has a wrong offset!");
static_assert(offsetof(BtlGuiListComponent_GetCursor, CurrentIndex) == 0x000008, "Member 'BtlGuiListComponent_GetCursor::CurrentIndex' has a wrong offset!");

// Function xrd777.BtlGuiListComponent.Init
// 0x001C (0x001C - 0x0000)
struct BtlGuiListComponent_Init final
{
public:
	int32                                         ItemDtarMin;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemDtarMax;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemNum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBtlListScreenID                              ScreenID;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CursorIdx;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ListTopIdx;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveType;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiListComponent_Init) == 0x000004, "Wrong alignment on BtlGuiListComponent_Init");
static_assert(sizeof(BtlGuiListComponent_Init) == 0x00001C, "Wrong size on BtlGuiListComponent_Init");
static_assert(offsetof(BtlGuiListComponent_Init, ItemDtarMin) == 0x000000, "Member 'BtlGuiListComponent_Init::ItemDtarMin' has a wrong offset!");
static_assert(offsetof(BtlGuiListComponent_Init, ItemDtarMax) == 0x000004, "Member 'BtlGuiListComponent_Init::ItemDtarMax' has a wrong offset!");
static_assert(offsetof(BtlGuiListComponent_Init, ItemNum) == 0x000008, "Member 'BtlGuiListComponent_Init::ItemNum' has a wrong offset!");
static_assert(offsetof(BtlGuiListComponent_Init, ScreenID) == 0x00000C, "Member 'BtlGuiListComponent_Init::ScreenID' has a wrong offset!");
static_assert(offsetof(BtlGuiListComponent_Init, CursorIdx) == 0x000010, "Member 'BtlGuiListComponent_Init::CursorIdx' has a wrong offset!");
static_assert(offsetof(BtlGuiListComponent_Init, ListTopIdx) == 0x000014, "Member 'BtlGuiListComponent_Init::ListTopIdx' has a wrong offset!");
static_assert(offsetof(BtlGuiListComponent_Init, MoveType) == 0x000018, "Member 'BtlGuiListComponent_Init::MoveType' has a wrong offset!");

// Function xrd777.BtlGuiListComponent.SetCursor
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiListComponent_SetCursor final
{
public:
	int32                                         CurrentIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiListComponent_SetCursor) == 0x000004, "Wrong alignment on BtlGuiListComponent_SetCursor");
static_assert(sizeof(BtlGuiListComponent_SetCursor) == 0x000004, "Wrong size on BtlGuiListComponent_SetCursor");
static_assert(offsetof(BtlGuiListComponent_SetCursor, CurrentIndex) == 0x000000, "Member 'BtlGuiListComponent_SetCursor::CurrentIndex' has a wrong offset!");

// Function xrd777.BtlGuiListComponent.SetScrollBarData
// 0x000C (0x000C - 0x0000)
struct BtlGuiListComponent_SetScrollBarData final
{
public:
	float                                         PosY;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollRange;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CenterPosY;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiListComponent_SetScrollBarData) == 0x000004, "Wrong alignment on BtlGuiListComponent_SetScrollBarData");
static_assert(sizeof(BtlGuiListComponent_SetScrollBarData) == 0x00000C, "Wrong size on BtlGuiListComponent_SetScrollBarData");
static_assert(offsetof(BtlGuiListComponent_SetScrollBarData, PosY) == 0x000000, "Member 'BtlGuiListComponent_SetScrollBarData::PosY' has a wrong offset!");
static_assert(offsetof(BtlGuiListComponent_SetScrollBarData, ScrollRange) == 0x000004, "Member 'BtlGuiListComponent_SetScrollBarData::ScrollRange' has a wrong offset!");
static_assert(offsetof(BtlGuiListComponent_SetScrollBarData, CenterPosY) == 0x000008, "Member 'BtlGuiListComponent_SetScrollBarData::CenterPosY' has a wrong offset!");

// Function xrd777.BtlGuiListComponent.Update
// 0x000C (0x000C - 0x0000)
struct BtlGuiListComponent_Update final
{
public:
	int32                                         CursorIndex;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TopIndex;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentIndex;                                      // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiListComponent_Update) == 0x000004, "Wrong alignment on BtlGuiListComponent_Update");
static_assert(sizeof(BtlGuiListComponent_Update) == 0x00000C, "Wrong size on BtlGuiListComponent_Update");
static_assert(offsetof(BtlGuiListComponent_Update, CursorIndex) == 0x000000, "Member 'BtlGuiListComponent_Update::CursorIndex' has a wrong offset!");
static_assert(offsetof(BtlGuiListComponent_Update, TopIndex) == 0x000004, "Member 'BtlGuiListComponent_Update::TopIndex' has a wrong offset!");
static_assert(offsetof(BtlGuiListComponent_Update, CurrentIndex) == 0x000008, "Member 'BtlGuiListComponent_Update::CurrentIndex' has a wrong offset!");

// Function xrd777.BtlGuiPersonaStatusComponent.ChangePersonaStatusLeft
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiPersonaStatusComponent_ChangePersonaStatusLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPersonaStatusComponent_ChangePersonaStatusLeft) == 0x000001, "Wrong alignment on BtlGuiPersonaStatusComponent_ChangePersonaStatusLeft");
static_assert(sizeof(BtlGuiPersonaStatusComponent_ChangePersonaStatusLeft) == 0x000001, "Wrong size on BtlGuiPersonaStatusComponent_ChangePersonaStatusLeft");
static_assert(offsetof(BtlGuiPersonaStatusComponent_ChangePersonaStatusLeft, ReturnValue) == 0x000000, "Member 'BtlGuiPersonaStatusComponent_ChangePersonaStatusLeft::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiPersonaStatusComponent.ChangePersonaStatusRight
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiPersonaStatusComponent_ChangePersonaStatusRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPersonaStatusComponent_ChangePersonaStatusRight) == 0x000001, "Wrong alignment on BtlGuiPersonaStatusComponent_ChangePersonaStatusRight");
static_assert(sizeof(BtlGuiPersonaStatusComponent_ChangePersonaStatusRight) == 0x000001, "Wrong size on BtlGuiPersonaStatusComponent_ChangePersonaStatusRight");
static_assert(offsetof(BtlGuiPersonaStatusComponent_ChangePersonaStatusRight, ReturnValue) == 0x000000, "Member 'BtlGuiPersonaStatusComponent_ChangePersonaStatusRight::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiPersonaStatusComponent.CheckPersonaChange
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiPersonaStatusComponent_CheckPersonaChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPersonaStatusComponent_CheckPersonaChange) == 0x000001, "Wrong alignment on BtlGuiPersonaStatusComponent_CheckPersonaChange");
static_assert(sizeof(BtlGuiPersonaStatusComponent_CheckPersonaChange) == 0x000001, "Wrong size on BtlGuiPersonaStatusComponent_CheckPersonaChange");
static_assert(offsetof(BtlGuiPersonaStatusComponent_CheckPersonaChange, ReturnValue) == 0x000000, "Member 'BtlGuiPersonaStatusComponent_CheckPersonaChange::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiPersonaStatusComponent.CheckPersonaCommentary
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiPersonaStatusComponent_CheckPersonaCommentary final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPersonaStatusComponent_CheckPersonaCommentary) == 0x000001, "Wrong alignment on BtlGuiPersonaStatusComponent_CheckPersonaCommentary");
static_assert(sizeof(BtlGuiPersonaStatusComponent_CheckPersonaCommentary) == 0x000001, "Wrong size on BtlGuiPersonaStatusComponent_CheckPersonaCommentary");
static_assert(offsetof(BtlGuiPersonaStatusComponent_CheckPersonaCommentary, ReturnValue) == 0x000000, "Member 'BtlGuiPersonaStatusComponent_CheckPersonaCommentary::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiPersonaStatusComponent.CheckPersonaSkillHelp
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiPersonaStatusComponent_CheckPersonaSkillHelp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPersonaStatusComponent_CheckPersonaSkillHelp) == 0x000001, "Wrong alignment on BtlGuiPersonaStatusComponent_CheckPersonaSkillHelp");
static_assert(sizeof(BtlGuiPersonaStatusComponent_CheckPersonaSkillHelp) == 0x000001, "Wrong size on BtlGuiPersonaStatusComponent_CheckPersonaSkillHelp");
static_assert(offsetof(BtlGuiPersonaStatusComponent_CheckPersonaSkillHelp, ReturnValue) == 0x000000, "Member 'BtlGuiPersonaStatusComponent_CheckPersonaSkillHelp::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiPersonaStatusComponent.ClosePersonaStatus
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiPersonaStatusComponent_ClosePersonaStatus final
{
public:
	class UBtlCoreComponent*                      PCore;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPersonaStatusComponent_ClosePersonaStatus) == 0x000008, "Wrong alignment on BtlGuiPersonaStatusComponent_ClosePersonaStatus");
static_assert(sizeof(BtlGuiPersonaStatusComponent_ClosePersonaStatus) == 0x000008, "Wrong size on BtlGuiPersonaStatusComponent_ClosePersonaStatus");
static_assert(offsetof(BtlGuiPersonaStatusComponent_ClosePersonaStatus, PCore) == 0x000000, "Member 'BtlGuiPersonaStatusComponent_ClosePersonaStatus::PCore' has a wrong offset!");

// Function xrd777.BtlGuiPersonaStatusComponent.CreatePersonaStatus
// 0x0018 (0x0018 - 0x0000)
struct BtlGuiPersonaStatusComponent_CreatePersonaStatus final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlCoreComponent*                      PCore;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentNum;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AlwaysChange;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiPersonaStatusComponent_CreatePersonaStatus) == 0x000008, "Wrong alignment on BtlGuiPersonaStatusComponent_CreatePersonaStatus");
static_assert(sizeof(BtlGuiPersonaStatusComponent_CreatePersonaStatus) == 0x000018, "Wrong size on BtlGuiPersonaStatusComponent_CreatePersonaStatus");
static_assert(offsetof(BtlGuiPersonaStatusComponent_CreatePersonaStatus, Actor) == 0x000000, "Member 'BtlGuiPersonaStatusComponent_CreatePersonaStatus::Actor' has a wrong offset!");
static_assert(offsetof(BtlGuiPersonaStatusComponent_CreatePersonaStatus, PCore) == 0x000008, "Member 'BtlGuiPersonaStatusComponent_CreatePersonaStatus::PCore' has a wrong offset!");
static_assert(offsetof(BtlGuiPersonaStatusComponent_CreatePersonaStatus, CurrentNum) == 0x000010, "Member 'BtlGuiPersonaStatusComponent_CreatePersonaStatus::CurrentNum' has a wrong offset!");
static_assert(offsetof(BtlGuiPersonaStatusComponent_CreatePersonaStatus, AlwaysChange) == 0x000014, "Member 'BtlGuiPersonaStatusComponent_CreatePersonaStatus::AlwaysChange' has a wrong offset!");

// Function xrd777.BtlGuiPersonaStatusComponent.CreatePersonaStatusTargetSelect
// 0x0020 (0x0020 - 0x0000)
struct BtlGuiPersonaStatusComponent_CreatePersonaStatusTargetSelect final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBtlCoreComponent*                      PCore;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABtlActor*>                      PlayerList;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPersonaStatusComponent_CreatePersonaStatusTargetSelect) == 0x000008, "Wrong alignment on BtlGuiPersonaStatusComponent_CreatePersonaStatusTargetSelect");
static_assert(sizeof(BtlGuiPersonaStatusComponent_CreatePersonaStatusTargetSelect) == 0x000020, "Wrong size on BtlGuiPersonaStatusComponent_CreatePersonaStatusTargetSelect");
static_assert(offsetof(BtlGuiPersonaStatusComponent_CreatePersonaStatusTargetSelect, Actor) == 0x000000, "Member 'BtlGuiPersonaStatusComponent_CreatePersonaStatusTargetSelect::Actor' has a wrong offset!");
static_assert(offsetof(BtlGuiPersonaStatusComponent_CreatePersonaStatusTargetSelect, PCore) == 0x000008, "Member 'BtlGuiPersonaStatusComponent_CreatePersonaStatusTargetSelect::PCore' has a wrong offset!");
static_assert(offsetof(BtlGuiPersonaStatusComponent_CreatePersonaStatusTargetSelect, PlayerList) == 0x000010, "Member 'BtlGuiPersonaStatusComponent_CreatePersonaStatusTargetSelect::PlayerList' has a wrong offset!");

// Function xrd777.BtlGuiPersonaStatusComponent.GetDispActor
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiPersonaStatusComponent_GetDispActor final
{
public:
	class UBtlCoreComponent*                      PCore;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ABtlActor*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPersonaStatusComponent_GetDispActor) == 0x000008, "Wrong alignment on BtlGuiPersonaStatusComponent_GetDispActor");
static_assert(sizeof(BtlGuiPersonaStatusComponent_GetDispActor) == 0x000010, "Wrong size on BtlGuiPersonaStatusComponent_GetDispActor");
static_assert(offsetof(BtlGuiPersonaStatusComponent_GetDispActor, PCore) == 0x000000, "Member 'BtlGuiPersonaStatusComponent_GetDispActor::PCore' has a wrong offset!");
static_assert(offsetof(BtlGuiPersonaStatusComponent_GetDispActor, ReturnValue) == 0x000008, "Member 'BtlGuiPersonaStatusComponent_GetDispActor::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiPersonaStatusComponent.GetPersonaStockCount
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiPersonaStatusComponent_GetPersonaStockCount final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlGuiPersonaStatusComponent_GetPersonaStockCount) == 0x000008, "Wrong alignment on BtlGuiPersonaStatusComponent_GetPersonaStockCount");
static_assert(sizeof(BtlGuiPersonaStatusComponent_GetPersonaStockCount) == 0x000010, "Wrong size on BtlGuiPersonaStatusComponent_GetPersonaStockCount");
static_assert(offsetof(BtlGuiPersonaStatusComponent_GetPersonaStockCount, Actor) == 0x000000, "Member 'BtlGuiPersonaStatusComponent_GetPersonaStockCount::Actor' has a wrong offset!");
static_assert(offsetof(BtlGuiPersonaStatusComponent_GetPersonaStockCount, ReturnValue) == 0x000008, "Member 'BtlGuiPersonaStatusComponent_GetPersonaStockCount::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiPersonaStatusComponent.IsEndPersonaStatus
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiPersonaStatusComponent_IsEndPersonaStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPersonaStatusComponent_IsEndPersonaStatus) == 0x000001, "Wrong alignment on BtlGuiPersonaStatusComponent_IsEndPersonaStatus");
static_assert(sizeof(BtlGuiPersonaStatusComponent_IsEndPersonaStatus) == 0x000001, "Wrong size on BtlGuiPersonaStatusComponent_IsEndPersonaStatus");
static_assert(offsetof(BtlGuiPersonaStatusComponent_IsEndPersonaStatus, ReturnValue) == 0x000000, "Member 'BtlGuiPersonaStatusComponent_IsEndPersonaStatus::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiPersonaStatusComponent.UpdatePersonaStatus
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiPersonaStatusComponent_UpdatePersonaStatus final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPersonaStatusComponent_UpdatePersonaStatus) == 0x000004, "Wrong alignment on BtlGuiPersonaStatusComponent_UpdatePersonaStatus");
static_assert(sizeof(BtlGuiPersonaStatusComponent_UpdatePersonaStatus) == 0x000004, "Wrong size on BtlGuiPersonaStatusComponent_UpdatePersonaStatus");
static_assert(offsetof(BtlGuiPersonaStatusComponent_UpdatePersonaStatus, DeltaTime) == 0x000000, "Member 'BtlGuiPersonaStatusComponent_UpdatePersonaStatus::DeltaTime' has a wrong offset!");

// Function xrd777.BtlGuiPromiseComponent.CheckMsgStart
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiPromiseComponent_CheckMsgStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPromiseComponent_CheckMsgStart) == 0x000001, "Wrong alignment on BtlGuiPromiseComponent_CheckMsgStart");
static_assert(sizeof(BtlGuiPromiseComponent_CheckMsgStart) == 0x000001, "Wrong size on BtlGuiPromiseComponent_CheckMsgStart");
static_assert(offsetof(BtlGuiPromiseComponent_CheckMsgStart, ReturnValue) == 0x000000, "Member 'BtlGuiPromiseComponent_CheckMsgStart::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiPromiseComponent.StartSupportInfo
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiPromiseComponent_StartSupportInfo final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGeneral;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MsgNo;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPromiseComponent_StartSupportInfo) == 0x000008, "Wrong alignment on BtlGuiPromiseComponent_StartSupportInfo");
static_assert(sizeof(BtlGuiPromiseComponent_StartSupportInfo) == 0x000010, "Wrong size on BtlGuiPromiseComponent_StartSupportInfo");
static_assert(offsetof(BtlGuiPromiseComponent_StartSupportInfo, BtlCore) == 0x000000, "Member 'BtlGuiPromiseComponent_StartSupportInfo::BtlCore' has a wrong offset!");
static_assert(offsetof(BtlGuiPromiseComponent_StartSupportInfo, IsGeneral) == 0x000008, "Member 'BtlGuiPromiseComponent_StartSupportInfo::IsGeneral' has a wrong offset!");
static_assert(offsetof(BtlGuiPromiseComponent_StartSupportInfo, MsgNo) == 0x00000C, "Member 'BtlGuiPromiseComponent_StartSupportInfo::MsgNo' has a wrong offset!");

// Function xrd777.BtlGuiPromiseComponent.StopSupportInfo
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiPromiseComponent_StopSupportInfo final
{
public:
	class UBtlCoreComponent*                      BtlCore;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiPromiseComponent_StopSupportInfo) == 0x000008, "Wrong alignment on BtlGuiPromiseComponent_StopSupportInfo");
static_assert(sizeof(BtlGuiPromiseComponent_StopSupportInfo) == 0x000008, "Wrong size on BtlGuiPromiseComponent_StopSupportInfo");
static_assert(offsetof(BtlGuiPromiseComponent_StopSupportInfo, BtlCore) == 0x000000, "Member 'BtlGuiPromiseComponent_StopSupportInfo::BtlCore' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.GetAddResources
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_GetAddResources final
{
public:
	class UObject*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_GetAddResources) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_GetAddResources");
static_assert(sizeof(BtlGuiResourcesActor_GetAddResources) == 0x000008, "Wrong size on BtlGuiResourcesActor_GetAddResources");
static_assert(offsetof(BtlGuiResourcesActor_GetAddResources, ReturnValue) == 0x000000, "Member 'BtlGuiResourcesActor_GetAddResources::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.GetResources
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiResourcesActor_GetResources final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_GetResources) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_GetResources");
static_assert(sizeof(BtlGuiResourcesActor_GetResources) == 0x000010, "Wrong size on BtlGuiResourcesActor_GetResources");
static_assert(offsetof(BtlGuiResourcesActor_GetResources, Name_0) == 0x000000, "Member 'BtlGuiResourcesActor_GetResources::Name_0' has a wrong offset!");
static_assert(offsetof(BtlGuiResourcesActor_GetResources, ReturnValue) == 0x000008, "Member 'BtlGuiResourcesActor_GetResources::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeAnalyzeLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeAnalyzeLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeAnalyzeLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeAnalyzeLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeAnalyzeLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeAnalyzeLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeAnalyzeLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeAnalyzeLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeAnalyzeTextLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeAnalyzeTextLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeAnalyzeTextLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeAnalyzeTextLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeAnalyzeTextLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeAnalyzeTextLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeAnalyzeTextLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeAnalyzeTextLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeBattleTouchCollLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeBattleTouchCollLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeBattleTouchCollLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeBattleTouchCollLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeBattleTouchCollLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeBattleTouchCollLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeBattleTouchCollLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeBattleTouchCollLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeDamageIconLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeDamageIconLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeDamageIconLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeDamageIconLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeDamageIconLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeDamageIconLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeDamageIconLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeDamageIconLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeGuardLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeGuardLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeGuardLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeGuardLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeGuardLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeGuardLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeGuardLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeGuardLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeItemSkillListTextLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeItemSkillListTextLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeItemSkillListTextLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeItemSkillListTextLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeItemSkillListTextLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeItemSkillListTextLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeItemSkillListTextLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeItemSkillListTextLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeOthersLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeOthersLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeOthersLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeOthersLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeOthersLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeOthersLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeOthersLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeOthersLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializePromiseLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializePromiseLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializePromiseLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializePromiseLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializePromiseLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializePromiseLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializePromiseLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializePromiseLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeRushLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeRushLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeRushLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeRushLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeRushLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeRushLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeRushLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeRushLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeTacticsLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeTacticsLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeTacticsLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeTacticsLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeTacticsLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeTacticsLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeTacticsLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeTacticsLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeTacticsListTextLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeTacticsListTextLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeTacticsListTextLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeTacticsListTextLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeTacticsListTextLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeTacticsListTextLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeTacticsListTextLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeTacticsListTextLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeTargetInfoLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeTargetInfoLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeTargetInfoLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeTargetInfoLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeTargetInfoLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeTargetInfoLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeTargetInfoLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeTargetInfoLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeTargetInfoTextLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeTargetInfoTextLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeTargetInfoTextLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeTargetInfoTextLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeTargetInfoTextLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeTargetInfoTextLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeTargetInfoTextLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeTargetInfoTextLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeTheurgiaLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeTheurgiaLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeTheurgiaLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeTheurgiaLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeTheurgiaLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeTheurgiaLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeTheurgiaLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeTheurgiaLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeTheurgiaTextLayoutData
// 0x0018 (0x0018 - 0x0000)
struct BtlGuiResourcesActor_InitializeTheurgiaTextLayoutData final
{
public:
	class UDataTable*                             TextData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TextRowData;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             TextPosData;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeTheurgiaTextLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeTheurgiaTextLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeTheurgiaTextLayoutData) == 0x000018, "Wrong size on BtlGuiResourcesActor_InitializeTheurgiaTextLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeTheurgiaTextLayoutData, TextData) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeTheurgiaTextLayoutData::TextData' has a wrong offset!");
static_assert(offsetof(BtlGuiResourcesActor_InitializeTheurgiaTextLayoutData, TextRowData) == 0x000008, "Member 'BtlGuiResourcesActor_InitializeTheurgiaTextLayoutData::TextRowData' has a wrong offset!");
static_assert(offsetof(BtlGuiResourcesActor_InitializeTheurgiaTextLayoutData, TextPosData) == 0x000010, "Member 'BtlGuiResourcesActor_InitializeTheurgiaTextLayoutData::TextPosData' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.InitializeTopLayoutData
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResourcesActor_InitializeTopLayoutData final
{
public:
	class UDataTable*                             Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_InitializeTopLayoutData) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_InitializeTopLayoutData");
static_assert(sizeof(BtlGuiResourcesActor_InitializeTopLayoutData) == 0x000008, "Wrong size on BtlGuiResourcesActor_InitializeTopLayoutData");
static_assert(offsetof(BtlGuiResourcesActor_InitializeTopLayoutData, Data) == 0x000000, "Member 'BtlGuiResourcesActor_InitializeTopLayoutData::Data' has a wrong offset!");

// Function xrd777.BtlGuiResourcesActor.RequestAddResources
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiResourcesActor_RequestAddResources final
{
public:
	class FString                                 ResourcesPath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResourcesActor_RequestAddResources) == 0x000008, "Wrong alignment on BtlGuiResourcesActor_RequestAddResources");
static_assert(sizeof(BtlGuiResourcesActor_RequestAddResources) == 0x000010, "Wrong size on BtlGuiResourcesActor_RequestAddResources");
static_assert(offsetof(BtlGuiResourcesActor_RequestAddResources, ResourcesPath) == 0x000000, "Member 'BtlGuiResourcesActor_RequestAddResources::ResourcesPath' has a wrong offset!");

// Function xrd777.UIAccessInfoDraw.OnFinishedScr
// 0x0004 (0x0004 - 0x0000)
struct UIAccessInfoDraw_OnFinishedScr final
{
public:
	int32                                         ExitType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIAccessInfoDraw_OnFinishedScr) == 0x000004, "Wrong alignment on UIAccessInfoDraw_OnFinishedScr");
static_assert(sizeof(UIAccessInfoDraw_OnFinishedScr) == 0x000004, "Wrong size on UIAccessInfoDraw_OnFinishedScr");
static_assert(offsetof(UIAccessInfoDraw_OnFinishedScr, ExitType) == 0x000000, "Member 'UIAccessInfoDraw_OnFinishedScr::ExitType' has a wrong offset!");

// Function xrd777.BtlGuiResources.BtlGuiResourcesCreate
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResources_BtlGuiResourcesCreate final
{
public:
	class ABtlGuiResourcesBase*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_BtlGuiResourcesCreate) == 0x000008, "Wrong alignment on BtlGuiResources_BtlGuiResourcesCreate");
static_assert(sizeof(BtlGuiResources_BtlGuiResourcesCreate) == 0x000008, "Wrong size on BtlGuiResources_BtlGuiResourcesCreate");
static_assert(offsetof(BtlGuiResources_BtlGuiResourcesCreate, ReturnValue) == 0x000000, "Member 'BtlGuiResources_BtlGuiResourcesCreate::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.CheckBtlResourcesCompleted
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiResources_CheckBtlResourcesCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_CheckBtlResourcesCompleted) == 0x000001, "Wrong alignment on BtlGuiResources_CheckBtlResourcesCompleted");
static_assert(sizeof(BtlGuiResources_CheckBtlResourcesCompleted) == 0x000001, "Wrong size on BtlGuiResources_CheckBtlResourcesCompleted");
static_assert(offsetof(BtlGuiResources_CheckBtlResourcesCompleted, ReturnValue) == 0x000000, "Member 'BtlGuiResources_CheckBtlResourcesCompleted::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.SetResourcesActor
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResources_SetResourcesActor final
{
public:
	class ABtlGuiResourcesActor*                  Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_SetResourcesActor) == 0x000008, "Wrong alignment on BtlGuiResources_SetResourcesActor");
static_assert(sizeof(BtlGuiResources_SetResourcesActor) == 0x000008, "Wrong size on BtlGuiResources_SetResourcesActor");
static_assert(offsetof(BtlGuiResources_SetResourcesActor, Actor) == 0x000000, "Member 'BtlGuiResources_SetResourcesActor::Actor' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetAddResources
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiResources_GetAddResources final
{
public:
	TSubclassOf<class UObject>                    ResourcesClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OutResources;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetAddResources) == 0x000008, "Wrong alignment on BtlGuiResources_GetAddResources");
static_assert(sizeof(BtlGuiResources_GetAddResources) == 0x000010, "Wrong size on BtlGuiResources_GetAddResources");
static_assert(offsetof(BtlGuiResources_GetAddResources, ResourcesClass) == 0x000000, "Member 'BtlGuiResources_GetAddResources::ResourcesClass' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetAddResources, OutResources) == 0x000008, "Member 'BtlGuiResources_GetAddResources::OutResources' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetAddResourcesPure
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiResources_GetAddResourcesPure final
{
public:
	TSubclassOf<class UObject>                    ResourcesClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OutResources;                                      // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetAddResourcesPure) == 0x000008, "Wrong alignment on BtlGuiResources_GetAddResourcesPure");
static_assert(sizeof(BtlGuiResources_GetAddResourcesPure) == 0x000010, "Wrong size on BtlGuiResources_GetAddResourcesPure");
static_assert(offsetof(BtlGuiResources_GetAddResourcesPure, ResourcesClass) == 0x000000, "Member 'BtlGuiResources_GetAddResourcesPure::ResourcesClass' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetAddResourcesPure, OutResources) == 0x000008, "Member 'BtlGuiResources_GetAddResourcesPure::OutResources' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetAnalyzeAdjustedPosition
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetAnalyzeAdjustedPosition final
{
public:
	EBtlAnalyzeLayout                             LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetAnalyzeAdjustedPosition) == 0x000004, "Wrong alignment on BtlGuiResources_GetAnalyzeAdjustedPosition");
static_assert(sizeof(BtlGuiResources_GetAnalyzeAdjustedPosition) == 0x00000C, "Wrong size on BtlGuiResources_GetAnalyzeAdjustedPosition");
static_assert(offsetof(BtlGuiResources_GetAnalyzeAdjustedPosition, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetAnalyzeAdjustedPosition::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetAnalyzeAdjustedPosition, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetAnalyzeAdjustedPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetAnalyzeTextTextCollition
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetAnalyzeTextTextCollition final
{
public:
	EBtlAnalyzeTextLayout                         LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetAnalyzeTextTextCollition) == 0x000004, "Wrong alignment on BtlGuiResources_GetAnalyzeTextTextCollition");
static_assert(sizeof(BtlGuiResources_GetAnalyzeTextTextCollition) == 0x00000C, "Wrong size on BtlGuiResources_GetAnalyzeTextTextCollition");
static_assert(offsetof(BtlGuiResources_GetAnalyzeTextTextCollition, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetAnalyzeTextTextCollition::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetAnalyzeTextTextCollition, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetAnalyzeTextTextCollition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetAppRenderTarget
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiResources_GetAppRenderTarget final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetAppRenderTarget) == 0x000008, "Wrong alignment on BtlGuiResources_GetAppRenderTarget");
static_assert(sizeof(BtlGuiResources_GetAppRenderTarget) == 0x000010, "Wrong size on BtlGuiResources_GetAppRenderTarget");
static_assert(offsetof(BtlGuiResources_GetAppRenderTarget, Type) == 0x000000, "Member 'BtlGuiResources_GetAppRenderTarget::Type' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetAppRenderTarget, ReturnValue) == 0x000008, "Member 'BtlGuiResources_GetAppRenderTarget::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetCampSpr
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResources_GetCampSpr final
{
public:
	class USprAsset*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetCampSpr) == 0x000008, "Wrong alignment on BtlGuiResources_GetCampSpr");
static_assert(sizeof(BtlGuiResources_GetCampSpr) == 0x000008, "Wrong size on BtlGuiResources_GetCampSpr");
static_assert(offsetof(BtlGuiResources_GetCampSpr, ReturnValue) == 0x000000, "Member 'BtlGuiResources_GetCampSpr::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetDamageIconAdjustedPosition
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetDamageIconAdjustedPosition final
{
public:
	EBtlDamageIconLayout                          LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetDamageIconAdjustedPosition) == 0x000004, "Wrong alignment on BtlGuiResources_GetDamageIconAdjustedPosition");
static_assert(sizeof(BtlGuiResources_GetDamageIconAdjustedPosition) == 0x00000C, "Wrong size on BtlGuiResources_GetDamageIconAdjustedPosition");
static_assert(offsetof(BtlGuiResources_GetDamageIconAdjustedPosition, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetDamageIconAdjustedPosition::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetDamageIconAdjustedPosition, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetDamageIconAdjustedPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetGuardAdjustedPosition
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetGuardAdjustedPosition final
{
public:
	EBtlGuardLayout                               LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetGuardAdjustedPosition) == 0x000004, "Wrong alignment on BtlGuiResources_GetGuardAdjustedPosition");
static_assert(sizeof(BtlGuiResources_GetGuardAdjustedPosition) == 0x00000C, "Wrong size on BtlGuiResources_GetGuardAdjustedPosition");
static_assert(offsetof(BtlGuiResources_GetGuardAdjustedPosition, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetGuardAdjustedPosition::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetGuardAdjustedPosition, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetGuardAdjustedPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetItemIconSpr
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResources_GetItemIconSpr final
{
public:
	class USprAsset*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetItemIconSpr) == 0x000008, "Wrong alignment on BtlGuiResources_GetItemIconSpr");
static_assert(sizeof(BtlGuiResources_GetItemIconSpr) == 0x000008, "Wrong size on BtlGuiResources_GetItemIconSpr");
static_assert(offsetof(BtlGuiResources_GetItemIconSpr, ReturnValue) == 0x000000, "Member 'BtlGuiResources_GetItemIconSpr::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetItemSkillListTextCollision
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiResources_GetItemSkillListTextCollision final
{
public:
	EBtlItemSkillListTextLayout                   LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetItemSkillListTextCollision) == 0x000004, "Wrong alignment on BtlGuiResources_GetItemSkillListTextCollision");
static_assert(sizeof(BtlGuiResources_GetItemSkillListTextCollision) == 0x000010, "Wrong size on BtlGuiResources_GetItemSkillListTextCollision");
static_assert(offsetof(BtlGuiResources_GetItemSkillListTextCollision, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetItemSkillListTextCollision::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetItemSkillListTextCollision, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetItemSkillListTextCollision::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetKeyHelpSpr
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResources_GetKeyHelpSpr final
{
public:
	class USprAsset*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetKeyHelpSpr) == 0x000008, "Wrong alignment on BtlGuiResources_GetKeyHelpSpr");
static_assert(sizeof(BtlGuiResources_GetKeyHelpSpr) == 0x000008, "Wrong size on BtlGuiResources_GetKeyHelpSpr");
static_assert(offsetof(BtlGuiResources_GetKeyHelpSpr, ReturnValue) == 0x000000, "Member 'BtlGuiResources_GetKeyHelpSpr::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetOthersAdjustedPosition
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetOthersAdjustedPosition final
{
public:
	EBtlOthersLayout                              LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetOthersAdjustedPosition) == 0x000004, "Wrong alignment on BtlGuiResources_GetOthersAdjustedPosition");
static_assert(sizeof(BtlGuiResources_GetOthersAdjustedPosition) == 0x00000C, "Wrong size on BtlGuiResources_GetOthersAdjustedPosition");
static_assert(offsetof(BtlGuiResources_GetOthersAdjustedPosition, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetOthersAdjustedPosition::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetOthersAdjustedPosition, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetOthersAdjustedPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetPromiseAdjustedPosition
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetPromiseAdjustedPosition final
{
public:
	EBtlPromiseLayout                             LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetPromiseAdjustedPosition) == 0x000004, "Wrong alignment on BtlGuiResources_GetPromiseAdjustedPosition");
static_assert(sizeof(BtlGuiResources_GetPromiseAdjustedPosition) == 0x00000C, "Wrong size on BtlGuiResources_GetPromiseAdjustedPosition");
static_assert(offsetof(BtlGuiResources_GetPromiseAdjustedPosition, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetPromiseAdjustedPosition::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetPromiseAdjustedPosition, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetPromiseAdjustedPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetResources
// 0x0018 (0x0018 - 0x0000)
struct BtlGuiResources_GetResources final
{
public:
	class FName                                   ResourcesName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ResourcesClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OutResources;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetResources) == 0x000008, "Wrong alignment on BtlGuiResources_GetResources");
static_assert(sizeof(BtlGuiResources_GetResources) == 0x000018, "Wrong size on BtlGuiResources_GetResources");
static_assert(offsetof(BtlGuiResources_GetResources, ResourcesName) == 0x000000, "Member 'BtlGuiResources_GetResources::ResourcesName' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetResources, ResourcesClass) == 0x000008, "Member 'BtlGuiResources_GetResources::ResourcesClass' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetResources, OutResources) == 0x000010, "Member 'BtlGuiResources_GetResources::OutResources' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetResourcesPure
// 0x0018 (0x0018 - 0x0000)
struct BtlGuiResources_GetResourcesPure final
{
public:
	class FName                                   ResourcesName;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ResourcesClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                OutResources;                                      // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetResourcesPure) == 0x000008, "Wrong alignment on BtlGuiResources_GetResourcesPure");
static_assert(sizeof(BtlGuiResources_GetResourcesPure) == 0x000018, "Wrong size on BtlGuiResources_GetResourcesPure");
static_assert(offsetof(BtlGuiResources_GetResourcesPure, ResourcesName) == 0x000000, "Member 'BtlGuiResources_GetResourcesPure::ResourcesName' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetResourcesPure, ResourcesClass) == 0x000008, "Member 'BtlGuiResources_GetResourcesPure::ResourcesClass' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetResourcesPure, OutResources) == 0x000010, "Member 'BtlGuiResources_GetResourcesPure::OutResources' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetRushAdjustedPosition
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetRushAdjustedPosition final
{
public:
	EBtlRushLayout                                LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetRushAdjustedPosition) == 0x000004, "Wrong alignment on BtlGuiResources_GetRushAdjustedPosition");
static_assert(sizeof(BtlGuiResources_GetRushAdjustedPosition) == 0x00000C, "Wrong size on BtlGuiResources_GetRushAdjustedPosition");
static_assert(offsetof(BtlGuiResources_GetRushAdjustedPosition, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetRushAdjustedPosition::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetRushAdjustedPosition, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetRushAdjustedPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetTacticsAdjustedPosition
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetTacticsAdjustedPosition final
{
public:
	EBtlTacticsLayout                             LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetTacticsAdjustedPosition) == 0x000004, "Wrong alignment on BtlGuiResources_GetTacticsAdjustedPosition");
static_assert(sizeof(BtlGuiResources_GetTacticsAdjustedPosition) == 0x00000C, "Wrong size on BtlGuiResources_GetTacticsAdjustedPosition");
static_assert(offsetof(BtlGuiResources_GetTacticsAdjustedPosition, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetTacticsAdjustedPosition::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTacticsAdjustedPosition, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetTacticsAdjustedPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetTacticsCheckAdjustedPosition
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetTacticsCheckAdjustedPosition final
{
public:
	EBtlTacticsCheckLayout                        LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetTacticsCheckAdjustedPosition) == 0x000004, "Wrong alignment on BtlGuiResources_GetTacticsCheckAdjustedPosition");
static_assert(sizeof(BtlGuiResources_GetTacticsCheckAdjustedPosition) == 0x00000C, "Wrong size on BtlGuiResources_GetTacticsCheckAdjustedPosition");
static_assert(offsetof(BtlGuiResources_GetTacticsCheckAdjustedPosition, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetTacticsCheckAdjustedPosition::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTacticsCheckAdjustedPosition, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetTacticsCheckAdjustedPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetTacticsTextCollision
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetTacticsTextCollision final
{
public:
	EBtlTacticsListTextLayout                     LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetTacticsTextCollision) == 0x000004, "Wrong alignment on BtlGuiResources_GetTacticsTextCollision");
static_assert(sizeof(BtlGuiResources_GetTacticsTextCollision) == 0x00000C, "Wrong size on BtlGuiResources_GetTacticsTextCollision");
static_assert(offsetof(BtlGuiResources_GetTacticsTextCollision, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetTacticsTextCollision::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTacticsTextCollision, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetTacticsTextCollision::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetTargetInfoTextCollision
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetTargetInfoTextCollision final
{
public:
	EBtlTargetInfoTextLayout                      LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetTargetInfoTextCollision) == 0x000004, "Wrong alignment on BtlGuiResources_GetTargetInfoTextCollision");
static_assert(sizeof(BtlGuiResources_GetTargetInfoTextCollision) == 0x00000C, "Wrong size on BtlGuiResources_GetTargetInfoTextCollision");
static_assert(offsetof(BtlGuiResources_GetTargetInfoTextCollision, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetTargetInfoTextCollision::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTargetInfoTextCollision, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetTargetInfoTextCollision::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetTheurgiaAdjustedPosition
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetTheurgiaAdjustedPosition final
{
public:
	EBtlTheurgiaLayout                            LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetTheurgiaAdjustedPosition) == 0x000004, "Wrong alignment on BtlGuiResources_GetTheurgiaAdjustedPosition");
static_assert(sizeof(BtlGuiResources_GetTheurgiaAdjustedPosition) == 0x00000C, "Wrong size on BtlGuiResources_GetTheurgiaAdjustedPosition");
static_assert(offsetof(BtlGuiResources_GetTheurgiaAdjustedPosition, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetTheurgiaAdjustedPosition::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTheurgiaAdjustedPosition, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetTheurgiaAdjustedPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetTheurgiaTextPos
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetTheurgiaTextPos final
{
public:
	EUITheurgiaTextPosLayout                      LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetTheurgiaTextPos) == 0x000004, "Wrong alignment on BtlGuiResources_GetTheurgiaTextPos");
static_assert(sizeof(BtlGuiResources_GetTheurgiaTextPos) == 0x00000C, "Wrong size on BtlGuiResources_GetTheurgiaTextPos");
static_assert(offsetof(BtlGuiResources_GetTheurgiaTextPos, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetTheurgiaTextPos::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTheurgiaTextPos, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetTheurgiaTextPos::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetTheurgiaTextRow
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResources_GetTheurgiaTextRow final
{
public:
	EUITheurgiaTextRowLayout                      LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetTheurgiaTextRow) == 0x000004, "Wrong alignment on BtlGuiResources_GetTheurgiaTextRow");
static_assert(sizeof(BtlGuiResources_GetTheurgiaTextRow) == 0x000008, "Wrong size on BtlGuiResources_GetTheurgiaTextRow");
static_assert(offsetof(BtlGuiResources_GetTheurgiaTextRow, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetTheurgiaTextRow::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTheurgiaTextRow, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetTheurgiaTextRow::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetTheurgiaTextTextCollition
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetTheurgiaTextTextCollition final
{
public:
	EUITheurgiaTextLayout                         LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetTheurgiaTextTextCollition) == 0x000004, "Wrong alignment on BtlGuiResources_GetTheurgiaTextTextCollition");
static_assert(sizeof(BtlGuiResources_GetTheurgiaTextTextCollition) == 0x00000C, "Wrong size on BtlGuiResources_GetTheurgiaTextTextCollition");
static_assert(offsetof(BtlGuiResources_GetTheurgiaTextTextCollition, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetTheurgiaTextTextCollition::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTheurgiaTextTextCollition, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetTheurgiaTextTextCollition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetTopAdjustedPosition
// 0x000C (0x000C - 0x0000)
struct BtlGuiResources_GetTopAdjustedPosition final
{
public:
	EBtlTopLayout                                 LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetTopAdjustedPosition) == 0x000004, "Wrong alignment on BtlGuiResources_GetTopAdjustedPosition");
static_assert(sizeof(BtlGuiResources_GetTopAdjustedPosition) == 0x00000C, "Wrong size on BtlGuiResources_GetTopAdjustedPosition");
static_assert(offsetof(BtlGuiResources_GetTopAdjustedPosition, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetTopAdjustedPosition::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTopAdjustedPosition, ReturnValue) == 0x000004, "Member 'BtlGuiResources_GetTopAdjustedPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiResources.GetTouchCollData
// 0x0018 (0x0018 - 0x0000)
struct BtlGuiResources_GetTouchCollData final
{
public:
	EBtlTouchCollisionLayout                      LayoutId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PosX;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PosY;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_GetTouchCollData) == 0x000004, "Wrong alignment on BtlGuiResources_GetTouchCollData");
static_assert(sizeof(BtlGuiResources_GetTouchCollData) == 0x000018, "Wrong size on BtlGuiResources_GetTouchCollData");
static_assert(offsetof(BtlGuiResources_GetTouchCollData, LayoutId) == 0x000000, "Member 'BtlGuiResources_GetTouchCollData::LayoutId' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTouchCollData, PosX) == 0x000004, "Member 'BtlGuiResources_GetTouchCollData::PosX' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTouchCollData, PosY) == 0x000008, "Member 'BtlGuiResources_GetTouchCollData::PosY' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTouchCollData, Angle) == 0x00000C, "Member 'BtlGuiResources_GetTouchCollData::Angle' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTouchCollData, Width) == 0x000010, "Member 'BtlGuiResources_GetTouchCollData::Width' has a wrong offset!");
static_assert(offsetof(BtlGuiResources_GetTouchCollData, Height) == 0x000014, "Member 'BtlGuiResources_GetTouchCollData::Height' has a wrong offset!");

// Function xrd777.BtlGuiResources.InitializeLayoutDebugMenu
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiResources_InitializeLayoutDebugMenu final
{
public:
	class ABtlGuiStateManager*                    StateManager;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_InitializeLayoutDebugMenu) == 0x000008, "Wrong alignment on BtlGuiResources_InitializeLayoutDebugMenu");
static_assert(sizeof(BtlGuiResources_InitializeLayoutDebugMenu) == 0x000008, "Wrong size on BtlGuiResources_InitializeLayoutDebugMenu");
static_assert(offsetof(BtlGuiResources_InitializeLayoutDebugMenu, StateManager) == 0x000000, "Member 'BtlGuiResources_InitializeLayoutDebugMenu::StateManager' has a wrong offset!");

// Function xrd777.BtlGuiResources.RequestAddResources
// 0x0010 (0x0010 - 0x0000)
struct BtlGuiResources_RequestAddResources final
{
public:
	class FString                                 ResourcesPath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiResources_RequestAddResources) == 0x000008, "Wrong alignment on BtlGuiResources_RequestAddResources");
static_assert(sizeof(BtlGuiResources_RequestAddResources) == 0x000010, "Wrong size on BtlGuiResources_RequestAddResources");
static_assert(offsetof(BtlGuiResources_RequestAddResources, ResourcesPath) == 0x000000, "Member 'BtlGuiResources_RequestAddResources::ResourcesPath' has a wrong offset!");

// Function xrd777.BtlGuiRushEffect.AnimationPause
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiRushEffect_AnimationPause final
{
public:
	bool                                          Pause;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiRushEffect_AnimationPause) == 0x000001, "Wrong alignment on BtlGuiRushEffect_AnimationPause");
static_assert(sizeof(BtlGuiRushEffect_AnimationPause) == 0x000001, "Wrong size on BtlGuiRushEffect_AnimationPause");
static_assert(offsetof(BtlGuiRushEffect_AnimationPause, Pause) == 0x000000, "Member 'BtlGuiRushEffect_AnimationPause::Pause' has a wrong offset!");

// Function xrd777.BtlGuiRushEffect.SetAppCanvas
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiRushEffect_SetAppCanvas final
{
public:
	int32                                         AppCanvas;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiRushEffect_SetAppCanvas) == 0x000004, "Wrong alignment on BtlGuiRushEffect_SetAppCanvas");
static_assert(sizeof(BtlGuiRushEffect_SetAppCanvas) == 0x000004, "Wrong size on BtlGuiRushEffect_SetAppCanvas");
static_assert(offsetof(BtlGuiRushEffect_SetAppCanvas, AppCanvas) == 0x000000, "Member 'BtlGuiRushEffect_SetAppCanvas::AppCanvas' has a wrong offset!");

// Function xrd777.BtlGuiRushEffect.SetBtlFlag
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiRushEffect_SetBtlFlag final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiRushEffect_SetBtlFlag) == 0x000001, "Wrong alignment on BtlGuiRushEffect_SetBtlFlag");
static_assert(sizeof(BtlGuiRushEffect_SetBtlFlag) == 0x000001, "Wrong size on BtlGuiRushEffect_SetBtlFlag");
static_assert(offsetof(BtlGuiRushEffect_SetBtlFlag, Flag) == 0x000000, "Member 'BtlGuiRushEffect_SetBtlFlag::Flag' has a wrong offset!");

// Function xrd777.BtlGuiRushEffect.SetEffect
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiRushEffect_SetEffect final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiRushEffect_SetEffect) == 0x000001, "Wrong alignment on BtlGuiRushEffect_SetEffect");
static_assert(sizeof(BtlGuiRushEffect_SetEffect) == 0x000001, "Wrong size on BtlGuiRushEffect_SetEffect");
static_assert(offsetof(BtlGuiRushEffect_SetEffect, Enable) == 0x000000, "Member 'BtlGuiRushEffect_SetEffect::Enable' has a wrong offset!");

// Function xrd777.BtlGuiRushEffect.SetOT
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiRushEffect_SetOT final
{
public:
	int32                                         OT;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiRushEffect_SetOT) == 0x000004, "Wrong alignment on BtlGuiRushEffect_SetOT");
static_assert(sizeof(BtlGuiRushEffect_SetOT) == 0x000004, "Wrong size on BtlGuiRushEffect_SetOT");
static_assert(offsetof(BtlGuiRushEffect_SetOT, OT) == 0x000000, "Member 'BtlGuiRushEffect_SetOT::OT' has a wrong offset!");

// Function xrd777.BtlGuiStateManager.ChangePrevState
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiStateManager_ChangePrevState final
{
public:
	bool                                          SendFlag;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SendNumber;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiStateManager_ChangePrevState) == 0x000004, "Wrong alignment on BtlGuiStateManager_ChangePrevState");
static_assert(sizeof(BtlGuiStateManager_ChangePrevState) == 0x000008, "Wrong size on BtlGuiStateManager_ChangePrevState");
static_assert(offsetof(BtlGuiStateManager_ChangePrevState, SendFlag) == 0x000000, "Member 'BtlGuiStateManager_ChangePrevState::SendFlag' has a wrong offset!");
static_assert(offsetof(BtlGuiStateManager_ChangePrevState, SendNumber) == 0x000004, "Member 'BtlGuiStateManager_ChangePrevState::SendNumber' has a wrong offset!");

// Function xrd777.BtlGuiStateManager.GetDebugDamageTextIdx
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiStateManager_GetDebugDamageTextIdx final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiStateManager_GetDebugDamageTextIdx) == 0x000004, "Wrong alignment on BtlGuiStateManager_GetDebugDamageTextIdx");
static_assert(sizeof(BtlGuiStateManager_GetDebugDamageTextIdx) == 0x000004, "Wrong size on BtlGuiStateManager_GetDebugDamageTextIdx");
static_assert(offsetof(BtlGuiStateManager_GetDebugDamageTextIdx, ReturnValue) == 0x000000, "Member 'BtlGuiStateManager_GetDebugDamageTextIdx::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiStateManager.GetDebugJyokyoHelpID
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiStateManager_GetDebugJyokyoHelpID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiStateManager_GetDebugJyokyoHelpID) == 0x000004, "Wrong alignment on BtlGuiStateManager_GetDebugJyokyoHelpID");
static_assert(sizeof(BtlGuiStateManager_GetDebugJyokyoHelpID) == 0x000004, "Wrong size on BtlGuiStateManager_GetDebugJyokyoHelpID");
static_assert(offsetof(BtlGuiStateManager_GetDebugJyokyoHelpID, ReturnValue) == 0x000000, "Member 'BtlGuiStateManager_GetDebugJyokyoHelpID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiStateManager.GetDebugSkillNamePanelID
// 0x0004 (0x0004 - 0x0000)
struct BtlGuiStateManager_GetDebugSkillNamePanelID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiStateManager_GetDebugSkillNamePanelID) == 0x000004, "Wrong alignment on BtlGuiStateManager_GetDebugSkillNamePanelID");
static_assert(sizeof(BtlGuiStateManager_GetDebugSkillNamePanelID) == 0x000004, "Wrong size on BtlGuiStateManager_GetDebugSkillNamePanelID");
static_assert(offsetof(BtlGuiStateManager_GetDebugSkillNamePanelID, ReturnValue) == 0x000000, "Member 'BtlGuiStateManager_GetDebugSkillNamePanelID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiStateManager.GetPrevState
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiStateManager_GetPrevState final
{
public:
	EBtlGuiState                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiStateManager_GetPrevState) == 0x000001, "Wrong alignment on BtlGuiStateManager_GetPrevState");
static_assert(sizeof(BtlGuiStateManager_GetPrevState) == 0x000001, "Wrong size on BtlGuiStateManager_GetPrevState");
static_assert(offsetof(BtlGuiStateManager_GetPrevState, ReturnValue) == 0x000000, "Member 'BtlGuiStateManager_GetPrevState::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiStateManager.GetState
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiStateManager_GetState final
{
public:
	EBtlGuiState                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiStateManager_GetState) == 0x000001, "Wrong alignment on BtlGuiStateManager_GetState");
static_assert(sizeof(BtlGuiStateManager_GetState) == 0x000001, "Wrong size on BtlGuiStateManager_GetState");
static_assert(offsetof(BtlGuiStateManager_GetState, ReturnValue) == 0x000000, "Member 'BtlGuiStateManager_GetState::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiStateManager.IsLayoutDebugMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiStateManager_IsLayoutDebugMenuOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiStateManager_IsLayoutDebugMenuOpen) == 0x000001, "Wrong alignment on BtlGuiStateManager_IsLayoutDebugMenuOpen");
static_assert(sizeof(BtlGuiStateManager_IsLayoutDebugMenuOpen) == 0x000001, "Wrong size on BtlGuiStateManager_IsLayoutDebugMenuOpen");
static_assert(offsetof(BtlGuiStateManager_IsLayoutDebugMenuOpen, ReturnValue) == 0x000000, "Member 'BtlGuiStateManager_IsLayoutDebugMenuOpen::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiStateManager.OnDebugRushDraw
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiStateManager_OnDebugRushDraw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiStateManager_OnDebugRushDraw) == 0x000001, "Wrong alignment on BtlGuiStateManager_OnDebugRushDraw");
static_assert(sizeof(BtlGuiStateManager_OnDebugRushDraw) == 0x000001, "Wrong size on BtlGuiStateManager_OnDebugRushDraw");
static_assert(offsetof(BtlGuiStateManager_OnDebugRushDraw, ReturnValue) == 0x000000, "Member 'BtlGuiStateManager_OnDebugRushDraw::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiStateManager.OnDebugRushStopMaskAnimPause
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiStateManager_OnDebugRushStopMaskAnimPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiStateManager_OnDebugRushStopMaskAnimPause) == 0x000001, "Wrong alignment on BtlGuiStateManager_OnDebugRushStopMaskAnimPause");
static_assert(sizeof(BtlGuiStateManager_OnDebugRushStopMaskAnimPause) == 0x000001, "Wrong size on BtlGuiStateManager_OnDebugRushStopMaskAnimPause");
static_assert(offsetof(BtlGuiStateManager_OnDebugRushStopMaskAnimPause, ReturnValue) == 0x000000, "Member 'BtlGuiStateManager_OnDebugRushStopMaskAnimPause::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiStateManager.OnDebugRushStopMaskVisible
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiStateManager_OnDebugRushStopMaskVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiStateManager_OnDebugRushStopMaskVisible) == 0x000001, "Wrong alignment on BtlGuiStateManager_OnDebugRushStopMaskVisible");
static_assert(sizeof(BtlGuiStateManager_OnDebugRushStopMaskVisible) == 0x000001, "Wrong size on BtlGuiStateManager_OnDebugRushStopMaskVisible");
static_assert(offsetof(BtlGuiStateManager_OnDebugRushStopMaskVisible, ReturnValue) == 0x000000, "Member 'BtlGuiStateManager_OnDebugRushStopMaskVisible::ReturnValue' has a wrong offset!");

// Function xrd777.BtlGuiStateManager.SetPrevState
// 0x0001 (0x0001 - 0x0000)
struct BtlGuiStateManager_SetPrevState final
{
public:
	EBtlGuiState                                  State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiStateManager_SetPrevState) == 0x000001, "Wrong alignment on BtlGuiStateManager_SetPrevState");
static_assert(sizeof(BtlGuiStateManager_SetPrevState) == 0x000001, "Wrong size on BtlGuiStateManager_SetPrevState");
static_assert(offsetof(BtlGuiStateManager_SetPrevState, State) == 0x000000, "Member 'BtlGuiStateManager_SetPrevState::State' has a wrong offset!");

// Function xrd777.BtlGuiStateManager.SetState
// 0x0008 (0x0008 - 0x0000)
struct BtlGuiStateManager_SetState final
{
public:
	EBtlGuiState                                  State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SendFlag;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SendNumber;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlGuiStateManager_SetState) == 0x000004, "Wrong alignment on BtlGuiStateManager_SetState");
static_assert(sizeof(BtlGuiStateManager_SetState) == 0x000008, "Wrong size on BtlGuiStateManager_SetState");
static_assert(offsetof(BtlGuiStateManager_SetState, State) == 0x000000, "Member 'BtlGuiStateManager_SetState::State' has a wrong offset!");
static_assert(offsetof(BtlGuiStateManager_SetState, SendFlag) == 0x000001, "Member 'BtlGuiStateManager_SetState::SendFlag' has a wrong offset!");
static_assert(offsetof(BtlGuiStateManager_SetState, SendNumber) == 0x000004, "Member 'BtlGuiStateManager_SetState::SendNumber' has a wrong offset!");

// Function xrd777.BtlInputComponent.BtlInputCheckComponentEnable
// 0x0001 (0x0001 - 0x0000)
struct BtlInputComponent_BtlInputCheckComponentEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlInputComponent_BtlInputCheckComponentEnable) == 0x000001, "Wrong alignment on BtlInputComponent_BtlInputCheckComponentEnable");
static_assert(sizeof(BtlInputComponent_BtlInputCheckComponentEnable) == 0x000001, "Wrong size on BtlInputComponent_BtlInputCheckComponentEnable");
static_assert(offsetof(BtlInputComponent_BtlInputCheckComponentEnable, Enable) == 0x000000, "Member 'BtlInputComponent_BtlInputCheckComponentEnable::Enable' has a wrong offset!");

// Function xrd777.BtlInputComponent.BtlInputSetComponentEnable
// 0x0001 (0x0001 - 0x0000)
struct BtlInputComponent_BtlInputSetComponentEnable final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlInputComponent_BtlInputSetComponentEnable) == 0x000001, "Wrong alignment on BtlInputComponent_BtlInputSetComponentEnable");
static_assert(sizeof(BtlInputComponent_BtlInputSetComponentEnable) == 0x000001, "Wrong size on BtlInputComponent_BtlInputSetComponentEnable");
static_assert(offsetof(BtlInputComponent_BtlInputSetComponentEnable, IsEnable) == 0x000000, "Member 'BtlInputComponent_BtlInputSetComponentEnable::IsEnable' has a wrong offset!");

// Function xrd777.BtlInputComponent.BtlInputAlwaysEnable
// 0x0001 (0x0001 - 0x0000)
struct BtlInputComponent_BtlInputAlwaysEnable final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlInputComponent_BtlInputAlwaysEnable) == 0x000001, "Wrong alignment on BtlInputComponent_BtlInputAlwaysEnable");
static_assert(sizeof(BtlInputComponent_BtlInputAlwaysEnable) == 0x000001, "Wrong size on BtlInputComponent_BtlInputAlwaysEnable");
static_assert(offsetof(BtlInputComponent_BtlInputAlwaysEnable, IsEnable) == 0x000000, "Member 'BtlInputComponent_BtlInputAlwaysEnable::IsEnable' has a wrong offset!");

// Function xrd777.BtlInputComponent.BtlInputCheckCtrlEnable
// 0x0001 (0x0001 - 0x0000)
struct BtlInputComponent_BtlInputCheckCtrlEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlInputComponent_BtlInputCheckCtrlEnable) == 0x000001, "Wrong alignment on BtlInputComponent_BtlInputCheckCtrlEnable");
static_assert(sizeof(BtlInputComponent_BtlInputCheckCtrlEnable) == 0x000001, "Wrong size on BtlInputComponent_BtlInputCheckCtrlEnable");
static_assert(offsetof(BtlInputComponent_BtlInputCheckCtrlEnable, Enable) == 0x000000, "Member 'BtlInputComponent_BtlInputCheckCtrlEnable::Enable' has a wrong offset!");

// Function xrd777.BtlInputComponent.BtlInputKeyLock
// 0x0010 (0x0010 - 0x0000)
struct BtlInputComponent_BtlInputKeyLock final
{
public:
	TArray<EBtlInputKeyboardEnum>                 LockKey;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlInputComponent_BtlInputKeyLock) == 0x000008, "Wrong alignment on BtlInputComponent_BtlInputKeyLock");
static_assert(sizeof(BtlInputComponent_BtlInputKeyLock) == 0x000010, "Wrong size on BtlInputComponent_BtlInputKeyLock");
static_assert(offsetof(BtlInputComponent_BtlInputKeyLock, LockKey) == 0x000000, "Member 'BtlInputComponent_BtlInputKeyLock::LockKey' has a wrong offset!");

// Function xrd777.BtlInputComponent.BtlInputSetCtrlEnable
// 0x0001 (0x0001 - 0x0000)
struct BtlInputComponent_BtlInputSetCtrlEnable final
{
public:
	bool                                          IsEnable;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlInputComponent_BtlInputSetCtrlEnable) == 0x000001, "Wrong alignment on BtlInputComponent_BtlInputSetCtrlEnable");
static_assert(sizeof(BtlInputComponent_BtlInputSetCtrlEnable) == 0x000001, "Wrong size on BtlInputComponent_BtlInputSetCtrlEnable");
static_assert(offsetof(BtlInputComponent_BtlInputSetCtrlEnable, IsEnable) == 0x000000, "Member 'BtlInputComponent_BtlInputSetCtrlEnable::IsEnable' has a wrong offset!");

// Function xrd777.BtlInputComponent.CallInputTrigKeyboard
// 0x0001 (0x0001 - 0x0000)
struct BtlInputComponent_CallInputTrigKeyboard final
{
public:
	EBtlInputKeyboardEnum                         Key;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlInputComponent_CallInputTrigKeyboard) == 0x000001, "Wrong alignment on BtlInputComponent_CallInputTrigKeyboard");
static_assert(sizeof(BtlInputComponent_CallInputTrigKeyboard) == 0x000001, "Wrong size on BtlInputComponent_CallInputTrigKeyboard");
static_assert(offsetof(BtlInputComponent_CallInputTrigKeyboard, Key) == 0x000000, "Member 'BtlInputComponent_CallInputTrigKeyboard::Key' has a wrong offset!");

// Function xrd777.BtlControlBase.CheckBattleInProgress
// 0x0001 (0x0001 - 0x0000)
struct BtlControlBase_CheckBattleInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlControlBase_CheckBattleInProgress) == 0x000001, "Wrong alignment on BtlControlBase_CheckBattleInProgress");
static_assert(sizeof(BtlControlBase_CheckBattleInProgress) == 0x000001, "Wrong size on BtlControlBase_CheckBattleInProgress");
static_assert(offsetof(BtlControlBase_CheckBattleInProgress, ReturnValue) == 0x000000, "Member 'BtlControlBase_CheckBattleInProgress::ReturnValue' has a wrong offset!");

// Function xrd777.BtlControlBase.Encount
// 0x0024 (0x0024 - 0x0000)
struct BtlControlBase_Encount final
{
public:
	struct FBtlEncountParam                       EncountParam;                                      // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlControlBase_Encount) == 0x000004, "Wrong alignment on BtlControlBase_Encount");
static_assert(sizeof(BtlControlBase_Encount) == 0x000024, "Wrong size on BtlControlBase_Encount");
static_assert(offsetof(BtlControlBase_Encount, EncountParam) == 0x000000, "Member 'BtlControlBase_Encount::EncountParam' has a wrong offset!");

// Function xrd777.BtlControlBase.PreLoad
// 0x0028 (0x0028 - 0x0000)
struct BtlControlBase_PreLoad final
{
public:
	struct FBtlEncountParam                       EncountParam;                                      // 0x0000(0x0024)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlControlBase_PreLoad) == 0x000004, "Wrong alignment on BtlControlBase_PreLoad");
static_assert(sizeof(BtlControlBase_PreLoad) == 0x000028, "Wrong size on BtlControlBase_PreLoad");
static_assert(offsetof(BtlControlBase_PreLoad, EncountParam) == 0x000000, "Member 'BtlControlBase_PreLoad::EncountParam' has a wrong offset!");
static_assert(offsetof(BtlControlBase_PreLoad, ReturnValue) == 0x000024, "Member 'BtlControlBase_PreLoad::ReturnValue' has a wrong offset!");

// Function xrd777.BtlControlBase.SetGamePaused
// 0x0004 (0x0004 - 0x0000)
struct BtlControlBase_SetGamePaused final
{
public:
	int32                                         IsPause;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlControlBase_SetGamePaused) == 0x000004, "Wrong alignment on BtlControlBase_SetGamePaused");
static_assert(sizeof(BtlControlBase_SetGamePaused) == 0x000004, "Wrong size on BtlControlBase_SetGamePaused");
static_assert(offsetof(BtlControlBase_SetGamePaused, IsPause) == 0x000000, "Member 'BtlControlBase_SetGamePaused::IsPause' has a wrong offset!");

// Function xrd777.BtlControlBase.SyncBattleFinish
// 0x0001 (0x0001 - 0x0000)
struct BtlControlBase_SyncBattleFinish final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlControlBase_SyncBattleFinish) == 0x000001, "Wrong alignment on BtlControlBase_SyncBattleFinish");
static_assert(sizeof(BtlControlBase_SyncBattleFinish) == 0x000001, "Wrong size on BtlControlBase_SyncBattleFinish");
static_assert(offsetof(BtlControlBase_SyncBattleFinish, ReturnValue) == 0x000000, "Member 'BtlControlBase_SyncBattleFinish::ReturnValue' has a wrong offset!");

// Function xrd777.BtlPhase.CreateNextPhase
// 0x0010 (0x0010 - 0x0000)
struct BtlPhase_CreateNextPhase final
{
public:
	EBtlPhaseType                                 Phase;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlPhase*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPhase_CreateNextPhase) == 0x000008, "Wrong alignment on BtlPhase_CreateNextPhase");
static_assert(sizeof(BtlPhase_CreateNextPhase) == 0x000010, "Wrong size on BtlPhase_CreateNextPhase");
static_assert(offsetof(BtlPhase_CreateNextPhase, Phase) == 0x000000, "Member 'BtlPhase_CreateNextPhase::Phase' has a wrong offset!");
static_assert(offsetof(BtlPhase_CreateNextPhase, ReturnValue) == 0x000008, "Member 'BtlPhase_CreateNextPhase::ReturnValue' has a wrong offset!");

// Function xrd777.BtlPhase.GetNextPhase
// 0x0008 (0x0008 - 0x0000)
struct BtlPhase_GetNextPhase final
{
public:
	class ABtlPhase*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPhase_GetNextPhase) == 0x000008, "Wrong alignment on BtlPhase_GetNextPhase");
static_assert(sizeof(BtlPhase_GetNextPhase) == 0x000008, "Wrong size on BtlPhase_GetNextPhase");
static_assert(offsetof(BtlPhase_GetNextPhase, ReturnValue) == 0x000000, "Member 'BtlPhase_GetNextPhase::ReturnValue' has a wrong offset!");

// Function xrd777.BtlPhase.GetNextPhaseInBP
// 0x0008 (0x0008 - 0x0000)
struct BtlPhase_GetNextPhaseInBP final
{
public:
	class ABtlPhase*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPhase_GetNextPhaseInBP) == 0x000008, "Wrong alignment on BtlPhase_GetNextPhaseInBP");
static_assert(sizeof(BtlPhase_GetNextPhaseInBP) == 0x000008, "Wrong size on BtlPhase_GetNextPhaseInBP");
static_assert(offsetof(BtlPhase_GetNextPhaseInBP, ReturnValue) == 0x000000, "Member 'BtlPhase_GetNextPhaseInBP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlPhase.SetNowBattlePhaseName
// 0x0001 (0x0001 - 0x0000)
struct BtlPhase_SetNowBattlePhaseName final
{
public:
	EBattlePhaseName                              NewPhaseName;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPhase_SetNowBattlePhaseName) == 0x000001, "Wrong alignment on BtlPhase_SetNowBattlePhaseName");
static_assert(sizeof(BtlPhase_SetNowBattlePhaseName) == 0x000001, "Wrong size on BtlPhase_SetNowBattlePhaseName");
static_assert(offsetof(BtlPhase_SetNowBattlePhaseName, NewPhaseName) == 0x000000, "Member 'BtlPhase_SetNowBattlePhaseName::NewPhaseName' has a wrong offset!");

// Function xrd777.BtlPhase.SyncProgressTimingInBP
// 0x0001 (0x0001 - 0x0000)
struct BtlPhase_SyncProgressTimingInBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPhase_SyncProgressTimingInBP) == 0x000001, "Wrong alignment on BtlPhase_SyncProgressTimingInBP");
static_assert(sizeof(BtlPhase_SyncProgressTimingInBP) == 0x000001, "Wrong size on BtlPhase_SyncProgressTimingInBP");
static_assert(offsetof(BtlPhase_SyncProgressTimingInBP, ReturnValue) == 0x000000, "Member 'BtlPhase_SyncProgressTimingInBP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlPhase.CheckProgressNextPhaseInBP
// 0x0001 (0x0001 - 0x0000)
struct BtlPhase_CheckProgressNextPhaseInBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPhase_CheckProgressNextPhaseInBP) == 0x000001, "Wrong alignment on BtlPhase_CheckProgressNextPhaseInBP");
static_assert(sizeof(BtlPhase_CheckProgressNextPhaseInBP) == 0x000001, "Wrong size on BtlPhase_CheckProgressNextPhaseInBP");
static_assert(offsetof(BtlPhase_CheckProgressNextPhaseInBP, ReturnValue) == 0x000000, "Member 'BtlPhase_CheckProgressNextPhaseInBP::ReturnValue' has a wrong offset!");

// Function xrd777.BtlPhaseVictory.SetResultType
// 0x0001 (0x0001 - 0x0000)
struct BtlPhaseVictory_SetResultType final
{
public:
	EBtlResultType                                Resulttype;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPhaseVictory_SetResultType) == 0x000001, "Wrong alignment on BtlPhaseVictory_SetResultType");
static_assert(sizeof(BtlPhaseVictory_SetResultType) == 0x000001, "Wrong size on BtlPhaseVictory_SetResultType");
static_assert(offsetof(BtlPhaseVictory_SetResultType, Resulttype) == 0x000000, "Member 'BtlPhaseVictory_SetResultType::Resulttype' has a wrong offset!");

// Function xrd777.BtlPhaseVictory.GetResultType
// 0x0001 (0x0001 - 0x0000)
struct BtlPhaseVictory_GetResultType final
{
public:
	EBtlResultType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPhaseVictory_GetResultType) == 0x000001, "Wrong alignment on BtlPhaseVictory_GetResultType");
static_assert(sizeof(BtlPhaseVictory_GetResultType) == 0x000001, "Wrong size on BtlPhaseVictory_GetResultType");
static_assert(offsetof(BtlPhaseVictory_GetResultType, ReturnValue) == 0x000000, "Member 'BtlPhaseVictory_GetResultType::ReturnValue' has a wrong offset!");

// Function xrd777.BtlPhaseResult.CheckAlreadyStartResult
// 0x0001 (0x0001 - 0x0000)
struct BtlPhaseResult_CheckAlreadyStartResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPhaseResult_CheckAlreadyStartResult) == 0x000001, "Wrong alignment on BtlPhaseResult_CheckAlreadyStartResult");
static_assert(sizeof(BtlPhaseResult_CheckAlreadyStartResult) == 0x000001, "Wrong size on BtlPhaseResult_CheckAlreadyStartResult");
static_assert(offsetof(BtlPhaseResult_CheckAlreadyStartResult, ReturnValue) == 0x000000, "Member 'BtlPhaseResult_CheckAlreadyStartResult::ReturnValue' has a wrong offset!");

// Function xrd777.BtlPhaseResult.SetHaveVictorySequence
// 0x0001 (0x0001 - 0x0000)
struct BtlPhaseResult_SetHaveVictorySequence final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPhaseResult_SetHaveVictorySequence) == 0x000001, "Wrong alignment on BtlPhaseResult_SetHaveVictorySequence");
static_assert(sizeof(BtlPhaseResult_SetHaveVictorySequence) == 0x000001, "Wrong size on BtlPhaseResult_SetHaveVictorySequence");
static_assert(offsetof(BtlPhaseResult_SetHaveVictorySequence, Flag) == 0x000000, "Member 'BtlPhaseResult_SetHaveVictorySequence::Flag' has a wrong offset!");

// Function xrd777.BtlPhaseResult.SetStartResultInVictory
// 0x0001 (0x0001 - 0x0000)
struct BtlPhaseResult_SetStartResultInVictory final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlPhaseResult_SetStartResultInVictory) == 0x000001, "Wrong alignment on BtlPhaseResult_SetStartResultInVictory");
static_assert(sizeof(BtlPhaseResult_SetStartResultInVictory) == 0x000001, "Wrong size on BtlPhaseResult_SetStartResultInVictory");
static_assert(offsetof(BtlPhaseResult_SetStartResultInVictory, Flag) == 0x000000, "Member 'BtlPhaseResult_SetStartResultInVictory::Flag' has a wrong offset!");

// Function xrd777.BtlResidentDataBase.CheckLoaded
// 0x0002 (0x0002 - 0x0000)
struct BtlResidentDataBase_CheckLoaded final
{
public:
	EBtlResidentResource                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResidentDataBase_CheckLoaded) == 0x000001, "Wrong alignment on BtlResidentDataBase_CheckLoaded");
static_assert(sizeof(BtlResidentDataBase_CheckLoaded) == 0x000002, "Wrong size on BtlResidentDataBase_CheckLoaded");
static_assert(offsetof(BtlResidentDataBase_CheckLoaded, Type) == 0x000000, "Member 'BtlResidentDataBase_CheckLoaded::Type' has a wrong offset!");
static_assert(offsetof(BtlResidentDataBase_CheckLoaded, ReturnValue) == 0x000001, "Member 'BtlResidentDataBase_CheckLoaded::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResidentDataBase.GetEffect
// 0x0010 (0x0010 - 0x0000)
struct BtlResidentDataBase_GetEffect final
{
public:
	EBtlResidentResource                          Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResidentDataBase_GetEffect) == 0x000008, "Wrong alignment on BtlResidentDataBase_GetEffect");
static_assert(sizeof(BtlResidentDataBase_GetEffect) == 0x000010, "Wrong size on BtlResidentDataBase_GetEffect");
static_assert(offsetof(BtlResidentDataBase_GetEffect, Type) == 0x000000, "Member 'BtlResidentDataBase_GetEffect::Type' has a wrong offset!");
static_assert(offsetof(BtlResidentDataBase_GetEffect, ReturnValue) == 0x000008, "Member 'BtlResidentDataBase_GetEffect::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultSceneBase.CheckCompleteLoadResource
// 0x0001 (0x0001 - 0x0000)
struct BtlResultSceneBase_CheckCompleteLoadResource final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultSceneBase_CheckCompleteLoadResource) == 0x000001, "Wrong alignment on BtlResultSceneBase_CheckCompleteLoadResource");
static_assert(sizeof(BtlResultSceneBase_CheckCompleteLoadResource) == 0x000001, "Wrong size on BtlResultSceneBase_CheckCompleteLoadResource");
static_assert(offsetof(BtlResultSceneBase_CheckCompleteLoadResource, ReturnValue) == 0x000000, "Member 'BtlResultSceneBase_CheckCompleteLoadResource::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultSceneBase.CheckEndEntryScene
// 0x0001 (0x0001 - 0x0000)
struct BtlResultSceneBase_CheckEndEntryScene final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultSceneBase_CheckEndEntryScene) == 0x000001, "Wrong alignment on BtlResultSceneBase_CheckEndEntryScene");
static_assert(sizeof(BtlResultSceneBase_CheckEndEntryScene) == 0x000001, "Wrong size on BtlResultSceneBase_CheckEndEntryScene");
static_assert(offsetof(BtlResultSceneBase_CheckEndEntryScene, ReturnValue) == 0x000000, "Member 'BtlResultSceneBase_CheckEndEntryScene::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.CalcOpenMajorArcanaMsgInfo
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_CalcOpenMajorArcanaMsgInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_CalcOpenMajorArcanaMsgInfo) == 0x000001, "Wrong alignment on BtlResultUIBase_CalcOpenMajorArcanaMsgInfo");
static_assert(sizeof(BtlResultUIBase_CalcOpenMajorArcanaMsgInfo) == 0x000001, "Wrong size on BtlResultUIBase_CalcOpenMajorArcanaMsgInfo");
static_assert(offsetof(BtlResultUIBase_CalcOpenMajorArcanaMsgInfo, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_CalcOpenMajorArcanaMsgInfo::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.CalcResultSprIdMetis
// 0x0010 (0x0010 - 0x0000)
struct BtlResultUIBase_CalcResultSprIdMetis final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLevelUp;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultSprId;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_CalcResultSprIdMetis) == 0x000004, "Wrong alignment on BtlResultUIBase_CalcResultSprIdMetis");
static_assert(sizeof(BtlResultUIBase_CalcResultSprIdMetis) == 0x000010, "Wrong size on BtlResultUIBase_CalcResultSprIdMetis");
static_assert(offsetof(BtlResultUIBase_CalcResultSprIdMetis, PlayerId) == 0x000000, "Member 'BtlResultUIBase_CalcResultSprIdMetis::PlayerId' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_CalcResultSprIdMetis, IsLevelUp) == 0x000004, "Member 'BtlResultUIBase_CalcResultSprIdMetis::IsLevelUp' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_CalcResultSprIdMetis, DefaultSprId) == 0x000008, "Member 'BtlResultUIBase_CalcResultSprIdMetis::DefaultSprId' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_CalcResultSprIdMetis, ReturnValue) == 0x00000C, "Member 'BtlResultUIBase_CalcResultSprIdMetis::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.CalcStockUp
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_CalcStockUp final
{
public:
	EBtlResultHeroPersonaUpEvent                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_CalcStockUp) == 0x000001, "Wrong alignment on BtlResultUIBase_CalcStockUp");
static_assert(sizeof(BtlResultUIBase_CalcStockUp) == 0x000001, "Wrong size on BtlResultUIBase_CalcStockUp");
static_assert(offsetof(BtlResultUIBase_CalcStockUp, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_CalcStockUp::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.CheckCompleteLoadResource
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_CheckCompleteLoadResource final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_CheckCompleteLoadResource) == 0x000001, "Wrong alignment on BtlResultUIBase_CheckCompleteLoadResource");
static_assert(sizeof(BtlResultUIBase_CheckCompleteLoadResource) == 0x000001, "Wrong size on BtlResultUIBase_CheckCompleteLoadResource");
static_assert(offsetof(BtlResultUIBase_CheckCompleteLoadResource, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_CheckCompleteLoadResource::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.CheckEndResultUI
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_CheckEndResultUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_CheckEndResultUI) == 0x000001, "Wrong alignment on BtlResultUIBase_CheckEndResultUI");
static_assert(sizeof(BtlResultUIBase_CheckEndResultUI) == 0x000001, "Wrong size on BtlResultUIBase_CheckEndResultUI");
static_assert(offsetof(BtlResultUIBase_CheckEndResultUI, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_CheckEndResultUI::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.CheckHeroStatus
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_CheckHeroStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_CheckHeroStatus) == 0x000001, "Wrong alignment on BtlResultUIBase_CheckHeroStatus");
static_assert(sizeof(BtlResultUIBase_CheckHeroStatus) == 0x000001, "Wrong size on BtlResultUIBase_CheckHeroStatus");
static_assert(offsetof(BtlResultUIBase_CheckHeroStatus, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_CheckHeroStatus::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.CheckPersonaStatus
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_CheckPersonaStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_CheckPersonaStatus) == 0x000001, "Wrong alignment on BtlResultUIBase_CheckPersonaStatus");
static_assert(sizeof(BtlResultUIBase_CheckPersonaStatus) == 0x000001, "Wrong size on BtlResultUIBase_CheckPersonaStatus");
static_assert(offsetof(BtlResultUIBase_CheckPersonaStatus, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_CheckPersonaStatus::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.CheckShowMsg
// 0x0008 (0x0008 - 0x0000)
struct BtlResultUIBase_CheckShowMsg final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlResultUIBase_CheckShowMsg) == 0x000004, "Wrong alignment on BtlResultUIBase_CheckShowMsg");
static_assert(sizeof(BtlResultUIBase_CheckShowMsg) == 0x000008, "Wrong size on BtlResultUIBase_CheckShowMsg");
static_assert(offsetof(BtlResultUIBase_CheckShowMsg, ID) == 0x000000, "Member 'BtlResultUIBase_CheckShowMsg::ID' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_CheckShowMsg, ReturnValue) == 0x000004, "Member 'BtlResultUIBase_CheckShowMsg::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.CheckSKillGetPersona
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_CheckSKillGetPersona final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_CheckSKillGetPersona) == 0x000001, "Wrong alignment on BtlResultUIBase_CheckSKillGetPersona");
static_assert(sizeof(BtlResultUIBase_CheckSKillGetPersona) == 0x000001, "Wrong size on BtlResultUIBase_CheckSKillGetPersona");
static_assert(offsetof(BtlResultUIBase_CheckSKillGetPersona, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_CheckSKillGetPersona::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.ConvertItemSprID
// 0x0008 (0x0008 - 0x0000)
struct BtlResultUIBase_ConvertItemSprID final
{
public:
	int32                                         ItemId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_ConvertItemSprID) == 0x000004, "Wrong alignment on BtlResultUIBase_ConvertItemSprID");
static_assert(sizeof(BtlResultUIBase_ConvertItemSprID) == 0x000008, "Wrong size on BtlResultUIBase_ConvertItemSprID");
static_assert(offsetof(BtlResultUIBase_ConvertItemSprID, ItemId) == 0x000000, "Member 'BtlResultUIBase_ConvertItemSprID::ItemId' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_ConvertItemSprID, ReturnValue) == 0x000004, "Member 'BtlResultUIBase_ConvertItemSprID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.DrawMsg
// 0x0004 (0x0004 - 0x0000)
struct BtlResultUIBase_DrawMsg final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_DrawMsg) == 0x000004, "Wrong alignment on BtlResultUIBase_DrawMsg");
static_assert(sizeof(BtlResultUIBase_DrawMsg) == 0x000004, "Wrong size on BtlResultUIBase_DrawMsg");
static_assert(offsetof(BtlResultUIBase_DrawMsg, ID) == 0x000000, "Member 'BtlResultUIBase_DrawMsg::ID' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetAdjustedLayoutPosition
// 0x0014 (0x0014 - 0x0000)
struct BtlResultUIBase_GetAdjustedLayoutPosition final
{
public:
	EBtlResultLayout                              InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDefaultPos;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetAdjustedLayoutPosition) == 0x000004, "Wrong alignment on BtlResultUIBase_GetAdjustedLayoutPosition");
static_assert(sizeof(BtlResultUIBase_GetAdjustedLayoutPosition) == 0x000014, "Wrong size on BtlResultUIBase_GetAdjustedLayoutPosition");
static_assert(offsetof(BtlResultUIBase_GetAdjustedLayoutPosition, InLayoutId) == 0x000000, "Member 'BtlResultUIBase_GetAdjustedLayoutPosition::InLayoutId' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_GetAdjustedLayoutPosition, InDefaultPos) == 0x000004, "Member 'BtlResultUIBase_GetAdjustedLayoutPosition::InDefaultPos' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_GetAdjustedLayoutPosition, ReturnValue) == 0x00000C, "Member 'BtlResultUIBase_GetAdjustedLayoutPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetAdjustedLayoutPositionAstrea
// 0x0014 (0x0014 - 0x0000)
struct BtlResultUIBase_GetAdjustedLayoutPositionAstrea final
{
public:
	EBtlResultLayoutAstrea                        InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDefaultPos;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetAdjustedLayoutPositionAstrea) == 0x000004, "Wrong alignment on BtlResultUIBase_GetAdjustedLayoutPositionAstrea");
static_assert(sizeof(BtlResultUIBase_GetAdjustedLayoutPositionAstrea) == 0x000014, "Wrong size on BtlResultUIBase_GetAdjustedLayoutPositionAstrea");
static_assert(offsetof(BtlResultUIBase_GetAdjustedLayoutPositionAstrea, InLayoutId) == 0x000000, "Member 'BtlResultUIBase_GetAdjustedLayoutPositionAstrea::InLayoutId' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_GetAdjustedLayoutPositionAstrea, InDefaultPos) == 0x000004, "Member 'BtlResultUIBase_GetAdjustedLayoutPositionAstrea::InDefaultPos' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_GetAdjustedLayoutPositionAstrea, ReturnValue) == 0x00000C, "Member 'BtlResultUIBase_GetAdjustedLayoutPositionAstrea::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetAllyLevelupParam
// 0x0010 (0x0010 - 0x0000)
struct BtlResultUIBase_GetAllyLevelupParam final
{
public:
	TArray<struct FBtlResultAllyLvupParam>        ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetAllyLevelupParam) == 0x000008, "Wrong alignment on BtlResultUIBase_GetAllyLevelupParam");
static_assert(sizeof(BtlResultUIBase_GetAllyLevelupParam) == 0x000010, "Wrong size on BtlResultUIBase_GetAllyLevelupParam");
static_assert(offsetof(BtlResultUIBase_GetAllyLevelupParam, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_GetAllyLevelupParam::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetDebugPersonaTexutreID
// 0x0004 (0x0004 - 0x0000)
struct BtlResultUIBase_GetDebugPersonaTexutreID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetDebugPersonaTexutreID) == 0x000004, "Wrong alignment on BtlResultUIBase_GetDebugPersonaTexutreID");
static_assert(sizeof(BtlResultUIBase_GetDebugPersonaTexutreID) == 0x000004, "Wrong size on BtlResultUIBase_GetDebugPersonaTexutreID");
static_assert(offsetof(BtlResultUIBase_GetDebugPersonaTexutreID, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_GetDebugPersonaTexutreID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetEquipPersonaTexture
// 0x0008 (0x0008 - 0x0000)
struct BtlResultUIBase_GetEquipPersonaTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetEquipPersonaTexture) == 0x000008, "Wrong alignment on BtlResultUIBase_GetEquipPersonaTexture");
static_assert(sizeof(BtlResultUIBase_GetEquipPersonaTexture) == 0x000008, "Wrong size on BtlResultUIBase_GetEquipPersonaTexture");
static_assert(offsetof(BtlResultUIBase_GetEquipPersonaTexture, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_GetEquipPersonaTexture::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetHeroHumanLvupParam
// 0x0008 (0x0008 - 0x0000)
struct BtlResultUIBase_GetHeroHumanLvupParam final
{
public:
	bool                                          IsLvup;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetHeroHumanLvupParam) == 0x000004, "Wrong alignment on BtlResultUIBase_GetHeroHumanLvupParam");
static_assert(sizeof(BtlResultUIBase_GetHeroHumanLvupParam) == 0x000008, "Wrong size on BtlResultUIBase_GetHeroHumanLvupParam");
static_assert(offsetof(BtlResultUIBase_GetHeroHumanLvupParam, IsLvup) == 0x000000, "Member 'BtlResultUIBase_GetHeroHumanLvupParam::IsLvup' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_GetHeroHumanLvupParam, Level) == 0x000004, "Member 'BtlResultUIBase_GetHeroHumanLvupParam::Level' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetHeroInfo
// 0x0040 (0x0040 - 0x0000)
struct BtlResultUIBase_GetHeroInfo final
{
public:
	struct FBtlResultHeroInfo                     ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetHeroInfo) == 0x000008, "Wrong alignment on BtlResultUIBase_GetHeroInfo");
static_assert(sizeof(BtlResultUIBase_GetHeroInfo) == 0x000040, "Wrong size on BtlResultUIBase_GetHeroInfo");
static_assert(offsetof(BtlResultUIBase_GetHeroInfo, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_GetHeroInfo::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetItemMsgID
// 0x0004 (0x0004 - 0x0000)
struct BtlResultUIBase_GetItemMsgID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetItemMsgID) == 0x000004, "Wrong alignment on BtlResultUIBase_GetItemMsgID");
static_assert(sizeof(BtlResultUIBase_GetItemMsgID) == 0x000004, "Wrong size on BtlResultUIBase_GetItemMsgID");
static_assert(offsetof(BtlResultUIBase_GetItemMsgID, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_GetItemMsgID::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetItemParams
// 0x0010 (0x0010 - 0x0000)
struct BtlResultUIBase_GetItemParams final
{
public:
	TArray<struct FBtlResultItemParam>            ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetItemParams) == 0x000008, "Wrong alignment on BtlResultUIBase_GetItemParams");
static_assert(sizeof(BtlResultUIBase_GetItemParams) == 0x000010, "Wrong size on BtlResultUIBase_GetItemParams");
static_assert(offsetof(BtlResultUIBase_GetItemParams, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_GetItemParams::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetOkNextLayoutPosition
// 0x0014 (0x0014 - 0x0000)
struct BtlResultUIBase_GetOkNextLayoutPosition final
{
public:
	EOkNextLayout                                 InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDefaultPos;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetOkNextLayoutPosition) == 0x000004, "Wrong alignment on BtlResultUIBase_GetOkNextLayoutPosition");
static_assert(sizeof(BtlResultUIBase_GetOkNextLayoutPosition) == 0x000014, "Wrong size on BtlResultUIBase_GetOkNextLayoutPosition");
static_assert(offsetof(BtlResultUIBase_GetOkNextLayoutPosition, InLayoutId) == 0x000000, "Member 'BtlResultUIBase_GetOkNextLayoutPosition::InLayoutId' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_GetOkNextLayoutPosition, InDefaultPos) == 0x000004, "Member 'BtlResultUIBase_GetOkNextLayoutPosition::InDefaultPos' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_GetOkNextLayoutPosition, ReturnValue) == 0x00000C, "Member 'BtlResultUIBase_GetOkNextLayoutPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetPersonaLevelupParam
// 0x0010 (0x0010 - 0x0000)
struct BtlResultUIBase_GetPersonaLevelupParam final
{
public:
	TArray<struct FBtlResultPersonaParam>         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetPersonaLevelupParam) == 0x000008, "Wrong alignment on BtlResultUIBase_GetPersonaLevelupParam");
static_assert(sizeof(BtlResultUIBase_GetPersonaLevelupParam) == 0x000010, "Wrong size on BtlResultUIBase_GetPersonaLevelupParam");
static_assert(offsetof(BtlResultUIBase_GetPersonaLevelupParam, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_GetPersonaLevelupParam::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetResultBmd
// 0x0008 (0x0008 - 0x0000)
struct BtlResultUIBase_GetResultBmd final
{
public:
	class UBmdAsset*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetResultBmd) == 0x000008, "Wrong alignment on BtlResultUIBase_GetResultBmd");
static_assert(sizeof(BtlResultUIBase_GetResultBmd) == 0x000008, "Wrong size on BtlResultUIBase_GetResultBmd");
static_assert(offsetof(BtlResultUIBase_GetResultBmd, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_GetResultBmd::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetSprAsset
// 0x0008 (0x0008 - 0x0000)
struct BtlResultUIBase_GetSprAsset final
{
public:
	class USprAsset*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetSprAsset) == 0x000008, "Wrong alignment on BtlResultUIBase_GetSprAsset");
static_assert(sizeof(BtlResultUIBase_GetSprAsset) == 0x000008, "Wrong size on BtlResultUIBase_GetSprAsset");
static_assert(offsetof(BtlResultUIBase_GetSprAsset, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_GetSprAsset::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetSprAssetAstrea
// 0x0008 (0x0008 - 0x0000)
struct BtlResultUIBase_GetSprAssetAstrea final
{
public:
	class USprAsset*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetSprAssetAstrea) == 0x000008, "Wrong alignment on BtlResultUIBase_GetSprAssetAstrea");
static_assert(sizeof(BtlResultUIBase_GetSprAssetAstrea) == 0x000008, "Wrong size on BtlResultUIBase_GetSprAssetAstrea");
static_assert(offsetof(BtlResultUIBase_GetSprAssetAstrea, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_GetSprAssetAstrea::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetTextCollision
// 0x000C (0x000C - 0x0000)
struct BtlResultUIBase_GetTextCollision final
{
public:
	EBtlResultTextLayout                          InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_GetTextCollision) == 0x000004, "Wrong alignment on BtlResultUIBase_GetTextCollision");
static_assert(sizeof(BtlResultUIBase_GetTextCollision) == 0x00000C, "Wrong size on BtlResultUIBase_GetTextCollision");
static_assert(offsetof(BtlResultUIBase_GetTextCollision, InLayoutId) == 0x000000, "Member 'BtlResultUIBase_GetTextCollision::InLayoutId' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_GetTextCollision, ReturnValue) == 0x000004, "Member 'BtlResultUIBase_GetTextCollision::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.GetUipParamOfMajorArcanaAndGetMsg
// 0x0018 (0x0018 - 0x0000)
struct BtlResultUIBase_GetUipParamOfMajorArcanaAndGetMsg final
{
public:
	class FString                                 ParamKey;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlResultUIBase_GetUipParamOfMajorArcanaAndGetMsg) == 0x000008, "Wrong alignment on BtlResultUIBase_GetUipParamOfMajorArcanaAndGetMsg");
static_assert(sizeof(BtlResultUIBase_GetUipParamOfMajorArcanaAndGetMsg) == 0x000018, "Wrong size on BtlResultUIBase_GetUipParamOfMajorArcanaAndGetMsg");
static_assert(offsetof(BtlResultUIBase_GetUipParamOfMajorArcanaAndGetMsg, ParamKey) == 0x000000, "Member 'BtlResultUIBase_GetUipParamOfMajorArcanaAndGetMsg::ParamKey' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_GetUipParamOfMajorArcanaAndGetMsg, ReturnValue) == 0x000010, "Member 'BtlResultUIBase_GetUipParamOfMajorArcanaAndGetMsg::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.InputDebugButton
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_InputDebugButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_InputDebugButton) == 0x000001, "Wrong alignment on BtlResultUIBase_InputDebugButton");
static_assert(sizeof(BtlResultUIBase_InputDebugButton) == 0x000001, "Wrong size on BtlResultUIBase_InputDebugButton");
static_assert(offsetof(BtlResultUIBase_InputDebugButton, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_InputDebugButton::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.InputDebugButtonL
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_InputDebugButtonL final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_InputDebugButtonL) == 0x000001, "Wrong alignment on BtlResultUIBase_InputDebugButtonL");
static_assert(sizeof(BtlResultUIBase_InputDebugButtonL) == 0x000001, "Wrong size on BtlResultUIBase_InputDebugButtonL");
static_assert(offsetof(BtlResultUIBase_InputDebugButtonL, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_InputDebugButtonL::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.InputDebugButtonR
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_InputDebugButtonR final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_InputDebugButtonR) == 0x000001, "Wrong alignment on BtlResultUIBase_InputDebugButtonR");
static_assert(sizeof(BtlResultUIBase_InputDebugButtonR) == 0x000001, "Wrong size on BtlResultUIBase_InputDebugButtonR");
static_assert(offsetof(BtlResultUIBase_InputDebugButtonR, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_InputDebugButtonR::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.InputRepRUButton
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_InputRepRUButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_InputRepRUButton) == 0x000001, "Wrong alignment on BtlResultUIBase_InputRepRUButton");
static_assert(sizeof(BtlResultUIBase_InputRepRUButton) == 0x000001, "Wrong size on BtlResultUIBase_InputRepRUButton");
static_assert(offsetof(BtlResultUIBase_InputRepRUButton, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_InputRepRUButton::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.InputTrigDecideButton
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_InputTrigDecideButton final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_InputTrigDecideButton) == 0x000001, "Wrong alignment on BtlResultUIBase_InputTrigDecideButton");
static_assert(sizeof(BtlResultUIBase_InputTrigDecideButton) == 0x000001, "Wrong size on BtlResultUIBase_InputTrigDecideButton");
static_assert(offsetof(BtlResultUIBase_InputTrigDecideButton, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_InputTrigDecideButton::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.IsDrawComma
// 0x0008 (0x0008 - 0x0000)
struct BtlResultUIBase_IsDrawComma final
{
public:
	int32                                         DigCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlResultUIBase_IsDrawComma) == 0x000004, "Wrong alignment on BtlResultUIBase_IsDrawComma");
static_assert(sizeof(BtlResultUIBase_IsDrawComma) == 0x000008, "Wrong size on BtlResultUIBase_IsDrawComma");
static_assert(offsetof(BtlResultUIBase_IsDrawComma, DigCount) == 0x000000, "Member 'BtlResultUIBase_IsDrawComma::DigCount' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_IsDrawComma, ReturnValue) == 0x000004, "Member 'BtlResultUIBase_IsDrawComma::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.IsLayoutDebugMenuOpen
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_IsLayoutDebugMenuOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_IsLayoutDebugMenuOpen) == 0x000001, "Wrong alignment on BtlResultUIBase_IsLayoutDebugMenuOpen");
static_assert(sizeof(BtlResultUIBase_IsLayoutDebugMenuOpen) == 0x000001, "Wrong size on BtlResultUIBase_IsLayoutDebugMenuOpen");
static_assert(offsetof(BtlResultUIBase_IsLayoutDebugMenuOpen, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_IsLayoutDebugMenuOpen::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.IsMatchMetisOfPlayerId
// 0x0008 (0x0008 - 0x0000)
struct BtlResultUIBase_IsMatchMetisOfPlayerId final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlResultUIBase_IsMatchMetisOfPlayerId) == 0x000004, "Wrong alignment on BtlResultUIBase_IsMatchMetisOfPlayerId");
static_assert(sizeof(BtlResultUIBase_IsMatchMetisOfPlayerId) == 0x000008, "Wrong size on BtlResultUIBase_IsMatchMetisOfPlayerId");
static_assert(offsetof(BtlResultUIBase_IsMatchMetisOfPlayerId, PlayerId) == 0x000000, "Member 'BtlResultUIBase_IsMatchMetisOfPlayerId::PlayerId' has a wrong offset!");
static_assert(offsetof(BtlResultUIBase_IsMatchMetisOfPlayerId, ReturnValue) == 0x000004, "Member 'BtlResultUIBase_IsMatchMetisOfPlayerId::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.OpenMajorArcanaTutorialAstrea
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_OpenMajorArcanaTutorialAstrea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_OpenMajorArcanaTutorialAstrea) == 0x000001, "Wrong alignment on BtlResultUIBase_OpenMajorArcanaTutorialAstrea");
static_assert(sizeof(BtlResultUIBase_OpenMajorArcanaTutorialAstrea) == 0x000001, "Wrong size on BtlResultUIBase_OpenMajorArcanaTutorialAstrea");
static_assert(offsetof(BtlResultUIBase_OpenMajorArcanaTutorialAstrea, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_OpenMajorArcanaTutorialAstrea::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.StartResultUI
// 0x0008 (0x0008 - 0x0000)
struct BtlResultUIBase_StartResultUI final
{
public:
	class UBtlResultViewData*                     InViewData;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_StartResultUI) == 0x000008, "Wrong alignment on BtlResultUIBase_StartResultUI");
static_assert(sizeof(BtlResultUIBase_StartResultUI) == 0x000008, "Wrong size on BtlResultUIBase_StartResultUI");
static_assert(offsetof(BtlResultUIBase_StartResultUI, InViewData) == 0x000000, "Member 'BtlResultUIBase_StartResultUI::InViewData' has a wrong offset!");

// Function xrd777.BtlResultUIBase.UpdateMajorArcanaGetMessage
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_UpdateMajorArcanaGetMessage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_UpdateMajorArcanaGetMessage) == 0x000001, "Wrong alignment on BtlResultUIBase_UpdateMajorArcanaGetMessage");
static_assert(sizeof(BtlResultUIBase_UpdateMajorArcanaGetMessage) == 0x000001, "Wrong size on BtlResultUIBase_UpdateMajorArcanaGetMessage");
static_assert(offsetof(BtlResultUIBase_UpdateMajorArcanaGetMessage, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_UpdateMajorArcanaGetMessage::ReturnValue' has a wrong offset!");

// Function xrd777.BtlResultUIBase.IsOpenableMajorArcanaMsgAstrea
// 0x0001 (0x0001 - 0x0000)
struct BtlResultUIBase_IsOpenableMajorArcanaMsgAstrea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlResultUIBase_IsOpenableMajorArcanaMsgAstrea) == 0x000001, "Wrong alignment on BtlResultUIBase_IsOpenableMajorArcanaMsgAstrea");
static_assert(sizeof(BtlResultUIBase_IsOpenableMajorArcanaMsgAstrea) == 0x000001, "Wrong size on BtlResultUIBase_IsOpenableMajorArcanaMsgAstrea");
static_assert(offsetof(BtlResultUIBase_IsOpenableMajorArcanaMsgAstrea, ReturnValue) == 0x000000, "Member 'BtlResultUIBase_IsOpenableMajorArcanaMsgAstrea::ReturnValue' has a wrong offset!");

// Function xrd777.BtlSequencerObserve.SetParam
// 0x0010 (0x0010 - 0x0000)
struct BtlSequencerObserve_SetParam final
{
public:
	class ALevelSequenceActor*                    InSequenceActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InStart;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlSequencerObserve_SetParam) == 0x000008, "Wrong alignment on BtlSequencerObserve_SetParam");
static_assert(sizeof(BtlSequencerObserve_SetParam) == 0x000010, "Wrong size on BtlSequencerObserve_SetParam");
static_assert(offsetof(BtlSequencerObserve_SetParam, InSequenceActor) == 0x000000, "Member 'BtlSequencerObserve_SetParam::InSequenceActor' has a wrong offset!");
static_assert(offsetof(BtlSequencerObserve_SetParam, InStart) == 0x000008, "Member 'BtlSequencerObserve_SetParam::InStart' has a wrong offset!");

// Function xrd777.BtlShakeManager.BtlShakeManagerGetInstance
// 0x0008 (0x0008 - 0x0000)
struct BtlShakeManager_BtlShakeManagerGetInstance final
{
public:
	class ABtlShakeManager*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShakeManager_BtlShakeManagerGetInstance) == 0x000008, "Wrong alignment on BtlShakeManager_BtlShakeManagerGetInstance");
static_assert(sizeof(BtlShakeManager_BtlShakeManagerGetInstance) == 0x000008, "Wrong size on BtlShakeManager_BtlShakeManagerGetInstance");
static_assert(offsetof(BtlShakeManager_BtlShakeManagerGetInstance, ReturnValue) == 0x000000, "Member 'BtlShakeManager_BtlShakeManagerGetInstance::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShakeManager.BtlShakePlay
// 0x0010 (0x0010 - 0x0000)
struct BtlShakeManager_BtlShakePlay final
{
public:
	EBtlShakeType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayTime;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerController*                      Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShakeManager_BtlShakePlay) == 0x000008, "Wrong alignment on BtlShakeManager_BtlShakePlay");
static_assert(sizeof(BtlShakeManager_BtlShakePlay) == 0x000010, "Wrong size on BtlShakeManager_BtlShakePlay");
static_assert(offsetof(BtlShakeManager_BtlShakePlay, Type) == 0x000000, "Member 'BtlShakeManager_BtlShakePlay::Type' has a wrong offset!");
static_assert(offsetof(BtlShakeManager_BtlShakePlay, PlayTime) == 0x000004, "Member 'BtlShakeManager_BtlShakePlay::PlayTime' has a wrong offset!");
static_assert(offsetof(BtlShakeManager_BtlShakePlay, Controller) == 0x000008, "Member 'BtlShakeManager_BtlShakePlay::Controller' has a wrong offset!");

// Function xrd777.BtlShakeManager.BtlShakeStop
// 0x0008 (0x0008 - 0x0000)
struct BtlShakeManager_BtlShakeStop final
{
public:
	class APlayerController*                      Controller;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShakeManager_BtlShakeStop) == 0x000008, "Wrong alignment on BtlShakeManager_BtlShakeStop");
static_assert(sizeof(BtlShakeManager_BtlShakeStop) == 0x000008, "Wrong size on BtlShakeManager_BtlShakeStop");
static_assert(offsetof(BtlShakeManager_BtlShakeStop, Controller) == 0x000000, "Member 'BtlShakeManager_BtlShakeStop::Controller' has a wrong offset!");

// Function xrd777.CharacterSimpleLipsAnimAppComponent.OnChangeLipsState
// 0x0038 (0x0038 - 0x0000)
struct CharacterSimpleLipsAnimAppComponent_OnChangeLipsState final
{
public:
	ECharacterSimpleLipsAnimAppStateType          LipSyncAppStateType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterSimpleLipsAnimAppListener    LipsyncParam;                                      // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSimpleLipsAnimAppComponent_OnChangeLipsState) == 0x000008, "Wrong alignment on CharacterSimpleLipsAnimAppComponent_OnChangeLipsState");
static_assert(sizeof(CharacterSimpleLipsAnimAppComponent_OnChangeLipsState) == 0x000038, "Wrong size on CharacterSimpleLipsAnimAppComponent_OnChangeLipsState");
static_assert(offsetof(CharacterSimpleLipsAnimAppComponent_OnChangeLipsState, LipSyncAppStateType) == 0x000000, "Member 'CharacterSimpleLipsAnimAppComponent_OnChangeLipsState::LipSyncAppStateType' has a wrong offset!");
static_assert(offsetof(CharacterSimpleLipsAnimAppComponent_OnChangeLipsState, LipsyncParam) == 0x000008, "Member 'CharacterSimpleLipsAnimAppComponent_OnChangeLipsState::LipsyncParam' has a wrong offset!");

// Function xrd777.CharacterSimpleLipsAnimAppComponent.GetLipsSubsystem
// 0x0008 (0x0008 - 0x0000)
struct CharacterSimpleLipsAnimAppComponent_GetLipsSubsystem final
{
public:
	class UCharacterSimpleLipsAnimAppSubsystem*   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSimpleLipsAnimAppComponent_GetLipsSubsystem) == 0x000008, "Wrong alignment on CharacterSimpleLipsAnimAppComponent_GetLipsSubsystem");
static_assert(sizeof(CharacterSimpleLipsAnimAppComponent_GetLipsSubsystem) == 0x000008, "Wrong size on CharacterSimpleLipsAnimAppComponent_GetLipsSubsystem");
static_assert(offsetof(CharacterSimpleLipsAnimAppComponent_GetLipsSubsystem, ReturnValue) == 0x000000, "Member 'CharacterSimpleLipsAnimAppComponent_GetLipsSubsystem::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.ActionCancel
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_ActionCancel final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_ActionCancel) == 0x000004, "Wrong alignment on BtlShuffleMainBase_ActionCancel");
static_assert(sizeof(BtlShuffleMainBase_ActionCancel) == 0x000004, "Wrong size on BtlShuffleMainBase_ActionCancel");
static_assert(offsetof(BtlShuffleMainBase_ActionCancel, Idx) == 0x000000, "Member 'BtlShuffleMainBase_ActionCancel::Idx' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.ActionCardInStateEffect
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_ActionCardInStateEffect final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_ActionCardInStateEffect) == 0x000004, "Wrong alignment on BtlShuffleMainBase_ActionCardInStateEffect");
static_assert(sizeof(BtlShuffleMainBase_ActionCardInStateEffect) == 0x000004, "Wrong size on BtlShuffleMainBase_ActionCardInStateEffect");
static_assert(offsetof(BtlShuffleMainBase_ActionCardInStateEffect, Idx) == 0x000000, "Member 'BtlShuffleMainBase_ActionCardInStateEffect::Idx' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.ActionSelectCard
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_ActionSelectCard final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_ActionSelectCard) == 0x000004, "Wrong alignment on BtlShuffleMainBase_ActionSelectCard");
static_assert(sizeof(BtlShuffleMainBase_ActionSelectCard) == 0x000004, "Wrong size on BtlShuffleMainBase_ActionSelectCard");
static_assert(offsetof(BtlShuffleMainBase_ActionSelectCard, Idx) == 0x000000, "Member 'BtlShuffleMainBase_ActionSelectCard::Idx' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.CardFallUpdate
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_CardFallUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_CardFallUpdate) == 0x000004, "Wrong alignment on BtlShuffleMainBase_CardFallUpdate");
static_assert(sizeof(BtlShuffleMainBase_CardFallUpdate) == 0x000004, "Wrong size on BtlShuffleMainBase_CardFallUpdate");
static_assert(offsetof(BtlShuffleMainBase_CardFallUpdate, DeltaTime) == 0x000000, "Member 'BtlShuffleMainBase_CardFallUpdate::DeltaTime' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.ChangeCardRotationSpeed
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_ChangeCardRotationSpeed final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_ChangeCardRotationSpeed) == 0x000004, "Wrong alignment on BtlShuffleMainBase_ChangeCardRotationSpeed");
static_assert(sizeof(BtlShuffleMainBase_ChangeCardRotationSpeed) == 0x000004, "Wrong size on BtlShuffleMainBase_ChangeCardRotationSpeed");
static_assert(offsetof(BtlShuffleMainBase_ChangeCardRotationSpeed, Idx) == 0x000000, "Member 'BtlShuffleMainBase_ChangeCardRotationSpeed::Idx' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.ChangePersonaStatusLeft
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_ChangePersonaStatusLeft final
{
public:
	int32                                         Cursor;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_ChangePersonaStatusLeft) == 0x000004, "Wrong alignment on BtlShuffleMainBase_ChangePersonaStatusLeft");
static_assert(sizeof(BtlShuffleMainBase_ChangePersonaStatusLeft) == 0x000004, "Wrong size on BtlShuffleMainBase_ChangePersonaStatusLeft");
static_assert(offsetof(BtlShuffleMainBase_ChangePersonaStatusLeft, Cursor) == 0x000000, "Member 'BtlShuffleMainBase_ChangePersonaStatusLeft::Cursor' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.ChangePersonaStatusRight
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_ChangePersonaStatusRight final
{
public:
	int32                                         Cursor;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_ChangePersonaStatusRight) == 0x000004, "Wrong alignment on BtlShuffleMainBase_ChangePersonaStatusRight");
static_assert(sizeof(BtlShuffleMainBase_ChangePersonaStatusRight) == 0x000004, "Wrong size on BtlShuffleMainBase_ChangePersonaStatusRight");
static_assert(offsetof(BtlShuffleMainBase_ChangePersonaStatusRight, Cursor) == 0x000000, "Member 'BtlShuffleMainBase_ChangePersonaStatusRight::Cursor' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.CheckAllGetBonusMode
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_CheckAllGetBonusMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_CheckAllGetBonusMode) == 0x000001, "Wrong alignment on BtlShuffleMainBase_CheckAllGetBonusMode");
static_assert(sizeof(BtlShuffleMainBase_CheckAllGetBonusMode) == 0x000001, "Wrong size on BtlShuffleMainBase_CheckAllGetBonusMode");
static_assert(offsetof(BtlShuffleMainBase_CheckAllGetBonusMode, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_CheckAllGetBonusMode::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.CheckAlloutMode
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_CheckAlloutMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_CheckAlloutMode) == 0x000001, "Wrong alignment on BtlShuffleMainBase_CheckAlloutMode");
static_assert(sizeof(BtlShuffleMainBase_CheckAlloutMode) == 0x000001, "Wrong size on BtlShuffleMainBase_CheckAlloutMode");
static_assert(offsetof(BtlShuffleMainBase_CheckAlloutMode, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_CheckAlloutMode::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.CheckChangeCard
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_CheckChangeCard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_CheckChangeCard) == 0x000001, "Wrong alignment on BtlShuffleMainBase_CheckChangeCard");
static_assert(sizeof(BtlShuffleMainBase_CheckChangeCard) == 0x000001, "Wrong size on BtlShuffleMainBase_CheckChangeCard");
static_assert(offsetof(BtlShuffleMainBase_CheckChangeCard, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_CheckChangeCard::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.CheckCompleteLoadResource
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_CheckCompleteLoadResource final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_CheckCompleteLoadResource) == 0x000001, "Wrong alignment on BtlShuffleMainBase_CheckCompleteLoadResource");
static_assert(sizeof(BtlShuffleMainBase_CheckCompleteLoadResource) == 0x000001, "Wrong size on BtlShuffleMainBase_CheckCompleteLoadResource");
static_assert(offsetof(BtlShuffleMainBase_CheckCompleteLoadResource, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_CheckCompleteLoadResource::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.CheckCursorSlectedArcana
// 0x0008 (0x0008 - 0x0000)
struct BtlShuffleMainBase_CheckCursorSlectedArcana final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlShuffleMainBase_CheckCursorSlectedArcana) == 0x000004, "Wrong alignment on BtlShuffleMainBase_CheckCursorSlectedArcana");
static_assert(sizeof(BtlShuffleMainBase_CheckCursorSlectedArcana) == 0x000008, "Wrong size on BtlShuffleMainBase_CheckCursorSlectedArcana");
static_assert(offsetof(BtlShuffleMainBase_CheckCursorSlectedArcana, Idx) == 0x000000, "Member 'BtlShuffleMainBase_CheckCursorSlectedArcana::Idx' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_CheckCursorSlectedArcana, ReturnValue) == 0x000004, "Member 'BtlShuffleMainBase_CheckCursorSlectedArcana::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.CheckDoubleDraw
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_CheckDoubleDraw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_CheckDoubleDraw) == 0x000001, "Wrong alignment on BtlShuffleMainBase_CheckDoubleDraw");
static_assert(sizeof(BtlShuffleMainBase_CheckDoubleDraw) == 0x000001, "Wrong size on BtlShuffleMainBase_CheckDoubleDraw");
static_assert(offsetof(BtlShuffleMainBase_CheckDoubleDraw, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_CheckDoubleDraw::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.CheckEnableShuffletime
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_CheckEnableShuffletime final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_CheckEnableShuffletime) == 0x000001, "Wrong alignment on BtlShuffleMainBase_CheckEnableShuffletime");
static_assert(sizeof(BtlShuffleMainBase_CheckEnableShuffletime) == 0x000001, "Wrong size on BtlShuffleMainBase_CheckEnableShuffletime");
static_assert(offsetof(BtlShuffleMainBase_CheckEnableShuffletime, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_CheckEnableShuffletime::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.CheckLoadCardResource
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_CheckLoadCardResource final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_CheckLoadCardResource) == 0x000001, "Wrong alignment on BtlShuffleMainBase_CheckLoadCardResource");
static_assert(sizeof(BtlShuffleMainBase_CheckLoadCardResource) == 0x000001, "Wrong size on BtlShuffleMainBase_CheckLoadCardResource");
static_assert(offsetof(BtlShuffleMainBase_CheckLoadCardResource, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_CheckLoadCardResource::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.CheckNewCard
// 0x0008 (0x0008 - 0x0000)
struct BtlShuffleMainBase_CheckNewCard final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlShuffleMainBase_CheckNewCard) == 0x000004, "Wrong alignment on BtlShuffleMainBase_CheckNewCard");
static_assert(sizeof(BtlShuffleMainBase_CheckNewCard) == 0x000008, "Wrong size on BtlShuffleMainBase_CheckNewCard");
static_assert(offsetof(BtlShuffleMainBase_CheckNewCard, Idx) == 0x000000, "Member 'BtlShuffleMainBase_CheckNewCard::Idx' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_CheckNewCard, ReturnValue) == 0x000004, "Member 'BtlShuffleMainBase_CheckNewCard::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.CheckShowMsg
// 0x0008 (0x0008 - 0x0000)
struct BtlShuffleMainBase_CheckShowMsg final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlShuffleMainBase_CheckShowMsg) == 0x000004, "Wrong alignment on BtlShuffleMainBase_CheckShowMsg");
static_assert(sizeof(BtlShuffleMainBase_CheckShowMsg) == 0x000008, "Wrong size on BtlShuffleMainBase_CheckShowMsg");
static_assert(offsetof(BtlShuffleMainBase_CheckShowMsg, ID) == 0x000000, "Member 'BtlShuffleMainBase_CheckShowMsg::ID' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_CheckShowMsg, ReturnValue) == 0x000004, "Member 'BtlShuffleMainBase_CheckShowMsg::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.CheckShowPersonaStatus
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_CheckShowPersonaStatus final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_CheckShowPersonaStatus) == 0x000001, "Wrong alignment on BtlShuffleMainBase_CheckShowPersonaStatus");
static_assert(sizeof(BtlShuffleMainBase_CheckShowPersonaStatus) == 0x000001, "Wrong size on BtlShuffleMainBase_CheckShowPersonaStatus");
static_assert(offsetof(BtlShuffleMainBase_CheckShowPersonaStatus, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_CheckShowPersonaStatus::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetAdjustedPosition
// 0x000C (0x000C - 0x0000)
struct BtlShuffleMainBase_GetAdjustedPosition final
{
public:
	EBtlShuffleLayout                             InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetAdjustedPosition) == 0x000004, "Wrong alignment on BtlShuffleMainBase_GetAdjustedPosition");
static_assert(sizeof(BtlShuffleMainBase_GetAdjustedPosition) == 0x00000C, "Wrong size on BtlShuffleMainBase_GetAdjustedPosition");
static_assert(offsetof(BtlShuffleMainBase_GetAdjustedPosition, InLayoutId) == 0x000000, "Member 'BtlShuffleMainBase_GetAdjustedPosition::InLayoutId' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetAdjustedPosition, ReturnValue) == 0x000004, "Member 'BtlShuffleMainBase_GetAdjustedPosition::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetAllGetTexture
// 0x0010 (0x0010 - 0x0000)
struct BtlShuffleMainBase_GetAllGetTexture final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetAllGetTexture) == 0x000008, "Wrong alignment on BtlShuffleMainBase_GetAllGetTexture");
static_assert(sizeof(BtlShuffleMainBase_GetAllGetTexture) == 0x000010, "Wrong size on BtlShuffleMainBase_GetAllGetTexture");
static_assert(offsetof(BtlShuffleMainBase_GetAllGetTexture, Idx) == 0x000000, "Member 'BtlShuffleMainBase_GetAllGetTexture::Idx' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetAllGetTexture, ReturnValue) == 0x000008, "Member 'BtlShuffleMainBase_GetAllGetTexture::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetAppearCard
// 0x0014 (0x0014 - 0x0000)
struct BtlShuffleMainBase_GetAppearCard final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAppPropsCardParam                     Output;                                            // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsBonusCard;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlShuffleMainBase_GetAppearCard) == 0x000004, "Wrong alignment on BtlShuffleMainBase_GetAppearCard");
static_assert(sizeof(BtlShuffleMainBase_GetAppearCard) == 0x000014, "Wrong size on BtlShuffleMainBase_GetAppearCard");
static_assert(offsetof(BtlShuffleMainBase_GetAppearCard, Idx) == 0x000000, "Member 'BtlShuffleMainBase_GetAppearCard::Idx' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetAppearCard, Output) == 0x000004, "Member 'BtlShuffleMainBase_GetAppearCard::Output' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetAppearCard, IsBonusCard) == 0x000010, "Member 'BtlShuffleMainBase_GetAppearCard::IsBonusCard' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetAppearCardInfoDetail
// 0x0018 (0x0018 - 0x0000)
struct BtlShuffleMainBase_GetAppearCardInfoDetail final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value2;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBonusCard;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlShuffleMainBase_GetAppearCardInfoDetail) == 0x000004, "Wrong alignment on BtlShuffleMainBase_GetAppearCardInfoDetail");
static_assert(sizeof(BtlShuffleMainBase_GetAppearCardInfoDetail) == 0x000018, "Wrong size on BtlShuffleMainBase_GetAppearCardInfoDetail");
static_assert(offsetof(BtlShuffleMainBase_GetAppearCardInfoDetail, Idx) == 0x000000, "Member 'BtlShuffleMainBase_GetAppearCardInfoDetail::Idx' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetAppearCardInfoDetail, Type) == 0x000004, "Member 'BtlShuffleMainBase_GetAppearCardInfoDetail::Type' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetAppearCardInfoDetail, Rank) == 0x000008, "Member 'BtlShuffleMainBase_GetAppearCardInfoDetail::Rank' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetAppearCardInfoDetail, Value) == 0x00000C, "Member 'BtlShuffleMainBase_GetAppearCardInfoDetail::Value' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetAppearCardInfoDetail, Value2) == 0x000010, "Member 'BtlShuffleMainBase_GetAppearCardInfoDetail::Value2' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetAppearCardInfoDetail, IsBonusCard) == 0x000014, "Member 'BtlShuffleMainBase_GetAppearCardInfoDetail::IsBonusCard' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetAxisR
// 0x0008 (0x0008 - 0x0000)
struct BtlShuffleMainBase_GetAxisR final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetAxisR) == 0x000004, "Wrong alignment on BtlShuffleMainBase_GetAxisR");
static_assert(sizeof(BtlShuffleMainBase_GetAxisR) == 0x000008, "Wrong size on BtlShuffleMainBase_GetAxisR");
static_assert(offsetof(BtlShuffleMainBase_GetAxisR, X) == 0x000000, "Member 'BtlShuffleMainBase_GetAxisR::X' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetAxisR, Y) == 0x000004, "Member 'BtlShuffleMainBase_GetAxisR::Y' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetBmdAsset
// 0x0008 (0x0008 - 0x0000)
struct BtlShuffleMainBase_GetBmdAsset final
{
public:
	class UBmdAsset*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetBmdAsset) == 0x000008, "Wrong alignment on BtlShuffleMainBase_GetBmdAsset");
static_assert(sizeof(BtlShuffleMainBase_GetBmdAsset) == 0x000008, "Wrong size on BtlShuffleMainBase_GetBmdAsset");
static_assert(offsetof(BtlShuffleMainBase_GetBmdAsset, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_GetBmdAsset::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetEffectCardPosX
// 0x0008 (0x0008 - 0x0000)
struct BtlShuffleMainBase_GetEffectCardPosX final
{
public:
	int32                                         TargetCardIndex;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetEffectCardPosX) == 0x000004, "Wrong alignment on BtlShuffleMainBase_GetEffectCardPosX");
static_assert(sizeof(BtlShuffleMainBase_GetEffectCardPosX) == 0x000008, "Wrong size on BtlShuffleMainBase_GetEffectCardPosX");
static_assert(offsetof(BtlShuffleMainBase_GetEffectCardPosX, TargetCardIndex) == 0x000000, "Member 'BtlShuffleMainBase_GetEffectCardPosX::TargetCardIndex' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetEffectCardPosX, ReturnValue) == 0x000004, "Member 'BtlShuffleMainBase_GetEffectCardPosX::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetHaveItemNumBySelectCard
// 0x000C (0x000C - 0x0000)
struct BtlShuffleMainBase_GetHaveItemNumBySelectCard final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBonusCard;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetHaveItemNumBySelectCard) == 0x000004, "Wrong alignment on BtlShuffleMainBase_GetHaveItemNumBySelectCard");
static_assert(sizeof(BtlShuffleMainBase_GetHaveItemNumBySelectCard) == 0x00000C, "Wrong size on BtlShuffleMainBase_GetHaveItemNumBySelectCard");
static_assert(offsetof(BtlShuffleMainBase_GetHaveItemNumBySelectCard, Idx) == 0x000000, "Member 'BtlShuffleMainBase_GetHaveItemNumBySelectCard::Idx' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetHaveItemNumBySelectCard, IsBonusCard) == 0x000004, "Member 'BtlShuffleMainBase_GetHaveItemNumBySelectCard::IsBonusCard' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetHaveItemNumBySelectCard, ReturnValue) == 0x000008, "Member 'BtlShuffleMainBase_GetHaveItemNumBySelectCard::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetHaveMajorArcana
// 0x0010 (0x0010 - 0x0000)
struct BtlShuffleMainBase_GetHaveMajorArcana final
{
public:
	TArray<int32>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetHaveMajorArcana) == 0x000008, "Wrong alignment on BtlShuffleMainBase_GetHaveMajorArcana");
static_assert(sizeof(BtlShuffleMainBase_GetHaveMajorArcana) == 0x000010, "Wrong size on BtlShuffleMainBase_GetHaveMajorArcana");
static_assert(offsetof(BtlShuffleMainBase_GetHaveMajorArcana, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_GetHaveMajorArcana::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetInAnime
// 0x0010 (0x0010 - 0x0000)
struct BtlShuffleMainBase_GetInAnime final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetInAnime) == 0x000008, "Wrong alignment on BtlShuffleMainBase_GetInAnime");
static_assert(sizeof(BtlShuffleMainBase_GetInAnime) == 0x000010, "Wrong size on BtlShuffleMainBase_GetInAnime");
static_assert(offsetof(BtlShuffleMainBase_GetInAnime, Idx) == 0x000000, "Member 'BtlShuffleMainBase_GetInAnime::Idx' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetInAnime, ReturnValue) == 0x000008, "Member 'BtlShuffleMainBase_GetInAnime::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetItemNumSelectCard
// 0x000C (0x000C - 0x0000)
struct BtlShuffleMainBase_GetItemNumSelectCard final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBonusCard;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetItemNumSelectCard) == 0x000004, "Wrong alignment on BtlShuffleMainBase_GetItemNumSelectCard");
static_assert(sizeof(BtlShuffleMainBase_GetItemNumSelectCard) == 0x00000C, "Wrong size on BtlShuffleMainBase_GetItemNumSelectCard");
static_assert(offsetof(BtlShuffleMainBase_GetItemNumSelectCard, Idx) == 0x000000, "Member 'BtlShuffleMainBase_GetItemNumSelectCard::Idx' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetItemNumSelectCard, IsBonusCard) == 0x000004, "Member 'BtlShuffleMainBase_GetItemNumSelectCard::IsBonusCard' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetItemNumSelectCard, ReturnValue) == 0x000008, "Member 'BtlShuffleMainBase_GetItemNumSelectCard::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetMaxNumMajorArcana
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_GetMaxNumMajorArcana final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetMaxNumMajorArcana) == 0x000004, "Wrong alignment on BtlShuffleMainBase_GetMaxNumMajorArcana");
static_assert(sizeof(BtlShuffleMainBase_GetMaxNumMajorArcana) == 0x000004, "Wrong size on BtlShuffleMainBase_GetMaxNumMajorArcana");
static_assert(offsetof(BtlShuffleMainBase_GetMaxNumMajorArcana, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_GetMaxNumMajorArcana::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetMegNoDetailArcanaSelectCard
// 0x0010 (0x0010 - 0x0000)
struct BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBonusCard;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard) == 0x000004, "Wrong alignment on BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard");
static_assert(sizeof(BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard) == 0x000010, "Wrong size on BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard");
static_assert(offsetof(BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard, Idx) == 0x000000, "Member 'BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard::Idx' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard, MinorId) == 0x000004, "Member 'BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard::MinorId' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard, IsBonusCard) == 0x000008, "Member 'BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard::IsBonusCard' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard, ReturnValue) == 0x00000C, "Member 'BtlShuffleMainBase_GetMegNoDetailArcanaSelectCard::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetNameMajorArcana
// 0x0018 (0x0018 - 0x0000)
struct BtlShuffleMainBase_GetNameMajorArcana final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetNameMajorArcana) == 0x000008, "Wrong alignment on BtlShuffleMainBase_GetNameMajorArcana");
static_assert(sizeof(BtlShuffleMainBase_GetNameMajorArcana) == 0x000018, "Wrong size on BtlShuffleMainBase_GetNameMajorArcana");
static_assert(offsetof(BtlShuffleMainBase_GetNameMajorArcana, ID) == 0x000000, "Member 'BtlShuffleMainBase_GetNameMajorArcana::ID' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetNameMajorArcana, ReturnValue) == 0x000008, "Member 'BtlShuffleMainBase_GetNameMajorArcana::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetNamePersona
// 0x0018 (0x0018 - 0x0000)
struct BtlShuffleMainBase_GetNamePersona final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetNamePersona) == 0x000008, "Wrong alignment on BtlShuffleMainBase_GetNamePersona");
static_assert(sizeof(BtlShuffleMainBase_GetNamePersona) == 0x000018, "Wrong size on BtlShuffleMainBase_GetNamePersona");
static_assert(offsetof(BtlShuffleMainBase_GetNamePersona, ID) == 0x000000, "Member 'BtlShuffleMainBase_GetNamePersona::ID' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetNamePersona, ReturnValue) == 0x000008, "Member 'BtlShuffleMainBase_GetNamePersona::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetPlgAsset
// 0x0008 (0x0008 - 0x0000)
struct BtlShuffleMainBase_GetPlgAsset final
{
public:
	class UPlgAsset*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetPlgAsset) == 0x000008, "Wrong alignment on BtlShuffleMainBase_GetPlgAsset");
static_assert(sizeof(BtlShuffleMainBase_GetPlgAsset) == 0x000008, "Wrong size on BtlShuffleMainBase_GetPlgAsset");
static_assert(offsetof(BtlShuffleMainBase_GetPlgAsset, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_GetPlgAsset::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetRemainNumMajorArcana
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_GetRemainNumMajorArcana final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetRemainNumMajorArcana) == 0x000004, "Wrong alignment on BtlShuffleMainBase_GetRemainNumMajorArcana");
static_assert(sizeof(BtlShuffleMainBase_GetRemainNumMajorArcana) == 0x000004, "Wrong size on BtlShuffleMainBase_GetRemainNumMajorArcana");
static_assert(offsetof(BtlShuffleMainBase_GetRemainNumMajorArcana, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_GetRemainNumMajorArcana::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetSelectedCardIndex
// 0x0008 (0x0008 - 0x0000)
struct BtlShuffleMainBase_GetSelectedCardIndex final
{
public:
	int32                                         SelectIdx;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetSelectedCardIndex) == 0x000004, "Wrong alignment on BtlShuffleMainBase_GetSelectedCardIndex");
static_assert(sizeof(BtlShuffleMainBase_GetSelectedCardIndex) == 0x000008, "Wrong size on BtlShuffleMainBase_GetSelectedCardIndex");
static_assert(offsetof(BtlShuffleMainBase_GetSelectedCardIndex, SelectIdx) == 0x000000, "Member 'BtlShuffleMainBase_GetSelectedCardIndex::SelectIdx' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetSelectedCardIndex, ReturnValue) == 0x000004, "Member 'BtlShuffleMainBase_GetSelectedCardIndex::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetSprAsset
// 0x0008 (0x0008 - 0x0000)
struct BtlShuffleMainBase_GetSprAsset final
{
public:
	class USprAsset*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetSprAsset) == 0x000008, "Wrong alignment on BtlShuffleMainBase_GetSprAsset");
static_assert(sizeof(BtlShuffleMainBase_GetSprAsset) == 0x000008, "Wrong size on BtlShuffleMainBase_GetSprAsset");
static_assert(offsetof(BtlShuffleMainBase_GetSprAsset, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_GetSprAsset::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.GetTextCollision
// 0x0010 (0x0010 - 0x0000)
struct BtlShuffleMainBase_GetTextCollision final
{
public:
	EBtlShuffleTextLayout                         InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_GetTextCollision) == 0x000004, "Wrong alignment on BtlShuffleMainBase_GetTextCollision");
static_assert(sizeof(BtlShuffleMainBase_GetTextCollision) == 0x000010, "Wrong size on BtlShuffleMainBase_GetTextCollision");
static_assert(offsetof(BtlShuffleMainBase_GetTextCollision, InLayoutId) == 0x000000, "Member 'BtlShuffleMainBase_GetTextCollision::InLayoutId' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_GetTextCollision, ReturnValue) == 0x000004, "Member 'BtlShuffleMainBase_GetTextCollision::ReturnValue' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.InitLayoutDataTable
// 0x0010 (0x0010 - 0x0000)
struct BtlShuffleMainBase_InitLayoutDataTable final
{
public:
	class UDataTable*                             PLayoutData;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             PTextLayoutData;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_InitLayoutDataTable) == 0x000008, "Wrong alignment on BtlShuffleMainBase_InitLayoutDataTable");
static_assert(sizeof(BtlShuffleMainBase_InitLayoutDataTable) == 0x000010, "Wrong size on BtlShuffleMainBase_InitLayoutDataTable");
static_assert(offsetof(BtlShuffleMainBase_InitLayoutDataTable, PLayoutData) == 0x000000, "Member 'BtlShuffleMainBase_InitLayoutDataTable::PLayoutData' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_InitLayoutDataTable, PTextLayoutData) == 0x000008, "Member 'BtlShuffleMainBase_InitLayoutDataTable::PTextLayoutData' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.RunStateAllGetBonus
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_RunStateAllGetBonus final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_RunStateAllGetBonus) == 0x000004, "Wrong alignment on BtlShuffleMainBase_RunStateAllGetBonus");
static_assert(sizeof(BtlShuffleMainBase_RunStateAllGetBonus) == 0x000004, "Wrong size on BtlShuffleMainBase_RunStateAllGetBonus");
static_assert(offsetof(BtlShuffleMainBase_RunStateAllGetBonus, DeltaTime) == 0x000000, "Member 'BtlShuffleMainBase_RunStateAllGetBonus::DeltaTime' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.RunStateEffectAllGetBonus
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_RunStateEffectAllGetBonus final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_RunStateEffectAllGetBonus) == 0x000004, "Wrong alignment on BtlShuffleMainBase_RunStateEffectAllGetBonus");
static_assert(sizeof(BtlShuffleMainBase_RunStateEffectAllGetBonus) == 0x000004, "Wrong size on BtlShuffleMainBase_RunStateEffectAllGetBonus");
static_assert(offsetof(BtlShuffleMainBase_RunStateEffectAllGetBonus, DeltaTime) == 0x000000, "Member 'BtlShuffleMainBase_RunStateEffectAllGetBonus::DeltaTime' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.RunStateEffectCard
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_RunStateEffectCard final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_RunStateEffectCard) == 0x000004, "Wrong alignment on BtlShuffleMainBase_RunStateEffectCard");
static_assert(sizeof(BtlShuffleMainBase_RunStateEffectCard) == 0x000004, "Wrong size on BtlShuffleMainBase_RunStateEffectCard");
static_assert(offsetof(BtlShuffleMainBase_RunStateEffectCard, DeltaTime) == 0x000000, "Member 'BtlShuffleMainBase_RunStateEffectCard::DeltaTime' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.RunStateEnter
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_RunStateEnter final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_RunStateEnter) == 0x000004, "Wrong alignment on BtlShuffleMainBase_RunStateEnter");
static_assert(sizeof(BtlShuffleMainBase_RunStateEnter) == 0x000004, "Wrong size on BtlShuffleMainBase_RunStateEnter");
static_assert(offsetof(BtlShuffleMainBase_RunStateEnter, DeltaTime) == 0x000000, "Member 'BtlShuffleMainBase_RunStateEnter::DeltaTime' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.RunStateExit
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_RunStateExit final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_RunStateExit) == 0x000004, "Wrong alignment on BtlShuffleMainBase_RunStateExit");
static_assert(sizeof(BtlShuffleMainBase_RunStateExit) == 0x000004, "Wrong size on BtlShuffleMainBase_RunStateExit");
static_assert(offsetof(BtlShuffleMainBase_RunStateExit, DeltaTime) == 0x000000, "Member 'BtlShuffleMainBase_RunStateExit::DeltaTime' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.RunStateSelectCard
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_RunStateSelectCard final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_RunStateSelectCard) == 0x000004, "Wrong alignment on BtlShuffleMainBase_RunStateSelectCard");
static_assert(sizeof(BtlShuffleMainBase_RunStateSelectCard) == 0x000004, "Wrong size on BtlShuffleMainBase_RunStateSelectCard");
static_assert(offsetof(BtlShuffleMainBase_RunStateSelectCard, DeltaTime) == 0x000000, "Member 'BtlShuffleMainBase_RunStateSelectCard::DeltaTime' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.RunStateSelectCardAllGetBonus
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_RunStateSelectCardAllGetBonus final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_RunStateSelectCardAllGetBonus) == 0x000004, "Wrong alignment on BtlShuffleMainBase_RunStateSelectCardAllGetBonus");
static_assert(sizeof(BtlShuffleMainBase_RunStateSelectCardAllGetBonus) == 0x000004, "Wrong size on BtlShuffleMainBase_RunStateSelectCardAllGetBonus");
static_assert(offsetof(BtlShuffleMainBase_RunStateSelectCardAllGetBonus, DeltaTime) == 0x000000, "Member 'BtlShuffleMainBase_RunStateSelectCardAllGetBonus::DeltaTime' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.RunStateSelectPersona
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_RunStateSelectPersona final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_RunStateSelectPersona) == 0x000004, "Wrong alignment on BtlShuffleMainBase_RunStateSelectPersona");
static_assert(sizeof(BtlShuffleMainBase_RunStateSelectPersona) == 0x000004, "Wrong size on BtlShuffleMainBase_RunStateSelectPersona");
static_assert(offsetof(BtlShuffleMainBase_RunStateSelectPersona, DeltaTime) == 0x000000, "Member 'BtlShuffleMainBase_RunStateSelectPersona::DeltaTime' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.SecondTextCardInStateEffect
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_SecondTextCardInStateEffect final
{
public:
	int32                                         Idx;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_SecondTextCardInStateEffect) == 0x000004, "Wrong alignment on BtlShuffleMainBase_SecondTextCardInStateEffect");
static_assert(sizeof(BtlShuffleMainBase_SecondTextCardInStateEffect) == 0x000004, "Wrong size on BtlShuffleMainBase_SecondTextCardInStateEffect");
static_assert(offsetof(BtlShuffleMainBase_SecondTextCardInStateEffect, Idx) == 0x000000, "Member 'BtlShuffleMainBase_SecondTextCardInStateEffect::Idx' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.SetAlphaPersonaList
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_SetAlphaPersonaList final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_SetAlphaPersonaList) == 0x000004, "Wrong alignment on BtlShuffleMainBase_SetAlphaPersonaList");
static_assert(sizeof(BtlShuffleMainBase_SetAlphaPersonaList) == 0x000004, "Wrong size on BtlShuffleMainBase_SetAlphaPersonaList");
static_assert(offsetof(BtlShuffleMainBase_SetAlphaPersonaList, Alpha) == 0x000000, "Member 'BtlShuffleMainBase_SetAlphaPersonaList::Alpha' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.SetBmdValue
// 0x0048 (0x0048 - 0x0000)
struct BtlShuffleMainBase_SetBmdValue final
{
public:
	class UBtlGuiDrawObjectMsg*                   PMsg;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value1;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value2;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value3;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value4;                                            // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_SetBmdValue) == 0x000008, "Wrong alignment on BtlShuffleMainBase_SetBmdValue");
static_assert(sizeof(BtlShuffleMainBase_SetBmdValue) == 0x000048, "Wrong size on BtlShuffleMainBase_SetBmdValue");
static_assert(offsetof(BtlShuffleMainBase_SetBmdValue, PMsg) == 0x000000, "Member 'BtlShuffleMainBase_SetBmdValue::PMsg' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_SetBmdValue, Value1) == 0x000008, "Member 'BtlShuffleMainBase_SetBmdValue::Value1' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_SetBmdValue, Value2) == 0x000018, "Member 'BtlShuffleMainBase_SetBmdValue::Value2' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_SetBmdValue, Value3) == 0x000028, "Member 'BtlShuffleMainBase_SetBmdValue::Value3' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_SetBmdValue, Value4) == 0x000038, "Member 'BtlShuffleMainBase_SetBmdValue::Value4' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.SetEndArcanaBurstInFlag
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_SetEndArcanaBurstInFlag final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_SetEndArcanaBurstInFlag) == 0x000001, "Wrong alignment on BtlShuffleMainBase_SetEndArcanaBurstInFlag");
static_assert(sizeof(BtlShuffleMainBase_SetEndArcanaBurstInFlag) == 0x000001, "Wrong size on BtlShuffleMainBase_SetEndArcanaBurstInFlag");
static_assert(offsetof(BtlShuffleMainBase_SetEndArcanaBurstInFlag, Value) == 0x000000, "Member 'BtlShuffleMainBase_SetEndArcanaBurstInFlag::Value' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.SetEndCardInAnime
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_SetEndCardInAnime final
{
public:
	bool                                          Input;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_SetEndCardInAnime) == 0x000001, "Wrong alignment on BtlShuffleMainBase_SetEndCardInAnime");
static_assert(sizeof(BtlShuffleMainBase_SetEndCardInAnime) == 0x000001, "Wrong size on BtlShuffleMainBase_SetEndCardInAnime");
static_assert(offsetof(BtlShuffleMainBase_SetEndCardInAnime, Input) == 0x000000, "Member 'BtlShuffleMainBase_SetEndCardInAnime::Input' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.SetEndPersonaListInFlag
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_SetEndPersonaListInFlag final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_SetEndPersonaListInFlag) == 0x000001, "Wrong alignment on BtlShuffleMainBase_SetEndPersonaListInFlag");
static_assert(sizeof(BtlShuffleMainBase_SetEndPersonaListInFlag) == 0x000001, "Wrong size on BtlShuffleMainBase_SetEndPersonaListInFlag");
static_assert(offsetof(BtlShuffleMainBase_SetEndPersonaListInFlag, Value) == 0x000000, "Member 'BtlShuffleMainBase_SetEndPersonaListInFlag::Value' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.SetKeyHelp
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_SetKeyHelp final
{
public:
	EBtlShuffleKeyHelpState                       State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_SetKeyHelp) == 0x000001, "Wrong alignment on BtlShuffleMainBase_SetKeyHelp");
static_assert(sizeof(BtlShuffleMainBase_SetKeyHelp) == 0x000001, "Wrong size on BtlShuffleMainBase_SetKeyHelp");
static_assert(offsetof(BtlShuffleMainBase_SetKeyHelp, State) == 0x000000, "Member 'BtlShuffleMainBase_SetKeyHelp::State' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.SetMsgVariableSelectCard
// 0x0018 (0x0018 - 0x0000)
struct BtlShuffleMainBase_SetMsgVariableSelectCard final
{
public:
	class UBtlGuiDrawObjectMsg*                   PMsg;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Idx;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PersonaID;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBonusCard;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlShuffleMainBase_SetMsgVariableSelectCard) == 0x000008, "Wrong alignment on BtlShuffleMainBase_SetMsgVariableSelectCard");
static_assert(sizeof(BtlShuffleMainBase_SetMsgVariableSelectCard) == 0x000018, "Wrong size on BtlShuffleMainBase_SetMsgVariableSelectCard");
static_assert(offsetof(BtlShuffleMainBase_SetMsgVariableSelectCard, PMsg) == 0x000000, "Member 'BtlShuffleMainBase_SetMsgVariableSelectCard::PMsg' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_SetMsgVariableSelectCard, Idx) == 0x000008, "Member 'BtlShuffleMainBase_SetMsgVariableSelectCard::Idx' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_SetMsgVariableSelectCard, PersonaID) == 0x00000C, "Member 'BtlShuffleMainBase_SetMsgVariableSelectCard::PersonaID' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_SetMsgVariableSelectCard, IsBonusCard) == 0x000010, "Member 'BtlShuffleMainBase_SetMsgVariableSelectCard::IsBonusCard' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.SetPersonaSkillHelp
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_SetPersonaSkillHelp final
{
public:
	bool                                          Use;                                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_SetPersonaSkillHelp) == 0x000001, "Wrong alignment on BtlShuffleMainBase_SetPersonaSkillHelp");
static_assert(sizeof(BtlShuffleMainBase_SetPersonaSkillHelp) == 0x000001, "Wrong size on BtlShuffleMainBase_SetPersonaSkillHelp");
static_assert(offsetof(BtlShuffleMainBase_SetPersonaSkillHelp, Use) == 0x000000, "Member 'BtlShuffleMainBase_SetPersonaSkillHelp::Use' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.SetPosPersonaList
// 0x0008 (0x0008 - 0x0000)
struct BtlShuffleMainBase_SetPosPersonaList final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_SetPosPersonaList) == 0x000004, "Wrong alignment on BtlShuffleMainBase_SetPosPersonaList");
static_assert(sizeof(BtlShuffleMainBase_SetPosPersonaList) == 0x000008, "Wrong size on BtlShuffleMainBase_SetPosPersonaList");
static_assert(offsetof(BtlShuffleMainBase_SetPosPersonaList, InPos) == 0x000000, "Member 'BtlShuffleMainBase_SetPosPersonaList::InPos' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.SetTouchCollision
// 0x0018 (0x0018 - 0x0000)
struct BtlShuffleMainBase_SetTouchCollision final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlShuffleMainBase_SetTouchCollision) == 0x000004, "Wrong alignment on BtlShuffleMainBase_SetTouchCollision");
static_assert(sizeof(BtlShuffleMainBase_SetTouchCollision) == 0x000018, "Wrong size on BtlShuffleMainBase_SetTouchCollision");
static_assert(offsetof(BtlShuffleMainBase_SetTouchCollision, Index_0) == 0x000000, "Member 'BtlShuffleMainBase_SetTouchCollision::Index_0' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_SetTouchCollision, X) == 0x000004, "Member 'BtlShuffleMainBase_SetTouchCollision::X' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_SetTouchCollision, Y) == 0x000008, "Member 'BtlShuffleMainBase_SetTouchCollision::Y' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_SetTouchCollision, Width) == 0x00000C, "Member 'BtlShuffleMainBase_SetTouchCollision::Width' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_SetTouchCollision, Height) == 0x000010, "Member 'BtlShuffleMainBase_SetTouchCollision::Height' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_SetTouchCollision, DrawPoint) == 0x000014, "Member 'BtlShuffleMainBase_SetTouchCollision::DrawPoint' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.StartMsg
// 0x0004 (0x0004 - 0x0000)
struct BtlShuffleMainBase_StartMsg final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_StartMsg) == 0x000004, "Wrong alignment on BtlShuffleMainBase_StartMsg");
static_assert(sizeof(BtlShuffleMainBase_StartMsg) == 0x000004, "Wrong size on BtlShuffleMainBase_StartMsg");
static_assert(offsetof(BtlShuffleMainBase_StartMsg, ID) == 0x000000, "Member 'BtlShuffleMainBase_StartMsg::ID' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.UpdateCardRotation
// 0x0008 (0x0008 - 0x0000)
struct BtlShuffleMainBase_UpdateCardRotation final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Idx;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_UpdateCardRotation) == 0x000004, "Wrong alignment on BtlShuffleMainBase_UpdateCardRotation");
static_assert(sizeof(BtlShuffleMainBase_UpdateCardRotation) == 0x000008, "Wrong size on BtlShuffleMainBase_UpdateCardRotation");
static_assert(offsetof(BtlShuffleMainBase_UpdateCardRotation, DeltaTime) == 0x000000, "Member 'BtlShuffleMainBase_UpdateCardRotation::DeltaTime' has a wrong offset!");
static_assert(offsetof(BtlShuffleMainBase_UpdateCardRotation, Idx) == 0x000004, "Member 'BtlShuffleMainBase_UpdateCardRotation::Idx' has a wrong offset!");

// Function xrd777.BtlShuffleMainBase.IsInMonadDoorAndNormalOrMore
// 0x0001 (0x0001 - 0x0000)
struct BtlShuffleMainBase_IsInMonadDoorAndNormalOrMore final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlShuffleMainBase_IsInMonadDoorAndNormalOrMore) == 0x000001, "Wrong alignment on BtlShuffleMainBase_IsInMonadDoorAndNormalOrMore");
static_assert(sizeof(BtlShuffleMainBase_IsInMonadDoorAndNormalOrMore) == 0x000001, "Wrong size on BtlShuffleMainBase_IsInMonadDoorAndNormalOrMore");
static_assert(offsetof(BtlShuffleMainBase_IsInMonadDoorAndNormalOrMore, ReturnValue) == 0x000000, "Member 'BtlShuffleMainBase_IsInMonadDoorAndNormalOrMore::ReturnValue' has a wrong offset!");

// Function xrd777.BtlSkill.CalcOnlyAbsorptionTime
// 0x0008 (0x0008 - 0x0000)
struct BtlSkill_CalcOnlyAbsorptionTime final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlSkill_CalcOnlyAbsorptionTime) == 0x000004, "Wrong alignment on BtlSkill_CalcOnlyAbsorptionTime");
static_assert(sizeof(BtlSkill_CalcOnlyAbsorptionTime) == 0x000008, "Wrong size on BtlSkill_CalcOnlyAbsorptionTime");
static_assert(offsetof(BtlSkill_CalcOnlyAbsorptionTime, Index_0) == 0x000000, "Member 'BtlSkill_CalcOnlyAbsorptionTime::Index_0' has a wrong offset!");
static_assert(offsetof(BtlSkill_CalcOnlyAbsorptionTime, ReturnValue) == 0x000004, "Member 'BtlSkill_CalcOnlyAbsorptionTime::ReturnValue' has a wrong offset!");

// Function xrd777.SuzukiDrawTestDraw.FromBPDraw
// 0x000C (0x000C - 0x0000)
struct SuzukiDrawTestDraw_FromBPDraw final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SuzukiDrawTestDraw_FromBPDraw) == 0x000004, "Wrong alignment on SuzukiDrawTestDraw_FromBPDraw");
static_assert(sizeof(SuzukiDrawTestDraw_FromBPDraw) == 0x00000C, "Wrong size on SuzukiDrawTestDraw_FromBPDraw");
static_assert(offsetof(SuzukiDrawTestDraw_FromBPDraw, X) == 0x000000, "Member 'SuzukiDrawTestDraw_FromBPDraw::X' has a wrong offset!");
static_assert(offsetof(SuzukiDrawTestDraw_FromBPDraw, Y) == 0x000004, "Member 'SuzukiDrawTestDraw_FromBPDraw::Y' has a wrong offset!");
static_assert(offsetof(SuzukiDrawTestDraw_FromBPDraw, Angle) == 0x000008, "Member 'SuzukiDrawTestDraw_FromBPDraw::Angle' has a wrong offset!");

// Function xrd777.SuzukiDrawTestDraw.SyncModelCapture
// 0x0040 (0x0040 - 0x0000)
struct SuzukiDrawTestDraw_SyncModelCapture final
{
public:
	struct FTransform                             ModelTransform;                                    // 0x0000(0x0030)(ConstParm, Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                NewGazeOffset;                                     // 0x0030(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x003C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SuzukiDrawTestDraw_SyncModelCapture) == 0x000010, "Wrong alignment on SuzukiDrawTestDraw_SyncModelCapture");
static_assert(sizeof(SuzukiDrawTestDraw_SyncModelCapture) == 0x000040, "Wrong size on SuzukiDrawTestDraw_SyncModelCapture");
static_assert(offsetof(SuzukiDrawTestDraw_SyncModelCapture, ModelTransform) == 0x000000, "Member 'SuzukiDrawTestDraw_SyncModelCapture::ModelTransform' has a wrong offset!");
static_assert(offsetof(SuzukiDrawTestDraw_SyncModelCapture, NewGazeOffset) == 0x000030, "Member 'SuzukiDrawTestDraw_SyncModelCapture::NewGazeOffset' has a wrong offset!");
static_assert(offsetof(SuzukiDrawTestDraw_SyncModelCapture, ReturnValue) == 0x00003C, "Member 'SuzukiDrawTestDraw_SyncModelCapture::ReturnValue' has a wrong offset!");

// Function xrd777.SuzukiDrawTestDraw.Update
// 0x0004 (0x0004 - 0x0000)
struct SuzukiDrawTestDraw_Update final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SuzukiDrawTestDraw_Update) == 0x000004, "Wrong alignment on SuzukiDrawTestDraw_Update");
static_assert(sizeof(SuzukiDrawTestDraw_Update) == 0x000004, "Wrong size on SuzukiDrawTestDraw_Update");
static_assert(offsetof(SuzukiDrawTestDraw_Update, InDeltaTime) == 0x000000, "Member 'SuzukiDrawTestDraw_Update::InDeltaTime' has a wrong offset!");

// Function xrd777.BtlSkillGeneratorComponent.GetSkill
// 0x0008 (0x0008 - 0x0000)
struct BtlSkillGeneratorComponent_GetSkill final
{
public:
	class ABtlSkill*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlSkillGeneratorComponent_GetSkill) == 0x000008, "Wrong alignment on BtlSkillGeneratorComponent_GetSkill");
static_assert(sizeof(BtlSkillGeneratorComponent_GetSkill) == 0x000008, "Wrong size on BtlSkillGeneratorComponent_GetSkill");
static_assert(offsetof(BtlSkillGeneratorComponent_GetSkill, ReturnValue) == 0x000000, "Member 'BtlSkillGeneratorComponent_GetSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlSkillGeneratorComponent.RequestCreateSkill
// 0x0008 (0x0008 - 0x0000)
struct BtlSkillGeneratorComponent_RequestCreateSkill final
{
public:
	int32                                         SkillId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlSkillGeneratorComponent_RequestCreateSkill) == 0x000004, "Wrong alignment on BtlSkillGeneratorComponent_RequestCreateSkill");
static_assert(sizeof(BtlSkillGeneratorComponent_RequestCreateSkill) == 0x000008, "Wrong size on BtlSkillGeneratorComponent_RequestCreateSkill");
static_assert(offsetof(BtlSkillGeneratorComponent_RequestCreateSkill, SkillId) == 0x000000, "Member 'BtlSkillGeneratorComponent_RequestCreateSkill::SkillId' has a wrong offset!");
static_assert(offsetof(BtlSkillGeneratorComponent_RequestCreateSkill, ReturnValue) == 0x000004, "Member 'BtlSkillGeneratorComponent_RequestCreateSkill::ReturnValue' has a wrong offset!");

// Function xrd777.BtlSoundBPFuncLib.BtlPCVoicePlay
// 0x0010 (0x0010 - 0x0000)
struct BtlSoundBPFuncLib_BtlPCVoicePlay final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlSoundBPFuncLib_BtlPCVoicePlay) == 0x000008, "Wrong alignment on BtlSoundBPFuncLib_BtlPCVoicePlay");
static_assert(sizeof(BtlSoundBPFuncLib_BtlPCVoicePlay) == 0x000010, "Wrong size on BtlSoundBPFuncLib_BtlPCVoicePlay");
static_assert(offsetof(BtlSoundBPFuncLib_BtlPCVoicePlay, Actor) == 0x000000, "Member 'BtlSoundBPFuncLib_BtlPCVoicePlay::Actor' has a wrong offset!");
static_assert(offsetof(BtlSoundBPFuncLib_BtlPCVoicePlay, CueId) == 0x000008, "Member 'BtlSoundBPFuncLib_BtlPCVoicePlay::CueId' has a wrong offset!");

// Function xrd777.BtlSoundBPFuncLib.BtlPCVoicePlay_Command
// 0x0008 (0x0008 - 0x0000)
struct BtlSoundBPFuncLib_BtlPCVoicePlay_Command final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlSoundBPFuncLib_BtlPCVoicePlay_Command) == 0x000008, "Wrong alignment on BtlSoundBPFuncLib_BtlPCVoicePlay_Command");
static_assert(sizeof(BtlSoundBPFuncLib_BtlPCVoicePlay_Command) == 0x000008, "Wrong size on BtlSoundBPFuncLib_BtlPCVoicePlay_Command");
static_assert(offsetof(BtlSoundBPFuncLib_BtlPCVoicePlay_Command, Actor) == 0x000000, "Member 'BtlSoundBPFuncLib_BtlPCVoicePlay_Command::Actor' has a wrong offset!");

// Function xrd777.BtlSoundBPFuncLib.BtlPCVoicePlay_HeroUI
// 0x0010 (0x0010 - 0x0000)
struct BtlSoundBPFuncLib_BtlPCVoicePlay_HeroUI final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlSoundBPFuncLib_BtlPCVoicePlay_HeroUI) == 0x000008, "Wrong alignment on BtlSoundBPFuncLib_BtlPCVoicePlay_HeroUI");
static_assert(sizeof(BtlSoundBPFuncLib_BtlPCVoicePlay_HeroUI) == 0x000010, "Wrong size on BtlSoundBPFuncLib_BtlPCVoicePlay_HeroUI");
static_assert(offsetof(BtlSoundBPFuncLib_BtlPCVoicePlay_HeroUI, Actor) == 0x000000, "Member 'BtlSoundBPFuncLib_BtlPCVoicePlay_HeroUI::Actor' has a wrong offset!");
static_assert(offsetof(BtlSoundBPFuncLib_BtlPCVoicePlay_HeroUI, Type) == 0x000008, "Member 'BtlSoundBPFuncLib_BtlPCVoicePlay_HeroUI::Type' has a wrong offset!");

// Function xrd777.BtlSoundBPFuncLib.BtlPCVoicePlay_ShiftSelect
// 0x0008 (0x0008 - 0x0000)
struct BtlSoundBPFuncLib_BtlPCVoicePlay_ShiftSelect final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlSoundBPFuncLib_BtlPCVoicePlay_ShiftSelect) == 0x000008, "Wrong alignment on BtlSoundBPFuncLib_BtlPCVoicePlay_ShiftSelect");
static_assert(sizeof(BtlSoundBPFuncLib_BtlPCVoicePlay_ShiftSelect) == 0x000008, "Wrong size on BtlSoundBPFuncLib_BtlPCVoicePlay_ShiftSelect");
static_assert(offsetof(BtlSoundBPFuncLib_BtlPCVoicePlay_ShiftSelect, Actor) == 0x000000, "Member 'BtlSoundBPFuncLib_BtlPCVoicePlay_ShiftSelect::Actor' has a wrong offset!");

// Function xrd777.BtlSoundBPFuncLib.BtlPCVoicePlayNotLipsync
// 0x0010 (0x0010 - 0x0000)
struct BtlSoundBPFuncLib_BtlPCVoicePlayNotLipsync final
{
public:
	class ABtlActor*                              Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlSoundBPFuncLib_BtlPCVoicePlayNotLipsync) == 0x000008, "Wrong alignment on BtlSoundBPFuncLib_BtlPCVoicePlayNotLipsync");
static_assert(sizeof(BtlSoundBPFuncLib_BtlPCVoicePlayNotLipsync) == 0x000010, "Wrong size on BtlSoundBPFuncLib_BtlPCVoicePlayNotLipsync");
static_assert(offsetof(BtlSoundBPFuncLib_BtlPCVoicePlayNotLipsync, Actor) == 0x000000, "Member 'BtlSoundBPFuncLib_BtlPCVoicePlayNotLipsync::Actor' has a wrong offset!");
static_assert(offsetof(BtlSoundBPFuncLib_BtlPCVoicePlayNotLipsync, CueId) == 0x000008, "Member 'BtlSoundBPFuncLib_BtlPCVoicePlayNotLipsync::CueId' has a wrong offset!");

// Function xrd777.BtlSoundBPFuncLib.BtlSEPlay
// 0x0004 (0x0004 - 0x0000)
struct BtlSoundBPFuncLib_BtlSEPlay final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlSoundBPFuncLib_BtlSEPlay) == 0x000004, "Wrong alignment on BtlSoundBPFuncLib_BtlSEPlay");
static_assert(sizeof(BtlSoundBPFuncLib_BtlSEPlay) == 0x000004, "Wrong size on BtlSoundBPFuncLib_BtlSEPlay");
static_assert(offsetof(BtlSoundBPFuncLib_BtlSEPlay, CueId) == 0x000000, "Member 'BtlSoundBPFuncLib_BtlSEPlay::CueId' has a wrong offset!");

// Function xrd777.SteamInputLibrary.GetInputTypeName
// 0x0008 (0x0008 - 0x0000)
struct SteamInputLibrary_GetInputTypeName final
{
public:
	int32                                         NIndex;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESteamControllerType                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SteamInputLibrary_GetInputTypeName) == 0x000004, "Wrong alignment on SteamInputLibrary_GetInputTypeName");
static_assert(sizeof(SteamInputLibrary_GetInputTypeName) == 0x000008, "Wrong size on SteamInputLibrary_GetInputTypeName");
static_assert(offsetof(SteamInputLibrary_GetInputTypeName, NIndex) == 0x000000, "Member 'SteamInputLibrary_GetInputTypeName::NIndex' has a wrong offset!");
static_assert(offsetof(SteamInputLibrary_GetInputTypeName, ReturnValue) == 0x000004, "Member 'SteamInputLibrary_GetInputTypeName::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputInitialize
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputInitialize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputInitialize) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputInitialize");
static_assert(sizeof(SteamInputLibrary_SteamInputInitialize) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputInitialize");
static_assert(offsetof(SteamInputLibrary_SteamInputInitialize, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputInitialize::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_L1
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_L1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_L1) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_L1");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_L1) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_L1");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_L1, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_L1::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_L2
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_L2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_L2) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_L2");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_L2) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_L2");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_L2, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_L2::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_L3
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_L3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_L3) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_L3");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_L3) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_L3");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_L3, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_L3::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_LeftDown
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_LeftDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_LeftDown) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_LeftDown");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_LeftDown) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_LeftDown");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_LeftDown, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_LeftDown::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_LeftLeft
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_LeftLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_LeftLeft) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_LeftLeft");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_LeftLeft) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_LeftLeft");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_LeftLeft, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_LeftLeft::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_LeftRight
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_LeftRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_LeftRight) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_LeftRight");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_LeftRight) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_LeftRight");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_LeftRight, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_LeftRight::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_LeftUp
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_LeftUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_LeftUp) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_LeftUp");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_LeftUp) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_LeftUp");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_LeftUp, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_LeftUp::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_R1
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_R1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_R1) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_R1");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_R1) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_R1");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_R1, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_R1::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_R2
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_R2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_R2) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_R2");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_R2) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_R2");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_R2, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_R2::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_R3
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_R3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_R3) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_R3");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_R3) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_R3");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_R3, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_R3::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_RightDown
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_RightDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_RightDown) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_RightDown");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_RightDown) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_RightDown");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_RightDown, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_RightDown::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_RightLeft
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_RightLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_RightLeft) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_RightLeft");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_RightLeft) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_RightLeft");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_RightLeft, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_RightLeft::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_RightRight
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_RightRight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_RightRight) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_RightRight");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_RightRight) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_RightRight");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_RightRight, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_RightRight::ReturnValue' has a wrong offset!");

// Function xrd777.SteamInputLibrary.SteamInputPadPress_RightUp
// 0x0001 (0x0001 - 0x0000)
struct SteamInputLibrary_SteamInputPadPress_RightUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SteamInputLibrary_SteamInputPadPress_RightUp) == 0x000001, "Wrong alignment on SteamInputLibrary_SteamInputPadPress_RightUp");
static_assert(sizeof(SteamInputLibrary_SteamInputPadPress_RightUp) == 0x000001, "Wrong size on SteamInputLibrary_SteamInputPadPress_RightUp");
static_assert(offsetof(SteamInputLibrary_SteamInputPadPress_RightUp, ReturnValue) == 0x000000, "Member 'SteamInputLibrary_SteamInputPadPress_RightUp::ReturnValue' has a wrong offset!");

// Function xrd777.BtlTargetsManagerComponent.GetCursorTargets
// 0x0010 (0x0010 - 0x0000)
struct BtlTargetsManagerComponent_GetCursorTargets final
{
public:
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlTargetsManagerComponent_GetCursorTargets) == 0x000008, "Wrong alignment on BtlTargetsManagerComponent_GetCursorTargets");
static_assert(sizeof(BtlTargetsManagerComponent_GetCursorTargets) == 0x000010, "Wrong size on BtlTargetsManagerComponent_GetCursorTargets");
static_assert(offsetof(BtlTargetsManagerComponent_GetCursorTargets, ReturnValue) == 0x000000, "Member 'BtlTargetsManagerComponent_GetCursorTargets::ReturnValue' has a wrong offset!");

// Function xrd777.BtlTargetsManagerComponent.GetEffectTargets
// 0x0010 (0x0010 - 0x0000)
struct BtlTargetsManagerComponent_GetEffectTargets final
{
public:
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlTargetsManagerComponent_GetEffectTargets) == 0x000008, "Wrong alignment on BtlTargetsManagerComponent_GetEffectTargets");
static_assert(sizeof(BtlTargetsManagerComponent_GetEffectTargets) == 0x000010, "Wrong size on BtlTargetsManagerComponent_GetEffectTargets");
static_assert(offsetof(BtlTargetsManagerComponent_GetEffectTargets, ReturnValue) == 0x000000, "Member 'BtlTargetsManagerComponent_GetEffectTargets::ReturnValue' has a wrong offset!");

// Function xrd777.BtlTargetsManagerComponent.GetMainCharacter
// 0x0008 (0x0008 - 0x0000)
struct BtlTargetsManagerComponent_GetMainCharacter final
{
public:
	class ABtlActor*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlTargetsManagerComponent_GetMainCharacter) == 0x000008, "Wrong alignment on BtlTargetsManagerComponent_GetMainCharacter");
static_assert(sizeof(BtlTargetsManagerComponent_GetMainCharacter) == 0x000008, "Wrong size on BtlTargetsManagerComponent_GetMainCharacter");
static_assert(offsetof(BtlTargetsManagerComponent_GetMainCharacter, ReturnValue) == 0x000000, "Member 'BtlTargetsManagerComponent_GetMainCharacter::ReturnValue' has a wrong offset!");

// Function xrd777.BtlTargetsManagerComponent.GetTargets
// 0x0010 (0x0010 - 0x0000)
struct BtlTargetsManagerComponent_GetTargets final
{
public:
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlTargetsManagerComponent_GetTargets) == 0x000008, "Wrong alignment on BtlTargetsManagerComponent_GetTargets");
static_assert(sizeof(BtlTargetsManagerComponent_GetTargets) == 0x000010, "Wrong size on BtlTargetsManagerComponent_GetTargets");
static_assert(offsetof(BtlTargetsManagerComponent_GetTargets, ReturnValue) == 0x000000, "Member 'BtlTargetsManagerComponent_GetTargets::ReturnValue' has a wrong offset!");

// Function xrd777.BtlTargetsManagerComponent.SetCursorTargets
// 0x0010 (0x0010 - 0x0000)
struct BtlTargetsManagerComponent_SetCursorTargets final
{
public:
	TArray<class ABtlActor*>                      List;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlTargetsManagerComponent_SetCursorTargets) == 0x000008, "Wrong alignment on BtlTargetsManagerComponent_SetCursorTargets");
static_assert(sizeof(BtlTargetsManagerComponent_SetCursorTargets) == 0x000010, "Wrong size on BtlTargetsManagerComponent_SetCursorTargets");
static_assert(offsetof(BtlTargetsManagerComponent_SetCursorTargets, List) == 0x000000, "Member 'BtlTargetsManagerComponent_SetCursorTargets::List' has a wrong offset!");

// Function xrd777.BtlTargetsManagerComponent.SetMainCharacter
// 0x0008 (0x0008 - 0x0000)
struct BtlTargetsManagerComponent_SetMainCharacter final
{
public:
	class ABtlActor*                              Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlTargetsManagerComponent_SetMainCharacter) == 0x000008, "Wrong alignment on BtlTargetsManagerComponent_SetMainCharacter");
static_assert(sizeof(BtlTargetsManagerComponent_SetMainCharacter) == 0x000008, "Wrong size on BtlTargetsManagerComponent_SetMainCharacter");
static_assert(offsetof(BtlTargetsManagerComponent_SetMainCharacter, Character) == 0x000000, "Member 'BtlTargetsManagerComponent_SetMainCharacter::Character' has a wrong offset!");

// Function xrd777.BtlTargetsManagerComponent.SetTargets
// 0x0010 (0x0010 - 0x0000)
struct BtlTargetsManagerComponent_SetTargets final
{
public:
	TArray<class ABtlActor*>                      List;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlTargetsManagerComponent_SetTargets) == 0x000008, "Wrong alignment on BtlTargetsManagerComponent_SetTargets");
static_assert(sizeof(BtlTargetsManagerComponent_SetTargets) == 0x000010, "Wrong size on BtlTargetsManagerComponent_SetTargets");
static_assert(offsetof(BtlTargetsManagerComponent_SetTargets, List) == 0x000000, "Member 'BtlTargetsManagerComponent_SetTargets::List' has a wrong offset!");

// Function xrd777.BtlTargetsManagerComponent.CheckTargetIsLatestActionCharacter
// 0x0010 (0x0010 - 0x0000)
struct BtlTargetsManagerComponent_CheckTargetIsLatestActionCharacter final
{
public:
	class UBtlCoreComponent*                      PCore;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlTargetsManagerComponent_CheckTargetIsLatestActionCharacter) == 0x000008, "Wrong alignment on BtlTargetsManagerComponent_CheckTargetIsLatestActionCharacter");
static_assert(sizeof(BtlTargetsManagerComponent_CheckTargetIsLatestActionCharacter) == 0x000010, "Wrong size on BtlTargetsManagerComponent_CheckTargetIsLatestActionCharacter");
static_assert(offsetof(BtlTargetsManagerComponent_CheckTargetIsLatestActionCharacter, PCore) == 0x000000, "Member 'BtlTargetsManagerComponent_CheckTargetIsLatestActionCharacter::PCore' has a wrong offset!");
static_assert(offsetof(BtlTargetsManagerComponent_CheckTargetIsLatestActionCharacter, ReturnValue) == 0x000008, "Member 'BtlTargetsManagerComponent_CheckTargetIsLatestActionCharacter::ReturnValue' has a wrong offset!");

// Function xrd777.BtlTargetsManagerComponent.CheckTargetIsNextActionCharacter
// 0x0010 (0x0010 - 0x0000)
struct BtlTargetsManagerComponent_CheckTargetIsNextActionCharacter final
{
public:
	class UBtlCoreComponent*                      PCore;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BtlTargetsManagerComponent_CheckTargetIsNextActionCharacter) == 0x000008, "Wrong alignment on BtlTargetsManagerComponent_CheckTargetIsNextActionCharacter");
static_assert(sizeof(BtlTargetsManagerComponent_CheckTargetIsNextActionCharacter) == 0x000010, "Wrong size on BtlTargetsManagerComponent_CheckTargetIsNextActionCharacter");
static_assert(offsetof(BtlTargetsManagerComponent_CheckTargetIsNextActionCharacter, PCore) == 0x000000, "Member 'BtlTargetsManagerComponent_CheckTargetIsNextActionCharacter::PCore' has a wrong offset!");
static_assert(offsetof(BtlTargetsManagerComponent_CheckTargetIsNextActionCharacter, ReturnValue) == 0x000008, "Member 'BtlTargetsManagerComponent_CheckTargetIsNextActionCharacter::ReturnValue' has a wrong offset!");

// Function xrd777.BtlTargetsManagerComponent.GetConstTargets
// 0x0010 (0x0010 - 0x0000)
struct BtlTargetsManagerComponent_GetConstTargets final
{
public:
	TArray<class ABtlActor*>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BtlTargetsManagerComponent_GetConstTargets) == 0x000008, "Wrong alignment on BtlTargetsManagerComponent_GetConstTargets");
static_assert(sizeof(BtlTargetsManagerComponent_GetConstTargets) == 0x000010, "Wrong size on BtlTargetsManagerComponent_GetConstTargets");
static_assert(offsetof(BtlTargetsManagerComponent_GetConstTargets, ReturnValue) == 0x000000, "Member 'BtlTargetsManagerComponent_GetConstTargets::ReturnValue' has a wrong offset!");

// Function xrd777.CharacterLipsyncAppComponent.OnChangeLipsyncState
// 0x0018 (0x0018 - 0x0000)
struct CharacterLipsyncAppComponent_OnChangeLipsyncState final
{
public:
	ELipSyncAppStateType                          LipSyncAppStateType;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLipsyncAppListener                    LipsyncParam;                                      // 0x0004(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterLipsyncAppComponent_OnChangeLipsyncState) == 0x000004, "Wrong alignment on CharacterLipsyncAppComponent_OnChangeLipsyncState");
static_assert(sizeof(CharacterLipsyncAppComponent_OnChangeLipsyncState) == 0x000018, "Wrong size on CharacterLipsyncAppComponent_OnChangeLipsyncState");
static_assert(offsetof(CharacterLipsyncAppComponent_OnChangeLipsyncState, LipSyncAppStateType) == 0x000000, "Member 'CharacterLipsyncAppComponent_OnChangeLipsyncState::LipSyncAppStateType' has a wrong offset!");
static_assert(offsetof(CharacterLipsyncAppComponent_OnChangeLipsyncState, LipsyncParam) == 0x000004, "Member 'CharacterLipsyncAppComponent_OnChangeLipsyncState::LipsyncParam' has a wrong offset!");

// Function xrd777.CharacterLipsyncAppComponent.GetLipsyncSubsystem
// 0x0008 (0x0008 - 0x0000)
struct CharacterLipsyncAppComponent_GetLipsyncSubsystem final
{
public:
	class ULipsyncAppObserverSubsystem*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterLipsyncAppComponent_GetLipsyncSubsystem) == 0x000008, "Wrong alignment on CharacterLipsyncAppComponent_GetLipsyncSubsystem");
static_assert(sizeof(CharacterLipsyncAppComponent_GetLipsyncSubsystem) == 0x000008, "Wrong size on CharacterLipsyncAppComponent_GetLipsyncSubsystem");
static_assert(offsetof(CharacterLipsyncAppComponent_GetLipsyncSubsystem, ReturnValue) == 0x000000, "Member 'CharacterLipsyncAppComponent_GetLipsyncSubsystem::ReturnValue' has a wrong offset!");

// Function xrd777.CharacterSimpleLipsAnimAppSubsystem.FinishSpeakCharacter
// 0x0008 (0x0008 - 0x0000)
struct CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacter final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacter) == 0x000004, "Wrong alignment on CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacter");
static_assert(sizeof(CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacter) == 0x000008, "Wrong size on CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacter");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacter, CharcterCategoryType) == 0x000000, "Member 'CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacter::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacter, CharaIndexID) == 0x000004, "Member 'CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacter::CharaIndexID' has a wrong offset!");

// Function xrd777.CharacterSimpleLipsAnimAppSubsystem.FinishSpeakCharacterPtr
// 0x0008 (0x0008 - 0x0000)
struct CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacterPtr final
{
public:
	class AActor*                                 ActorPtr;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacterPtr) == 0x000008, "Wrong alignment on CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacterPtr");
static_assert(sizeof(CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacterPtr) == 0x000008, "Wrong size on CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacterPtr");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacterPtr, ActorPtr) == 0x000000, "Member 'CharacterSimpleLipsAnimAppSubsystem_FinishSpeakCharacterPtr::ActorPtr' has a wrong offset!");

// Function xrd777.CharacterSimpleLipsAnimAppSubsystem.StartSpeakCharacter
// 0x0010 (0x0010 - 0x0000)
struct CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequestedSpeakTotalTime;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter) == 0x000004, "Wrong alignment on CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter");
static_assert(sizeof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter) == 0x000010, "Wrong size on CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter, CharcterCategoryType) == 0x000000, "Member 'CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter, CharaIndexID) == 0x000004, "Member 'CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter::CharaIndexID' has a wrong offset!");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter, RequestedSpeakTotalTime) == 0x000008, "Member 'CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter::RequestedSpeakTotalTime' has a wrong offset!");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter, bOverride) == 0x00000C, "Member 'CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacter::bOverride' has a wrong offset!");

// Function xrd777.CharacterSimpleLipsAnimAppSubsystem.StartSpeakCharacterPtr
// 0x0018 (0x0018 - 0x0000)
struct CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr final
{
public:
	class AActor*                                 ActorPtr;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RequestedSpeakTotalTime;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MajorPlayerID;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorPlayerID;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr) == 0x000008, "Wrong alignment on CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr");
static_assert(sizeof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr) == 0x000018, "Wrong size on CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr, ActorPtr) == 0x000000, "Member 'CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr::ActorPtr' has a wrong offset!");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr, RequestedSpeakTotalTime) == 0x000008, "Member 'CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr::RequestedSpeakTotalTime' has a wrong offset!");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr, MajorPlayerID) == 0x00000C, "Member 'CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr::MajorPlayerID' has a wrong offset!");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr, MinorPlayerID) == 0x000010, "Member 'CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr::MinorPlayerID' has a wrong offset!");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr, bOverride) == 0x000014, "Member 'CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterPtr::bOverride' has a wrong offset!");

// Function xrd777.CharacterSimpleLipsAnimAppSubsystem.StartSpeakCharacterWithCustomParam
// 0x0038 (0x0038 - 0x0000)
struct CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterWithCustomParam final
{
public:
	struct FCharacterSimpleLipsAnimAppParam       SimpleLipsParam;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bOverride;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterWithCustomParam) == 0x000008, "Wrong alignment on CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterWithCustomParam");
static_assert(sizeof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterWithCustomParam) == 0x000038, "Wrong size on CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterWithCustomParam");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterWithCustomParam, SimpleLipsParam) == 0x000000, "Member 'CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterWithCustomParam::SimpleLipsParam' has a wrong offset!");
static_assert(offsetof(CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterWithCustomParam, bOverride) == 0x000030, "Member 'CharacterSimpleLipsAnimAppSubsystem_StartSpeakCharacterWithCustomParam::bOverride' has a wrong offset!");

// Function xrd777.CldBpFuncLib.CheckWinterCloth
// 0x0001 (0x0001 - 0x0000)
struct CldBpFuncLib_CheckWinterCloth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_CheckWinterCloth) == 0x000001, "Wrong alignment on CldBpFuncLib_CheckWinterCloth");
static_assert(sizeof(CldBpFuncLib_CheckWinterCloth) == 0x000001, "Wrong size on CldBpFuncLib_CheckWinterCloth");
static_assert(offsetof(CldBpFuncLib_CheckWinterCloth, ReturnValue) == 0x000000, "Member 'CldBpFuncLib_CheckWinterCloth::ReturnValue' has a wrong offset!");

// Function xrd777.CldBpFuncLib.CldCheckDayDispInOut
// 0x0001 (0x0001 - 0x0000)
struct CldBpFuncLib_CldCheckDayDispInOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_CldCheckDayDispInOut) == 0x000001, "Wrong alignment on CldBpFuncLib_CldCheckDayDispInOut");
static_assert(sizeof(CldBpFuncLib_CldCheckDayDispInOut) == 0x000001, "Wrong size on CldBpFuncLib_CldCheckDayDispInOut");
static_assert(offsetof(CldBpFuncLib_CldCheckDayDispInOut, ReturnValue) == 0x000000, "Member 'CldBpFuncLib_CldCheckDayDispInOut::ReturnValue' has a wrong offset!");

// Function xrd777.CldBpFuncLib.CldGetDayDispState
// 0x0001 (0x0001 - 0x0000)
struct CldBpFuncLib_CldGetDayDispState final
{
public:
	ECldDayDispState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_CldGetDayDispState) == 0x000001, "Wrong alignment on CldBpFuncLib_CldGetDayDispState");
static_assert(sizeof(CldBpFuncLib_CldGetDayDispState) == 0x000001, "Wrong size on CldBpFuncLib_CldGetDayDispState");
static_assert(offsetof(CldBpFuncLib_CldGetDayDispState, ReturnValue) == 0x000000, "Member 'CldBpFuncLib_CldGetDayDispState::ReturnValue' has a wrong offset!");

// Function xrd777.CldBpFuncLib.CldSetDrawDayDisp
// 0x0001 (0x0001 - 0x0000)
struct CldBpFuncLib_CldSetDrawDayDisp final
{
public:
	ECldDayDispState                              Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_CldSetDrawDayDisp) == 0x000001, "Wrong alignment on CldBpFuncLib_CldSetDrawDayDisp");
static_assert(sizeof(CldBpFuncLib_CldSetDrawDayDisp) == 0x000001, "Wrong size on CldBpFuncLib_CldSetDrawDayDisp");
static_assert(offsetof(CldBpFuncLib_CldSetDrawDayDisp, Flag) == 0x000000, "Member 'CldBpFuncLib_CldSetDrawDayDisp::Flag' has a wrong offset!");

// Function xrd777.CldBpFuncLib.CldSetDrawDayDispIm
// 0x0001 (0x0001 - 0x0000)
struct CldBpFuncLib_CldSetDrawDayDispIm final
{
public:
	ECldDayDispState                              Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_CldSetDrawDayDispIm) == 0x000001, "Wrong alignment on CldBpFuncLib_CldSetDrawDayDispIm");
static_assert(sizeof(CldBpFuncLib_CldSetDrawDayDispIm) == 0x000001, "Wrong size on CldBpFuncLib_CldSetDrawDayDispIm");
static_assert(offsetof(CldBpFuncLib_CldSetDrawDayDispIm, Flag) == 0x000000, "Member 'CldBpFuncLib_CldSetDrawDayDispIm::Flag' has a wrong offset!");

// Function xrd777.CldBpFuncLib.GetNowMoonAge
// 0x0004 (0x0004 - 0x0000)
struct CldBpFuncLib_GetNowMoonAge final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_GetNowMoonAge) == 0x000004, "Wrong alignment on CldBpFuncLib_GetNowMoonAge");
static_assert(sizeof(CldBpFuncLib_GetNowMoonAge) == 0x000004, "Wrong size on CldBpFuncLib_GetNowMoonAge");
static_assert(offsetof(CldBpFuncLib_GetNowMoonAge, ReturnValue) == 0x000000, "Member 'CldBpFuncLib_GetNowMoonAge::ReturnValue' has a wrong offset!");

// Function xrd777.CldBpFuncLib.GetNowSeason
// 0x0001 (0x0001 - 0x0000)
struct CldBpFuncLib_GetNowSeason final
{
public:
	ECldSeason                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_GetNowSeason) == 0x000001, "Wrong alignment on CldBpFuncLib_GetNowSeason");
static_assert(sizeof(CldBpFuncLib_GetNowSeason) == 0x000001, "Wrong size on CldBpFuncLib_GetNowSeason");
static_assert(offsetof(CldBpFuncLib_GetNowSeason, ReturnValue) == 0x000000, "Member 'CldBpFuncLib_GetNowSeason::ReturnValue' has a wrong offset!");

// Function xrd777.CldBpFuncLib.GetNowTime
// 0x0004 (0x0004 - 0x0000)
struct CldBpFuncLib_GetNowTime final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_GetNowTime) == 0x000004, "Wrong alignment on CldBpFuncLib_GetNowTime");
static_assert(sizeof(CldBpFuncLib_GetNowTime) == 0x000004, "Wrong size on CldBpFuncLib_GetNowTime");
static_assert(offsetof(CldBpFuncLib_GetNowTime, ReturnValue) == 0x000000, "Member 'CldBpFuncLib_GetNowTime::ReturnValue' has a wrong offset!");

// Function xrd777.CldBpFuncLib.GetNowTimeZone
// 0x0001 (0x0001 - 0x0000)
struct CldBpFuncLib_GetNowTimeZone final
{
public:
	ECldTimeZone                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_GetNowTimeZone) == 0x000001, "Wrong alignment on CldBpFuncLib_GetNowTimeZone");
static_assert(sizeof(CldBpFuncLib_GetNowTimeZone) == 0x000001, "Wrong size on CldBpFuncLib_GetNowTimeZone");
static_assert(offsetof(CldBpFuncLib_GetNowTimeZone, ReturnValue) == 0x000000, "Member 'CldBpFuncLib_GetNowTimeZone::ReturnValue' has a wrong offset!");

// Function xrd777.CldBpFuncLib.GetNowTotalDay
// 0x0004 (0x0004 - 0x0000)
struct CldBpFuncLib_GetNowTotalDay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_GetNowTotalDay) == 0x000004, "Wrong alignment on CldBpFuncLib_GetNowTotalDay");
static_assert(sizeof(CldBpFuncLib_GetNowTotalDay) == 0x000004, "Wrong size on CldBpFuncLib_GetNowTotalDay");
static_assert(offsetof(CldBpFuncLib_GetNowTotalDay, ReturnValue) == 0x000000, "Member 'CldBpFuncLib_GetNowTotalDay::ReturnValue' has a wrong offset!");

// Function xrd777.CldBpFuncLib.GetNowTotalToDayMon
// 0x0008 (0x0008 - 0x0000)
struct CldBpFuncLib_GetNowTotalToDayMon final
{
public:
	int32                                         Month;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Day;                                               // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_GetNowTotalToDayMon) == 0x000004, "Wrong alignment on CldBpFuncLib_GetNowTotalToDayMon");
static_assert(sizeof(CldBpFuncLib_GetNowTotalToDayMon) == 0x000008, "Wrong size on CldBpFuncLib_GetNowTotalToDayMon");
static_assert(offsetof(CldBpFuncLib_GetNowTotalToDayMon, Month) == 0x000000, "Member 'CldBpFuncLib_GetNowTotalToDayMon::Month' has a wrong offset!");
static_assert(offsetof(CldBpFuncLib_GetNowTotalToDayMon, Day) == 0x000004, "Member 'CldBpFuncLib_GetNowTotalToDayMon::Day' has a wrong offset!");

// Function xrd777.CldBpFuncLib.GetNowYasumi
// 0x0001 (0x0001 - 0x0000)
struct CldBpFuncLib_GetNowYasumi final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_GetNowYasumi) == 0x000001, "Wrong alignment on CldBpFuncLib_GetNowYasumi");
static_assert(sizeof(CldBpFuncLib_GetNowYasumi) == 0x000001, "Wrong size on CldBpFuncLib_GetNowYasumi");
static_assert(offsetof(CldBpFuncLib_GetNowYasumi, ReturnValue) == 0x000000, "Member 'CldBpFuncLib_GetNowYasumi::ReturnValue' has a wrong offset!");

// Function xrd777.CldBpFuncLib.GetNowYoubi
// 0x0004 (0x0004 - 0x0000)
struct CldBpFuncLib_GetNowYoubi final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_GetNowYoubi) == 0x000004, "Wrong alignment on CldBpFuncLib_GetNowYoubi");
static_assert(sizeof(CldBpFuncLib_GetNowYoubi) == 0x000004, "Wrong size on CldBpFuncLib_GetNowYoubi");
static_assert(offsetof(CldBpFuncLib_GetNowYoubi, ReturnValue) == 0x000000, "Member 'CldBpFuncLib_GetNowYoubi::ReturnValue' has a wrong offset!");

// Function xrd777.CldBpFuncLib.GetTotalDayFromSeason
// 0x0008 (0x0008 - 0x0000)
struct CldBpFuncLib_GetTotalDayFromSeason final
{
public:
	ECldSeason                                    Season;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_GetTotalDayFromSeason) == 0x000004, "Wrong alignment on CldBpFuncLib_GetTotalDayFromSeason");
static_assert(sizeof(CldBpFuncLib_GetTotalDayFromSeason) == 0x000008, "Wrong size on CldBpFuncLib_GetTotalDayFromSeason");
static_assert(offsetof(CldBpFuncLib_GetTotalDayFromSeason, Season) == 0x000000, "Member 'CldBpFuncLib_GetTotalDayFromSeason::Season' has a wrong offset!");
static_assert(offsetof(CldBpFuncLib_GetTotalDayFromSeason, ReturnValue) == 0x000004, "Member 'CldBpFuncLib_GetTotalDayFromSeason::ReturnValue' has a wrong offset!");

// Function xrd777.CldBpFuncLib.SetNowTimeZone
// 0x0001 (0x0001 - 0x0000)
struct CldBpFuncLib_SetNowTimeZone final
{
public:
	ECldTimeZone                                  TimeZone;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_SetNowTimeZone) == 0x000001, "Wrong alignment on CldBpFuncLib_SetNowTimeZone");
static_assert(sizeof(CldBpFuncLib_SetNowTimeZone) == 0x000001, "Wrong size on CldBpFuncLib_SetNowTimeZone");
static_assert(offsetof(CldBpFuncLib_SetNowTimeZone, TimeZone) == 0x000000, "Member 'CldBpFuncLib_SetNowTimeZone::TimeZone' has a wrong offset!");

// Function xrd777.CldBpFuncLib.SetNowTotalDay
// 0x0004 (0x0004 - 0x0000)
struct CldBpFuncLib_SetNowTotalDay final
{
public:
	int32                                         TotalDay;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CldBpFuncLib_SetNowTotalDay) == 0x000004, "Wrong alignment on CldBpFuncLib_SetNowTotalDay");
static_assert(sizeof(CldBpFuncLib_SetNowTotalDay) == 0x000004, "Wrong size on CldBpFuncLib_SetNowTotalDay");
static_assert(offsetof(CldBpFuncLib_SetNowTotalDay, TotalDay) == 0x000000, "Member 'CldBpFuncLib_SetNowTotalDay::TotalDay' has a wrong offset!");

// Function xrd777.UtlProcActor.RequestBfSettedFile
// 0x0030 (0x0030 - 0x0000)
struct UtlProcActor_RequestBfSettedFile final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcNo;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UtlProcActor_RequestBfSettedFile) == 0x000008, "Wrong alignment on UtlProcActor_RequestBfSettedFile");
static_assert(sizeof(UtlProcActor_RequestBfSettedFile) == 0x000030, "Wrong size on UtlProcActor_RequestBfSettedFile");
static_assert(offsetof(UtlProcActor_RequestBfSettedFile, WorldContextObject) == 0x000000, "Member 'UtlProcActor_RequestBfSettedFile::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UtlProcActor_RequestBfSettedFile, ProcNo) == 0x000008, "Member 'UtlProcActor_RequestBfSettedFile::ProcNo' has a wrong offset!");
static_assert(offsetof(UtlProcActor_RequestBfSettedFile, LatentInfo) == 0x000010, "Member 'UtlProcActor_RequestBfSettedFile::LatentInfo' has a wrong offset!");
static_assert(offsetof(UtlProcActor_RequestBfSettedFile, Result) == 0x000028, "Member 'UtlProcActor_RequestBfSettedFile::Result' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.AddAstreaLoadAsset
// 0x0028 (0x0028 - 0x0000)
struct UIVelvetRoomDraw_AddAstreaLoadAsset final
{
public:
	TSoftObjectPtr<class UObject>                 SoftAsset;                                         // 0x0000(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_AddAstreaLoadAsset) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_AddAstreaLoadAsset");
static_assert(sizeof(UIVelvetRoomDraw_AddAstreaLoadAsset) == 0x000028, "Wrong size on UIVelvetRoomDraw_AddAstreaLoadAsset");
static_assert(offsetof(UIVelvetRoomDraw_AddAstreaLoadAsset, SoftAsset) == 0x000000, "Member 'UIVelvetRoomDraw_AddAstreaLoadAsset::SoftAsset' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.ApplyMcaForSceneCaptureComponent2D
// 0x0010 (0x0010 - 0x0000)
struct UIVelvetRoomDraw_ApplyMcaForSceneCaptureComponent2D final
{
public:
	class USceneCaptureComponent2D*               SceneCaptureComponent2D;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          McaResourceData;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_ApplyMcaForSceneCaptureComponent2D) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_ApplyMcaForSceneCaptureComponent2D");
static_assert(sizeof(UIVelvetRoomDraw_ApplyMcaForSceneCaptureComponent2D) == 0x000010, "Wrong size on UIVelvetRoomDraw_ApplyMcaForSceneCaptureComponent2D");
static_assert(offsetof(UIVelvetRoomDraw_ApplyMcaForSceneCaptureComponent2D, SceneCaptureComponent2D) == 0x000000, "Member 'UIVelvetRoomDraw_ApplyMcaForSceneCaptureComponent2D::SceneCaptureComponent2D' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_ApplyMcaForSceneCaptureComponent2D, McaResourceData) == 0x000008, "Member 'UIVelvetRoomDraw_ApplyMcaForSceneCaptureComponent2D::McaResourceData' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.ApplyMcaToSceneCaptureComponent
// 0x0030 (0x0030 - 0x0000)
struct UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent final
{
public:
	class USceneCaptureComponent2D*               PCaptureComponent;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                PResource;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIVELVET_ROOM_MCA_CAPTURE                    Type;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetPoint;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               OffsetRotation;                                    // 0x0020(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OffsetFov;                                         // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent");
static_assert(sizeof(UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent) == 0x000030, "Wrong size on UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent");
static_assert(offsetof(UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent, PCaptureComponent) == 0x000000, "Member 'UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent::PCaptureComponent' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent, PResource) == 0x000008, "Member 'UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent::PResource' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent, Type) == 0x000010, "Member 'UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent::Type' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent, OffsetPoint) == 0x000014, "Member 'UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent::OffsetPoint' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent, OffsetRotation) == 0x000020, "Member 'UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent::OffsetRotation' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent, OffsetFov) == 0x00002C, "Member 'UIVelvetRoomDraw_ApplyMcaToSceneCaptureComponent::OffsetFov' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.Draw2CombineHeading
// 0x0010 (0x0010 - 0x0000)
struct UIVelvetRoomDraw_Draw2CombineHeading final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          UniqueResource;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_Draw2CombineHeading) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_Draw2CombineHeading");
static_assert(sizeof(UIVelvetRoomDraw_Draw2CombineHeading) == 0x000010, "Wrong size on UIVelvetRoomDraw_Draw2CombineHeading");
static_assert(offsetof(UIVelvetRoomDraw_Draw2CombineHeading, X) == 0x000000, "Member 'UIVelvetRoomDraw_Draw2CombineHeading::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_Draw2CombineHeading, Y) == 0x000004, "Member 'UIVelvetRoomDraw_Draw2CombineHeading::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_Draw2CombineHeading, UniqueResource) == 0x000008, "Member 'UIVelvetRoomDraw_Draw2CombineHeading::UniqueResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.Draw2CombineIgor
// 0x0008 (0x0008 - 0x0000)
struct UIVelvetRoomDraw_Draw2CombineIgor final
{
public:
	const class USceneCaptureComponent2D*         PSceneCapture;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_Draw2CombineIgor) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_Draw2CombineIgor");
static_assert(sizeof(UIVelvetRoomDraw_Draw2CombineIgor) == 0x000008, "Wrong size on UIVelvetRoomDraw_Draw2CombineIgor");
static_assert(offsetof(UIVelvetRoomDraw_Draw2CombineIgor, PSceneCapture) == 0x000000, "Member 'UIVelvetRoomDraw_Draw2CombineIgor::PSceneCapture' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.Draw2CombineList
// 0x0010 (0x0010 - 0x0000)
struct UIVelvetRoomDraw_Draw2CombineList final
{
public:
	const class UObject*                          UniqueResource;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          CommonResource;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_Draw2CombineList) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_Draw2CombineList");
static_assert(sizeof(UIVelvetRoomDraw_Draw2CombineList) == 0x000010, "Wrong size on UIVelvetRoomDraw_Draw2CombineList");
static_assert(offsetof(UIVelvetRoomDraw_Draw2CombineList, UniqueResource) == 0x000000, "Member 'UIVelvetRoomDraw_Draw2CombineList::UniqueResource' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_Draw2CombineList, CommonResource) == 0x000008, "Member 'UIVelvetRoomDraw_Draw2CombineList::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.Draw2CombinePlayerNameBoard
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_Draw2CombinePlayerNameBoard final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_Draw2CombinePlayerNameBoard) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_Draw2CombinePlayerNameBoard");
static_assert(sizeof(UIVelvetRoomDraw_Draw2CombinePlayerNameBoard) == 0x000018, "Wrong size on UIVelvetRoomDraw_Draw2CombinePlayerNameBoard");
static_assert(offsetof(UIVelvetRoomDraw_Draw2CombinePlayerNameBoard, X) == 0x000000, "Member 'UIVelvetRoomDraw_Draw2CombinePlayerNameBoard::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_Draw2CombinePlayerNameBoard, Y) == 0x000004, "Member 'UIVelvetRoomDraw_Draw2CombinePlayerNameBoard::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_Draw2CombinePlayerNameBoard, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_Draw2CombinePlayerNameBoard::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_Draw2CombinePlayerNameBoard, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_Draw2CombinePlayerNameBoard::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawBackgroundPanelLattices
// 0x0008 (0x0008 - 0x0000)
struct UIVelvetRoomDraw_DrawBackgroundPanelLattices final
{
public:
	const class UObject*                          Resource;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawBackgroundPanelLattices) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawBackgroundPanelLattices");
static_assert(sizeof(UIVelvetRoomDraw_DrawBackgroundPanelLattices) == 0x000008, "Wrong size on UIVelvetRoomDraw_DrawBackgroundPanelLattices");
static_assert(offsetof(UIVelvetRoomDraw_DrawBackgroundPanelLattices, Resource) == 0x000000, "Member 'UIVelvetRoomDraw_DrawBackgroundPanelLattices::Resource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawBackgroundPanels
// 0x0020 (0x0020 - 0x0000)
struct UIVelvetRoomDraw_DrawBackgroundPanels final
{
public:
	TArray<struct FColor>                         Colors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 BlackPanelIndex;                                   // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawBackgroundPanels) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawBackgroundPanels");
static_assert(sizeof(UIVelvetRoomDraw_DrawBackgroundPanels) == 0x000020, "Wrong size on UIVelvetRoomDraw_DrawBackgroundPanels");
static_assert(offsetof(UIVelvetRoomDraw_DrawBackgroundPanels, Colors) == 0x000000, "Member 'UIVelvetRoomDraw_DrawBackgroundPanels::Colors' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawBackgroundPanels, BlackPanelIndex) == 0x000010, "Member 'UIVelvetRoomDraw_DrawBackgroundPanels::BlackPanelIndex' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawDrawerElizabeth
// 0x0020 (0x0020 - 0x0000)
struct UIVelvetRoomDraw_DrawDrawerElizabeth final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USceneCaptureComponent2D*         PSceneCapture;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          Elizabeth;                                         // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawDrawerElizabeth) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawDrawerElizabeth");
static_assert(sizeof(UIVelvetRoomDraw_DrawDrawerElizabeth) == 0x000020, "Wrong size on UIVelvetRoomDraw_DrawDrawerElizabeth");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerElizabeth, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawDrawerElizabeth::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerElizabeth, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawDrawerElizabeth::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerElizabeth, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawDrawerElizabeth::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerElizabeth, PSceneCapture) == 0x000010, "Member 'UIVelvetRoomDraw_DrawDrawerElizabeth::PSceneCapture' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerElizabeth, Elizabeth) == 0x000018, "Member 'UIVelvetRoomDraw_DrawDrawerElizabeth::Elizabeth' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawDrawerHeading
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawDrawerHeading final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawDrawerHeading) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawDrawerHeading");
static_assert(sizeof(UIVelvetRoomDraw_DrawDrawerHeading) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawDrawerHeading");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerHeading, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawDrawerHeading::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerHeading, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawDrawerHeading::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerHeading, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawDrawerHeading::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerHeading, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawDrawerHeading::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawDrawerHelpMessage
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawDrawerHelpMessage final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawDrawerHelpMessage) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawDrawerHelpMessage");
static_assert(sizeof(UIVelvetRoomDraw_DrawDrawerHelpMessage) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawDrawerHelpMessage");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerHelpMessage, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawDrawerHelpMessage::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerHelpMessage, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawDrawerHelpMessage::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerHelpMessage, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawDrawerHelpMessage::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerHelpMessage, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawDrawerHelpMessage::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawDrawerList
// 0x0020 (0x0020 - 0x0000)
struct UIVelvetRoomDraw_DrawDrawerList final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          UniqueResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          CommonResource;                                    // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawDrawerList) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawDrawerList");
static_assert(sizeof(UIVelvetRoomDraw_DrawDrawerList) == 0x000020, "Wrong size on UIVelvetRoomDraw_DrawDrawerList");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerList, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawDrawerList::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerList, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawDrawerList::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerList, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawDrawerList::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerList, UniqueResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawDrawerList::UniqueResource' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerList, CommonResource) == 0x000018, "Member 'UIVelvetRoomDraw_DrawDrawerList::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawDrawerListSortPanel
// 0x0020 (0x0020 - 0x0000)
struct UIVelvetRoomDraw_DrawDrawerListSortPanel final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          UniqueResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          CommonResource;                                    // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawDrawerListSortPanel) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawDrawerListSortPanel");
static_assert(sizeof(UIVelvetRoomDraw_DrawDrawerListSortPanel) == 0x000020, "Wrong size on UIVelvetRoomDraw_DrawDrawerListSortPanel");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerListSortPanel, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawDrawerListSortPanel::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerListSortPanel, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawDrawerListSortPanel::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerListSortPanel, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawDrawerListSortPanel::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerListSortPanel, UniqueResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawDrawerListSortPanel::UniqueResource' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerListSortPanel, CommonResource) == 0x000018, "Member 'UIVelvetRoomDraw_DrawDrawerListSortPanel::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawDrawerPlayerNameBoard
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawDrawerPlayerNameBoard final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawDrawerPlayerNameBoard) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawDrawerPlayerNameBoard");
static_assert(sizeof(UIVelvetRoomDraw_DrawDrawerPlayerNameBoard) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawDrawerPlayerNameBoard");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerPlayerNameBoard, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawDrawerPlayerNameBoard::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerPlayerNameBoard, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawDrawerPlayerNameBoard::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerPlayerNameBoard, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawDrawerPlayerNameBoard::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerPlayerNameBoard, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawDrawerPlayerNameBoard::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawDrawerRegistryRate
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawDrawerRegistryRate final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawDrawerRegistryRate) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawDrawerRegistryRate");
static_assert(sizeof(UIVelvetRoomDraw_DrawDrawerRegistryRate) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawDrawerRegistryRate");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerRegistryRate, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawDrawerRegistryRate::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerRegistryRate, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawDrawerRegistryRate::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerRegistryRate, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawDrawerRegistryRate::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawDrawerRegistryRate, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawDrawerRegistryRate::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawHelpMessage2Combine
// 0x0008 (0x0008 - 0x0000)
struct UIVelvetRoomDraw_DrawHelpMessage2Combine final
{
public:
	const class UObject*                          CommonResource;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawHelpMessage2Combine) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawHelpMessage2Combine");
static_assert(sizeof(UIVelvetRoomDraw_DrawHelpMessage2Combine) == 0x000008, "Wrong size on UIVelvetRoomDraw_DrawHelpMessage2Combine");
static_assert(offsetof(UIVelvetRoomDraw_DrawHelpMessage2Combine, CommonResource) == 0x000000, "Member 'UIVelvetRoomDraw_DrawHelpMessage2Combine::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawHelpMessageSearchCombine
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawHelpMessageSearchCombine final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawHelpMessageSearchCombine) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawHelpMessageSearchCombine");
static_assert(sizeof(UIVelvetRoomDraw_DrawHelpMessageSearchCombine) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawHelpMessageSearchCombine");
static_assert(offsetof(UIVelvetRoomDraw_DrawHelpMessageSearchCombine, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawHelpMessageSearchCombine::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawHelpMessageSearchCombine, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawHelpMessageSearchCombine::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawHelpMessageSearchCombine, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawHelpMessageSearchCombine::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawHelpMessageSearchCombine, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawHelpMessageSearchCombine::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawHelpMessageSpecialCombine
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawHelpMessageSpecialCombine final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawHelpMessageSpecialCombine) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawHelpMessageSpecialCombine");
static_assert(sizeof(UIVelvetRoomDraw_DrawHelpMessageSpecialCombine) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawHelpMessageSpecialCombine");
static_assert(offsetof(UIVelvetRoomDraw_DrawHelpMessageSpecialCombine, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawHelpMessageSpecialCombine::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawHelpMessageSpecialCombine, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawHelpMessageSpecialCombine::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawHelpMessageSpecialCombine, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawHelpMessageSpecialCombine::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawHelpMessageSpecialCombine, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawHelpMessageSpecialCombine::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawRegistryElizabeth
// 0x0020 (0x0020 - 0x0000)
struct UIVelvetRoomDraw_DrawRegistryElizabeth final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USceneCaptureComponent2D*         PSceneCapture;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          Elizabeth;                                         // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawRegistryElizabeth) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawRegistryElizabeth");
static_assert(sizeof(UIVelvetRoomDraw_DrawRegistryElizabeth) == 0x000020, "Wrong size on UIVelvetRoomDraw_DrawRegistryElizabeth");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryElizabeth, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawRegistryElizabeth::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryElizabeth, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawRegistryElizabeth::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryElizabeth, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawRegistryElizabeth::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryElizabeth, PSceneCapture) == 0x000010, "Member 'UIVelvetRoomDraw_DrawRegistryElizabeth::PSceneCapture' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryElizabeth, Elizabeth) == 0x000018, "Member 'UIVelvetRoomDraw_DrawRegistryElizabeth::Elizabeth' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawRegistryHeading
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawRegistryHeading final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawRegistryHeading) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawRegistryHeading");
static_assert(sizeof(UIVelvetRoomDraw_DrawRegistryHeading) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawRegistryHeading");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryHeading, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawRegistryHeading::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryHeading, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawRegistryHeading::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryHeading, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawRegistryHeading::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryHeading, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawRegistryHeading::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawRegistryHelpMessage
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawRegistryHelpMessage final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawRegistryHelpMessage) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawRegistryHelpMessage");
static_assert(sizeof(UIVelvetRoomDraw_DrawRegistryHelpMessage) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawRegistryHelpMessage");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryHelpMessage, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawRegistryHelpMessage::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryHelpMessage, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawRegistryHelpMessage::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryHelpMessage, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawRegistryHelpMessage::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryHelpMessage, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawRegistryHelpMessage::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawRegistryList
// 0x0020 (0x0020 - 0x0000)
struct UIVelvetRoomDraw_DrawRegistryList final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          UniqueResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          CommonResource;                                    // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawRegistryList) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawRegistryList");
static_assert(sizeof(UIVelvetRoomDraw_DrawRegistryList) == 0x000020, "Wrong size on UIVelvetRoomDraw_DrawRegistryList");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryList, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawRegistryList::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryList, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawRegistryList::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryList, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawRegistryList::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryList, UniqueResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawRegistryList::UniqueResource' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryList, CommonResource) == 0x000018, "Member 'UIVelvetRoomDraw_DrawRegistryList::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawRegistryPlayerNameBoard
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawRegistryPlayerNameBoard final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawRegistryPlayerNameBoard) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawRegistryPlayerNameBoard");
static_assert(sizeof(UIVelvetRoomDraw_DrawRegistryPlayerNameBoard) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawRegistryPlayerNameBoard");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryPlayerNameBoard, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawRegistryPlayerNameBoard::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryPlayerNameBoard, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawRegistryPlayerNameBoard::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryPlayerNameBoard, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawRegistryPlayerNameBoard::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawRegistryPlayerNameBoard, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawRegistryPlayerNameBoard::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawSearchCombineHeading
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawSearchCombineHeading final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawSearchCombineHeading) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawSearchCombineHeading");
static_assert(sizeof(UIVelvetRoomDraw_DrawSearchCombineHeading) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawSearchCombineHeading");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineHeading, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawSearchCombineHeading::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineHeading, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawSearchCombineHeading::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineHeading, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawSearchCombineHeading::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineHeading, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawSearchCombineHeading::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawSearchCombineIgor
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawSearchCombineIgor final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USceneCaptureComponent2D*         PSceneCapture;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawSearchCombineIgor) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawSearchCombineIgor");
static_assert(sizeof(UIVelvetRoomDraw_DrawSearchCombineIgor) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawSearchCombineIgor");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineIgor, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawSearchCombineIgor::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineIgor, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawSearchCombineIgor::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineIgor, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawSearchCombineIgor::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineIgor, PSceneCapture) == 0x000010, "Member 'UIVelvetRoomDraw_DrawSearchCombineIgor::PSceneCapture' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawSearchCombineList
// 0x0010 (0x0010 - 0x0000)
struct UIVelvetRoomDraw_DrawSearchCombineList final
{
public:
	const class UObject*                          UniqueResource;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          CommonResource;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawSearchCombineList) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawSearchCombineList");
static_assert(sizeof(UIVelvetRoomDraw_DrawSearchCombineList) == 0x000010, "Wrong size on UIVelvetRoomDraw_DrawSearchCombineList");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineList, UniqueResource) == 0x000000, "Member 'UIVelvetRoomDraw_DrawSearchCombineList::UniqueResource' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineList, CommonResource) == 0x000008, "Member 'UIVelvetRoomDraw_DrawSearchCombineList::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawSearchCombinePlayerNameBoard
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard");
static_assert(sizeof(UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawSearchCombinePlayerNameBoard::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawSearchCombineSortPanel
// 0x0020 (0x0020 - 0x0000)
struct UIVelvetRoomDraw_DrawSearchCombineSortPanel final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          UniqueResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          CommonResource;                                    // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawSearchCombineSortPanel) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawSearchCombineSortPanel");
static_assert(sizeof(UIVelvetRoomDraw_DrawSearchCombineSortPanel) == 0x000020, "Wrong size on UIVelvetRoomDraw_DrawSearchCombineSortPanel");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineSortPanel, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawSearchCombineSortPanel::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineSortPanel, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawSearchCombineSortPanel::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineSortPanel, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawSearchCombineSortPanel::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineSortPanel, UniqueResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawSearchCombineSortPanel::UniqueResource' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSearchCombineSortPanel, CommonResource) == 0x000018, "Member 'UIVelvetRoomDraw_DrawSearchCombineSortPanel::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawSpecialCombineHeading
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawSpecialCombineHeading final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawSpecialCombineHeading) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawSpecialCombineHeading");
static_assert(sizeof(UIVelvetRoomDraw_DrawSpecialCombineHeading) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawSpecialCombineHeading");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombineHeading, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawSpecialCombineHeading::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombineHeading, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawSpecialCombineHeading::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombineHeading, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawSpecialCombineHeading::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombineHeading, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawSpecialCombineHeading::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawSpecialCombineIgor
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawSpecialCombineIgor final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USceneCaptureComponent2D*         PSceneCapture;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawSpecialCombineIgor) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawSpecialCombineIgor");
static_assert(sizeof(UIVelvetRoomDraw_DrawSpecialCombineIgor) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawSpecialCombineIgor");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombineIgor, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawSpecialCombineIgor::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombineIgor, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawSpecialCombineIgor::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombineIgor, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawSpecialCombineIgor::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombineIgor, PSceneCapture) == 0x000010, "Member 'UIVelvetRoomDraw_DrawSpecialCombineIgor::PSceneCapture' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawSpecialCombineList
// 0x0010 (0x0010 - 0x0000)
struct UIVelvetRoomDraw_DrawSpecialCombineList final
{
public:
	const class UObject*                          UniqueResource;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          CommonResource;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawSpecialCombineList) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawSpecialCombineList");
static_assert(sizeof(UIVelvetRoomDraw_DrawSpecialCombineList) == 0x000010, "Wrong size on UIVelvetRoomDraw_DrawSpecialCombineList");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombineList, UniqueResource) == 0x000000, "Member 'UIVelvetRoomDraw_DrawSpecialCombineList::UniqueResource' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombineList, CommonResource) == 0x000008, "Member 'UIVelvetRoomDraw_DrawSpecialCombineList::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawSpecialCombinePlayerNameBoard
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard");
static_assert(sizeof(UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawSpecialCombinePlayerNameBoard::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawTopBlackDesign
// 0x0008 (0x0008 - 0x0000)
struct UIVelvetRoomDraw_DrawTopBlackDesign final
{
public:
	const class UObject*                          UniqueResource;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawTopBlackDesign) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawTopBlackDesign");
static_assert(sizeof(UIVelvetRoomDraw_DrawTopBlackDesign) == 0x000008, "Wrong size on UIVelvetRoomDraw_DrawTopBlackDesign");
static_assert(offsetof(UIVelvetRoomDraw_DrawTopBlackDesign, UniqueResource) == 0x000000, "Member 'UIVelvetRoomDraw_DrawTopBlackDesign::UniqueResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawTopCard
// 0x0040 (0x0040 - 0x0000)
struct UIVelvetRoomDraw_DrawTopCard final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	const class UObject*                          CardDataAsset;                                     // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIVelvetRoomDraw_DrawTopCard) == 0x000010, "Wrong alignment on UIVelvetRoomDraw_DrawTopCard");
static_assert(sizeof(UIVelvetRoomDraw_DrawTopCard) == 0x000040, "Wrong size on UIVelvetRoomDraw_DrawTopCard");
static_assert(offsetof(UIVelvetRoomDraw_DrawTopCard, Transform) == 0x000000, "Member 'UIVelvetRoomDraw_DrawTopCard::Transform' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawTopCard, CardDataAsset) == 0x000030, "Member 'UIVelvetRoomDraw_DrawTopCard::CardDataAsset' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawTopHelpMessage
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawTopHelpMessage final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          CommonResource;                                    // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawTopHelpMessage) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawTopHelpMessage");
static_assert(sizeof(UIVelvetRoomDraw_DrawTopHelpMessage) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawTopHelpMessage");
static_assert(offsetof(UIVelvetRoomDraw_DrawTopHelpMessage, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawTopHelpMessage::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawTopHelpMessage, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawTopHelpMessage::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawTopHelpMessage, Angle) == 0x000008, "Member 'UIVelvetRoomDraw_DrawTopHelpMessage::Angle' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawTopHelpMessage, CommonResource) == 0x000010, "Member 'UIVelvetRoomDraw_DrawTopHelpMessage::CommonResource' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.DrawTopHero
// 0x0018 (0x0018 - 0x0000)
struct UIVelvetRoomDraw_DrawTopHero final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USceneCaptureComponent2D*         PSceneCapture;                                     // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_DrawTopHero) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_DrawTopHero");
static_assert(sizeof(UIVelvetRoomDraw_DrawTopHero) == 0x000018, "Wrong size on UIVelvetRoomDraw_DrawTopHero");
static_assert(offsetof(UIVelvetRoomDraw_DrawTopHero, X) == 0x000000, "Member 'UIVelvetRoomDraw_DrawTopHero::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawTopHero, Y) == 0x000004, "Member 'UIVelvetRoomDraw_DrawTopHero::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawTopHero, Width) == 0x000008, "Member 'UIVelvetRoomDraw_DrawTopHero::Width' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawTopHero, Height) == 0x00000C, "Member 'UIVelvetRoomDraw_DrawTopHero::Height' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_DrawTopHero, PSceneCapture) == 0x000010, "Member 'UIVelvetRoomDraw_DrawTopHero::PSceneCapture' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.GetAstreaResourceData
// 0x0010 (0x0010 - 0x0000)
struct UIVelvetRoomDraw_GetAstreaResourceData final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_GetAstreaResourceData) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_GetAstreaResourceData");
static_assert(sizeof(UIVelvetRoomDraw_GetAstreaResourceData) == 0x000010, "Wrong size on UIVelvetRoomDraw_GetAstreaResourceData");
static_assert(offsetof(UIVelvetRoomDraw_GetAstreaResourceData, Index_0) == 0x000000, "Member 'UIVelvetRoomDraw_GetAstreaResourceData::Index_0' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_GetAstreaResourceData, ReturnValue) == 0x000008, "Member 'UIVelvetRoomDraw_GetAstreaResourceData::ReturnValue' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.GetHeroCostumeID
// 0x0008 (0x0008 - 0x0000)
struct UIVelvetRoomDraw_GetHeroCostumeID final
{
public:
	int32                                         ForceID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_GetHeroCostumeID) == 0x000004, "Wrong alignment on UIVelvetRoomDraw_GetHeroCostumeID");
static_assert(sizeof(UIVelvetRoomDraw_GetHeroCostumeID) == 0x000008, "Wrong size on UIVelvetRoomDraw_GetHeroCostumeID");
static_assert(offsetof(UIVelvetRoomDraw_GetHeroCostumeID, ForceID) == 0x000000, "Member 'UIVelvetRoomDraw_GetHeroCostumeID::ForceID' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_GetHeroCostumeID, ReturnValue) == 0x000004, "Member 'UIVelvetRoomDraw_GetHeroCostumeID::ReturnValue' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.UpdateCardTimes
// 0x0010 (0x0010 - 0x0000)
struct UIVelvetRoomDraw_UpdateCardTimes final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          ResourceData;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_UpdateCardTimes) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_UpdateCardTimes");
static_assert(sizeof(UIVelvetRoomDraw_UpdateCardTimes) == 0x000010, "Wrong size on UIVelvetRoomDraw_UpdateCardTimes");
static_assert(offsetof(UIVelvetRoomDraw_UpdateCardTimes, DeltaTime) == 0x000000, "Member 'UIVelvetRoomDraw_UpdateCardTimes::DeltaTime' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_UpdateCardTimes, ResourceData) == 0x000008, "Member 'UIVelvetRoomDraw_UpdateCardTimes::ResourceData' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.UpdateMcaTimes
// 0x0010 (0x0010 - 0x0000)
struct UIVelvetRoomDraw_UpdateMcaTimes final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          ResourceData;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_UpdateMcaTimes) == 0x000008, "Wrong alignment on UIVelvetRoomDraw_UpdateMcaTimes");
static_assert(sizeof(UIVelvetRoomDraw_UpdateMcaTimes) == 0x000010, "Wrong size on UIVelvetRoomDraw_UpdateMcaTimes");
static_assert(offsetof(UIVelvetRoomDraw_UpdateMcaTimes, DeltaTime) == 0x000000, "Member 'UIVelvetRoomDraw_UpdateMcaTimes::DeltaTime' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomDraw_UpdateMcaTimes, ResourceData) == 0x000008, "Member 'UIVelvetRoomDraw_UpdateMcaTimes::ResourceData' has a wrong offset!");

// Function xrd777.UIVelvetRoomDraw.UpdateTimes
// 0x0004 (0x0004 - 0x0000)
struct UIVelvetRoomDraw_UpdateTimes final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomDraw_UpdateTimes) == 0x000004, "Wrong alignment on UIVelvetRoomDraw_UpdateTimes");
static_assert(sizeof(UIVelvetRoomDraw_UpdateTimes) == 0x000004, "Wrong size on UIVelvetRoomDraw_UpdateTimes");
static_assert(offsetof(UIVelvetRoomDraw_UpdateTimes, DeltaTime) == 0x000000, "Member 'UIVelvetRoomDraw_UpdateTimes::DeltaTime' has a wrong offset!");

// Function xrd777.DifficultySelectionActor.DrawDescriptionText
// 0x000C (0x000C - 0x0000)
struct DifficultySelectionActor_DrawDescriptionText final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DifficultySelectionActor_DrawDescriptionText) == 0x000004, "Wrong alignment on DifficultySelectionActor_DrawDescriptionText");
static_assert(sizeof(DifficultySelectionActor_DrawDescriptionText) == 0x00000C, "Wrong size on DifficultySelectionActor_DrawDescriptionText");
static_assert(offsetof(DifficultySelectionActor_DrawDescriptionText, InPos) == 0x000000, "Member 'DifficultySelectionActor_DrawDescriptionText::InPos' has a wrong offset!");
static_assert(offsetof(DifficultySelectionActor_DrawDescriptionText, InColor) == 0x000008, "Member 'DifficultySelectionActor_DrawDescriptionText::InColor' has a wrong offset!");

// Function xrd777.DifficultySelectionActor.DrawHelp
// 0x0008 (0x0008 - 0x0000)
struct DifficultySelectionActor_DrawHelp final
{
public:
	float                                         AddX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AddY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DifficultySelectionActor_DrawHelp) == 0x000004, "Wrong alignment on DifficultySelectionActor_DrawHelp");
static_assert(sizeof(DifficultySelectionActor_DrawHelp) == 0x000008, "Wrong size on DifficultySelectionActor_DrawHelp");
static_assert(offsetof(DifficultySelectionActor_DrawHelp, AddX) == 0x000000, "Member 'DifficultySelectionActor_DrawHelp::AddX' has a wrong offset!");
static_assert(offsetof(DifficultySelectionActor_DrawHelp, AddY) == 0x000004, "Member 'DifficultySelectionActor_DrawHelp::AddY' has a wrong offset!");

// Function xrd777.DifficultySelectionActor.DrawInfoText
// 0x000C (0x000C - 0x0000)
struct DifficultySelectionActor_DrawInfoText final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DifficultySelectionActor_DrawInfoText) == 0x000004, "Wrong alignment on DifficultySelectionActor_DrawInfoText");
static_assert(sizeof(DifficultySelectionActor_DrawInfoText) == 0x00000C, "Wrong size on DifficultySelectionActor_DrawInfoText");
static_assert(offsetof(DifficultySelectionActor_DrawInfoText, InPos) == 0x000000, "Member 'DifficultySelectionActor_DrawInfoText::InPos' has a wrong offset!");
static_assert(offsetof(DifficultySelectionActor_DrawInfoText, InColor) == 0x000008, "Member 'DifficultySelectionActor_DrawInfoText::InColor' has a wrong offset!");

// Function xrd777.DifficultySelectionActor.GetCursorIndex
// 0x0004 (0x0004 - 0x0000)
struct DifficultySelectionActor_GetCursorIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DifficultySelectionActor_GetCursorIndex) == 0x000004, "Wrong alignment on DifficultySelectionActor_GetCursorIndex");
static_assert(sizeof(DifficultySelectionActor_GetCursorIndex) == 0x000004, "Wrong size on DifficultySelectionActor_GetCursorIndex");
static_assert(offsetof(DifficultySelectionActor_GetCursorIndex, ReturnValue) == 0x000000, "Member 'DifficultySelectionActor_GetCursorIndex::ReturnValue' has a wrong offset!");

// Function xrd777.DifficultySelectionActor.GetScreenSize
// 0x0008 (0x0008 - 0x0000)
struct DifficultySelectionActor_GetScreenSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DifficultySelectionActor_GetScreenSize) == 0x000004, "Wrong alignment on DifficultySelectionActor_GetScreenSize");
static_assert(sizeof(DifficultySelectionActor_GetScreenSize) == 0x000008, "Wrong size on DifficultySelectionActor_GetScreenSize");
static_assert(offsetof(DifficultySelectionActor_GetScreenSize, ReturnValue) == 0x000000, "Member 'DifficultySelectionActor_GetScreenSize::ReturnValue' has a wrong offset!");

// Function xrd777.DifficultySelectionActor.HasMsgInstance
// 0x0001 (0x0001 - 0x0000)
struct DifficultySelectionActor_HasMsgInstance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DifficultySelectionActor_HasMsgInstance) == 0x000001, "Wrong alignment on DifficultySelectionActor_HasMsgInstance");
static_assert(sizeof(DifficultySelectionActor_HasMsgInstance) == 0x000001, "Wrong size on DifficultySelectionActor_HasMsgInstance");
static_assert(offsetof(DifficultySelectionActor_HasMsgInstance, ReturnValue) == 0x000000, "Member 'DifficultySelectionActor_HasMsgInstance::ReturnValue' has a wrong offset!");

// Function xrd777.DifficultySelectionActor.LoadCheck
// 0x0001 (0x0001 - 0x0000)
struct DifficultySelectionActor_LoadCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DifficultySelectionActor_LoadCheck) == 0x000001, "Wrong alignment on DifficultySelectionActor_LoadCheck");
static_assert(sizeof(DifficultySelectionActor_LoadCheck) == 0x000001, "Wrong size on DifficultySelectionActor_LoadCheck");
static_assert(offsetof(DifficultySelectionActor_LoadCheck, ReturnValue) == 0x000000, "Member 'DifficultySelectionActor_LoadCheck::ReturnValue' has a wrong offset!");

// Function xrd777.Draft_EventManager.ExecuteMessage
// 0x0010 (0x0010 - 0x0000)
struct Draft_EventManager_ExecuteMessage final
{
public:
	class UBmdAsset*                              InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageNo;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InEventMessageID;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Draft_EventManager_ExecuteMessage) == 0x000008, "Wrong alignment on Draft_EventManager_ExecuteMessage");
static_assert(sizeof(Draft_EventManager_ExecuteMessage) == 0x000010, "Wrong size on Draft_EventManager_ExecuteMessage");
static_assert(offsetof(Draft_EventManager_ExecuteMessage, InAsset) == 0x000000, "Member 'Draft_EventManager_ExecuteMessage::InAsset' has a wrong offset!");
static_assert(offsetof(Draft_EventManager_ExecuteMessage, InMessageNo) == 0x000008, "Member 'Draft_EventManager_ExecuteMessage::InMessageNo' has a wrong offset!");
static_assert(offsetof(Draft_EventManager_ExecuteMessage, InEventMessageID) == 0x00000C, "Member 'Draft_EventManager_ExecuteMessage::InEventMessageID' has a wrong offset!");

// Function xrd777.Draft_EventManager.ExecuteMessageWithSelect
// 0x0018 (0x0018 - 0x0000)
struct Draft_EventManager_ExecuteMessageWithSelect final
{
public:
	class UBmdAsset*                              InAsset;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InMessageNo;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InSelectNo;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InEventMessageID;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Draft_EventManager_ExecuteMessageWithSelect) == 0x000008, "Wrong alignment on Draft_EventManager_ExecuteMessageWithSelect");
static_assert(sizeof(Draft_EventManager_ExecuteMessageWithSelect) == 0x000018, "Wrong size on Draft_EventManager_ExecuteMessageWithSelect");
static_assert(offsetof(Draft_EventManager_ExecuteMessageWithSelect, InAsset) == 0x000000, "Member 'Draft_EventManager_ExecuteMessageWithSelect::InAsset' has a wrong offset!");
static_assert(offsetof(Draft_EventManager_ExecuteMessageWithSelect, InMessageNo) == 0x000008, "Member 'Draft_EventManager_ExecuteMessageWithSelect::InMessageNo' has a wrong offset!");
static_assert(offsetof(Draft_EventManager_ExecuteMessageWithSelect, InSelectNo) == 0x00000C, "Member 'Draft_EventManager_ExecuteMessageWithSelect::InSelectNo' has a wrong offset!");
static_assert(offsetof(Draft_EventManager_ExecuteMessageWithSelect, InEventMessageID) == 0x000010, "Member 'Draft_EventManager_ExecuteMessageWithSelect::InEventMessageID' has a wrong offset!");

// Function xrd777.Draft_EventManager.ExecuteMsgScript
// 0x0004 (0x0004 - 0x0000)
struct Draft_EventManager_ExecuteMsgScript final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Draft_EventManager_ExecuteMsgScript) == 0x000004, "Wrong alignment on Draft_EventManager_ExecuteMsgScript");
static_assert(sizeof(Draft_EventManager_ExecuteMsgScript) == 0x000004, "Wrong size on Draft_EventManager_ExecuteMsgScript");
static_assert(offsetof(Draft_EventManager_ExecuteMsgScript, ReturnValue) == 0x000000, "Member 'Draft_EventManager_ExecuteMsgScript::ReturnValue' has a wrong offset!");

// Function xrd777.Draft_EventManager.ExecuteSelectScript
// 0x0004 (0x0004 - 0x0000)
struct Draft_EventManager_ExecuteSelectScript final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Draft_EventManager_ExecuteSelectScript) == 0x000004, "Wrong alignment on Draft_EventManager_ExecuteSelectScript");
static_assert(sizeof(Draft_EventManager_ExecuteSelectScript) == 0x000004, "Wrong size on Draft_EventManager_ExecuteSelectScript");
static_assert(offsetof(Draft_EventManager_ExecuteSelectScript, ReturnValue) == 0x000000, "Member 'Draft_EventManager_ExecuteSelectScript::ReturnValue' has a wrong offset!");

// Function xrd777.Draft_EventManager.SetLocalData
// 0x0008 (0x0008 - 0x0000)
struct Draft_EventManager_SetLocalData final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Data;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Draft_EventManager_SetLocalData) == 0x000004, "Wrong alignment on Draft_EventManager_SetLocalData");
static_assert(sizeof(Draft_EventManager_SetLocalData) == 0x000008, "Wrong size on Draft_EventManager_SetLocalData");
static_assert(offsetof(Draft_EventManager_SetLocalData, Index_0) == 0x000000, "Member 'Draft_EventManager_SetLocalData::Index_0' has a wrong offset!");
static_assert(offsetof(Draft_EventManager_SetLocalData, Data) == 0x000004, "Member 'Draft_EventManager_SetLocalData::Data' has a wrong offset!");

// Function xrd777.Draft_EventManager.GetLocalData
// 0x0008 (0x0008 - 0x0000)
struct Draft_EventManager_GetLocalData final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Draft_EventManager_GetLocalData) == 0x000004, "Wrong alignment on Draft_EventManager_GetLocalData");
static_assert(sizeof(Draft_EventManager_GetLocalData) == 0x000008, "Wrong size on Draft_EventManager_GetLocalData");
static_assert(offsetof(Draft_EventManager_GetLocalData, Index_0) == 0x000000, "Member 'Draft_EventManager_GetLocalData::Index_0' has a wrong offset!");
static_assert(offsetof(Draft_EventManager_GetLocalData, ReturnValue) == 0x000004, "Member 'Draft_EventManager_GetLocalData::ReturnValue' has a wrong offset!");

// Function xrd777.EventSkipWidgetDelegate.CallDelegate
// 0x0001 (0x0001 - 0x0000)
struct EventSkipWidgetDelegate_CallDelegate final
{
public:
	bool                                          InSetEffect;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventSkipWidgetDelegate_CallDelegate) == 0x000001, "Wrong alignment on EventSkipWidgetDelegate_CallDelegate");
static_assert(sizeof(EventSkipWidgetDelegate_CallDelegate) == 0x000001, "Wrong size on EventSkipWidgetDelegate_CallDelegate");
static_assert(offsetof(EventSkipWidgetDelegate_CallDelegate, InSetEffect) == 0x000000, "Member 'EventSkipWidgetDelegate_CallDelegate::InSetEffect' has a wrong offset!");

// Function xrd777.FadePgBattleEventWipeActor.DrawForBP
// 0x0004 (0x0004 - 0x0000)
struct FadePgBattleEventWipeActor_DrawForBP final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePgBattleEventWipeActor_DrawForBP) == 0x000004, "Wrong alignment on FadePgBattleEventWipeActor_DrawForBP");
static_assert(sizeof(FadePgBattleEventWipeActor_DrawForBP) == 0x000004, "Wrong size on FadePgBattleEventWipeActor_DrawForBP");
static_assert(offsetof(FadePgBattleEventWipeActor_DrawForBP, DeltaTime) == 0x000000, "Member 'FadePgBattleEventWipeActor_DrawForBP::DeltaTime' has a wrong offset!");

// Function xrd777.FadePlayer.FadeIn
// 0x0014 (0x0014 - 0x0000)
struct FadePlayer_FadeIn final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFadeProperties                        Props;                                             // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_FadeIn) == 0x000004, "Wrong alignment on FadePlayer_FadeIn");
static_assert(sizeof(FadePlayer_FadeIn) == 0x000014, "Wrong size on FadePlayer_FadeIn");
static_assert(offsetof(FadePlayer_FadeIn, Type) == 0x000000, "Member 'FadePlayer_FadeIn::Type' has a wrong offset!");
static_assert(offsetof(FadePlayer_FadeIn, Props) == 0x000004, "Member 'FadePlayer_FadeIn::Props' has a wrong offset!");

// Function xrd777.FadePlayer.FadeOut
// 0x0014 (0x0014 - 0x0000)
struct FadePlayer_FadeOut final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFadeProperties                        Props;                                             // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_FadeOut) == 0x000004, "Wrong alignment on FadePlayer_FadeOut");
static_assert(sizeof(FadePlayer_FadeOut) == 0x000014, "Wrong size on FadePlayer_FadeOut");
static_assert(offsetof(FadePlayer_FadeOut, Type) == 0x000000, "Member 'FadePlayer_FadeOut::Type' has a wrong offset!");
static_assert(offsetof(FadePlayer_FadeOut, Props) == 0x000004, "Member 'FadePlayer_FadeOut::Props' has a wrong offset!");

// Function xrd777.FadePlayer.GetDefaultProperties
// 0x0014 (0x0014 - 0x0000)
struct FadePlayer_GetDefaultProperties final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFadeProperties                        ReturnValue;                                       // 0x0004(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_GetDefaultProperties) == 0x000004, "Wrong alignment on FadePlayer_GetDefaultProperties");
static_assert(sizeof(FadePlayer_GetDefaultProperties) == 0x000014, "Wrong size on FadePlayer_GetDefaultProperties");
static_assert(offsetof(FadePlayer_GetDefaultProperties, Type) == 0x000000, "Member 'FadePlayer_GetDefaultProperties::Type' has a wrong offset!");
static_assert(offsetof(FadePlayer_GetDefaultProperties, ReturnValue) == 0x000004, "Member 'FadePlayer_GetDefaultProperties::ReturnValue' has a wrong offset!");

// Function xrd777.FadePlayer.OnTick
// 0x0004 (0x0004 - 0x0000)
struct FadePlayer_OnTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_OnTick) == 0x000004, "Wrong alignment on FadePlayer_OnTick");
static_assert(sizeof(FadePlayer_OnTick) == 0x000004, "Wrong size on FadePlayer_OnTick");
static_assert(offsetof(FadePlayer_OnTick, DeltaTime) == 0x000000, "Member 'FadePlayer_OnTick::DeltaTime' has a wrong offset!");

// Function xrd777.FadePlayer.SetColor
// 0x000C (0x000C - 0x0000)
struct FadePlayer_SetColor final
{
public:
	float                                         R;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         G;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         B;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_SetColor) == 0x000004, "Wrong alignment on FadePlayer_SetColor");
static_assert(sizeof(FadePlayer_SetColor) == 0x00000C, "Wrong size on FadePlayer_SetColor");
static_assert(offsetof(FadePlayer_SetColor, R) == 0x000000, "Member 'FadePlayer_SetColor::R' has a wrong offset!");
static_assert(offsetof(FadePlayer_SetColor, G) == 0x000004, "Member 'FadePlayer_SetColor::G' has a wrong offset!");
static_assert(offsetof(FadePlayer_SetColor, B) == 0x000008, "Member 'FadePlayer_SetColor::B' has a wrong offset!");

// Function xrd777.FadePlayer.GetColor
// 0x0004 (0x0004 - 0x0000)
struct FadePlayer_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_GetColor) == 0x000004, "Wrong alignment on FadePlayer_GetColor");
static_assert(sizeof(FadePlayer_GetColor) == 0x000004, "Wrong size on FadePlayer_GetColor");
static_assert(offsetof(FadePlayer_GetColor, ReturnValue) == 0x000000, "Member 'FadePlayer_GetColor::ReturnValue' has a wrong offset!");

// Function xrd777.FadePlayer.GetCurrentStateTime
// 0x0004 (0x0004 - 0x0000)
struct FadePlayer_GetCurrentStateTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_GetCurrentStateTime) == 0x000004, "Wrong alignment on FadePlayer_GetCurrentStateTime");
static_assert(sizeof(FadePlayer_GetCurrentStateTime) == 0x000004, "Wrong size on FadePlayer_GetCurrentStateTime");
static_assert(offsetof(FadePlayer_GetCurrentStateTime, ReturnValue) == 0x000000, "Member 'FadePlayer_GetCurrentStateTime::ReturnValue' has a wrong offset!");

// Function xrd777.FadePlayer.GetFadeDuration
// 0x0004 (0x0004 - 0x0000)
struct FadePlayer_GetFadeDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_GetFadeDuration) == 0x000004, "Wrong alignment on FadePlayer_GetFadeDuration");
static_assert(sizeof(FadePlayer_GetFadeDuration) == 0x000004, "Wrong size on FadePlayer_GetFadeDuration");
static_assert(offsetof(FadePlayer_GetFadeDuration, ReturnValue) == 0x000000, "Member 'FadePlayer_GetFadeDuration::ReturnValue' has a wrong offset!");

// Function xrd777.FadePlayer.GetFadeMode
// 0x0004 (0x0004 - 0x0000)
struct FadePlayer_GetFadeMode final
{
public:
	EFadeMode                                     ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_GetFadeMode) == 0x000004, "Wrong alignment on FadePlayer_GetFadeMode");
static_assert(sizeof(FadePlayer_GetFadeMode) == 0x000004, "Wrong size on FadePlayer_GetFadeMode");
static_assert(offsetof(FadePlayer_GetFadeMode, ReturnValue) == 0x000000, "Member 'FadePlayer_GetFadeMode::ReturnValue' has a wrong offset!");

// Function xrd777.FadePlayer.GetFadingState
// 0x0004 (0x0004 - 0x0000)
struct FadePlayer_GetFadingState final
{
public:
	EFadingState                                  ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_GetFadingState) == 0x000004, "Wrong alignment on FadePlayer_GetFadingState");
static_assert(sizeof(FadePlayer_GetFadingState) == 0x000004, "Wrong size on FadePlayer_GetFadingState");
static_assert(offsetof(FadePlayer_GetFadingState, ReturnValue) == 0x000000, "Member 'FadePlayer_GetFadingState::ReturnValue' has a wrong offset!");

// Function xrd777.FadePlayer.GetProgressRate
// 0x0008 (0x0008 - 0x0000)
struct FadePlayer_GetProgressRate final
{
public:
	bool                                          Inverse;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_GetProgressRate) == 0x000004, "Wrong alignment on FadePlayer_GetProgressRate");
static_assert(sizeof(FadePlayer_GetProgressRate) == 0x000008, "Wrong size on FadePlayer_GetProgressRate");
static_assert(offsetof(FadePlayer_GetProgressRate, Inverse) == 0x000000, "Member 'FadePlayer_GetProgressRate::Inverse' has a wrong offset!");
static_assert(offsetof(FadePlayer_GetProgressRate, ReturnValue) == 0x000004, "Member 'FadePlayer_GetProgressRate::ReturnValue' has a wrong offset!");

// Function xrd777.FadePlayer.GetRemainDuration
// 0x0004 (0x0004 - 0x0000)
struct FadePlayer_GetRemainDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_GetRemainDuration) == 0x000004, "Wrong alignment on FadePlayer_GetRemainDuration");
static_assert(sizeof(FadePlayer_GetRemainDuration) == 0x000004, "Wrong size on FadePlayer_GetRemainDuration");
static_assert(offsetof(FadePlayer_GetRemainDuration, ReturnValue) == 0x000000, "Member 'FadePlayer_GetRemainDuration::ReturnValue' has a wrong offset!");

// Function xrd777.FadePlayer.IsExistNextFade
// 0x0001 (0x0001 - 0x0000)
struct FadePlayer_IsExistNextFade final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_IsExistNextFade) == 0x000001, "Wrong alignment on FadePlayer_IsExistNextFade");
static_assert(sizeof(FadePlayer_IsExistNextFade) == 0x000001, "Wrong size on FadePlayer_IsExistNextFade");
static_assert(offsetof(FadePlayer_IsExistNextFade, ReturnValue) == 0x000000, "Member 'FadePlayer_IsExistNextFade::ReturnValue' has a wrong offset!");

// Function xrd777.FadePlayer.IsFading
// 0x0001 (0x0001 - 0x0000)
struct FadePlayer_IsFading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_IsFading) == 0x000001, "Wrong alignment on FadePlayer_IsFading");
static_assert(sizeof(FadePlayer_IsFading) == 0x000001, "Wrong size on FadePlayer_IsFading");
static_assert(offsetof(FadePlayer_IsFading, ReturnValue) == 0x000000, "Member 'FadePlayer_IsFading::ReturnValue' has a wrong offset!");

// Function xrd777.FadePlayer.IsFilled
// 0x0001 (0x0001 - 0x0000)
struct FadePlayer_IsFilled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadePlayer_IsFilled) == 0x000001, "Wrong alignment on FadePlayer_IsFilled");
static_assert(sizeof(FadePlayer_IsFilled) == 0x000001, "Wrong size on FadePlayer_IsFilled");
static_assert(offsetof(FadePlayer_IsFilled, ReturnValue) == 0x000000, "Member 'FadePlayer_IsFilled::ReturnValue' has a wrong offset!");

// Function xrd777.FldAnimalHit.OnActorOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct FldAnimalHit_OnActorOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldAnimalHit_OnActorOverlapBegin) == 0x000008, "Wrong alignment on FldAnimalHit_OnActorOverlapBegin");
static_assert(sizeof(FldAnimalHit_OnActorOverlapBegin) == 0x0000A8, "Wrong size on FldAnimalHit_OnActorOverlapBegin");
static_assert(offsetof(FldAnimalHit_OnActorOverlapBegin, OverlappedComponent) == 0x000000, "Member 'FldAnimalHit_OnActorOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldAnimalHit_OnActorOverlapBegin, OtherActor) == 0x000008, "Member 'FldAnimalHit_OnActorOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(FldAnimalHit_OnActorOverlapBegin, OtherComp) == 0x000010, "Member 'FldAnimalHit_OnActorOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(FldAnimalHit_OnActorOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'FldAnimalHit_OnActorOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FldAnimalHit_OnActorOverlapBegin, bFromSweep) == 0x00001C, "Member 'FldAnimalHit_OnActorOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(FldAnimalHit_OnActorOverlapBegin, SweepResult) == 0x000020, "Member 'FldAnimalHit_OnActorOverlapBegin::SweepResult' has a wrong offset!");

// Function xrd777.FldAnimalHit.OnActorOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct FldAnimalHit_OnActorOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldAnimalHit_OnActorOverlapEnd) == 0x000008, "Wrong alignment on FldAnimalHit_OnActorOverlapEnd");
static_assert(sizeof(FldAnimalHit_OnActorOverlapEnd) == 0x000020, "Wrong size on FldAnimalHit_OnActorOverlapEnd");
static_assert(offsetof(FldAnimalHit_OnActorOverlapEnd, OverlappedComponent) == 0x000000, "Member 'FldAnimalHit_OnActorOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldAnimalHit_OnActorOverlapEnd, OtherActor) == 0x000008, "Member 'FldAnimalHit_OnActorOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(FldAnimalHit_OnActorOverlapEnd, OtherComp) == 0x000010, "Member 'FldAnimalHit_OnActorOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(FldAnimalHit_OnActorOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'FldAnimalHit_OnActorOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function xrd777.FldAnimObj.ChangeDisableActorAction
// 0x0001 (0x0001 - 0x0000)
struct FldAnimObj_ChangeDisableActorAction final
{
public:
	bool                                          IsHide;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldAnimObj_ChangeDisableActorAction) == 0x000001, "Wrong alignment on FldAnimObj_ChangeDisableActorAction");
static_assert(sizeof(FldAnimObj_ChangeDisableActorAction) == 0x000001, "Wrong size on FldAnimObj_ChangeDisableActorAction");
static_assert(offsetof(FldAnimObj_ChangeDisableActorAction, IsHide) == 0x000000, "Member 'FldAnimObj_ChangeDisableActorAction::IsHide' has a wrong offset!");

// Function xrd777.FldAnimObj.GetAnimationNum
// 0x0004 (0x0004 - 0x0000)
struct FldAnimObj_GetAnimationNum final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldAnimObj_GetAnimationNum) == 0x000004, "Wrong alignment on FldAnimObj_GetAnimationNum");
static_assert(sizeof(FldAnimObj_GetAnimationNum) == 0x000004, "Wrong size on FldAnimObj_GetAnimationNum");
static_assert(offsetof(FldAnimObj_GetAnimationNum, ReturnValue) == 0x000000, "Member 'FldAnimObj_GetAnimationNum::ReturnValue' has a wrong offset!");

// Function xrd777.FldAnimObj.GetNowAnimeID
// 0x0004 (0x0004 - 0x0000)
struct FldAnimObj_GetNowAnimeID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldAnimObj_GetNowAnimeID) == 0x000004, "Wrong alignment on FldAnimObj_GetNowAnimeID");
static_assert(sizeof(FldAnimObj_GetNowAnimeID) == 0x000004, "Wrong size on FldAnimObj_GetNowAnimeID");
static_assert(offsetof(FldAnimObj_GetNowAnimeID, ReturnValue) == 0x000000, "Member 'FldAnimObj_GetNowAnimeID::ReturnValue' has a wrong offset!");

// Function xrd777.FldAnimObj.Initialize
// 0x0010 (0x0010 - 0x0000)
struct FldAnimObj_Initialize final
{
public:
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimeID;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldAnimObj_Initialize) == 0x000008, "Wrong alignment on FldAnimObj_Initialize");
static_assert(sizeof(FldAnimObj_Initialize) == 0x000010, "Wrong size on FldAnimObj_Initialize");
static_assert(offsetof(FldAnimObj_Initialize, SkeletalMesh) == 0x000000, "Member 'FldAnimObj_Initialize::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(FldAnimObj_Initialize, AnimeID) == 0x000008, "Member 'FldAnimObj_Initialize::AnimeID' has a wrong offset!");

// Function xrd777.FldAnimObj.InitializeArray
// 0x0018 (0x0018 - 0x0000)
struct FldAnimObj_InitializeArray final
{
public:
	TArray<class USkeletalMeshComponent*>         SkeleTalMeshList;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         AnimeID;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldAnimObj_InitializeArray) == 0x000008, "Wrong alignment on FldAnimObj_InitializeArray");
static_assert(sizeof(FldAnimObj_InitializeArray) == 0x000018, "Wrong size on FldAnimObj_InitializeArray");
static_assert(offsetof(FldAnimObj_InitializeArray, SkeleTalMeshList) == 0x000000, "Member 'FldAnimObj_InitializeArray::SkeleTalMeshList' has a wrong offset!");
static_assert(offsetof(FldAnimObj_InitializeArray, AnimeID) == 0x000010, "Member 'FldAnimObj_InitializeArray::AnimeID' has a wrong offset!");

// Function xrd777.FldAnimObj.IsPlayingAnimation
// 0x0001 (0x0001 - 0x0000)
struct FldAnimObj_IsPlayingAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldAnimObj_IsPlayingAnimation) == 0x000001, "Wrong alignment on FldAnimObj_IsPlayingAnimation");
static_assert(sizeof(FldAnimObj_IsPlayingAnimation) == 0x000001, "Wrong size on FldAnimObj_IsPlayingAnimation");
static_assert(offsetof(FldAnimObj_IsPlayingAnimation, ReturnValue) == 0x000000, "Member 'FldAnimObj_IsPlayingAnimation::ReturnValue' has a wrong offset!");

// Function xrd777.FldAnimObj.PlayAnimation
// 0x0008 (0x0008 - 0x0000)
struct FldAnimObj_PlayAnimation final
{
public:
	int32                                         AnimeID;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LoopFlag;                                          // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldAnimObj_PlayAnimation) == 0x000004, "Wrong alignment on FldAnimObj_PlayAnimation");
static_assert(sizeof(FldAnimObj_PlayAnimation) == 0x000008, "Wrong size on FldAnimObj_PlayAnimation");
static_assert(offsetof(FldAnimObj_PlayAnimation, AnimeID) == 0x000000, "Member 'FldAnimObj_PlayAnimation::AnimeID' has a wrong offset!");
static_assert(offsetof(FldAnimObj_PlayAnimation, LoopFlag) == 0x000004, "Member 'FldAnimObj_PlayAnimation::LoopFlag' has a wrong offset!");

// Function xrd777.FldCharSysBPFL.PlayAnimSequence
// 0x0020 (0x0020 - 0x0000)
struct FldCharSysBPFL_PlayAnimSequence final
{
public:
	class USkeletalMeshComponent*                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      Anim;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Loop;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldCharSysBPFL_PlayAnimSequence) == 0x000008, "Wrong alignment on FldCharSysBPFL_PlayAnimSequence");
static_assert(sizeof(FldCharSysBPFL_PlayAnimSequence) == 0x000020, "Wrong size on FldCharSysBPFL_PlayAnimSequence");
static_assert(offsetof(FldCharSysBPFL_PlayAnimSequence, Target) == 0x000000, "Member 'FldCharSysBPFL_PlayAnimSequence::Target' has a wrong offset!");
static_assert(offsetof(FldCharSysBPFL_PlayAnimSequence, Anim) == 0x000008, "Member 'FldCharSysBPFL_PlayAnimSequence::Anim' has a wrong offset!");
static_assert(offsetof(FldCharSysBPFL_PlayAnimSequence, Loop) == 0x000010, "Member 'FldCharSysBPFL_PlayAnimSequence::Loop' has a wrong offset!");
static_assert(offsetof(FldCharSysBPFL_PlayAnimSequence, ReturnValue) == 0x000018, "Member 'FldCharSysBPFL_PlayAnimSequence::ReturnValue' has a wrong offset!");

// Function xrd777.FldCrowdIdleBehaviorComp.UpdateProc
// 0x0004 (0x0004 - 0x0000)
struct FldCrowdIdleBehaviorComp_UpdateProc final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldCrowdIdleBehaviorComp_UpdateProc) == 0x000004, "Wrong alignment on FldCrowdIdleBehaviorComp_UpdateProc");
static_assert(sizeof(FldCrowdIdleBehaviorComp_UpdateProc) == 0x000004, "Wrong size on FldCrowdIdleBehaviorComp_UpdateProc");
static_assert(offsetof(FldCrowdIdleBehaviorComp_UpdateProc, DeltaTime) == 0x000000, "Member 'FldCrowdIdleBehaviorComp_UpdateProc::DeltaTime' has a wrong offset!");

// Function xrd777.FldCrowdOpacityComp.UpdateProc
// 0x0004 (0x0004 - 0x0000)
struct FldCrowdOpacityComp_UpdateProc final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldCrowdOpacityComp_UpdateProc) == 0x000004, "Wrong alignment on FldCrowdOpacityComp_UpdateProc");
static_assert(sizeof(FldCrowdOpacityComp_UpdateProc) == 0x000004, "Wrong size on FldCrowdOpacityComp_UpdateProc");
static_assert(offsetof(FldCrowdOpacityComp_UpdateProc, DeltaTime) == 0x000000, "Member 'FldCrowdOpacityComp_UpdateProc::DeltaTime' has a wrong offset!");

// Function xrd777.FldCrowdWalkOpacityComp.SetPointLocation
// 0x0018 (0x0018 - 0x0000)
struct FldCrowdWalkOpacityComp_SetPointLocation final
{
public:
	struct FVector                                StartPoint;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndPoint;                                          // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldCrowdWalkOpacityComp_SetPointLocation) == 0x000004, "Wrong alignment on FldCrowdWalkOpacityComp_SetPointLocation");
static_assert(sizeof(FldCrowdWalkOpacityComp_SetPointLocation) == 0x000018, "Wrong size on FldCrowdWalkOpacityComp_SetPointLocation");
static_assert(offsetof(FldCrowdWalkOpacityComp_SetPointLocation, StartPoint) == 0x000000, "Member 'FldCrowdWalkOpacityComp_SetPointLocation::StartPoint' has a wrong offset!");
static_assert(offsetof(FldCrowdWalkOpacityComp_SetPointLocation, EndPoint) == 0x00000C, "Member 'FldCrowdWalkOpacityComp_SetPointLocation::EndPoint' has a wrong offset!");

// Function xrd777.FldDbgMaker.ForceWaitPose
// 0x0001 (0x0001 - 0x0000)
struct FldDbgMaker_ForceWaitPose final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDbgMaker_ForceWaitPose) == 0x000001, "Wrong alignment on FldDbgMaker_ForceWaitPose");
static_assert(sizeof(FldDbgMaker_ForceWaitPose) == 0x000001, "Wrong size on FldDbgMaker_ForceWaitPose");
static_assert(offsetof(FldDbgMaker_ForceWaitPose, Enable) == 0x000000, "Member 'FldDbgMaker_ForceWaitPose::Enable' has a wrong offset!");

// Function xrd777.FldDbgMaker.Load
// 0x0001 (0x0001 - 0x0000)
struct FldDbgMaker_Load final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDbgMaker_Load) == 0x000001, "Wrong alignment on FldDbgMaker_Load");
static_assert(sizeof(FldDbgMaker_Load) == 0x000001, "Wrong size on FldDbgMaker_Load");
static_assert(offsetof(FldDbgMaker_Load, ReturnValue) == 0x000000, "Member 'FldDbgMaker_Load::ReturnValue' has a wrong offset!");

// Function xrd777.FldDbgMaker.GetPartnerActors
// 0x0010 (0x0010 - 0x0000)
struct FldDbgMaker_GetPartnerActors final
{
public:
	TArray<class APawn*>                          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDbgMaker_GetPartnerActors) == 0x000008, "Wrong alignment on FldDbgMaker_GetPartnerActors");
static_assert(sizeof(FldDbgMaker_GetPartnerActors) == 0x000010, "Wrong size on FldDbgMaker_GetPartnerActors");
static_assert(offsetof(FldDbgMaker_GetPartnerActors, ReturnValue) == 0x000000, "Member 'FldDbgMaker_GetPartnerActors::ReturnValue' has a wrong offset!");

// Function xrd777.FldDbgMaker.GetPlayerActor
// 0x0008 (0x0008 - 0x0000)
struct FldDbgMaker_GetPlayerActor final
{
public:
	const class APawn*                            ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDbgMaker_GetPlayerActor) == 0x000008, "Wrong alignment on FldDbgMaker_GetPlayerActor");
static_assert(sizeof(FldDbgMaker_GetPlayerActor) == 0x000008, "Wrong size on FldDbgMaker_GetPlayerActor");
static_assert(offsetof(FldDbgMaker_GetPlayerActor, ReturnValue) == 0x000000, "Member 'FldDbgMaker_GetPlayerActor::ReturnValue' has a wrong offset!");

// Function xrd777.FldDoorObjCore.IsPlayingOpen
// 0x0001 (0x0001 - 0x0000)
struct FldDoorObjCore_IsPlayingOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDoorObjCore_IsPlayingOpen) == 0x000001, "Wrong alignment on FldDoorObjCore_IsPlayingOpen");
static_assert(sizeof(FldDoorObjCore_IsPlayingOpen) == 0x000001, "Wrong size on FldDoorObjCore_IsPlayingOpen");
static_assert(offsetof(FldDoorObjCore_IsPlayingOpen, ReturnValue) == 0x000000, "Member 'FldDoorObjCore_IsPlayingOpen::ReturnValue' has a wrong offset!");

// Function xrd777.FldDoorObjCore.PlayDoorOpen
// 0x0001 (0x0001 - 0x0000)
struct FldDoorObjCore_PlayDoorOpen final
{
public:
	EFldDoorOpenType                              OpenType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDoorObjCore_PlayDoorOpen) == 0x000001, "Wrong alignment on FldDoorObjCore_PlayDoorOpen");
static_assert(sizeof(FldDoorObjCore_PlayDoorOpen) == 0x000001, "Wrong size on FldDoorObjCore_PlayDoorOpen");
static_assert(offsetof(FldDoorObjCore_PlayDoorOpen, OpenType) == 0x000000, "Member 'FldDoorObjCore_PlayDoorOpen::OpenType' has a wrong offset!");

// Function xrd777.FldDoorObjCore.PlayDoorOpenWithFade
// 0x0010 (0x0010 - 0x0000)
struct FldDoorObjCore_PlayDoorOpenWithFade final
{
public:
	EFldDoorOpenType                              OpenType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FadeType;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FadeFrame;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FadePattern;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDoorObjCore_PlayDoorOpenWithFade) == 0x000004, "Wrong alignment on FldDoorObjCore_PlayDoorOpenWithFade");
static_assert(sizeof(FldDoorObjCore_PlayDoorOpenWithFade) == 0x000010, "Wrong size on FldDoorObjCore_PlayDoorOpenWithFade");
static_assert(offsetof(FldDoorObjCore_PlayDoorOpenWithFade, OpenType) == 0x000000, "Member 'FldDoorObjCore_PlayDoorOpenWithFade::OpenType' has a wrong offset!");
static_assert(offsetof(FldDoorObjCore_PlayDoorOpenWithFade, FadeType) == 0x000004, "Member 'FldDoorObjCore_PlayDoorOpenWithFade::FadeType' has a wrong offset!");
static_assert(offsetof(FldDoorObjCore_PlayDoorOpenWithFade, FadeFrame) == 0x000008, "Member 'FldDoorObjCore_PlayDoorOpenWithFade::FadeFrame' has a wrong offset!");
static_assert(offsetof(FldDoorObjCore_PlayDoorOpenWithFade, FadePattern) == 0x00000C, "Member 'FldDoorObjCore_PlayDoorOpenWithFade::FadePattern' has a wrong offset!");

// Function xrd777.FldDungeonBrokenObjController.HitEvent
// 0x0010 (0x0010 - 0x0000)
struct FldDungeonBrokenObjController_HitEvent final
{
public:
	EDungeonObjHitEvent                           EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFldDungeonObjectActor*                 PObject;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonBrokenObjController_HitEvent) == 0x000008, "Wrong alignment on FldDungeonBrokenObjController_HitEvent");
static_assert(sizeof(FldDungeonBrokenObjController_HitEvent) == 0x000010, "Wrong size on FldDungeonBrokenObjController_HitEvent");
static_assert(offsetof(FldDungeonBrokenObjController_HitEvent, EventType) == 0x000000, "Member 'FldDungeonBrokenObjController_HitEvent::EventType' has a wrong offset!");
static_assert(offsetof(FldDungeonBrokenObjController_HitEvent, ID) == 0x000004, "Member 'FldDungeonBrokenObjController_HitEvent::ID' has a wrong offset!");
static_assert(offsetof(FldDungeonBrokenObjController_HitEvent, PObject) == 0x000008, "Member 'FldDungeonBrokenObjController_HitEvent::PObject' has a wrong offset!");

// Function xrd777.FldDungeonGame.IsBattle
// 0x0001 (0x0001 - 0x0000)
struct FldDungeonGame_IsBattle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonGame_IsBattle) == 0x000001, "Wrong alignment on FldDungeonGame_IsBattle");
static_assert(sizeof(FldDungeonGame_IsBattle) == 0x000001, "Wrong size on FldDungeonGame_IsBattle");
static_assert(offsetof(FldDungeonGame_IsBattle, ReturnValue) == 0x000000, "Member 'FldDungeonGame_IsBattle::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonControlActor.CheckReady
// 0x0001 (0x0001 - 0x0000)
struct FldDungeonControlActor_CheckReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonControlActor_CheckReady) == 0x000001, "Wrong alignment on FldDungeonControlActor_CheckReady");
static_assert(sizeof(FldDungeonControlActor_CheckReady) == 0x000001, "Wrong size on FldDungeonControlActor_CheckReady");
static_assert(offsetof(FldDungeonControlActor_CheckReady, ReturnValue) == 0x000000, "Member 'FldDungeonControlActor_CheckReady::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonControlActor.Create
// 0x0008 (0x0008 - 0x0000)
struct FldDungeonControlActor_Create final
{
public:
	class AFldDungeonControlActor*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonControlActor_Create) == 0x000008, "Wrong alignment on FldDungeonControlActor_Create");
static_assert(sizeof(FldDungeonControlActor_Create) == 0x000008, "Wrong size on FldDungeonControlActor_Create");
static_assert(offsetof(FldDungeonControlActor_Create, ReturnValue) == 0x000000, "Member 'FldDungeonControlActor_Create::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonControlActor.IsExist
// 0x0001 (0x0001 - 0x0000)
struct FldDungeonControlActor_IsExist final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonControlActor_IsExist) == 0x000001, "Wrong alignment on FldDungeonControlActor_IsExist");
static_assert(sizeof(FldDungeonControlActor_IsExist) == 0x000001, "Wrong size on FldDungeonControlActor_IsExist");
static_assert(offsetof(FldDungeonControlActor_IsExist, ReturnValue) == 0x000000, "Member 'FldDungeonControlActor_IsExist::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonControlActor.SetField
// 0x000C (0x000C - 0x0000)
struct FldDungeonControlActor_SetField final
{
public:
	int32                                         Major;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Idx;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonControlActor_SetField) == 0x000004, "Wrong alignment on FldDungeonControlActor_SetField");
static_assert(sizeof(FldDungeonControlActor_SetField) == 0x00000C, "Wrong size on FldDungeonControlActor_SetField");
static_assert(offsetof(FldDungeonControlActor_SetField, Major) == 0x000000, "Member 'FldDungeonControlActor_SetField::Major' has a wrong offset!");
static_assert(offsetof(FldDungeonControlActor_SetField, Minor) == 0x000004, "Member 'FldDungeonControlActor_SetField::Minor' has a wrong offset!");
static_assert(offsetof(FldDungeonControlActor_SetField, Idx) == 0x000008, "Member 'FldDungeonControlActor_SetField::Idx' has a wrong offset!");

// Function xrd777.FldDungeonEffectActor.GetFadeInTime
// 0x0004 (0x0004 - 0x0000)
struct FldDungeonEffectActor_GetFadeInTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonEffectActor_GetFadeInTime) == 0x000004, "Wrong alignment on FldDungeonEffectActor_GetFadeInTime");
static_assert(sizeof(FldDungeonEffectActor_GetFadeInTime) == 0x000004, "Wrong size on FldDungeonEffectActor_GetFadeInTime");
static_assert(offsetof(FldDungeonEffectActor_GetFadeInTime, ReturnValue) == 0x000000, "Member 'FldDungeonEffectActor_GetFadeInTime::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonEffectActor.GetFadeOutTime
// 0x0004 (0x0004 - 0x0000)
struct FldDungeonEffectActor_GetFadeOutTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonEffectActor_GetFadeOutTime) == 0x000004, "Wrong alignment on FldDungeonEffectActor_GetFadeOutTime");
static_assert(sizeof(FldDungeonEffectActor_GetFadeOutTime) == 0x000004, "Wrong size on FldDungeonEffectActor_GetFadeOutTime");
static_assert(offsetof(FldDungeonEffectActor_GetFadeOutTime, ReturnValue) == 0x000000, "Member 'FldDungeonEffectActor_GetFadeOutTime::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonEffectActor.GetFadeValue
// 0x0004 (0x0004 - 0x0000)
struct FldDungeonEffectActor_GetFadeValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonEffectActor_GetFadeValue) == 0x000004, "Wrong alignment on FldDungeonEffectActor_GetFadeValue");
static_assert(sizeof(FldDungeonEffectActor_GetFadeValue) == 0x000004, "Wrong size on FldDungeonEffectActor_GetFadeValue");
static_assert(offsetof(FldDungeonEffectActor_GetFadeValue, ReturnValue) == 0x000000, "Member 'FldDungeonEffectActor_GetFadeValue::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonEffectActor.GetPlayTime
// 0x0004 (0x0004 - 0x0000)
struct FldDungeonEffectActor_GetPlayTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonEffectActor_GetPlayTime) == 0x000004, "Wrong alignment on FldDungeonEffectActor_GetPlayTime");
static_assert(sizeof(FldDungeonEffectActor_GetPlayTime) == 0x000004, "Wrong size on FldDungeonEffectActor_GetPlayTime");
static_assert(offsetof(FldDungeonEffectActor_GetPlayTime, ReturnValue) == 0x000000, "Member 'FldDungeonEffectActor_GetPlayTime::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonEffectActor.IsPlay
// 0x0001 (0x0001 - 0x0000)
struct FldDungeonEffectActor_IsPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonEffectActor_IsPlay) == 0x000001, "Wrong alignment on FldDungeonEffectActor_IsPlay");
static_assert(sizeof(FldDungeonEffectActor_IsPlay) == 0x000001, "Wrong size on FldDungeonEffectActor_IsPlay");
static_assert(offsetof(FldDungeonEffectActor_IsPlay, ReturnValue) == 0x000000, "Member 'FldDungeonEffectActor_IsPlay::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonEffectTartarosSearch.GetIntensity
// 0x0004 (0x0004 - 0x0000)
struct FldDungeonEffectTartarosSearch_GetIntensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonEffectTartarosSearch_GetIntensity) == 0x000004, "Wrong alignment on FldDungeonEffectTartarosSearch_GetIntensity");
static_assert(sizeof(FldDungeonEffectTartarosSearch_GetIntensity) == 0x000004, "Wrong size on FldDungeonEffectTartarosSearch_GetIntensity");
static_assert(offsetof(FldDungeonEffectTartarosSearch_GetIntensity, ReturnValue) == 0x000000, "Member 'FldDungeonEffectTartarosSearch_GetIntensity::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonEffectTartarosSearch.GetLifeSpan
// 0x0004 (0x0004 - 0x0000)
struct FldDungeonEffectTartarosSearch_GetLifeSpan final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonEffectTartarosSearch_GetLifeSpan) == 0x000004, "Wrong alignment on FldDungeonEffectTartarosSearch_GetLifeSpan");
static_assert(sizeof(FldDungeonEffectTartarosSearch_GetLifeSpan) == 0x000004, "Wrong size on FldDungeonEffectTartarosSearch_GetLifeSpan");
static_assert(offsetof(FldDungeonEffectTartarosSearch_GetLifeSpan, ReturnValue) == 0x000000, "Member 'FldDungeonEffectTartarosSearch_GetLifeSpan::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonEffectTartarosSearch.GetMaxBrightness
// 0x0004 (0x0004 - 0x0000)
struct FldDungeonEffectTartarosSearch_GetMaxBrightness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonEffectTartarosSearch_GetMaxBrightness) == 0x000004, "Wrong alignment on FldDungeonEffectTartarosSearch_GetMaxBrightness");
static_assert(sizeof(FldDungeonEffectTartarosSearch_GetMaxBrightness) == 0x000004, "Wrong size on FldDungeonEffectTartarosSearch_GetMaxBrightness");
static_assert(offsetof(FldDungeonEffectTartarosSearch_GetMaxBrightness, ReturnValue) == 0x000000, "Member 'FldDungeonEffectTartarosSearch_GetMaxBrightness::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonEffectTartarosSearch.GetRadius
// 0x0004 (0x0004 - 0x0000)
struct FldDungeonEffectTartarosSearch_GetRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonEffectTartarosSearch_GetRadius) == 0x000004, "Wrong alignment on FldDungeonEffectTartarosSearch_GetRadius");
static_assert(sizeof(FldDungeonEffectTartarosSearch_GetRadius) == 0x000004, "Wrong size on FldDungeonEffectTartarosSearch_GetRadius");
static_assert(offsetof(FldDungeonEffectTartarosSearch_GetRadius, ReturnValue) == 0x000000, "Member 'FldDungeonEffectTartarosSearch_GetRadius::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonEffectCameraAttachActor.OnComplete
// 0x0008 (0x0008 - 0x0000)
struct FldDungeonEffectCameraAttachActor_OnComplete final
{
public:
	class UNiagaraComponent*                      PSystem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonEffectCameraAttachActor_OnComplete) == 0x000008, "Wrong alignment on FldDungeonEffectCameraAttachActor_OnComplete");
static_assert(sizeof(FldDungeonEffectCameraAttachActor_OnComplete) == 0x000008, "Wrong size on FldDungeonEffectCameraAttachActor_OnComplete");
static_assert(offsetof(FldDungeonEffectCameraAttachActor_OnComplete, PSystem) == 0x000000, "Member 'FldDungeonEffectCameraAttachActor_OnComplete::PSystem' has a wrong offset!");

// Function xrd777.FldDungeonEnvController.FadeOutDungeonFilter
// 0x0004 (0x0004 - 0x0000)
struct FldDungeonEnvController_FadeOutDungeonFilter final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonEnvController_FadeOutDungeonFilter) == 0x000004, "Wrong alignment on FldDungeonEnvController_FadeOutDungeonFilter");
static_assert(sizeof(FldDungeonEnvController_FadeOutDungeonFilter) == 0x000004, "Wrong size on FldDungeonEnvController_FadeOutDungeonFilter");
static_assert(offsetof(FldDungeonEnvController_FadeOutDungeonFilter, Alpha) == 0x000000, "Member 'FldDungeonEnvController_FadeOutDungeonFilter::Alpha' has a wrong offset!");

// Function xrd777.UICombineCalcFunction.GetBookDrawOut
// 0x0020 (0x0020 - 0x0000)
struct UICombineCalcFunction_GetBookDrawOut final
{
public:
	int32                                         Power;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Magic;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Endurance;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Quick;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Luck;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CommuLevel;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxSkillLevel;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICombineCalcFunction_GetBookDrawOut) == 0x000004, "Wrong alignment on UICombineCalcFunction_GetBookDrawOut");
static_assert(sizeof(UICombineCalcFunction_GetBookDrawOut) == 0x000020, "Wrong size on UICombineCalcFunction_GetBookDrawOut");
static_assert(offsetof(UICombineCalcFunction_GetBookDrawOut, Power) == 0x000000, "Member 'UICombineCalcFunction_GetBookDrawOut::Power' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetBookDrawOut, Magic) == 0x000004, "Member 'UICombineCalcFunction_GetBookDrawOut::Magic' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetBookDrawOut, Endurance) == 0x000008, "Member 'UICombineCalcFunction_GetBookDrawOut::Endurance' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetBookDrawOut, Quick) == 0x00000C, "Member 'UICombineCalcFunction_GetBookDrawOut::Quick' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetBookDrawOut, Luck) == 0x000010, "Member 'UICombineCalcFunction_GetBookDrawOut::Luck' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetBookDrawOut, CommuLevel) == 0x000014, "Member 'UICombineCalcFunction_GetBookDrawOut::CommuLevel' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetBookDrawOut, MaxSkillLevel) == 0x000018, "Member 'UICombineCalcFunction_GetBookDrawOut::MaxSkillLevel' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetBookDrawOut, ReturnValue) == 0x00001C, "Member 'UICombineCalcFunction_GetBookDrawOut::ReturnValue' has a wrong offset!");

// Function xrd777.UICombineCalcFunction.GetFoolAccidentLevel
// 0x0008 (0x0008 - 0x0000)
struct UICombineCalcFunction_GetFoolAccidentLevel final
{
public:
	int32                                         PlayerLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICombineCalcFunction_GetFoolAccidentLevel) == 0x000004, "Wrong alignment on UICombineCalcFunction_GetFoolAccidentLevel");
static_assert(sizeof(UICombineCalcFunction_GetFoolAccidentLevel) == 0x000008, "Wrong size on UICombineCalcFunction_GetFoolAccidentLevel");
static_assert(offsetof(UICombineCalcFunction_GetFoolAccidentLevel, PlayerLevel) == 0x000000, "Member 'UICombineCalcFunction_GetFoolAccidentLevel::PlayerLevel' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetFoolAccidentLevel, ReturnValue) == 0x000004, "Member 'UICombineCalcFunction_GetFoolAccidentLevel::ReturnValue' has a wrong offset!");

// Function xrd777.UICombineCalcFunction.GetNormalSpreadLevel
// 0x000C (0x000C - 0x0000)
struct UICombineCalcFunction_GetNormalSpreadLevel final
{
public:
	int32                                         LevelA;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelB;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICombineCalcFunction_GetNormalSpreadLevel) == 0x000004, "Wrong alignment on UICombineCalcFunction_GetNormalSpreadLevel");
static_assert(sizeof(UICombineCalcFunction_GetNormalSpreadLevel) == 0x00000C, "Wrong size on UICombineCalcFunction_GetNormalSpreadLevel");
static_assert(offsetof(UICombineCalcFunction_GetNormalSpreadLevel, LevelA) == 0x000000, "Member 'UICombineCalcFunction_GetNormalSpreadLevel::LevelA' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetNormalSpreadLevel, LevelB) == 0x000004, "Member 'UICombineCalcFunction_GetNormalSpreadLevel::LevelB' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetNormalSpreadLevel, ReturnValue) == 0x000008, "Member 'UICombineCalcFunction_GetNormalSpreadLevel::ReturnValue' has a wrong offset!");

// Function xrd777.UICombineCalcFunction.GetSuccessionIncense
// 0x0010 (0x0010 - 0x0000)
struct UICombineCalcFunction_GetSuccessionIncense final
{
public:
	int32                                         IncenseParam;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuccessionParam;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICombineCalcFunction_GetSuccessionIncense) == 0x000004, "Wrong alignment on UICombineCalcFunction_GetSuccessionIncense");
static_assert(sizeof(UICombineCalcFunction_GetSuccessionIncense) == 0x000010, "Wrong size on UICombineCalcFunction_GetSuccessionIncense");
static_assert(offsetof(UICombineCalcFunction_GetSuccessionIncense, IncenseParam) == 0x000000, "Member 'UICombineCalcFunction_GetSuccessionIncense::IncenseParam' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetSuccessionIncense, SuccessionParam) == 0x000004, "Member 'UICombineCalcFunction_GetSuccessionIncense::SuccessionParam' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetSuccessionIncense, Num) == 0x000008, "Member 'UICombineCalcFunction_GetSuccessionIncense::Num' has a wrong offset!");
static_assert(offsetof(UICombineCalcFunction_GetSuccessionIncense, ReturnValue) == 0x00000C, "Member 'UICombineCalcFunction_GetSuccessionIncense::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonObjectActor.HitActionNotice
// 0x0008 (0x0008 - 0x0000)
struct FldDungeonObjectActor_HitActionNotice final
{
public:
	class APawn*                                  Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonObjectActor_HitActionNotice) == 0x000008, "Wrong alignment on FldDungeonObjectActor_HitActionNotice");
static_assert(sizeof(FldDungeonObjectActor_HitActionNotice) == 0x000008, "Wrong size on FldDungeonObjectActor_HitActionNotice");
static_assert(offsetof(FldDungeonObjectActor_HitActionNotice, Player) == 0x000000, "Member 'FldDungeonObjectActor_HitActionNotice::Player' has a wrong offset!");

// Function xrd777.FldDungeonObjectActor.HitInNotice
// 0x0008 (0x0008 - 0x0000)
struct FldDungeonObjectActor_HitInNotice final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonObjectActor_HitInNotice) == 0x000008, "Wrong alignment on FldDungeonObjectActor_HitInNotice");
static_assert(sizeof(FldDungeonObjectActor_HitInNotice) == 0x000008, "Wrong size on FldDungeonObjectActor_HitInNotice");
static_assert(offsetof(FldDungeonObjectActor_HitInNotice, OtherActor) == 0x000000, "Member 'FldDungeonObjectActor_HitInNotice::OtherActor' has a wrong offset!");

// Function xrd777.FldDungeonObjectActor.HitOutNotice
// 0x0008 (0x0008 - 0x0000)
struct FldDungeonObjectActor_HitOutNotice final
{
public:
	class AActor*                                 OtherActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonObjectActor_HitOutNotice) == 0x000008, "Wrong alignment on FldDungeonObjectActor_HitOutNotice");
static_assert(sizeof(FldDungeonObjectActor_HitOutNotice) == 0x000008, "Wrong size on FldDungeonObjectActor_HitOutNotice");
static_assert(offsetof(FldDungeonObjectActor_HitOutNotice, OtherActor) == 0x000000, "Member 'FldDungeonObjectActor_HitOutNotice::OtherActor' has a wrong offset!");

// Function xrd777.TestPauseSoundClass.testPauseSoundPasue
// 0x0001 (0x0001 - 0x0000)
struct TestPauseSoundClass_TestPauseSoundPasue final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestPauseSoundClass_TestPauseSoundPasue) == 0x000001, "Wrong alignment on TestPauseSoundClass_TestPauseSoundPasue");
static_assert(sizeof(TestPauseSoundClass_TestPauseSoundPasue) == 0x000001, "Wrong size on TestPauseSoundClass_TestPauseSoundPasue");
static_assert(offsetof(TestPauseSoundClass_TestPauseSoundPasue, Flag) == 0x000000, "Member 'TestPauseSoundClass_TestPauseSoundPasue::Flag' has a wrong offset!");

// Function xrd777.FldDungeonStartParam.CheckStartParam
// 0x0001 (0x0001 - 0x0000)
struct FldDungeonStartParam_CheckStartParam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldDungeonStartParam_CheckStartParam) == 0x000001, "Wrong alignment on FldDungeonStartParam_CheckStartParam");
static_assert(sizeof(FldDungeonStartParam_CheckStartParam) == 0x000001, "Wrong size on FldDungeonStartParam_CheckStartParam");
static_assert(offsetof(FldDungeonStartParam_CheckStartParam, ReturnValue) == 0x000000, "Member 'FldDungeonStartParam_CheckStartParam::ReturnValue' has a wrong offset!");

// Function xrd777.FldDungeonStartParam.SetStartParam
// 0x0010 (0x0010 - 0x0000)
struct FldDungeonStartParam_SetStartParam final
{
public:
	int32                                         Major;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Idx;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bScript;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldDungeonStartParam_SetStartParam) == 0x000004, "Wrong alignment on FldDungeonStartParam_SetStartParam");
static_assert(sizeof(FldDungeonStartParam_SetStartParam) == 0x000010, "Wrong size on FldDungeonStartParam_SetStartParam");
static_assert(offsetof(FldDungeonStartParam_SetStartParam, Major) == 0x000000, "Member 'FldDungeonStartParam_SetStartParam::Major' has a wrong offset!");
static_assert(offsetof(FldDungeonStartParam_SetStartParam, Minor) == 0x000004, "Member 'FldDungeonStartParam_SetStartParam::Minor' has a wrong offset!");
static_assert(offsetof(FldDungeonStartParam_SetStartParam, Idx) == 0x000008, "Member 'FldDungeonStartParam_SetStartParam::Idx' has a wrong offset!");
static_assert(offsetof(FldDungeonStartParam_SetStartParam, bScript) == 0x00000C, "Member 'FldDungeonStartParam_SetStartParam::bScript' has a wrong offset!");

// Function xrd777.MiniMapAssetLoader.GetAssetLoader
// 0x0008 (0x0008 - 0x0000)
struct MiniMapAssetLoader_GetAssetLoader final
{
public:
	class UAssetLoader*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapAssetLoader_GetAssetLoader) == 0x000008, "Wrong alignment on MiniMapAssetLoader_GetAssetLoader");
static_assert(sizeof(MiniMapAssetLoader_GetAssetLoader) == 0x000008, "Wrong size on MiniMapAssetLoader_GetAssetLoader");
static_assert(offsetof(MiniMapAssetLoader_GetAssetLoader, ReturnValue) == 0x000000, "Member 'MiniMapAssetLoader_GetAssetLoader::ReturnValue' has a wrong offset!");

// Function xrd777.MiniMapAssetLoader.GetFldMiniMapIconTable
// 0x0008 (0x0008 - 0x0000)
struct MiniMapAssetLoader_GetFldMiniMapIconTable final
{
public:
	class UMiniMapIconListTable*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapAssetLoader_GetFldMiniMapIconTable) == 0x000008, "Wrong alignment on MiniMapAssetLoader_GetFldMiniMapIconTable");
static_assert(sizeof(MiniMapAssetLoader_GetFldMiniMapIconTable) == 0x000008, "Wrong size on MiniMapAssetLoader_GetFldMiniMapIconTable");
static_assert(offsetof(MiniMapAssetLoader_GetFldMiniMapIconTable, ReturnValue) == 0x000000, "Member 'MiniMapAssetLoader_GetFldMiniMapIconTable::ReturnValue' has a wrong offset!");

// Function xrd777.MiniMapAssetLoader.GetFldType
// 0x0001 (0x0001 - 0x0000)
struct MiniMapAssetLoader_GetFldType final
{
public:
	EFldType                                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapAssetLoader_GetFldType) == 0x000001, "Wrong alignment on MiniMapAssetLoader_GetFldType");
static_assert(sizeof(MiniMapAssetLoader_GetFldType) == 0x000001, "Wrong size on MiniMapAssetLoader_GetFldType");
static_assert(offsetof(MiniMapAssetLoader_GetFldType, ReturnValue) == 0x000000, "Member 'MiniMapAssetLoader_GetFldType::ReturnValue' has a wrong offset!");

// Function xrd777.MiniMapAssetLoader.GetMapParts
// 0x0010 (0x0010 - 0x0000)
struct MiniMapAssetLoader_GetMapParts final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapAssetLoader_GetMapParts) == 0x000008, "Wrong alignment on MiniMapAssetLoader_GetMapParts");
static_assert(sizeof(MiniMapAssetLoader_GetMapParts) == 0x000010, "Wrong size on MiniMapAssetLoader_GetMapParts");
static_assert(offsetof(MiniMapAssetLoader_GetMapParts, Index_0) == 0x000000, "Member 'MiniMapAssetLoader_GetMapParts::Index_0' has a wrong offset!");
static_assert(offsetof(MiniMapAssetLoader_GetMapParts, ReturnValue) == 0x000008, "Member 'MiniMapAssetLoader_GetMapParts::ReturnValue' has a wrong offset!");

// Function xrd777.MiniMapAssetLoader.GetMapTex
// 0x0008 (0x0008 - 0x0000)
struct MiniMapAssetLoader_GetMapTex final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapAssetLoader_GetMapTex) == 0x000008, "Wrong alignment on MiniMapAssetLoader_GetMapTex");
static_assert(sizeof(MiniMapAssetLoader_GetMapTex) == 0x000008, "Wrong size on MiniMapAssetLoader_GetMapTex");
static_assert(offsetof(MiniMapAssetLoader_GetMapTex, ReturnValue) == 0x000000, "Member 'MiniMapAssetLoader_GetMapTex::ReturnValue' has a wrong offset!");

// Function xrd777.MiniMapAssetLoader.GetMapTexture
// 0x0008 (0x0008 - 0x0000)
struct MiniMapAssetLoader_GetMapTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapAssetLoader_GetMapTexture) == 0x000008, "Wrong alignment on MiniMapAssetLoader_GetMapTexture");
static_assert(sizeof(MiniMapAssetLoader_GetMapTexture) == 0x000008, "Wrong size on MiniMapAssetLoader_GetMapTexture");
static_assert(offsetof(MiniMapAssetLoader_GetMapTexture, ReturnValue) == 0x000000, "Member 'MiniMapAssetLoader_GetMapTexture::ReturnValue' has a wrong offset!");

// Function xrd777.MiniMapAssetLoader.GetPartList
// 0x0018 (0x0018 - 0x0000)
struct MiniMapAssetLoader_GetPartList final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapAssetLoader_GetPartList) == 0x000008, "Wrong alignment on MiniMapAssetLoader_GetPartList");
static_assert(sizeof(MiniMapAssetLoader_GetPartList) == 0x000018, "Wrong size on MiniMapAssetLoader_GetPartList");
static_assert(offsetof(MiniMapAssetLoader_GetPartList, Index_0) == 0x000000, "Member 'MiniMapAssetLoader_GetPartList::Index_0' has a wrong offset!");
static_assert(offsetof(MiniMapAssetLoader_GetPartList, ReturnValue) == 0x000008, "Member 'MiniMapAssetLoader_GetPartList::ReturnValue' has a wrong offset!");

// Function xrd777.MiniMapAssetLoader.GetPartMaskSpr
// 0x0008 (0x0008 - 0x0000)
struct MiniMapAssetLoader_GetPartMaskSpr final
{
public:
	class USprAsset*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapAssetLoader_GetPartMaskSpr) == 0x000008, "Wrong alignment on MiniMapAssetLoader_GetPartMaskSpr");
static_assert(sizeof(MiniMapAssetLoader_GetPartMaskSpr) == 0x000008, "Wrong size on MiniMapAssetLoader_GetPartMaskSpr");
static_assert(offsetof(MiniMapAssetLoader_GetPartMaskSpr, ReturnValue) == 0x000000, "Member 'MiniMapAssetLoader_GetPartMaskSpr::ReturnValue' has a wrong offset!");

// Function xrd777.MiniMapAssetLoader.GetTartarusMapPartIndexList
// 0x0058 (0x0058 - 0x0000)
struct MiniMapAssetLoader_GetTartarusMapPartIndexList final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            ReturnValue;                                       // 0x0008(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapAssetLoader_GetTartarusMapPartIndexList) == 0x000008, "Wrong alignment on MiniMapAssetLoader_GetTartarusMapPartIndexList");
static_assert(sizeof(MiniMapAssetLoader_GetTartarusMapPartIndexList) == 0x000058, "Wrong size on MiniMapAssetLoader_GetTartarusMapPartIndexList");
static_assert(offsetof(MiniMapAssetLoader_GetTartarusMapPartIndexList, Index_0) == 0x000000, "Member 'MiniMapAssetLoader_GetTartarusMapPartIndexList::Index_0' has a wrong offset!");
static_assert(offsetof(MiniMapAssetLoader_GetTartarusMapPartIndexList, ReturnValue) == 0x000008, "Member 'MiniMapAssetLoader_GetTartarusMapPartIndexList::ReturnValue' has a wrong offset!");

// Function xrd777.MiniMapAssetLoader.GetWallTex
// 0x0008 (0x0008 - 0x0000)
struct MiniMapAssetLoader_GetWallTex final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MiniMapAssetLoader_GetWallTex) == 0x000008, "Wrong alignment on MiniMapAssetLoader_GetWallTex");
static_assert(sizeof(MiniMapAssetLoader_GetWallTex) == 0x000008, "Wrong size on MiniMapAssetLoader_GetWallTex");
static_assert(offsetof(MiniMapAssetLoader_GetWallTex, ReturnValue) == 0x000000, "Member 'MiniMapAssetLoader_GetWallTex::ReturnValue' has a wrong offset!");

// Function xrd777.FldEnemyManager.Add
// 0x0008 (0x0008 - 0x0000)
struct FldEnemyManager_Add final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldEnemyManager_Add) == 0x000008, "Wrong alignment on FldEnemyManager_Add");
static_assert(sizeof(FldEnemyManager_Add) == 0x000008, "Wrong size on FldEnemyManager_Add");
static_assert(offsetof(FldEnemyManager_Add, Actor) == 0x000000, "Member 'FldEnemyManager_Add::Actor' has a wrong offset!");

// Function xrd777.FldEnemyManager.SetEnable
// 0x0008 (0x0008 - 0x0000)
struct FldEnemyManager_SetEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Group;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldEnemyManager_SetEnable) == 0x000004, "Wrong alignment on FldEnemyManager_SetEnable");
static_assert(sizeof(FldEnemyManager_SetEnable) == 0x000008, "Wrong size on FldEnemyManager_SetEnable");
static_assert(offsetof(FldEnemyManager_SetEnable, Enable) == 0x000000, "Member 'FldEnemyManager_SetEnable::Enable' has a wrong offset!");
static_assert(offsetof(FldEnemyManager_SetEnable, Group) == 0x000004, "Member 'FldEnemyManager_SetEnable::Group' has a wrong offset!");

// Function xrd777.FldEnemyManager.Setup
// 0x0008 (0x0008 - 0x0000)
struct FldEnemyManager_Setup final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldEnemyManager_Setup) == 0x000008, "Wrong alignment on FldEnemyManager_Setup");
static_assert(sizeof(FldEnemyManager_Setup) == 0x000008, "Wrong size on FldEnemyManager_Setup");
static_assert(offsetof(FldEnemyManager_Setup, Actor) == 0x000000, "Member 'FldEnemyManager_Setup::Actor' has a wrong offset!");

// Function xrd777.FldEnemyNormalComp.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct FldEnemyNormalComp_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldEnemyNormalComp_OnMontageEnded) == 0x000008, "Wrong alignment on FldEnemyNormalComp_OnMontageEnded");
static_assert(sizeof(FldEnemyNormalComp_OnMontageEnded) == 0x000010, "Wrong size on FldEnemyNormalComp_OnMontageEnded");
static_assert(offsetof(FldEnemyNormalComp_OnMontageEnded, Montage) == 0x000000, "Member 'FldEnemyNormalComp_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(FldEnemyNormalComp_OnMontageEnded, bInterrupted) == 0x000008, "Member 'FldEnemyNormalComp_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function xrd777.ModelCaptureUpdater.OnSetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct ModelCaptureUpdater_OnSetTargetActor final
{
public:
	class AActor*                                 AActor;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModelCaptureUpdater_OnSetTargetActor) == 0x000008, "Wrong alignment on ModelCaptureUpdater_OnSetTargetActor");
static_assert(sizeof(ModelCaptureUpdater_OnSetTargetActor) == 0x000008, "Wrong size on ModelCaptureUpdater_OnSetTargetActor");
static_assert(offsetof(ModelCaptureUpdater_OnSetTargetActor, AActor) == 0x000000, "Member 'ModelCaptureUpdater_OnSetTargetActor::AActor' has a wrong offset!");

// Function xrd777.PauseUserWidget.GetTickableWhenPaused
// 0x0001 (0x0001 - 0x0000)
struct PauseUserWidget_GetTickableWhenPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseUserWidget_GetTickableWhenPaused) == 0x000001, "Wrong alignment on PauseUserWidget_GetTickableWhenPaused");
static_assert(sizeof(PauseUserWidget_GetTickableWhenPaused) == 0x000001, "Wrong size on PauseUserWidget_GetTickableWhenPaused");
static_assert(offsetof(PauseUserWidget_GetTickableWhenPaused, ReturnValue) == 0x000000, "Member 'PauseUserWidget_GetTickableWhenPaused::ReturnValue' has a wrong offset!");

// Function xrd777.PauseUserWidget.SetTickableWhenPaused
// 0x0001 (0x0001 - 0x0000)
struct PauseUserWidget_SetTickableWhenPaused final
{
public:
	bool                                          bTickableWhenPaused;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PauseUserWidget_SetTickableWhenPaused) == 0x000001, "Wrong alignment on PauseUserWidget_SetTickableWhenPaused");
static_assert(sizeof(PauseUserWidget_SetTickableWhenPaused) == 0x000001, "Wrong size on PauseUserWidget_SetTickableWhenPaused");
static_assert(offsetof(PauseUserWidget_SetTickableWhenPaused, bTickableWhenPaused) == 0x000000, "Member 'PauseUserWidget_SetTickableWhenPaused::bTickableWhenPaused' has a wrong offset!");

// Function xrd777.FldHitSoundCore.OnActorOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct FldHitSoundCore_OnActorOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldHitSoundCore_OnActorOverlapBegin) == 0x000008, "Wrong alignment on FldHitSoundCore_OnActorOverlapBegin");
static_assert(sizeof(FldHitSoundCore_OnActorOverlapBegin) == 0x0000A8, "Wrong size on FldHitSoundCore_OnActorOverlapBegin");
static_assert(offsetof(FldHitSoundCore_OnActorOverlapBegin, OverlappedComponent) == 0x000000, "Member 'FldHitSoundCore_OnActorOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldHitSoundCore_OnActorOverlapBegin, OtherActor) == 0x000008, "Member 'FldHitSoundCore_OnActorOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(FldHitSoundCore_OnActorOverlapBegin, OtherComp) == 0x000010, "Member 'FldHitSoundCore_OnActorOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(FldHitSoundCore_OnActorOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'FldHitSoundCore_OnActorOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FldHitSoundCore_OnActorOverlapBegin, bFromSweep) == 0x00001C, "Member 'FldHitSoundCore_OnActorOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(FldHitSoundCore_OnActorOverlapBegin, SweepResult) == 0x000020, "Member 'FldHitSoundCore_OnActorOverlapBegin::SweepResult' has a wrong offset!");

// Function xrd777.FldHitSoundCore.OnActorOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct FldHitSoundCore_OnActorOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldHitSoundCore_OnActorOverlapEnd) == 0x000008, "Wrong alignment on FldHitSoundCore_OnActorOverlapEnd");
static_assert(sizeof(FldHitSoundCore_OnActorOverlapEnd) == 0x000020, "Wrong size on FldHitSoundCore_OnActorOverlapEnd");
static_assert(offsetof(FldHitSoundCore_OnActorOverlapEnd, OverlappedComponent) == 0x000000, "Member 'FldHitSoundCore_OnActorOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldHitSoundCore_OnActorOverlapEnd, OtherActor) == 0x000008, "Member 'FldHitSoundCore_OnActorOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(FldHitSoundCore_OnActorOverlapEnd, OtherComp) == 0x000010, "Member 'FldHitSoundCore_OnActorOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(FldHitSoundCore_OnActorOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'FldHitSoundCore_OnActorOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function xrd777.PlatformFunctionLibrary.GetFPS
// 0x0004 (0x0004 - 0x0000)
struct PlatformFunctionLibrary_GetFPS final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformFunctionLibrary_GetFPS) == 0x000004, "Wrong alignment on PlatformFunctionLibrary_GetFPS");
static_assert(sizeof(PlatformFunctionLibrary_GetFPS) == 0x000004, "Wrong size on PlatformFunctionLibrary_GetFPS");
static_assert(offsetof(PlatformFunctionLibrary_GetFPS, ReturnValue) == 0x000000, "Member 'PlatformFunctionLibrary_GetFPS::ReturnValue' has a wrong offset!");

// Function xrd777.PlatformFunctionLibrary.Platform
// 0x0001 (0x0001 - 0x0000)
struct PlatformFunctionLibrary_Platform final
{
public:
	EPlatformName                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformFunctionLibrary_Platform) == 0x000001, "Wrong alignment on PlatformFunctionLibrary_Platform");
static_assert(sizeof(PlatformFunctionLibrary_Platform) == 0x000001, "Wrong size on PlatformFunctionLibrary_Platform");
static_assert(offsetof(PlatformFunctionLibrary_Platform, ReturnValue) == 0x000000, "Member 'PlatformFunctionLibrary_Platform::ReturnValue' has a wrong offset!");

// Function xrd777.FldHitSoundSnapshotCore.OnActorOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct FldHitSoundSnapshotCore_OnActorOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldHitSoundSnapshotCore_OnActorOverlapBegin) == 0x000008, "Wrong alignment on FldHitSoundSnapshotCore_OnActorOverlapBegin");
static_assert(sizeof(FldHitSoundSnapshotCore_OnActorOverlapBegin) == 0x0000A8, "Wrong size on FldHitSoundSnapshotCore_OnActorOverlapBegin");
static_assert(offsetof(FldHitSoundSnapshotCore_OnActorOverlapBegin, OverlappedComponent) == 0x000000, "Member 'FldHitSoundSnapshotCore_OnActorOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldHitSoundSnapshotCore_OnActorOverlapBegin, OtherActor) == 0x000008, "Member 'FldHitSoundSnapshotCore_OnActorOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(FldHitSoundSnapshotCore_OnActorOverlapBegin, OtherComp) == 0x000010, "Member 'FldHitSoundSnapshotCore_OnActorOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(FldHitSoundSnapshotCore_OnActorOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'FldHitSoundSnapshotCore_OnActorOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FldHitSoundSnapshotCore_OnActorOverlapBegin, bFromSweep) == 0x00001C, "Member 'FldHitSoundSnapshotCore_OnActorOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(FldHitSoundSnapshotCore_OnActorOverlapBegin, SweepResult) == 0x000020, "Member 'FldHitSoundSnapshotCore_OnActorOverlapBegin::SweepResult' has a wrong offset!");

// Function xrd777.FldHitSoundSnapshotCore.OnActorOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct FldHitSoundSnapshotCore_OnActorOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldHitSoundSnapshotCore_OnActorOverlapEnd) == 0x000008, "Wrong alignment on FldHitSoundSnapshotCore_OnActorOverlapEnd");
static_assert(sizeof(FldHitSoundSnapshotCore_OnActorOverlapEnd) == 0x000020, "Wrong size on FldHitSoundSnapshotCore_OnActorOverlapEnd");
static_assert(offsetof(FldHitSoundSnapshotCore_OnActorOverlapEnd, OverlappedComponent) == 0x000000, "Member 'FldHitSoundSnapshotCore_OnActorOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldHitSoundSnapshotCore_OnActorOverlapEnd, OtherActor) == 0x000008, "Member 'FldHitSoundSnapshotCore_OnActorOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(FldHitSoundSnapshotCore_OnActorOverlapEnd, OtherComp) == 0x000010, "Member 'FldHitSoundSnapshotCore_OnActorOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(FldHitSoundSnapshotCore_OnActorOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'FldHitSoundSnapshotCore_OnActorOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function xrd777.UIConfiguration.IsWindowDraw
// 0x0001 (0x0001 - 0x0000)
struct UIConfiguration_IsWindowDraw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfiguration_IsWindowDraw) == 0x000001, "Wrong alignment on UIConfiguration_IsWindowDraw");
static_assert(sizeof(UIConfiguration_IsWindowDraw) == 0x000001, "Wrong size on UIConfiguration_IsWindowDraw");
static_assert(offsetof(UIConfiguration_IsWindowDraw, ReturnValue) == 0x000000, "Member 'UIConfiguration_IsWindowDraw::ReturnValue' has a wrong offset!");

// Function xrd777.UIConfiguration.OnConfigCancel
// 0x0001 (0x0001 - 0x0000)
struct UIConfiguration_OnConfigCancel final
{
public:
	bool                                          InIsCancel;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfiguration_OnConfigCancel) == 0x000001, "Wrong alignment on UIConfiguration_OnConfigCancel");
static_assert(sizeof(UIConfiguration_OnConfigCancel) == 0x000001, "Wrong size on UIConfiguration_OnConfigCancel");
static_assert(offsetof(UIConfiguration_OnConfigCancel, InIsCancel) == 0x000000, "Member 'UIConfiguration_OnConfigCancel::InIsCancel' has a wrong offset!");

// Function xrd777.UIConfiguration.OnDifficultCancel
// 0x0001 (0x0001 - 0x0000)
struct UIConfiguration_OnDifficultCancel final
{
public:
	bool                                          InIsCancel;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIConfiguration_OnDifficultCancel) == 0x000001, "Wrong alignment on UIConfiguration_OnDifficultCancel");
static_assert(sizeof(UIConfiguration_OnDifficultCancel) == 0x000001, "Wrong size on UIConfiguration_OnDifficultCancel");
static_assert(offsetof(UIConfiguration_OnDifficultCancel, InIsCancel) == 0x000000, "Member 'UIConfiguration_OnDifficultCancel::InIsCancel' has a wrong offset!");

// Function xrd777.FldLinkAnimHitBase.OnActorOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct FldLinkAnimHitBase_OnActorOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldLinkAnimHitBase_OnActorOverlapBegin) == 0x000008, "Wrong alignment on FldLinkAnimHitBase_OnActorOverlapBegin");
static_assert(sizeof(FldLinkAnimHitBase_OnActorOverlapBegin) == 0x0000A8, "Wrong size on FldLinkAnimHitBase_OnActorOverlapBegin");
static_assert(offsetof(FldLinkAnimHitBase_OnActorOverlapBegin, OverlappedComponent) == 0x000000, "Member 'FldLinkAnimHitBase_OnActorOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitBase_OnActorOverlapBegin, OtherActor) == 0x000008, "Member 'FldLinkAnimHitBase_OnActorOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitBase_OnActorOverlapBegin, OtherComp) == 0x000010, "Member 'FldLinkAnimHitBase_OnActorOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitBase_OnActorOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'FldLinkAnimHitBase_OnActorOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitBase_OnActorOverlapBegin, bFromSweep) == 0x00001C, "Member 'FldLinkAnimHitBase_OnActorOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitBase_OnActorOverlapBegin, SweepResult) == 0x000020, "Member 'FldLinkAnimHitBase_OnActorOverlapBegin::SweepResult' has a wrong offset!");

// Function xrd777.FldLinkAnimHitBase.OnActorOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct FldLinkAnimHitBase_OnActorOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldLinkAnimHitBase_OnActorOverlapEnd) == 0x000008, "Wrong alignment on FldLinkAnimHitBase_OnActorOverlapEnd");
static_assert(sizeof(FldLinkAnimHitBase_OnActorOverlapEnd) == 0x000020, "Wrong size on FldLinkAnimHitBase_OnActorOverlapEnd");
static_assert(offsetof(FldLinkAnimHitBase_OnActorOverlapEnd, OverlappedComponent) == 0x000000, "Member 'FldLinkAnimHitBase_OnActorOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitBase_OnActorOverlapEnd, OtherActor) == 0x000008, "Member 'FldLinkAnimHitBase_OnActorOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitBase_OnActorOverlapEnd, OtherComp) == 0x000010, "Member 'FldLinkAnimHitBase_OnActorOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitBase_OnActorOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'FldLinkAnimHitBase_OnActorOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function xrd777.FldLinkAnimHitComp_BOX.OnActorOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct FldLinkAnimHitComp_BOX_OnActorOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldLinkAnimHitComp_BOX_OnActorOverlapBegin) == 0x000008, "Wrong alignment on FldLinkAnimHitComp_BOX_OnActorOverlapBegin");
static_assert(sizeof(FldLinkAnimHitComp_BOX_OnActorOverlapBegin) == 0x0000A8, "Wrong size on FldLinkAnimHitComp_BOX_OnActorOverlapBegin");
static_assert(offsetof(FldLinkAnimHitComp_BOX_OnActorOverlapBegin, OverlappedComponent) == 0x000000, "Member 'FldLinkAnimHitComp_BOX_OnActorOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_BOX_OnActorOverlapBegin, OtherActor) == 0x000008, "Member 'FldLinkAnimHitComp_BOX_OnActorOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_BOX_OnActorOverlapBegin, OtherComp) == 0x000010, "Member 'FldLinkAnimHitComp_BOX_OnActorOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_BOX_OnActorOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'FldLinkAnimHitComp_BOX_OnActorOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_BOX_OnActorOverlapBegin, bFromSweep) == 0x00001C, "Member 'FldLinkAnimHitComp_BOX_OnActorOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_BOX_OnActorOverlapBegin, SweepResult) == 0x000020, "Member 'FldLinkAnimHitComp_BOX_OnActorOverlapBegin::SweepResult' has a wrong offset!");

// Function xrd777.FldLinkAnimHitComp_BOX.OnActorOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct FldLinkAnimHitComp_BOX_OnActorOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldLinkAnimHitComp_BOX_OnActorOverlapEnd) == 0x000008, "Wrong alignment on FldLinkAnimHitComp_BOX_OnActorOverlapEnd");
static_assert(sizeof(FldLinkAnimHitComp_BOX_OnActorOverlapEnd) == 0x000020, "Wrong size on FldLinkAnimHitComp_BOX_OnActorOverlapEnd");
static_assert(offsetof(FldLinkAnimHitComp_BOX_OnActorOverlapEnd, OverlappedComponent) == 0x000000, "Member 'FldLinkAnimHitComp_BOX_OnActorOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_BOX_OnActorOverlapEnd, OtherActor) == 0x000008, "Member 'FldLinkAnimHitComp_BOX_OnActorOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_BOX_OnActorOverlapEnd, OtherComp) == 0x000010, "Member 'FldLinkAnimHitComp_BOX_OnActorOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_BOX_OnActorOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'FldLinkAnimHitComp_BOX_OnActorOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function xrd777.FldLinkAnimHitComp_CIRCLE.OnActorOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin) == 0x000008, "Wrong alignment on FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin");
static_assert(sizeof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin) == 0x0000A8, "Wrong size on FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin");
static_assert(offsetof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin, OverlappedComponent) == 0x000000, "Member 'FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin, OtherActor) == 0x000008, "Member 'FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin, OtherComp) == 0x000010, "Member 'FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin, bFromSweep) == 0x00001C, "Member 'FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin, SweepResult) == 0x000020, "Member 'FldLinkAnimHitComp_CIRCLE_OnActorOverlapBegin::SweepResult' has a wrong offset!");

// Function xrd777.FldLinkAnimHitComp_CIRCLE.OnActorOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd) == 0x000008, "Wrong alignment on FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd");
static_assert(sizeof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd) == 0x000020, "Wrong size on FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd");
static_assert(offsetof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd, OverlappedComponent) == 0x000000, "Member 'FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd, OtherActor) == 0x000008, "Member 'FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd, OtherComp) == 0x000010, "Member 'FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'FldLinkAnimHitComp_CIRCLE_OnActorOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.GetFieldCameraShakeActor
// 0x0008 (0x0008 - 0x0000)
struct FldManagerSubsystem_GetFieldCameraShakeActor final
{
public:
	class AFldMiscCameraShake*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_GetFieldCameraShakeActor) == 0x000008, "Wrong alignment on FldManagerSubsystem_GetFieldCameraShakeActor");
static_assert(sizeof(FldManagerSubsystem_GetFieldCameraShakeActor) == 0x000008, "Wrong size on FldManagerSubsystem_GetFieldCameraShakeActor");
static_assert(offsetof(FldManagerSubsystem_GetFieldCameraShakeActor, ReturnValue) == 0x000000, "Member 'FldManagerSubsystem_GetFieldCameraShakeActor::ReturnValue' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.SetFieldCameraShakeActor
// 0x0008 (0x0008 - 0x0000)
struct FldManagerSubsystem_SetFieldCameraShakeActor final
{
public:
	class AFldMiscCameraShake*                    InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_SetFieldCameraShakeActor) == 0x000008, "Wrong alignment on FldManagerSubsystem_SetFieldCameraShakeActor");
static_assert(sizeof(FldManagerSubsystem_SetFieldCameraShakeActor) == 0x000008, "Wrong size on FldManagerSubsystem_SetFieldCameraShakeActor");
static_assert(offsetof(FldManagerSubsystem_SetFieldCameraShakeActor, InActor) == 0x000000, "Member 'FldManagerSubsystem_SetFieldCameraShakeActor::InActor' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.ChangeFieldSubLevelDebug
// 0x0030 (0x0030 - 0x0000)
struct FldManagerSubsystem_ChangeFieldSubLevelDebug final
{
public:
	int32                                         FieldMajorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDay;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldTimeZone                                  TimeZone;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldLoadPattern                               Pattern;                                           // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_ChangeFieldSubLevelDebug) == 0x000008, "Wrong alignment on FldManagerSubsystem_ChangeFieldSubLevelDebug");
static_assert(sizeof(FldManagerSubsystem_ChangeFieldSubLevelDebug) == 0x000030, "Wrong size on FldManagerSubsystem_ChangeFieldSubLevelDebug");
static_assert(offsetof(FldManagerSubsystem_ChangeFieldSubLevelDebug, FieldMajorID) == 0x000000, "Member 'FldManagerSubsystem_ChangeFieldSubLevelDebug::FieldMajorID' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ChangeFieldSubLevelDebug, FieldMinorID) == 0x000004, "Member 'FldManagerSubsystem_ChangeFieldSubLevelDebug::FieldMinorID' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ChangeFieldSubLevelDebug, TotalDay) == 0x000008, "Member 'FldManagerSubsystem_ChangeFieldSubLevelDebug::TotalDay' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ChangeFieldSubLevelDebug, TimeZone) == 0x00000C, "Member 'FldManagerSubsystem_ChangeFieldSubLevelDebug::TimeZone' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ChangeFieldSubLevelDebug, Pattern) == 0x00000D, "Member 'FldManagerSubsystem_ChangeFieldSubLevelDebug::Pattern' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ChangeFieldSubLevelDebug, WorldContextObject) == 0x000010, "Member 'FldManagerSubsystem_ChangeFieldSubLevelDebug::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ChangeFieldSubLevelDebug, LatentInfo) == 0x000018, "Member 'FldManagerSubsystem_ChangeFieldSubLevelDebug::LatentInfo' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.CheckKeyFree
// 0x0001 (0x0001 - 0x0000)
struct FldManagerSubsystem_CheckKeyFree final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_CheckKeyFree) == 0x000001, "Wrong alignment on FldManagerSubsystem_CheckKeyFree");
static_assert(sizeof(FldManagerSubsystem_CheckKeyFree) == 0x000001, "Wrong size on FldManagerSubsystem_CheckKeyFree");
static_assert(offsetof(FldManagerSubsystem_CheckKeyFree, ReturnValue) == 0x000000, "Member 'FldManagerSubsystem_CheckKeyFree::ReturnValue' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.IsEnablePartyChange
// 0x0001 (0x0001 - 0x0000)
struct FldManagerSubsystem_IsEnablePartyChange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_IsEnablePartyChange) == 0x000001, "Wrong alignment on FldManagerSubsystem_IsEnablePartyChange");
static_assert(sizeof(FldManagerSubsystem_IsEnablePartyChange) == 0x000001, "Wrong size on FldManagerSubsystem_IsEnablePartyChange");
static_assert(offsetof(FldManagerSubsystem_IsEnablePartyChange, ReturnValue) == 0x000000, "Member 'FldManagerSubsystem_IsEnablePartyChange::ReturnValue' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.IsKeyFreeEvent
// 0x0001 (0x0001 - 0x0000)
struct FldManagerSubsystem_IsKeyFreeEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_IsKeyFreeEvent) == 0x000001, "Wrong alignment on FldManagerSubsystem_IsKeyFreeEvent");
static_assert(sizeof(FldManagerSubsystem_IsKeyFreeEvent) == 0x000001, "Wrong size on FldManagerSubsystem_IsKeyFreeEvent");
static_assert(offsetof(FldManagerSubsystem_IsKeyFreeEvent, ReturnValue) == 0x000000, "Member 'FldManagerSubsystem_IsKeyFreeEvent::ReturnValue' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.IsLoadingField
// 0x0001 (0x0001 - 0x0000)
struct FldManagerSubsystem_IsLoadingField final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_IsLoadingField) == 0x000001, "Wrong alignment on FldManagerSubsystem_IsLoadingField");
static_assert(sizeof(FldManagerSubsystem_IsLoadingField) == 0x000001, "Wrong size on FldManagerSubsystem_IsLoadingField");
static_assert(offsetof(FldManagerSubsystem_IsLoadingField, ReturnValue) == 0x000000, "Member 'FldManagerSubsystem_IsLoadingField::ReturnValue' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.IsProcField
// 0x0001 (0x0001 - 0x0000)
struct FldManagerSubsystem_IsProcField final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_IsProcField) == 0x000001, "Wrong alignment on FldManagerSubsystem_IsProcField");
static_assert(sizeof(FldManagerSubsystem_IsProcField) == 0x000001, "Wrong size on FldManagerSubsystem_IsProcField");
static_assert(offsetof(FldManagerSubsystem_IsProcField, ReturnValue) == 0x000000, "Member 'FldManagerSubsystem_IsProcField::ReturnValue' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.IsProcFldEvent
// 0x0001 (0x0001 - 0x0000)
struct FldManagerSubsystem_IsProcFldEvent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_IsProcFldEvent) == 0x000001, "Wrong alignment on FldManagerSubsystem_IsProcFldEvent");
static_assert(sizeof(FldManagerSubsystem_IsProcFldEvent) == 0x000001, "Wrong size on FldManagerSubsystem_IsProcFldEvent");
static_assert(offsetof(FldManagerSubsystem_IsProcFldEvent, ReturnValue) == 0x000000, "Member 'FldManagerSubsystem_IsProcFldEvent::ReturnValue' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.LoadFieldSubLevelDebug
// 0x0030 (0x0030 - 0x0000)
struct FldManagerSubsystem_LoadFieldSubLevelDebug final
{
public:
	int32                                         FieldMajorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDay;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECldTimeZone                                  TimeZone;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFldLoadPattern                               Pattern;                                           // 0x000D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_LoadFieldSubLevelDebug) == 0x000008, "Wrong alignment on FldManagerSubsystem_LoadFieldSubLevelDebug");
static_assert(sizeof(FldManagerSubsystem_LoadFieldSubLevelDebug) == 0x000030, "Wrong size on FldManagerSubsystem_LoadFieldSubLevelDebug");
static_assert(offsetof(FldManagerSubsystem_LoadFieldSubLevelDebug, FieldMajorID) == 0x000000, "Member 'FldManagerSubsystem_LoadFieldSubLevelDebug::FieldMajorID' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_LoadFieldSubLevelDebug, FieldMinorID) == 0x000004, "Member 'FldManagerSubsystem_LoadFieldSubLevelDebug::FieldMinorID' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_LoadFieldSubLevelDebug, TotalDay) == 0x000008, "Member 'FldManagerSubsystem_LoadFieldSubLevelDebug::TotalDay' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_LoadFieldSubLevelDebug, TimeZone) == 0x00000C, "Member 'FldManagerSubsystem_LoadFieldSubLevelDebug::TimeZone' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_LoadFieldSubLevelDebug, Pattern) == 0x00000D, "Member 'FldManagerSubsystem_LoadFieldSubLevelDebug::Pattern' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_LoadFieldSubLevelDebug, WorldContextObject) == 0x000010, "Member 'FldManagerSubsystem_LoadFieldSubLevelDebug::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_LoadFieldSubLevelDebug, LatentInfo) == 0x000018, "Member 'FldManagerSubsystem_LoadFieldSubLevelDebug::LatentInfo' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.ProcLevelBluePrint
// 0x0070 (0x0070 - 0x0000)
struct FldManagerSubsystem_ProcLevelBluePrint final
{
public:
	TSubclassOf<class ACharacterBaseCore>         DefaultPlayerClass;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACharacterBaseCore>         DungeonPlayerClass;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACharacterBaseCore>         DungeonPlayerClass_Astrea;                         // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFldCameraBase>             DefaultCameraClass;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFldCameraBase>             DungeonCameraClass;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFldCamera>                 TransCameraClass;                                  // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACharacterBaseCore>         FollowerClass;                                     // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACharacterBaseCore>         FollowerKoromaruClass;                             // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          WorldContextObject;                                // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0048(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AFldCameraBase>             DngEntranceCameraClassAstrea;                      // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AFldCameraBase>             DngFinalFloorCameraClassAstrea;                    // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_ProcLevelBluePrint) == 0x000008, "Wrong alignment on FldManagerSubsystem_ProcLevelBluePrint");
static_assert(sizeof(FldManagerSubsystem_ProcLevelBluePrint) == 0x000070, "Wrong size on FldManagerSubsystem_ProcLevelBluePrint");
static_assert(offsetof(FldManagerSubsystem_ProcLevelBluePrint, DefaultPlayerClass) == 0x000000, "Member 'FldManagerSubsystem_ProcLevelBluePrint::DefaultPlayerClass' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ProcLevelBluePrint, DungeonPlayerClass) == 0x000008, "Member 'FldManagerSubsystem_ProcLevelBluePrint::DungeonPlayerClass' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ProcLevelBluePrint, DungeonPlayerClass_Astrea) == 0x000010, "Member 'FldManagerSubsystem_ProcLevelBluePrint::DungeonPlayerClass_Astrea' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ProcLevelBluePrint, DefaultCameraClass) == 0x000018, "Member 'FldManagerSubsystem_ProcLevelBluePrint::DefaultCameraClass' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ProcLevelBluePrint, DungeonCameraClass) == 0x000020, "Member 'FldManagerSubsystem_ProcLevelBluePrint::DungeonCameraClass' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ProcLevelBluePrint, TransCameraClass) == 0x000028, "Member 'FldManagerSubsystem_ProcLevelBluePrint::TransCameraClass' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ProcLevelBluePrint, FollowerClass) == 0x000030, "Member 'FldManagerSubsystem_ProcLevelBluePrint::FollowerClass' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ProcLevelBluePrint, FollowerKoromaruClass) == 0x000038, "Member 'FldManagerSubsystem_ProcLevelBluePrint::FollowerKoromaruClass' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ProcLevelBluePrint, WorldContextObject) == 0x000040, "Member 'FldManagerSubsystem_ProcLevelBluePrint::WorldContextObject' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ProcLevelBluePrint, LatentInfo) == 0x000048, "Member 'FldManagerSubsystem_ProcLevelBluePrint::LatentInfo' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ProcLevelBluePrint, DngEntranceCameraClassAstrea) == 0x000060, "Member 'FldManagerSubsystem_ProcLevelBluePrint::DngEntranceCameraClassAstrea' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_ProcLevelBluePrint, DngFinalFloorCameraClassAstrea) == 0x000068, "Member 'FldManagerSubsystem_ProcLevelBluePrint::DngFinalFloorCameraClassAstrea' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.SetParamDebug
// 0x0008 (0x0008 - 0x0000)
struct FldManagerSubsystem_SetParamDebug final
{
public:
	int32                                         FieldMajorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FieldMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_SetParamDebug) == 0x000004, "Wrong alignment on FldManagerSubsystem_SetParamDebug");
static_assert(sizeof(FldManagerSubsystem_SetParamDebug) == 0x000008, "Wrong size on FldManagerSubsystem_SetParamDebug");
static_assert(offsetof(FldManagerSubsystem_SetParamDebug, FieldMajorID) == 0x000000, "Member 'FldManagerSubsystem_SetParamDebug::FieldMajorID' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_SetParamDebug, FieldMinorID) == 0x000004, "Member 'FldManagerSubsystem_SetParamDebug::FieldMinorID' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.SetPlayerEnable
// 0x0002 (0x0002 - 0x0000)
struct FldManagerSubsystem_SetPlayerEnable final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeyEnable;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_SetPlayerEnable) == 0x000001, "Wrong alignment on FldManagerSubsystem_SetPlayerEnable");
static_assert(sizeof(FldManagerSubsystem_SetPlayerEnable) == 0x000002, "Wrong size on FldManagerSubsystem_SetPlayerEnable");
static_assert(offsetof(FldManagerSubsystem_SetPlayerEnable, Visible) == 0x000000, "Member 'FldManagerSubsystem_SetPlayerEnable::Visible' has a wrong offset!");
static_assert(offsetof(FldManagerSubsystem_SetPlayerEnable, KeyEnable) == 0x000001, "Member 'FldManagerSubsystem_SetPlayerEnable::KeyEnable' has a wrong offset!");

// Function xrd777.FldManagerSubsystem.SetPlayerKeyEnable
// 0x0001 (0x0001 - 0x0000)
struct FldManagerSubsystem_SetPlayerKeyEnable final
{
public:
	bool                                          KeyEnable;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldManagerSubsystem_SetPlayerKeyEnable) == 0x000001, "Wrong alignment on FldManagerSubsystem_SetPlayerKeyEnable");
static_assert(sizeof(FldManagerSubsystem_SetPlayerKeyEnable) == 0x000001, "Wrong size on FldManagerSubsystem_SetPlayerKeyEnable");
static_assert(offsetof(FldManagerSubsystem_SetPlayerKeyEnable, KeyEnable) == 0x000000, "Member 'FldManagerSubsystem_SetPlayerKeyEnable::KeyEnable' has a wrong offset!");

// Function xrd777.FldNpcComp.GetCharBaseComp
// 0x0008 (0x0008 - 0x0000)
struct FldNpcComp_GetCharBaseComp final
{
public:
	class UAppCharBaseComp*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldNpcComp_GetCharBaseComp) == 0x000008, "Wrong alignment on FldNpcComp_GetCharBaseComp");
static_assert(sizeof(FldNpcComp_GetCharBaseComp) == 0x000008, "Wrong size on FldNpcComp_GetCharBaseComp");
static_assert(offsetof(FldNpcComp_GetCharBaseComp, ReturnValue) == 0x000000, "Member 'FldNpcComp_GetCharBaseComp::ReturnValue' has a wrong offset!");

// Function xrd777.FldOperator.EndEvent
// 0x0001 (0x0001 - 0x0000)
struct FldOperator_EndEvent final
{
public:
	bool                                          bNotCameraReset;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldOperator_EndEvent) == 0x000001, "Wrong alignment on FldOperator_EndEvent");
static_assert(sizeof(FldOperator_EndEvent) == 0x000001, "Wrong size on FldOperator_EndEvent");
static_assert(offsetof(FldOperator_EndEvent, bNotCameraReset) == 0x000000, "Member 'FldOperator_EndEvent::bNotCameraReset' has a wrong offset!");

// Function xrd777.FldOperator.KeyEnable
// 0x0001 (0x0001 - 0x0000)
struct FldOperator_KeyEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldOperator_KeyEnable) == 0x000001, "Wrong alignment on FldOperator_KeyEnable");
static_assert(sizeof(FldOperator_KeyEnable) == 0x000001, "Wrong size on FldOperator_KeyEnable");
static_assert(offsetof(FldOperator_KeyEnable, Enable) == 0x000000, "Member 'FldOperator_KeyEnable::Enable' has a wrong offset!");

// Function xrd777.FldOperator.SetFreeCameraPitch
// 0x0004 (0x0004 - 0x0000)
struct FldOperator_SetFreeCameraPitch final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldOperator_SetFreeCameraPitch) == 0x000004, "Wrong alignment on FldOperator_SetFreeCameraPitch");
static_assert(sizeof(FldOperator_SetFreeCameraPitch) == 0x000004, "Wrong size on FldOperator_SetFreeCameraPitch");
static_assert(offsetof(FldOperator_SetFreeCameraPitch, Angle) == 0x000000, "Member 'FldOperator_SetFreeCameraPitch::Angle' has a wrong offset!");

// Function xrd777.FldOperator.SetFreeCameraYaw
// 0x0004 (0x0004 - 0x0000)
struct FldOperator_SetFreeCameraYaw final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldOperator_SetFreeCameraYaw) == 0x000004, "Wrong alignment on FldOperator_SetFreeCameraYaw");
static_assert(sizeof(FldOperator_SetFreeCameraYaw) == 0x000004, "Wrong size on FldOperator_SetFreeCameraYaw");
static_assert(offsetof(FldOperator_SetFreeCameraYaw, Angle) == 0x000000, "Member 'FldOperator_SetFreeCameraYaw::Angle' has a wrong offset!");

// Function xrd777.FldOperator.Setup
// 0x0020 (0x0020 - 0x0000)
struct FldOperator_Setup final
{
public:
	class AKernelInput*                           KernelInput_0;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFldCameraFree*                         FreeCamera_0;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AFldCamera*                             Camera;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldOperator_Setup) == 0x000008, "Wrong alignment on FldOperator_Setup");
static_assert(sizeof(FldOperator_Setup) == 0x000020, "Wrong size on FldOperator_Setup");
static_assert(offsetof(FldOperator_Setup, KernelInput_0) == 0x000000, "Member 'FldOperator_Setup::KernelInput_0' has a wrong offset!");
static_assert(offsetof(FldOperator_Setup, Player) == 0x000008, "Member 'FldOperator_Setup::Player' has a wrong offset!");
static_assert(offsetof(FldOperator_Setup, FreeCamera_0) == 0x000010, "Member 'FldOperator_Setup::FreeCamera_0' has a wrong offset!");
static_assert(offsetof(FldOperator_Setup, Camera) == 0x000018, "Member 'FldOperator_Setup::Camera' has a wrong offset!");

// Function xrd777.FldPartnerComp.GetDashThreshold
// 0x0004 (0x0004 - 0x0000)
struct FldPartnerComp_GetDashThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldPartnerComp_GetDashThreshold) == 0x000004, "Wrong alignment on FldPartnerComp_GetDashThreshold");
static_assert(sizeof(FldPartnerComp_GetDashThreshold) == 0x000004, "Wrong size on FldPartnerComp_GetDashThreshold");
static_assert(offsetof(FldPartnerComp_GetDashThreshold, ReturnValue) == 0x000000, "Member 'FldPartnerComp_GetDashThreshold::ReturnValue' has a wrong offset!");

// Function xrd777.FldPartnerComp.GetRunThreshold
// 0x0004 (0x0004 - 0x0000)
struct FldPartnerComp_GetRunThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldPartnerComp_GetRunThreshold) == 0x000004, "Wrong alignment on FldPartnerComp_GetRunThreshold");
static_assert(sizeof(FldPartnerComp_GetRunThreshold) == 0x000004, "Wrong size on FldPartnerComp_GetRunThreshold");
static_assert(offsetof(FldPartnerComp_GetRunThreshold, ReturnValue) == 0x000000, "Member 'FldPartnerComp_GetRunThreshold::ReturnValue' has a wrong offset!");

// Function xrd777.FldPartnerComp.GetWalkThreshold
// 0x0004 (0x0004 - 0x0000)
struct FldPartnerComp_GetWalkThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldPartnerComp_GetWalkThreshold) == 0x000004, "Wrong alignment on FldPartnerComp_GetWalkThreshold");
static_assert(sizeof(FldPartnerComp_GetWalkThreshold) == 0x000004, "Wrong size on FldPartnerComp_GetWalkThreshold");
static_assert(offsetof(FldPartnerComp_GetWalkThreshold, ReturnValue) == 0x000000, "Member 'FldPartnerComp_GetWalkThreshold::ReturnValue' has a wrong offset!");

// Function xrd777.FldPlayerComp.OnMontageEnded
// 0x0010 (0x0010 - 0x0000)
struct FldPlayerComp_OnMontageEnded final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInterrupted;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldPlayerComp_OnMontageEnded) == 0x000008, "Wrong alignment on FldPlayerComp_OnMontageEnded");
static_assert(sizeof(FldPlayerComp_OnMontageEnded) == 0x000010, "Wrong size on FldPlayerComp_OnMontageEnded");
static_assert(offsetof(FldPlayerComp_OnMontageEnded, Montage) == 0x000000, "Member 'FldPlayerComp_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(FldPlayerComp_OnMontageEnded, bInterrupted) == 0x000008, "Member 'FldPlayerComp_OnMontageEnded::bInterrupted' has a wrong offset!");

// Function xrd777.FldPlayerComp.GetDashThreshold
// 0x0004 (0x0004 - 0x0000)
struct FldPlayerComp_GetDashThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldPlayerComp_GetDashThreshold) == 0x000004, "Wrong alignment on FldPlayerComp_GetDashThreshold");
static_assert(sizeof(FldPlayerComp_GetDashThreshold) == 0x000004, "Wrong size on FldPlayerComp_GetDashThreshold");
static_assert(offsetof(FldPlayerComp_GetDashThreshold, ReturnValue) == 0x000000, "Member 'FldPlayerComp_GetDashThreshold::ReturnValue' has a wrong offset!");

// Function xrd777.FldPlayerComp.GetRunThreshold
// 0x0004 (0x0004 - 0x0000)
struct FldPlayerComp_GetRunThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldPlayerComp_GetRunThreshold) == 0x000004, "Wrong alignment on FldPlayerComp_GetRunThreshold");
static_assert(sizeof(FldPlayerComp_GetRunThreshold) == 0x000004, "Wrong size on FldPlayerComp_GetRunThreshold");
static_assert(offsetof(FldPlayerComp_GetRunThreshold, ReturnValue) == 0x000000, "Member 'FldPlayerComp_GetRunThreshold::ReturnValue' has a wrong offset!");

// Function xrd777.FldPlayerComp.GetWalkThreshold
// 0x0004 (0x0004 - 0x0000)
struct FldPlayerComp_GetWalkThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldPlayerComp_GetWalkThreshold) == 0x000004, "Wrong alignment on FldPlayerComp_GetWalkThreshold");
static_assert(sizeof(FldPlayerComp_GetWalkThreshold) == 0x000004, "Wrong size on FldPlayerComp_GetWalkThreshold");
static_assert(offsetof(FldPlayerComp_GetWalkThreshold, ReturnValue) == 0x000000, "Member 'FldPlayerComp_GetWalkThreshold::ReturnValue' has a wrong offset!");

// Function xrd777.FldPostValumeSound.OnActorOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct FldPostValumeSound_OnActorOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FldPostValumeSound_OnActorOverlapBegin) == 0x000008, "Wrong alignment on FldPostValumeSound_OnActorOverlapBegin");
static_assert(sizeof(FldPostValumeSound_OnActorOverlapBegin) == 0x0000A8, "Wrong size on FldPostValumeSound_OnActorOverlapBegin");
static_assert(offsetof(FldPostValumeSound_OnActorOverlapBegin, OverlappedComponent) == 0x000000, "Member 'FldPostValumeSound_OnActorOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldPostValumeSound_OnActorOverlapBegin, OtherActor) == 0x000008, "Member 'FldPostValumeSound_OnActorOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(FldPostValumeSound_OnActorOverlapBegin, OtherComp) == 0x000010, "Member 'FldPostValumeSound_OnActorOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(FldPostValumeSound_OnActorOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'FldPostValumeSound_OnActorOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(FldPostValumeSound_OnActorOverlapBegin, bFromSweep) == 0x00001C, "Member 'FldPostValumeSound_OnActorOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(FldPostValumeSound_OnActorOverlapBegin, SweepResult) == 0x000020, "Member 'FldPostValumeSound_OnActorOverlapBegin::SweepResult' has a wrong offset!");

// Function xrd777.FldPostValumeSound.OnActorOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct FldPostValumeSound_OnActorOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FldPostValumeSound_OnActorOverlapEnd) == 0x000008, "Wrong alignment on FldPostValumeSound_OnActorOverlapEnd");
static_assert(sizeof(FldPostValumeSound_OnActorOverlapEnd) == 0x000020, "Wrong size on FldPostValumeSound_OnActorOverlapEnd");
static_assert(offsetof(FldPostValumeSound_OnActorOverlapEnd, OverlappedComponent) == 0x000000, "Member 'FldPostValumeSound_OnActorOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(FldPostValumeSound_OnActorOverlapEnd, OtherActor) == 0x000008, "Member 'FldPostValumeSound_OnActorOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(FldPostValumeSound_OnActorOverlapEnd, OtherComp) == 0x000010, "Member 'FldPostValumeSound_OnActorOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(FldPostValumeSound_OnActorOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'FldPostValumeSound_OnActorOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function xrd777.GlobalWork.ClearSubLevelActor
// 0x0001 (0x0001 - 0x0000)
struct GlobalWork_ClearSubLevelActor final
{
public:
	ESubLevelIndex                                SubLevelNum;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWork_ClearSubLevelActor) == 0x000001, "Wrong alignment on GlobalWork_ClearSubLevelActor");
static_assert(sizeof(GlobalWork_ClearSubLevelActor) == 0x000001, "Wrong size on GlobalWork_ClearSubLevelActor");
static_assert(offsetof(GlobalWork_ClearSubLevelActor, SubLevelNum) == 0x000000, "Member 'GlobalWork_ClearSubLevelActor::SubLevelNum' has a wrong offset!");

// Function xrd777.GlobalWork.GetSubLevelActor
// 0x0010 (0x0010 - 0x0000)
struct GlobalWork_GetSubLevelActor final
{
public:
	ESubLevelIndex                                SubLevelNum;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWork_GetSubLevelActor) == 0x000008, "Wrong alignment on GlobalWork_GetSubLevelActor");
static_assert(sizeof(GlobalWork_GetSubLevelActor) == 0x000010, "Wrong size on GlobalWork_GetSubLevelActor");
static_assert(offsetof(GlobalWork_GetSubLevelActor, SubLevelNum) == 0x000000, "Member 'GlobalWork_GetSubLevelActor::SubLevelNum' has a wrong offset!");
static_assert(offsetof(GlobalWork_GetSubLevelActor, ReturnValue) == 0x000008, "Member 'GlobalWork_GetSubLevelActor::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWork.SetSubLevelActor
// 0x0010 (0x0010 - 0x0000)
struct GlobalWork_SetSubLevelActor final
{
public:
	ESubLevelIndex                                SubLevelNum;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWork_SetSubLevelActor) == 0x000008, "Wrong alignment on GlobalWork_SetSubLevelActor");
static_assert(sizeof(GlobalWork_SetSubLevelActor) == 0x000010, "Wrong size on GlobalWork_SetSubLevelActor");
static_assert(offsetof(GlobalWork_SetSubLevelActor, SubLevelNum) == 0x000000, "Member 'GlobalWork_SetSubLevelActor::SubLevelNum' has a wrong offset!");
static_assert(offsetof(GlobalWork_SetSubLevelActor, Actor) == 0x000008, "Member 'GlobalWork_SetSubLevelActor::Actor' has a wrong offset!");

// Function xrd777.GlobalWork.SpawnActorFromClassSubLevelIndex
// 0x0050 (0x0050 - 0x0000)
struct GlobalWork_SpawnActorFromClassSubLevelIndex final
{
public:
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESubLevelIndex                                SubLevelIndex;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform;                                         // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GlobalWork_SpawnActorFromClassSubLevelIndex) == 0x000010, "Wrong alignment on GlobalWork_SpawnActorFromClassSubLevelIndex");
static_assert(sizeof(GlobalWork_SpawnActorFromClassSubLevelIndex) == 0x000050, "Wrong size on GlobalWork_SpawnActorFromClassSubLevelIndex");
static_assert(offsetof(GlobalWork_SpawnActorFromClassSubLevelIndex, ActorClass) == 0x000000, "Member 'GlobalWork_SpawnActorFromClassSubLevelIndex::ActorClass' has a wrong offset!");
static_assert(offsetof(GlobalWork_SpawnActorFromClassSubLevelIndex, SubLevelIndex) == 0x000008, "Member 'GlobalWork_SpawnActorFromClassSubLevelIndex::SubLevelIndex' has a wrong offset!");
static_assert(offsetof(GlobalWork_SpawnActorFromClassSubLevelIndex, Transform) == 0x000010, "Member 'GlobalWork_SpawnActorFromClassSubLevelIndex::Transform' has a wrong offset!");
static_assert(offsetof(GlobalWork_SpawnActorFromClassSubLevelIndex, ReturnValue) == 0x000040, "Member 'GlobalWork_SpawnActorFromClassSubLevelIndex::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWork.SetSequenceParam
// 0x000C (0x000C - 0x0000)
struct GlobalWork_SetSequenceParam final
{
public:
	EGWorkSeqType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Major;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWork_SetSequenceParam) == 0x000004, "Wrong alignment on GlobalWork_SetSequenceParam");
static_assert(sizeof(GlobalWork_SetSequenceParam) == 0x00000C, "Wrong size on GlobalWork_SetSequenceParam");
static_assert(offsetof(GlobalWork_SetSequenceParam, Type) == 0x000000, "Member 'GlobalWork_SetSequenceParam::Type' has a wrong offset!");
static_assert(offsetof(GlobalWork_SetSequenceParam, Major) == 0x000004, "Member 'GlobalWork_SetSequenceParam::Major' has a wrong offset!");
static_assert(offsetof(GlobalWork_SetSequenceParam, Minor) == 0x000008, "Member 'GlobalWork_SetSequenceParam::Minor' has a wrong offset!");

// Function xrd777.GlobalWork.SetSequenceParam_DEBUG
// 0x0020 (0x0020 - 0x0000)
struct GlobalWork_SetSequenceParam_DEBUG final
{
public:
	EGWorkSeqType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Major;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MKfEvent;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tag;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWork_SetSequenceParam_DEBUG) == 0x000008, "Wrong alignment on GlobalWork_SetSequenceParam_DEBUG");
static_assert(sizeof(GlobalWork_SetSequenceParam_DEBUG) == 0x000020, "Wrong size on GlobalWork_SetSequenceParam_DEBUG");
static_assert(offsetof(GlobalWork_SetSequenceParam_DEBUG, Type) == 0x000000, "Member 'GlobalWork_SetSequenceParam_DEBUG::Type' has a wrong offset!");
static_assert(offsetof(GlobalWork_SetSequenceParam_DEBUG, Major) == 0x000004, "Member 'GlobalWork_SetSequenceParam_DEBUG::Major' has a wrong offset!");
static_assert(offsetof(GlobalWork_SetSequenceParam_DEBUG, Minor) == 0x000008, "Member 'GlobalWork_SetSequenceParam_DEBUG::Minor' has a wrong offset!");
static_assert(offsetof(GlobalWork_SetSequenceParam_DEBUG, MKfEvent) == 0x00000C, "Member 'GlobalWork_SetSequenceParam_DEBUG::MKfEvent' has a wrong offset!");
static_assert(offsetof(GlobalWork_SetSequenceParam_DEBUG, Tag) == 0x000010, "Member 'GlobalWork_SetSequenceParam_DEBUG::Tag' has a wrong offset!");

// Function xrd777.GlobalWork.SetSequenceParam_KEY_FREE_EVENT
// 0x0010 (0x0010 - 0x0000)
struct GlobalWork_SetSequenceParam_KEY_FREE_EVENT final
{
public:
	EGWorkSeqType                                 Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Major;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MKfEvent;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWork_SetSequenceParam_KEY_FREE_EVENT) == 0x000004, "Wrong alignment on GlobalWork_SetSequenceParam_KEY_FREE_EVENT");
static_assert(sizeof(GlobalWork_SetSequenceParam_KEY_FREE_EVENT) == 0x000010, "Wrong size on GlobalWork_SetSequenceParam_KEY_FREE_EVENT");
static_assert(offsetof(GlobalWork_SetSequenceParam_KEY_FREE_EVENT, Type) == 0x000000, "Member 'GlobalWork_SetSequenceParam_KEY_FREE_EVENT::Type' has a wrong offset!");
static_assert(offsetof(GlobalWork_SetSequenceParam_KEY_FREE_EVENT, Major) == 0x000004, "Member 'GlobalWork_SetSequenceParam_KEY_FREE_EVENT::Major' has a wrong offset!");
static_assert(offsetof(GlobalWork_SetSequenceParam_KEY_FREE_EVENT, Minor) == 0x000008, "Member 'GlobalWork_SetSequenceParam_KEY_FREE_EVENT::Minor' has a wrong offset!");
static_assert(offsetof(GlobalWork_SetSequenceParam_KEY_FREE_EVENT, MKfEvent) == 0x00000C, "Member 'GlobalWork_SetSequenceParam_KEY_FREE_EVENT::MKfEvent' has a wrong offset!");

// Function xrd777.GlobalWork.GetSequenceParam
// 0x0010 (0x0010 - 0x0000)
struct GlobalWork_GetSequenceParam final
{
public:
	EGWorkSeqType                                 Type;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Major;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MKfEvent;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWork_GetSequenceParam) == 0x000004, "Wrong alignment on GlobalWork_GetSequenceParam");
static_assert(sizeof(GlobalWork_GetSequenceParam) == 0x000010, "Wrong size on GlobalWork_GetSequenceParam");
static_assert(offsetof(GlobalWork_GetSequenceParam, Type) == 0x000000, "Member 'GlobalWork_GetSequenceParam::Type' has a wrong offset!");
static_assert(offsetof(GlobalWork_GetSequenceParam, Major) == 0x000004, "Member 'GlobalWork_GetSequenceParam::Major' has a wrong offset!");
static_assert(offsetof(GlobalWork_GetSequenceParam, Minor) == 0x000008, "Member 'GlobalWork_GetSequenceParam::Minor' has a wrong offset!");
static_assert(offsetof(GlobalWork_GetSequenceParam, MKfEvent) == 0x00000C, "Member 'GlobalWork_GetSequenceParam::MKfEvent' has a wrong offset!");

// Function xrd777.GlobalWork.GetSequenceParam_DEBUG
// 0x0020 (0x0020 - 0x0000)
struct GlobalWork_GetSequenceParam_DEBUG final
{
public:
	EGWorkSeqType                                 Type;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Major;                                             // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Minor;                                             // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MKfEvent;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Tag;                                               // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWork_GetSequenceParam_DEBUG) == 0x000008, "Wrong alignment on GlobalWork_GetSequenceParam_DEBUG");
static_assert(sizeof(GlobalWork_GetSequenceParam_DEBUG) == 0x000020, "Wrong size on GlobalWork_GetSequenceParam_DEBUG");
static_assert(offsetof(GlobalWork_GetSequenceParam_DEBUG, Type) == 0x000000, "Member 'GlobalWork_GetSequenceParam_DEBUG::Type' has a wrong offset!");
static_assert(offsetof(GlobalWork_GetSequenceParam_DEBUG, Major) == 0x000004, "Member 'GlobalWork_GetSequenceParam_DEBUG::Major' has a wrong offset!");
static_assert(offsetof(GlobalWork_GetSequenceParam_DEBUG, Minor) == 0x000008, "Member 'GlobalWork_GetSequenceParam_DEBUG::Minor' has a wrong offset!");
static_assert(offsetof(GlobalWork_GetSequenceParam_DEBUG, MKfEvent) == 0x00000C, "Member 'GlobalWork_GetSequenceParam_DEBUG::MKfEvent' has a wrong offset!");
static_assert(offsetof(GlobalWork_GetSequenceParam_DEBUG, Tag) == 0x000010, "Member 'GlobalWork_GetSequenceParam_DEBUG::Tag' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkAddMoney
// 0x0008 (0x0008 - 0x0000)
struct GlobalWorkBpLib_GWorkAddMoney final
{
public:
	int32                                         SetMoeny;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkAddMoney) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkAddMoney");
static_assert(sizeof(GlobalWorkBpLib_GWorkAddMoney) == 0x000008, "Wrong size on GlobalWorkBpLib_GWorkAddMoney");
static_assert(offsetof(GlobalWorkBpLib_GWorkAddMoney, SetMoeny) == 0x000000, "Member 'GlobalWorkBpLib_GWorkAddMoney::SetMoeny' has a wrong offset!");
static_assert(offsetof(GlobalWorkBpLib_GWorkAddMoney, ReturnValue) == 0x000004, "Member 'GlobalWorkBpLib_GWorkAddMoney::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkCheckPartyFull
// 0x0001 (0x0001 - 0x0000)
struct GlobalWorkBpLib_GWorkCheckPartyFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkCheckPartyFull) == 0x000001, "Wrong alignment on GlobalWorkBpLib_GWorkCheckPartyFull");
static_assert(sizeof(GlobalWorkBpLib_GWorkCheckPartyFull) == 0x000001, "Wrong size on GlobalWorkBpLib_GWorkCheckPartyFull");
static_assert(offsetof(GlobalWorkBpLib_GWorkCheckPartyFull, ReturnValue) == 0x000000, "Member 'GlobalWorkBpLib_GWorkCheckPartyFull::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkDecCounter
// 0x0008 (0x0008 - 0x0000)
struct GlobalWorkBpLib_GWorkDecCounter final
{
public:
	class FName                                   CntName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkDecCounter) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkDecCounter");
static_assert(sizeof(GlobalWorkBpLib_GWorkDecCounter) == 0x000008, "Wrong size on GlobalWorkBpLib_GWorkDecCounter");
static_assert(offsetof(GlobalWorkBpLib_GWorkDecCounter, CntName) == 0x000000, "Member 'GlobalWorkBpLib_GWorkDecCounter::CntName' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkDecCounterValue
// 0x0004 (0x0004 - 0x0000)
struct GlobalWorkBpLib_GWorkDecCounterValue final
{
public:
	int32                                         CntNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkDecCounterValue) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkDecCounterValue");
static_assert(sizeof(GlobalWorkBpLib_GWorkDecCounterValue) == 0x000004, "Wrong size on GlobalWorkBpLib_GWorkDecCounterValue");
static_assert(offsetof(GlobalWorkBpLib_GWorkDecCounterValue, CntNo) == 0x000000, "Member 'GlobalWorkBpLib_GWorkDecCounterValue::CntNo' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkFlagChk
// 0x000C (0x000C - 0x0000)
struct GlobalWorkBpLib_GWorkFlagChk final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGWorkOnOffEnum                               OnOff;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GlobalWorkBpLib_GWorkFlagChk) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkFlagChk");
static_assert(sizeof(GlobalWorkBpLib_GWorkFlagChk) == 0x00000C, "Wrong size on GlobalWorkBpLib_GWorkFlagChk");
static_assert(offsetof(GlobalWorkBpLib_GWorkFlagChk, FlagName) == 0x000000, "Member 'GlobalWorkBpLib_GWorkFlagChk::FlagName' has a wrong offset!");
static_assert(offsetof(GlobalWorkBpLib_GWorkFlagChk, OnOff) == 0x000008, "Member 'GlobalWorkBpLib_GWorkFlagChk::OnOff' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkFlagChkValue
// 0x0008 (0x0008 - 0x0000)
struct GlobalWorkBpLib_GWorkFlagChkValue final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGWorkOnOffEnum                               OnOff;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GlobalWorkBpLib_GWorkFlagChkValue) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkFlagChkValue");
static_assert(sizeof(GlobalWorkBpLib_GWorkFlagChkValue) == 0x000008, "Wrong size on GlobalWorkBpLib_GWorkFlagChkValue");
static_assert(offsetof(GlobalWorkBpLib_GWorkFlagChkValue, Index_0) == 0x000000, "Member 'GlobalWorkBpLib_GWorkFlagChkValue::Index_0' has a wrong offset!");
static_assert(offsetof(GlobalWorkBpLib_GWorkFlagChkValue, OnOff) == 0x000004, "Member 'GlobalWorkBpLib_GWorkFlagChkValue::OnOff' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkFlagOff
// 0x0008 (0x0008 - 0x0000)
struct GlobalWorkBpLib_GWorkFlagOff final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkFlagOff) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkFlagOff");
static_assert(sizeof(GlobalWorkBpLib_GWorkFlagOff) == 0x000008, "Wrong size on GlobalWorkBpLib_GWorkFlagOff");
static_assert(offsetof(GlobalWorkBpLib_GWorkFlagOff, FlagName) == 0x000000, "Member 'GlobalWorkBpLib_GWorkFlagOff::FlagName' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkFlagOffValue
// 0x0004 (0x0004 - 0x0000)
struct GlobalWorkBpLib_GWorkFlagOffValue final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkFlagOffValue) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkFlagOffValue");
static_assert(sizeof(GlobalWorkBpLib_GWorkFlagOffValue) == 0x000004, "Wrong size on GlobalWorkBpLib_GWorkFlagOffValue");
static_assert(offsetof(GlobalWorkBpLib_GWorkFlagOffValue, Index_0) == 0x000000, "Member 'GlobalWorkBpLib_GWorkFlagOffValue::Index_0' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkFlagOn
// 0x0008 (0x0008 - 0x0000)
struct GlobalWorkBpLib_GWorkFlagOn final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkFlagOn) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkFlagOn");
static_assert(sizeof(GlobalWorkBpLib_GWorkFlagOn) == 0x000008, "Wrong size on GlobalWorkBpLib_GWorkFlagOn");
static_assert(offsetof(GlobalWorkBpLib_GWorkFlagOn, FlagName) == 0x000000, "Member 'GlobalWorkBpLib_GWorkFlagOn::FlagName' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkFlagOnValue
// 0x0004 (0x0004 - 0x0000)
struct GlobalWorkBpLib_GWorkFlagOnValue final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkFlagOnValue) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkFlagOnValue");
static_assert(sizeof(GlobalWorkBpLib_GWorkFlagOnValue) == 0x000004, "Wrong size on GlobalWorkBpLib_GWorkFlagOnValue");
static_assert(offsetof(GlobalWorkBpLib_GWorkFlagOnValue, Index_0) == 0x000000, "Member 'GlobalWorkBpLib_GWorkFlagOnValue::Index_0' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkFlagSet
// 0x000C (0x000C - 0x0000)
struct GlobalWorkBpLib_GWorkFlagSet final
{
public:
	class FName                                   FlagName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGWorkOnOffEnum                               OnOff;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GlobalWorkBpLib_GWorkFlagSet) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkFlagSet");
static_assert(sizeof(GlobalWorkBpLib_GWorkFlagSet) == 0x00000C, "Wrong size on GlobalWorkBpLib_GWorkFlagSet");
static_assert(offsetof(GlobalWorkBpLib_GWorkFlagSet, FlagName) == 0x000000, "Member 'GlobalWorkBpLib_GWorkFlagSet::FlagName' has a wrong offset!");
static_assert(offsetof(GlobalWorkBpLib_GWorkFlagSet, OnOff) == 0x000008, "Member 'GlobalWorkBpLib_GWorkFlagSet::OnOff' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkFlagSetValue
// 0x0008 (0x0008 - 0x0000)
struct GlobalWorkBpLib_GWorkFlagSetValue final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGWorkOnOffEnum                               OnOff;                                             // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GlobalWorkBpLib_GWorkFlagSetValue) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkFlagSetValue");
static_assert(sizeof(GlobalWorkBpLib_GWorkFlagSetValue) == 0x000008, "Wrong size on GlobalWorkBpLib_GWorkFlagSetValue");
static_assert(offsetof(GlobalWorkBpLib_GWorkFlagSetValue, Index_0) == 0x000000, "Member 'GlobalWorkBpLib_GWorkFlagSetValue::Index_0' has a wrong offset!");
static_assert(offsetof(GlobalWorkBpLib_GWorkFlagSetValue, OnOff) == 0x000004, "Member 'GlobalWorkBpLib_GWorkFlagSetValue::OnOff' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkGetCounter
// 0x000C (0x000C - 0x0000)
struct GlobalWorkBpLib_GWorkGetCounter final
{
public:
	class FName                                   CntName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkGetCounter) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkGetCounter");
static_assert(sizeof(GlobalWorkBpLib_GWorkGetCounter) == 0x00000C, "Wrong size on GlobalWorkBpLib_GWorkGetCounter");
static_assert(offsetof(GlobalWorkBpLib_GWorkGetCounter, CntName) == 0x000000, "Member 'GlobalWorkBpLib_GWorkGetCounter::CntName' has a wrong offset!");
static_assert(offsetof(GlobalWorkBpLib_GWorkGetCounter, ReturnValue) == 0x000008, "Member 'GlobalWorkBpLib_GWorkGetCounter::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkGetCounterValue
// 0x0008 (0x0008 - 0x0000)
struct GlobalWorkBpLib_GWorkGetCounterValue final
{
public:
	int32                                         CntNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkGetCounterValue) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkGetCounterValue");
static_assert(sizeof(GlobalWorkBpLib_GWorkGetCounterValue) == 0x000008, "Wrong size on GlobalWorkBpLib_GWorkGetCounterValue");
static_assert(offsetof(GlobalWorkBpLib_GWorkGetCounterValue, CntNo) == 0x000000, "Member 'GlobalWorkBpLib_GWorkGetCounterValue::CntNo' has a wrong offset!");
static_assert(offsetof(GlobalWorkBpLib_GWorkGetCounterValue, ReturnValue) == 0x000004, "Member 'GlobalWorkBpLib_GWorkGetCounterValue::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkGetMaxFPS
// 0x0004 (0x0004 - 0x0000)
struct GlobalWorkBpLib_GWorkGetMaxFPS final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkGetMaxFPS) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkGetMaxFPS");
static_assert(sizeof(GlobalWorkBpLib_GWorkGetMaxFPS) == 0x000004, "Wrong size on GlobalWorkBpLib_GWorkGetMaxFPS");
static_assert(offsetof(GlobalWorkBpLib_GWorkGetMaxFPS, ReturnValue) == 0x000000, "Member 'GlobalWorkBpLib_GWorkGetMaxFPS::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkGetMoney
// 0x0004 (0x0004 - 0x0000)
struct GlobalWorkBpLib_GWorkGetMoney final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkGetMoney) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkGetMoney");
static_assert(sizeof(GlobalWorkBpLib_GWorkGetMoney) == 0x000004, "Wrong size on GlobalWorkBpLib_GWorkGetMoney");
static_assert(offsetof(GlobalWorkBpLib_GWorkGetMoney, ReturnValue) == 0x000000, "Member 'GlobalWorkBpLib_GWorkGetMoney::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkGetPartyID
// 0x0008 (0x0008 - 0x0000)
struct GlobalWorkBpLib_GWorkGetPartyID final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkGetPartyID) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkGetPartyID");
static_assert(sizeof(GlobalWorkBpLib_GWorkGetPartyID) == 0x000008, "Wrong size on GlobalWorkBpLib_GWorkGetPartyID");
static_assert(offsetof(GlobalWorkBpLib_GWorkGetPartyID, Index_0) == 0x000000, "Member 'GlobalWorkBpLib_GWorkGetPartyID::Index_0' has a wrong offset!");
static_assert(offsetof(GlobalWorkBpLib_GWorkGetPartyID, ReturnValue) == 0x000004, "Member 'GlobalWorkBpLib_GWorkGetPartyID::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkGetRealTimeDelta
// 0x0004 (0x0004 - 0x0000)
struct GlobalWorkBpLib_GWorkGetRealTimeDelta final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkGetRealTimeDelta) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkGetRealTimeDelta");
static_assert(sizeof(GlobalWorkBpLib_GWorkGetRealTimeDelta) == 0x000004, "Wrong size on GlobalWorkBpLib_GWorkGetRealTimeDelta");
static_assert(offsetof(GlobalWorkBpLib_GWorkGetRealTimeDelta, ReturnValue) == 0x000000, "Member 'GlobalWorkBpLib_GWorkGetRealTimeDelta::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkIncCounter
// 0x0008 (0x0008 - 0x0000)
struct GlobalWorkBpLib_GWorkIncCounter final
{
public:
	class FName                                   CntName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkIncCounter) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkIncCounter");
static_assert(sizeof(GlobalWorkBpLib_GWorkIncCounter) == 0x000008, "Wrong size on GlobalWorkBpLib_GWorkIncCounter");
static_assert(offsetof(GlobalWorkBpLib_GWorkIncCounter, CntName) == 0x000000, "Member 'GlobalWorkBpLib_GWorkIncCounter::CntName' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkIncCounterValue
// 0x0004 (0x0004 - 0x0000)
struct GlobalWorkBpLib_GWorkIncCounterValue final
{
public:
	int32                                         CntNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkIncCounterValue) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkIncCounterValue");
static_assert(sizeof(GlobalWorkBpLib_GWorkIncCounterValue) == 0x000004, "Wrong size on GlobalWorkBpLib_GWorkIncCounterValue");
static_assert(offsetof(GlobalWorkBpLib_GWorkIncCounterValue, CntNo) == 0x000000, "Member 'GlobalWorkBpLib_GWorkIncCounterValue::CntNo' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkIsAsiaLanguages
// 0x0001 (0x0001 - 0x0000)
struct GlobalWorkBpLib_GWorkIsAsiaLanguages final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkIsAsiaLanguages) == 0x000001, "Wrong alignment on GlobalWorkBpLib_GWorkIsAsiaLanguages");
static_assert(sizeof(GlobalWorkBpLib_GWorkIsAsiaLanguages) == 0x000001, "Wrong size on GlobalWorkBpLib_GWorkIsAsiaLanguages");
static_assert(offsetof(GlobalWorkBpLib_GWorkIsAsiaLanguages, ReturnValue) == 0x000000, "Member 'GlobalWorkBpLib_GWorkIsAsiaLanguages::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkIsEFIGSLanguages
// 0x0001 (0x0001 - 0x0000)
struct GlobalWorkBpLib_GWorkIsEFIGSLanguages final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkIsEFIGSLanguages) == 0x000001, "Wrong alignment on GlobalWorkBpLib_GWorkIsEFIGSLanguages");
static_assert(sizeof(GlobalWorkBpLib_GWorkIsEFIGSLanguages) == 0x000001, "Wrong size on GlobalWorkBpLib_GWorkIsEFIGSLanguages");
static_assert(offsetof(GlobalWorkBpLib_GWorkIsEFIGSLanguages, ReturnValue) == 0x000000, "Member 'GlobalWorkBpLib_GWorkIsEFIGSLanguages::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkIsFullHpSpAllPartyMember
// 0x0001 (0x0001 - 0x0000)
struct GlobalWorkBpLib_GWorkIsFullHpSpAllPartyMember final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkIsFullHpSpAllPartyMember) == 0x000001, "Wrong alignment on GlobalWorkBpLib_GWorkIsFullHpSpAllPartyMember");
static_assert(sizeof(GlobalWorkBpLib_GWorkIsFullHpSpAllPartyMember) == 0x000001, "Wrong size on GlobalWorkBpLib_GWorkIsFullHpSpAllPartyMember");
static_assert(offsetof(GlobalWorkBpLib_GWorkIsFullHpSpAllPartyMember, ReturnValue) == 0x000000, "Member 'GlobalWorkBpLib_GWorkIsFullHpSpAllPartyMember::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkIsJapaneseLanguage
// 0x0001 (0x0001 - 0x0000)
struct GlobalWorkBpLib_GWorkIsJapaneseLanguage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkIsJapaneseLanguage) == 0x000001, "Wrong alignment on GlobalWorkBpLib_GWorkIsJapaneseLanguage");
static_assert(sizeof(GlobalWorkBpLib_GWorkIsJapaneseLanguage) == 0x000001, "Wrong size on GlobalWorkBpLib_GWorkIsJapaneseLanguage");
static_assert(offsetof(GlobalWorkBpLib_GWorkIsJapaneseLanguage, ReturnValue) == 0x000000, "Member 'GlobalWorkBpLib_GWorkIsJapaneseLanguage::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkIsPartyExists
// 0x0008 (0x0008 - 0x0000)
struct GlobalWorkBpLib_GWorkIsPartyExists final
{
public:
	int32                                         PCID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GlobalWorkBpLib_GWorkIsPartyExists) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkIsPartyExists");
static_assert(sizeof(GlobalWorkBpLib_GWorkIsPartyExists) == 0x000008, "Wrong size on GlobalWorkBpLib_GWorkIsPartyExists");
static_assert(offsetof(GlobalWorkBpLib_GWorkIsPartyExists, PCID) == 0x000000, "Member 'GlobalWorkBpLib_GWorkIsPartyExists::PCID' has a wrong offset!");
static_assert(offsetof(GlobalWorkBpLib_GWorkIsPartyExists, ReturnValue) == 0x000004, "Member 'GlobalWorkBpLib_GWorkIsPartyExists::ReturnValue' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkSetCounter
// 0x000C (0x000C - 0x0000)
struct GlobalWorkBpLib_GWorkSetCounter final
{
public:
	class FName                                   CntName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkSetCounter) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkSetCounter");
static_assert(sizeof(GlobalWorkBpLib_GWorkSetCounter) == 0x00000C, "Wrong size on GlobalWorkBpLib_GWorkSetCounter");
static_assert(offsetof(GlobalWorkBpLib_GWorkSetCounter, CntName) == 0x000000, "Member 'GlobalWorkBpLib_GWorkSetCounter::CntName' has a wrong offset!");
static_assert(offsetof(GlobalWorkBpLib_GWorkSetCounter, Value) == 0x000008, "Member 'GlobalWorkBpLib_GWorkSetCounter::Value' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkSetCounterValue
// 0x0008 (0x0008 - 0x0000)
struct GlobalWorkBpLib_GWorkSetCounterValue final
{
public:
	int32                                         CntNo;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkSetCounterValue) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkSetCounterValue");
static_assert(sizeof(GlobalWorkBpLib_GWorkSetCounterValue) == 0x000008, "Wrong size on GlobalWorkBpLib_GWorkSetCounterValue");
static_assert(offsetof(GlobalWorkBpLib_GWorkSetCounterValue, CntNo) == 0x000000, "Member 'GlobalWorkBpLib_GWorkSetCounterValue::CntNo' has a wrong offset!");
static_assert(offsetof(GlobalWorkBpLib_GWorkSetCounterValue, Value) == 0x000004, "Member 'GlobalWorkBpLib_GWorkSetCounterValue::Value' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkSetMoney
// 0x0004 (0x0004 - 0x0000)
struct GlobalWorkBpLib_GWorkSetMoney final
{
public:
	int32                                         SetMoeny;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkSetMoney) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkSetMoney");
static_assert(sizeof(GlobalWorkBpLib_GWorkSetMoney) == 0x000004, "Wrong size on GlobalWorkBpLib_GWorkSetMoney");
static_assert(offsetof(GlobalWorkBpLib_GWorkSetMoney, SetMoeny) == 0x000000, "Member 'GlobalWorkBpLib_GWorkSetMoney::SetMoeny' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkSetPartyIN
// 0x0004 (0x0004 - 0x0000)
struct GlobalWorkBpLib_GWorkSetPartyIN final
{
public:
	int32                                         PCID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkSetPartyIN) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkSetPartyIN");
static_assert(sizeof(GlobalWorkBpLib_GWorkSetPartyIN) == 0x000004, "Wrong size on GlobalWorkBpLib_GWorkSetPartyIN");
static_assert(offsetof(GlobalWorkBpLib_GWorkSetPartyIN, PCID) == 0x000000, "Member 'GlobalWorkBpLib_GWorkSetPartyIN::PCID' has a wrong offset!");

// Function xrd777.GlobalWorkBpLib.GWorkSetPartyOUT
// 0x0004 (0x0004 - 0x0000)
struct GlobalWorkBpLib_GWorkSetPartyOUT final
{
public:
	int32                                         PCID;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalWorkBpLib_GWorkSetPartyOUT) == 0x000004, "Wrong alignment on GlobalWorkBpLib_GWorkSetPartyOUT");
static_assert(sizeof(GlobalWorkBpLib_GWorkSetPartyOUT) == 0x000004, "Wrong size on GlobalWorkBpLib_GWorkSetPartyOUT");
static_assert(offsetof(GlobalWorkBpLib_GWorkSetPartyOUT, PCID) == 0x000000, "Member 'GlobalWorkBpLib_GWorkSetPartyOUT::PCID' has a wrong offset!");

// Function xrd777.HandwritingSpawner.OnCompleteNiagara
// 0x0008 (0x0008 - 0x0000)
struct HandwritingSpawner_OnCompleteNiagara final
{
public:
	class UNiagaraComponent*                      PSystem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HandwritingSpawner_OnCompleteNiagara) == 0x000008, "Wrong alignment on HandwritingSpawner_OnCompleteNiagara");
static_assert(sizeof(HandwritingSpawner_OnCompleteNiagara) == 0x000008, "Wrong size on HandwritingSpawner_OnCompleteNiagara");
static_assert(offsetof(HandwritingSpawner_OnCompleteNiagara, PSystem) == 0x000000, "Member 'HandwritingSpawner_OnCompleteNiagara::PSystem' has a wrong offset!");

// Function xrd777.HandwritingSpawner.RequestPlayEffect
// 0x0003 (0x0003 - 0x0000)
struct HandwritingSpawner_RequestPlayEffect final
{
public:
	EAtlEvtHandwritingType                        InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHandwritingSpawnRules                        InSpawnRule;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HandwritingSpawner_RequestPlayEffect) == 0x000001, "Wrong alignment on HandwritingSpawner_RequestPlayEffect");
static_assert(sizeof(HandwritingSpawner_RequestPlayEffect) == 0x000003, "Wrong size on HandwritingSpawner_RequestPlayEffect");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffect, InType) == 0x000000, "Member 'HandwritingSpawner_RequestPlayEffect::InType' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffect, InSpawnRule) == 0x000001, "Member 'HandwritingSpawner_RequestPlayEffect::InSpawnRule' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffect, bInLoop) == 0x000002, "Member 'HandwritingSpawner_RequestPlayEffect::bInLoop' has a wrong offset!");

// Function xrd777.HandwritingSpawner.RequestPlayEffectAtSpawnerAttachedTo
// 0x0048 (0x0048 - 0x0000)
struct HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo final
{
public:
	EAtlEvtHandwritingType                        InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHandwritingSpawnRules                        InSpawnRule;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InLocation;                                        // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotator;                                         // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InLoopCount;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCameraOffset;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x003C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo) == 0x000008, "Wrong alignment on HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo");
static_assert(sizeof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo) == 0x000048, "Wrong size on HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo, InType) == 0x000000, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo::InType' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo, Character) == 0x000008, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo::Character' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo, AttachSocketName) == 0x000010, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo::AttachSocketName' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo, InSpawnRule) == 0x000018, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo::InSpawnRule' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo, bInLoop) == 0x000019, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo::bInLoop' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo, InLocation) == 0x00001C, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo::InLocation' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo, InRotator) == 0x000028, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo::InRotator' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo, InLoopCount) == 0x000034, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo::InLoopCount' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo, InCameraOffset) == 0x000038, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo::InCameraOffset' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo, InScale) == 0x00003C, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedTo::InScale' has a wrong offset!");

// Function xrd777.HandwritingSpawner.RequestPlayEffectAtSpawnerAttachedToNpc
// 0x0048 (0x0048 - 0x0000)
struct HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc final
{
public:
	EAtlEvtHandwritingType                        InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ANpcBaseCore*                           NpcBase;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHandwritingSpawnRules                        InSpawnRule;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InLocation;                                        // 0x001C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotator;                                         // 0x0028(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InLoopCount;                                       // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCameraOffset;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x003C(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc) == 0x000008, "Wrong alignment on HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc");
static_assert(sizeof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc) == 0x000048, "Wrong size on HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc, InType) == 0x000000, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc::InType' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc, NpcBase) == 0x000008, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc::NpcBase' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc, AttachSocketName) == 0x000010, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc::AttachSocketName' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc, InSpawnRule) == 0x000018, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc::InSpawnRule' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc, bInLoop) == 0x000019, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc::bInLoop' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc, InLocation) == 0x00001C, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc::InLocation' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc, InRotator) == 0x000028, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc::InRotator' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc, InLoopCount) == 0x000034, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc::InLoopCount' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc, InCameraOffset) == 0x000038, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc::InCameraOffset' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc, InScale) == 0x00003C, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerAttachedToNpc::InScale' has a wrong offset!");

// Function xrd777.HandwritingSpawner.RequestPlayEffectAtSpawnerLocation
// 0x0030 (0x0030 - 0x0000)
struct HandwritingSpawner_RequestPlayEffectAtSpawnerLocation final
{
public:
	EAtlEvtHandwritingType                        InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InLocation;                                        // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotator;                                         // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         InLoopCount;                                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCameraOffset;                                    // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0024(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HandwritingSpawner_RequestPlayEffectAtSpawnerLocation) == 0x000004, "Wrong alignment on HandwritingSpawner_RequestPlayEffectAtSpawnerLocation");
static_assert(sizeof(HandwritingSpawner_RequestPlayEffectAtSpawnerLocation) == 0x000030, "Wrong size on HandwritingSpawner_RequestPlayEffectAtSpawnerLocation");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerLocation, InType) == 0x000000, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerLocation::InType' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerLocation, bInLoop) == 0x000001, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerLocation::bInLoop' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerLocation, InLocation) == 0x000004, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerLocation::InLocation' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerLocation, InRotator) == 0x000010, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerLocation::InRotator' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerLocation, InLoopCount) == 0x00001C, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerLocation::InLoopCount' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerLocation, InCameraOffset) == 0x000020, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerLocation::InCameraOffset' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectAtSpawnerLocation, InScale) == 0x000024, "Member 'HandwritingSpawner_RequestPlayEffectAtSpawnerLocation::InScale' has a wrong offset!");

// Function xrd777.HandwritingSpawner.RequestPlayEffectFromParam
// 0x0040 (0x0040 - 0x0000)
struct HandwritingSpawner_RequestPlayEffectFromParam final
{
public:
	EAtlEvtHandwritingType                        InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtlHandwritingNiagaraRequestParam     InParam;                                           // 0x0004(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EHandwritingSpawnRules                        InSpawnRule;                                       // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLoop;                                           // 0x003D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HandwritingSpawner_RequestPlayEffectFromParam) == 0x000004, "Wrong alignment on HandwritingSpawner_RequestPlayEffectFromParam");
static_assert(sizeof(HandwritingSpawner_RequestPlayEffectFromParam) == 0x000040, "Wrong size on HandwritingSpawner_RequestPlayEffectFromParam");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectFromParam, InType) == 0x000000, "Member 'HandwritingSpawner_RequestPlayEffectFromParam::InType' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectFromParam, InParam) == 0x000004, "Member 'HandwritingSpawner_RequestPlayEffectFromParam::InParam' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectFromParam, InSpawnRule) == 0x00003C, "Member 'HandwritingSpawner_RequestPlayEffectFromParam::InSpawnRule' has a wrong offset!");
static_assert(offsetof(HandwritingSpawner_RequestPlayEffectFromParam, bInLoop) == 0x00003D, "Member 'HandwritingSpawner_RequestPlayEffectFromParam::bInLoop' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.GetAdjustedAllLayoutData
// 0x002C (0x002C - 0x0000)
struct HandwritingSubsystem_GetAdjustedAllLayoutData final
{
public:
	EHandwritingLayout                            InIndexPosRot;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutPosition;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutAngle;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHandwritingLayout                            InIndexScale;                                      // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutScale;                                          // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutSize;                                           // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HandwritingSubsystem_GetAdjustedAllLayoutData) == 0x000004, "Wrong alignment on HandwritingSubsystem_GetAdjustedAllLayoutData");
static_assert(sizeof(HandwritingSubsystem_GetAdjustedAllLayoutData) == 0x00002C, "Wrong size on HandwritingSubsystem_GetAdjustedAllLayoutData");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedAllLayoutData, InIndexPosRot) == 0x000000, "Member 'HandwritingSubsystem_GetAdjustedAllLayoutData::InIndexPosRot' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedAllLayoutData, OutPosition) == 0x000004, "Member 'HandwritingSubsystem_GetAdjustedAllLayoutData::OutPosition' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedAllLayoutData, OutAngle) == 0x000010, "Member 'HandwritingSubsystem_GetAdjustedAllLayoutData::OutAngle' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedAllLayoutData, InIndexScale) == 0x000014, "Member 'HandwritingSubsystem_GetAdjustedAllLayoutData::InIndexScale' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedAllLayoutData, OutScale) == 0x000018, "Member 'HandwritingSubsystem_GetAdjustedAllLayoutData::OutScale' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedAllLayoutData, OutSize) == 0x000024, "Member 'HandwritingSubsystem_GetAdjustedAllLayoutData::OutSize' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedAllLayoutData, ReturnValue) == 0x000028, "Member 'HandwritingSubsystem_GetAdjustedAllLayoutData::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.GetAdjustedCallingLayoutData
// 0x0010 (0x0010 - 0x0000)
struct HandwritingSubsystem_GetAdjustedCallingLayoutData final
{
public:
	float                                         OutScale1;                                         // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutScale2;                                         // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutScale3;                                         // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HandwritingSubsystem_GetAdjustedCallingLayoutData) == 0x000004, "Wrong alignment on HandwritingSubsystem_GetAdjustedCallingLayoutData");
static_assert(sizeof(HandwritingSubsystem_GetAdjustedCallingLayoutData) == 0x000010, "Wrong size on HandwritingSubsystem_GetAdjustedCallingLayoutData");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedCallingLayoutData, OutScale1) == 0x000000, "Member 'HandwritingSubsystem_GetAdjustedCallingLayoutData::OutScale1' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedCallingLayoutData, OutScale2) == 0x000004, "Member 'HandwritingSubsystem_GetAdjustedCallingLayoutData::OutScale2' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedCallingLayoutData, OutScale3) == 0x000008, "Member 'HandwritingSubsystem_GetAdjustedCallingLayoutData::OutScale3' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedCallingLayoutData, ReturnValue) == 0x00000C, "Member 'HandwritingSubsystem_GetAdjustedCallingLayoutData::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.GetAdjustedDoubleExclamationLayoutData
// 0x001C (0x001C - 0x0000)
struct HandwritingSubsystem_GetAdjustedDoubleExclamationLayoutData final
{
public:
	struct FVector                                OutPosition1;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition2;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HandwritingSubsystem_GetAdjustedDoubleExclamationLayoutData) == 0x000004, "Wrong alignment on HandwritingSubsystem_GetAdjustedDoubleExclamationLayoutData");
static_assert(sizeof(HandwritingSubsystem_GetAdjustedDoubleExclamationLayoutData) == 0x00001C, "Wrong size on HandwritingSubsystem_GetAdjustedDoubleExclamationLayoutData");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedDoubleExclamationLayoutData, OutPosition1) == 0x000000, "Member 'HandwritingSubsystem_GetAdjustedDoubleExclamationLayoutData::OutPosition1' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedDoubleExclamationLayoutData, OutPosition2) == 0x00000C, "Member 'HandwritingSubsystem_GetAdjustedDoubleExclamationLayoutData::OutPosition2' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedDoubleExclamationLayoutData, ReturnValue) == 0x000018, "Member 'HandwritingSubsystem_GetAdjustedDoubleExclamationLayoutData::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.GetAdjustedExclamationQuestionLayoutData
// 0x002C (0x002C - 0x0000)
struct HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData final
{
public:
	struct FVector                                OutPosition1;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition2;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutScale;                                          // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutScaleFloat;                                     // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData) == 0x000004, "Wrong alignment on HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData");
static_assert(sizeof(HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData) == 0x00002C, "Wrong size on HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData, OutPosition1) == 0x000000, "Member 'HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData::OutPosition1' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData, OutPosition2) == 0x00000C, "Member 'HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData::OutPosition2' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData, OutScale) == 0x000018, "Member 'HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData::OutScale' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData, OutScaleFloat) == 0x000024, "Member 'HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData::OutScaleFloat' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData, ReturnValue) == 0x000028, "Member 'HandwritingSubsystem_GetAdjustedExclamationQuestionLayoutData::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.GetAdjustedLayoutData
// 0x001C (0x001C - 0x0000)
struct HandwritingSubsystem_GetAdjustedLayoutData final
{
public:
	EHandwritingLayout                            InIndex;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutPosition;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutAngle;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutScale;                                          // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HandwritingSubsystem_GetAdjustedLayoutData) == 0x000004, "Wrong alignment on HandwritingSubsystem_GetAdjustedLayoutData");
static_assert(sizeof(HandwritingSubsystem_GetAdjustedLayoutData) == 0x00001C, "Wrong size on HandwritingSubsystem_GetAdjustedLayoutData");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutData, InIndex) == 0x000000, "Member 'HandwritingSubsystem_GetAdjustedLayoutData::InIndex' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutData, OutPosition) == 0x000004, "Member 'HandwritingSubsystem_GetAdjustedLayoutData::OutPosition' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutData, OutAngle) == 0x000010, "Member 'HandwritingSubsystem_GetAdjustedLayoutData::OutAngle' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutData, OutScale) == 0x000014, "Member 'HandwritingSubsystem_GetAdjustedLayoutData::OutScale' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutData, ReturnValue) == 0x000018, "Member 'HandwritingSubsystem_GetAdjustedLayoutData::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.GetAdjustedLayoutPosition
// 0x0014 (0x0014 - 0x0000)
struct HandwritingSubsystem_GetAdjustedLayoutPosition final
{
public:
	EHandwritingLayout                            InIndex;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutPosition;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HandwritingSubsystem_GetAdjustedLayoutPosition) == 0x000004, "Wrong alignment on HandwritingSubsystem_GetAdjustedLayoutPosition");
static_assert(sizeof(HandwritingSubsystem_GetAdjustedLayoutPosition) == 0x000014, "Wrong size on HandwritingSubsystem_GetAdjustedLayoutPosition");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutPosition, InIndex) == 0x000000, "Member 'HandwritingSubsystem_GetAdjustedLayoutPosition::InIndex' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutPosition, OutPosition) == 0x000004, "Member 'HandwritingSubsystem_GetAdjustedLayoutPosition::OutPosition' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutPosition, ReturnValue) == 0x000010, "Member 'HandwritingSubsystem_GetAdjustedLayoutPosition::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.GetAdjustedLayoutRotation
// 0x000C (0x000C - 0x0000)
struct HandwritingSubsystem_GetAdjustedLayoutRotation final
{
public:
	EHandwritingLayout                            InIndex;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutAngle;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HandwritingSubsystem_GetAdjustedLayoutRotation) == 0x000004, "Wrong alignment on HandwritingSubsystem_GetAdjustedLayoutRotation");
static_assert(sizeof(HandwritingSubsystem_GetAdjustedLayoutRotation) == 0x00000C, "Wrong size on HandwritingSubsystem_GetAdjustedLayoutRotation");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutRotation, InIndex) == 0x000000, "Member 'HandwritingSubsystem_GetAdjustedLayoutRotation::InIndex' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutRotation, OutAngle) == 0x000004, "Member 'HandwritingSubsystem_GetAdjustedLayoutRotation::OutAngle' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutRotation, ReturnValue) == 0x000008, "Member 'HandwritingSubsystem_GetAdjustedLayoutRotation::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.GetAdjustedLayoutScale
// 0x000C (0x000C - 0x0000)
struct HandwritingSubsystem_GetAdjustedLayoutScale final
{
public:
	EHandwritingLayout                            InIndex;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutScale;                                          // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HandwritingSubsystem_GetAdjustedLayoutScale) == 0x000004, "Wrong alignment on HandwritingSubsystem_GetAdjustedLayoutScale");
static_assert(sizeof(HandwritingSubsystem_GetAdjustedLayoutScale) == 0x00000C, "Wrong size on HandwritingSubsystem_GetAdjustedLayoutScale");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutScale, InIndex) == 0x000000, "Member 'HandwritingSubsystem_GetAdjustedLayoutScale::InIndex' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutScale, OutScale) == 0x000004, "Member 'HandwritingSubsystem_GetAdjustedLayoutScale::OutScale' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedLayoutScale, ReturnValue) == 0x000008, "Member 'HandwritingSubsystem_GetAdjustedLayoutScale::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.GetAdjustedQuestionLayoutData
// 0x0028 (0x0028 - 0x0000)
struct HandwritingSubsystem_GetAdjustedQuestionLayoutData final
{
public:
	struct FVector                                OutPosition1;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition2;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition3;                                      // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HandwritingSubsystem_GetAdjustedQuestionLayoutData) == 0x000004, "Wrong alignment on HandwritingSubsystem_GetAdjustedQuestionLayoutData");
static_assert(sizeof(HandwritingSubsystem_GetAdjustedQuestionLayoutData) == 0x000028, "Wrong size on HandwritingSubsystem_GetAdjustedQuestionLayoutData");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedQuestionLayoutData, OutPosition1) == 0x000000, "Member 'HandwritingSubsystem_GetAdjustedQuestionLayoutData::OutPosition1' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedQuestionLayoutData, OutPosition2) == 0x00000C, "Member 'HandwritingSubsystem_GetAdjustedQuestionLayoutData::OutPosition2' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedQuestionLayoutData, OutPosition3) == 0x000018, "Member 'HandwritingSubsystem_GetAdjustedQuestionLayoutData::OutPosition3' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedQuestionLayoutData, ReturnValue) == 0x000024, "Member 'HandwritingSubsystem_GetAdjustedQuestionLayoutData::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.GetAdjustedWhineLayoutData
// 0x0020 (0x0020 - 0x0000)
struct HandwritingSubsystem_GetAdjustedWhineLayoutData final
{
public:
	struct FVector                                OutPosition;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutScale;                                          // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutSize;                                           // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HandwritingSubsystem_GetAdjustedWhineLayoutData) == 0x000004, "Wrong alignment on HandwritingSubsystem_GetAdjustedWhineLayoutData");
static_assert(sizeof(HandwritingSubsystem_GetAdjustedWhineLayoutData) == 0x000020, "Wrong size on HandwritingSubsystem_GetAdjustedWhineLayoutData");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedWhineLayoutData, OutPosition) == 0x000000, "Member 'HandwritingSubsystem_GetAdjustedWhineLayoutData::OutPosition' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedWhineLayoutData, OutScale) == 0x00000C, "Member 'HandwritingSubsystem_GetAdjustedWhineLayoutData::OutScale' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedWhineLayoutData, OutSize) == 0x000018, "Member 'HandwritingSubsystem_GetAdjustedWhineLayoutData::OutSize' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedWhineLayoutData, ReturnValue) == 0x00001C, "Member 'HandwritingSubsystem_GetAdjustedWhineLayoutData::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.GetAdjustedWoofLayoutData
// 0x0034 (0x0034 - 0x0000)
struct HandwritingSubsystem_GetAdjustedWoofLayoutData final
{
public:
	struct FVector                                OutPosition1;                                      // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition2;                                      // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition3;                                      // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutPosition4;                                      // 0x0024(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HandwritingSubsystem_GetAdjustedWoofLayoutData) == 0x000004, "Wrong alignment on HandwritingSubsystem_GetAdjustedWoofLayoutData");
static_assert(sizeof(HandwritingSubsystem_GetAdjustedWoofLayoutData) == 0x000034, "Wrong size on HandwritingSubsystem_GetAdjustedWoofLayoutData");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedWoofLayoutData, OutPosition1) == 0x000000, "Member 'HandwritingSubsystem_GetAdjustedWoofLayoutData::OutPosition1' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedWoofLayoutData, OutPosition2) == 0x00000C, "Member 'HandwritingSubsystem_GetAdjustedWoofLayoutData::OutPosition2' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedWoofLayoutData, OutPosition3) == 0x000018, "Member 'HandwritingSubsystem_GetAdjustedWoofLayoutData::OutPosition3' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedWoofLayoutData, OutPosition4) == 0x000024, "Member 'HandwritingSubsystem_GetAdjustedWoofLayoutData::OutPosition4' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_GetAdjustedWoofLayoutData, ReturnValue) == 0x000030, "Member 'HandwritingSubsystem_GetAdjustedWoofLayoutData::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.IsPolandLanguage
// 0x0001 (0x0001 - 0x0000)
struct HandwritingSubsystem_IsPolandLanguage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HandwritingSubsystem_IsPolandLanguage) == 0x000001, "Wrong alignment on HandwritingSubsystem_IsPolandLanguage");
static_assert(sizeof(HandwritingSubsystem_IsPolandLanguage) == 0x000001, "Wrong size on HandwritingSubsystem_IsPolandLanguage");
static_assert(offsetof(HandwritingSubsystem_IsPolandLanguage, ReturnValue) == 0x000000, "Member 'HandwritingSubsystem_IsPolandLanguage::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.SpawnHandwritingAtLocation
// 0x0050 (0x0050 - 0x0000)
struct HandwritingSubsystem_SpawnHandwritingAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtlHandwritingGroupType                      GroupType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtlEvtHandwritingType                        Type;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtlHandwritingNiagaraRequestParam     InParam;                                           // 0x000C(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroySpawner;                               // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbLoop;                                           // 0x0045(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AHandwritingSpawner*                    ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HandwritingSubsystem_SpawnHandwritingAtLocation) == 0x000008, "Wrong alignment on HandwritingSubsystem_SpawnHandwritingAtLocation");
static_assert(sizeof(HandwritingSubsystem_SpawnHandwritingAtLocation) == 0x000050, "Wrong size on HandwritingSubsystem_SpawnHandwritingAtLocation");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAtLocation, WorldContextObject) == 0x000000, "Member 'HandwritingSubsystem_SpawnHandwritingAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAtLocation, GroupType) == 0x000008, "Member 'HandwritingSubsystem_SpawnHandwritingAtLocation::GroupType' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAtLocation, Type) == 0x000009, "Member 'HandwritingSubsystem_SpawnHandwritingAtLocation::Type' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAtLocation, InParam) == 0x00000C, "Member 'HandwritingSubsystem_SpawnHandwritingAtLocation::InParam' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAtLocation, bAutoDestroySpawner) == 0x000044, "Member 'HandwritingSubsystem_SpawnHandwritingAtLocation::bAutoDestroySpawner' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAtLocation, InbLoop) == 0x000045, "Member 'HandwritingSubsystem_SpawnHandwritingAtLocation::InbLoop' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAtLocation, ReturnValue) == 0x000048, "Member 'HandwritingSubsystem_SpawnHandwritingAtLocation::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.SpawnHandwritingAttached
// 0x0060 (0x0060 - 0x0000)
struct HandwritingSubsystem_SpawnHandwritingAttached final
{
public:
	EAtlHandwritingGroupType                      GroupType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtlEvtHandwritingType                        Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHandwritingSpawnRules                        InSpawnRule;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtlHandwritingNiagaraRequestParam     InParam;                                           // 0x001C(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroySpawner;                               // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbLoop;                                           // 0x0055(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AHandwritingSpawner*                    ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HandwritingSubsystem_SpawnHandwritingAttached) == 0x000008, "Wrong alignment on HandwritingSubsystem_SpawnHandwritingAttached");
static_assert(sizeof(HandwritingSubsystem_SpawnHandwritingAttached) == 0x000060, "Wrong size on HandwritingSubsystem_SpawnHandwritingAttached");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttached, GroupType) == 0x000000, "Member 'HandwritingSubsystem_SpawnHandwritingAttached::GroupType' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttached, Type) == 0x000001, "Member 'HandwritingSubsystem_SpawnHandwritingAttached::Type' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttached, Character) == 0x000008, "Member 'HandwritingSubsystem_SpawnHandwritingAttached::Character' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttached, AttachSocketName) == 0x000010, "Member 'HandwritingSubsystem_SpawnHandwritingAttached::AttachSocketName' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttached, InSpawnRule) == 0x000018, "Member 'HandwritingSubsystem_SpawnHandwritingAttached::InSpawnRule' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttached, InParam) == 0x00001C, "Member 'HandwritingSubsystem_SpawnHandwritingAttached::InParam' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttached, bAutoDestroySpawner) == 0x000054, "Member 'HandwritingSubsystem_SpawnHandwritingAttached::bAutoDestroySpawner' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttached, InbLoop) == 0x000055, "Member 'HandwritingSubsystem_SpawnHandwritingAttached::InbLoop' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttached, ReturnValue) == 0x000058, "Member 'HandwritingSubsystem_SpawnHandwritingAttached::ReturnValue' has a wrong offset!");

// Function xrd777.HandwritingSubsystem.SpawnHandwritingAttachedNpc
// 0x0060 (0x0060 - 0x0000)
struct HandwritingSubsystem_SpawnHandwritingAttachedNpc final
{
public:
	EAtlHandwritingGroupType                      GroupType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtlEvtHandwritingType                        Type;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ANpcBaseCore*                           NpcBase;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocketName;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHandwritingSpawnRules                        InSpawnRule;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtlHandwritingNiagaraRequestParam     InParam;                                           // 0x001C(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroySpawner;                               // 0x0054(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InbLoop;                                           // 0x0055(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AHandwritingSpawner*                    ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HandwritingSubsystem_SpawnHandwritingAttachedNpc) == 0x000008, "Wrong alignment on HandwritingSubsystem_SpawnHandwritingAttachedNpc");
static_assert(sizeof(HandwritingSubsystem_SpawnHandwritingAttachedNpc) == 0x000060, "Wrong size on HandwritingSubsystem_SpawnHandwritingAttachedNpc");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttachedNpc, GroupType) == 0x000000, "Member 'HandwritingSubsystem_SpawnHandwritingAttachedNpc::GroupType' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttachedNpc, Type) == 0x000001, "Member 'HandwritingSubsystem_SpawnHandwritingAttachedNpc::Type' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttachedNpc, NpcBase) == 0x000008, "Member 'HandwritingSubsystem_SpawnHandwritingAttachedNpc::NpcBase' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttachedNpc, AttachSocketName) == 0x000010, "Member 'HandwritingSubsystem_SpawnHandwritingAttachedNpc::AttachSocketName' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttachedNpc, InSpawnRule) == 0x000018, "Member 'HandwritingSubsystem_SpawnHandwritingAttachedNpc::InSpawnRule' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttachedNpc, InParam) == 0x00001C, "Member 'HandwritingSubsystem_SpawnHandwritingAttachedNpc::InParam' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttachedNpc, bAutoDestroySpawner) == 0x000054, "Member 'HandwritingSubsystem_SpawnHandwritingAttachedNpc::bAutoDestroySpawner' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttachedNpc, InbLoop) == 0x000055, "Member 'HandwritingSubsystem_SpawnHandwritingAttachedNpc::InbLoop' has a wrong offset!");
static_assert(offsetof(HandwritingSubsystem_SpawnHandwritingAttachedNpc, ReturnValue) == 0x000058, "Member 'HandwritingSubsystem_SpawnHandwritingAttachedNpc::ReturnValue' has a wrong offset!");

// Function xrd777.HT_UMGTestGameModeBase.ChangeMenuWidget
// 0x0008 (0x0008 - 0x0000)
struct HT_UMGTestGameModeBase_ChangeMenuWidget final
{
public:
	TSubclassOf<class UUserWidget>                NewWidgetClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HT_UMGTestGameModeBase_ChangeMenuWidget) == 0x000008, "Wrong alignment on HT_UMGTestGameModeBase_ChangeMenuWidget");
static_assert(sizeof(HT_UMGTestGameModeBase_ChangeMenuWidget) == 0x000008, "Wrong size on HT_UMGTestGameModeBase_ChangeMenuWidget");
static_assert(offsetof(HT_UMGTestGameModeBase_ChangeMenuWidget, NewWidgetClass) == 0x000000, "Member 'HT_UMGTestGameModeBase_ChangeMenuWidget::NewWidgetClass' has a wrong offset!");

// Function xrd777.HttpBpLib.PostTeamsMessage
// 0x0030 (0x0030 - 0x0000)
struct HttpBpLib_PostTeamsMessage final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Text;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpBpLib_PostTeamsMessage) == 0x000008, "Wrong alignment on HttpBpLib_PostTeamsMessage");
static_assert(sizeof(HttpBpLib_PostTeamsMessage) == 0x000030, "Wrong size on HttpBpLib_PostTeamsMessage");
static_assert(offsetof(HttpBpLib_PostTeamsMessage, URL) == 0x000000, "Member 'HttpBpLib_PostTeamsMessage::URL' has a wrong offset!");
static_assert(offsetof(HttpBpLib_PostTeamsMessage, Title) == 0x000010, "Member 'HttpBpLib_PostTeamsMessage::Title' has a wrong offset!");
static_assert(offsetof(HttpBpLib_PostTeamsMessage, Text) == 0x000020, "Member 'HttpBpLib_PostTeamsMessage::Text' has a wrong offset!");

// Function xrd777.HttpBpLib.SpawnHttpActor
// 0x0020 (0x0020 - 0x0000)
struct HttpBpLib_SpawnHttpActor final
{
public:
	class FString                                 BPActorReferencePath;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Arg;                                               // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HttpBpLib_SpawnHttpActor) == 0x000008, "Wrong alignment on HttpBpLib_SpawnHttpActor");
static_assert(sizeof(HttpBpLib_SpawnHttpActor) == 0x000020, "Wrong size on HttpBpLib_SpawnHttpActor");
static_assert(offsetof(HttpBpLib_SpawnHttpActor, BPActorReferencePath) == 0x000000, "Member 'HttpBpLib_SpawnHttpActor::BPActorReferencePath' has a wrong offset!");
static_assert(offsetof(HttpBpLib_SpawnHttpActor, Arg) == 0x000010, "Member 'HttpBpLib_SpawnHttpActor::Arg' has a wrong offset!");

// Function xrd777.IKAnimInstanceBase.UpdateLocomotionTick
// 0x0004 (0x0004 - 0x0000)
struct IKAnimInstanceBase_UpdateLocomotionTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IKAnimInstanceBase_UpdateLocomotionTick) == 0x000004, "Wrong alignment on IKAnimInstanceBase_UpdateLocomotionTick");
static_assert(sizeof(IKAnimInstanceBase_UpdateLocomotionTick) == 0x000004, "Wrong size on IKAnimInstanceBase_UpdateLocomotionTick");
static_assert(offsetof(IKAnimInstanceBase_UpdateLocomotionTick, DeltaSeconds) == 0x000000, "Member 'IKAnimInstanceBase_UpdateLocomotionTick::DeltaSeconds' has a wrong offset!");

// Function xrd777.IKCharacterBase.InitializeIKSetup
// 0x0018 (0x0018 - 0x0000)
struct IKCharacterBase_InitializeIKSetup final
{
public:
	bool                                          bEnable;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 InTargetMesh;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIKAnimInstanceBase*                    InIKAnimInstance;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IKCharacterBase_InitializeIKSetup) == 0x000008, "Wrong alignment on IKCharacterBase_InitializeIKSetup");
static_assert(sizeof(IKCharacterBase_InitializeIKSetup) == 0x000018, "Wrong size on IKCharacterBase_InitializeIKSetup");
static_assert(offsetof(IKCharacterBase_InitializeIKSetup, bEnable) == 0x000000, "Member 'IKCharacterBase_InitializeIKSetup::bEnable' has a wrong offset!");
static_assert(offsetof(IKCharacterBase_InitializeIKSetup, InTargetMesh) == 0x000008, "Member 'IKCharacterBase_InitializeIKSetup::InTargetMesh' has a wrong offset!");
static_assert(offsetof(IKCharacterBase_InitializeIKSetup, InIKAnimInstance) == 0x000010, "Member 'IKCharacterBase_InitializeIKSetup::InIKAnimInstance' has a wrong offset!");

// Function xrd777.IKCharacterBase.TickUpdateIK
// 0x0004 (0x0004 - 0x0000)
struct IKCharacterBase_TickUpdateIK final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IKCharacterBase_TickUpdateIK) == 0x000004, "Wrong alignment on IKCharacterBase_TickUpdateIK");
static_assert(sizeof(IKCharacterBase_TickUpdateIK) == 0x000004, "Wrong size on IKCharacterBase_TickUpdateIK");
static_assert(offsetof(IKCharacterBase_TickUpdateIK, DeltaSeconds) == 0x000000, "Member 'IKCharacterBase_TickUpdateIK::DeltaSeconds' has a wrong offset!");

// Function xrd777.IKCharacterBase.UpdateCapsuleHalfHeight
// 0x000C (0x000C - 0x0000)
struct IKCharacterBase_UpdateCapsuleHalfHeight final
{
public:
	float                                         HipOffset;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetCapsule;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IKCharacterBase_UpdateCapsuleHalfHeight) == 0x000004, "Wrong alignment on IKCharacterBase_UpdateCapsuleHalfHeight");
static_assert(sizeof(IKCharacterBase_UpdateCapsuleHalfHeight) == 0x00000C, "Wrong size on IKCharacterBase_UpdateCapsuleHalfHeight");
static_assert(offsetof(IKCharacterBase_UpdateCapsuleHalfHeight, HipOffset) == 0x000000, "Member 'IKCharacterBase_UpdateCapsuleHalfHeight::HipOffset' has a wrong offset!");
static_assert(offsetof(IKCharacterBase_UpdateCapsuleHalfHeight, bResetCapsule) == 0x000004, "Member 'IKCharacterBase_UpdateCapsuleHalfHeight::bResetCapsule' has a wrong offset!");
static_assert(offsetof(IKCharacterBase_UpdateCapsuleHalfHeight, DeltaSeconds) == 0x000008, "Member 'IKCharacterBase_UpdateCapsuleHalfHeight::DeltaSeconds' has a wrong offset!");

// Function xrd777.IKCharacterBase.UpdateInterpFloat
// 0x0010 (0x0010 - 0x0000)
struct IKCharacterBase_UpdateInterpFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IKCharacterBase_UpdateInterpFloat) == 0x000004, "Wrong alignment on IKCharacterBase_UpdateInterpFloat");
static_assert(sizeof(IKCharacterBase_UpdateInterpFloat) == 0x000010, "Wrong size on IKCharacterBase_UpdateInterpFloat");
static_assert(offsetof(IKCharacterBase_UpdateInterpFloat, Value) == 0x000000, "Member 'IKCharacterBase_UpdateInterpFloat::Value' has a wrong offset!");
static_assert(offsetof(IKCharacterBase_UpdateInterpFloat, Target) == 0x000004, "Member 'IKCharacterBase_UpdateInterpFloat::Target' has a wrong offset!");
static_assert(offsetof(IKCharacterBase_UpdateInterpFloat, InterpSpeed) == 0x000008, "Member 'IKCharacterBase_UpdateInterpFloat::InterpSpeed' has a wrong offset!");
static_assert(offsetof(IKCharacterBase_UpdateInterpFloat, DeltaSeconds) == 0x00000C, "Member 'IKCharacterBase_UpdateInterpFloat::DeltaSeconds' has a wrong offset!");

// Function xrd777.IKCharacterBase.UpdateInterpRotator
// 0x0020 (0x0020 - 0x0000)
struct IKCharacterBase_UpdateInterpRotator final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               Target;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         InterpSpeed;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IKCharacterBase_UpdateInterpRotator) == 0x000004, "Wrong alignment on IKCharacterBase_UpdateInterpRotator");
static_assert(sizeof(IKCharacterBase_UpdateInterpRotator) == 0x000020, "Wrong size on IKCharacterBase_UpdateInterpRotator");
static_assert(offsetof(IKCharacterBase_UpdateInterpRotator, Value) == 0x000000, "Member 'IKCharacterBase_UpdateInterpRotator::Value' has a wrong offset!");
static_assert(offsetof(IKCharacterBase_UpdateInterpRotator, Target) == 0x00000C, "Member 'IKCharacterBase_UpdateInterpRotator::Target' has a wrong offset!");
static_assert(offsetof(IKCharacterBase_UpdateInterpRotator, InterpSpeed) == 0x000018, "Member 'IKCharacterBase_UpdateInterpRotator::InterpSpeed' has a wrong offset!");
static_assert(offsetof(IKCharacterBase_UpdateInterpRotator, DeltaSeconds) == 0x00001C, "Member 'IKCharacterBase_UpdateInterpRotator::DeltaSeconds' has a wrong offset!");

// Function xrd777.UIDrawGamerTag.SetNameText
// 0x0010 (0x0010 - 0x0000)
struct UIDrawGamerTag_SetNameText final
{
public:
	class FString                                 NameText;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawGamerTag_SetNameText) == 0x000008, "Wrong alignment on UIDrawGamerTag_SetNameText");
static_assert(sizeof(UIDrawGamerTag_SetNameText) == 0x000010, "Wrong size on UIDrawGamerTag_SetNameText");
static_assert(offsetof(UIDrawGamerTag_SetNameText, NameText) == 0x000000, "Member 'UIDrawGamerTag_SetNameText::NameText' has a wrong offset!");

// Function xrd777.UIDrawGamerTag.SetScale
// 0x0004 (0x0004 - 0x0000)
struct UIDrawGamerTag_SetScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDrawGamerTag_SetScale) == 0x000004, "Wrong alignment on UIDrawGamerTag_SetScale");
static_assert(sizeof(UIDrawGamerTag_SetScale) == 0x000004, "Wrong size on UIDrawGamerTag_SetScale");
static_assert(offsetof(UIDrawGamerTag_SetScale, Scale) == 0x000000, "Member 'UIDrawGamerTag_SetScale::Scale' has a wrong offset!");

// Function xrd777.itfMsgProgWindow_TUTRIALDraw.Update
// 0x0004 (0x0004 - 0x0000)
struct ItfMsgProgWindow_TUTRIALDraw_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItfMsgProgWindow_TUTRIALDraw_Update) == 0x000004, "Wrong alignment on ItfMsgProgWindow_TUTRIALDraw_Update");
static_assert(sizeof(ItfMsgProgWindow_TUTRIALDraw_Update) == 0x000004, "Wrong size on ItfMsgProgWindow_TUTRIALDraw_Update");
static_assert(offsetof(ItfMsgProgWindow_TUTRIALDraw_Update, DeltaTime) == 0x000000, "Member 'ItfMsgProgWindow_TUTRIALDraw_Update::DeltaTime' has a wrong offset!");

// Function xrd777.BuildModeLibrary.IsDebug
// 0x0001 (0x0001 - 0x0000)
struct BuildModeLibrary_IsDebug final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildModeLibrary_IsDebug) == 0x000001, "Wrong alignment on BuildModeLibrary_IsDebug");
static_assert(sizeof(BuildModeLibrary_IsDebug) == 0x000001, "Wrong size on BuildModeLibrary_IsDebug");
static_assert(offsetof(BuildModeLibrary_IsDebug, ReturnValue) == 0x000000, "Member 'BuildModeLibrary_IsDebug::ReturnValue' has a wrong offset!");

// Function xrd777.BuildModeLibrary.IsShipping
// 0x0001 (0x0001 - 0x0000)
struct BuildModeLibrary_IsShipping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuildModeLibrary_IsShipping) == 0x000001, "Wrong alignment on BuildModeLibrary_IsShipping");
static_assert(sizeof(BuildModeLibrary_IsShipping) == 0x000001, "Wrong size on BuildModeLibrary_IsShipping");
static_assert(offsetof(BuildModeLibrary_IsShipping, ReturnValue) == 0x000000, "Member 'BuildModeLibrary_IsShipping::ReturnValue' has a wrong offset!");

// Function xrd777.KernelBpLib.IsInEditor
// 0x0001 (0x0001 - 0x0000)
struct KernelBpLib_IsInEditor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KernelBpLib_IsInEditor) == 0x000001, "Wrong alignment on KernelBpLib_IsInEditor");
static_assert(sizeof(KernelBpLib_IsInEditor) == 0x000001, "Wrong size on KernelBpLib_IsInEditor");
static_assert(offsetof(KernelBpLib_IsInEditor, ReturnValue) == 0x000000, "Member 'KernelBpLib_IsInEditor::ReturnValue' has a wrong offset!");

// Function xrd777.KernelBpLib.SetTestCharacter
// 0x0040 (0x0040 - 0x0000)
struct KernelBpLib_SetTestCharacter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ACharacter>                 In;                                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             Location;                                          // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KernelBpLib_SetTestCharacter) == 0x000010, "Wrong alignment on KernelBpLib_SetTestCharacter");
static_assert(sizeof(KernelBpLib_SetTestCharacter) == 0x000040, "Wrong size on KernelBpLib_SetTestCharacter");
static_assert(offsetof(KernelBpLib_SetTestCharacter, WorldContextObject) == 0x000000, "Member 'KernelBpLib_SetTestCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KernelBpLib_SetTestCharacter, In) == 0x000008, "Member 'KernelBpLib_SetTestCharacter::In' has a wrong offset!");
static_assert(offsetof(KernelBpLib_SetTestCharacter, Location) == 0x000010, "Member 'KernelBpLib_SetTestCharacter::Location' has a wrong offset!");

// Function xrd777.KernelBpLib.SetTestMap
// 0x0040 (0x0040 - 0x0000)
struct KernelBpLib_SetTestMap final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Location;                                          // 0x0010(0x0030)(Parm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KernelBpLib_SetTestMap) == 0x000010, "Wrong alignment on KernelBpLib_SetTestMap");
static_assert(sizeof(KernelBpLib_SetTestMap) == 0x000040, "Wrong size on KernelBpLib_SetTestMap");
static_assert(offsetof(KernelBpLib_SetTestMap, WorldContextObject) == 0x000000, "Member 'KernelBpLib_SetTestMap::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KernelBpLib_SetTestMap, Location) == 0x000010, "Member 'KernelBpLib_SetTestMap::Location' has a wrong offset!");

// Function xrd777.KernelBpLib.StartBf
// 0x0058 (0x0058 - 0x0000)
struct KernelBpLib_StartBf final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBfAsset>                InAsset;                                           // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcNo;                                            // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerStop;                                        // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BmdSearchOff;                                      // 0x0035(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0038(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KernelBpLib_StartBf) == 0x000008, "Wrong alignment on KernelBpLib_StartBf");
static_assert(sizeof(KernelBpLib_StartBf) == 0x000058, "Wrong size on KernelBpLib_StartBf");
static_assert(offsetof(KernelBpLib_StartBf, WorldContextObject) == 0x000000, "Member 'KernelBpLib_StartBf::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBf, InAsset) == 0x000008, "Member 'KernelBpLib_StartBf::InAsset' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBf, ProcNo) == 0x000030, "Member 'KernelBpLib_StartBf::ProcNo' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBf, PlayerStop) == 0x000034, "Member 'KernelBpLib_StartBf::PlayerStop' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBf, BmdSearchOff) == 0x000035, "Member 'KernelBpLib_StartBf::BmdSearchOff' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBf, LatentInfo) == 0x000038, "Member 'KernelBpLib_StartBf::LatentInfo' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBf, Result) == 0x000050, "Member 'KernelBpLib_StartBf::Result' has a wrong offset!");

// Function xrd777.KernelBpLib.StartBfEx
// 0x0080 (0x0080 - 0x0000)
struct KernelBpLib_StartBfEx final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBfAsset>                InBfAsset;                                         // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UBmdAsset>               InBmdAsset;                                        // 0x0030(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcNo;                                            // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayerStop;                                        // 0x005C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BmdSearchOff;                                      // 0x005D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0060(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0078(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KernelBpLib_StartBfEx) == 0x000008, "Wrong alignment on KernelBpLib_StartBfEx");
static_assert(sizeof(KernelBpLib_StartBfEx) == 0x000080, "Wrong size on KernelBpLib_StartBfEx");
static_assert(offsetof(KernelBpLib_StartBfEx, WorldContextObject) == 0x000000, "Member 'KernelBpLib_StartBfEx::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBfEx, InBfAsset) == 0x000008, "Member 'KernelBpLib_StartBfEx::InBfAsset' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBfEx, InBmdAsset) == 0x000030, "Member 'KernelBpLib_StartBfEx::InBmdAsset' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBfEx, ProcNo) == 0x000058, "Member 'KernelBpLib_StartBfEx::ProcNo' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBfEx, PlayerStop) == 0x00005C, "Member 'KernelBpLib_StartBfEx::PlayerStop' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBfEx, BmdSearchOff) == 0x00005D, "Member 'KernelBpLib_StartBfEx::BmdSearchOff' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBfEx, LatentInfo) == 0x000060, "Member 'KernelBpLib_StartBfEx::LatentInfo' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBfEx, Result) == 0x000078, "Member 'KernelBpLib_StartBfEx::Result' has a wrong offset!");

// Function xrd777.KernelBpLib.StartBfPath
// 0x0050 (0x0050 - 0x0000)
struct KernelBpLib_StartBfPath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BfAssetPath;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BmdAssetPath;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcNo;                                            // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0030(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KernelBpLib_StartBfPath) == 0x000008, "Wrong alignment on KernelBpLib_StartBfPath");
static_assert(sizeof(KernelBpLib_StartBfPath) == 0x000050, "Wrong size on KernelBpLib_StartBfPath");
static_assert(offsetof(KernelBpLib_StartBfPath, WorldContextObject) == 0x000000, "Member 'KernelBpLib_StartBfPath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBfPath, BfAssetPath) == 0x000008, "Member 'KernelBpLib_StartBfPath::BfAssetPath' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBfPath, BmdAssetPath) == 0x000018, "Member 'KernelBpLib_StartBfPath::BmdAssetPath' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBfPath, ProcNo) == 0x000028, "Member 'KernelBpLib_StartBfPath::ProcNo' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBfPath, LatentInfo) == 0x000030, "Member 'KernelBpLib_StartBfPath::LatentInfo' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartBfPath, Result) == 0x000048, "Member 'KernelBpLib_StartBfPath::Result' has a wrong offset!");

// Function xrd777.KernelBpLib.StartLoadingScreen
// 0x0010 (0x0010 - 0x0000)
struct KernelBpLib_StartLoadingScreen final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayUntilStopped;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayTime;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KernelBpLib_StartLoadingScreen) == 0x000008, "Wrong alignment on KernelBpLib_StartLoadingScreen");
static_assert(sizeof(KernelBpLib_StartLoadingScreen) == 0x000010, "Wrong size on KernelBpLib_StartLoadingScreen");
static_assert(offsetof(KernelBpLib_StartLoadingScreen, WorldContextObject) == 0x000000, "Member 'KernelBpLib_StartLoadingScreen::WorldContextObject' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartLoadingScreen, bPlayUntilStopped) == 0x000008, "Member 'KernelBpLib_StartLoadingScreen::bPlayUntilStopped' has a wrong offset!");
static_assert(offsetof(KernelBpLib_StartLoadingScreen, PlayTime) == 0x00000C, "Member 'KernelBpLib_StartLoadingScreen::PlayTime' has a wrong offset!");

// Function xrd777.LipsyncAppObserverSubsystem.FinishSpeakCharacter
// 0x0008 (0x0008 - 0x0000)
struct LipsyncAppObserverSubsystem_FinishSpeakCharacter final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LipsyncAppObserverSubsystem_FinishSpeakCharacter) == 0x000004, "Wrong alignment on LipsyncAppObserverSubsystem_FinishSpeakCharacter");
static_assert(sizeof(LipsyncAppObserverSubsystem_FinishSpeakCharacter) == 0x000008, "Wrong size on LipsyncAppObserverSubsystem_FinishSpeakCharacter");
static_assert(offsetof(LipsyncAppObserverSubsystem_FinishSpeakCharacter, CharcterCategoryType) == 0x000000, "Member 'LipsyncAppObserverSubsystem_FinishSpeakCharacter::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(LipsyncAppObserverSubsystem_FinishSpeakCharacter, CharaIndexID) == 0x000004, "Member 'LipsyncAppObserverSubsystem_FinishSpeakCharacter::CharaIndexID' has a wrong offset!");

// Function xrd777.LipsyncAppObserverSubsystem.FinishSpeakCharacterFromSoundID
// 0x0008 (0x0008 - 0x0000)
struct LipsyncAppObserverSubsystem_FinishSpeakCharacterFromSoundID final
{
public:
	int32                                         SoundMajorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LipsyncAppObserverSubsystem_FinishSpeakCharacterFromSoundID) == 0x000004, "Wrong alignment on LipsyncAppObserverSubsystem_FinishSpeakCharacterFromSoundID");
static_assert(sizeof(LipsyncAppObserverSubsystem_FinishSpeakCharacterFromSoundID) == 0x000008, "Wrong size on LipsyncAppObserverSubsystem_FinishSpeakCharacterFromSoundID");
static_assert(offsetof(LipsyncAppObserverSubsystem_FinishSpeakCharacterFromSoundID, SoundMajorID) == 0x000000, "Member 'LipsyncAppObserverSubsystem_FinishSpeakCharacterFromSoundID::SoundMajorID' has a wrong offset!");
static_assert(offsetof(LipsyncAppObserverSubsystem_FinishSpeakCharacterFromSoundID, SoundMinorID) == 0x000004, "Member 'LipsyncAppObserverSubsystem_FinishSpeakCharacterFromSoundID::SoundMinorID' has a wrong offset!");

// Function xrd777.LipsyncAppObserverSubsystem.getLipsyncLiveInfo
// 0x001C (0x001C - 0x0000)
struct LipsyncAppObserverSubsystem_GetLipsyncLiveInfo final
{
public:
	int32                                         SoundMajorID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundMinorID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCriLipsMorphTargetBlendAmountAsJapanese ReturnValue;                                       // 0x0008(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LipsyncAppObserverSubsystem_GetLipsyncLiveInfo) == 0x000004, "Wrong alignment on LipsyncAppObserverSubsystem_GetLipsyncLiveInfo");
static_assert(sizeof(LipsyncAppObserverSubsystem_GetLipsyncLiveInfo) == 0x00001C, "Wrong size on LipsyncAppObserverSubsystem_GetLipsyncLiveInfo");
static_assert(offsetof(LipsyncAppObserverSubsystem_GetLipsyncLiveInfo, SoundMajorID) == 0x000000, "Member 'LipsyncAppObserverSubsystem_GetLipsyncLiveInfo::SoundMajorID' has a wrong offset!");
static_assert(offsetof(LipsyncAppObserverSubsystem_GetLipsyncLiveInfo, SoundMinorID) == 0x000004, "Member 'LipsyncAppObserverSubsystem_GetLipsyncLiveInfo::SoundMinorID' has a wrong offset!");
static_assert(offsetof(LipsyncAppObserverSubsystem_GetLipsyncLiveInfo, ReturnValue) == 0x000008, "Member 'LipsyncAppObserverSubsystem_GetLipsyncLiveInfo::ReturnValue' has a wrong offset!");

// Function xrd777.LipsyncAppObserverSubsystem.IsSpeakingCharacter
// 0x000C (0x000C - 0x0000)
struct LipsyncAppObserverSubsystem_IsSpeakingCharacter final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LipsyncAppObserverSubsystem_IsSpeakingCharacter) == 0x000004, "Wrong alignment on LipsyncAppObserverSubsystem_IsSpeakingCharacter");
static_assert(sizeof(LipsyncAppObserverSubsystem_IsSpeakingCharacter) == 0x00000C, "Wrong size on LipsyncAppObserverSubsystem_IsSpeakingCharacter");
static_assert(offsetof(LipsyncAppObserverSubsystem_IsSpeakingCharacter, CharcterCategoryType) == 0x000000, "Member 'LipsyncAppObserverSubsystem_IsSpeakingCharacter::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(LipsyncAppObserverSubsystem_IsSpeakingCharacter, CharaIndexID) == 0x000004, "Member 'LipsyncAppObserverSubsystem_IsSpeakingCharacter::CharaIndexID' has a wrong offset!");
static_assert(offsetof(LipsyncAppObserverSubsystem_IsSpeakingCharacter, ReturnValue) == 0x000008, "Member 'LipsyncAppObserverSubsystem_IsSpeakingCharacter::ReturnValue' has a wrong offset!");

// Function xrd777.LipsyncAppObserverSubsystem.StartSpeakCharacter
// 0x0014 (0x0014 - 0x0000)
struct LipsyncAppObserverSubsystem_StartSpeakCharacter final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundMajorID;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundMinorID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverride;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LipsyncAppObserverSubsystem_StartSpeakCharacter) == 0x000004, "Wrong alignment on LipsyncAppObserverSubsystem_StartSpeakCharacter");
static_assert(sizeof(LipsyncAppObserverSubsystem_StartSpeakCharacter) == 0x000014, "Wrong size on LipsyncAppObserverSubsystem_StartSpeakCharacter");
static_assert(offsetof(LipsyncAppObserverSubsystem_StartSpeakCharacter, CharcterCategoryType) == 0x000000, "Member 'LipsyncAppObserverSubsystem_StartSpeakCharacter::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(LipsyncAppObserverSubsystem_StartSpeakCharacter, CharaIndexID) == 0x000004, "Member 'LipsyncAppObserverSubsystem_StartSpeakCharacter::CharaIndexID' has a wrong offset!");
static_assert(offsetof(LipsyncAppObserverSubsystem_StartSpeakCharacter, SoundMajorID) == 0x000008, "Member 'LipsyncAppObserverSubsystem_StartSpeakCharacter::SoundMajorID' has a wrong offset!");
static_assert(offsetof(LipsyncAppObserverSubsystem_StartSpeakCharacter, SoundMinorID) == 0x00000C, "Member 'LipsyncAppObserverSubsystem_StartSpeakCharacter::SoundMinorID' has a wrong offset!");
static_assert(offsetof(LipsyncAppObserverSubsystem_StartSpeakCharacter, bOverride) == 0x000010, "Member 'LipsyncAppObserverSubsystem_StartSpeakCharacter::bOverride' has a wrong offset!");

// Function xrd777.MailActor.OnFinishedScr
// 0x0004 (0x0004 - 0x0000)
struct MailActor_OnFinishedScr final
{
public:
	int32                                         ExitType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailActor_OnFinishedScr) == 0x000004, "Wrong alignment on MailActor_OnFinishedScr");
static_assert(sizeof(MailActor_OnFinishedScr) == 0x000004, "Wrong size on MailActor_OnFinishedScr");
static_assert(offsetof(MailActor_OnFinishedScr, ExitType) == 0x000000, "Member 'MailActor_OnFinishedScr::ExitType' has a wrong offset!");

// Function xrd777.MailDraw.ConvFrameToTime
// 0x0008 (0x0008 - 0x0000)
struct MailDraw_ConvFrameToTime final
{
public:
	int32                                         InFrame;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_ConvFrameToTime) == 0x000004, "Wrong alignment on MailDraw_ConvFrameToTime");
static_assert(sizeof(MailDraw_ConvFrameToTime) == 0x000008, "Wrong size on MailDraw_ConvFrameToTime");
static_assert(offsetof(MailDraw_ConvFrameToTime, InFrame) == 0x000000, "Member 'MailDraw_ConvFrameToTime::InFrame' has a wrong offset!");
static_assert(offsetof(MailDraw_ConvFrameToTime, ReturnValue) == 0x000004, "Member 'MailDraw_ConvFrameToTime::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.DrawListMailSenderText
// 0x0014 (0x0014 - 0x0000)
struct MailDraw_DrawListMailSenderText final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPos;                                             // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScale;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_DrawListMailSenderText) == 0x000004, "Wrong alignment on MailDraw_DrawListMailSenderText");
static_assert(sizeof(MailDraw_DrawListMailSenderText) == 0x000014, "Wrong size on MailDraw_DrawListMailSenderText");
static_assert(offsetof(MailDraw_DrawListMailSenderText, InIndex) == 0x000000, "Member 'MailDraw_DrawListMailSenderText::InIndex' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawListMailSenderText, InPos) == 0x000004, "Member 'MailDraw_DrawListMailSenderText::InPos' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawListMailSenderText, InColor) == 0x00000C, "Member 'MailDraw_DrawListMailSenderText::InColor' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawListMailSenderText, InScale) == 0x000010, "Member 'MailDraw_DrawListMailSenderText::InScale' has a wrong offset!");

// Function xrd777.MailDraw.DrawListMailTitleText
// 0x0014 (0x0014 - 0x0000)
struct MailDraw_DrawListMailTitleText final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPos;                                             // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScale;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_DrawListMailTitleText) == 0x000004, "Wrong alignment on MailDraw_DrawListMailTitleText");
static_assert(sizeof(MailDraw_DrawListMailTitleText) == 0x000014, "Wrong size on MailDraw_DrawListMailTitleText");
static_assert(offsetof(MailDraw_DrawListMailTitleText, InIndex) == 0x000000, "Member 'MailDraw_DrawListMailTitleText::InIndex' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawListMailTitleText, InPos) == 0x000004, "Member 'MailDraw_DrawListMailTitleText::InPos' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawListMailTitleText, InColor) == 0x00000C, "Member 'MailDraw_DrawListMailTitleText::InColor' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawListMailTitleText, InScale) == 0x000010, "Member 'MailDraw_DrawListMailTitleText::InScale' has a wrong offset!");

// Function xrd777.MailDraw.DrawMailMainText
// 0x0010 (0x0010 - 0x0000)
struct MailDraw_DrawMailMainText final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScale;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_DrawMailMainText) == 0x000004, "Wrong alignment on MailDraw_DrawMailMainText");
static_assert(sizeof(MailDraw_DrawMailMainText) == 0x000010, "Wrong size on MailDraw_DrawMailMainText");
static_assert(offsetof(MailDraw_DrawMailMainText, InPos) == 0x000000, "Member 'MailDraw_DrawMailMainText::InPos' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawMailMainText, InColor) == 0x000008, "Member 'MailDraw_DrawMailMainText::InColor' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawMailMainText, InScale) == 0x00000C, "Member 'MailDraw_DrawMailMainText::InScale' has a wrong offset!");

// Function xrd777.MailDraw.DrawMailSenderText
// 0x0010 (0x0010 - 0x0000)
struct MailDraw_DrawMailSenderText final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScale;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_DrawMailSenderText) == 0x000004, "Wrong alignment on MailDraw_DrawMailSenderText");
static_assert(sizeof(MailDraw_DrawMailSenderText) == 0x000010, "Wrong size on MailDraw_DrawMailSenderText");
static_assert(offsetof(MailDraw_DrawMailSenderText, InPos) == 0x000000, "Member 'MailDraw_DrawMailSenderText::InPos' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawMailSenderText, InColor) == 0x000008, "Member 'MailDraw_DrawMailSenderText::InColor' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawMailSenderText, InScale) == 0x00000C, "Member 'MailDraw_DrawMailSenderText::InScale' has a wrong offset!");

// Function xrd777.MailDraw.DrawMailTitleText
// 0x0010 (0x0010 - 0x0000)
struct MailDraw_DrawMailTitleText final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InScale;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_DrawMailTitleText) == 0x000004, "Wrong alignment on MailDraw_DrawMailTitleText");
static_assert(sizeof(MailDraw_DrawMailTitleText) == 0x000010, "Wrong size on MailDraw_DrawMailTitleText");
static_assert(offsetof(MailDraw_DrawMailTitleText, InPos) == 0x000000, "Member 'MailDraw_DrawMailTitleText::InPos' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawMailTitleText, InColor) == 0x000008, "Member 'MailDraw_DrawMailTitleText::InColor' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawMailTitleText, InScale) == 0x00000C, "Member 'MailDraw_DrawMailTitleText::InScale' has a wrong offset!");

// Function xrd777.MailDraw.DrawSprForUIResources
// 0x0020 (0x0020 - 0x0000)
struct MailDraw_DrawSprForUIResources final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprID;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Scale;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUICommonResource                             ResourceType;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MailDraw_DrawSprForUIResources) == 0x000004, "Wrong alignment on MailDraw_DrawSprForUIResources");
static_assert(sizeof(MailDraw_DrawSprForUIResources) == 0x000020, "Wrong size on MailDraw_DrawSprForUIResources");
static_assert(offsetof(MailDraw_DrawSprForUIResources, InPos) == 0x000000, "Member 'MailDraw_DrawSprForUIResources::InPos' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawSprForUIResources, InColor) == 0x000008, "Member 'MailDraw_DrawSprForUIResources::InColor' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawSprForUIResources, SprID) == 0x00000C, "Member 'MailDraw_DrawSprForUIResources::SprID' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawSprForUIResources, Scale) == 0x000010, "Member 'MailDraw_DrawSprForUIResources::Scale' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawSprForUIResources, Angle) == 0x000018, "Member 'MailDraw_DrawSprForUIResources::Angle' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawSprForUIResources, ResourceType) == 0x00001C, "Member 'MailDraw_DrawSprForUIResources::ResourceType' has a wrong offset!");
static_assert(offsetof(MailDraw_DrawSprForUIResources, DrawPoint) == 0x00001D, "Member 'MailDraw_DrawSprForUIResources::DrawPoint' has a wrong offset!");

// Function xrd777.MailDraw.GetAdjustedLayoutPosition
// 0x0014 (0x0014 - 0x0000)
struct MailDraw_GetAdjustedLayoutPosition final
{
public:
	EMailLayout                                   InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InDefaultPos;                                      // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_GetAdjustedLayoutPosition) == 0x000004, "Wrong alignment on MailDraw_GetAdjustedLayoutPosition");
static_assert(sizeof(MailDraw_GetAdjustedLayoutPosition) == 0x000014, "Wrong size on MailDraw_GetAdjustedLayoutPosition");
static_assert(offsetof(MailDraw_GetAdjustedLayoutPosition, InLayoutId) == 0x000000, "Member 'MailDraw_GetAdjustedLayoutPosition::InLayoutId' has a wrong offset!");
static_assert(offsetof(MailDraw_GetAdjustedLayoutPosition, InDefaultPos) == 0x000004, "Member 'MailDraw_GetAdjustedLayoutPosition::InDefaultPos' has a wrong offset!");
static_assert(offsetof(MailDraw_GetAdjustedLayoutPosition, ReturnValue) == 0x00000C, "Member 'MailDraw_GetAdjustedLayoutPosition::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.GetListIsNew
// 0x0008 (0x0008 - 0x0000)
struct MailDraw_GetListIsNew final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MailDraw_GetListIsNew) == 0x000004, "Wrong alignment on MailDraw_GetListIsNew");
static_assert(sizeof(MailDraw_GetListIsNew) == 0x000008, "Wrong size on MailDraw_GetListIsNew");
static_assert(offsetof(MailDraw_GetListIsNew, InIndex) == 0x000000, "Member 'MailDraw_GetListIsNew::InIndex' has a wrong offset!");
static_assert(offsetof(MailDraw_GetListIsNew, ReturnValue) == 0x000004, "Member 'MailDraw_GetListIsNew::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.GetListIsRead
// 0x0008 (0x0008 - 0x0000)
struct MailDraw_GetListIsRead final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MailDraw_GetListIsRead) == 0x000004, "Wrong alignment on MailDraw_GetListIsRead");
static_assert(sizeof(MailDraw_GetListIsRead) == 0x000008, "Wrong size on MailDraw_GetListIsRead");
static_assert(offsetof(MailDraw_GetListIsRead, InIndex) == 0x000000, "Member 'MailDraw_GetListIsRead::InIndex' has a wrong offset!");
static_assert(offsetof(MailDraw_GetListIsRead, ReturnValue) == 0x000004, "Member 'MailDraw_GetListIsRead::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.GetListSenderID
// 0x0008 (0x0008 - 0x0000)
struct MailDraw_GetListSenderID final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_GetListSenderID) == 0x000004, "Wrong alignment on MailDraw_GetListSenderID");
static_assert(sizeof(MailDraw_GetListSenderID) == 0x000008, "Wrong size on MailDraw_GetListSenderID");
static_assert(offsetof(MailDraw_GetListSenderID, InIndex) == 0x000000, "Member 'MailDraw_GetListSenderID::InIndex' has a wrong offset!");
static_assert(offsetof(MailDraw_GetListSenderID, ReturnValue) == 0x000004, "Member 'MailDraw_GetListSenderID::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.GetMailSenderID
// 0x0004 (0x0004 - 0x0000)
struct MailDraw_GetMailSenderID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_GetMailSenderID) == 0x000004, "Wrong alignment on MailDraw_GetMailSenderID");
static_assert(sizeof(MailDraw_GetMailSenderID) == 0x000004, "Wrong size on MailDraw_GetMailSenderID");
static_assert(offsetof(MailDraw_GetMailSenderID, ReturnValue) == 0x000000, "Member 'MailDraw_GetMailSenderID::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.InitDraw_IN
// 0x0001 (0x0001 - 0x0000)
struct MailDraw_InitDraw_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_InitDraw_IN) == 0x000001, "Wrong alignment on MailDraw_InitDraw_IN");
static_assert(sizeof(MailDraw_InitDraw_IN) == 0x000001, "Wrong size on MailDraw_InitDraw_IN");
static_assert(offsetof(MailDraw_InitDraw_IN, ReturnValue) == 0x000000, "Member 'MailDraw_InitDraw_IN::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.InitDraw_List
// 0x0001 (0x0001 - 0x0000)
struct MailDraw_InitDraw_List final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_InitDraw_List) == 0x000001, "Wrong alignment on MailDraw_InitDraw_List");
static_assert(sizeof(MailDraw_InitDraw_List) == 0x000001, "Wrong size on MailDraw_InitDraw_List");
static_assert(offsetof(MailDraw_InitDraw_List, ReturnValue) == 0x000000, "Member 'MailDraw_InitDraw_List::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.InitDraw_Mail
// 0x0001 (0x0001 - 0x0000)
struct MailDraw_InitDraw_Mail final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_InitDraw_Mail) == 0x000001, "Wrong alignment on MailDraw_InitDraw_Mail");
static_assert(sizeof(MailDraw_InitDraw_Mail) == 0x000001, "Wrong size on MailDraw_InitDraw_Mail");
static_assert(offsetof(MailDraw_InitDraw_Mail, ReturnValue) == 0x000000, "Member 'MailDraw_InitDraw_Mail::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.InitDraw_Out
// 0x0001 (0x0001 - 0x0000)
struct MailDraw_InitDraw_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_InitDraw_Out) == 0x000001, "Wrong alignment on MailDraw_InitDraw_Out");
static_assert(sizeof(MailDraw_InitDraw_Out) == 0x000001, "Wrong size on MailDraw_InitDraw_Out");
static_assert(offsetof(MailDraw_InitDraw_Out, ReturnValue) == 0x000000, "Member 'MailDraw_InitDraw_Out::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.IsIsDeterminedByCross
// 0x0001 (0x0001 - 0x0000)
struct MailDraw_IsIsDeterminedByCross final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_IsIsDeterminedByCross) == 0x000001, "Wrong alignment on MailDraw_IsIsDeterminedByCross");
static_assert(sizeof(MailDraw_IsIsDeterminedByCross) == 0x000001, "Wrong size on MailDraw_IsIsDeterminedByCross");
static_assert(offsetof(MailDraw_IsIsDeterminedByCross, ReturnValue) == 0x000000, "Member 'MailDraw_IsIsDeterminedByCross::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.SetMailListIsNew
// 0x0008 (0x0008 - 0x0000)
struct MailDraw_SetMailListIsNew final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InIsNew;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MailDraw_SetMailListIsNew) == 0x000004, "Wrong alignment on MailDraw_SetMailListIsNew");
static_assert(sizeof(MailDraw_SetMailListIsNew) == 0x000008, "Wrong size on MailDraw_SetMailListIsNew");
static_assert(offsetof(MailDraw_SetMailListIsNew, InIndex) == 0x000000, "Member 'MailDraw_SetMailListIsNew::InIndex' has a wrong offset!");
static_assert(offsetof(MailDraw_SetMailListIsNew, InIsNew) == 0x000004, "Member 'MailDraw_SetMailListIsNew::InIsNew' has a wrong offset!");

// Function xrd777.MailDraw.SetScrollBarBaseCollision
// 0x0024 (0x0024 - 0x0000)
struct MailDraw_SetScrollBarBaseCollision final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollRange;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScrollPos;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawListNum;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListNum;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MailDraw_SetScrollBarBaseCollision) == 0x000004, "Wrong alignment on MailDraw_SetScrollBarBaseCollision");
static_assert(sizeof(MailDraw_SetScrollBarBaseCollision) == 0x000024, "Wrong size on MailDraw_SetScrollBarBaseCollision");
static_assert(offsetof(MailDraw_SetScrollBarBaseCollision, X) == 0x000000, "Member 'MailDraw_SetScrollBarBaseCollision::X' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarBaseCollision, Y) == 0x000004, "Member 'MailDraw_SetScrollBarBaseCollision::Y' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarBaseCollision, Width) == 0x000008, "Member 'MailDraw_SetScrollBarBaseCollision::Width' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarBaseCollision, Height) == 0x00000C, "Member 'MailDraw_SetScrollBarBaseCollision::Height' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarBaseCollision, ScrollRange) == 0x000010, "Member 'MailDraw_SetScrollBarBaseCollision::ScrollRange' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarBaseCollision, ScrollPos) == 0x000014, "Member 'MailDraw_SetScrollBarBaseCollision::ScrollPos' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarBaseCollision, DrawListNum) == 0x000018, "Member 'MailDraw_SetScrollBarBaseCollision::DrawListNum' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarBaseCollision, MaxListNum) == 0x00001C, "Member 'MailDraw_SetScrollBarBaseCollision::MaxListNum' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarBaseCollision, DrawPoint) == 0x000020, "Member 'MailDraw_SetScrollBarBaseCollision::DrawPoint' has a wrong offset!");

// Function xrd777.MailDraw.SetScrollBarSliderCollision
// 0x0024 (0x0024 - 0x0000)
struct MailDraw_SetScrollBarSliderCollision final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollRange;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScrollPos;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrawListNum;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxListNum;                                        // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MailDraw_SetScrollBarSliderCollision) == 0x000004, "Wrong alignment on MailDraw_SetScrollBarSliderCollision");
static_assert(sizeof(MailDraw_SetScrollBarSliderCollision) == 0x000024, "Wrong size on MailDraw_SetScrollBarSliderCollision");
static_assert(offsetof(MailDraw_SetScrollBarSliderCollision, X) == 0x000000, "Member 'MailDraw_SetScrollBarSliderCollision::X' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarSliderCollision, Y) == 0x000004, "Member 'MailDraw_SetScrollBarSliderCollision::Y' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarSliderCollision, Width) == 0x000008, "Member 'MailDraw_SetScrollBarSliderCollision::Width' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarSliderCollision, Height) == 0x00000C, "Member 'MailDraw_SetScrollBarSliderCollision::Height' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarSliderCollision, ScrollRange) == 0x000010, "Member 'MailDraw_SetScrollBarSliderCollision::ScrollRange' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarSliderCollision, ScrollPos) == 0x000014, "Member 'MailDraw_SetScrollBarSliderCollision::ScrollPos' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarSliderCollision, DrawListNum) == 0x000018, "Member 'MailDraw_SetScrollBarSliderCollision::DrawListNum' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarSliderCollision, MaxListNum) == 0x00001C, "Member 'MailDraw_SetScrollBarSliderCollision::MaxListNum' has a wrong offset!");
static_assert(offsetof(MailDraw_SetScrollBarSliderCollision, DrawPoint) == 0x000020, "Member 'MailDraw_SetScrollBarSliderCollision::DrawPoint' has a wrong offset!");

// Function xrd777.MailDraw.SetTouchCollision
// 0x0018 (0x0018 - 0x0000)
struct MailDraw_SetTouchCollision final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUI_DRAW_POINT                                DrawPoint;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnList;                                            // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MailDraw_SetTouchCollision) == 0x000004, "Wrong alignment on MailDraw_SetTouchCollision");
static_assert(sizeof(MailDraw_SetTouchCollision) == 0x000018, "Wrong size on MailDraw_SetTouchCollision");
static_assert(offsetof(MailDraw_SetTouchCollision, Index_0) == 0x000000, "Member 'MailDraw_SetTouchCollision::Index_0' has a wrong offset!");
static_assert(offsetof(MailDraw_SetTouchCollision, X) == 0x000004, "Member 'MailDraw_SetTouchCollision::X' has a wrong offset!");
static_assert(offsetof(MailDraw_SetTouchCollision, Y) == 0x000008, "Member 'MailDraw_SetTouchCollision::Y' has a wrong offset!");
static_assert(offsetof(MailDraw_SetTouchCollision, Width) == 0x00000C, "Member 'MailDraw_SetTouchCollision::Width' has a wrong offset!");
static_assert(offsetof(MailDraw_SetTouchCollision, Height) == 0x000010, "Member 'MailDraw_SetTouchCollision::Height' has a wrong offset!");
static_assert(offsetof(MailDraw_SetTouchCollision, DrawPoint) == 0x000014, "Member 'MailDraw_SetTouchCollision::DrawPoint' has a wrong offset!");
static_assert(offsetof(MailDraw_SetTouchCollision, OnList) == 0x000015, "Member 'MailDraw_SetTouchCollision::OnList' has a wrong offset!");

// Function xrd777.MailDraw.StateDraw_BG
// 0x0001 (0x0001 - 0x0000)
struct MailDraw_StateDraw_BG final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_StateDraw_BG) == 0x000001, "Wrong alignment on MailDraw_StateDraw_BG");
static_assert(sizeof(MailDraw_StateDraw_BG) == 0x000001, "Wrong size on MailDraw_StateDraw_BG");
static_assert(offsetof(MailDraw_StateDraw_BG, ReturnValue) == 0x000000, "Member 'MailDraw_StateDraw_BG::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.StateDraw_Frame
// 0x0001 (0x0001 - 0x0000)
struct MailDraw_StateDraw_Frame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_StateDraw_Frame) == 0x000001, "Wrong alignment on MailDraw_StateDraw_Frame");
static_assert(sizeof(MailDraw_StateDraw_Frame) == 0x000001, "Wrong size on MailDraw_StateDraw_Frame");
static_assert(offsetof(MailDraw_StateDraw_Frame, ReturnValue) == 0x000000, "Member 'MailDraw_StateDraw_Frame::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.StateDraw_IN
// 0x0001 (0x0001 - 0x0000)
struct MailDraw_StateDraw_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_StateDraw_IN) == 0x000001, "Wrong alignment on MailDraw_StateDraw_IN");
static_assert(sizeof(MailDraw_StateDraw_IN) == 0x000001, "Wrong size on MailDraw_StateDraw_IN");
static_assert(offsetof(MailDraw_StateDraw_IN, ReturnValue) == 0x000000, "Member 'MailDraw_StateDraw_IN::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.StateDraw_List
// 0x0001 (0x0001 - 0x0000)
struct MailDraw_StateDraw_List final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_StateDraw_List) == 0x000001, "Wrong alignment on MailDraw_StateDraw_List");
static_assert(sizeof(MailDraw_StateDraw_List) == 0x000001, "Wrong size on MailDraw_StateDraw_List");
static_assert(offsetof(MailDraw_StateDraw_List, ReturnValue) == 0x000000, "Member 'MailDraw_StateDraw_List::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.StateDraw_Mail
// 0x0001 (0x0001 - 0x0000)
struct MailDraw_StateDraw_Mail final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_StateDraw_Mail) == 0x000001, "Wrong alignment on MailDraw_StateDraw_Mail");
static_assert(sizeof(MailDraw_StateDraw_Mail) == 0x000001, "Wrong size on MailDraw_StateDraw_Mail");
static_assert(offsetof(MailDraw_StateDraw_Mail, ReturnValue) == 0x000000, "Member 'MailDraw_StateDraw_Mail::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.StateDraw_Out
// 0x0001 (0x0001 - 0x0000)
struct MailDraw_StateDraw_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MailDraw_StateDraw_Out) == 0x000001, "Wrong alignment on MailDraw_StateDraw_Out");
static_assert(sizeof(MailDraw_StateDraw_Out) == 0x000001, "Wrong size on MailDraw_StateDraw_Out");
static_assert(offsetof(MailDraw_StateDraw_Out, ReturnValue) == 0x000000, "Member 'MailDraw_StateDraw_Out::ReturnValue' has a wrong offset!");

// Function xrd777.MailDraw.TimeWithinRangeFrame
// 0x0010 (0x0010 - 0x0000)
struct MailDraw_TimeWithinRangeFrame final
{
public:
	float                                         NowTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MailDraw_TimeWithinRangeFrame) == 0x000004, "Wrong alignment on MailDraw_TimeWithinRangeFrame");
static_assert(sizeof(MailDraw_TimeWithinRangeFrame) == 0x000010, "Wrong size on MailDraw_TimeWithinRangeFrame");
static_assert(offsetof(MailDraw_TimeWithinRangeFrame, NowTime) == 0x000000, "Member 'MailDraw_TimeWithinRangeFrame::NowTime' has a wrong offset!");
static_assert(offsetof(MailDraw_TimeWithinRangeFrame, StartFrame) == 0x000004, "Member 'MailDraw_TimeWithinRangeFrame::StartFrame' has a wrong offset!");
static_assert(offsetof(MailDraw_TimeWithinRangeFrame, EndFrame) == 0x000008, "Member 'MailDraw_TimeWithinRangeFrame::EndFrame' has a wrong offset!");
static_assert(offsetof(MailDraw_TimeWithinRangeFrame, ReturnValue) == 0x00000C, "Member 'MailDraw_TimeWithinRangeFrame::ReturnValue' has a wrong offset!");

// Function xrd777.TestTriggerBox.OnComponentOverlapBegin
// 0x00A8 (0x00A8 - 0x0000)
struct TestTriggerBox_OnComponentOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestTriggerBox_OnComponentOverlapBegin) == 0x000008, "Wrong alignment on TestTriggerBox_OnComponentOverlapBegin");
static_assert(sizeof(TestTriggerBox_OnComponentOverlapBegin) == 0x0000A8, "Wrong size on TestTriggerBox_OnComponentOverlapBegin");
static_assert(offsetof(TestTriggerBox_OnComponentOverlapBegin, OverlappedComponent) == 0x000000, "Member 'TestTriggerBox_OnComponentOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TestTriggerBox_OnComponentOverlapBegin, OtherActor) == 0x000008, "Member 'TestTriggerBox_OnComponentOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(TestTriggerBox_OnComponentOverlapBegin, OtherComp) == 0x000010, "Member 'TestTriggerBox_OnComponentOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(TestTriggerBox_OnComponentOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'TestTriggerBox_OnComponentOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TestTriggerBox_OnComponentOverlapBegin, bFromSweep) == 0x00001C, "Member 'TestTriggerBox_OnComponentOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(TestTriggerBox_OnComponentOverlapBegin, SweepResult) == 0x000020, "Member 'TestTriggerBox_OnComponentOverlapBegin::SweepResult' has a wrong offset!");

// Function xrd777.TestTriggerBox.OnComponentOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct TestTriggerBox_OnComponentOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TestTriggerBox_OnComponentOverlapEnd) == 0x000008, "Wrong alignment on TestTriggerBox_OnComponentOverlapEnd");
static_assert(sizeof(TestTriggerBox_OnComponentOverlapEnd) == 0x000020, "Wrong size on TestTriggerBox_OnComponentOverlapEnd");
static_assert(offsetof(TestTriggerBox_OnComponentOverlapEnd, OverlappedComponent) == 0x000000, "Member 'TestTriggerBox_OnComponentOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TestTriggerBox_OnComponentOverlapEnd, OtherActor) == 0x000008, "Member 'TestTriggerBox_OnComponentOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(TestTriggerBox_OnComponentOverlapEnd, OtherComp) == 0x000010, "Member 'TestTriggerBox_OnComponentOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(TestTriggerBox_OnComponentOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'TestTriggerBox_OnComponentOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function xrd777.TestAnimInst.AnimChange
// 0x0008 (0x0008 - 0x0000)
struct TestAnimInst_AnimChange final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAnimInst_AnimChange) == 0x000004, "Wrong alignment on TestAnimInst_AnimChange");
static_assert(sizeof(TestAnimInst_AnimChange) == 0x000008, "Wrong size on TestAnimInst_AnimChange");
static_assert(offsetof(TestAnimInst_AnimChange, Type) == 0x000000, "Member 'TestAnimInst_AnimChange::Type' has a wrong offset!");
static_assert(offsetof(TestAnimInst_AnimChange, Param) == 0x000004, "Member 'TestAnimInst_AnimChange::Param' has a wrong offset!");

// Function xrd777.TestAnimInst.TestFunction
// 0x0008 (0x0008 - 0x0000)
struct TestAnimInst_TestFunction final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Param;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestAnimInst_TestFunction) == 0x000004, "Wrong alignment on TestAnimInst_TestFunction");
static_assert(sizeof(TestAnimInst_TestFunction) == 0x000008, "Wrong size on TestAnimInst_TestFunction");
static_assert(offsetof(TestAnimInst_TestFunction, Type) == 0x000000, "Member 'TestAnimInst_TestFunction::Type' has a wrong offset!");
static_assert(offsetof(TestAnimInst_TestFunction, Param) == 0x000004, "Member 'TestAnimInst_TestFunction::Param' has a wrong offset!");

// Function xrd777.CollisionActor.OnBeginOverlapSphere
// 0x00A8 (0x00A8 - 0x0000)
struct CollisionActor_OnBeginOverlapSphere final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollisionActor_OnBeginOverlapSphere) == 0x000008, "Wrong alignment on CollisionActor_OnBeginOverlapSphere");
static_assert(sizeof(CollisionActor_OnBeginOverlapSphere) == 0x0000A8, "Wrong size on CollisionActor_OnBeginOverlapSphere");
static_assert(offsetof(CollisionActor_OnBeginOverlapSphere, OverlappedComp) == 0x000000, "Member 'CollisionActor_OnBeginOverlapSphere::OverlappedComp' has a wrong offset!");
static_assert(offsetof(CollisionActor_OnBeginOverlapSphere, OtherActor) == 0x000008, "Member 'CollisionActor_OnBeginOverlapSphere::OtherActor' has a wrong offset!");
static_assert(offsetof(CollisionActor_OnBeginOverlapSphere, OtherComp) == 0x000010, "Member 'CollisionActor_OnBeginOverlapSphere::OtherComp' has a wrong offset!");
static_assert(offsetof(CollisionActor_OnBeginOverlapSphere, OtherBodyIndex) == 0x000018, "Member 'CollisionActor_OnBeginOverlapSphere::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(CollisionActor_OnBeginOverlapSphere, bFromSweep) == 0x00001C, "Member 'CollisionActor_OnBeginOverlapSphere::bFromSweep' has a wrong offset!");
static_assert(offsetof(CollisionActor_OnBeginOverlapSphere, SweepResult) == 0x000020, "Member 'CollisionActor_OnBeginOverlapSphere::SweepResult' has a wrong offset!");

// Function xrd777.CollisionActor.OnEndOverlapSphere
// 0x0020 (0x0020 - 0x0000)
struct CollisionActor_OnEndOverlapSphere final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CollisionActor_OnEndOverlapSphere) == 0x000008, "Wrong alignment on CollisionActor_OnEndOverlapSphere");
static_assert(sizeof(CollisionActor_OnEndOverlapSphere) == 0x000020, "Wrong size on CollisionActor_OnEndOverlapSphere");
static_assert(offsetof(CollisionActor_OnEndOverlapSphere, OverlappedComp) == 0x000000, "Member 'CollisionActor_OnEndOverlapSphere::OverlappedComp' has a wrong offset!");
static_assert(offsetof(CollisionActor_OnEndOverlapSphere, OtherActor) == 0x000008, "Member 'CollisionActor_OnEndOverlapSphere::OtherActor' has a wrong offset!");
static_assert(offsetof(CollisionActor_OnEndOverlapSphere, OtherComp) == 0x000010, "Member 'CollisionActor_OnEndOverlapSphere::OtherComp' has a wrong offset!");
static_assert(offsetof(CollisionActor_OnEndOverlapSphere, OtherBodyIndex) == 0x000018, "Member 'CollisionActor_OnEndOverlapSphere::OtherBodyIndex' has a wrong offset!");

// Function xrd777.MovieCuePointFunction.MovieBindCuePointFunction
// 0x0008 (0x0008 - 0x0000)
struct MovieCuePointFunction_MovieBindCuePointFunction final
{
public:
	class UManaComponent*                         ManaComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieCuePointFunction_MovieBindCuePointFunction) == 0x000008, "Wrong alignment on MovieCuePointFunction_MovieBindCuePointFunction");
static_assert(sizeof(MovieCuePointFunction_MovieBindCuePointFunction) == 0x000008, "Wrong size on MovieCuePointFunction_MovieBindCuePointFunction");
static_assert(offsetof(MovieCuePointFunction_MovieBindCuePointFunction, ManaComponent) == 0x000000, "Member 'MovieCuePointFunction_MovieBindCuePointFunction::ManaComponent' has a wrong offset!");

// Function xrd777.MovieCuePointFunction.MovieCheckTrackId
// 0x0010 (0x0010 - 0x0000)
struct MovieCuePointFunction_MovieCheckTrackId final
{
public:
	class UManaComponent*                         ManaComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TrackId;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieCuePointFunction_MovieCheckTrackId) == 0x000008, "Wrong alignment on MovieCuePointFunction_MovieCheckTrackId");
static_assert(sizeof(MovieCuePointFunction_MovieCheckTrackId) == 0x000010, "Wrong size on MovieCuePointFunction_MovieCheckTrackId");
static_assert(offsetof(MovieCuePointFunction_MovieCheckTrackId, ManaComponent) == 0x000000, "Member 'MovieCuePointFunction_MovieCheckTrackId::ManaComponent' has a wrong offset!");
static_assert(offsetof(MovieCuePointFunction_MovieCheckTrackId, TrackId) == 0x000008, "Member 'MovieCuePointFunction_MovieCheckTrackId::TrackId' has a wrong offset!");
static_assert(offsetof(MovieCuePointFunction_MovieCheckTrackId, ReturnValue) == 0x00000C, "Member 'MovieCuePointFunction_MovieCheckTrackId::ReturnValue' has a wrong offset!");

// Function xrd777.MovieCuePointFunction.MovieGetLanguageTrack
// 0x0004 (0x0004 - 0x0000)
struct MovieCuePointFunction_MovieGetLanguageTrack final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieCuePointFunction_MovieGetLanguageTrack) == 0x000004, "Wrong alignment on MovieCuePointFunction_MovieGetLanguageTrack");
static_assert(sizeof(MovieCuePointFunction_MovieGetLanguageTrack) == 0x000004, "Wrong size on MovieCuePointFunction_MovieGetLanguageTrack");
static_assert(offsetof(MovieCuePointFunction_MovieGetLanguageTrack, ReturnValue) == 0x000000, "Member 'MovieCuePointFunction_MovieGetLanguageTrack::ReturnValue' has a wrong offset!");

// Function xrd777.MovieCuePointFunction.MovieIsLoadedAssetForCuePoint
// 0x0001 (0x0001 - 0x0000)
struct MovieCuePointFunction_MovieIsLoadedAssetForCuePoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieCuePointFunction_MovieIsLoadedAssetForCuePoint) == 0x000001, "Wrong alignment on MovieCuePointFunction_MovieIsLoadedAssetForCuePoint");
static_assert(sizeof(MovieCuePointFunction_MovieIsLoadedAssetForCuePoint) == 0x000001, "Wrong size on MovieCuePointFunction_MovieIsLoadedAssetForCuePoint");
static_assert(offsetof(MovieCuePointFunction_MovieIsLoadedAssetForCuePoint, ReturnValue) == 0x000000, "Member 'MovieCuePointFunction_MovieIsLoadedAssetForCuePoint::ReturnValue' has a wrong offset!");

// Function xrd777.MovieCuePointFunction.MovieLoadAssetForCuePoint
// 0x0008 (0x0008 - 0x0000)
struct MovieCuePointFunction_MovieLoadAssetForCuePoint final
{
public:
	class UManaComponent*                         ManaComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieCuePointFunction_MovieLoadAssetForCuePoint) == 0x000008, "Wrong alignment on MovieCuePointFunction_MovieLoadAssetForCuePoint");
static_assert(sizeof(MovieCuePointFunction_MovieLoadAssetForCuePoint) == 0x000008, "Wrong size on MovieCuePointFunction_MovieLoadAssetForCuePoint");
static_assert(offsetof(MovieCuePointFunction_MovieLoadAssetForCuePoint, ManaComponent) == 0x000000, "Member 'MovieCuePointFunction_MovieLoadAssetForCuePoint::ManaComponent' has a wrong offset!");

// Function xrd777.MovieCuePointFunction.MovieSetMetaDataWorkAllocator
// 0x0008 (0x0008 - 0x0000)
struct MovieCuePointFunction_MovieSetMetaDataWorkAllocator final
{
public:
	class UManaComponent*                         ManaComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MovieCuePointFunction_MovieSetMetaDataWorkAllocator) == 0x000008, "Wrong alignment on MovieCuePointFunction_MovieSetMetaDataWorkAllocator");
static_assert(sizeof(MovieCuePointFunction_MovieSetMetaDataWorkAllocator) == 0x000008, "Wrong size on MovieCuePointFunction_MovieSetMetaDataWorkAllocator");
static_assert(offsetof(MovieCuePointFunction_MovieSetMetaDataWorkAllocator, ManaComponent) == 0x000000, "Member 'MovieCuePointFunction_MovieSetMetaDataWorkAllocator::ManaComponent' has a wrong offset!");

// Function xrd777.MoviePanel.SetOT
// 0x0004 (0x0004 - 0x0000)
struct MoviePanel_SetOT final
{
public:
	int32                                         OT;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePanel_SetOT) == 0x000004, "Wrong alignment on MoviePanel_SetOT");
static_assert(sizeof(MoviePanel_SetOT) == 0x000004, "Wrong size on MoviePanel_SetOT");
static_assert(offsetof(MoviePanel_SetOT, OT) == 0x000000, "Member 'MoviePanel_SetOT::OT' has a wrong offset!");

// Function xrd777.MoviePlayActorBase.Close
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActorBase_Close final
{
public:
	bool                                          ForceClose;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorBase_Close) == 0x000001, "Wrong alignment on MoviePlayActorBase_Close");
static_assert(sizeof(MoviePlayActorBase_Close) == 0x000001, "Wrong size on MoviePlayActorBase_Close");
static_assert(offsetof(MoviePlayActorBase_Close, ForceClose) == 0x000000, "Member 'MoviePlayActorBase_Close::ForceClose' has a wrong offset!");

// Function xrd777.MoviePlayActorBase.MoviePlay
// 0x0010 (0x0010 - 0x0000)
struct MoviePlayActorBase_MoviePlay final
{
public:
	class FString                                 OpenedUrl;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorBase_MoviePlay) == 0x000008, "Wrong alignment on MoviePlayActorBase_MoviePlay");
static_assert(sizeof(MoviePlayActorBase_MoviePlay) == 0x000010, "Wrong size on MoviePlayActorBase_MoviePlay");
static_assert(offsetof(MoviePlayActorBase_MoviePlay, OpenedUrl) == 0x000000, "Member 'MoviePlayActorBase_MoviePlay::OpenedUrl' has a wrong offset!");

// Function xrd777.MoviePlayActorBase.RequestMovie
// 0x0004 (0x0004 - 0x0000)
struct MoviePlayActorBase_RequestMovie final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorBase_RequestMovie) == 0x000004, "Wrong alignment on MoviePlayActorBase_RequestMovie");
static_assert(sizeof(MoviePlayActorBase_RequestMovie) == 0x000004, "Wrong size on MoviePlayActorBase_RequestMovie");
static_assert(offsetof(MoviePlayActorBase_RequestMovie, ID) == 0x000000, "Member 'MoviePlayActorBase_RequestMovie::ID' has a wrong offset!");

// Function xrd777.MoviePlayActorBase.SetManaComponent
// 0x0008 (0x0008 - 0x0000)
struct MoviePlayActorBase_SetManaComponent final
{
public:
	class UManaComponent*                         InManaComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorBase_SetManaComponent) == 0x000008, "Wrong alignment on MoviePlayActorBase_SetManaComponent");
static_assert(sizeof(MoviePlayActorBase_SetManaComponent) == 0x000008, "Wrong size on MoviePlayActorBase_SetManaComponent");
static_assert(offsetof(MoviePlayActorBase_SetManaComponent, InManaComponent) == 0x000000, "Member 'MoviePlayActorBase_SetManaComponent::InManaComponent' has a wrong offset!");

// Function xrd777.MoviePlayActor.CheckInstance
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActor_CheckInstance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActor_CheckInstance) == 0x000001, "Wrong alignment on MoviePlayActor_CheckInstance");
static_assert(sizeof(MoviePlayActor_CheckInstance) == 0x000001, "Wrong size on MoviePlayActor_CheckInstance");
static_assert(offsetof(MoviePlayActor_CheckInstance, ReturnValue) == 0x000000, "Member 'MoviePlayActor_CheckInstance::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActor.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct MoviePlayActor_GetInstance final
{
public:
	class AMoviePlayActor*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActor_GetInstance) == 0x000008, "Wrong alignment on MoviePlayActor_GetInstance");
static_assert(sizeof(MoviePlayActor_GetInstance) == 0x000008, "Wrong size on MoviePlayActor_GetInstance");
static_assert(offsetof(MoviePlayActor_GetInstance, ReturnValue) == 0x000000, "Member 'MoviePlayActor_GetInstance::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActor.SyncInstance
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActor_SyncInstance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActor_SyncInstance) == 0x000001, "Wrong alignment on MoviePlayActor_SyncInstance");
static_assert(sizeof(MoviePlayActor_SyncInstance) == 0x000001, "Wrong size on MoviePlayActor_SyncInstance");
static_assert(offsetof(MoviePlayActor_SyncInstance, ReturnValue) == 0x000000, "Member 'MoviePlayActor_SyncInstance::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActor.CanDestroy
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActor_CanDestroy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActor_CanDestroy) == 0x000001, "Wrong alignment on MoviePlayActor_CanDestroy");
static_assert(sizeof(MoviePlayActor_CanDestroy) == 0x000001, "Wrong size on MoviePlayActor_CanDestroy");
static_assert(offsetof(MoviePlayActor_CanDestroy, ReturnValue) == 0x000000, "Member 'MoviePlayActor_CanDestroy::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActor.GetBGMFlg
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActor_GetBGMFlg final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActor_GetBGMFlg) == 0x000001, "Wrong alignment on MoviePlayActor_GetBGMFlg");
static_assert(sizeof(MoviePlayActor_GetBGMFlg) == 0x000001, "Wrong size on MoviePlayActor_GetBGMFlg");
static_assert(offsetof(MoviePlayActor_GetBGMFlg, ReturnValue) == 0x000000, "Member 'MoviePlayActor_GetBGMFlg::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActor.IsBattleWipe
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActor_IsBattleWipe final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActor_IsBattleWipe) == 0x000001, "Wrong alignment on MoviePlayActor_IsBattleWipe");
static_assert(sizeof(MoviePlayActor_IsBattleWipe) == 0x000001, "Wrong size on MoviePlayActor_IsBattleWipe");
static_assert(offsetof(MoviePlayActor_IsBattleWipe, ReturnValue) == 0x000000, "Member 'MoviePlayActor_IsBattleWipe::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActor.IsPause
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActor_IsPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActor_IsPause) == 0x000001, "Wrong alignment on MoviePlayActor_IsPause");
static_assert(sizeof(MoviePlayActor_IsPause) == 0x000001, "Wrong size on MoviePlayActor_IsPause");
static_assert(offsetof(MoviePlayActor_IsPause, ReturnValue) == 0x000000, "Member 'MoviePlayActor_IsPause::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActor.IsReserveDestroy
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActor_IsReserveDestroy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActor_IsReserveDestroy) == 0x000001, "Wrong alignment on MoviePlayActor_IsReserveDestroy");
static_assert(sizeof(MoviePlayActor_IsReserveDestroy) == 0x000001, "Wrong size on MoviePlayActor_IsReserveDestroy");
static_assert(offsetof(MoviePlayActor_IsReserveDestroy, ReturnValue) == 0x000000, "Member 'MoviePlayActor_IsReserveDestroy::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActor.Pause
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActor_Pause final
{
public:
	bool                                          IsPause;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActor_Pause) == 0x000001, "Wrong alignment on MoviePlayActor_Pause");
static_assert(sizeof(MoviePlayActor_Pause) == 0x000001, "Wrong size on MoviePlayActor_Pause");
static_assert(offsetof(MoviePlayActor_Pause, IsPause) == 0x000000, "Member 'MoviePlayActor_Pause::IsPause' has a wrong offset!");

// Function xrd777.MoviePlayActor.VisibleKeyHelp
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActor_VisibleKeyHelp final
{
public:
	bool                                          bIsVisible;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActor_VisibleKeyHelp) == 0x000001, "Wrong alignment on MoviePlayActor_VisibleKeyHelp");
static_assert(sizeof(MoviePlayActor_VisibleKeyHelp) == 0x000001, "Wrong size on MoviePlayActor_VisibleKeyHelp");
static_assert(offsetof(MoviePlayActor_VisibleKeyHelp, bIsVisible) == 0x000000, "Member 'MoviePlayActor_VisibleKeyHelp::bIsVisible' has a wrong offset!");

// Function xrd777.MoviePlayActor.GetPlayBgmOnMovieEnd
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActor_GetPlayBgmOnMovieEnd final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActor_GetPlayBgmOnMovieEnd) == 0x000001, "Wrong alignment on MoviePlayActor_GetPlayBgmOnMovieEnd");
static_assert(sizeof(MoviePlayActor_GetPlayBgmOnMovieEnd) == 0x000001, "Wrong size on MoviePlayActor_GetPlayBgmOnMovieEnd");
static_assert(offsetof(MoviePlayActor_GetPlayBgmOnMovieEnd, ReturnValue) == 0x000000, "Member 'MoviePlayActor_GetPlayBgmOnMovieEnd::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActorBattle.CheckBattleMovieInstance
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActorBattle_CheckBattleMovieInstance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorBattle_CheckBattleMovieInstance) == 0x000001, "Wrong alignment on MoviePlayActorBattle_CheckBattleMovieInstance");
static_assert(sizeof(MoviePlayActorBattle_CheckBattleMovieInstance) == 0x000001, "Wrong size on MoviePlayActorBattle_CheckBattleMovieInstance");
static_assert(offsetof(MoviePlayActorBattle_CheckBattleMovieInstance, ReturnValue) == 0x000000, "Member 'MoviePlayActorBattle_CheckBattleMovieInstance::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActorBattle.GetBattleMovieInstance
// 0x0008 (0x0008 - 0x0000)
struct MoviePlayActorBattle_GetBattleMovieInstance final
{
public:
	class AMoviePlayActorBattle*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorBattle_GetBattleMovieInstance) == 0x000008, "Wrong alignment on MoviePlayActorBattle_GetBattleMovieInstance");
static_assert(sizeof(MoviePlayActorBattle_GetBattleMovieInstance) == 0x000008, "Wrong size on MoviePlayActorBattle_GetBattleMovieInstance");
static_assert(offsetof(MoviePlayActorBattle_GetBattleMovieInstance, ReturnValue) == 0x000000, "Member 'MoviePlayActorBattle_GetBattleMovieInstance::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActorBattle.SyncBattleMovieInstance
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActorBattle_SyncBattleMovieInstance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorBattle_SyncBattleMovieInstance) == 0x000001, "Wrong alignment on MoviePlayActorBattle_SyncBattleMovieInstance");
static_assert(sizeof(MoviePlayActorBattle_SyncBattleMovieInstance) == 0x000001, "Wrong size on MoviePlayActorBattle_SyncBattleMovieInstance");
static_assert(offsetof(MoviePlayActorBattle_SyncBattleMovieInstance, ReturnValue) == 0x000000, "Member 'MoviePlayActorBattle_SyncBattleMovieInstance::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActorBattle.CheckPrepareForBP
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActorBattle_CheckPrepareForBP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorBattle_CheckPrepareForBP) == 0x000001, "Wrong alignment on MoviePlayActorBattle_CheckPrepareForBP");
static_assert(sizeof(MoviePlayActorBattle_CheckPrepareForBP) == 0x000001, "Wrong size on MoviePlayActorBattle_CheckPrepareForBP");
static_assert(offsetof(MoviePlayActorBattle_CheckPrepareForBP, ReturnValue) == 0x000000, "Member 'MoviePlayActorBattle_CheckPrepareForBP::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActorBattle.RequestStopperForBP
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActorBattle_RequestStopperForBP final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorBattle_RequestStopperForBP) == 0x000001, "Wrong alignment on MoviePlayActorBattle_RequestStopperForBP");
static_assert(sizeof(MoviePlayActorBattle_RequestStopperForBP) == 0x000001, "Wrong size on MoviePlayActorBattle_RequestStopperForBP");
static_assert(offsetof(MoviePlayActorBattle_RequestStopperForBP, Enable) == 0x000000, "Member 'MoviePlayActorBattle_RequestStopperForBP::Enable' has a wrong offset!");

// Function xrd777.SoundMonitoring.checkReadBank
// 0x0008 (0x0008 - 0x0000)
struct SoundMonitoring_CheckReadBank final
{
public:
	int32                                         ReadBank;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundMonitoring_CheckReadBank) == 0x000004, "Wrong alignment on SoundMonitoring_CheckReadBank");
static_assert(sizeof(SoundMonitoring_CheckReadBank) == 0x000008, "Wrong size on SoundMonitoring_CheckReadBank");
static_assert(offsetof(SoundMonitoring_CheckReadBank, ReadBank) == 0x000000, "Member 'SoundMonitoring_CheckReadBank::ReadBank' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_CheckReadBank, ReturnValue) == 0x000004, "Member 'SoundMonitoring_CheckReadBank::ReturnValue' has a wrong offset!");

// Function xrd777.SoundMonitoring.checkReadyPlayer
// 0x0008 (0x0008 - 0x0000)
struct SoundMonitoring_CheckReadyPlayer final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundMonitoring_CheckReadyPlayer) == 0x000004, "Wrong alignment on SoundMonitoring_CheckReadyPlayer");
static_assert(sizeof(SoundMonitoring_CheckReadyPlayer) == 0x000008, "Wrong size on SoundMonitoring_CheckReadyPlayer");
static_assert(offsetof(SoundMonitoring_CheckReadyPlayer, PlayerId) == 0x000000, "Member 'SoundMonitoring_CheckReadyPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_CheckReadyPlayer, ReturnValue) == 0x000004, "Member 'SoundMonitoring_CheckReadyPlayer::ReturnValue' has a wrong offset!");

// Function xrd777.SoundMonitoring.checkReadySoundMonitor
// 0x0001 (0x0001 - 0x0000)
struct SoundMonitoring_CheckReadySoundMonitor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundMonitoring_CheckReadySoundMonitor) == 0x000001, "Wrong alignment on SoundMonitoring_CheckReadySoundMonitor");
static_assert(sizeof(SoundMonitoring_CheckReadySoundMonitor) == 0x000001, "Wrong size on SoundMonitoring_CheckReadySoundMonitor");
static_assert(offsetof(SoundMonitoring_CheckReadySoundMonitor, ReturnValue) == 0x000000, "Member 'SoundMonitoring_CheckReadySoundMonitor::ReturnValue' has a wrong offset!");

// Function xrd777.SoundMonitoring.createPlayer
// 0x0008 (0x0008 - 0x0000)
struct SoundMonitoring_CreatePlayer final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EsoundPlayerType                              Type;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundMonitoring_CreatePlayer) == 0x000004, "Wrong alignment on SoundMonitoring_CreatePlayer");
static_assert(sizeof(SoundMonitoring_CreatePlayer) == 0x000008, "Wrong size on SoundMonitoring_CreatePlayer");
static_assert(offsetof(SoundMonitoring_CreatePlayer, PlayerId) == 0x000000, "Member 'SoundMonitoring_CreatePlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_CreatePlayer, Type) == 0x000004, "Member 'SoundMonitoring_CreatePlayer::Type' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_CreatePlayer, ReturnValue) == 0x000005, "Member 'SoundMonitoring_CreatePlayer::ReturnValue' has a wrong offset!");

// Function xrd777.SoundMonitoring.fadeInBGMCategorySoundMonitor
// 0x000C (0x000C - 0x0000)
struct SoundMonitoring_FadeInBGMCategorySoundMonitor final
{
public:
	int32                                         FadeInTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInVolume;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundMonitoring_FadeInBGMCategorySoundMonitor) == 0x000004, "Wrong alignment on SoundMonitoring_FadeInBGMCategorySoundMonitor");
static_assert(sizeof(SoundMonitoring_FadeInBGMCategorySoundMonitor) == 0x00000C, "Wrong size on SoundMonitoring_FadeInBGMCategorySoundMonitor");
static_assert(offsetof(SoundMonitoring_FadeInBGMCategorySoundMonitor, FadeInTime) == 0x000000, "Member 'SoundMonitoring_FadeInBGMCategorySoundMonitor::FadeInTime' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_FadeInBGMCategorySoundMonitor, FadeInVolume) == 0x000004, "Member 'SoundMonitoring_FadeInBGMCategorySoundMonitor::FadeInVolume' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_FadeInBGMCategorySoundMonitor, ReturnValue) == 0x000008, "Member 'SoundMonitoring_FadeInBGMCategorySoundMonitor::ReturnValue' has a wrong offset!");

// Function xrd777.SoundMonitoring.fadeOutBGMCategorySoundMonitor
// 0x000C (0x000C - 0x0000)
struct SoundMonitoring_FadeOutBGMCategorySoundMonitor final
{
public:
	int32                                         FadeOutTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutVolume;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundMonitoring_FadeOutBGMCategorySoundMonitor) == 0x000004, "Wrong alignment on SoundMonitoring_FadeOutBGMCategorySoundMonitor");
static_assert(sizeof(SoundMonitoring_FadeOutBGMCategorySoundMonitor) == 0x00000C, "Wrong size on SoundMonitoring_FadeOutBGMCategorySoundMonitor");
static_assert(offsetof(SoundMonitoring_FadeOutBGMCategorySoundMonitor, FadeOutTime) == 0x000000, "Member 'SoundMonitoring_FadeOutBGMCategorySoundMonitor::FadeOutTime' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_FadeOutBGMCategorySoundMonitor, FadeOutVolume) == 0x000004, "Member 'SoundMonitoring_FadeOutBGMCategorySoundMonitor::FadeOutVolume' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_FadeOutBGMCategorySoundMonitor, ReturnValue) == 0x000008, "Member 'SoundMonitoring_FadeOutBGMCategorySoundMonitor::ReturnValue' has a wrong offset!");

// Function xrd777.SoundMonitoring.playCueID
// 0x000C (0x000C - 0x0000)
struct SoundMonitoring_PlayCueID final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundMonitoring_PlayCueID) == 0x000004, "Wrong alignment on SoundMonitoring_PlayCueID");
static_assert(sizeof(SoundMonitoring_PlayCueID) == 0x00000C, "Wrong size on SoundMonitoring_PlayCueID");
static_assert(offsetof(SoundMonitoring_PlayCueID, PlayerId) == 0x000000, "Member 'SoundMonitoring_PlayCueID::PlayerId' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_PlayCueID, CueId) == 0x000004, "Member 'SoundMonitoring_PlayCueID::CueId' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_PlayCueID, ReturnValue) == 0x000008, "Member 'SoundMonitoring_PlayCueID::ReturnValue' has a wrong offset!");

// Function xrd777.SoundMonitoring.setReadBankToPlayer
// 0x0008 (0x0008 - 0x0000)
struct SoundMonitoring_SetReadBankToPlayer final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReadBank;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundMonitoring_SetReadBankToPlayer) == 0x000004, "Wrong alignment on SoundMonitoring_SetReadBankToPlayer");
static_assert(sizeof(SoundMonitoring_SetReadBankToPlayer) == 0x000008, "Wrong size on SoundMonitoring_SetReadBankToPlayer");
static_assert(offsetof(SoundMonitoring_SetReadBankToPlayer, PlayerId) == 0x000000, "Member 'SoundMonitoring_SetReadBankToPlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_SetReadBankToPlayer, ReadBank) == 0x000004, "Member 'SoundMonitoring_SetReadBankToPlayer::ReadBank' has a wrong offset!");

// Function xrd777.SoundMonitoring.startFreeAcb
// 0x0008 (0x0008 - 0x0000)
struct SoundMonitoring_StartFreeAcb final
{
public:
	int32                                         bankID;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundMonitoring_StartFreeAcb) == 0x000004, "Wrong alignment on SoundMonitoring_StartFreeAcb");
static_assert(sizeof(SoundMonitoring_StartFreeAcb) == 0x000008, "Wrong size on SoundMonitoring_StartFreeAcb");
static_assert(offsetof(SoundMonitoring_StartFreeAcb, bankID) == 0x000000, "Member 'SoundMonitoring_StartFreeAcb::bankID' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_StartFreeAcb, ReturnValue) == 0x000004, "Member 'SoundMonitoring_StartFreeAcb::ReturnValue' has a wrong offset!");

// Function xrd777.SoundMonitoring.startFreePlayer
// 0x0008 (0x0008 - 0x0000)
struct SoundMonitoring_StartFreePlayer final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundMonitoring_StartFreePlayer) == 0x000004, "Wrong alignment on SoundMonitoring_StartFreePlayer");
static_assert(sizeof(SoundMonitoring_StartFreePlayer) == 0x000008, "Wrong size on SoundMonitoring_StartFreePlayer");
static_assert(offsetof(SoundMonitoring_StartFreePlayer, PlayerId) == 0x000000, "Member 'SoundMonitoring_StartFreePlayer::PlayerId' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_StartFreePlayer, ReturnValue) == 0x000004, "Member 'SoundMonitoring_StartFreePlayer::ReturnValue' has a wrong offset!");

// Function xrd777.SoundMonitoring.startReadAcb
// 0x0018 (0x0018 - 0x0000)
struct SoundMonitoring_StartReadAcb final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundMonitoring_StartReadAcb) == 0x000008, "Wrong alignment on SoundMonitoring_StartReadAcb");
static_assert(sizeof(SoundMonitoring_StartReadAcb) == 0x000018, "Wrong size on SoundMonitoring_StartReadAcb");
static_assert(offsetof(SoundMonitoring_StartReadAcb, Filename) == 0x000000, "Member 'SoundMonitoring_StartReadAcb::Filename' has a wrong offset!");
static_assert(offsetof(SoundMonitoring_StartReadAcb, ReturnValue) == 0x000010, "Member 'SoundMonitoring_StartReadAcb::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActorEventSequenceTrack.CheckInstance
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActorEventSequenceTrack_CheckInstance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorEventSequenceTrack_CheckInstance) == 0x000001, "Wrong alignment on MoviePlayActorEventSequenceTrack_CheckInstance");
static_assert(sizeof(MoviePlayActorEventSequenceTrack_CheckInstance) == 0x000001, "Wrong size on MoviePlayActorEventSequenceTrack_CheckInstance");
static_assert(offsetof(MoviePlayActorEventSequenceTrack_CheckInstance, ReturnValue) == 0x000000, "Member 'MoviePlayActorEventSequenceTrack_CheckInstance::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActorEventSequenceTrack.GetInstance
// 0x0008 (0x0008 - 0x0000)
struct MoviePlayActorEventSequenceTrack_GetInstance final
{
public:
	class AMoviePlayActorEventSequenceTrack*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorEventSequenceTrack_GetInstance) == 0x000008, "Wrong alignment on MoviePlayActorEventSequenceTrack_GetInstance");
static_assert(sizeof(MoviePlayActorEventSequenceTrack_GetInstance) == 0x000008, "Wrong size on MoviePlayActorEventSequenceTrack_GetInstance");
static_assert(offsetof(MoviePlayActorEventSequenceTrack_GetInstance, ReturnValue) == 0x000000, "Member 'MoviePlayActorEventSequenceTrack_GetInstance::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActorEventSequenceTrack.SyncInstance
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActorEventSequenceTrack_SyncInstance final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorEventSequenceTrack_SyncInstance) == 0x000001, "Wrong alignment on MoviePlayActorEventSequenceTrack_SyncInstance");
static_assert(sizeof(MoviePlayActorEventSequenceTrack_SyncInstance) == 0x000001, "Wrong size on MoviePlayActorEventSequenceTrack_SyncInstance");
static_assert(offsetof(MoviePlayActorEventSequenceTrack_SyncInstance, ReturnValue) == 0x000000, "Member 'MoviePlayActorEventSequenceTrack_SyncInstance::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActorEventSequenceTrack.IsPause_Main220040
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActorEventSequenceTrack_IsPause_Main220040 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorEventSequenceTrack_IsPause_Main220040) == 0x000001, "Wrong alignment on MoviePlayActorEventSequenceTrack_IsPause_Main220040");
static_assert(sizeof(MoviePlayActorEventSequenceTrack_IsPause_Main220040) == 0x000001, "Wrong size on MoviePlayActorEventSequenceTrack_IsPause_Main220040");
static_assert(offsetof(MoviePlayActorEventSequenceTrack_IsPause_Main220040, ReturnValue) == 0x000000, "Member 'MoviePlayActorEventSequenceTrack_IsPause_Main220040::ReturnValue' has a wrong offset!");

// Function xrd777.MoviePlayActorEventSequenceTrack.OnBeginPlay
// 0x0008 (0x0008 - 0x0000)
struct MoviePlayActorEventSequenceTrack_OnBeginPlay final
{
public:
	class UManaComponent*                         InManaComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorEventSequenceTrack_OnBeginPlay) == 0x000008, "Wrong alignment on MoviePlayActorEventSequenceTrack_OnBeginPlay");
static_assert(sizeof(MoviePlayActorEventSequenceTrack_OnBeginPlay) == 0x000008, "Wrong size on MoviePlayActorEventSequenceTrack_OnBeginPlay");
static_assert(offsetof(MoviePlayActorEventSequenceTrack_OnBeginPlay, InManaComponent) == 0x000000, "Member 'MoviePlayActorEventSequenceTrack_OnBeginPlay::InManaComponent' has a wrong offset!");

// Function xrd777.MoviePlayActorEventSequenceTrack.OnSeekCompleted
// 0x0010 (0x0010 - 0x0000)
struct MoviePlayActorEventSequenceTrack_OnSeekCompleted final
{
public:
	int32                                         InFrameNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         InManaComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorEventSequenceTrack_OnSeekCompleted) == 0x000008, "Wrong alignment on MoviePlayActorEventSequenceTrack_OnSeekCompleted");
static_assert(sizeof(MoviePlayActorEventSequenceTrack_OnSeekCompleted) == 0x000010, "Wrong size on MoviePlayActorEventSequenceTrack_OnSeekCompleted");
static_assert(offsetof(MoviePlayActorEventSequenceTrack_OnSeekCompleted, InFrameNumber) == 0x000000, "Member 'MoviePlayActorEventSequenceTrack_OnSeekCompleted::InFrameNumber' has a wrong offset!");
static_assert(offsetof(MoviePlayActorEventSequenceTrack_OnSeekCompleted, InManaComponent) == 0x000008, "Member 'MoviePlayActorEventSequenceTrack_OnSeekCompleted::InManaComponent' has a wrong offset!");

// Function xrd777.MoviePlayActorEventSequenceTrack.OnSequenceUpdate
// 0x0020 (0x0020 - 0x0000)
struct MoviePlayActorEventSequenceTrack_OnSequenceUpdate final
{
public:
	struct FQualifiedFrameTime                    InCurrentTime;                                     // 0x0000(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQualifiedFrameTime                    InPreviousTime;                                    // 0x0010(0x0010)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorEventSequenceTrack_OnSequenceUpdate) == 0x000004, "Wrong alignment on MoviePlayActorEventSequenceTrack_OnSequenceUpdate");
static_assert(sizeof(MoviePlayActorEventSequenceTrack_OnSequenceUpdate) == 0x000020, "Wrong size on MoviePlayActorEventSequenceTrack_OnSequenceUpdate");
static_assert(offsetof(MoviePlayActorEventSequenceTrack_OnSequenceUpdate, InCurrentTime) == 0x000000, "Member 'MoviePlayActorEventSequenceTrack_OnSequenceUpdate::InCurrentTime' has a wrong offset!");
static_assert(offsetof(MoviePlayActorEventSequenceTrack_OnSequenceUpdate, InPreviousTime) == 0x000010, "Member 'MoviePlayActorEventSequenceTrack_OnSequenceUpdate::InPreviousTime' has a wrong offset!");

// Function xrd777.MoviePlayActorEventSequenceTrack.OnTextureUpdated
// 0x0010 (0x0010 - 0x0000)
struct MoviePlayActorEventSequenceTrack_OnTextureUpdated final
{
public:
	int32                                         InFrameNumber;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         InManaComponent;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorEventSequenceTrack_OnTextureUpdated) == 0x000008, "Wrong alignment on MoviePlayActorEventSequenceTrack_OnTextureUpdated");
static_assert(sizeof(MoviePlayActorEventSequenceTrack_OnTextureUpdated) == 0x000010, "Wrong size on MoviePlayActorEventSequenceTrack_OnTextureUpdated");
static_assert(offsetof(MoviePlayActorEventSequenceTrack_OnTextureUpdated, InFrameNumber) == 0x000000, "Member 'MoviePlayActorEventSequenceTrack_OnTextureUpdated::InFrameNumber' has a wrong offset!");
static_assert(offsetof(MoviePlayActorEventSequenceTrack_OnTextureUpdated, InManaComponent) == 0x000008, "Member 'MoviePlayActorEventSequenceTrack_OnTextureUpdated::InManaComponent' has a wrong offset!");

// Function xrd777.MoviePlayActorEventSequenceTrack.SetPause_Main220040
// 0x0001 (0x0001 - 0x0000)
struct MoviePlayActorEventSequenceTrack_SetPause_Main220040 final
{
public:
	bool                                          Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoviePlayActorEventSequenceTrack_SetPause_Main220040) == 0x000001, "Wrong alignment on MoviePlayActorEventSequenceTrack_SetPause_Main220040");
static_assert(sizeof(MoviePlayActorEventSequenceTrack_SetPause_Main220040) == 0x000001, "Wrong size on MoviePlayActorEventSequenceTrack_SetPause_Main220040");
static_assert(offsetof(MoviePlayActorEventSequenceTrack_SetPause_Main220040, Flag) == 0x000000, "Member 'MoviePlayActorEventSequenceTrack_SetPause_Main220040::Flag' has a wrong offset!");

// Function xrd777.NiagaraCameraAttachComponent.GetParticleComponent
// 0x0008 (0x0008 - 0x0000)
struct NiagaraCameraAttachComponent_GetParticleComponent final
{
public:
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NiagaraCameraAttachComponent_GetParticleComponent) == 0x000008, "Wrong alignment on NiagaraCameraAttachComponent_GetParticleComponent");
static_assert(sizeof(NiagaraCameraAttachComponent_GetParticleComponent) == 0x000008, "Wrong size on NiagaraCameraAttachComponent_GetParticleComponent");
static_assert(offsetof(NiagaraCameraAttachComponent_GetParticleComponent, ReturnValue) == 0x000000, "Member 'NiagaraCameraAttachComponent_GetParticleComponent::ReturnValue' has a wrong offset!");

// Function xrd777.NiagaraCameraAttachComponent.IsAssetLoaded
// 0x0001 (0x0001 - 0x0000)
struct NiagaraCameraAttachComponent_IsAssetLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NiagaraCameraAttachComponent_IsAssetLoaded) == 0x000001, "Wrong alignment on NiagaraCameraAttachComponent_IsAssetLoaded");
static_assert(sizeof(NiagaraCameraAttachComponent_IsAssetLoaded) == 0x000001, "Wrong size on NiagaraCameraAttachComponent_IsAssetLoaded");
static_assert(offsetof(NiagaraCameraAttachComponent_IsAssetLoaded, ReturnValue) == 0x000000, "Member 'NiagaraCameraAttachComponent_IsAssetLoaded::ReturnValue' has a wrong offset!");

// Function xrd777.NiagaraCameraAttachComponent.IsCallDestroy
// 0x0001 (0x0001 - 0x0000)
struct NiagaraCameraAttachComponent_IsCallDestroy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NiagaraCameraAttachComponent_IsCallDestroy) == 0x000001, "Wrong alignment on NiagaraCameraAttachComponent_IsCallDestroy");
static_assert(sizeof(NiagaraCameraAttachComponent_IsCallDestroy) == 0x000001, "Wrong size on NiagaraCameraAttachComponent_IsCallDestroy");
static_assert(offsetof(NiagaraCameraAttachComponent_IsCallDestroy, ReturnValue) == 0x000000, "Member 'NiagaraCameraAttachComponent_IsCallDestroy::ReturnValue' has a wrong offset!");

// Function xrd777.NiagaraCameraAttachComponent.OnComplete
// 0x0008 (0x0008 - 0x0000)
struct NiagaraCameraAttachComponent_OnComplete final
{
public:
	class UNiagaraComponent*                      PSystem;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NiagaraCameraAttachComponent_OnComplete) == 0x000008, "Wrong alignment on NiagaraCameraAttachComponent_OnComplete");
static_assert(sizeof(NiagaraCameraAttachComponent_OnComplete) == 0x000008, "Wrong size on NiagaraCameraAttachComponent_OnComplete");
static_assert(offsetof(NiagaraCameraAttachComponent_OnComplete, PSystem) == 0x000000, "Member 'NiagaraCameraAttachComponent_OnComplete::PSystem' has a wrong offset!");

// Function xrd777.NiagaraCameraAttachComponent.SetAttachCam
// 0x0008 (0x0008 - 0x0000)
struct NiagaraCameraAttachComponent_SetAttachCam final
{
public:
	class USceneComponent*                        Parent;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NiagaraCameraAttachComponent_SetAttachCam) == 0x000008, "Wrong alignment on NiagaraCameraAttachComponent_SetAttachCam");
static_assert(sizeof(NiagaraCameraAttachComponent_SetAttachCam) == 0x000008, "Wrong size on NiagaraCameraAttachComponent_SetAttachCam");
static_assert(offsetof(NiagaraCameraAttachComponent_SetAttachCam, Parent) == 0x000000, "Member 'NiagaraCameraAttachComponent_SetAttachCam::Parent' has a wrong offset!");

// Function xrd777.PadRumbleSequencer.RumbleStartAsset
// 0x0010 (0x0010 - 0x0000)
struct PadRumbleSequencer_RumbleStartAsset final
{
public:
	class UForceFeedbackEffect*                   PRumble;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoop;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PadRumbleSequencer_RumbleStartAsset) == 0x000008, "Wrong alignment on PadRumbleSequencer_RumbleStartAsset");
static_assert(sizeof(PadRumbleSequencer_RumbleStartAsset) == 0x000010, "Wrong size on PadRumbleSequencer_RumbleStartAsset");
static_assert(offsetof(PadRumbleSequencer_RumbleStartAsset, PRumble) == 0x000000, "Member 'PadRumbleSequencer_RumbleStartAsset::PRumble' has a wrong offset!");
static_assert(offsetof(PadRumbleSequencer_RumbleStartAsset, IsLoop) == 0x000008, "Member 'PadRumbleSequencer_RumbleStartAsset::IsLoop' has a wrong offset!");

// Function xrd777.PadRumbleSequencer.RumbleStartLarge
// 0x0014 (0x0014 - 0x0000)
struct PadRumbleSequencer_RumbleStartLarge final
{
public:
	int32                                         Power;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Frame;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitFrame;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFram;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PadRumbleSequencer_RumbleStartLarge) == 0x000004, "Wrong alignment on PadRumbleSequencer_RumbleStartLarge");
static_assert(sizeof(PadRumbleSequencer_RumbleStartLarge) == 0x000014, "Wrong size on PadRumbleSequencer_RumbleStartLarge");
static_assert(offsetof(PadRumbleSequencer_RumbleStartLarge, Power) == 0x000000, "Member 'PadRumbleSequencer_RumbleStartLarge::Power' has a wrong offset!");
static_assert(offsetof(PadRumbleSequencer_RumbleStartLarge, Frame) == 0x000004, "Member 'PadRumbleSequencer_RumbleStartLarge::Frame' has a wrong offset!");
static_assert(offsetof(PadRumbleSequencer_RumbleStartLarge, WaitFrame) == 0x000008, "Member 'PadRumbleSequencer_RumbleStartLarge::WaitFrame' has a wrong offset!");
static_assert(offsetof(PadRumbleSequencer_RumbleStartLarge, Num) == 0x00000C, "Member 'PadRumbleSequencer_RumbleStartLarge::Num' has a wrong offset!");
static_assert(offsetof(PadRumbleSequencer_RumbleStartLarge, TotalFram) == 0x000010, "Member 'PadRumbleSequencer_RumbleStartLarge::TotalFram' has a wrong offset!");

// Function xrd777.PadRumbleSequencer.RumbleStartSmall
// 0x0010 (0x0010 - 0x0000)
struct PadRumbleSequencer_RumbleStartSmall final
{
public:
	int32                                         Frame;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaitFrame;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Num;                                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFram;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PadRumbleSequencer_RumbleStartSmall) == 0x000004, "Wrong alignment on PadRumbleSequencer_RumbleStartSmall");
static_assert(sizeof(PadRumbleSequencer_RumbleStartSmall) == 0x000010, "Wrong size on PadRumbleSequencer_RumbleStartSmall");
static_assert(offsetof(PadRumbleSequencer_RumbleStartSmall, Frame) == 0x000000, "Member 'PadRumbleSequencer_RumbleStartSmall::Frame' has a wrong offset!");
static_assert(offsetof(PadRumbleSequencer_RumbleStartSmall, WaitFrame) == 0x000004, "Member 'PadRumbleSequencer_RumbleStartSmall::WaitFrame' has a wrong offset!");
static_assert(offsetof(PadRumbleSequencer_RumbleStartSmall, Num) == 0x000008, "Member 'PadRumbleSequencer_RumbleStartSmall::Num' has a wrong offset!");
static_assert(offsetof(PadRumbleSequencer_RumbleStartSmall, TotalFram) == 0x00000C, "Member 'PadRumbleSequencer_RumbleStartSmall::TotalFram' has a wrong offset!");

// Function xrd777.SoundApp.ApplyDspBusSnapshot
// 0x0018 (0x0018 - 0x0000)
struct SoundApp_ApplyDspBusSnapshot final
{
public:
	class FString                                 SnapshotName;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Millisecond;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_ApplyDspBusSnapshot) == 0x000008, "Wrong alignment on SoundApp_ApplyDspBusSnapshot");
static_assert(sizeof(SoundApp_ApplyDspBusSnapshot) == 0x000018, "Wrong size on SoundApp_ApplyDspBusSnapshot");
static_assert(offsetof(SoundApp_ApplyDspBusSnapshot, SnapshotName) == 0x000000, "Member 'SoundApp_ApplyDspBusSnapshot::SnapshotName' has a wrong offset!");
static_assert(offsetof(SoundApp_ApplyDspBusSnapshot, Millisecond) == 0x000010, "Member 'SoundApp_ApplyDspBusSnapshot::Millisecond' has a wrong offset!");

// Function xrd777.SoundApp.AttachDspBusSetting
// 0x0010 (0x0010 - 0x0000)
struct SoundApp_AttachDspBusSetting final
{
public:
	class FString                                 SettingName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_AttachDspBusSetting) == 0x000008, "Wrong alignment on SoundApp_AttachDspBusSetting");
static_assert(sizeof(SoundApp_AttachDspBusSetting) == 0x000010, "Wrong size on SoundApp_AttachDspBusSetting");
static_assert(offsetof(SoundApp_AttachDspBusSetting, SettingName) == 0x000000, "Member 'SoundApp_AttachDspBusSetting::SettingName' has a wrong offset!");

// Function xrd777.SoundApp.CheckPauseEventVoice
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_CheckPauseEventVoice final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_CheckPauseEventVoice) == 0x000004, "Wrong alignment on SoundApp_CheckPauseEventVoice");
static_assert(sizeof(SoundApp_CheckPauseEventVoice) == 0x000008, "Wrong size on SoundApp_CheckPauseEventVoice");
static_assert(offsetof(SoundApp_CheckPauseEventVoice, BankNum) == 0x000000, "Member 'SoundApp_CheckPauseEventVoice::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_CheckPauseEventVoice, ReturnValue) == 0x000004, "Member 'SoundApp_CheckPauseEventVoice::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.FadeInBGM
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_FadeInBGM final
{
public:
	int32                                         FadeOutFrame;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_FadeInBGM) == 0x000004, "Wrong alignment on SoundApp_FadeInBGM");
static_assert(sizeof(SoundApp_FadeInBGM) == 0x000004, "Wrong size on SoundApp_FadeInBGM");
static_assert(offsetof(SoundApp_FadeInBGM, FadeOutFrame) == 0x000000, "Member 'SoundApp_FadeInBGM::FadeOutFrame' has a wrong offset!");

// Function xrd777.SoundApp.FadeInCategoryBGM
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_FadeInCategoryBGM final
{
public:
	int32                                         FadeInFrame;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutVolume;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_FadeInCategoryBGM) == 0x000004, "Wrong alignment on SoundApp_FadeInCategoryBGM");
static_assert(sizeof(SoundApp_FadeInCategoryBGM) == 0x000008, "Wrong size on SoundApp_FadeInCategoryBGM");
static_assert(offsetof(SoundApp_FadeInCategoryBGM, FadeInFrame) == 0x000000, "Member 'SoundApp_FadeInCategoryBGM::FadeInFrame' has a wrong offset!");
static_assert(offsetof(SoundApp_FadeInCategoryBGM, FadeOutVolume) == 0x000004, "Member 'SoundApp_FadeInCategoryBGM::FadeOutVolume' has a wrong offset!");

// Function xrd777.SoundApp.FadeoutBGM
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_FadeoutBGM final
{
public:
	int32                                         FadeOutFrame;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_FadeoutBGM) == 0x000004, "Wrong alignment on SoundApp_FadeoutBGM");
static_assert(sizeof(SoundApp_FadeoutBGM) == 0x000004, "Wrong size on SoundApp_FadeoutBGM");
static_assert(offsetof(SoundApp_FadeoutBGM, FadeOutFrame) == 0x000000, "Member 'SoundApp_FadeoutBGM::FadeOutFrame' has a wrong offset!");

// Function xrd777.SoundApp.FadeOutCategoryBGM
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_FadeOutCategoryBGM final
{
public:
	int32                                         FadeOutFrame;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutVolume;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_FadeOutCategoryBGM) == 0x000004, "Wrong alignment on SoundApp_FadeOutCategoryBGM");
static_assert(sizeof(SoundApp_FadeOutCategoryBGM) == 0x000008, "Wrong size on SoundApp_FadeOutCategoryBGM");
static_assert(offsetof(SoundApp_FadeOutCategoryBGM, FadeOutFrame) == 0x000000, "Member 'SoundApp_FadeOutCategoryBGM::FadeOutFrame' has a wrong offset!");
static_assert(offsetof(SoundApp_FadeOutCategoryBGM, FadeOutVolume) == 0x000004, "Member 'SoundApp_FadeOutCategoryBGM::FadeOutVolume' has a wrong offset!");

// Function xrd777.SoundApp.FadeOutComSE
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_FadeOutComSE final
{
public:
	int32                                         FadeOutFrame;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_FadeOutComSE) == 0x000004, "Wrong alignment on SoundApp_FadeOutComSE");
static_assert(sizeof(SoundApp_FadeOutComSE) == 0x000004, "Wrong size on SoundApp_FadeOutComSE");
static_assert(offsetof(SoundApp_FadeOutComSE, FadeOutFrame) == 0x000000, "Member 'SoundApp_FadeOutComSE::FadeOutFrame' has a wrong offset!");

// Function xrd777.SoundApp.GetCurrentAppliedSnapshot
// 0x0010 (0x0010 - 0x0000)
struct SoundApp_GetCurrentAppliedSnapshot final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_GetCurrentAppliedSnapshot) == 0x000008, "Wrong alignment on SoundApp_GetCurrentAppliedSnapshot");
static_assert(sizeof(SoundApp_GetCurrentAppliedSnapshot) == 0x000010, "Wrong size on SoundApp_GetCurrentAppliedSnapshot");
static_assert(offsetof(SoundApp_GetCurrentAppliedSnapshot, ReturnValue) == 0x000000, "Member 'SoundApp_GetCurrentAppliedSnapshot::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.GetLength
// 0x0010 (0x0010 - 0x0000)
struct SoundApp_GetLength final
{
public:
	int32                                         MajorId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_GetLength) == 0x000004, "Wrong alignment on SoundApp_GetLength");
static_assert(sizeof(SoundApp_GetLength) == 0x000010, "Wrong size on SoundApp_GetLength");
static_assert(offsetof(SoundApp_GetLength, MajorId) == 0x000000, "Member 'SoundApp_GetLength::MajorId' has a wrong offset!");
static_assert(offsetof(SoundApp_GetLength, MinorId) == 0x000004, "Member 'SoundApp_GetLength::MinorId' has a wrong offset!");
static_assert(offsetof(SoundApp_GetLength, CueId) == 0x000008, "Member 'SoundApp_GetLength::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_GetLength, ReturnValue) == 0x00000C, "Member 'SoundApp_GetLength::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.getLipsyncLiveInfo
// 0x0018 (0x0018 - 0x0000)
struct SoundApp_GetLipsyncLiveInfo final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCriLipsMorphTargetBlendAmountAsJapanese ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_GetLipsyncLiveInfo) == 0x000004, "Wrong alignment on SoundApp_GetLipsyncLiveInfo");
static_assert(sizeof(SoundApp_GetLipsyncLiveInfo) == 0x000018, "Wrong size on SoundApp_GetLipsyncLiveInfo");
static_assert(offsetof(SoundApp_GetLipsyncLiveInfo, BankNum) == 0x000000, "Member 'SoundApp_GetLipsyncLiveInfo::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_GetLipsyncLiveInfo, ReturnValue) == 0x000004, "Member 'SoundApp_GetLipsyncLiveInfo::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.GetNowPlayBGMQueID
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_GetNowPlayBGMQueID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_GetNowPlayBGMQueID) == 0x000004, "Wrong alignment on SoundApp_GetNowPlayBGMQueID");
static_assert(sizeof(SoundApp_GetNowPlayBGMQueID) == 0x000004, "Wrong size on SoundApp_GetNowPlayBGMQueID");
static_assert(offsetof(SoundApp_GetNowPlayBGMQueID, ReturnValue) == 0x000000, "Member 'SoundApp_GetNowPlayBGMQueID::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.GetTime
// 0x000C (0x000C - 0x0000)
struct SoundApp_GetTime final
{
public:
	int32                                         MajorId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_GetTime) == 0x000004, "Wrong alignment on SoundApp_GetTime");
static_assert(sizeof(SoundApp_GetTime) == 0x00000C, "Wrong size on SoundApp_GetTime");
static_assert(offsetof(SoundApp_GetTime, MajorId) == 0x000000, "Member 'SoundApp_GetTime::MajorId' has a wrong offset!");
static_assert(offsetof(SoundApp_GetTime, MinorId) == 0x000004, "Member 'SoundApp_GetTime::MinorId' has a wrong offset!");
static_assert(offsetof(SoundApp_GetTime, ReturnValue) == 0x000008, "Member 'SoundApp_GetTime::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsActiveBackLogVoiceData
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsActiveBackLogVoiceData final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsActiveBackLogVoiceData) == 0x000004, "Wrong alignment on SoundApp_IsActiveBackLogVoiceData");
static_assert(sizeof(SoundApp_IsActiveBackLogVoiceData) == 0x000008, "Wrong size on SoundApp_IsActiveBackLogVoiceData");
static_assert(offsetof(SoundApp_IsActiveBackLogVoiceData, BankNum) == 0x000000, "Member 'SoundApp_IsActiveBackLogVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsActiveBackLogVoiceData, ReturnValue) == 0x000004, "Member 'SoundApp_IsActiveBackLogVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsActiveBattleEventVoiceData
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsActiveBattleEventVoiceData final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsActiveBattleEventVoiceData) == 0x000004, "Wrong alignment on SoundApp_IsActiveBattleEventVoiceData");
static_assert(sizeof(SoundApp_IsActiveBattleEventVoiceData) == 0x000008, "Wrong size on SoundApp_IsActiveBattleEventVoiceData");
static_assert(offsetof(SoundApp_IsActiveBattleEventVoiceData, BankNum) == 0x000000, "Member 'SoundApp_IsActiveBattleEventVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsActiveBattleEventVoiceData, ReturnValue) == 0x000004, "Member 'SoundApp_IsActiveBattleEventVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsActiveEventVoiceData
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsActiveEventVoiceData final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsActiveEventVoiceData) == 0x000004, "Wrong alignment on SoundApp_IsActiveEventVoiceData");
static_assert(sizeof(SoundApp_IsActiveEventVoiceData) == 0x000008, "Wrong size on SoundApp_IsActiveEventVoiceData");
static_assert(offsetof(SoundApp_IsActiveEventVoiceData, BankNum) == 0x000000, "Member 'SoundApp_IsActiveEventVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsActiveEventVoiceData, ReturnValue) == 0x000004, "Member 'SoundApp_IsActiveEventVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsActiveFacilityVoiceData
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsActiveFacilityVoiceData final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsActiveFacilityVoiceData) == 0x000004, "Wrong alignment on SoundApp_IsActiveFacilityVoiceData");
static_assert(sizeof(SoundApp_IsActiveFacilityVoiceData) == 0x000008, "Wrong size on SoundApp_IsActiveFacilityVoiceData");
static_assert(offsetof(SoundApp_IsActiveFacilityVoiceData, BankNum) == 0x000000, "Member 'SoundApp_IsActiveFacilityVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsActiveFacilityVoiceData, ReturnValue) == 0x000004, "Member 'SoundApp_IsActiveFacilityVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsPlayingBackLogVoice
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsPlayingBackLogVoice final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsPlayingBackLogVoice) == 0x000004, "Wrong alignment on SoundApp_IsPlayingBackLogVoice");
static_assert(sizeof(SoundApp_IsPlayingBackLogVoice) == 0x000008, "Wrong size on SoundApp_IsPlayingBackLogVoice");
static_assert(offsetof(SoundApp_IsPlayingBackLogVoice, BankNum) == 0x000000, "Member 'SoundApp_IsPlayingBackLogVoice::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsPlayingBackLogVoice, ReturnValue) == 0x000004, "Member 'SoundApp_IsPlayingBackLogVoice::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsPlayingBattleEventVoice
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsPlayingBattleEventVoice final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsPlayingBattleEventVoice) == 0x000004, "Wrong alignment on SoundApp_IsPlayingBattleEventVoice");
static_assert(sizeof(SoundApp_IsPlayingBattleEventVoice) == 0x000008, "Wrong size on SoundApp_IsPlayingBattleEventVoice");
static_assert(offsetof(SoundApp_IsPlayingBattleEventVoice, BankNum) == 0x000000, "Member 'SoundApp_IsPlayingBattleEventVoice::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsPlayingBattleEventVoice, ReturnValue) == 0x000004, "Member 'SoundApp_IsPlayingBattleEventVoice::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsPlayingComSE
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsPlayingComSE final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsPlayingComSE) == 0x000004, "Wrong alignment on SoundApp_IsPlayingComSE");
static_assert(sizeof(SoundApp_IsPlayingComSE) == 0x000008, "Wrong size on SoundApp_IsPlayingComSE");
static_assert(offsetof(SoundApp_IsPlayingComSE, BankNum) == 0x000000, "Member 'SoundApp_IsPlayingComSE::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsPlayingComSE, ReturnValue) == 0x000004, "Member 'SoundApp_IsPlayingComSE::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsPlayingEventVoice
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsPlayingEventVoice final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsPlayingEventVoice) == 0x000004, "Wrong alignment on SoundApp_IsPlayingEventVoice");
static_assert(sizeof(SoundApp_IsPlayingEventVoice) == 0x000008, "Wrong size on SoundApp_IsPlayingEventVoice");
static_assert(offsetof(SoundApp_IsPlayingEventVoice, BankNum) == 0x000000, "Member 'SoundApp_IsPlayingEventVoice::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsPlayingEventVoice, ReturnValue) == 0x000004, "Member 'SoundApp_IsPlayingEventVoice::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsPlayingFacilityVoice
// 0x000C (0x000C - 0x0000)
struct SoundApp_IsPlayingFacilityVoice final
{
public:
	bool                                          UseAttenuator;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BankNum;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsPlayingFacilityVoice) == 0x000004, "Wrong alignment on SoundApp_IsPlayingFacilityVoice");
static_assert(sizeof(SoundApp_IsPlayingFacilityVoice) == 0x00000C, "Wrong size on SoundApp_IsPlayingFacilityVoice");
static_assert(offsetof(SoundApp_IsPlayingFacilityVoice, UseAttenuator) == 0x000000, "Member 'SoundApp_IsPlayingFacilityVoice::UseAttenuator' has a wrong offset!");
static_assert(offsetof(SoundApp_IsPlayingFacilityVoice, BankNum) == 0x000004, "Member 'SoundApp_IsPlayingFacilityVoice::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsPlayingFacilityVoice, ReturnValue) == 0x000008, "Member 'SoundApp_IsPlayingFacilityVoice::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsPlayingSingleVoice
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsPlayingSingleVoice final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsPlayingSingleVoice) == 0x000004, "Wrong alignment on SoundApp_IsPlayingSingleVoice");
static_assert(sizeof(SoundApp_IsPlayingSingleVoice) == 0x000008, "Wrong size on SoundApp_IsPlayingSingleVoice");
static_assert(offsetof(SoundApp_IsPlayingSingleVoice, BankNum) == 0x000000, "Member 'SoundApp_IsPlayingSingleVoice::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsPlayingSingleVoice, ReturnValue) == 0x000004, "Member 'SoundApp_IsPlayingSingleVoice::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsSetupEndBackLogVoiceData
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsSetupEndBackLogVoiceData final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsSetupEndBackLogVoiceData) == 0x000004, "Wrong alignment on SoundApp_IsSetupEndBackLogVoiceData");
static_assert(sizeof(SoundApp_IsSetupEndBackLogVoiceData) == 0x000008, "Wrong size on SoundApp_IsSetupEndBackLogVoiceData");
static_assert(offsetof(SoundApp_IsSetupEndBackLogVoiceData, BankNum) == 0x000000, "Member 'SoundApp_IsSetupEndBackLogVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsSetupEndBackLogVoiceData, ReturnValue) == 0x000004, "Member 'SoundApp_IsSetupEndBackLogVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsSetupEndBattleEventVoiceData
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsSetupEndBattleEventVoiceData final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsSetupEndBattleEventVoiceData) == 0x000004, "Wrong alignment on SoundApp_IsSetupEndBattleEventVoiceData");
static_assert(sizeof(SoundApp_IsSetupEndBattleEventVoiceData) == 0x000008, "Wrong size on SoundApp_IsSetupEndBattleEventVoiceData");
static_assert(offsetof(SoundApp_IsSetupEndBattleEventVoiceData, BankNum) == 0x000000, "Member 'SoundApp_IsSetupEndBattleEventVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsSetupEndBattleEventVoiceData, ReturnValue) == 0x000004, "Member 'SoundApp_IsSetupEndBattleEventVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsSetupEndEventVoiceData
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsSetupEndEventVoiceData final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsSetupEndEventVoiceData) == 0x000004, "Wrong alignment on SoundApp_IsSetupEndEventVoiceData");
static_assert(sizeof(SoundApp_IsSetupEndEventVoiceData) == 0x000008, "Wrong size on SoundApp_IsSetupEndEventVoiceData");
static_assert(offsetof(SoundApp_IsSetupEndEventVoiceData, BankNum) == 0x000000, "Member 'SoundApp_IsSetupEndEventVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsSetupEndEventVoiceData, ReturnValue) == 0x000004, "Member 'SoundApp_IsSetupEndEventVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.IsSetupEndFacilityVoiceData
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_IsSetupEndFacilityVoiceData final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_IsSetupEndFacilityVoiceData) == 0x000004, "Wrong alignment on SoundApp_IsSetupEndFacilityVoiceData");
static_assert(sizeof(SoundApp_IsSetupEndFacilityVoiceData) == 0x000008, "Wrong size on SoundApp_IsSetupEndFacilityVoiceData");
static_assert(offsetof(SoundApp_IsSetupEndFacilityVoiceData, BankNum) == 0x000000, "Member 'SoundApp_IsSetupEndFacilityVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_IsSetupEndFacilityVoiceData, ReturnValue) == 0x000004, "Member 'SoundApp_IsSetupEndFacilityVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.PauseEventVoice
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_PauseEventVoice final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_PauseEventVoice) == 0x000004, "Wrong alignment on SoundApp_PauseEventVoice");
static_assert(sizeof(SoundApp_PauseEventVoice) == 0x000008, "Wrong size on SoundApp_PauseEventVoice");
static_assert(offsetof(SoundApp_PauseEventVoice, BankNum) == 0x000000, "Member 'SoundApp_PauseEventVoice::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_PauseEventVoice, bPause) == 0x000004, "Member 'SoundApp_PauseEventVoice::bPause' has a wrong offset!");

// Function xrd777.SoundApp.PlayBackLogVoice
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_PlayBackLogVoice final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_PlayBackLogVoice) == 0x000004, "Wrong alignment on SoundApp_PlayBackLogVoice");
static_assert(sizeof(SoundApp_PlayBackLogVoice) == 0x000008, "Wrong size on SoundApp_PlayBackLogVoice");
static_assert(offsetof(SoundApp_PlayBackLogVoice, CueId) == 0x000000, "Member 'SoundApp_PlayBackLogVoice::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayBackLogVoice, BankNum) == 0x000004, "Member 'SoundApp_PlayBackLogVoice::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.PlayBattleBGM
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_PlayBattleBGM final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_PlayBattleBGM) == 0x000004, "Wrong alignment on SoundApp_PlayBattleBGM");
static_assert(sizeof(SoundApp_PlayBattleBGM) == 0x000004, "Wrong size on SoundApp_PlayBattleBGM");
static_assert(offsetof(SoundApp_PlayBattleBGM, CueId) == 0x000000, "Member 'SoundApp_PlayBattleBGM::CueId' has a wrong offset!");

// Function xrd777.SoundApp.PlayBattleEventVoice
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_PlayBattleEventVoice final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_PlayBattleEventVoice) == 0x000004, "Wrong alignment on SoundApp_PlayBattleEventVoice");
static_assert(sizeof(SoundApp_PlayBattleEventVoice) == 0x000008, "Wrong size on SoundApp_PlayBattleEventVoice");
static_assert(offsetof(SoundApp_PlayBattleEventVoice, CueId) == 0x000000, "Member 'SoundApp_PlayBattleEventVoice::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayBattleEventVoice, BankNum) == 0x000004, "Member 'SoundApp_PlayBattleEventVoice::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.PlayBattleEventVoiceWithLipsync
// 0x0010 (0x0010 - 0x0000)
struct SoundApp_PlayBattleEventVoiceWithLipsync final
{
public:
	EAppCharCategoryType                          CategoryType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_PlayBattleEventVoiceWithLipsync) == 0x000004, "Wrong alignment on SoundApp_PlayBattleEventVoiceWithLipsync");
static_assert(sizeof(SoundApp_PlayBattleEventVoiceWithLipsync) == 0x000010, "Wrong size on SoundApp_PlayBattleEventVoiceWithLipsync");
static_assert(offsetof(SoundApp_PlayBattleEventVoiceWithLipsync, CategoryType) == 0x000000, "Member 'SoundApp_PlayBattleEventVoiceWithLipsync::CategoryType' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayBattleEventVoiceWithLipsync, CharaIndexID) == 0x000004, "Member 'SoundApp_PlayBattleEventVoiceWithLipsync::CharaIndexID' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayBattleEventVoiceWithLipsync, CueId) == 0x000008, "Member 'SoundApp_PlayBattleEventVoiceWithLipsync::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayBattleEventVoiceWithLipsync, BankNum) == 0x00000C, "Member 'SoundApp_PlayBattleEventVoiceWithLipsync::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.PlayBGM
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_PlayBGM final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsForcePlay;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_PlayBGM) == 0x000004, "Wrong alignment on SoundApp_PlayBGM");
static_assert(sizeof(SoundApp_PlayBGM) == 0x000008, "Wrong size on SoundApp_PlayBGM");
static_assert(offsetof(SoundApp_PlayBGM, CueId) == 0x000000, "Member 'SoundApp_PlayBGM::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayBGM, IsForcePlay) == 0x000004, "Member 'SoundApp_PlayBGM::IsForcePlay' has a wrong offset!");

// Function xrd777.SoundApp.PlayComSE
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_PlayComSE final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_PlayComSE) == 0x000004, "Wrong alignment on SoundApp_PlayComSE");
static_assert(sizeof(SoundApp_PlayComSE) == 0x000004, "Wrong size on SoundApp_PlayComSE");
static_assert(offsetof(SoundApp_PlayComSE, CueId) == 0x000000, "Member 'SoundApp_PlayComSE::CueId' has a wrong offset!");

// Function xrd777.SoundApp.PlayEventSE
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_PlayEventSE final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_PlayEventSE) == 0x000004, "Wrong alignment on SoundApp_PlayEventSE");
static_assert(sizeof(SoundApp_PlayEventSE) == 0x000008, "Wrong size on SoundApp_PlayEventSE");
static_assert(offsetof(SoundApp_PlayEventSE, CueId) == 0x000000, "Member 'SoundApp_PlayEventSE::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayEventSE, BankNum) == 0x000004, "Member 'SoundApp_PlayEventSE::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.PlayEventVoice
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_PlayEventVoice final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_PlayEventVoice) == 0x000004, "Wrong alignment on SoundApp_PlayEventVoice");
static_assert(sizeof(SoundApp_PlayEventVoice) == 0x000008, "Wrong size on SoundApp_PlayEventVoice");
static_assert(offsetof(SoundApp_PlayEventVoice, CueId) == 0x000000, "Member 'SoundApp_PlayEventVoice::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayEventVoice, BankNum) == 0x000004, "Member 'SoundApp_PlayEventVoice::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.PlayEventVoiceWithLipsync
// 0x0010 (0x0010 - 0x0000)
struct SoundApp_PlayEventVoiceWithLipsync final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_PlayEventVoiceWithLipsync) == 0x000004, "Wrong alignment on SoundApp_PlayEventVoiceWithLipsync");
static_assert(sizeof(SoundApp_PlayEventVoiceWithLipsync) == 0x000010, "Wrong size on SoundApp_PlayEventVoiceWithLipsync");
static_assert(offsetof(SoundApp_PlayEventVoiceWithLipsync, CharcterCategoryType) == 0x000000, "Member 'SoundApp_PlayEventVoiceWithLipsync::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayEventVoiceWithLipsync, CharaIndexID) == 0x000004, "Member 'SoundApp_PlayEventVoiceWithLipsync::CharaIndexID' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayEventVoiceWithLipsync, CueId) == 0x000008, "Member 'SoundApp_PlayEventVoiceWithLipsync::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayEventVoiceWithLipsync, BankNum) == 0x00000C, "Member 'SoundApp_PlayEventVoiceWithLipsync::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.PlayEventVoiceWithSimpleLipCustomParam
// 0x0038 (0x0038 - 0x0000)
struct SoundApp_PlayEventVoiceWithSimpleLipCustomParam final
{
public:
	struct FCharacterSimpleLipsAnimAppParam       SimpleLipsParam;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_PlayEventVoiceWithSimpleLipCustomParam) == 0x000008, "Wrong alignment on SoundApp_PlayEventVoiceWithSimpleLipCustomParam");
static_assert(sizeof(SoundApp_PlayEventVoiceWithSimpleLipCustomParam) == 0x000038, "Wrong size on SoundApp_PlayEventVoiceWithSimpleLipCustomParam");
static_assert(offsetof(SoundApp_PlayEventVoiceWithSimpleLipCustomParam, SimpleLipsParam) == 0x000000, "Member 'SoundApp_PlayEventVoiceWithSimpleLipCustomParam::SimpleLipsParam' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayEventVoiceWithSimpleLipCustomParam, CueId) == 0x000030, "Member 'SoundApp_PlayEventVoiceWithSimpleLipCustomParam::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayEventVoiceWithSimpleLipCustomParam, BankNum) == 0x000034, "Member 'SoundApp_PlayEventVoiceWithSimpleLipCustomParam::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.PlayFacilityVoice
// 0x0014 (0x0014 - 0x0000)
struct SoundApp_PlayFacilityVoice final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAttenuator;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BankNum;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseLips;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_PlayFacilityVoice) == 0x000004, "Wrong alignment on SoundApp_PlayFacilityVoice");
static_assert(sizeof(SoundApp_PlayFacilityVoice) == 0x000014, "Wrong size on SoundApp_PlayFacilityVoice");
static_assert(offsetof(SoundApp_PlayFacilityVoice, CueId) == 0x000000, "Member 'SoundApp_PlayFacilityVoice::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayFacilityVoice, CharaIndexID) == 0x000004, "Member 'SoundApp_PlayFacilityVoice::CharaIndexID' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayFacilityVoice, UseAttenuator) == 0x000008, "Member 'SoundApp_PlayFacilityVoice::UseAttenuator' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayFacilityVoice, BankNum) == 0x00000C, "Member 'SoundApp_PlayFacilityVoice::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayFacilityVoice, UseLips) == 0x000010, "Member 'SoundApp_PlayFacilityVoice::UseLips' has a wrong offset!");

// Function xrd777.SoundApp.PlaySingleVoice
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_PlaySingleVoice final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_PlaySingleVoice) == 0x000004, "Wrong alignment on SoundApp_PlaySingleVoice");
static_assert(sizeof(SoundApp_PlaySingleVoice) == 0x000004, "Wrong size on SoundApp_PlaySingleVoice");
static_assert(offsetof(SoundApp_PlaySingleVoice, CueId) == 0x000000, "Member 'SoundApp_PlaySingleVoice::CueId' has a wrong offset!");

// Function xrd777.SoundApp.PlayVoiceWithLipsync
// 0x0014 (0x0014 - 0x0000)
struct SoundApp_PlayVoiceWithLipsync final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundMajorID;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_PlayVoiceWithLipsync) == 0x000004, "Wrong alignment on SoundApp_PlayVoiceWithLipsync");
static_assert(sizeof(SoundApp_PlayVoiceWithLipsync) == 0x000014, "Wrong size on SoundApp_PlayVoiceWithLipsync");
static_assert(offsetof(SoundApp_PlayVoiceWithLipsync, CharcterCategoryType) == 0x000000, "Member 'SoundApp_PlayVoiceWithLipsync::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayVoiceWithLipsync, CharaIndexID) == 0x000004, "Member 'SoundApp_PlayVoiceWithLipsync::CharaIndexID' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayVoiceWithLipsync, CueId) == 0x000008, "Member 'SoundApp_PlayVoiceWithLipsync::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayVoiceWithLipsync, SoundMajorID) == 0x00000C, "Member 'SoundApp_PlayVoiceWithLipsync::SoundMajorID' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayVoiceWithLipsync, BankNum) == 0x000010, "Member 'SoundApp_PlayVoiceWithLipsync::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.PlayVoiceWithSimpleLipCustomParam
// 0x0040 (0x0040 - 0x0000)
struct SoundApp_PlayVoiceWithSimpleLipCustomParam final
{
public:
	struct FCharacterSimpleLipsAnimAppParam       SimpleLipsParam;                                   // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoundMajorID;                                      // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_PlayVoiceWithSimpleLipCustomParam) == 0x000008, "Wrong alignment on SoundApp_PlayVoiceWithSimpleLipCustomParam");
static_assert(sizeof(SoundApp_PlayVoiceWithSimpleLipCustomParam) == 0x000040, "Wrong size on SoundApp_PlayVoiceWithSimpleLipCustomParam");
static_assert(offsetof(SoundApp_PlayVoiceWithSimpleLipCustomParam, SimpleLipsParam) == 0x000000, "Member 'SoundApp_PlayVoiceWithSimpleLipCustomParam::SimpleLipsParam' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayVoiceWithSimpleLipCustomParam, CueId) == 0x000030, "Member 'SoundApp_PlayVoiceWithSimpleLipCustomParam::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayVoiceWithSimpleLipCustomParam, SoundMajorID) == 0x000034, "Member 'SoundApp_PlayVoiceWithSimpleLipCustomParam::SoundMajorID' has a wrong offset!");
static_assert(offsetof(SoundApp_PlayVoiceWithSimpleLipCustomParam, BankNum) == 0x000038, "Member 'SoundApp_PlayVoiceWithSimpleLipCustomParam::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.ReleaseBackLogVoiceData
// 0x0010 (0x0010 - 0x0000)
struct SoundApp_ReleaseBackLogVoiceData final
{
public:
	class UGameInstance*                          GameInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_ReleaseBackLogVoiceData) == 0x000008, "Wrong alignment on SoundApp_ReleaseBackLogVoiceData");
static_assert(sizeof(SoundApp_ReleaseBackLogVoiceData) == 0x000010, "Wrong size on SoundApp_ReleaseBackLogVoiceData");
static_assert(offsetof(SoundApp_ReleaseBackLogVoiceData, GameInst) == 0x000000, "Member 'SoundApp_ReleaseBackLogVoiceData::GameInst' has a wrong offset!");
static_assert(offsetof(SoundApp_ReleaseBackLogVoiceData, BankNum) == 0x000008, "Member 'SoundApp_ReleaseBackLogVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_ReleaseBackLogVoiceData, ReturnValue) == 0x00000C, "Member 'SoundApp_ReleaseBackLogVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.ReleaseBattleEventVoiceData
// 0x0010 (0x0010 - 0x0000)
struct SoundApp_ReleaseBattleEventVoiceData final
{
public:
	class UGameInstance*                          GameInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_ReleaseBattleEventVoiceData) == 0x000008, "Wrong alignment on SoundApp_ReleaseBattleEventVoiceData");
static_assert(sizeof(SoundApp_ReleaseBattleEventVoiceData) == 0x000010, "Wrong size on SoundApp_ReleaseBattleEventVoiceData");
static_assert(offsetof(SoundApp_ReleaseBattleEventVoiceData, GameInst) == 0x000000, "Member 'SoundApp_ReleaseBattleEventVoiceData::GameInst' has a wrong offset!");
static_assert(offsetof(SoundApp_ReleaseBattleEventVoiceData, BankNum) == 0x000008, "Member 'SoundApp_ReleaseBattleEventVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_ReleaseBattleEventVoiceData, ReturnValue) == 0x00000C, "Member 'SoundApp_ReleaseBattleEventVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.ReleaseEventVoiceData
// 0x0010 (0x0010 - 0x0000)
struct SoundApp_ReleaseEventVoiceData final
{
public:
	class UGameInstance*                          GameInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_ReleaseEventVoiceData) == 0x000008, "Wrong alignment on SoundApp_ReleaseEventVoiceData");
static_assert(sizeof(SoundApp_ReleaseEventVoiceData) == 0x000010, "Wrong size on SoundApp_ReleaseEventVoiceData");
static_assert(offsetof(SoundApp_ReleaseEventVoiceData, GameInst) == 0x000000, "Member 'SoundApp_ReleaseEventVoiceData::GameInst' has a wrong offset!");
static_assert(offsetof(SoundApp_ReleaseEventVoiceData, BankNum) == 0x000008, "Member 'SoundApp_ReleaseEventVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_ReleaseEventVoiceData, ReturnValue) == 0x00000C, "Member 'SoundApp_ReleaseEventVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.ReleaseFacilityVoiceData
// 0x0010 (0x0010 - 0x0000)
struct SoundApp_ReleaseFacilityVoiceData final
{
public:
	class UGameInstance*                          GameInst;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_ReleaseFacilityVoiceData) == 0x000008, "Wrong alignment on SoundApp_ReleaseFacilityVoiceData");
static_assert(sizeof(SoundApp_ReleaseFacilityVoiceData) == 0x000010, "Wrong size on SoundApp_ReleaseFacilityVoiceData");
static_assert(offsetof(SoundApp_ReleaseFacilityVoiceData, GameInst) == 0x000000, "Member 'SoundApp_ReleaseFacilityVoiceData::GameInst' has a wrong offset!");
static_assert(offsetof(SoundApp_ReleaseFacilityVoiceData, BankNum) == 0x000008, "Member 'SoundApp_ReleaseFacilityVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_ReleaseFacilityVoiceData, ReturnValue) == 0x00000C, "Member 'SoundApp_ReleaseFacilityVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.ReqReadBackLogVoiceData
// 0x0018 (0x0018 - 0x0000)
struct SoundApp_ReqReadBackLogVoiceData final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_ReqReadBackLogVoiceData) == 0x000008, "Wrong alignment on SoundApp_ReqReadBackLogVoiceData");
static_assert(sizeof(SoundApp_ReqReadBackLogVoiceData) == 0x000018, "Wrong size on SoundApp_ReqReadBackLogVoiceData");
static_assert(offsetof(SoundApp_ReqReadBackLogVoiceData, Filename) == 0x000000, "Member 'SoundApp_ReqReadBackLogVoiceData::Filename' has a wrong offset!");
static_assert(offsetof(SoundApp_ReqReadBackLogVoiceData, BankNum) == 0x000010, "Member 'SoundApp_ReqReadBackLogVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_ReqReadBackLogVoiceData, ReturnValue) == 0x000014, "Member 'SoundApp_ReqReadBackLogVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.ReqReadBattleEventVoiceData
// 0x0018 (0x0018 - 0x0000)
struct SoundApp_ReqReadBattleEventVoiceData final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseLipsync;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_ReqReadBattleEventVoiceData) == 0x000008, "Wrong alignment on SoundApp_ReqReadBattleEventVoiceData");
static_assert(sizeof(SoundApp_ReqReadBattleEventVoiceData) == 0x000018, "Wrong size on SoundApp_ReqReadBattleEventVoiceData");
static_assert(offsetof(SoundApp_ReqReadBattleEventVoiceData, Filename) == 0x000000, "Member 'SoundApp_ReqReadBattleEventVoiceData::Filename' has a wrong offset!");
static_assert(offsetof(SoundApp_ReqReadBattleEventVoiceData, BankNum) == 0x000010, "Member 'SoundApp_ReqReadBattleEventVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_ReqReadBattleEventVoiceData, UseLipsync) == 0x000014, "Member 'SoundApp_ReqReadBattleEventVoiceData::UseLipsync' has a wrong offset!");
static_assert(offsetof(SoundApp_ReqReadBattleEventVoiceData, ReturnValue) == 0x000015, "Member 'SoundApp_ReqReadBattleEventVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.ReqReadEventVoiceData
// 0x0018 (0x0018 - 0x0000)
struct SoundApp_ReqReadEventVoiceData final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_ReqReadEventVoiceData) == 0x000008, "Wrong alignment on SoundApp_ReqReadEventVoiceData");
static_assert(sizeof(SoundApp_ReqReadEventVoiceData) == 0x000018, "Wrong size on SoundApp_ReqReadEventVoiceData");
static_assert(offsetof(SoundApp_ReqReadEventVoiceData, Filename) == 0x000000, "Member 'SoundApp_ReqReadEventVoiceData::Filename' has a wrong offset!");
static_assert(offsetof(SoundApp_ReqReadEventVoiceData, BankNum) == 0x000010, "Member 'SoundApp_ReqReadEventVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_ReqReadEventVoiceData, ReturnValue) == 0x000014, "Member 'SoundApp_ReqReadEventVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.ReqReadFacilityVoiceData
// 0x0018 (0x0018 - 0x0000)
struct SoundApp_ReqReadFacilityVoiceData final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_ReqReadFacilityVoiceData) == 0x000008, "Wrong alignment on SoundApp_ReqReadFacilityVoiceData");
static_assert(sizeof(SoundApp_ReqReadFacilityVoiceData) == 0x000018, "Wrong size on SoundApp_ReqReadFacilityVoiceData");
static_assert(offsetof(SoundApp_ReqReadFacilityVoiceData, Filename) == 0x000000, "Member 'SoundApp_ReqReadFacilityVoiceData::Filename' has a wrong offset!");
static_assert(offsetof(SoundApp_ReqReadFacilityVoiceData, BankNum) == 0x000010, "Member 'SoundApp_ReqReadFacilityVoiceData::BankNum' has a wrong offset!");
static_assert(offsetof(SoundApp_ReqReadFacilityVoiceData, ReturnValue) == 0x000014, "Member 'SoundApp_ReqReadFacilityVoiceData::ReturnValue' has a wrong offset!");

// Function xrd777.SoundApp.ResetSelectorLabel
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_ResetSelectorLabel final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_ResetSelectorLabel) == 0x000004, "Wrong alignment on SoundApp_ResetSelectorLabel");
static_assert(sizeof(SoundApp_ResetSelectorLabel) == 0x000008, "Wrong size on SoundApp_ResetSelectorLabel");
static_assert(offsetof(SoundApp_ResetSelectorLabel, PlayerMajorID) == 0x000000, "Member 'SoundApp_ResetSelectorLabel::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(SoundApp_ResetSelectorLabel, PlayerMinorID) == 0x000004, "Member 'SoundApp_ResetSelectorLabel::PlayerMinorID' has a wrong offset!");

// Function xrd777.SoundApp.SetAisacByNameBGM
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_SetAisacByNameBGM final
{
public:
	float                                         ControlValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_SetAisacByNameBGM) == 0x000004, "Wrong alignment on SoundApp_SetAisacByNameBGM");
static_assert(sizeof(SoundApp_SetAisacByNameBGM) == 0x000004, "Wrong size on SoundApp_SetAisacByNameBGM");
static_assert(offsetof(SoundApp_SetAisacByNameBGM, ControlValue) == 0x000000, "Member 'SoundApp_SetAisacByNameBGM::ControlValue' has a wrong offset!");

// Function xrd777.SoundApp.SetAisacByNameSE
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_SetAisacByNameSE final
{
public:
	float                                         ControlValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_SetAisacByNameSE) == 0x000004, "Wrong alignment on SoundApp_SetAisacByNameSE");
static_assert(sizeof(SoundApp_SetAisacByNameSE) == 0x000004, "Wrong size on SoundApp_SetAisacByNameSE");
static_assert(offsetof(SoundApp_SetAisacByNameSE, ControlValue) == 0x000000, "Member 'SoundApp_SetAisacByNameSE::ControlValue' has a wrong offset!");

// Function xrd777.SoundApp.SetAisacByNameVOICE
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_SetAisacByNameVOICE final
{
public:
	float                                         ControlValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_SetAisacByNameVOICE) == 0x000004, "Wrong alignment on SoundApp_SetAisacByNameVOICE");
static_assert(sizeof(SoundApp_SetAisacByNameVOICE) == 0x000004, "Wrong size on SoundApp_SetAisacByNameVOICE");
static_assert(offsetof(SoundApp_SetAisacByNameVOICE, ControlValue) == 0x000000, "Member 'SoundApp_SetAisacByNameVOICE::ControlValue' has a wrong offset!");

// Function xrd777.SoundApp.SetPausePlayer
// 0x000C (0x000C - 0x0000)
struct SoundApp_SetPausePlayer final
{
public:
	int32                                         MajorId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinorId;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPause;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SoundApp_SetPausePlayer) == 0x000004, "Wrong alignment on SoundApp_SetPausePlayer");
static_assert(sizeof(SoundApp_SetPausePlayer) == 0x00000C, "Wrong size on SoundApp_SetPausePlayer");
static_assert(offsetof(SoundApp_SetPausePlayer, MajorId) == 0x000000, "Member 'SoundApp_SetPausePlayer::MajorId' has a wrong offset!");
static_assert(offsetof(SoundApp_SetPausePlayer, MinorId) == 0x000004, "Member 'SoundApp_SetPausePlayer::MinorId' has a wrong offset!");
static_assert(offsetof(SoundApp_SetPausePlayer, bPause) == 0x000008, "Member 'SoundApp_SetPausePlayer::bPause' has a wrong offset!");

// Function xrd777.SoundApp.SetPausePlayerAll
// 0x0001 (0x0001 - 0x0000)
struct SoundApp_SetPausePlayerAll final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_SetPausePlayerAll) == 0x000001, "Wrong alignment on SoundApp_SetPausePlayerAll");
static_assert(sizeof(SoundApp_SetPausePlayerAll) == 0x000001, "Wrong size on SoundApp_SetPausePlayerAll");
static_assert(offsetof(SoundApp_SetPausePlayerAll, bPause) == 0x000000, "Member 'SoundApp_SetPausePlayerAll::bPause' has a wrong offset!");

// Function xrd777.SoundApp.SetSelectorLabel
// 0x0028 (0x0028 - 0x0000)
struct SoundApp_SetSelectorLabel final
{
public:
	int32                                         PlayerMajorID;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerMinorID;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Selector;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_SetSelectorLabel) == 0x000008, "Wrong alignment on SoundApp_SetSelectorLabel");
static_assert(sizeof(SoundApp_SetSelectorLabel) == 0x000028, "Wrong size on SoundApp_SetSelectorLabel");
static_assert(offsetof(SoundApp_SetSelectorLabel, PlayerMajorID) == 0x000000, "Member 'SoundApp_SetSelectorLabel::PlayerMajorID' has a wrong offset!");
static_assert(offsetof(SoundApp_SetSelectorLabel, PlayerMinorID) == 0x000004, "Member 'SoundApp_SetSelectorLabel::PlayerMinorID' has a wrong offset!");
static_assert(offsetof(SoundApp_SetSelectorLabel, Selector) == 0x000008, "Member 'SoundApp_SetSelectorLabel::Selector' has a wrong offset!");
static_assert(offsetof(SoundApp_SetSelectorLabel, Label) == 0x000018, "Member 'SoundApp_SetSelectorLabel::Label' has a wrong offset!");

// Function xrd777.SoundApp.SetSystemPausePlayerAll
// 0x0001 (0x0001 - 0x0000)
struct SoundApp_SetSystemPausePlayerAll final
{
public:
	bool                                          bPause;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_SetSystemPausePlayerAll) == 0x000001, "Wrong alignment on SoundApp_SetSystemPausePlayerAll");
static_assert(sizeof(SoundApp_SetSystemPausePlayerAll) == 0x000001, "Wrong size on SoundApp_SetSystemPausePlayerAll");
static_assert(offsetof(SoundApp_SetSystemPausePlayerAll, bPause) == 0x000000, "Member 'SoundApp_SetSystemPausePlayerAll::bPause' has a wrong offset!");

// Function xrd777.SoundApp.StopBackLogVoice
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_StopBackLogVoice final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_StopBackLogVoice) == 0x000004, "Wrong alignment on SoundApp_StopBackLogVoice");
static_assert(sizeof(SoundApp_StopBackLogVoice) == 0x000004, "Wrong size on SoundApp_StopBackLogVoice");
static_assert(offsetof(SoundApp_StopBackLogVoice, BankNum) == 0x000000, "Member 'SoundApp_StopBackLogVoice::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.StopBattleEventVoice
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_StopBattleEventVoice final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_StopBattleEventVoice) == 0x000004, "Wrong alignment on SoundApp_StopBattleEventVoice");
static_assert(sizeof(SoundApp_StopBattleEventVoice) == 0x000004, "Wrong size on SoundApp_StopBattleEventVoice");
static_assert(offsetof(SoundApp_StopBattleEventVoice, BankNum) == 0x000000, "Member 'SoundApp_StopBattleEventVoice::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.StopComSE
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_StopComSE final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_StopComSE) == 0x000004, "Wrong alignment on SoundApp_StopComSE");
static_assert(sizeof(SoundApp_StopComSE) == 0x000004, "Wrong size on SoundApp_StopComSE");
static_assert(offsetof(SoundApp_StopComSE, CueId) == 0x000000, "Member 'SoundApp_StopComSE::CueId' has a wrong offset!");

// Function xrd777.SoundApp.StopEventSE
// 0x0008 (0x0008 - 0x0000)
struct SoundApp_StopEventSE final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_StopEventSE) == 0x000004, "Wrong alignment on SoundApp_StopEventSE");
static_assert(sizeof(SoundApp_StopEventSE) == 0x000008, "Wrong size on SoundApp_StopEventSE");
static_assert(offsetof(SoundApp_StopEventSE, CueId) == 0x000000, "Member 'SoundApp_StopEventSE::CueId' has a wrong offset!");
static_assert(offsetof(SoundApp_StopEventSE, BankNum) == 0x000004, "Member 'SoundApp_StopEventSE::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.StopEventVoice
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_StopEventVoice final
{
public:
	int32                                         BankNum;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_StopEventVoice) == 0x000004, "Wrong alignment on SoundApp_StopEventVoice");
static_assert(sizeof(SoundApp_StopEventVoice) == 0x000004, "Wrong size on SoundApp_StopEventVoice");
static_assert(offsetof(SoundApp_StopEventVoice, BankNum) == 0x000000, "Member 'SoundApp_StopEventVoice::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.StopEventVoiceWithLipSync
// 0x000C (0x000C - 0x0000)
struct SoundApp_StopEventVoiceWithLipSync final
{
public:
	EAppCharCategoryType                          CharcterCategoryType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharaIndexID;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BankNum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_StopEventVoiceWithLipSync) == 0x000004, "Wrong alignment on SoundApp_StopEventVoiceWithLipSync");
static_assert(sizeof(SoundApp_StopEventVoiceWithLipSync) == 0x00000C, "Wrong size on SoundApp_StopEventVoiceWithLipSync");
static_assert(offsetof(SoundApp_StopEventVoiceWithLipSync, CharcterCategoryType) == 0x000000, "Member 'SoundApp_StopEventVoiceWithLipSync::CharcterCategoryType' has a wrong offset!");
static_assert(offsetof(SoundApp_StopEventVoiceWithLipSync, CharaIndexID) == 0x000004, "Member 'SoundApp_StopEventVoiceWithLipSync::CharaIndexID' has a wrong offset!");
static_assert(offsetof(SoundApp_StopEventVoiceWithLipSync, BankNum) == 0x000008, "Member 'SoundApp_StopEventVoiceWithLipSync::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.StopFacilityVoice
// 0x000C (0x000C - 0x0000)
struct SoundApp_StopFacilityVoice final
{
public:
	int32                                         CharaIndexID;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseAttenuator;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BankNum;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_StopFacilityVoice) == 0x000004, "Wrong alignment on SoundApp_StopFacilityVoice");
static_assert(sizeof(SoundApp_StopFacilityVoice) == 0x00000C, "Wrong size on SoundApp_StopFacilityVoice");
static_assert(offsetof(SoundApp_StopFacilityVoice, CharaIndexID) == 0x000000, "Member 'SoundApp_StopFacilityVoice::CharaIndexID' has a wrong offset!");
static_assert(offsetof(SoundApp_StopFacilityVoice, UseAttenuator) == 0x000004, "Member 'SoundApp_StopFacilityVoice::UseAttenuator' has a wrong offset!");
static_assert(offsetof(SoundApp_StopFacilityVoice, BankNum) == 0x000008, "Member 'SoundApp_StopFacilityVoice::BankNum' has a wrong offset!");

// Function xrd777.SoundApp.StopSingleVoice
// 0x0004 (0x0004 - 0x0000)
struct SoundApp_StopSingleVoice final
{
public:
	int32                                         CueId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundApp_StopSingleVoice) == 0x000004, "Wrong alignment on SoundApp_StopSingleVoice");
static_assert(sizeof(SoundApp_StopSingleVoice) == 0x000004, "Wrong size on SoundApp_StopSingleVoice");
static_assert(offsetof(SoundApp_StopSingleVoice, CueId) == 0x000000, "Member 'SoundApp_StopSingleVoice::CueId' has a wrong offset!");

// Function xrd777.SoundMonitorReadyAsyncFunction.SoundMonitorReadyAsyncFunction
// 0x0010 (0x0010 - 0x0000)
struct SoundMonitorReadyAsyncFunction_SoundMonitorReadyAsyncFunction final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundMonitorReadyAsyncFunction*        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundMonitorReadyAsyncFunction_SoundMonitorReadyAsyncFunction) == 0x000008, "Wrong alignment on SoundMonitorReadyAsyncFunction_SoundMonitorReadyAsyncFunction");
static_assert(sizeof(SoundMonitorReadyAsyncFunction_SoundMonitorReadyAsyncFunction) == 0x000010, "Wrong size on SoundMonitorReadyAsyncFunction_SoundMonitorReadyAsyncFunction");
static_assert(offsetof(SoundMonitorReadyAsyncFunction_SoundMonitorReadyAsyncFunction, WorldContextObject) == 0x000000, "Member 'SoundMonitorReadyAsyncFunction_SoundMonitorReadyAsyncFunction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundMonitorReadyAsyncFunction_SoundMonitorReadyAsyncFunction, ReturnValue) == 0x000008, "Member 'SoundMonitorReadyAsyncFunction_SoundMonitorReadyAsyncFunction::ReturnValue' has a wrong offset!");

// Function xrd777.SoundMonitorACBReadAsyncFunction.SoundMonitorACBReadAsyncFunction
// 0x0018 (0x0018 - 0x0000)
struct SoundMonitorACBReadAsyncFunction_SoundMonitorACBReadAsyncFunction final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AcbBankID;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundMonitorACBReadAsyncFunction*      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundMonitorACBReadAsyncFunction_SoundMonitorACBReadAsyncFunction) == 0x000008, "Wrong alignment on SoundMonitorACBReadAsyncFunction_SoundMonitorACBReadAsyncFunction");
static_assert(sizeof(SoundMonitorACBReadAsyncFunction_SoundMonitorACBReadAsyncFunction) == 0x000018, "Wrong size on SoundMonitorACBReadAsyncFunction_SoundMonitorACBReadAsyncFunction");
static_assert(offsetof(SoundMonitorACBReadAsyncFunction_SoundMonitorACBReadAsyncFunction, WorldContextObject) == 0x000000, "Member 'SoundMonitorACBReadAsyncFunction_SoundMonitorACBReadAsyncFunction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SoundMonitorACBReadAsyncFunction_SoundMonitorACBReadAsyncFunction, AcbBankID) == 0x000008, "Member 'SoundMonitorACBReadAsyncFunction_SoundMonitorACBReadAsyncFunction::AcbBankID' has a wrong offset!");
static_assert(offsetof(SoundMonitorACBReadAsyncFunction_SoundMonitorACBReadAsyncFunction, ReturnValue) == 0x000010, "Member 'SoundMonitorACBReadAsyncFunction_SoundMonitorACBReadAsyncFunction::ReturnValue' has a wrong offset!");

// Function xrd777.soundTestGameInstance.GetFileManagerControl
// 0x0008 (0x0008 - 0x0000)
struct SoundTestGameInstance_GetFileManagerControl final
{
public:
	class UPakFileManagerControl*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundTestGameInstance_GetFileManagerControl) == 0x000008, "Wrong alignment on SoundTestGameInstance_GetFileManagerControl");
static_assert(sizeof(SoundTestGameInstance_GetFileManagerControl) == 0x000008, "Wrong size on SoundTestGameInstance_GetFileManagerControl");
static_assert(offsetof(SoundTestGameInstance_GetFileManagerControl, ReturnValue) == 0x000000, "Member 'SoundTestGameInstance_GetFileManagerControl::ReturnValue' has a wrong offset!");

// Function xrd777.soundTestGameInstance.GetPlayAdxControl
// 0x0008 (0x0008 - 0x0000)
struct SoundTestGameInstance_GetPlayAdxControl final
{
public:
	class UPlayAdxControl*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoundTestGameInstance_GetPlayAdxControl) == 0x000008, "Wrong alignment on SoundTestGameInstance_GetPlayAdxControl");
static_assert(sizeof(SoundTestGameInstance_GetPlayAdxControl) == 0x000008, "Wrong size on SoundTestGameInstance_GetPlayAdxControl");
static_assert(offsetof(SoundTestGameInstance_GetPlayAdxControl, ReturnValue) == 0x000000, "Member 'SoundTestGameInstance_GetPlayAdxControl::ReturnValue' has a wrong offset!");

// Function xrd777.StaffRoll.Start
// 0x0004 (0x0004 - 0x0000)
struct StaffRoll_Start final
{
public:
	int16                                         Type;                                              // 0x0000(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RoundFlg;                                          // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRoll_Start) == 0x000002, "Wrong alignment on StaffRoll_Start");
static_assert(sizeof(StaffRoll_Start) == 0x000004, "Wrong size on StaffRoll_Start");
static_assert(offsetof(StaffRoll_Start, Type) == 0x000000, "Member 'StaffRoll_Start::Type' has a wrong offset!");
static_assert(offsetof(StaffRoll_Start, RoundFlg) == 0x000002, "Member 'StaffRoll_Start::RoundFlg' has a wrong offset!");
static_assert(offsetof(StaffRoll_Start, ReturnValue) == 0x000003, "Member 'StaffRoll_Start::ReturnValue' has a wrong offset!");

// Function xrd777.StaffRoll.Update
// 0x0004 (0x0004 - 0x0000)
struct StaffRoll_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StaffRoll_Update) == 0x000004, "Wrong alignment on StaffRoll_Update");
static_assert(sizeof(StaffRoll_Update) == 0x000004, "Wrong size on StaffRoll_Update");
static_assert(offsetof(StaffRoll_Update, DeltaTime) == 0x000000, "Member 'StaffRoll_Update::DeltaTime' has a wrong offset!");

// Function xrd777.UICmmRankUpBG.InitSettingMaterialBG
// 0x0008 (0x0008 - 0x0000)
struct UICmmRankUpBG_InitSettingMaterialBG final
{
public:
	class UMaterialInstance*                      Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpBG_InitSettingMaterialBG) == 0x000008, "Wrong alignment on UICmmRankUpBG_InitSettingMaterialBG");
static_assert(sizeof(UICmmRankUpBG_InitSettingMaterialBG) == 0x000008, "Wrong size on UICmmRankUpBG_InitSettingMaterialBG");
static_assert(offsetof(UICmmRankUpBG_InitSettingMaterialBG, Material) == 0x000000, "Member 'UICmmRankUpBG_InitSettingMaterialBG::Material' has a wrong offset!");

// Function xrd777.UICmmRankUpBG.UICmmBGCapture
// 0x0001 (0x0001 - 0x0000)
struct UICmmRankUpBG_UICmmBGCapture final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpBG_UICmmBGCapture) == 0x000001, "Wrong alignment on UICmmRankUpBG_UICmmBGCapture");
static_assert(sizeof(UICmmRankUpBG_UICmmBGCapture) == 0x000001, "Wrong size on UICmmRankUpBG_UICmmBGCapture");
static_assert(offsetof(UICmmRankUpBG_UICmmBGCapture, ReturnValue) == 0x000000, "Member 'UICmmRankUpBG_UICmmBGCapture::ReturnValue' has a wrong offset!");

// Function xrd777.UICmmRankUpBG.UICmmDrawBG_1
// 0x0008 (0x0008 - 0x0000)
struct UICmmRankUpBG_UICmmDrawBG_1 final
{
public:
	struct FColor                                 Top;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Bottom;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpBG_UICmmDrawBG_1) == 0x000004, "Wrong alignment on UICmmRankUpBG_UICmmDrawBG_1");
static_assert(sizeof(UICmmRankUpBG_UICmmDrawBG_1) == 0x000008, "Wrong size on UICmmRankUpBG_UICmmDrawBG_1");
static_assert(offsetof(UICmmRankUpBG_UICmmDrawBG_1, Top) == 0x000000, "Member 'UICmmRankUpBG_UICmmDrawBG_1::Top' has a wrong offset!");
static_assert(offsetof(UICmmRankUpBG_UICmmDrawBG_1, Bottom) == 0x000004, "Member 'UICmmRankUpBG_UICmmDrawBG_1::Bottom' has a wrong offset!");

// Function xrd777.UICmmRankUpBG.UICmmDrawBG_2
// 0x0008 (0x0008 - 0x0000)
struct UICmmRankUpBG_UICmmDrawBG_2 final
{
public:
	struct FColor                                 Top;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Bottom;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpBG_UICmmDrawBG_2) == 0x000004, "Wrong alignment on UICmmRankUpBG_UICmmDrawBG_2");
static_assert(sizeof(UICmmRankUpBG_UICmmDrawBG_2) == 0x000008, "Wrong size on UICmmRankUpBG_UICmmDrawBG_2");
static_assert(offsetof(UICmmRankUpBG_UICmmDrawBG_2, Top) == 0x000000, "Member 'UICmmRankUpBG_UICmmDrawBG_2::Top' has a wrong offset!");
static_assert(offsetof(UICmmRankUpBG_UICmmDrawBG_2, Bottom) == 0x000004, "Member 'UICmmRankUpBG_UICmmDrawBG_2::Bottom' has a wrong offset!");

// Function xrd777.UICmmRankUpBG.UICmmDrawBG_3
// 0x0008 (0x0008 - 0x0000)
struct UICmmRankUpBG_UICmmDrawBG_3 final
{
public:
	struct FColor                                 Top;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Bottom;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpBG_UICmmDrawBG_3) == 0x000004, "Wrong alignment on UICmmRankUpBG_UICmmDrawBG_3");
static_assert(sizeof(UICmmRankUpBG_UICmmDrawBG_3) == 0x000008, "Wrong size on UICmmRankUpBG_UICmmDrawBG_3");
static_assert(offsetof(UICmmRankUpBG_UICmmDrawBG_3, Top) == 0x000000, "Member 'UICmmRankUpBG_UICmmDrawBG_3::Top' has a wrong offset!");
static_assert(offsetof(UICmmRankUpBG_UICmmDrawBG_3, Bottom) == 0x000004, "Member 'UICmmRankUpBG_UICmmDrawBG_3::Bottom' has a wrong offset!");

// Function xrd777.UICmmRankUpBG.UICmmDrawBG_4
// 0x0004 (0x0004 - 0x0000)
struct UICmmRankUpBG_UICmmDrawBG_4 final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpBG_UICmmDrawBG_4) == 0x000004, "Wrong alignment on UICmmRankUpBG_UICmmDrawBG_4");
static_assert(sizeof(UICmmRankUpBG_UICmmDrawBG_4) == 0x000004, "Wrong size on UICmmRankUpBG_UICmmDrawBG_4");
static_assert(offsetof(UICmmRankUpBG_UICmmDrawBG_4, Color) == 0x000000, "Member 'UICmmRankUpBG_UICmmDrawBG_4::Color' has a wrong offset!");

// Function xrd777.UICmmRankUpBG.Update
// 0x0004 (0x0004 - 0x0000)
struct UICmmRankUpBG_Update final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICmmRankUpBG_Update) == 0x000004, "Wrong alignment on UICmmRankUpBG_Update");
static_assert(sizeof(UICmmRankUpBG_Update) == 0x000004, "Wrong size on UICmmRankUpBG_Update");
static_assert(offsetof(UICmmRankUpBG_Update, InDeltaTime) == 0x000000, "Member 'UICmmRankUpBG_Update::InDeltaTime' has a wrong offset!");

// Function xrd777.UIDebugDraw.OnFinishedScrDebug
// 0x0004 (0x0004 - 0x0000)
struct UIDebugDraw_OnFinishedScrDebug final
{
public:
	int32                                         ExitType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDebugDraw_OnFinishedScrDebug) == 0x000004, "Wrong alignment on UIDebugDraw_OnFinishedScrDebug");
static_assert(sizeof(UIDebugDraw_OnFinishedScrDebug) == 0x000004, "Wrong size on UIDebugDraw_OnFinishedScrDebug");
static_assert(offsetof(UIDebugDraw_OnFinishedScrDebug, ExitType) == 0x000000, "Member 'UIDebugDraw_OnFinishedScrDebug::ExitType' has a wrong offset!");

// Function xrd777.NameEntry.OnFinishedScr
// 0x0004 (0x0004 - 0x0000)
struct NameEntry_OnFinishedScr final
{
public:
	int32                                         ExitType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NameEntry_OnFinishedScr) == 0x000004, "Wrong alignment on NameEntry_OnFinishedScr");
static_assert(sizeof(NameEntry_OnFinishedScr) == 0x000004, "Wrong size on NameEntry_OnFinishedScr");
static_assert(offsetof(NameEntry_OnFinishedScr, ExitType) == 0x000000, "Member 'NameEntry_OnFinishedScr::ExitType' has a wrong offset!");

// Function xrd777.UIPersonaModelActor.GetSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct UIPersonaModelActor_GetSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPersonaModelActor_GetSkeletalMesh) == 0x000008, "Wrong alignment on UIPersonaModelActor_GetSkeletalMesh");
static_assert(sizeof(UIPersonaModelActor_GetSkeletalMesh) == 0x000008, "Wrong size on UIPersonaModelActor_GetSkeletalMesh");
static_assert(offsetof(UIPersonaModelActor_GetSkeletalMesh, ReturnValue) == 0x000000, "Member 'UIPersonaModelActor_GetSkeletalMesh::ReturnValue' has a wrong offset!");

// Function xrd777.PersonaPreviewWorldUpdater.CheckPlayAnimation
// 0x0008 (0x0008 - 0x0000)
struct PersonaPreviewWorldUpdater_CheckPlayAnimation final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaPreviewWorldUpdater_CheckPlayAnimation) == 0x000008, "Wrong alignment on PersonaPreviewWorldUpdater_CheckPlayAnimation");
static_assert(sizeof(PersonaPreviewWorldUpdater_CheckPlayAnimation) == 0x000008, "Wrong size on PersonaPreviewWorldUpdater_CheckPlayAnimation");
static_assert(offsetof(PersonaPreviewWorldUpdater_CheckPlayAnimation, Actor) == 0x000000, "Member 'PersonaPreviewWorldUpdater_CheckPlayAnimation::Actor' has a wrong offset!");

// Function xrd777.PersonaPreviewWorldUpdater.RequestAnimation
// 0x0010 (0x0010 - 0x0000)
struct PersonaPreviewWorldUpdater_RequestAnimation final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPersonaStatusModelAnim                       Anim;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PersonaPreviewWorldUpdater_RequestAnimation) == 0x000008, "Wrong alignment on PersonaPreviewWorldUpdater_RequestAnimation");
static_assert(sizeof(PersonaPreviewWorldUpdater_RequestAnimation) == 0x000010, "Wrong size on PersonaPreviewWorldUpdater_RequestAnimation");
static_assert(offsetof(PersonaPreviewWorldUpdater_RequestAnimation, Actor) == 0x000000, "Member 'PersonaPreviewWorldUpdater_RequestAnimation::Actor' has a wrong offset!");
static_assert(offsetof(PersonaPreviewWorldUpdater_RequestAnimation, Anim) == 0x000008, "Member 'PersonaPreviewWorldUpdater_RequestAnimation::Anim' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawAttribute
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawAttribute final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawAttribute) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawAttribute");
static_assert(sizeof(PersonaStatusDraw_DrawAttribute) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawAttribute");
static_assert(offsetof(PersonaStatusDraw_DrawAttribute, X) == 0x000000, "Member 'PersonaStatusDraw_DrawAttribute::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawAttribute, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawAttribute::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawAttribute, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawAttribute::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawCombinePersona
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawCombinePersona final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawCombinePersona) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawCombinePersona");
static_assert(sizeof(PersonaStatusDraw_DrawCombinePersona) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawCombinePersona");
static_assert(offsetof(PersonaStatusDraw_DrawCombinePersona, X) == 0x000000, "Member 'PersonaStatusDraw_DrawCombinePersona::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawCombinePersona, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawCombinePersona::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawCombinePersona, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawCombinePersona::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawCombinePersonaInfo
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawCombinePersonaInfo final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawCombinePersonaInfo) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawCombinePersonaInfo");
static_assert(sizeof(PersonaStatusDraw_DrawCombinePersonaInfo) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawCombinePersonaInfo");
static_assert(offsetof(PersonaStatusDraw_DrawCombinePersonaInfo, X) == 0x000000, "Member 'PersonaStatusDraw_DrawCombinePersonaInfo::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawCombinePersonaInfo, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawCombinePersonaInfo::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawCombinePersonaInfo, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawCombinePersonaInfo::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawCommuBonus
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawCommuBonus final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawCommuBonus) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawCommuBonus");
static_assert(sizeof(PersonaStatusDraw_DrawCommuBonus) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawCommuBonus");
static_assert(offsetof(PersonaStatusDraw_DrawCommuBonus, X) == 0x000000, "Member 'PersonaStatusDraw_DrawCommuBonus::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawCommuBonus, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawCommuBonus::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawCommuBonus, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawCommuBonus::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawConceptionInfo
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawConceptionInfo final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawConceptionInfo) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawConceptionInfo");
static_assert(sizeof(PersonaStatusDraw_DrawConceptionInfo) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawConceptionInfo");
static_assert(offsetof(PersonaStatusDraw_DrawConceptionInfo, X) == 0x000000, "Member 'PersonaStatusDraw_DrawConceptionInfo::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawConceptionInfo, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawConceptionInfo::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawConceptionInfo, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawConceptionInfo::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawDefalutConception
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawDefalutConception final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawDefalutConception) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawDefalutConception");
static_assert(sizeof(PersonaStatusDraw_DrawDefalutConception) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawDefalutConception");
static_assert(offsetof(PersonaStatusDraw_DrawDefalutConception, X) == 0x000000, "Member 'PersonaStatusDraw_DrawDefalutConception::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefalutConception, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawDefalutConception::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefalutConception, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawDefalutConception::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawDefalutSkillList
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawDefalutSkillList final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawDefalutSkillList) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawDefalutSkillList");
static_assert(sizeof(PersonaStatusDraw_DrawDefalutSkillList) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawDefalutSkillList");
static_assert(offsetof(PersonaStatusDraw_DrawDefalutSkillList, X) == 0x000000, "Member 'PersonaStatusDraw_DrawDefalutSkillList::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefalutSkillList, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawDefalutSkillList::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefalutSkillList, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawDefalutSkillList::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawDefaultCommentary
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawDefaultCommentary final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawDefaultCommentary) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawDefaultCommentary");
static_assert(sizeof(PersonaStatusDraw_DrawDefaultCommentary) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawDefaultCommentary");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultCommentary, X) == 0x000000, "Member 'PersonaStatusDraw_DrawDefaultCommentary::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultCommentary, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawDefaultCommentary::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultCommentary, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawDefaultCommentary::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawDefaultPersona
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawDefaultPersona final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawDefaultPersona) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawDefaultPersona");
static_assert(sizeof(PersonaStatusDraw_DrawDefaultPersona) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawDefaultPersona");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultPersona, X) == 0x000000, "Member 'PersonaStatusDraw_DrawDefaultPersona::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultPersona, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawDefaultPersona::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultPersona, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawDefaultPersona::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawDefaultPersonaInfo
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawDefaultPersonaInfo final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawDefaultPersonaInfo) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawDefaultPersonaInfo");
static_assert(sizeof(PersonaStatusDraw_DrawDefaultPersonaInfo) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawDefaultPersonaInfo");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultPersonaInfo, X) == 0x000000, "Member 'PersonaStatusDraw_DrawDefaultPersonaInfo::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultPersonaInfo, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawDefaultPersonaInfo::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultPersonaInfo, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawDefaultPersonaInfo::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawDefaultPersonaInfoBackground
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawDefaultPersonaInfoBackground final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawDefaultPersonaInfoBackground) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawDefaultPersonaInfoBackground");
static_assert(sizeof(PersonaStatusDraw_DrawDefaultPersonaInfoBackground) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawDefaultPersonaInfoBackground");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultPersonaInfoBackground, X) == 0x000000, "Member 'PersonaStatusDraw_DrawDefaultPersonaInfoBackground::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultPersonaInfoBackground, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawDefaultPersonaInfoBackground::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultPersonaInfoBackground, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawDefaultPersonaInfoBackground::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawDefaultStatusParameter
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawDefaultStatusParameter final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawDefaultStatusParameter) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawDefaultStatusParameter");
static_assert(sizeof(PersonaStatusDraw_DrawDefaultStatusParameter) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawDefaultStatusParameter");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultStatusParameter, X) == 0x000000, "Member 'PersonaStatusDraw_DrawDefaultStatusParameter::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultStatusParameter, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawDefaultStatusParameter::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDefaultStatusParameter, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawDefaultStatusParameter::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawDrawerConception
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawDrawerConception final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawDrawerConception) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawDrawerConception");
static_assert(sizeof(PersonaStatusDraw_DrawDrawerConception) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawDrawerConception");
static_assert(offsetof(PersonaStatusDraw_DrawDrawerConception, X) == 0x000000, "Member 'PersonaStatusDraw_DrawDrawerConception::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDrawerConception, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawDrawerConception::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDrawerConception, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawDrawerConception::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawDrawerConceptionInfo
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawDrawerConceptionInfo final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawDrawerConceptionInfo) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawDrawerConceptionInfo");
static_assert(sizeof(PersonaStatusDraw_DrawDrawerConceptionInfo) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawDrawerConceptionInfo");
static_assert(offsetof(PersonaStatusDraw_DrawDrawerConceptionInfo, X) == 0x000000, "Member 'PersonaStatusDraw_DrawDrawerConceptionInfo::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDrawerConceptionInfo, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawDrawerConceptionInfo::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDrawerConceptionInfo, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawDrawerConceptionInfo::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawDrawerPersona
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawDrawerPersona final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawDrawerPersona) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawDrawerPersona");
static_assert(sizeof(PersonaStatusDraw_DrawDrawerPersona) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawDrawerPersona");
static_assert(offsetof(PersonaStatusDraw_DrawDrawerPersona, X) == 0x000000, "Member 'PersonaStatusDraw_DrawDrawerPersona::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDrawerPersona, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawDrawerPersona::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawDrawerPersona, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawDrawerPersona::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawExpBonus
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawExpBonus final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawExpBonus) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawExpBonus");
static_assert(sizeof(PersonaStatusDraw_DrawExpBonus) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawExpBonus");
static_assert(offsetof(PersonaStatusDraw_DrawExpBonus, X) == 0x000000, "Member 'PersonaStatusDraw_DrawExpBonus::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawExpBonus, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawExpBonus::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawExpBonus, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawExpBonus::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawLevelUp
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawLevelUp final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawLevelUp) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawLevelUp");
static_assert(sizeof(PersonaStatusDraw_DrawLevelUp) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawLevelUp");
static_assert(offsetof(PersonaStatusDraw_DrawLevelUp, X) == 0x000000, "Member 'PersonaStatusDraw_DrawLevelUp::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawLevelUp, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawLevelUp::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawLevelUp, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawLevelUp::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawLevelUpConception
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawLevelUpConception final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawLevelUpConception) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawLevelUpConception");
static_assert(sizeof(PersonaStatusDraw_DrawLevelUpConception) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawLevelUpConception");
static_assert(offsetof(PersonaStatusDraw_DrawLevelUpConception, X) == 0x000000, "Member 'PersonaStatusDraw_DrawLevelUpConception::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawLevelUpConception, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawLevelUpConception::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawLevelUpConception, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawLevelUpConception::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawRegistryCommentary
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawRegistryCommentary final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawRegistryCommentary) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawRegistryCommentary");
static_assert(sizeof(PersonaStatusDraw_DrawRegistryCommentary) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawRegistryCommentary");
static_assert(offsetof(PersonaStatusDraw_DrawRegistryCommentary, X) == 0x000000, "Member 'PersonaStatusDraw_DrawRegistryCommentary::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawRegistryCommentary, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawRegistryCommentary::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawRegistryCommentary, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawRegistryCommentary::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawRegistryPersona
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawRegistryPersona final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawRegistryPersona) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawRegistryPersona");
static_assert(sizeof(PersonaStatusDraw_DrawRegistryPersona) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawRegistryPersona");
static_assert(offsetof(PersonaStatusDraw_DrawRegistryPersona, X) == 0x000000, "Member 'PersonaStatusDraw_DrawRegistryPersona::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawRegistryPersona, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawRegistryPersona::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawRegistryPersona, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawRegistryPersona::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawRegistryPersonaInfo
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawRegistryPersonaInfo final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawRegistryPersonaInfo) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawRegistryPersonaInfo");
static_assert(sizeof(PersonaStatusDraw_DrawRegistryPersonaInfo) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawRegistryPersonaInfo");
static_assert(offsetof(PersonaStatusDraw_DrawRegistryPersonaInfo, X) == 0x000000, "Member 'PersonaStatusDraw_DrawRegistryPersonaInfo::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawRegistryPersonaInfo, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawRegistryPersonaInfo::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawRegistryPersonaInfo, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawRegistryPersonaInfo::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawRegistrySkillList
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawRegistrySkillList final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawRegistrySkillList) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawRegistrySkillList");
static_assert(sizeof(PersonaStatusDraw_DrawRegistrySkillList) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawRegistrySkillList");
static_assert(offsetof(PersonaStatusDraw_DrawRegistrySkillList, X) == 0x000000, "Member 'PersonaStatusDraw_DrawRegistrySkillList::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawRegistrySkillList, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawRegistrySkillList::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawRegistrySkillList, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawRegistrySkillList::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawSkillCard
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawSkillCard final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawSkillCard) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawSkillCard");
static_assert(sizeof(PersonaStatusDraw_DrawSkillCard) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawSkillCard");
static_assert(offsetof(PersonaStatusDraw_DrawSkillCard, X) == 0x000000, "Member 'PersonaStatusDraw_DrawSkillCard::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawSkillCard, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawSkillCard::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawSkillCard, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawSkillCard::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawSkillInfo
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawSkillInfo final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawSkillInfo) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawSkillInfo");
static_assert(sizeof(PersonaStatusDraw_DrawSkillInfo) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawSkillInfo");
static_assert(offsetof(PersonaStatusDraw_DrawSkillInfo, X) == 0x000000, "Member 'PersonaStatusDraw_DrawSkillInfo::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawSkillInfo, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawSkillInfo::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawSkillInfo, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawSkillInfo::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.DrawSkillSelectList
// 0x000C (0x000C - 0x0000)
struct PersonaStatusDraw_DrawSkillSelectList final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_DrawSkillSelectList) == 0x000004, "Wrong alignment on PersonaStatusDraw_DrawSkillSelectList");
static_assert(sizeof(PersonaStatusDraw_DrawSkillSelectList) == 0x00000C, "Wrong size on PersonaStatusDraw_DrawSkillSelectList");
static_assert(offsetof(PersonaStatusDraw_DrawSkillSelectList, X) == 0x000000, "Member 'PersonaStatusDraw_DrawSkillSelectList::X' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawSkillSelectList, Y) == 0x000004, "Member 'PersonaStatusDraw_DrawSkillSelectList::Y' has a wrong offset!");
static_assert(offsetof(PersonaStatusDraw_DrawSkillSelectList, Angle) == 0x000008, "Member 'PersonaStatusDraw_DrawSkillSelectList::Angle' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.GetCaptureRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct PersonaStatusDraw_GetCaptureRenderTarget final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_GetCaptureRenderTarget) == 0x000008, "Wrong alignment on PersonaStatusDraw_GetCaptureRenderTarget");
static_assert(sizeof(PersonaStatusDraw_GetCaptureRenderTarget) == 0x000008, "Wrong size on PersonaStatusDraw_GetCaptureRenderTarget");
static_assert(offsetof(PersonaStatusDraw_GetCaptureRenderTarget, ReturnValue) == 0x000000, "Member 'PersonaStatusDraw_GetCaptureRenderTarget::ReturnValue' has a wrong offset!");

// Function xrd777.PersonaStatusDraw.Update
// 0x0004 (0x0004 - 0x0000)
struct PersonaStatusDraw_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PersonaStatusDraw_Update) == 0x000004, "Wrong alignment on PersonaStatusDraw_Update");
static_assert(sizeof(PersonaStatusDraw_Update) == 0x000004, "Wrong size on PersonaStatusDraw_Update");
static_assert(offsetof(PersonaStatusDraw_Update, DeltaTime) == 0x000000, "Member 'PersonaStatusDraw_Update::DeltaTime' has a wrong offset!");

// Function xrd777.UIPoetryDraw.GetAdjustedLayoutRippleTiming
// 0x000C (0x000C - 0x0000)
struct UIPoetryDraw_GetAdjustedLayoutRippleTiming final
{
public:
	EUIRippleTimeLayout                           InLayoutId;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InDefaultTiming;                                   // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPoetryDraw_GetAdjustedLayoutRippleTiming) == 0x000004, "Wrong alignment on UIPoetryDraw_GetAdjustedLayoutRippleTiming");
static_assert(sizeof(UIPoetryDraw_GetAdjustedLayoutRippleTiming) == 0x00000C, "Wrong size on UIPoetryDraw_GetAdjustedLayoutRippleTiming");
static_assert(offsetof(UIPoetryDraw_GetAdjustedLayoutRippleTiming, InLayoutId) == 0x000000, "Member 'UIPoetryDraw_GetAdjustedLayoutRippleTiming::InLayoutId' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_GetAdjustedLayoutRippleTiming, InDefaultTiming) == 0x000004, "Member 'UIPoetryDraw_GetAdjustedLayoutRippleTiming::InDefaultTiming' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_GetAdjustedLayoutRippleTiming, ReturnValue) == 0x000008, "Member 'UIPoetryDraw_GetAdjustedLayoutRippleTiming::ReturnValue' has a wrong offset!");

// Function xrd777.UIPoetryDraw.UIPoetryDrawRippleMax
// 0x0024 (0x0024 - 0x0000)
struct UIPoetryDraw_UIPoetryDrawRippleMax final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple1;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple2;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple3;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple4;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple5;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple6;                                           // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple7;                                           // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple8;                                           // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPoetryDraw_UIPoetryDrawRippleMax) == 0x000004, "Wrong alignment on UIPoetryDraw_UIPoetryDrawRippleMax");
static_assert(sizeof(UIPoetryDraw_UIPoetryDrawRippleMax) == 0x000024, "Wrong size on UIPoetryDraw_UIPoetryDrawRippleMax");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleMax, DeltaTime) == 0x000000, "Member 'UIPoetryDraw_UIPoetryDrawRippleMax::DeltaTime' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleMax, Ripple1) == 0x000004, "Member 'UIPoetryDraw_UIPoetryDrawRippleMax::Ripple1' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleMax, Ripple2) == 0x000008, "Member 'UIPoetryDraw_UIPoetryDrawRippleMax::Ripple2' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleMax, Ripple3) == 0x00000C, "Member 'UIPoetryDraw_UIPoetryDrawRippleMax::Ripple3' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleMax, Ripple4) == 0x000010, "Member 'UIPoetryDraw_UIPoetryDrawRippleMax::Ripple4' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleMax, Ripple5) == 0x000014, "Member 'UIPoetryDraw_UIPoetryDrawRippleMax::Ripple5' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleMax, Ripple6) == 0x000018, "Member 'UIPoetryDraw_UIPoetryDrawRippleMax::Ripple6' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleMax, Ripple7) == 0x00001C, "Member 'UIPoetryDraw_UIPoetryDrawRippleMax::Ripple7' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleMax, Ripple8) == 0x000020, "Member 'UIPoetryDraw_UIPoetryDrawRippleMax::Ripple8' has a wrong offset!");

// Function xrd777.UIPoetryDraw.UIPoetryDrawRippleOpen
// 0x0018 (0x0018 - 0x0000)
struct UIPoetryDraw_UIPoetryDrawRippleOpen final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple1;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple2;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple3;                                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple4;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ripple5;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPoetryDraw_UIPoetryDrawRippleOpen) == 0x000004, "Wrong alignment on UIPoetryDraw_UIPoetryDrawRippleOpen");
static_assert(sizeof(UIPoetryDraw_UIPoetryDrawRippleOpen) == 0x000018, "Wrong size on UIPoetryDraw_UIPoetryDrawRippleOpen");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleOpen, DeltaTime) == 0x000000, "Member 'UIPoetryDraw_UIPoetryDrawRippleOpen::DeltaTime' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleOpen, Ripple1) == 0x000004, "Member 'UIPoetryDraw_UIPoetryDrawRippleOpen::Ripple1' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleOpen, Ripple2) == 0x000008, "Member 'UIPoetryDraw_UIPoetryDrawRippleOpen::Ripple2' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleOpen, Ripple3) == 0x00000C, "Member 'UIPoetryDraw_UIPoetryDrawRippleOpen::Ripple3' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleOpen, Ripple4) == 0x000010, "Member 'UIPoetryDraw_UIPoetryDrawRippleOpen::Ripple4' has a wrong offset!");
static_assert(offsetof(UIPoetryDraw_UIPoetryDrawRippleOpen, Ripple5) == 0x000014, "Member 'UIPoetryDraw_UIPoetryDrawRippleOpen::Ripple5' has a wrong offset!");

// Function xrd777.UIPoetryDraw.UIPoetryGetParam
// 0x0004 (0x0004 - 0x0000)
struct UIPoetryDraw_UIPoetryGetParam final
{
public:
	float                                         EfBaseAlpha_;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPoetryDraw_UIPoetryGetParam) == 0x000004, "Wrong alignment on UIPoetryDraw_UIPoetryGetParam");
static_assert(sizeof(UIPoetryDraw_UIPoetryGetParam) == 0x000004, "Wrong size on UIPoetryDraw_UIPoetryGetParam");
static_assert(offsetof(UIPoetryDraw_UIPoetryGetParam, EfBaseAlpha_) == 0x000000, "Member 'UIPoetryDraw_UIPoetryGetParam::EfBaseAlpha_' has a wrong offset!");

// Function xrd777.UIPoetryDraw.UIPoetryIsRankMaxPoetry
// 0x0001 (0x0001 - 0x0000)
struct UIPoetryDraw_UIPoetryIsRankMaxPoetry final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPoetryDraw_UIPoetryIsRankMaxPoetry) == 0x000001, "Wrong alignment on UIPoetryDraw_UIPoetryIsRankMaxPoetry");
static_assert(sizeof(UIPoetryDraw_UIPoetryIsRankMaxPoetry) == 0x000001, "Wrong size on UIPoetryDraw_UIPoetryIsRankMaxPoetry");
static_assert(offsetof(UIPoetryDraw_UIPoetryIsRankMaxPoetry, ReturnValue) == 0x000000, "Member 'UIPoetryDraw_UIPoetryIsRankMaxPoetry::ReturnValue' has a wrong offset!");

// Function xrd777.UIPoetryDraw.Update
// 0x0004 (0x0004 - 0x0000)
struct UIPoetryDraw_Update final
{
public:
	float                                         InDeltaTime;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPoetryDraw_Update) == 0x000004, "Wrong alignment on UIPoetryDraw_Update");
static_assert(sizeof(UIPoetryDraw_Update) == 0x000004, "Wrong size on UIPoetryDraw_Update");
static_assert(offsetof(UIPoetryDraw_Update, InDeltaTime) == 0x000000, "Member 'UIPoetryDraw_Update::InDeltaTime' has a wrong offset!");

// Function xrd777.UIPreviewWorldUpdater.GetAllActorsOfClass
// 0x0020 (0x0020 - 0x0000)
struct UIPreviewWorldUpdater_GetAllActorsOfClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         OutActors;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPreviewWorldUpdater_GetAllActorsOfClass) == 0x000008, "Wrong alignment on UIPreviewWorldUpdater_GetAllActorsOfClass");
static_assert(sizeof(UIPreviewWorldUpdater_GetAllActorsOfClass) == 0x000020, "Wrong size on UIPreviewWorldUpdater_GetAllActorsOfClass");
static_assert(offsetof(UIPreviewWorldUpdater_GetAllActorsOfClass, WorldContextObject) == 0x000000, "Member 'UIPreviewWorldUpdater_GetAllActorsOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(UIPreviewWorldUpdater_GetAllActorsOfClass, ActorClass) == 0x000008, "Member 'UIPreviewWorldUpdater_GetAllActorsOfClass::ActorClass' has a wrong offset!");
static_assert(offsetof(UIPreviewWorldUpdater_GetAllActorsOfClass, OutActors) == 0x000010, "Member 'UIPreviewWorldUpdater_GetAllActorsOfClass::OutActors' has a wrong offset!");

// Function xrd777.UIRenderWidget.Initialize
// 0x0020 (0x0020 - 0x0000)
struct UIRenderWidget_Initialize final
{
public:
	class UTextureRenderTarget2D*                 InRenderTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            InRenderWidget;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              DrawSize;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InUseGamma;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InClearTarget;                                     // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureFilter                                InFilter;                                          // 0x001A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001B(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIRenderWidget_Initialize) == 0x000008, "Wrong alignment on UIRenderWidget_Initialize");
static_assert(sizeof(UIRenderWidget_Initialize) == 0x000020, "Wrong size on UIRenderWidget_Initialize");
static_assert(offsetof(UIRenderWidget_Initialize, InRenderTarget) == 0x000000, "Member 'UIRenderWidget_Initialize::InRenderTarget' has a wrong offset!");
static_assert(offsetof(UIRenderWidget_Initialize, InRenderWidget) == 0x000008, "Member 'UIRenderWidget_Initialize::InRenderWidget' has a wrong offset!");
static_assert(offsetof(UIRenderWidget_Initialize, DrawSize) == 0x000010, "Member 'UIRenderWidget_Initialize::DrawSize' has a wrong offset!");
static_assert(offsetof(UIRenderWidget_Initialize, InUseGamma) == 0x000018, "Member 'UIRenderWidget_Initialize::InUseGamma' has a wrong offset!");
static_assert(offsetof(UIRenderWidget_Initialize, InClearTarget) == 0x000019, "Member 'UIRenderWidget_Initialize::InClearTarget' has a wrong offset!");
static_assert(offsetof(UIRenderWidget_Initialize, InFilter) == 0x00001A, "Member 'UIRenderWidget_Initialize::InFilter' has a wrong offset!");
static_assert(offsetof(UIRenderWidget_Initialize, ReturnValue) == 0x00001B, "Member 'UIRenderWidget_Initialize::ReturnValue' has a wrong offset!");

// Function xrd777.UIRenderWidget.IsPause
// 0x0001 (0x0001 - 0x0000)
struct UIRenderWidget_IsPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRenderWidget_IsPause) == 0x000001, "Wrong alignment on UIRenderWidget_IsPause");
static_assert(sizeof(UIRenderWidget_IsPause) == 0x000001, "Wrong size on UIRenderWidget_IsPause");
static_assert(offsetof(UIRenderWidget_IsPause, ReturnValue) == 0x000000, "Member 'UIRenderWidget_IsPause::ReturnValue' has a wrong offset!");

// Function xrd777.UIRenderWidget.SetPause
// 0x0001 (0x0001 - 0x0000)
struct UIRenderWidget_SetPause final
{
public:
	bool                                          InPause;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRenderWidget_SetPause) == 0x000001, "Wrong alignment on UIRenderWidget_SetPause");
static_assert(sizeof(UIRenderWidget_SetPause) == 0x000001, "Wrong size on UIRenderWidget_SetPause");
static_assert(offsetof(UIRenderWidget_SetPause, InPause) == 0x000000, "Member 'UIRenderWidget_SetPause::InPause' has a wrong offset!");

// Function xrd777.UIRequest.OnFinishedScr
// 0x0004 (0x0004 - 0x0000)
struct UIRequest_OnFinishedScr final
{
public:
	int32                                         ExitType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRequest_OnFinishedScr) == 0x000004, "Wrong alignment on UIRequest_OnFinishedScr");
static_assert(sizeof(UIRequest_OnFinishedScr) == 0x000004, "Wrong size on UIRequest_OnFinishedScr");
static_assert(offsetof(UIRequest_OnFinishedScr, ExitType) == 0x000000, "Member 'UIRequest_OnFinishedScr::ExitType' has a wrong offset!");

// Function xrd777.UITestSpawnActor.AlwayFieldUpdate
// 0x0004 (0x0004 - 0x0000)
struct UITestSpawnActor_AlwayFieldUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITestSpawnActor_AlwayFieldUpdate) == 0x000004, "Wrong alignment on UITestSpawnActor_AlwayFieldUpdate");
static_assert(sizeof(UITestSpawnActor_AlwayFieldUpdate) == 0x000004, "Wrong size on UITestSpawnActor_AlwayFieldUpdate");
static_assert(offsetof(UITestSpawnActor_AlwayFieldUpdate, DeltaTime) == 0x000000, "Member 'UITestSpawnActor_AlwayFieldUpdate::DeltaTime' has a wrong offset!");

// Function xrd777.UITestSpawnActor.Update
// 0x0004 (0x0004 - 0x0000)
struct UITestSpawnActor_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITestSpawnActor_Update) == 0x000004, "Wrong alignment on UITestSpawnActor_Update");
static_assert(sizeof(UITestSpawnActor_Update) == 0x000004, "Wrong size on UITestSpawnActor_Update");
static_assert(offsetof(UITestSpawnActor_Update, DeltaTime) == 0x000000, "Member 'UITestSpawnActor_Update::DeltaTime' has a wrong offset!");

// Function xrd777.UITownMapCameraActor.Initialize
// 0x0070 (0x0070 - 0x0000)
struct UITownMapCameraActor_Initialize final
{
public:
	class AActor*                                 MainCamera;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SchoolCamera;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DormitoryCamera;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PortislandCamera;                                  // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PolonianmallCamera;                                // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 IwatodayCamera;                                    // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NaganakiCamera;                                    // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SchoolActor;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 DormitoryActor;                                    // 0x0040(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PortislandActor;                                   // 0x0048(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PolonianmallActor;                                 // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 IwatodayActor;                                     // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NaganakiActor;                                     // 0x0060(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 StartCamera;                                       // 0x0068(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITownMapCameraActor_Initialize) == 0x000008, "Wrong alignment on UITownMapCameraActor_Initialize");
static_assert(sizeof(UITownMapCameraActor_Initialize) == 0x000070, "Wrong size on UITownMapCameraActor_Initialize");
static_assert(offsetof(UITownMapCameraActor_Initialize, MainCamera) == 0x000000, "Member 'UITownMapCameraActor_Initialize::MainCamera' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, SchoolCamera) == 0x000008, "Member 'UITownMapCameraActor_Initialize::SchoolCamera' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, DormitoryCamera) == 0x000010, "Member 'UITownMapCameraActor_Initialize::DormitoryCamera' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, PortislandCamera) == 0x000018, "Member 'UITownMapCameraActor_Initialize::PortislandCamera' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, PolonianmallCamera) == 0x000020, "Member 'UITownMapCameraActor_Initialize::PolonianmallCamera' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, IwatodayCamera) == 0x000028, "Member 'UITownMapCameraActor_Initialize::IwatodayCamera' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, NaganakiCamera) == 0x000030, "Member 'UITownMapCameraActor_Initialize::NaganakiCamera' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, SchoolActor) == 0x000038, "Member 'UITownMapCameraActor_Initialize::SchoolActor' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, DormitoryActor) == 0x000040, "Member 'UITownMapCameraActor_Initialize::DormitoryActor' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, PortislandActor) == 0x000048, "Member 'UITownMapCameraActor_Initialize::PortislandActor' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, PolonianmallActor) == 0x000050, "Member 'UITownMapCameraActor_Initialize::PolonianmallActor' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, IwatodayActor) == 0x000058, "Member 'UITownMapCameraActor_Initialize::IwatodayActor' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, NaganakiActor) == 0x000060, "Member 'UITownMapCameraActor_Initialize::NaganakiActor' has a wrong offset!");
static_assert(offsetof(UITownMapCameraActor_Initialize, StartCamera) == 0x000068, "Member 'UITownMapCameraActor_Initialize::StartCamera' has a wrong offset!");

// Function xrd777.UITutorialDraw.DrawBackground
// 0x000C (0x000C - 0x0000)
struct UITutorialDraw_DrawBackground final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITutorialDraw_DrawBackground) == 0x000004, "Wrong alignment on UITutorialDraw_DrawBackground");
static_assert(sizeof(UITutorialDraw_DrawBackground) == 0x00000C, "Wrong size on UITutorialDraw_DrawBackground");
static_assert(offsetof(UITutorialDraw_DrawBackground, X) == 0x000000, "Member 'UITutorialDraw_DrawBackground::X' has a wrong offset!");
static_assert(offsetof(UITutorialDraw_DrawBackground, Y) == 0x000004, "Member 'UITutorialDraw_DrawBackground::Y' has a wrong offset!");
static_assert(offsetof(UITutorialDraw_DrawBackground, Angle) == 0x000008, "Member 'UITutorialDraw_DrawBackground::Angle' has a wrong offset!");

// Function xrd777.UITutorialDraw.DrawCategorys
// 0x000C (0x000C - 0x0000)
struct UITutorialDraw_DrawCategorys final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITutorialDraw_DrawCategorys) == 0x000004, "Wrong alignment on UITutorialDraw_DrawCategorys");
static_assert(sizeof(UITutorialDraw_DrawCategorys) == 0x00000C, "Wrong size on UITutorialDraw_DrawCategorys");
static_assert(offsetof(UITutorialDraw_DrawCategorys, X) == 0x000000, "Member 'UITutorialDraw_DrawCategorys::X' has a wrong offset!");
static_assert(offsetof(UITutorialDraw_DrawCategorys, Y) == 0x000004, "Member 'UITutorialDraw_DrawCategorys::Y' has a wrong offset!");
static_assert(offsetof(UITutorialDraw_DrawCategorys, Angle) == 0x000008, "Member 'UITutorialDraw_DrawCategorys::Angle' has a wrong offset!");

// Function xrd777.UITutorialDraw.DrawHelp
// 0x000C (0x000C - 0x0000)
struct UITutorialDraw_DrawHelp final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITutorialDraw_DrawHelp) == 0x000004, "Wrong alignment on UITutorialDraw_DrawHelp");
static_assert(sizeof(UITutorialDraw_DrawHelp) == 0x00000C, "Wrong size on UITutorialDraw_DrawHelp");
static_assert(offsetof(UITutorialDraw_DrawHelp, X) == 0x000000, "Member 'UITutorialDraw_DrawHelp::X' has a wrong offset!");
static_assert(offsetof(UITutorialDraw_DrawHelp, Y) == 0x000004, "Member 'UITutorialDraw_DrawHelp::Y' has a wrong offset!");
static_assert(offsetof(UITutorialDraw_DrawHelp, Angle) == 0x000008, "Member 'UITutorialDraw_DrawHelp::Angle' has a wrong offset!");

// Function xrd777.UITutorialDraw.DrawList
// 0x000C (0x000C - 0x0000)
struct UITutorialDraw_DrawList final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITutorialDraw_DrawList) == 0x000004, "Wrong alignment on UITutorialDraw_DrawList");
static_assert(sizeof(UITutorialDraw_DrawList) == 0x00000C, "Wrong size on UITutorialDraw_DrawList");
static_assert(offsetof(UITutorialDraw_DrawList, X) == 0x000000, "Member 'UITutorialDraw_DrawList::X' has a wrong offset!");
static_assert(offsetof(UITutorialDraw_DrawList, Y) == 0x000004, "Member 'UITutorialDraw_DrawList::Y' has a wrong offset!");
static_assert(offsetof(UITutorialDraw_DrawList, Angle) == 0x000008, "Member 'UITutorialDraw_DrawList::Angle' has a wrong offset!");

// Function xrd777.UIVelvetRoomOwner.OnFinishedScr
// 0x0004 (0x0004 - 0x0000)
struct UIVelvetRoomOwner_OnFinishedScr final
{
public:
	int32                                         ExitType;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomOwner_OnFinishedScr) == 0x000004, "Wrong alignment on UIVelvetRoomOwner_OnFinishedScr");
static_assert(sizeof(UIVelvetRoomOwner_OnFinishedScr) == 0x000004, "Wrong size on UIVelvetRoomOwner_OnFinishedScr");
static_assert(offsetof(UIVelvetRoomOwner_OnFinishedScr, ExitType) == 0x000000, "Member 'UIVelvetRoomOwner_OnFinishedScr::ExitType' has a wrong offset!");

// Function xrd777.UIVelvetRoomRequestDraw.DrawQuestDetails
// 0x0008 (0x0008 - 0x0000)
struct UIVelvetRoomRequestDraw_DrawQuestDetails final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomRequestDraw_DrawQuestDetails) == 0x000004, "Wrong alignment on UIVelvetRoomRequestDraw_DrawQuestDetails");
static_assert(sizeof(UIVelvetRoomRequestDraw_DrawQuestDetails) == 0x000008, "Wrong size on UIVelvetRoomRequestDraw_DrawQuestDetails");
static_assert(offsetof(UIVelvetRoomRequestDraw_DrawQuestDetails, X) == 0x000000, "Member 'UIVelvetRoomRequestDraw_DrawQuestDetails::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomRequestDraw_DrawQuestDetails, Y) == 0x000004, "Member 'UIVelvetRoomRequestDraw_DrawQuestDetails::Y' has a wrong offset!");

// Function xrd777.UIVelvetRoomRequestDraw.DrawQuestHelp
// 0x0008 (0x0008 - 0x0000)
struct UIVelvetRoomRequestDraw_DrawQuestHelp final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomRequestDraw_DrawQuestHelp) == 0x000004, "Wrong alignment on UIVelvetRoomRequestDraw_DrawQuestHelp");
static_assert(sizeof(UIVelvetRoomRequestDraw_DrawQuestHelp) == 0x000008, "Wrong size on UIVelvetRoomRequestDraw_DrawQuestHelp");
static_assert(offsetof(UIVelvetRoomRequestDraw_DrawQuestHelp, X) == 0x000000, "Member 'UIVelvetRoomRequestDraw_DrawQuestHelp::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomRequestDraw_DrawQuestHelp, Y) == 0x000004, "Member 'UIVelvetRoomRequestDraw_DrawQuestHelp::Y' has a wrong offset!");

// Function xrd777.UIVelvetRoomRequestDraw.DrawQuestItem
// 0x000C (0x000C - 0x0000)
struct UIVelvetRoomRequestDraw_DrawQuestItem final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomRequestDraw_DrawQuestItem) == 0x000004, "Wrong alignment on UIVelvetRoomRequestDraw_DrawQuestItem");
static_assert(sizeof(UIVelvetRoomRequestDraw_DrawQuestItem) == 0x00000C, "Wrong size on UIVelvetRoomRequestDraw_DrawQuestItem");
static_assert(offsetof(UIVelvetRoomRequestDraw_DrawQuestItem, X) == 0x000000, "Member 'UIVelvetRoomRequestDraw_DrawQuestItem::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomRequestDraw_DrawQuestItem, Y) == 0x000004, "Member 'UIVelvetRoomRequestDraw_DrawQuestItem::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomRequestDraw_DrawQuestItem, Index_0) == 0x000008, "Member 'UIVelvetRoomRequestDraw_DrawQuestItem::Index_0' has a wrong offset!");

// Function xrd777.UIVelvetRoomRequestDraw.DrawQuestReward
// 0x000C (0x000C - 0x0000)
struct UIVelvetRoomRequestDraw_DrawQuestReward final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomRequestDraw_DrawQuestReward) == 0x000004, "Wrong alignment on UIVelvetRoomRequestDraw_DrawQuestReward");
static_assert(sizeof(UIVelvetRoomRequestDraw_DrawQuestReward) == 0x00000C, "Wrong size on UIVelvetRoomRequestDraw_DrawQuestReward");
static_assert(offsetof(UIVelvetRoomRequestDraw_DrawQuestReward, X) == 0x000000, "Member 'UIVelvetRoomRequestDraw_DrawQuestReward::X' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomRequestDraw_DrawQuestReward, Y) == 0x000004, "Member 'UIVelvetRoomRequestDraw_DrawQuestReward::Y' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomRequestDraw_DrawQuestReward, Index_0) == 0x000008, "Member 'UIVelvetRoomRequestDraw_DrawQuestReward::Index_0' has a wrong offset!");

// Function xrd777.UIVelvetRoomRequestDraw.GetCursorCurrentIndex
// 0x0004 (0x0004 - 0x0000)
struct UIVelvetRoomRequestDraw_GetCursorCurrentIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomRequestDraw_GetCursorCurrentIndex) == 0x000004, "Wrong alignment on UIVelvetRoomRequestDraw_GetCursorCurrentIndex");
static_assert(sizeof(UIVelvetRoomRequestDraw_GetCursorCurrentIndex) == 0x000004, "Wrong size on UIVelvetRoomRequestDraw_GetCursorCurrentIndex");
static_assert(offsetof(UIVelvetRoomRequestDraw_GetCursorCurrentIndex, ReturnValue) == 0x000000, "Member 'UIVelvetRoomRequestDraw_GetCursorCurrentIndex::ReturnValue' has a wrong offset!");

// Function xrd777.UIVelvetRoomRequestDraw.GetCursorListTopIndex
// 0x0004 (0x0004 - 0x0000)
struct UIVelvetRoomRequestDraw_GetCursorListTopIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomRequestDraw_GetCursorListTopIndex) == 0x000004, "Wrong alignment on UIVelvetRoomRequestDraw_GetCursorListTopIndex");
static_assert(sizeof(UIVelvetRoomRequestDraw_GetCursorListTopIndex) == 0x000004, "Wrong size on UIVelvetRoomRequestDraw_GetCursorListTopIndex");
static_assert(offsetof(UIVelvetRoomRequestDraw_GetCursorListTopIndex, ReturnValue) == 0x000000, "Member 'UIVelvetRoomRequestDraw_GetCursorListTopIndex::ReturnValue' has a wrong offset!");

// Function xrd777.UIVelvetRoomRequestDraw.GetQuestRank
// 0x0004 (0x0004 - 0x0000)
struct UIVelvetRoomRequestDraw_GetQuestRank final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomRequestDraw_GetQuestRank) == 0x000004, "Wrong alignment on UIVelvetRoomRequestDraw_GetQuestRank");
static_assert(sizeof(UIVelvetRoomRequestDraw_GetQuestRank) == 0x000004, "Wrong size on UIVelvetRoomRequestDraw_GetQuestRank");
static_assert(offsetof(UIVelvetRoomRequestDraw_GetQuestRank, ReturnValue) == 0x000000, "Member 'UIVelvetRoomRequestDraw_GetQuestRank::ReturnValue' has a wrong offset!");

// Function xrd777.UIVelvetRoomRequestDraw.GetQuestID
// 0x0008 (0x0008 - 0x0000)
struct UIVelvetRoomRequestDraw_GetQuestID final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomRequestDraw_GetQuestID) == 0x000004, "Wrong alignment on UIVelvetRoomRequestDraw_GetQuestID");
static_assert(sizeof(UIVelvetRoomRequestDraw_GetQuestID) == 0x000008, "Wrong size on UIVelvetRoomRequestDraw_GetQuestID");
static_assert(offsetof(UIVelvetRoomRequestDraw_GetQuestID, Index_0) == 0x000000, "Member 'UIVelvetRoomRequestDraw_GetQuestID::Index_0' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomRequestDraw_GetQuestID, ReturnValue) == 0x000004, "Member 'UIVelvetRoomRequestDraw_GetQuestID::ReturnValue' has a wrong offset!");

// Function xrd777.UIVelvetRoomRequestDraw.GetQuestListMax
// 0x0004 (0x0004 - 0x0000)
struct UIVelvetRoomRequestDraw_GetQuestListMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomRequestDraw_GetQuestListMax) == 0x000004, "Wrong alignment on UIVelvetRoomRequestDraw_GetQuestListMax");
static_assert(sizeof(UIVelvetRoomRequestDraw_GetQuestListMax) == 0x000004, "Wrong size on UIVelvetRoomRequestDraw_GetQuestListMax");
static_assert(offsetof(UIVelvetRoomRequestDraw_GetQuestListMax, ReturnValue) == 0x000000, "Member 'UIVelvetRoomRequestDraw_GetQuestListMax::ReturnValue' has a wrong offset!");

// Function xrd777.UIVelvetRoomRequestDraw.GetQuestNewFlag
// 0x0008 (0x0008 - 0x0000)
struct UIVelvetRoomRequestDraw_GetQuestNewFlag final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIVelvetRoomRequestDraw_GetQuestNewFlag) == 0x000004, "Wrong alignment on UIVelvetRoomRequestDraw_GetQuestNewFlag");
static_assert(sizeof(UIVelvetRoomRequestDraw_GetQuestNewFlag) == 0x000008, "Wrong size on UIVelvetRoomRequestDraw_GetQuestNewFlag");
static_assert(offsetof(UIVelvetRoomRequestDraw_GetQuestNewFlag, Index_0) == 0x000000, "Member 'UIVelvetRoomRequestDraw_GetQuestNewFlag::Index_0' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomRequestDraw_GetQuestNewFlag, ReturnValue) == 0x000004, "Member 'UIVelvetRoomRequestDraw_GetQuestNewFlag::ReturnValue' has a wrong offset!");

// Function xrd777.UIVelvetRoomRequestDraw.GetQuestState
// 0x0008 (0x0008 - 0x0000)
struct UIVelvetRoomRequestDraw_GetQuestState final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestListItemState                           ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIVelvetRoomRequestDraw_GetQuestState) == 0x000004, "Wrong alignment on UIVelvetRoomRequestDraw_GetQuestState");
static_assert(sizeof(UIVelvetRoomRequestDraw_GetQuestState) == 0x000008, "Wrong size on UIVelvetRoomRequestDraw_GetQuestState");
static_assert(offsetof(UIVelvetRoomRequestDraw_GetQuestState, Index_0) == 0x000000, "Member 'UIVelvetRoomRequestDraw_GetQuestState::Index_0' has a wrong offset!");
static_assert(offsetof(UIVelvetRoomRequestDraw_GetQuestState, ReturnValue) == 0x000004, "Member 'UIVelvetRoomRequestDraw_GetQuestState::ReturnValue' has a wrong offset!");

// Function xrd777.UIVelvetRoomRequestDraw.GetSortType
// 0x0004 (0x0004 - 0x0000)
struct UIVelvetRoomRequestDraw_GetSortType final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVelvetRoomRequestDraw_GetSortType) == 0x000004, "Wrong alignment on UIVelvetRoomRequestDraw_GetSortType");
static_assert(sizeof(UIVelvetRoomRequestDraw_GetSortType) == 0x000004, "Wrong size on UIVelvetRoomRequestDraw_GetSortType");
static_assert(offsetof(UIVelvetRoomRequestDraw_GetSortType, ReturnValue) == 0x000000, "Member 'UIVelvetRoomRequestDraw_GetSortType::ReturnValue' has a wrong offset!");

// Function xrd777.TextInputWidget.CalcLetterBoxSize
// 0x0008 (0x0008 - 0x0000)
struct TextInputWidget_CalcLetterBoxSize final
{
public:
	float                                         InTmpScreenSize;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextInputWidget_CalcLetterBoxSize) == 0x000004, "Wrong alignment on TextInputWidget_CalcLetterBoxSize");
static_assert(sizeof(TextInputWidget_CalcLetterBoxSize) == 0x000008, "Wrong size on TextInputWidget_CalcLetterBoxSize");
static_assert(offsetof(TextInputWidget_CalcLetterBoxSize, InTmpScreenSize) == 0x000000, "Member 'TextInputWidget_CalcLetterBoxSize::InTmpScreenSize' has a wrong offset!");
static_assert(offsetof(TextInputWidget_CalcLetterBoxSize, ReturnValue) == 0x000004, "Member 'TextInputWidget_CalcLetterBoxSize::ReturnValue' has a wrong offset!");

// Function xrd777.TextInputWidget.CalcScreenScale
// 0x0004 (0x0004 - 0x0000)
struct TextInputWidget_CalcScreenScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextInputWidget_CalcScreenScale) == 0x000004, "Wrong alignment on TextInputWidget_CalcScreenScale");
static_assert(sizeof(TextInputWidget_CalcScreenScale) == 0x000004, "Wrong size on TextInputWidget_CalcScreenScale");
static_assert(offsetof(TextInputWidget_CalcScreenScale, ReturnValue) == 0x000000, "Member 'TextInputWidget_CalcScreenScale::ReturnValue' has a wrong offset!");

// Function xrd777.TextInputWidget.GetText
// 0x0018 (0x0018 - 0x0000)
struct TextInputWidget_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextInputWidget_GetText) == 0x000008, "Wrong alignment on TextInputWidget_GetText");
static_assert(sizeof(TextInputWidget_GetText) == 0x000018, "Wrong size on TextInputWidget_GetText");
static_assert(offsetof(TextInputWidget_GetText, ReturnValue) == 0x000000, "Member 'TextInputWidget_GetText::ReturnValue' has a wrong offset!");

// Function xrd777.TextInputWidget.IsChangeScreenSize
// 0x0001 (0x0001 - 0x0000)
struct TextInputWidget_IsChangeScreenSize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextInputWidget_IsChangeScreenSize) == 0x000001, "Wrong alignment on TextInputWidget_IsChangeScreenSize");
static_assert(sizeof(TextInputWidget_IsChangeScreenSize) == 0x000001, "Wrong size on TextInputWidget_IsChangeScreenSize");
static_assert(offsetof(TextInputWidget_IsChangeScreenSize, ReturnValue) == 0x000000, "Member 'TextInputWidget_IsChangeScreenSize::ReturnValue' has a wrong offset!");

// Function xrd777.TextInputWidget.IsDrawLetterBoxDirHeight
// 0x0001 (0x0001 - 0x0000)
struct TextInputWidget_IsDrawLetterBoxDirHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextInputWidget_IsDrawLetterBoxDirHeight) == 0x000001, "Wrong alignment on TextInputWidget_IsDrawLetterBoxDirHeight");
static_assert(sizeof(TextInputWidget_IsDrawLetterBoxDirHeight) == 0x000001, "Wrong size on TextInputWidget_IsDrawLetterBoxDirHeight");
static_assert(offsetof(TextInputWidget_IsDrawLetterBoxDirHeight, ReturnValue) == 0x000000, "Member 'TextInputWidget_IsDrawLetterBoxDirHeight::ReturnValue' has a wrong offset!");

// Function xrd777.TextInputWidget.SetBaseText
// 0x0018 (0x0018 - 0x0000)
struct TextInputWidget_SetBaseText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextInputWidget_SetBaseText) == 0x000008, "Wrong alignment on TextInputWidget_SetBaseText");
static_assert(sizeof(TextInputWidget_SetBaseText) == 0x000018, "Wrong size on TextInputWidget_SetBaseText");
static_assert(offsetof(TextInputWidget_SetBaseText, InText) == 0x000000, "Member 'TextInputWidget_SetBaseText::InText' has a wrong offset!");

// Function xrd777.TextInputWidget.SetText
// 0x0018 (0x0018 - 0x0000)
struct TextInputWidget_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TextInputWidget_SetText) == 0x000008, "Wrong alignment on TextInputWidget_SetText");
static_assert(sizeof(TextInputWidget_SetText) == 0x000018, "Wrong size on TextInputWidget_SetText");
static_assert(offsetof(TextInputWidget_SetText, Text) == 0x000000, "Member 'TextInputWidget_SetText::Text' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.ConvFrameToTime
// 0x0008 (0x0008 - 0x0000)
struct UIVoiceActionDraw_ConvFrameToTime final
{
public:
	int32                                         InFrame;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_ConvFrameToTime) == 0x000004, "Wrong alignment on UIVoiceActionDraw_ConvFrameToTime");
static_assert(sizeof(UIVoiceActionDraw_ConvFrameToTime) == 0x000008, "Wrong size on UIVoiceActionDraw_ConvFrameToTime");
static_assert(offsetof(UIVoiceActionDraw_ConvFrameToTime, InFrame) == 0x000000, "Member 'UIVoiceActionDraw_ConvFrameToTime::InFrame' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_ConvFrameToTime, ReturnValue) == 0x000004, "Member 'UIVoiceActionDraw_ConvFrameToTime::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawActionBoard
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawActionBoard final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawActionBoard) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawActionBoard");
static_assert(sizeof(UIVoiceActionDraw_DrawActionBoard) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawActionBoard");
static_assert(offsetof(UIVoiceActionDraw_DrawActionBoard, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawActionBoard::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawActionBoard, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawActionBoard::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawActionBoard, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawActionBoard::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawBackBoard
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawBackBoard final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawBackBoard) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawBackBoard");
static_assert(sizeof(UIVoiceActionDraw_DrawBackBoard) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawBackBoard");
static_assert(offsetof(UIVoiceActionDraw_DrawBackBoard, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawBackBoard::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawBackBoard, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawBackBoard::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawBackBoard, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawBackBoard::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawBlackBoard
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawBlackBoard final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawBlackBoard) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawBlackBoard");
static_assert(sizeof(UIVoiceActionDraw_DrawBlackBoard) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawBlackBoard");
static_assert(offsetof(UIVoiceActionDraw_DrawBlackBoard, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawBlackBoard::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawBlackBoard, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawBlackBoard::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawBlackBoard, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawBlackBoard::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawBlueBoard
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawBlueBoard final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawBlueBoard) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawBlueBoard");
static_assert(sizeof(UIVoiceActionDraw_DrawBlueBoard) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawBlueBoard");
static_assert(offsetof(UIVoiceActionDraw_DrawBlueBoard, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawBlueBoard::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawBlueBoard, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawBlueBoard::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawBlueBoard, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawBlueBoard::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawCommunityActionPercent
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawCommunityActionPercent final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawCommunityActionPercent) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawCommunityActionPercent");
static_assert(sizeof(UIVoiceActionDraw_DrawCommunityActionPercent) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawCommunityActionPercent");
static_assert(offsetof(UIVoiceActionDraw_DrawCommunityActionPercent, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawCommunityActionPercent::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawCommunityActionPercent, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawCommunityActionPercent::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawCommunityActionPercent, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawCommunityActionPercent::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawCommunityActionStickyNote
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawCommunityActionStickyNote final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawCommunityActionStickyNote) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawCommunityActionStickyNote");
static_assert(sizeof(UIVoiceActionDraw_DrawCommunityActionStickyNote) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawCommunityActionStickyNote");
static_assert(offsetof(UIVoiceActionDraw_DrawCommunityActionStickyNote, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawCommunityActionStickyNote::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawCommunityActionStickyNote, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawCommunityActionStickyNote::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawCommunityActionStickyNote, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawCommunityActionStickyNote::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawDailyActionPercent
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawDailyActionPercent final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawDailyActionPercent) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawDailyActionPercent");
static_assert(sizeof(UIVoiceActionDraw_DrawDailyActionPercent) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawDailyActionPercent");
static_assert(offsetof(UIVoiceActionDraw_DrawDailyActionPercent, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawDailyActionPercent::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawDailyActionPercent, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawDailyActionPercent::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawDailyActionPercent, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawDailyActionPercent::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawDailyActionStickyNote
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawDailyActionStickyNote final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawDailyActionStickyNote) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawDailyActionStickyNote");
static_assert(sizeof(UIVoiceActionDraw_DrawDailyActionStickyNote) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawDailyActionStickyNote");
static_assert(offsetof(UIVoiceActionDraw_DrawDailyActionStickyNote, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawDailyActionStickyNote::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawDailyActionStickyNote, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawDailyActionStickyNote::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawDailyActionStickyNote, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawDailyActionStickyNote::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawDay
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawDay final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawDay) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawDay");
static_assert(sizeof(UIVoiceActionDraw_DrawDay) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawDay");
static_assert(offsetof(UIVoiceActionDraw_DrawDay, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawDay::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawDay, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawDay::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawDay, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawDay::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawDayOfWeek
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawDayOfWeek final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawDayOfWeek) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawDayOfWeek");
static_assert(sizeof(UIVoiceActionDraw_DrawDayOfWeek) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawDayOfWeek");
static_assert(offsetof(UIVoiceActionDraw_DrawDayOfWeek, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawDayOfWeek::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawDayOfWeek, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawDayOfWeek::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawDayOfWeek, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawDayOfWeek::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawDungeonActionPercent
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawDungeonActionPercent final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawDungeonActionPercent) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawDungeonActionPercent");
static_assert(sizeof(UIVoiceActionDraw_DrawDungeonActionPercent) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawDungeonActionPercent");
static_assert(offsetof(UIVoiceActionDraw_DrawDungeonActionPercent, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawDungeonActionPercent::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawDungeonActionPercent, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawDungeonActionPercent::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawDungeonActionPercent, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawDungeonActionPercent::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawDungeonActionStickyNote
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawDungeonActionStickyNote final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawDungeonActionStickyNote) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawDungeonActionStickyNote");
static_assert(sizeof(UIVoiceActionDraw_DrawDungeonActionStickyNote) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawDungeonActionStickyNote");
static_assert(offsetof(UIVoiceActionDraw_DrawDungeonActionStickyNote, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawDungeonActionStickyNote::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawDungeonActionStickyNote, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawDungeonActionStickyNote::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawDungeonActionStickyNote, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawDungeonActionStickyNote::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawMonth
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawMonth final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawMonth) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawMonth");
static_assert(sizeof(UIVoiceActionDraw_DrawMonth) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawMonth");
static_assert(offsetof(UIVoiceActionDraw_DrawMonth, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawMonth::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawMonth, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawMonth::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawMonth, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawMonth::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawNetworkIcon
// 0x0014 (0x0014 - 0x0000)
struct UIVoiceActionDraw_DrawNetworkIcon final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IconAngle;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawNetworkIcon) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawNetworkIcon");
static_assert(sizeof(UIVoiceActionDraw_DrawNetworkIcon) == 0x000014, "Wrong size on UIVoiceActionDraw_DrawNetworkIcon");
static_assert(offsetof(UIVoiceActionDraw_DrawNetworkIcon, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawNetworkIcon::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawNetworkIcon, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawNetworkIcon::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawNetworkIcon, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawNetworkIcon::Angle' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawNetworkIcon, IconAngle) == 0x000010, "Member 'UIVoiceActionDraw_DrawNetworkIcon::IconAngle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawNetworkIconSecond
// 0x0014 (0x0014 - 0x0000)
struct UIVoiceActionDraw_DrawNetworkIconSecond final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawNetworkIconSecond) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawNetworkIconSecond");
static_assert(sizeof(UIVoiceActionDraw_DrawNetworkIconSecond) == 0x000014, "Wrong size on UIVoiceActionDraw_DrawNetworkIconSecond");
static_assert(offsetof(UIVoiceActionDraw_DrawNetworkIconSecond, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawNetworkIconSecond::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawNetworkIconSecond, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawNetworkIconSecond::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawNetworkIconSecond, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawNetworkIconSecond::Angle' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawNetworkIconSecond, Scale) == 0x000010, "Member 'UIVoiceActionDraw_DrawNetworkIconSecond::Scale' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.DrawStickyNoteAverage
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_DrawStickyNoteAverage final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_DrawStickyNoteAverage) == 0x000004, "Wrong alignment on UIVoiceActionDraw_DrawStickyNoteAverage");
static_assert(sizeof(UIVoiceActionDraw_DrawStickyNoteAverage) == 0x000010, "Wrong size on UIVoiceActionDraw_DrawStickyNoteAverage");
static_assert(offsetof(UIVoiceActionDraw_DrawStickyNoteAverage, InPos) == 0x000000, "Member 'UIVoiceActionDraw_DrawStickyNoteAverage::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawStickyNoteAverage, InColor) == 0x000008, "Member 'UIVoiceActionDraw_DrawStickyNoteAverage::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_DrawStickyNoteAverage, Angle) == 0x00000C, "Member 'UIVoiceActionDraw_DrawStickyNoteAverage::Angle' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.InitDraw_IN
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_InitDraw_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_InitDraw_IN) == 0x000001, "Wrong alignment on UIVoiceActionDraw_InitDraw_IN");
static_assert(sizeof(UIVoiceActionDraw_InitDraw_IN) == 0x000001, "Wrong size on UIVoiceActionDraw_InitDraw_IN");
static_assert(offsetof(UIVoiceActionDraw_InitDraw_IN, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_InitDraw_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.InitDraw_Out
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_InitDraw_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_InitDraw_Out) == 0x000001, "Wrong alignment on UIVoiceActionDraw_InitDraw_Out");
static_assert(sizeof(UIVoiceActionDraw_InitDraw_Out) == 0x000001, "Wrong size on UIVoiceActionDraw_InitDraw_Out");
static_assert(offsetof(UIVoiceActionDraw_InitDraw_Out, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_InitDraw_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.InitDrawBlackBoard_IN
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_InitDrawBlackBoard_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_InitDrawBlackBoard_IN) == 0x000001, "Wrong alignment on UIVoiceActionDraw_InitDrawBlackBoard_IN");
static_assert(sizeof(UIVoiceActionDraw_InitDrawBlackBoard_IN) == 0x000001, "Wrong size on UIVoiceActionDraw_InitDrawBlackBoard_IN");
static_assert(offsetof(UIVoiceActionDraw_InitDrawBlackBoard_IN, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_InitDrawBlackBoard_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.InitDrawBlackBoard_Out
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_InitDrawBlackBoard_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_InitDrawBlackBoard_Out) == 0x000001, "Wrong alignment on UIVoiceActionDraw_InitDrawBlackBoard_Out");
static_assert(sizeof(UIVoiceActionDraw_InitDrawBlackBoard_Out) == 0x000001, "Wrong size on UIVoiceActionDraw_InitDrawBlackBoard_Out");
static_assert(offsetof(UIVoiceActionDraw_InitDrawBlackBoard_Out, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_InitDrawBlackBoard_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.InitDrawNetworkIcon_IN
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_InitDrawNetworkIcon_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_InitDrawNetworkIcon_IN) == 0x000001, "Wrong alignment on UIVoiceActionDraw_InitDrawNetworkIcon_IN");
static_assert(sizeof(UIVoiceActionDraw_InitDrawNetworkIcon_IN) == 0x000001, "Wrong size on UIVoiceActionDraw_InitDrawNetworkIcon_IN");
static_assert(offsetof(UIVoiceActionDraw_InitDrawNetworkIcon_IN, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_InitDrawNetworkIcon_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.InitDrawNetworkIcon_Out
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_InitDrawNetworkIcon_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_InitDrawNetworkIcon_Out) == 0x000001, "Wrong alignment on UIVoiceActionDraw_InitDrawNetworkIcon_Out");
static_assert(sizeof(UIVoiceActionDraw_InitDrawNetworkIcon_Out) == 0x000001, "Wrong size on UIVoiceActionDraw_InitDrawNetworkIcon_Out");
static_assert(offsetof(UIVoiceActionDraw_InitDrawNetworkIcon_Out, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_InitDrawNetworkIcon_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.KeyHelpIn
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_KeyHelpIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_KeyHelpIn) == 0x000001, "Wrong alignment on UIVoiceActionDraw_KeyHelpIn");
static_assert(sizeof(UIVoiceActionDraw_KeyHelpIn) == 0x000001, "Wrong size on UIVoiceActionDraw_KeyHelpIn");
static_assert(offsetof(UIVoiceActionDraw_KeyHelpIn, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_KeyHelpIn::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.KeyHelpOut
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_KeyHelpOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_KeyHelpOut) == 0x000001, "Wrong alignment on UIVoiceActionDraw_KeyHelpOut");
static_assert(sizeof(UIVoiceActionDraw_KeyHelpOut) == 0x000001, "Wrong size on UIVoiceActionDraw_KeyHelpOut");
static_assert(offsetof(UIVoiceActionDraw_KeyHelpOut, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_KeyHelpOut::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.StateDraw_BG
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_StateDraw_BG final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_StateDraw_BG) == 0x000001, "Wrong alignment on UIVoiceActionDraw_StateDraw_BG");
static_assert(sizeof(UIVoiceActionDraw_StateDraw_BG) == 0x000001, "Wrong size on UIVoiceActionDraw_StateDraw_BG");
static_assert(offsetof(UIVoiceActionDraw_StateDraw_BG, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_StateDraw_BG::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.StateDraw_Frame
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_StateDraw_Frame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_StateDraw_Frame) == 0x000001, "Wrong alignment on UIVoiceActionDraw_StateDraw_Frame");
static_assert(sizeof(UIVoiceActionDraw_StateDraw_Frame) == 0x000001, "Wrong size on UIVoiceActionDraw_StateDraw_Frame");
static_assert(offsetof(UIVoiceActionDraw_StateDraw_Frame, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_StateDraw_Frame::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.StateDraw_IN
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_StateDraw_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_StateDraw_IN) == 0x000001, "Wrong alignment on UIVoiceActionDraw_StateDraw_IN");
static_assert(sizeof(UIVoiceActionDraw_StateDraw_IN) == 0x000001, "Wrong size on UIVoiceActionDraw_StateDraw_IN");
static_assert(offsetof(UIVoiceActionDraw_StateDraw_IN, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_StateDraw_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.StateDraw_Network
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_StateDraw_Network final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_StateDraw_Network) == 0x000001, "Wrong alignment on UIVoiceActionDraw_StateDraw_Network");
static_assert(sizeof(UIVoiceActionDraw_StateDraw_Network) == 0x000001, "Wrong size on UIVoiceActionDraw_StateDraw_Network");
static_assert(offsetof(UIVoiceActionDraw_StateDraw_Network, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_StateDraw_Network::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.StateDraw_Out
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_StateDraw_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_StateDraw_Out) == 0x000001, "Wrong alignment on UIVoiceActionDraw_StateDraw_Out");
static_assert(sizeof(UIVoiceActionDraw_StateDraw_Out) == 0x000001, "Wrong size on UIVoiceActionDraw_StateDraw_Out");
static_assert(offsetof(UIVoiceActionDraw_StateDraw_Out, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_StateDraw_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.StateDrawBlackBoard_IN
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_StateDrawBlackBoard_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_StateDrawBlackBoard_IN) == 0x000001, "Wrong alignment on UIVoiceActionDraw_StateDrawBlackBoard_IN");
static_assert(sizeof(UIVoiceActionDraw_StateDrawBlackBoard_IN) == 0x000001, "Wrong size on UIVoiceActionDraw_StateDrawBlackBoard_IN");
static_assert(offsetof(UIVoiceActionDraw_StateDrawBlackBoard_IN, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_StateDrawBlackBoard_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.StateDrawBlackBoard_Out
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_StateDrawBlackBoard_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_StateDrawBlackBoard_Out) == 0x000001, "Wrong alignment on UIVoiceActionDraw_StateDrawBlackBoard_Out");
static_assert(sizeof(UIVoiceActionDraw_StateDrawBlackBoard_Out) == 0x000001, "Wrong size on UIVoiceActionDraw_StateDrawBlackBoard_Out");
static_assert(offsetof(UIVoiceActionDraw_StateDrawBlackBoard_Out, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_StateDrawBlackBoard_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.StateDrawNetworkIcon_IN
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_StateDrawNetworkIcon_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_StateDrawNetworkIcon_IN) == 0x000001, "Wrong alignment on UIVoiceActionDraw_StateDrawNetworkIcon_IN");
static_assert(sizeof(UIVoiceActionDraw_StateDrawNetworkIcon_IN) == 0x000001, "Wrong size on UIVoiceActionDraw_StateDrawNetworkIcon_IN");
static_assert(offsetof(UIVoiceActionDraw_StateDrawNetworkIcon_IN, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_StateDrawNetworkIcon_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.StateDrawNetworkIcon_Out
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceActionDraw_StateDrawNetworkIcon_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceActionDraw_StateDrawNetworkIcon_Out) == 0x000001, "Wrong alignment on UIVoiceActionDraw_StateDrawNetworkIcon_Out");
static_assert(sizeof(UIVoiceActionDraw_StateDrawNetworkIcon_Out) == 0x000001, "Wrong size on UIVoiceActionDraw_StateDrawNetworkIcon_Out");
static_assert(offsetof(UIVoiceActionDraw_StateDrawNetworkIcon_Out, ReturnValue) == 0x000000, "Member 'UIVoiceActionDraw_StateDrawNetworkIcon_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceActionDraw.TimeWithinRangeFrame
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceActionDraw_TimeWithinRangeFrame final
{
public:
	float                                         NowTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIVoiceActionDraw_TimeWithinRangeFrame) == 0x000004, "Wrong alignment on UIVoiceActionDraw_TimeWithinRangeFrame");
static_assert(sizeof(UIVoiceActionDraw_TimeWithinRangeFrame) == 0x000010, "Wrong size on UIVoiceActionDraw_TimeWithinRangeFrame");
static_assert(offsetof(UIVoiceActionDraw_TimeWithinRangeFrame, NowTime) == 0x000000, "Member 'UIVoiceActionDraw_TimeWithinRangeFrame::NowTime' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_TimeWithinRangeFrame, StartFrame) == 0x000004, "Member 'UIVoiceActionDraw_TimeWithinRangeFrame::StartFrame' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_TimeWithinRangeFrame, EndFrame) == 0x000008, "Member 'UIVoiceActionDraw_TimeWithinRangeFrame::EndFrame' has a wrong offset!");
static_assert(offsetof(UIVoiceActionDraw_TimeWithinRangeFrame, ReturnValue) == 0x00000C, "Member 'UIVoiceActionDraw_TimeWithinRangeFrame::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.ConvFrameToTime
// 0x0008 (0x0008 - 0x0000)
struct UIVoiceAnswerDraw_ConvFrameToTime final
{
public:
	int32                                         InFrame;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_ConvFrameToTime) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_ConvFrameToTime");
static_assert(sizeof(UIVoiceAnswerDraw_ConvFrameToTime) == 0x000008, "Wrong size on UIVoiceAnswerDraw_ConvFrameToTime");
static_assert(offsetof(UIVoiceAnswerDraw_ConvFrameToTime, InFrame) == 0x000000, "Member 'UIVoiceAnswerDraw_ConvFrameToTime::InFrame' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_ConvFrameToTime, ReturnValue) == 0x000004, "Member 'UIVoiceAnswerDraw_ConvFrameToTime::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawAnswerBoard
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawAnswerBoard final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawAnswerBoard) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawAnswerBoard");
static_assert(sizeof(UIVoiceAnswerDraw_DrawAnswerBoard) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawAnswerBoard");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerBoard, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawAnswerBoard::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerBoard, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawAnswerBoard::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerBoard, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawAnswerBoard::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawAnswerTextA
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawAnswerTextA final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawAnswerTextA) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawAnswerTextA");
static_assert(sizeof(UIVoiceAnswerDraw_DrawAnswerTextA) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawAnswerTextA");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerTextA, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawAnswerTextA::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerTextA, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawAnswerTextA::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerTextA, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawAnswerTextA::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawAnswerTextB
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawAnswerTextB final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawAnswerTextB) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawAnswerTextB");
static_assert(sizeof(UIVoiceAnswerDraw_DrawAnswerTextB) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawAnswerTextB");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerTextB, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawAnswerTextB::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerTextB, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawAnswerTextB::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerTextB, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawAnswerTextB::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawAnswerTextC
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawAnswerTextC final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawAnswerTextC) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawAnswerTextC");
static_assert(sizeof(UIVoiceAnswerDraw_DrawAnswerTextC) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawAnswerTextC");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerTextC, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawAnswerTextC::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerTextC, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawAnswerTextC::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerTextC, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawAnswerTextC::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawAnswerTextD
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawAnswerTextD final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawAnswerTextD) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawAnswerTextD");
static_assert(sizeof(UIVoiceAnswerDraw_DrawAnswerTextD) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawAnswerTextD");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerTextD, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawAnswerTextD::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerTextD, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawAnswerTextD::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawAnswerTextD, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawAnswerTextD::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawBackBoard
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawBackBoard final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawBackBoard) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawBackBoard");
static_assert(sizeof(UIVoiceAnswerDraw_DrawBackBoard) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawBackBoard");
static_assert(offsetof(UIVoiceAnswerDraw_DrawBackBoard, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawBackBoard::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawBackBoard, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawBackBoard::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawBackBoard, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawBackBoard::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawBlackBoard
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawBlackBoard final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawBlackBoard) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawBlackBoard");
static_assert(sizeof(UIVoiceAnswerDraw_DrawBlackBoard) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawBlackBoard");
static_assert(offsetof(UIVoiceAnswerDraw_DrawBlackBoard, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawBlackBoard::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawBlackBoard, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawBlackBoard::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawBlackBoard, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawBlackBoard::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawBlueBoard
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawBlueBoard final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawBlueBoard) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawBlueBoard");
static_assert(sizeof(UIVoiceAnswerDraw_DrawBlueBoard) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawBlueBoard");
static_assert(offsetof(UIVoiceAnswerDraw_DrawBlueBoard, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawBlueBoard::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawBlueBoard, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawBlueBoard::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawBlueBoard, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawBlueBoard::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawDay
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawDay final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawDay) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawDay");
static_assert(sizeof(UIVoiceAnswerDraw_DrawDay) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawDay");
static_assert(offsetof(UIVoiceAnswerDraw_DrawDay, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawDay::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawDay, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawDay::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawDay, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawDay::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawDayOfWeek
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawDayOfWeek final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawDayOfWeek) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawDayOfWeek");
static_assert(sizeof(UIVoiceAnswerDraw_DrawDayOfWeek) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawDayOfWeek");
static_assert(offsetof(UIVoiceAnswerDraw_DrawDayOfWeek, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawDayOfWeek::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawDayOfWeek, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawDayOfWeek::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawDayOfWeek, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawDayOfWeek::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawLeftBracketsA
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawLeftBracketsA final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawLeftBracketsA) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawLeftBracketsA");
static_assert(sizeof(UIVoiceAnswerDraw_DrawLeftBracketsA) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawLeftBracketsA");
static_assert(offsetof(UIVoiceAnswerDraw_DrawLeftBracketsA, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawLeftBracketsA::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawLeftBracketsA, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawLeftBracketsA::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawLeftBracketsA, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawLeftBracketsA::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawLeftBracketsB
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawLeftBracketsB final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawLeftBracketsB) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawLeftBracketsB");
static_assert(sizeof(UIVoiceAnswerDraw_DrawLeftBracketsB) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawLeftBracketsB");
static_assert(offsetof(UIVoiceAnswerDraw_DrawLeftBracketsB, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawLeftBracketsB::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawLeftBracketsB, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawLeftBracketsB::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawLeftBracketsB, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawLeftBracketsB::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawLeftBracketsC
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawLeftBracketsC final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawLeftBracketsC) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawLeftBracketsC");
static_assert(sizeof(UIVoiceAnswerDraw_DrawLeftBracketsC) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawLeftBracketsC");
static_assert(offsetof(UIVoiceAnswerDraw_DrawLeftBracketsC, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawLeftBracketsC::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawLeftBracketsC, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawLeftBracketsC::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawLeftBracketsC, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawLeftBracketsC::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawLeftBracketsD
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawLeftBracketsD final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawLeftBracketsD) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawLeftBracketsD");
static_assert(sizeof(UIVoiceAnswerDraw_DrawLeftBracketsD) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawLeftBracketsD");
static_assert(offsetof(UIVoiceAnswerDraw_DrawLeftBracketsD, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawLeftBracketsD::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawLeftBracketsD, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawLeftBracketsD::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawLeftBracketsD, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawLeftBracketsD::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawMonth
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawMonth final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawMonth) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawMonth");
static_assert(sizeof(UIVoiceAnswerDraw_DrawMonth) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawMonth");
static_assert(offsetof(UIVoiceAnswerDraw_DrawMonth, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawMonth::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawMonth, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawMonth::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawMonth, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawMonth::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawNetworkIcon
// 0x0014 (0x0014 - 0x0000)
struct UIVoiceAnswerDraw_DrawNetworkIcon final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IconAngle;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawNetworkIcon) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawNetworkIcon");
static_assert(sizeof(UIVoiceAnswerDraw_DrawNetworkIcon) == 0x000014, "Wrong size on UIVoiceAnswerDraw_DrawNetworkIcon");
static_assert(offsetof(UIVoiceAnswerDraw_DrawNetworkIcon, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawNetworkIcon::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawNetworkIcon, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawNetworkIcon::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawNetworkIcon, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawNetworkIcon::Angle' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawNetworkIcon, IconAngle) == 0x000010, "Member 'UIVoiceAnswerDraw_DrawNetworkIcon::IconAngle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawNetworkIconSecond
// 0x0014 (0x0014 - 0x0000)
struct UIVoiceAnswerDraw_DrawNetworkIconSecond final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawNetworkIconSecond) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawNetworkIconSecond");
static_assert(sizeof(UIVoiceAnswerDraw_DrawNetworkIconSecond) == 0x000014, "Wrong size on UIVoiceAnswerDraw_DrawNetworkIconSecond");
static_assert(offsetof(UIVoiceAnswerDraw_DrawNetworkIconSecond, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawNetworkIconSecond::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawNetworkIconSecond, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawNetworkIconSecond::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawNetworkIconSecond, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawNetworkIconSecond::Angle' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawNetworkIconSecond, Scale) == 0x000010, "Member 'UIVoiceAnswerDraw_DrawNetworkIconSecond::Scale' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawRightBracketsA
// 0x0018 (0x0018 - 0x0000)
struct UIVoiceAnswerDraw_DrawRightBracketsA final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawRightBracketsA) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawRightBracketsA");
static_assert(sizeof(UIVoiceAnswerDraw_DrawRightBracketsA) == 0x000018, "Wrong size on UIVoiceAnswerDraw_DrawRightBracketsA");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsA, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawRightBracketsA::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsA, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawRightBracketsA::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsA, Width) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawRightBracketsA::Width' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsA, Height) == 0x000010, "Member 'UIVoiceAnswerDraw_DrawRightBracketsA::Height' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsA, Angle) == 0x000014, "Member 'UIVoiceAnswerDraw_DrawRightBracketsA::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawRightBracketsB
// 0x0018 (0x0018 - 0x0000)
struct UIVoiceAnswerDraw_DrawRightBracketsB final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawRightBracketsB) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawRightBracketsB");
static_assert(sizeof(UIVoiceAnswerDraw_DrawRightBracketsB) == 0x000018, "Wrong size on UIVoiceAnswerDraw_DrawRightBracketsB");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsB, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawRightBracketsB::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsB, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawRightBracketsB::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsB, Width) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawRightBracketsB::Width' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsB, Height) == 0x000010, "Member 'UIVoiceAnswerDraw_DrawRightBracketsB::Height' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsB, Angle) == 0x000014, "Member 'UIVoiceAnswerDraw_DrawRightBracketsB::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawRightBracketsC
// 0x0018 (0x0018 - 0x0000)
struct UIVoiceAnswerDraw_DrawRightBracketsC final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawRightBracketsC) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawRightBracketsC");
static_assert(sizeof(UIVoiceAnswerDraw_DrawRightBracketsC) == 0x000018, "Wrong size on UIVoiceAnswerDraw_DrawRightBracketsC");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsC, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawRightBracketsC::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsC, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawRightBracketsC::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsC, Width) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawRightBracketsC::Width' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsC, Height) == 0x000010, "Member 'UIVoiceAnswerDraw_DrawRightBracketsC::Height' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsC, Angle) == 0x000014, "Member 'UIVoiceAnswerDraw_DrawRightBracketsC::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawRightBracketsD
// 0x0018 (0x0018 - 0x0000)
struct UIVoiceAnswerDraw_DrawRightBracketsD final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawRightBracketsD) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawRightBracketsD");
static_assert(sizeof(UIVoiceAnswerDraw_DrawRightBracketsD) == 0x000018, "Wrong size on UIVoiceAnswerDraw_DrawRightBracketsD");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsD, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawRightBracketsD::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsD, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawRightBracketsD::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsD, Width) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawRightBracketsD::Width' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsD, Height) == 0x000010, "Member 'UIVoiceAnswerDraw_DrawRightBracketsD::Height' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawRightBracketsD, Angle) == 0x000014, "Member 'UIVoiceAnswerDraw_DrawRightBracketsD::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawStickerA
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawStickerA final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawStickerA) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawStickerA");
static_assert(sizeof(UIVoiceAnswerDraw_DrawStickerA) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawStickerA");
static_assert(offsetof(UIVoiceAnswerDraw_DrawStickerA, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawStickerA::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawStickerA, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawStickerA::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawStickerA, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawStickerA::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawStickerB
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawStickerB final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawStickerB) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawStickerB");
static_assert(sizeof(UIVoiceAnswerDraw_DrawStickerB) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawStickerB");
static_assert(offsetof(UIVoiceAnswerDraw_DrawStickerB, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawStickerB::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawStickerB, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawStickerB::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawStickerB, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawStickerB::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawStickerC
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawStickerC final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawStickerC) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawStickerC");
static_assert(sizeof(UIVoiceAnswerDraw_DrawStickerC) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawStickerC");
static_assert(offsetof(UIVoiceAnswerDraw_DrawStickerC, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawStickerC::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawStickerC, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawStickerC::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawStickerC, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawStickerC::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawStickerD
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawStickerD final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawStickerD) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawStickerD");
static_assert(sizeof(UIVoiceAnswerDraw_DrawStickerD) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawStickerD");
static_assert(offsetof(UIVoiceAnswerDraw_DrawStickerD, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawStickerD::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawStickerD, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawStickerD::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawStickerD, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawStickerD::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawTextureA
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawTextureA final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawTextureA) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawTextureA");
static_assert(sizeof(UIVoiceAnswerDraw_DrawTextureA) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawTextureA");
static_assert(offsetof(UIVoiceAnswerDraw_DrawTextureA, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawTextureA::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawTextureA, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawTextureA::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawTextureA, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawTextureA::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawTextureB
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawTextureB final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawTextureB) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawTextureB");
static_assert(sizeof(UIVoiceAnswerDraw_DrawTextureB) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawTextureB");
static_assert(offsetof(UIVoiceAnswerDraw_DrawTextureB, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawTextureB::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawTextureB, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawTextureB::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawTextureB, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawTextureB::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawTextureC
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawTextureC final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawTextureC) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawTextureC");
static_assert(sizeof(UIVoiceAnswerDraw_DrawTextureC) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawTextureC");
static_assert(offsetof(UIVoiceAnswerDraw_DrawTextureC, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawTextureC::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawTextureC, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawTextureC::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawTextureC, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawTextureC::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.DrawTextureD
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_DrawTextureD final
{
public:
	struct FVector2D                              InPos;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Angle;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_DrawTextureD) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_DrawTextureD");
static_assert(sizeof(UIVoiceAnswerDraw_DrawTextureD) == 0x000010, "Wrong size on UIVoiceAnswerDraw_DrawTextureD");
static_assert(offsetof(UIVoiceAnswerDraw_DrawTextureD, InPos) == 0x000000, "Member 'UIVoiceAnswerDraw_DrawTextureD::InPos' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawTextureD, InColor) == 0x000008, "Member 'UIVoiceAnswerDraw_DrawTextureD::InColor' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_DrawTextureD, Angle) == 0x00000C, "Member 'UIVoiceAnswerDraw_DrawTextureD::Angle' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.InitDraw_IN
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_InitDraw_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_InitDraw_IN) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_InitDraw_IN");
static_assert(sizeof(UIVoiceAnswerDraw_InitDraw_IN) == 0x000001, "Wrong size on UIVoiceAnswerDraw_InitDraw_IN");
static_assert(offsetof(UIVoiceAnswerDraw_InitDraw_IN, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_InitDraw_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.InitDraw_Out
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_InitDraw_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_InitDraw_Out) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_InitDraw_Out");
static_assert(sizeof(UIVoiceAnswerDraw_InitDraw_Out) == 0x000001, "Wrong size on UIVoiceAnswerDraw_InitDraw_Out");
static_assert(offsetof(UIVoiceAnswerDraw_InitDraw_Out, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_InitDraw_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.InitDrawBlackBoard_IN
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_InitDrawBlackBoard_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_InitDrawBlackBoard_IN) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_InitDrawBlackBoard_IN");
static_assert(sizeof(UIVoiceAnswerDraw_InitDrawBlackBoard_IN) == 0x000001, "Wrong size on UIVoiceAnswerDraw_InitDrawBlackBoard_IN");
static_assert(offsetof(UIVoiceAnswerDraw_InitDrawBlackBoard_IN, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_InitDrawBlackBoard_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.InitDrawBlackBoard_Out
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_InitDrawBlackBoard_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_InitDrawBlackBoard_Out) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_InitDrawBlackBoard_Out");
static_assert(sizeof(UIVoiceAnswerDraw_InitDrawBlackBoard_Out) == 0x000001, "Wrong size on UIVoiceAnswerDraw_InitDrawBlackBoard_Out");
static_assert(offsetof(UIVoiceAnswerDraw_InitDrawBlackBoard_Out, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_InitDrawBlackBoard_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.InitDrawNetworkIcon_IN
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_InitDrawNetworkIcon_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_InitDrawNetworkIcon_IN) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_InitDrawNetworkIcon_IN");
static_assert(sizeof(UIVoiceAnswerDraw_InitDrawNetworkIcon_IN) == 0x000001, "Wrong size on UIVoiceAnswerDraw_InitDrawNetworkIcon_IN");
static_assert(offsetof(UIVoiceAnswerDraw_InitDrawNetworkIcon_IN, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_InitDrawNetworkIcon_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.InitDrawNetworkIcon_Out
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_InitDrawNetworkIcon_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_InitDrawNetworkIcon_Out) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_InitDrawNetworkIcon_Out");
static_assert(sizeof(UIVoiceAnswerDraw_InitDrawNetworkIcon_Out) == 0x000001, "Wrong size on UIVoiceAnswerDraw_InitDrawNetworkIcon_Out");
static_assert(offsetof(UIVoiceAnswerDraw_InitDrawNetworkIcon_Out, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_InitDrawNetworkIcon_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.IsMaxAnswer
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_IsMaxAnswer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_IsMaxAnswer) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_IsMaxAnswer");
static_assert(sizeof(UIVoiceAnswerDraw_IsMaxAnswer) == 0x000001, "Wrong size on UIVoiceAnswerDraw_IsMaxAnswer");
static_assert(offsetof(UIVoiceAnswerDraw_IsMaxAnswer, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_IsMaxAnswer::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.KeyHelpIn
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_KeyHelpIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_KeyHelpIn) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_KeyHelpIn");
static_assert(sizeof(UIVoiceAnswerDraw_KeyHelpIn) == 0x000001, "Wrong size on UIVoiceAnswerDraw_KeyHelpIn");
static_assert(offsetof(UIVoiceAnswerDraw_KeyHelpIn, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_KeyHelpIn::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.KeyHelpOut
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_KeyHelpOut final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_KeyHelpOut) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_KeyHelpOut");
static_assert(sizeof(UIVoiceAnswerDraw_KeyHelpOut) == 0x000001, "Wrong size on UIVoiceAnswerDraw_KeyHelpOut");
static_assert(offsetof(UIVoiceAnswerDraw_KeyHelpOut, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_KeyHelpOut::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.StateDraw_BG
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_StateDraw_BG final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_StateDraw_BG) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_StateDraw_BG");
static_assert(sizeof(UIVoiceAnswerDraw_StateDraw_BG) == 0x000001, "Wrong size on UIVoiceAnswerDraw_StateDraw_BG");
static_assert(offsetof(UIVoiceAnswerDraw_StateDraw_BG, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_StateDraw_BG::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.StateDraw_Frame
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_StateDraw_Frame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_StateDraw_Frame) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_StateDraw_Frame");
static_assert(sizeof(UIVoiceAnswerDraw_StateDraw_Frame) == 0x000001, "Wrong size on UIVoiceAnswerDraw_StateDraw_Frame");
static_assert(offsetof(UIVoiceAnswerDraw_StateDraw_Frame, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_StateDraw_Frame::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.StateDraw_IN
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_StateDraw_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_StateDraw_IN) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_StateDraw_IN");
static_assert(sizeof(UIVoiceAnswerDraw_StateDraw_IN) == 0x000001, "Wrong size on UIVoiceAnswerDraw_StateDraw_IN");
static_assert(offsetof(UIVoiceAnswerDraw_StateDraw_IN, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_StateDraw_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.StateDraw_Network
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_StateDraw_Network final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_StateDraw_Network) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_StateDraw_Network");
static_assert(sizeof(UIVoiceAnswerDraw_StateDraw_Network) == 0x000001, "Wrong size on UIVoiceAnswerDraw_StateDraw_Network");
static_assert(offsetof(UIVoiceAnswerDraw_StateDraw_Network, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_StateDraw_Network::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.StateDraw_Out
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_StateDraw_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_StateDraw_Out) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_StateDraw_Out");
static_assert(sizeof(UIVoiceAnswerDraw_StateDraw_Out) == 0x000001, "Wrong size on UIVoiceAnswerDraw_StateDraw_Out");
static_assert(offsetof(UIVoiceAnswerDraw_StateDraw_Out, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_StateDraw_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.StateDrawBlackBoard_IN
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_StateDrawBlackBoard_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_StateDrawBlackBoard_IN) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_StateDrawBlackBoard_IN");
static_assert(sizeof(UIVoiceAnswerDraw_StateDrawBlackBoard_IN) == 0x000001, "Wrong size on UIVoiceAnswerDraw_StateDrawBlackBoard_IN");
static_assert(offsetof(UIVoiceAnswerDraw_StateDrawBlackBoard_IN, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_StateDrawBlackBoard_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.StateDrawBlackBoard_Out
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_StateDrawBlackBoard_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_StateDrawBlackBoard_Out) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_StateDrawBlackBoard_Out");
static_assert(sizeof(UIVoiceAnswerDraw_StateDrawBlackBoard_Out) == 0x000001, "Wrong size on UIVoiceAnswerDraw_StateDrawBlackBoard_Out");
static_assert(offsetof(UIVoiceAnswerDraw_StateDrawBlackBoard_Out, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_StateDrawBlackBoard_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.StateDrawNetworkIcon_IN
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_StateDrawNetworkIcon_IN final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_StateDrawNetworkIcon_IN) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_StateDrawNetworkIcon_IN");
static_assert(sizeof(UIVoiceAnswerDraw_StateDrawNetworkIcon_IN) == 0x000001, "Wrong size on UIVoiceAnswerDraw_StateDrawNetworkIcon_IN");
static_assert(offsetof(UIVoiceAnswerDraw_StateDrawNetworkIcon_IN, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_StateDrawNetworkIcon_IN::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.StateDrawNetworkIcon_Out
// 0x0001 (0x0001 - 0x0000)
struct UIVoiceAnswerDraw_StateDrawNetworkIcon_Out final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVoiceAnswerDraw_StateDrawNetworkIcon_Out) == 0x000001, "Wrong alignment on UIVoiceAnswerDraw_StateDrawNetworkIcon_Out");
static_assert(sizeof(UIVoiceAnswerDraw_StateDrawNetworkIcon_Out) == 0x000001, "Wrong size on UIVoiceAnswerDraw_StateDrawNetworkIcon_Out");
static_assert(offsetof(UIVoiceAnswerDraw_StateDrawNetworkIcon_Out, ReturnValue) == 0x000000, "Member 'UIVoiceAnswerDraw_StateDrawNetworkIcon_Out::ReturnValue' has a wrong offset!");

// Function xrd777.UIVoiceAnswerDraw.TimeWithinRangeFrame
// 0x0010 (0x0010 - 0x0000)
struct UIVoiceAnswerDraw_TimeWithinRangeFrame final
{
public:
	float                                         NowTime;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartFrame;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndFrame;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIVoiceAnswerDraw_TimeWithinRangeFrame) == 0x000004, "Wrong alignment on UIVoiceAnswerDraw_TimeWithinRangeFrame");
static_assert(sizeof(UIVoiceAnswerDraw_TimeWithinRangeFrame) == 0x000010, "Wrong size on UIVoiceAnswerDraw_TimeWithinRangeFrame");
static_assert(offsetof(UIVoiceAnswerDraw_TimeWithinRangeFrame, NowTime) == 0x000000, "Member 'UIVoiceAnswerDraw_TimeWithinRangeFrame::NowTime' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_TimeWithinRangeFrame, StartFrame) == 0x000004, "Member 'UIVoiceAnswerDraw_TimeWithinRangeFrame::StartFrame' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_TimeWithinRangeFrame, EndFrame) == 0x000008, "Member 'UIVoiceAnswerDraw_TimeWithinRangeFrame::EndFrame' has a wrong offset!");
static_assert(offsetof(UIVoiceAnswerDraw_TimeWithinRangeFrame, ReturnValue) == 0x00000C, "Member 'UIVoiceAnswerDraw_TimeWithinRangeFrame::ReturnValue' has a wrong offset!");

// Function xrd777.UmgDebugLogWidget.SetText
// 0x0018 (0x0018 - 0x0000)
struct UmgDebugLogWidget_SetText final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UmgDebugLogWidget_SetText) == 0x000008, "Wrong alignment on UmgDebugLogWidget_SetText");
static_assert(sizeof(UmgDebugLogWidget_SetText) == 0x000018, "Wrong size on UmgDebugLogWidget_SetText");
static_assert(offsetof(UmgDebugLogWidget_SetText, InText) == 0x000000, "Member 'UmgDebugLogWidget_SetText::InText' has a wrong offset!");

// Function xrd777.UtlBpObjManager.CreateBluePrint
// 0x0010 (0x0010 - 0x0000)
struct UtlBpObjManager_CreateBluePrint final
{
public:
	class UClass*                                 ObjectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUtlBpObjCore*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtlBpObjManager_CreateBluePrint) == 0x000008, "Wrong alignment on UtlBpObjManager_CreateBluePrint");
static_assert(sizeof(UtlBpObjManager_CreateBluePrint) == 0x000010, "Wrong size on UtlBpObjManager_CreateBluePrint");
static_assert(offsetof(UtlBpObjManager_CreateBluePrint, ObjectClass) == 0x000000, "Member 'UtlBpObjManager_CreateBluePrint::ObjectClass' has a wrong offset!");
static_assert(offsetof(UtlBpObjManager_CreateBluePrint, ReturnValue) == 0x000008, "Member 'UtlBpObjManager_CreateBluePrint::ReturnValue' has a wrong offset!");

// Function xrd777.UtlBpObjManager.SetBluePrint
// 0x0008 (0x0008 - 0x0000)
struct UtlBpObjManager_SetBluePrint final
{
public:
	class UUtlBpObjCore*                          BpObjCore;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UtlBpObjManager_SetBluePrint) == 0x000008, "Wrong alignment on UtlBpObjManager_SetBluePrint");
static_assert(sizeof(UtlBpObjManager_SetBluePrint) == 0x000008, "Wrong size on UtlBpObjManager_SetBluePrint");
static_assert(offsetof(UtlBpObjManager_SetBluePrint, BpObjCore) == 0x000000, "Member 'UtlBpObjManager_SetBluePrint::BpObjCore' has a wrong offset!");

}

