#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPFL_ABPCostume

#include "Basic.hpp"

#include "BPFL_ABPCostume_classes.hpp"
#include "BPFL_ABPCostume_parameters.hpp"


namespace SDK
{

// Function BPFL_ABPCostume.BPFL_ABPCostume_C.GetSkirtVectors
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            PawnOwner                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SkirtRootName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SkirtRootEndName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SkirtRootParentName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SkirtRootZcoff_In                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   SkirtRootYcoff_In                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        LeftLegSkirtBS_Out                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        RightLegSkirtBS_Out                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         SkirtRootRot_Out                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_ABPCostume_C::GetSkirtVectors(class APawn* PawnOwner, class FName SkirtRootName, class FName SkirtRootEndName, class FName SkirtRootParentName, float SkirtRootZcoff_In, float SkirtRootYcoff_In, class UObject* __WorldContext, struct FVector2D* LeftLegSkirtBS_Out, struct FVector2D* RightLegSkirtBS_Out, struct FRotator* SkirtRootRot_Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_ABPCostume_C", "GetSkirtVectors");

	Params::BPFL_ABPCostume_C_GetSkirtVectors Parms{};

	Parms.PawnOwner = PawnOwner;
	Parms.SkirtRootName = SkirtRootName;
	Parms.SkirtRootEndName = SkirtRootEndName;
	Parms.SkirtRootParentName = SkirtRootParentName;
	Parms.SkirtRootZcoff_In = SkirtRootZcoff_In;
	Parms.SkirtRootYcoff_In = SkirtRootYcoff_In;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (LeftLegSkirtBS_Out != nullptr)
		*LeftLegSkirtBS_Out = std::move(Parms.LeftLegSkirtBS_Out);

	if (RightLegSkirtBS_Out != nullptr)
		*RightLegSkirtBS_Out = std::move(Parms.RightLegSkirtBS_Out);

	if (SkirtRootRot_Out != nullptr)
		*SkirtRootRot_Out = std::move(Parms.SkirtRootRot_Out);
}


// Function BPFL_ABPCostume.BPFL_ABPCostume_C.Get2Dvector
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          LegInput                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BS_UnitValue                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          SpineInput                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D                        OutPutVector                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           DebugParam                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBPFL_ABPCostume_C::Get2Dvector(const struct FVector& LegInput, float BS_UnitValue, const struct FVector& SpineInput, class UObject* __WorldContext, struct FVector2D* OutPutVector, class FString* DebugParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_ABPCostume_C", "Get2Dvector");

	Params::BPFL_ABPCostume_C_Get2Dvector Parms{};

	Parms.LegInput = std::move(LegInput);
	Parms.BS_UnitValue = BS_UnitValue;
	Parms.SpineInput = std::move(SpineInput);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutPutVector != nullptr)
		*OutPutVector = std::move(Parms.OutPutVector);

	if (DebugParam != nullptr)
		*DebugParam = std::move(Parms.DebugParam);
}


// Function BPFL_ABPCostume.BPFL_ABPCostume_C.GetAngleBetween
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          InBetweenVector                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          InTargetVector                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ConstraintXZ                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ConstraintXY                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OutAngle                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_ABPCostume_C::GetAngleBetween(const struct FVector& InBetweenVector, const struct FVector& InTargetVector, bool ConstraintXZ, bool ConstraintXY, class UObject* __WorldContext, float* OutAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPFL_ABPCostume_C", "GetAngleBetween");

	Params::BPFL_ABPCostume_C_GetAngleBetween Parms{};

	Parms.InBetweenVector = std::move(InBetweenVector);
	Parms.InTargetVector = std::move(InTargetVector);
	Parms.ConstraintXZ = ConstraintXZ;
	Parms.ConstraintXY = ConstraintXY;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutAngle != nullptr)
		*OutAngle = Parms.OutAngle;
}


// Function BPFL_ABPCostume.BPFL_ABPCostume_C.Get Leg Rotate From Skirt Vector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CalcDirection_L_                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class USkeletalMeshComponent*           SkeletalMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimInstance*                    AnimInstance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InUpLegName                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             InPreserveUpLegName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotateZ                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RotateY                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPFL_ABPCostume_C::Get_Leg_Rotate_From_Skirt_Vector(bool CalcDirection_L_, class USkeletalMeshComponent* SkeletalMesh, class UAnimInstance* AnimInstance, class FName InUpLegName, class FName InPreserveUpLegName, class UObject* __WorldContext, float* RotateZ, float* RotateY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPFL_ABPCostume_C", "Get Leg Rotate From Skirt Vector");

	Params::BPFL_ABPCostume_C_Get_Leg_Rotate_From_Skirt_Vector Parms{};

	Parms.CalcDirection_L_ = CalcDirection_L_;
	Parms.SkeletalMesh = SkeletalMesh;
	Parms.AnimInstance = AnimInstance;
	Parms.InUpLegName = InUpLegName;
	Parms.InPreserveUpLegName = InPreserveUpLegName;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	if (RotateZ != nullptr)
		*RotateZ = Parms.RotateZ;

	if (RotateY != nullptr)
		*RotateY = Parms.RotateY;
}


// Function BPFL_ABPCostume.BPFL_ABPCostume_C.Get Matrix
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// ERelativeTransformSpace                 TransformSpace                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Inverse                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMatrix                          Matrix                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBPFL_ABPCostume_C::Get_Matrix(class AActor* Actor, class FName SocketName, ERelativeTransformSpace TransformSpace, bool Inverse, class UObject* __WorldContext, struct FMatrix* Matrix)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BPFL_ABPCostume_C", "Get Matrix");

	Params::BPFL_ABPCostume_C_Get_Matrix Parms{};

	Parms.Actor = Actor;
	Parms.SocketName = SocketName;
	Parms.TransformSpace = TransformSpace;
	Parms.Inverse = Inverse;
	Parms.__WorldContext = __WorldContext;

	UObject::ProcessEvent(Func, &Parms);

	if (Matrix != nullptr)
		*Matrix = std::move(Parms.Matrix);
}

}

