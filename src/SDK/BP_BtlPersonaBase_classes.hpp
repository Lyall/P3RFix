#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlPersonaBase

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Xrd777_structs.hpp"
#include "BP_BtlCharacterBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlPersonaBase.BP_BtlPersonaBase_C
// 0x00E0 (0x10DB0 - 0x10CD0)
class ABP_BtlPersonaBase_C final : public ABP_BtlCharacterBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BtlPersonaBase_C;                // 0x10CD0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   PersonaCharaBP;                                    // 0x10CD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_EEBCA0924DFD4D36883767AF424FB406; // 0x10CE0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_EEBCA0924DFD4D36883767AF424FB406; // 0x10CE4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10CE5[0x3];                                    // 0x10CE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x10CE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UDataTable*                             PersonaVisual;                                     // 0x10CF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         SkillCameraPhysics;                                // 0x10CF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         SkillCameraMagic;                                  // 0x10D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             NotifySkillPlay;                                   // 0x10D08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             NotifySkillCameraPlay;                             // 0x10D18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          RequestSkillCameraPlay;                            // 0x10D28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RequestSkillPlay;                                  // 0x10D29(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D2A[0x6];                                    // 0x10D2A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       PersonaDIM;                                        // 0x10D30(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCurveFloat*                            Curve_Summon_Alpha;                                // 0x10D40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Curve_Alpha;                                       // 0x10D48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      PersonaSummonLoopEffect;                           // 0x10D50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlPersonaAnimationType                      RequestAnim;                                       // 0x10D58(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D59[0x7];                                    // 0x10D59(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 PersonaOwner;                                      // 0x10D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ULevelSequence*>                 SkillCameraMagicList;                              // 0x10D68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_PersonaBase_C*                      PersonaAppCharacter;                               // 0x10D78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DefaultScale;                                      // 0x10D80(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EVisibilityBasedAnimTickOption                Visibility_Based_Anim_Tick_Option;                 // 0x10D8C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D8D[0x3];                                    // 0x10D8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           SceneAnimMontage;                                  // 0x10D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFading;                                          // 0x10D98(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10D99[0x3];                                    // 0x10D99(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeTime;                                          // 0x10D9C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FadeElapsedTime;                                   // 0x10DA0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SkillAnimAfterCutinMode;                           // 0x10DA4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMonitoringSkillAnimFromCutin;                    // 0x10DA5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void NotifySkillPlay__DelegateSignature();
	void NotifySkillCameraPlay__DelegateSignature();
	void ExecuteUbergraph_BP_BtlPersonaBase(int32 EntryPoint);
	void On_Call_Skill_Shot_From_Cutin();
	void On_Play_Summon_Effect();
	void SetPersonaOwner(class ABtlActor* PersonaOwner_0);
	void Request_Fadeout();
	void Request_Persona_Scene_Animation(EBtlPersonaSceneAnimationType Type, bool UseCustomBlend, float Blend);
	void Request_Phisical_Skill_Animation(bool IsAfterCutin);
	void ReceiveDestroyed();
	void Request_Magic_Skill_Animation(bool IsAfterCutin);
	void Request_Persona_Animation(EBtlPersonaAnimationType Type, bool UseCustomBlend, float Blend);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void On_Anim_Emerge();
	void On_Ready_Showing_Emerge_Effect(bool LoopEffectOnly);
	void OnCompleted_00B369494CAD1145A2628791C978A870(class FName NotifyName);
	void OnBlendOut_00B369494CAD1145A2628791C978A870(class FName NotifyName);
	void OnInterrupted_00B369494CAD1145A2628791C978A870(class FName NotifyName);
	void OnNotifyBegin_00B369494CAD1145A2628791C978A870(class FName NotifyName);
	void OnNotifyEnd_00B369494CAD1145A2628791C978A870(class FName NotifyName);
	void OnCompleted_0F563E704A8F70393E6FEB836877B9A4(class FName NotifyName);
	void OnBlendOut_0F563E704A8F70393E6FEB836877B9A4(class FName NotifyName);
	void OnInterrupted_0F563E704A8F70393E6FEB836877B9A4(class FName NotifyName);
	void OnNotifyBegin_0F563E704A8F70393E6FEB836877B9A4(class FName NotifyName);
	void OnNotifyEnd_0F563E704A8F70393E6FEB836877B9A4(class FName NotifyName);
	void OnCompleted_0F563E704A8F70393E6FEB831A9E4DC5(class FName NotifyName);
	void OnBlendOut_0F563E704A8F70393E6FEB831A9E4DC5(class FName NotifyName);
	void OnInterrupted_0F563E704A8F70393E6FEB831A9E4DC5(class FName NotifyName);
	void OnNotifyBegin_0F563E704A8F70393E6FEB831A9E4DC5(class FName NotifyName);
	void OnNotifyEnd_0F563E704A8F70393E6FEB831A9E4DC5(class FName NotifyName);
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void GetSkeletalMesh(class USkeletalMeshComponent** SkeletalMesh);
	void CreateDIM();
	void SetPersonaSummonAlpha(float Value);
	void SetPersonaOpacity(float Value);
	void ShowEmergeEffect(bool LoopEffectOnly);
	void ShowEmergeEffectInternal(bool LoopEffectOnly);
	void DestroyEmergeEffect();
	void GetEmergeEffect(class UNiagaraComponent** PersonaSummonLoopEffect_0);
	void SetVisible(bool Visible, bool KeepAnim);
	void GetCharacterScale(struct FVector* Scale);
	void SetupMagicLocation();
	void SetupPhysicsLocation();
	void SetPersonaBP();
	void SetupTheurgiaSituation(const struct FVector& Scale);
	void RestoreTheurgiaSituation();
	void SetupEventAnimation(bool Enable);
	void InitAfterCreateAppCharacter();
	void SetPersonaVisual(const struct FLinearColor& Caustics, const struct FLinearColor& SummonRim, float Opacity);
	void CalcSkillAnimStartingPosition(EBtlPersonaAnimationType AnimType, bool IsAfterCutin, float* Position_0);
	void MonitorSkillAnimAfterCutin();
	void StartMonitoringSkillAnimAfterCutin();

	struct FTransform GetPersonaTransform(bool ForCutin) const;
	struct FTransform GetPersonaTransformMagic() const;
	struct FTransform GetPersonaTransformPhysics() const;
	struct FTransform GetPersonaTransformFromSkillCondition(const class ABtlActor* PersonaOwner_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlPersonaBase_C">();
	}
	static class ABP_BtlPersonaBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlPersonaBase_C>();
	}
};
static_assert(alignof(ABP_BtlPersonaBase_C) == 0x000010, "Wrong alignment on ABP_BtlPersonaBase_C");
static_assert(sizeof(ABP_BtlPersonaBase_C) == 0x010DB0, "Wrong size on ABP_BtlPersonaBase_C");
static_assert(offsetof(ABP_BtlPersonaBase_C, UberGraphFrame_BP_BtlPersonaBase_C) == 0x010CD0, "Member 'ABP_BtlPersonaBase_C::UberGraphFrame_BP_BtlPersonaBase_C' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, PersonaCharaBP) == 0x010CD8, "Member 'ABP_BtlPersonaBase_C::PersonaCharaBP' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, Timeline_0_NewTrack_0_EEBCA0924DFD4D36883767AF424FB406) == 0x010CE0, "Member 'ABP_BtlPersonaBase_C::Timeline_0_NewTrack_0_EEBCA0924DFD4D36883767AF424FB406' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, Timeline_0__Direction_EEBCA0924DFD4D36883767AF424FB406) == 0x010CE4, "Member 'ABP_BtlPersonaBase_C::Timeline_0__Direction_EEBCA0924DFD4D36883767AF424FB406' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, Timeline_0) == 0x010CE8, "Member 'ABP_BtlPersonaBase_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, PersonaVisual) == 0x010CF0, "Member 'ABP_BtlPersonaBase_C::PersonaVisual' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, SkillCameraPhysics) == 0x010CF8, "Member 'ABP_BtlPersonaBase_C::SkillCameraPhysics' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, SkillCameraMagic) == 0x010D00, "Member 'ABP_BtlPersonaBase_C::SkillCameraMagic' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, NotifySkillPlay) == 0x010D08, "Member 'ABP_BtlPersonaBase_C::NotifySkillPlay' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, NotifySkillCameraPlay) == 0x010D18, "Member 'ABP_BtlPersonaBase_C::NotifySkillCameraPlay' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, RequestSkillCameraPlay) == 0x010D28, "Member 'ABP_BtlPersonaBase_C::RequestSkillCameraPlay' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, RequestSkillPlay) == 0x010D29, "Member 'ABP_BtlPersonaBase_C::RequestSkillPlay' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, PersonaDIM) == 0x010D30, "Member 'ABP_BtlPersonaBase_C::PersonaDIM' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, Curve_Summon_Alpha) == 0x010D40, "Member 'ABP_BtlPersonaBase_C::Curve_Summon_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, Curve_Alpha) == 0x010D48, "Member 'ABP_BtlPersonaBase_C::Curve_Alpha' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, PersonaSummonLoopEffect) == 0x010D50, "Member 'ABP_BtlPersonaBase_C::PersonaSummonLoopEffect' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, RequestAnim) == 0x010D58, "Member 'ABP_BtlPersonaBase_C::RequestAnim' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, PersonaOwner) == 0x010D60, "Member 'ABP_BtlPersonaBase_C::PersonaOwner' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, SkillCameraMagicList) == 0x010D68, "Member 'ABP_BtlPersonaBase_C::SkillCameraMagicList' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, PersonaAppCharacter) == 0x010D78, "Member 'ABP_BtlPersonaBase_C::PersonaAppCharacter' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, DefaultScale) == 0x010D80, "Member 'ABP_BtlPersonaBase_C::DefaultScale' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, Visibility_Based_Anim_Tick_Option) == 0x010D8C, "Member 'ABP_BtlPersonaBase_C::Visibility_Based_Anim_Tick_Option' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, SceneAnimMontage) == 0x010D90, "Member 'ABP_BtlPersonaBase_C::SceneAnimMontage' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, IsFading) == 0x010D98, "Member 'ABP_BtlPersonaBase_C::IsFading' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, FadeTime) == 0x010D9C, "Member 'ABP_BtlPersonaBase_C::FadeTime' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, FadeElapsedTime) == 0x010DA0, "Member 'ABP_BtlPersonaBase_C::FadeElapsedTime' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, SkillAnimAfterCutinMode) == 0x010DA4, "Member 'ABP_BtlPersonaBase_C::SkillAnimAfterCutinMode' has a wrong offset!");
static_assert(offsetof(ABP_BtlPersonaBase_C, IsMonitoringSkillAnimFromCutin) == 0x010DA5, "Member 'ABP_BtlPersonaBase_C::IsMonitoringSkillAnimFromCutin' has a wrong offset!");

}

