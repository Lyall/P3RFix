#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnimalBase

#include "Basic.hpp"

#include "ALS_MovementAction_structs.hpp"
#include "Engine_structs.hpp"
#include "ALS_Gait_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "ALS_Stance_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_AnimalBase.BP_AnimalBase_C.ExecuteUbergraph_BP_AnimalBase
// 0x0010 (0x0010 - 0x0000)
struct BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            K2Node_Event_NewMovementState;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           K2Node_Event_NewMovementAction;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             K2Node_Event_NewRotationMode;                      // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     K2Node_Event_NewGait;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 K2Node_Event_NewViewMode;                          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             K2Node_Event_NewOverlayState;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase) == 0x000004, "Wrong alignment on BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase");
static_assert(sizeof(BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase) == 0x000010, "Wrong size on BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase");
static_assert(offsetof(BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase, EntryPoint) == 0x000000, "Member 'BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase, K2Node_Event_NewMovementState) == 0x000004, "Member 'BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase::K2Node_Event_NewMovementState' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase, K2Node_Event_NewMovementAction) == 0x000005, "Member 'BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase::K2Node_Event_NewMovementAction' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase, K2Node_Event_NewRotationMode) == 0x000006, "Member 'BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase::K2Node_Event_NewRotationMode' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase, K2Node_Event_NewGait) == 0x000007, "Member 'BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase::K2Node_Event_NewGait' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase, K2Node_Event_NewViewMode) == 0x000008, "Member 'BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase::K2Node_Event_NewViewMode' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase, K2Node_Event_NewOverlayState) == 0x000009, "Member 'BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase::K2Node_Event_NewOverlayState' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase, K2Node_Event_DeltaSeconds) == 0x00000C, "Member 'BP_AnimalBase_C_ExecuteUbergraph_BP_AnimalBase::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_AnimalBase.BP_AnimalBase_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_AnimalBase_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimalBase_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_AnimalBase_C_ReceiveTick");
static_assert(sizeof(BP_AnimalBase_C_ReceiveTick) == 0x000004, "Wrong size on BP_AnimalBase_C_ReceiveTick");
static_assert(offsetof(BP_AnimalBase_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_AnimalBase_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_AnimalBase.BP_AnimalBase_C.BPI_Set_OverlayState
// 0x0001 (0x0001 - 0x0000)
struct BP_AnimalBase_C_BPI_Set_OverlayState final
{
public:
	EALS_OverlayState                             NewOverlayState;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimalBase_C_BPI_Set_OverlayState) == 0x000001, "Wrong alignment on BP_AnimalBase_C_BPI_Set_OverlayState");
static_assert(sizeof(BP_AnimalBase_C_BPI_Set_OverlayState) == 0x000001, "Wrong size on BP_AnimalBase_C_BPI_Set_OverlayState");
static_assert(offsetof(BP_AnimalBase_C_BPI_Set_OverlayState, NewOverlayState) == 0x000000, "Member 'BP_AnimalBase_C_BPI_Set_OverlayState::NewOverlayState' has a wrong offset!");

// Function BP_AnimalBase.BP_AnimalBase_C.BPI_Set_ViewMode
// 0x0001 (0x0001 - 0x0000)
struct BP_AnimalBase_C_BPI_Set_ViewMode final
{
public:
	EALS_ViewMode                                 NewViewMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimalBase_C_BPI_Set_ViewMode) == 0x000001, "Wrong alignment on BP_AnimalBase_C_BPI_Set_ViewMode");
static_assert(sizeof(BP_AnimalBase_C_BPI_Set_ViewMode) == 0x000001, "Wrong size on BP_AnimalBase_C_BPI_Set_ViewMode");
static_assert(offsetof(BP_AnimalBase_C_BPI_Set_ViewMode, NewViewMode) == 0x000000, "Member 'BP_AnimalBase_C_BPI_Set_ViewMode::NewViewMode' has a wrong offset!");

// Function BP_AnimalBase.BP_AnimalBase_C.BPI_Set_Gait
// 0x0001 (0x0001 - 0x0000)
struct BP_AnimalBase_C_BPI_Set_Gait final
{
public:
	EALS_Gait                                     NewGait;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimalBase_C_BPI_Set_Gait) == 0x000001, "Wrong alignment on BP_AnimalBase_C_BPI_Set_Gait");
static_assert(sizeof(BP_AnimalBase_C_BPI_Set_Gait) == 0x000001, "Wrong size on BP_AnimalBase_C_BPI_Set_Gait");
static_assert(offsetof(BP_AnimalBase_C_BPI_Set_Gait, NewGait) == 0x000000, "Member 'BP_AnimalBase_C_BPI_Set_Gait::NewGait' has a wrong offset!");

// Function BP_AnimalBase.BP_AnimalBase_C.BPI_Set_RotationMode
// 0x0001 (0x0001 - 0x0000)
struct BP_AnimalBase_C_BPI_Set_RotationMode final
{
public:
	EALS_RotationMode                             NewRotationMode;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimalBase_C_BPI_Set_RotationMode) == 0x000001, "Wrong alignment on BP_AnimalBase_C_BPI_Set_RotationMode");
static_assert(sizeof(BP_AnimalBase_C_BPI_Set_RotationMode) == 0x000001, "Wrong size on BP_AnimalBase_C_BPI_Set_RotationMode");
static_assert(offsetof(BP_AnimalBase_C_BPI_Set_RotationMode, NewRotationMode) == 0x000000, "Member 'BP_AnimalBase_C_BPI_Set_RotationMode::NewRotationMode' has a wrong offset!");

// Function BP_AnimalBase.BP_AnimalBase_C.BPI_Set_MovementAction
// 0x0001 (0x0001 - 0x0000)
struct BP_AnimalBase_C_BPI_Set_MovementAction final
{
public:
	EALS_MovementAction                           NewMovementAction;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimalBase_C_BPI_Set_MovementAction) == 0x000001, "Wrong alignment on BP_AnimalBase_C_BPI_Set_MovementAction");
static_assert(sizeof(BP_AnimalBase_C_BPI_Set_MovementAction) == 0x000001, "Wrong size on BP_AnimalBase_C_BPI_Set_MovementAction");
static_assert(offsetof(BP_AnimalBase_C_BPI_Set_MovementAction, NewMovementAction) == 0x000000, "Member 'BP_AnimalBase_C_BPI_Set_MovementAction::NewMovementAction' has a wrong offset!");

// Function BP_AnimalBase.BP_AnimalBase_C.BPI_Set_MovementState
// 0x0001 (0x0001 - 0x0000)
struct BP_AnimalBase_C_BPI_Set_MovementState final
{
public:
	EALS_MovementState                            NewMovementState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimalBase_C_BPI_Set_MovementState) == 0x000001, "Wrong alignment on BP_AnimalBase_C_BPI_Set_MovementState");
static_assert(sizeof(BP_AnimalBase_C_BPI_Set_MovementState) == 0x000001, "Wrong size on BP_AnimalBase_C_BPI_Set_MovementState");
static_assert(offsetof(BP_AnimalBase_C_BPI_Set_MovementState, NewMovementState) == 0x000000, "Member 'BP_AnimalBase_C_BPI_Set_MovementState::NewMovementState' has a wrong offset!");

// Function BP_AnimalBase.BP_AnimalBase_C.Set Essential Values
// 0x0054 (0x0054 - 0x0000)
struct BP_AnimalBase_C_Set_Essential_Values final
{
public:
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetMaxAcceleration_ReturnValue;           // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0014(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_X;                            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Y;                            // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakVector_Z;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Calculate_Acceleration_ReturnValue;       // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue_1;         // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_AnimalBase_C_Set_Essential_Values) == 0x000004, "Wrong alignment on BP_AnimalBase_C_Set_Essential_Values");
static_assert(sizeof(BP_AnimalBase_C_Set_Essential_Values) == 0x000054, "Wrong size on BP_AnimalBase_C_Set_Essential_Values");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000000, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_GetMaxAcceleration_ReturnValue) == 0x000004, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_GetMaxAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x000008, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_GetVelocity_ReturnValue) == 0x000014, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_VSize_ReturnValue) == 0x000020, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_BreakVector_X) == 0x000024, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_BreakVector_Y) == 0x000028, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_BreakVector_Z) == 0x00002C, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000030, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_MakeVector_ReturnValue) == 0x000034, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_VSize_ReturnValue_1) == 0x000040, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_VSize_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_Calculate_Acceleration_ReturnValue) == 0x000044, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_Calculate_Acceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Set_Essential_Values, CallFunc_Greater_FloatFloat_ReturnValue_1) == 0x000050, "Member 'BP_AnimalBase_C_Set_Essential_Values::CallFunc_Greater_FloatFloat_ReturnValue_1' has a wrong offset!");

// Function BP_AnimalBase.BP_AnimalBase_C.Calculate Acceleration
// 0x0034 (0x0034 - 0x0000)
struct BP_AnimalBase_C_Calculate_Acceleration final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetWorldDeltaSeconds_ReturnValue;         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorFloat_ReturnValue;           // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimalBase_C_Calculate_Acceleration) == 0x000004, "Wrong alignment on BP_AnimalBase_C_Calculate_Acceleration");
static_assert(sizeof(BP_AnimalBase_C_Calculate_Acceleration) == 0x000034, "Wrong size on BP_AnimalBase_C_Calculate_Acceleration");
static_assert(offsetof(BP_AnimalBase_C_Calculate_Acceleration, ReturnValue) == 0x000000, "Member 'BP_AnimalBase_C_Calculate_Acceleration::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Calculate_Acceleration, CallFunc_GetVelocity_ReturnValue) == 0x00000C, "Member 'BP_AnimalBase_C_Calculate_Acceleration::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Calculate_Acceleration, CallFunc_GetWorldDeltaSeconds_ReturnValue) == 0x000018, "Member 'BP_AnimalBase_C_Calculate_Acceleration::CallFunc_GetWorldDeltaSeconds_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Calculate_Acceleration, CallFunc_Subtract_VectorVector_ReturnValue) == 0x00001C, "Member 'BP_AnimalBase_C_Calculate_Acceleration::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Calculate_Acceleration, CallFunc_Divide_VectorFloat_ReturnValue) == 0x000028, "Member 'BP_AnimalBase_C_Calculate_Acceleration::CallFunc_Divide_VectorFloat_ReturnValue' has a wrong offset!");

// Function BP_AnimalBase.BP_AnimalBase_C.Cache Values
// 0x0024 (0x0024 - 0x0000)
struct BP_AnimalBase_C_Cache_Values final
{
public:
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimalBase_C_Cache_Values) == 0x000004, "Wrong alignment on BP_AnimalBase_C_Cache_Values");
static_assert(sizeof(BP_AnimalBase_C_Cache_Values) == 0x000024, "Wrong size on BP_AnimalBase_C_Cache_Values");
static_assert(offsetof(BP_AnimalBase_C_Cache_Values, CallFunc_GetVelocity_ReturnValue) == 0x000000, "Member 'BP_AnimalBase_C_Cache_Values::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Cache_Values, CallFunc_GetControlRotation_ReturnValue) == 0x00000C, "Member 'BP_AnimalBase_C_Cache_Values::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Cache_Values, CallFunc_BreakRotator_Roll) == 0x000018, "Member 'BP_AnimalBase_C_Cache_Values::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Cache_Values, CallFunc_BreakRotator_Pitch) == 0x00001C, "Member 'BP_AnimalBase_C_Cache_Values::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_Cache_Values, CallFunc_BreakRotator_Yaw) == 0x000020, "Member 'BP_AnimalBase_C_Cache_Values::CallFunc_BreakRotator_Yaw' has a wrong offset!");

// Function BP_AnimalBase.BP_AnimalBase_C.BPI_Get_EssentialValues
// 0x0064 (0x0064 - 0x0000)
struct BP_AnimalBase_C_BPI_Get_EssentialValues final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Acceleration_0;                                    // 0x000C(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MovementInput;                                     // 0x0018(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving_0;                                        // 0x0024(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          HasMovementInput_0;                                // 0x0025(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed_0;                                           // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementInputAmount_0;                             // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               AimingRotation;                                    // 0x0030(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         AimYawRate_0;                                      // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0040(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimalBase_C_BPI_Get_EssentialValues) == 0x000004, "Wrong alignment on BP_AnimalBase_C_BPI_Get_EssentialValues");
static_assert(sizeof(BP_AnimalBase_C_BPI_Get_EssentialValues) == 0x000064, "Wrong size on BP_AnimalBase_C_BPI_Get_EssentialValues");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_EssentialValues, Velocity) == 0x000000, "Member 'BP_AnimalBase_C_BPI_Get_EssentialValues::Velocity' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_EssentialValues, Acceleration_0) == 0x00000C, "Member 'BP_AnimalBase_C_BPI_Get_EssentialValues::Acceleration_0' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_EssentialValues, MovementInput) == 0x000018, "Member 'BP_AnimalBase_C_BPI_Get_EssentialValues::MovementInput' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_EssentialValues, IsMoving_0) == 0x000024, "Member 'BP_AnimalBase_C_BPI_Get_EssentialValues::IsMoving_0' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_EssentialValues, HasMovementInput_0) == 0x000025, "Member 'BP_AnimalBase_C_BPI_Get_EssentialValues::HasMovementInput_0' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_EssentialValues, Speed_0) == 0x000028, "Member 'BP_AnimalBase_C_BPI_Get_EssentialValues::Speed_0' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_EssentialValues, MovementInputAmount_0) == 0x00002C, "Member 'BP_AnimalBase_C_BPI_Get_EssentialValues::MovementInputAmount_0' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_EssentialValues, AimingRotation) == 0x000030, "Member 'BP_AnimalBase_C_BPI_Get_EssentialValues::AimingRotation' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_EssentialValues, AimYawRate_0) == 0x00003C, "Member 'BP_AnimalBase_C_BPI_Get_EssentialValues::AimYawRate_0' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_EssentialValues, CallFunc_GetControlRotation_ReturnValue) == 0x000040, "Member 'BP_AnimalBase_C_BPI_Get_EssentialValues::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_EssentialValues, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x00004C, "Member 'BP_AnimalBase_C_BPI_Get_EssentialValues::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_EssentialValues, CallFunc_GetVelocity_ReturnValue) == 0x000058, "Member 'BP_AnimalBase_C_BPI_Get_EssentialValues::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");

// Function BP_AnimalBase.BP_AnimalBase_C.BPI_Get_CurrentStates
// 0x0009 (0x0009 - 0x0000)
struct BP_AnimalBase_C_BPI_Get_CurrentStates final
{
public:
	EMovementMode                                 PawnMovementMode;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            MovementState;                                     // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementState                            PrevMovementState;                                 // 0x0002(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_MovementAction                           MovementAction;                                    // 0x0003(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_RotationMode                             RotationMode;                                      // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Gait                                     ActualGait;                                        // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   ActualStance;                                      // 0x0006(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_ViewMode                                 ViewMode;                                          // 0x0007(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALS_OverlayState                             OverlayState;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AnimalBase_C_BPI_Get_CurrentStates) == 0x000001, "Wrong alignment on BP_AnimalBase_C_BPI_Get_CurrentStates");
static_assert(sizeof(BP_AnimalBase_C_BPI_Get_CurrentStates) == 0x000009, "Wrong size on BP_AnimalBase_C_BPI_Get_CurrentStates");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_CurrentStates, PawnMovementMode) == 0x000000, "Member 'BP_AnimalBase_C_BPI_Get_CurrentStates::PawnMovementMode' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_CurrentStates, MovementState) == 0x000001, "Member 'BP_AnimalBase_C_BPI_Get_CurrentStates::MovementState' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_CurrentStates, PrevMovementState) == 0x000002, "Member 'BP_AnimalBase_C_BPI_Get_CurrentStates::PrevMovementState' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_CurrentStates, MovementAction) == 0x000003, "Member 'BP_AnimalBase_C_BPI_Get_CurrentStates::MovementAction' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_CurrentStates, RotationMode) == 0x000004, "Member 'BP_AnimalBase_C_BPI_Get_CurrentStates::RotationMode' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_CurrentStates, ActualGait) == 0x000005, "Member 'BP_AnimalBase_C_BPI_Get_CurrentStates::ActualGait' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_CurrentStates, ActualStance) == 0x000006, "Member 'BP_AnimalBase_C_BPI_Get_CurrentStates::ActualStance' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_CurrentStates, ViewMode) == 0x000007, "Member 'BP_AnimalBase_C_BPI_Get_CurrentStates::ViewMode' has a wrong offset!");
static_assert(offsetof(BP_AnimalBase_C_BPI_Get_CurrentStates, OverlayState) == 0x000008, "Member 'BP_AnimalBase_C_BPI_Get_CurrentStates::OverlayState' has a wrong offset!");

}

