#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_HumanBase

#include "Basic.hpp"

#include "BP_HumanBase_classes.hpp"
#include "BP_HumanBase_parameters.hpp"


namespace SDK
{

// Function BP_HumanBase.BP_HumanBase_C.ExecuteUbergraph_BP_HumanBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::ExecuteUbergraph_BP_HumanBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "ExecuteUbergraph_BP_HumanBase");

	Params::BP_HumanBase_C_ExecuteUbergraph_BP_HumanBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.InpAxisEvt_PM_AxisLY_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::InpAxisEvt_PM_AxisLY_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "InpAxisEvt_PM_AxisLY_K2Node_InputAxisEvent_0");

	Params::BP_HumanBase_C_InpAxisEvt_PM_AxisLY_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.InpAxisEvt_PM_AxisLX_K2Node_InputAxisEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::InpAxisEvt_PM_AxisLX_K2Node_InputAxisEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "InpAxisEvt_PM_AxisLX_K2Node_InputAxisEvent_1");

	Params::BP_HumanBase_C_InpAxisEvt_PM_AxisLX_K2Node_InputAxisEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.BPI_Set_OverlayState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       NewOverlayState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::BPI_Set_OverlayState(EALS_OverlayState NewOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "BPI_Set_OverlayState");

	Params::BP_HumanBase_C_BPI_Set_OverlayState Parms{};

	Parms.NewOverlayState = NewOverlayState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.BPI_Set_ViewMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_ViewMode                           NewViewMode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::BPI_Set_ViewMode(EALS_ViewMode NewViewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "BPI_Set_ViewMode");

	Params::BP_HumanBase_C_BPI_Set_ViewMode Parms{};

	Parms.NewViewMode = NewViewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.BPI_Set_Gait
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               NewGait                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::BPI_Set_Gait(EALS_Gait NewGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "BPI_Set_Gait");

	Params::BP_HumanBase_C_BPI_Set_Gait Parms{};

	Parms.NewGait = NewGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.BPI_Set_RotationMode
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_RotationMode                       NewRotationMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::BPI_Set_RotationMode(EALS_RotationMode NewRotationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "BPI_Set_RotationMode");

	Params::BP_HumanBase_C_BPI_Set_RotationMode Parms{};

	Parms.NewRotationMode = NewRotationMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.BPI_Set_MovementAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementAction                     NewMovementAction                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::BPI_Set_MovementAction(EALS_MovementAction NewMovementAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "BPI_Set_MovementAction");

	Params::BP_HumanBase_C_BPI_Set_MovementAction Parms{};

	Parms.NewMovementAction = NewMovementAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.BPI_Set_MovementState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementState                      NewMovementState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::BPI_Set_MovementState(EALS_MovementState NewMovementState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "BPI_Set_MovementState");

	Params::BP_HumanBase_C_BPI_Set_MovementState Parms{};

	Parms.NewMovementState = NewMovementState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.Roll Event
// (BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::Roll_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "Roll Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.Breakfall Event
// (BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::Breakfall_Event()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "Breakfall Event");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.OnLanded
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_HumanBase_C::OnLanded(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "OnLanded");

	Params::BP_HumanBase_C_OnLanded Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.OnJumped
// (Event, Public, BlueprintEvent)

void ABP_HumanBase_C::OnJumped()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "OnJumped");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.K2_OnMovementModeChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::K2_OnMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "K2_OnMovementModeChanged");

	Params::BP_HumanBase_C_K2_OnMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.K2_OnEndCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "K2_OnEndCrouch");

	Params::BP_HumanBase_C_K2_OnEndCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.K2_OnStartCrouch
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   HalfHeightAdjust                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ScaledHalfHeightAdjust                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "K2_OnStartCrouch");

	Params::BP_HumanBase_C_K2_OnStartCrouch Parms{};

	Parms.HalfHeightAdjust = HalfHeightAdjust;
	Parms.ScaledHalfHeightAdjust = ScaledHalfHeightAdjust;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_HumanBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "ReceiveTick");

	Params::BP_HumanBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.MantleTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_HumanBase_C::MantleTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "MantleTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.MantleTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_HumanBase_C::MantleTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "MantleTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.PlayerMovementInput
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsForwardAxis                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HumanBase_C::PlayerMovementInput(bool IsForwardAxis)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "PlayerMovementInput");

	Params::BP_HumanBase_C_PlayerMovementInput Parms{};

	Parms.IsForwardAxis = IsForwardAxis;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.SetEssentialValues
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::SetEssentialValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "SetEssentialValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.CacheValues
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::CacheValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "CacheValues");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.UpdateGroudedRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::UpdateGroudedRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "UpdateGroudedRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.UpdateInAirRotation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::UpdateInAirRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "UpdateInAirRotation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.SmoothCharacterRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   TargetInterpSpeed_Const_                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ActorInterpSpeed_Smooth_                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::SmoothCharacterRotation(const struct FRotator& Target, float TargetInterpSpeed_Const_, float ActorInterpSpeed_Smooth_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "SmoothCharacterRotation");

	Params::BP_HumanBase_C_SmoothCharacterRotation Parms{};

	Parms.Target = std::move(Target);
	Parms.TargetInterpSpeed_Const_ = TargetInterpSpeed_Const_;
	Parms.ActorInterpSpeed_Smooth_ = ActorInterpSpeed_Smooth_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.SetMovementModel
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::SetMovementModel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "SetMovementModel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.UpdateCharacterMovement
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::UpdateCharacterMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "UpdateCharacterMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.UpdateDynamicMovementSettings
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               AllowedGait                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::UpdateDynamicMovementSettings(EALS_Gait AllowedGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "UpdateDynamicMovementSettings");

	Params::BP_HumanBase_C_UpdateDynamicMovementSettings Parms{};

	Parms.AllowedGait = AllowedGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.GetTargetMovementSettings
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FMovementSettings                MovementSettings                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::GetTargetMovementSettings(struct FMovementSettings* MovementSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "GetTargetMovementSettings");

	Params::BP_HumanBase_C_GetTargetMovementSettings Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MovementSettings != nullptr)
		*MovementSettings = std::move(Parms.MovementSettings);
}


// Function BP_HumanBase.BP_HumanBase_C.GetAllowedGait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EALS_Gait                               AllowedGait                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::GetAllowedGait(EALS_Gait* AllowedGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "GetAllowedGait");

	Params::BP_HumanBase_C_GetAllowedGait Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllowedGait != nullptr)
		*AllowedGait = Parms.AllowedGait;
}


// Function BP_HumanBase.BP_HumanBase_C.GetActualGait
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EALS_Gait                               AllowedGait                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Gait                               ActualGait                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::GetActualGait(EALS_Gait AllowedGait, EALS_Gait* ActualGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "GetActualGait");

	Params::BP_HumanBase_C_GetActualGait Parms{};

	Parms.AllowedGait = AllowedGait;

	UObject::ProcessEvent(Func, &Parms);

	if (ActualGait != nullptr)
		*ActualGait = Parms.ActualGait;
}


// Function BP_HumanBase.BP_HumanBase_C.CanSprint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    CanSprint_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HumanBase_C::CanSprint(bool* CanSprint_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "CanSprint");

	Params::BP_HumanBase_C_CanSprint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanSprint_0 != nullptr)
		*CanSprint_0 = Parms.CanSprint_0;
}


// Function BP_HumanBase.BP_HumanBase_C.AddToCharacterRotation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         DeltaRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HumanBase_C::AddToCharacterRotation(const struct FRotator& DeltaRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "AddToCharacterRotation");

	Params::BP_HumanBase_C_AddToCharacterRotation Parms{};

	Parms.DeltaRotation = std::move(DeltaRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.LimitRotation
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AimYawMin                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AimYawMax                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   InterpSpeed                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::LimitRotation(float AimYawMin, float AimYawMax, float InterpSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "LimitRotation");

	Params::BP_HumanBase_C_LimitRotation Parms{};

	Parms.AimYawMin = AimYawMin;
	Parms.AimYawMax = AimYawMax;
	Parms.InterpSpeed = InterpSpeed;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.SetActorLocationAndRotation(UpdateTarget)
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          NewLocation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         NewRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bSweep                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    bTeleport                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FHitResult                       SweepHitResult                                         (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_HumanBase_C::SetActorLocationAndRotation_UpdateTarget_(const struct FVector& NewLocation, const struct FRotator& NewRotation, bool bSweep, bool bTeleport, struct FHitResult* SweepHitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "SetActorLocationAndRotation(UpdateTarget)");

	Params::BP_HumanBase_C_SetActorLocationAndRotation_UpdateTarget_ Parms{};

	Parms.NewLocation = std::move(NewLocation);
	Parms.NewRotation = std::move(NewRotation);
	Parms.bSweep = bSweep;
	Parms.bTeleport = bTeleport;

	UObject::ProcessEvent(Func, &Parms);

	if (SweepHitResult != nullptr)
		*SweepHitResult = std::move(Parms.SweepHitResult);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.CalculateGroundedRotationRate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_HumanBase_C::CalculateGroundedRotationRate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "CalculateGroundedRotationRate");

	Params::BP_HumanBase_C_CalculateGroundedRotationRate Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.MantleCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMantle_TraceSettings            Trace_Settings                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         DebugType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Vault                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HumanBase_C::MantleCheck(const struct FMantle_TraceSettings& Trace_Settings, EDrawDebugTrace DebugType, bool* Vault)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "MantleCheck");

	Params::BP_HumanBase_C_MantleCheck Parms{};

	Parms.Trace_Settings = std::move(Trace_Settings);
	Parms.DebugType = DebugType;

	UObject::ProcessEvent(Func, &Parms);

	if (Vault != nullptr)
		*Vault = Parms.Vault;
}


// Function BP_HumanBase.BP_HumanBase_C.GetPlayerMovementInput
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_HumanBase_C::GetPlayerMovementInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "GetPlayerMovementInput");

	Params::BP_HumanBase_C_GetPlayerMovementInput Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.FixDiagonalGamepadValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   Y_in                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   X_in                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Y_Out                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   X_Out                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::FixDiagonalGamepadValues(float Y_in, float X_in, float* Y_Out, float* X_Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "FixDiagonalGamepadValues");

	Params::BP_HumanBase_C_FixDiagonalGamepadValues Parms{};

	Parms.Y_in = Y_in;
	Parms.X_in = X_in;

	UObject::ProcessEvent(Func, &Parms);

	if (Y_Out != nullptr)
		*Y_Out = Parms.Y_Out;

	if (X_Out != nullptr)
		*X_Out = Parms.X_Out;
}


// Function BP_HumanBase.BP_HumanBase_C.DrawDebugShapes
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::DrawDebugShapes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "DrawDebugShapes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.MantleStart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   MantleHeight                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FALS_ComponentAndTransform       MantleLedgeWS                                          (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// EMantleType                             MantleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::MantleStart(float MantleHeight, const struct FALS_ComponentAndTransform& MantleLedgeWS, EMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "MantleStart");

	Params::BP_HumanBase_C_MantleStart Parms{};

	Parms.MantleHeight = MantleHeight;
	Parms.MantleLedgeWS = std::move(MantleLedgeWS);
	Parms.MantleType = MantleType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.MantleEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::MantleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "MantleEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.MantleUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   BlendIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::MantleUpdate(float BlendIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "MantleUpdate");

	Params::BP_HumanBase_C_MantleUpdate Parms{};

	Parms.BlendIn = BlendIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.CapsuleHasRoomCheck
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCapsuleComponent*                Capsule                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   HeightOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   RadiusOffset                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         DebugType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    HasRoom                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HumanBase_C::CapsuleHasRoomCheck(class UCapsuleComponent* Capsule, const struct FVector& TargetLocation, float HeightOffset, float RadiusOffset, EDrawDebugTrace DebugType, bool* HasRoom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "CapsuleHasRoomCheck");

	Params::BP_HumanBase_C_CapsuleHasRoomCheck Parms{};

	Parms.Capsule = Capsule;
	Parms.TargetLocation = std::move(TargetLocation);
	Parms.HeightOffset = HeightOffset;
	Parms.RadiusOffset = RadiusOffset;
	Parms.DebugType = DebugType;

	UObject::ProcessEvent(Func, &Parms);

	if (HasRoom != nullptr)
		*HasRoom = Parms.HasRoom;
}


// Function BP_HumanBase.BP_HumanBase_C.GetMantleAsset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EMantleType                             MantleType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FMantle_Asset                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FMantle_Asset ABP_HumanBase_C::GetMantleAsset(EMantleType MantleType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "GetMantleAsset");

	Params::BP_HumanBase_C_GetMantleAsset Parms{};

	Parms.MantleType = MantleType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.RightVector
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ForwardVector                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          RightVector_0                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::RightVector(struct FVector* ForwardVector, struct FVector* RightVector_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "RightVector");

	Params::BP_HumanBase_C_RightVector Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ForwardVector != nullptr)
		*ForwardVector = std::move(Parms.ForwardVector);

	if (RightVector_0 != nullptr)
		*RightVector_0 = std::move(Parms.RightVector_0);
}


// Function BP_HumanBase.BP_HumanBase_C.GetCalpsuleBaseLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   ZOffset                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_HumanBase_C::GetCalpsuleBaseLocation(float ZOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "GetCalpsuleBaseLocation");

	Params::BP_HumanBase_C_GetCalpsuleBaseLocation Parms{};

	Parms.ZOffset = ZOffset;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.GetCapsuleLocationFromBase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          BaseLocation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ZOffset                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_HumanBase_C::GetCapsuleLocationFromBase(const struct FVector& BaseLocation, float ZOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "GetCapsuleLocationFromBase");

	Params::BP_HumanBase_C_GetCapsuleLocationFromBase Parms{};

	Parms.BaseLocation = std::move(BaseLocation);
	Parms.ZOffset = ZOffset;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.CalculateAcceleration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_HumanBase_C::CalculateAcceleration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "CalculateAcceleration");

	Params::BP_HumanBase_C_CalculateAcceleration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.RagdollStart
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::RagdollStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "RagdollStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.RagdollEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::RagdollEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "RagdollEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.RagdollUpdate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::RagdollUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "RagdollUpdate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.SetActorLocationDuringRagdoll
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::SetActorLocationDuringRagdoll()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "SetActorLocationDuringRagdoll");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.GetTraceDebugType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EDrawDebugTrace                         ShowTraceType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EDrawDebugTrace ABP_HumanBase_C::GetTraceDebugType(EDrawDebugTrace ShowTraceType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "GetTraceDebugType");

	Params::BP_HumanBase_C_GetTraceDebugType Parms{};

	Parms.ShowTraceType = ShowTraceType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.GetAnimCurveValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             CurveName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_HumanBase_C::GetAnimCurveValue(class FName CurveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "GetAnimCurveValue");

	Params::BP_HumanBase_C_GetAnimCurveValue Parms{};

	Parms.CurveName = CurveName;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.On Begin Play
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_HumanBase_C::On_Begin_Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "On Begin Play");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_HumanBase.BP_HumanBase_C.OnCharacterMovementModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           PrevMovementMode                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EMovementMode                           NewMovementMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   PrevCustomMode                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8                                   NewCustomMode                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::OnCharacterMovementModeChanged(EMovementMode PrevMovementMode, EMovementMode NewMovementMode, uint8 PrevCustomMode, uint8 NewCustomMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "OnCharacterMovementModeChanged");

	Params::BP_HumanBase_C_OnCharacterMovementModeChanged Parms{};

	Parms.PrevMovementMode = PrevMovementMode;
	Parms.NewMovementMode = NewMovementMode;
	Parms.PrevCustomMode = PrevCustomMode;
	Parms.NewCustomMode = NewCustomMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.OnMovementStateChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementState                      NewMovementState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::OnMovementStateChanged(EALS_MovementState NewMovementState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "OnMovementStateChanged");

	Params::BP_HumanBase_C_OnMovementStateChanged Parms{};

	Parms.NewMovementState = NewMovementState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.OnMovementActionChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_MovementAction                     NewMovementAction                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::OnMovementActionChanged(EALS_MovementAction NewMovementAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "OnMovementActionChanged");

	Params::BP_HumanBase_C_OnMovementActionChanged Parms{};

	Parms.NewMovementAction = NewMovementAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.OnStanceChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Stance                             NewStance                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::OnStanceChanged(EALS_Stance NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "OnStanceChanged");

	Params::BP_HumanBase_C_OnStanceChanged Parms{};

	Parms.NewStance = NewStance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.OnRotationModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_RotationMode                       NewRotationMode                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::OnRotationModeChanged(EALS_RotationMode NewRotationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "OnRotationModeChanged");

	Params::BP_HumanBase_C_OnRotationModeChanged Parms{};

	Parms.NewRotationMode = NewRotationMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.OnGaitChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_Gait                               NewActualGait                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::OnGaitChanged(EALS_Gait NewActualGait)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "OnGaitChanged");

	Params::BP_HumanBase_C_OnGaitChanged Parms{};

	Parms.NewActualGait = NewActualGait;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.OnViewModeChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_ViewMode                           NewViewMode                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::OnViewModeChanged(EALS_ViewMode NewViewMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "OnViewModeChanged");

	Params::BP_HumanBase_C_OnViewModeChanged Parms{};

	Parms.NewViewMode = NewViewMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.OnOverlayStateChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EALS_OverlayState                       NewOverlayState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::OnOverlayStateChanged(EALS_OverlayState NewOverlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "OnOverlayStateChanged");

	Params::BP_HumanBase_C_OnOverlayStateChanged Parms{};

	Parms.NewOverlayState = NewOverlayState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_HumanBase.BP_HumanBase_C.CanUpdateMovingRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_HumanBase_C::CanUpdateMovingRotation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "CanUpdateMovingRotation");

	Params::BP_HumanBase_C_CanUpdateMovingRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.GetMappedSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float ABP_HumanBase_C::GetMappedSpeed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "GetMappedSpeed");

	Params::BP_HumanBase_C_GetMappedSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.GetRollAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAnimMontage* ABP_HumanBase_C::GetRollAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "GetRollAnimation");

	Params::BP_HumanBase_C_GetRollAnimation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.GetGetUpAnimation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    RagdollFaceUp_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UAnimMontage*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UAnimMontage* ABP_HumanBase_C::GetGetUpAnimation(bool RagdollFaceUp_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "GetGetUpAnimation");

	Params::BP_HumanBase_C_GetGetUpAnimation Parms{};

	Parms.RagdollFaceUp_0 = RagdollFaceUp_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_HumanBase.BP_HumanBase_C.BPI_Get_EssentialValues
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Acceleration_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MovementInput                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsMoving_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    HasMovementInput_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Speed_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   MovementInputAmount_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         AimingRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   AimYawRate_0                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Acceleration_0, struct FVector* MovementInput, bool* IsMoving_0, bool* HasMovementInput_0, float* Speed_0, float* MovementInputAmount_0, struct FRotator* AimingRotation, float* AimYawRate_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "BPI_Get_EssentialValues");

	Params::BP_HumanBase_C_BPI_Get_EssentialValues Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (Acceleration_0 != nullptr)
		*Acceleration_0 = std::move(Parms.Acceleration_0);

	if (MovementInput != nullptr)
		*MovementInput = std::move(Parms.MovementInput);

	if (IsMoving_0 != nullptr)
		*IsMoving_0 = Parms.IsMoving_0;

	if (HasMovementInput_0 != nullptr)
		*HasMovementInput_0 = Parms.HasMovementInput_0;

	if (Speed_0 != nullptr)
		*Speed_0 = Parms.Speed_0;

	if (MovementInputAmount_0 != nullptr)
		*MovementInputAmount_0 = Parms.MovementInputAmount_0;

	if (AimingRotation != nullptr)
		*AimingRotation = std::move(Parms.AimingRotation);

	if (AimYawRate_0 != nullptr)
		*AimYawRate_0 = Parms.AimYawRate_0;
}


// Function BP_HumanBase.BP_HumanBase_C.BPI_Get_CurrentStates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMovementMode                           PawnMovementMode                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementState                      MovementState_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementState                      PrevMovementState_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_MovementAction                     MovementAction_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_RotationMode                       RotationMode_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Gait                               ActualGait                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_Stance                             ActualStance                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_ViewMode                           ViewMode_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EALS_OverlayState                       OverlayState_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* MovementState_0, EALS_MovementState* PrevMovementState_0, EALS_MovementAction* MovementAction_0, EALS_RotationMode* RotationMode_0, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* ViewMode_0, EALS_OverlayState* OverlayState_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "BPI_Get_CurrentStates");

	Params::BP_HumanBase_C_BPI_Get_CurrentStates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PawnMovementMode != nullptr)
		*PawnMovementMode = Parms.PawnMovementMode;

	if (MovementState_0 != nullptr)
		*MovementState_0 = Parms.MovementState_0;

	if (PrevMovementState_0 != nullptr)
		*PrevMovementState_0 = Parms.PrevMovementState_0;

	if (MovementAction_0 != nullptr)
		*MovementAction_0 = Parms.MovementAction_0;

	if (RotationMode_0 != nullptr)
		*RotationMode_0 = Parms.RotationMode_0;

	if (ActualGait != nullptr)
		*ActualGait = Parms.ActualGait;

	if (ActualStance != nullptr)
		*ActualStance = Parms.ActualStance;

	if (ViewMode_0 != nullptr)
		*ViewMode_0 = Parms.ViewMode_0;

	if (OverlayState_0 != nullptr)
		*OverlayState_0 = Parms.OverlayState_0;
}


// Function BP_HumanBase.BP_HumanBase_C.Get_AnimBP
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimInstance*                    Return                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::Get_AnimBP(class UAnimInstance** Return)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "Get_AnimBP");

	Params::BP_HumanBase_C_Get_AnimBP Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Return != nullptr)
		*Return = Parms.Return;
}


// Function BP_HumanBase.BP_HumanBase_C.Get_ABP_CH_MeshBaseVariable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   LookAtHorizontal                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   LookAtVertical                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Out_Interp_LookatHair_H                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Out_Interp_LookatHair_V                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PhysicsAlpha_Out                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PhysicsAlpha_Upperbody_Out                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PhysicsAlpha_Lowerbody_Out                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PhysicsAlpha_Hair_Out                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PhysicsAlpha_Jacket_Out                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   PhysicsAlpha_Skirt_Out                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_HumanBase_C::Get_ABP_CH_MeshBaseVariable(float* LookAtHorizontal, float* LookAtVertical, float* Out_Interp_LookatHair_H, float* Out_Interp_LookatHair_V, float* PhysicsAlpha_Out, float* PhysicsAlpha_Upperbody_Out, float* PhysicsAlpha_Lowerbody_Out, float* PhysicsAlpha_Hair_Out, float* PhysicsAlpha_Jacket_Out, float* PhysicsAlpha_Skirt_Out)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "Get_ABP_CH_MeshBaseVariable");

	Params::BP_HumanBase_C_Get_ABP_CH_MeshBaseVariable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LookAtHorizontal != nullptr)
		*LookAtHorizontal = Parms.LookAtHorizontal;

	if (LookAtVertical != nullptr)
		*LookAtVertical = Parms.LookAtVertical;

	if (Out_Interp_LookatHair_H != nullptr)
		*Out_Interp_LookatHair_H = Parms.Out_Interp_LookatHair_H;

	if (Out_Interp_LookatHair_V != nullptr)
		*Out_Interp_LookatHair_V = Parms.Out_Interp_LookatHair_V;

	if (PhysicsAlpha_Out != nullptr)
		*PhysicsAlpha_Out = Parms.PhysicsAlpha_Out;

	if (PhysicsAlpha_Upperbody_Out != nullptr)
		*PhysicsAlpha_Upperbody_Out = Parms.PhysicsAlpha_Upperbody_Out;

	if (PhysicsAlpha_Lowerbody_Out != nullptr)
		*PhysicsAlpha_Lowerbody_Out = Parms.PhysicsAlpha_Lowerbody_Out;

	if (PhysicsAlpha_Hair_Out != nullptr)
		*PhysicsAlpha_Hair_Out = Parms.PhysicsAlpha_Hair_Out;

	if (PhysicsAlpha_Jacket_Out != nullptr)
		*PhysicsAlpha_Jacket_Out = Parms.PhysicsAlpha_Jacket_Out;

	if (PhysicsAlpha_Skirt_Out != nullptr)
		*PhysicsAlpha_Skirt_Out = Parms.PhysicsAlpha_Skirt_Out;
}


// Function BP_HumanBase.BP_HumanBase_C.Get_Enable_FootIK
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Out_foot_r                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    Out_foot_l                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_HumanBase_C::Get_Enable_FootIK(bool* Out_foot_r, bool* Out_foot_l)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_HumanBase_C", "Get_Enable_FootIK");

	Params::BP_HumanBase_C_Get_Enable_FootIK Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Out_foot_r != nullptr)
		*Out_foot_r = Parms.Out_foot_r;

	if (Out_foot_l != nullptr)
		*Out_foot_l = Parms.Out_foot_l;
}

}

