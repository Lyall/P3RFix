#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharaPointLight

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharaPointLight.BP_CharaPointLight_C
// 0x0040 (0x0260 - 0x0220)
class ABP_CharaPointLight_C final : public AActor
{
public:
	class USphereComponent*                       SoftRange;                                         // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SphereCollision;                                   // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    LightIcon;                                         // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           LightColor;                                        // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Softness;                                          // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Intensity;                                         // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CoerRadius;                                        // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         CoerIntensity;                                     // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharaPointLight_C">();
	}
	static class ABP_CharaPointLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CharaPointLight_C>();
	}
};
static_assert(alignof(ABP_CharaPointLight_C) == 0x000008, "Wrong alignment on ABP_CharaPointLight_C");
static_assert(sizeof(ABP_CharaPointLight_C) == 0x000260, "Wrong size on ABP_CharaPointLight_C");
static_assert(offsetof(ABP_CharaPointLight_C, SoftRange) == 0x000220, "Member 'ABP_CharaPointLight_C::SoftRange' has a wrong offset!");
static_assert(offsetof(ABP_CharaPointLight_C, SphereCollision) == 0x000228, "Member 'ABP_CharaPointLight_C::SphereCollision' has a wrong offset!");
static_assert(offsetof(ABP_CharaPointLight_C, LightIcon) == 0x000230, "Member 'ABP_CharaPointLight_C::LightIcon' has a wrong offset!");
static_assert(offsetof(ABP_CharaPointLight_C, LightColor) == 0x000238, "Member 'ABP_CharaPointLight_C::LightColor' has a wrong offset!");
static_assert(offsetof(ABP_CharaPointLight_C, Radius) == 0x000248, "Member 'ABP_CharaPointLight_C::Radius' has a wrong offset!");
static_assert(offsetof(ABP_CharaPointLight_C, Softness) == 0x00024C, "Member 'ABP_CharaPointLight_C::Softness' has a wrong offset!");
static_assert(offsetof(ABP_CharaPointLight_C, Intensity) == 0x000250, "Member 'ABP_CharaPointLight_C::Intensity' has a wrong offset!");
static_assert(offsetof(ABP_CharaPointLight_C, CoerRadius) == 0x000254, "Member 'ABP_CharaPointLight_C::CoerRadius' has a wrong offset!");
static_assert(offsetof(ABP_CharaPointLight_C, CoerIntensity) == 0x000258, "Member 'ABP_CharaPointLight_C::CoerIntensity' has a wrong offset!");

}

