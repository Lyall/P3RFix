#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CriWareRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum CriWareRuntime.EAtomAudioVolumeType
// NumValues: 0x0006
enum class EAtomAudioVolumeType : uint8
{
	UseSnapshot                              = 0,
	UseBus                                   = 1,
	UseAisacControl                          = 2,
	UseEntranceVolume                        = 3,
	Num                                      = 4,
	EAtomAudioVolumeType_MAX                 = 5,
};

// Enum CriWareRuntime.EAtomComponentStatus
// NumValues: 0x0006
enum class EAtomComponentStatus : uint8
{
	Stop                                     = 0,
	Prep                                     = 1,
	Playing                                  = 2,
	PlayEnd                                  = 3,
	Error                                    = 4,
	EAtomComponentStatus_MAX                 = 5,
};

// Enum CriWareRuntime.EAtomLoopSetting
// NumValues: 0x0004
enum class EAtomLoopSetting : uint8
{
	Inherited                                = 0,
	Loop                                     = 1,
	OneShot                                  = 2,
	EAtomLoopSetting_MAX                     = 3,
};

// Enum CriWareRuntime.ECriFsBinderStatus
// NumValues: 0x0005
enum class ECriFsBinderStatus : uint8
{
	Stop                                     = 0,
	Binding                                  = 1,
	Complete                                 = 2,
	Error                                    = 3,
	ECriFsBinderStatus_MAX                   = 4,
};

// Enum CriWareRuntime.EAtomCueSheetLoaderComponentStatus
// NumValues: 0x000B
enum class EAtomCueSheetLoaderComponentStatus : uint8
{
	Stop                                     = 0,
	Loading                                  = 1,
	LoadEnd                                  = 2,
	Serializing                              = 3,
	SerializeEnd                             = 4,
	Binding                                  = 5,
	BindEnd                                  = 6,
	LoadCueSheet                             = 7,
	Complete                                 = 8,
	Error                                    = 9,
	EAtomCueSheetLoaderComponentStatus_MAX   = 10,
};

// Enum CriWareRuntime.EAtomDeviceType
// NumValues: 0x0008
enum class EAtomDeviceType : uint8
{
	DEVICE_TYPE_HDMI                         = 1,
	DEVICE_TYPE_HEADPHONE                    = 2,
	DEVICE_TYPE_BUILT_IN_SPEAKER             = 3,
	DEVICE_TYPE_PAD_SPEAKER                  = 4,
	DEVICE_TYPE_VIBRATION                    = 5,
	DEVICE_TYPE_UNKNOWN                      = 0,
	DEVICE_TYPE_UNAVAILABLE                  = 254,
	DEVICE_TYPE_MAX                          = 255,
};

// Enum CriWareRuntime.ECriFsLoaderStatus
// NumValues: 0x0005
enum class ECriFsLoaderStatus : uint8
{
	Stop                                     = 0,
	Loading                                  = 1,
	Complete                                 = 2,
	Error                                    = 3,
	ECriFsLoaderStatus_MAX                   = 4,
};

// Enum CriWareRuntime.ECriWareErrorType
// NumValues: 0x0003
enum class ECriWareErrorType : uint8
{
	Warning                                  = 0,
	Error                                    = 1,
	ECriWareErrorType_MAX                    = 2,
};

// Enum CriWareRuntime.EManaSubtitlesEncoding
// NumValues: 0x0005
enum class EManaSubtitlesEncoding : uint8
{
	Default                                  = 0,
	ANSI                                     = 1,
	Utf8                                     = 2,
	Utf16                                    = 3,
	EManaSubtitlesEncoding_MAX               = 4,
};

// Enum CriWareRuntime.EManaComponentStatus
// NumValues: 0x000A
enum class EManaComponentStatus : uint8
{
	Stop                                     = 0,
	DecHdr                                   = 1,
	WaitPrep                                 = 2,
	Prep                                     = 3,
	Ready                                    = 4,
	Playing                                  = 5,
	PlayEnd                                  = 6,
	Error                                    = 7,
	StopProcessing                           = 8,
	EManaComponentStatus_MAX                 = 9,
};

// Enum CriWareRuntime.EManaFrameAction
// NumValues: 0x0004
enum class EManaFrameAction : uint8
{
	Default                                  = 0,
	Hold                                     = 1,
	Clear                                    = 2,
	EManaFrameAction_MAX                     = 3,
};

// Enum CriWareRuntime.EManaMaxFrameDrop
// NumValues: 0x000D
enum class EManaMaxFrameDrop : uint8
{
	Disabled                                 = 0,
	One                                      = 1,
	Two                                      = 2,
	Three                                    = 3,
	For                                      = 4,
	Five                                     = 5,
	Six                                      = 6,
	Seven                                    = 7,
	Eight                                    = 8,
	Nine                                     = 9,
	Ten                                      = 10,
	Infinite                                 = 11,
	EManaMaxFrameDrop_MAX                    = 12,
};

// Enum CriWareRuntime.EManaPlaybackTimer
// NumValues: 0x0005
enum class EManaPlaybackTimer : uint8
{
	Default                                  = 0,
	RealTime                                 = 1,
	FrameTime                                = 2,
	Manual                                   = 3,
	EManaPlaybackTimer_MAX                   = 4,
};

// Enum CriWareRuntime.EAtomSpeakerID
// NumValues: 0x0009
enum class EAtomSpeakerID : uint8
{
	FrontLeft                                = 0,
	FrontRight                               = 1,
	FrontCenter                              = 2,
	LowFrequency                             = 3,
	SurroundLeft                             = 4,
	SurroundRight                            = 5,
	SurroundBackLeft                         = 6,
	SurroundBackRight                        = 7,
	EAtomSpeakerID_MAX                       = 8,
};

// Enum CriWareRuntime.EManaPlayerTrack
// NumValues: 0x0007
enum class EManaPlayerTrack : uint8
{
	Audio                                    = 0,
	SubAudio                                 = 1,
	ExtraAudio                               = 2,
	Subtitle                                 = 3,
	Video                                    = 4,
	Alpha                                    = 5,
	EManaPlayerTrack_MAX                     = 6,
};

// Enum CriWareRuntime.EManaPlayerOptionBooleanOverride
// NumValues: 0x0004
enum class EManaPlayerOptionBooleanOverride : uint8
{
	UseManaPlayerSetting                     = 0,
	Enabled                                  = 1,
	Disabled                                 = 2,
	EManaPlayerOptionBooleanOverride_MAX     = 3,
};

// Enum CriWareRuntime.EAtomSequenceEventType
// NumValues: 0x0003
enum class EAtomSequenceEventType : uint8
{
	SEQUENCE_TYPE_CALLBACK                   = 0,
	SEQUENCE_TYPESIZE_4BYTE                  = 1,
	SEQUENCE_MAX                             = 2,
};

// Enum CriWareRuntime.EAtomSortOrderType
// NumValues: 0x0003
enum class EAtomSortOrderType : uint8
{
	Ascending                                = 0,
	Descending                               = 1,
	EAtomSortOrderType_MAX                   = 2,
};

// Enum CriWareRuntime.EAtomProfileSortType
// NumValues: 0x0005
enum class EAtomProfileSortType : uint8
{
	AtomComponentID                          = 0,
	Distance                                 = 1,
	Name                                     = 2,
	Time                                     = 3,
	EAtomProfileSortType_MAX                 = 4,
};

// Enum CriWareRuntime.EAtomWavePlayState
// NumValues: 0x0007
enum class EAtomWavePlayState : uint8
{
	Playing                                  = 0,
	Stopped                                  = 1,
	Paused                                   = 2,
	FadingIn                                 = 3,
	FadingOut                                = 4,
	Count                                    = 5,
	EAtomWavePlayState_MAX                   = 6,
};

// Enum CriWareRuntime.ECriWareSpeakerSystem
// NumValues: 0x0003
enum class ECriWareSpeakerSystem : uint8
{
	Surround5Point1                          = 0,
	Surround7Point1                          = 1,
	ECriWareSpeakerSystem_MAX                = 2,
};

// Enum CriWareRuntime.EAtomLoopSettingID_DEPRECEATED
// NumValues: 0x0004
enum class EAtomLoopSettingID_DEPRECEATED : uint8
{
	DefaultLoop_DEPRECATED                   = 0,
	ForceLoop_DEPRECATED                     = 1,
	IgnoreLoop_DEPRECATED                    = 2,
	EAtomLoopSettingID_MAX                   = 3,
};

// Enum CriWareRuntime.EAtomSoundRendererType
// NumValues: 0x000A
enum class EAtomSoundRendererType : uint8
{
	Any                                      = 0,
	Native                                   = 1,
	Asr                                      = 2,
	Hardware1                                = 1,
	Hardware2                                = 5,
	Hardware3                                = 9,
	Hardware4                                = 13,
	VibrationHardware                        = 29,
	Pad                                      = 255,
	EAtomSoundRendererType_MAX               = 256,
};

// Enum CriWareRuntime.EEngineIniFileType
// NumValues: 0x0005
enum class EEngineIniFileType : uint8
{
	EngBaseEngineIni                         = 0,
	EngWindowsEngineIni                      = 1,
	ProjDefaultEngineIni                     = 4,
	ProjWindowsEngineIni                     = 5,
	EEngineIniFileType_MAX                   = 6,
};

// Enum CriWareRuntime.EManaComponentTextureType
// NumValues: 0x0008
enum class EManaComponentTextureType : uint8
{
	Texture_Y                                = 0,
	Texture_U                                = 1,
	Texture_V                                = 2,
	Texture_A                                = 3,
	Texture_UV                               = 4,
	Texture_RGB                              = 5,
	Texture_External                         = 6,
	Texture_MAX                              = 7,
};

// Enum CriWareRuntime.EManaSoundType
// NumValues: 0x0005
enum class EManaSoundType : uint8
{
	Adx                                      = 0,
	HCA                                      = 1,
	Num                                      = 2,
	Unknown                                  = 255,
	EManaSoundType_MAX                       = 256,
};

// Enum CriWareRuntime.EManaColorSpace
// NumValues: 0x0006
enum class EManaColorSpace : uint8
{
	Rec601                                   = 0,
	Rec601Full                               = 1,
	Rec709                                   = 2,
	Rec709Full                               = 3,
	Num                                      = 4,
	EManaColorSpace_MAX                      = 5,
};

// Enum CriWareRuntime.EManaMovieType
// NumValues: 0x0006
enum class EManaMovieType : uint8
{
	SofdecPrime                              = 0,
	H264                                     = 1,
	VP9                                      = 2,
	Num                                      = 3,
	Unknown                                  = 255,
	EManaMovieType_MAX                       = 256,
};

// Enum CriWareRuntime.EAtomFormat
// NumValues: 0x000E
enum class EAtomFormat : uint8
{
	None                                     = 0,
	ADX                                      = 1,
	HCA                                      = 2,
	HCAMX                                    = 3,
	AIFF                                     = 4,
	Wave                                     = 5,
	RawPCM                                   = 6,
	Vibration                                = 7,
	AudioBuffer                              = 8,
	Instrument                               = 9,
	Hardware1                                = 10,
	Hardware2                                = 11,
	Num                                      = 12,
	EAtomFormat_MAX                          = 13,
};

// ScriptStruct CriWareRuntime.AtomGameVariableParam
// 0x0018 (0x0018 - 0x0000)
struct FAtomGameVariableParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomGameVariableParam) == 0x000008, "Wrong alignment on FAtomGameVariableParam");
static_assert(sizeof(FAtomGameVariableParam) == 0x000018, "Wrong size on FAtomGameVariableParam");
static_assert(offsetof(FAtomGameVariableParam, Name) == 0x000000, "Member 'FAtomGameVariableParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomGameVariableParam, Value) == 0x000010, "Member 'FAtomGameVariableParam::Value' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomBeatSyncInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FAtomBeatSyncInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomBeatSyncInfo) == 0x000008, "Wrong alignment on FAtomBeatSyncInfo");
static_assert(sizeof(FAtomBeatSyncInfo) == 0x000028, "Wrong size on FAtomBeatSyncInfo");

// ScriptStruct CriWareRuntime.CriWareErrorInfo
// 0x0028 (0x0028 - 0x0000)
struct FCriWareErrorInfo final
{
public:
	class FString                                 ErrorID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECriWareErrorType                             ErrorType;                                         // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCriWareErrorInfo) == 0x000008, "Wrong alignment on FCriWareErrorInfo");
static_assert(sizeof(FCriWareErrorInfo) == 0x000028, "Wrong size on FCriWareErrorInfo");
static_assert(offsetof(FCriWareErrorInfo, ErrorID) == 0x000000, "Member 'FCriWareErrorInfo::ErrorID' has a wrong offset!");
static_assert(offsetof(FCriWareErrorInfo, ErrorType) == 0x000010, "Member 'FCriWareErrorInfo::ErrorType' has a wrong offset!");
static_assert(offsetof(FCriWareErrorInfo, Message) == 0x000018, "Member 'FCriWareErrorInfo::Message' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomStringWithComment
// 0x0010 (0x0010 - 0x0000)
struct FAtomStringWithComment final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomStringWithComment) == 0x000008, "Wrong alignment on FAtomStringWithComment");
static_assert(sizeof(FAtomStringWithComment) == 0x000010, "Wrong size on FAtomStringWithComment");
static_assert(offsetof(FAtomStringWithComment, Name) == 0x000000, "Member 'FAtomStringWithComment::Name' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomSelectorSettingsParam
// 0x0030 (0x0030 - 0x0000)
struct FAtomSelectorSettingsParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultSelectorLabel;                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAtomStringWithComment>         Labels;                                            // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomSelectorSettingsParam) == 0x000008, "Wrong alignment on FAtomSelectorSettingsParam");
static_assert(sizeof(FAtomSelectorSettingsParam) == 0x000030, "Wrong size on FAtomSelectorSettingsParam");
static_assert(offsetof(FAtomSelectorSettingsParam, Name) == 0x000000, "Member 'FAtomSelectorSettingsParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomSelectorSettingsParam, DefaultSelectorLabel) == 0x000010, "Member 'FAtomSelectorSettingsParam::DefaultSelectorLabel' has a wrong offset!");
static_assert(offsetof(FAtomSelectorSettingsParam, Labels) == 0x000020, "Member 'FAtomSelectorSettingsParam::Labels' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomSequenceInfo
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FAtomSequenceInfo final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomSequenceInfo) == 0x000008, "Wrong alignment on FAtomSequenceInfo");
static_assert(sizeof(FAtomSequenceInfo) == 0x000028, "Wrong size on FAtomSequenceInfo");

// ScriptStruct CriWareRuntime.AtomProfileItem
// 0x0078 (0x0078 - 0x0000)
struct FAtomProfileItem final
{
public:
	int32                                         AtomComponentID;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AtomCueName;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                AtomComponentLocation;                             // 0x0018(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceFromListener;                              // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayingTime;                                       // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerState;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSounds;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConcurrencyName;                                   // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x20];                                      // 0x0058(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomProfileItem) == 0x000008, "Wrong alignment on FAtomProfileItem");
static_assert(sizeof(FAtomProfileItem) == 0x000078, "Wrong size on FAtomProfileItem");
static_assert(offsetof(FAtomProfileItem, AtomComponentID) == 0x000000, "Member 'FAtomProfileItem::AtomComponentID' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, AtomCueName) == 0x000008, "Member 'FAtomProfileItem::AtomCueName' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, AtomComponentLocation) == 0x000018, "Member 'FAtomProfileItem::AtomComponentLocation' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, DistanceFromListener) == 0x000024, "Member 'FAtomProfileItem::DistanceFromListener' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, PlayingTime) == 0x000028, "Member 'FAtomProfileItem::PlayingTime' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, PlayerState) == 0x000030, "Member 'FAtomProfileItem::PlayerState' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, NumSounds) == 0x000040, "Member 'FAtomProfileItem::NumSounds' has a wrong offset!");
static_assert(offsetof(FAtomProfileItem, ConcurrencyName) == 0x000048, "Member 'FAtomProfileItem::ConcurrencyName' has a wrong offset!");

// ScriptStruct CriWareRuntime.ManaPlayerTrackOptions
// 0x0018 (0x0018 - 0x0000)
struct FManaPlayerTrackOptions final
{
public:
	int32                                         Audio;                                             // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubAudio;                                          // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExtraAudio;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Subtitle;                                          // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Video;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Alpha;                                             // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManaPlayerTrackOptions) == 0x000004, "Wrong alignment on FManaPlayerTrackOptions");
static_assert(sizeof(FManaPlayerTrackOptions) == 0x000018, "Wrong size on FManaPlayerTrackOptions");
static_assert(offsetof(FManaPlayerTrackOptions, Audio) == 0x000000, "Member 'FManaPlayerTrackOptions::Audio' has a wrong offset!");
static_assert(offsetof(FManaPlayerTrackOptions, SubAudio) == 0x000004, "Member 'FManaPlayerTrackOptions::SubAudio' has a wrong offset!");
static_assert(offsetof(FManaPlayerTrackOptions, ExtraAudio) == 0x000008, "Member 'FManaPlayerTrackOptions::ExtraAudio' has a wrong offset!");
static_assert(offsetof(FManaPlayerTrackOptions, Subtitle) == 0x00000C, "Member 'FManaPlayerTrackOptions::Subtitle' has a wrong offset!");
static_assert(offsetof(FManaPlayerTrackOptions, Video) == 0x000010, "Member 'FManaPlayerTrackOptions::Video' has a wrong offset!");
static_assert(offsetof(FManaPlayerTrackOptions, Alpha) == 0x000014, "Member 'FManaPlayerTrackOptions::Alpha' has a wrong offset!");

// ScriptStruct CriWareRuntime.ManaPlayerOptions
// 0x0030 (0x0030 - 0x0000)
struct FManaPlayerOptions final
{
public:
	struct FManaPlayerTrackOptions                Tracks;                                            // 0x0000(0x0018)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FTimespan                              SeekTime;                                          // 0x0018(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaPlayerOptionBooleanOverride              PlayOnOpen;                                        // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaPlayerOptionBooleanOverride              Loop;                                              // 0x0021(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaPlaybackTimer                            PlaybackTimer;                                     // 0x0022(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaMaxFrameDrop                             MaxFrameDrop;                                      // 0x0023(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaFrameAction                              EndFrameAction;                                    // 0x0024(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomComponent*                         TimeSyncedSource;                                  // 0x0028(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManaPlayerOptions) == 0x000008, "Wrong alignment on FManaPlayerOptions");
static_assert(sizeof(FManaPlayerOptions) == 0x000030, "Wrong size on FManaPlayerOptions");
static_assert(offsetof(FManaPlayerOptions, Tracks) == 0x000000, "Member 'FManaPlayerOptions::Tracks' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, SeekTime) == 0x000018, "Member 'FManaPlayerOptions::SeekTime' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, PlayOnOpen) == 0x000020, "Member 'FManaPlayerOptions::PlayOnOpen' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, Loop) == 0x000021, "Member 'FManaPlayerOptions::Loop' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, PlaybackTimer) == 0x000022, "Member 'FManaPlayerOptions::PlaybackTimer' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, MaxFrameDrop) == 0x000023, "Member 'FManaPlayerOptions::MaxFrameDrop' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, EndFrameAction) == 0x000024, "Member 'FManaPlayerOptions::EndFrameAction' has a wrong offset!");
static_assert(offsetof(FManaPlayerOptions, TimeSyncedSource) == 0x000028, "Member 'FManaPlayerOptions::TimeSyncedSource' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomSelectorParam
// 0x0020 (0x0020 - 0x0000)
struct FAtomSelectorParam final
{
public:
	class FString                                 Selector;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomSelectorParam) == 0x000008, "Wrong alignment on FAtomSelectorParam");
static_assert(sizeof(FAtomSelectorParam) == 0x000020, "Wrong size on FAtomSelectorParam");
static_assert(offsetof(FAtomSelectorParam, Selector) == 0x000000, "Member 'FAtomSelectorParam::Selector' has a wrong offset!");
static_assert(offsetof(FAtomSelectorParam, Label) == 0x000010, "Member 'FAtomSelectorParam::Label' has a wrong offset!");

// ScriptStruct CriWareRuntime.ManaEventPointInfo
// 0x0028 (0x0028 - 0x0000)
struct FManaEventPointInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Type;                                              // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Parameter;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FManaEventPointInfo) == 0x000008, "Wrong alignment on FManaEventPointInfo");
static_assert(sizeof(FManaEventPointInfo) == 0x000028, "Wrong size on FManaEventPointInfo");
static_assert(offsetof(FManaEventPointInfo, Name) == 0x000000, "Member 'FManaEventPointInfo::Name' has a wrong offset!");
static_assert(offsetof(FManaEventPointInfo, Time) == 0x000010, "Member 'FManaEventPointInfo::Time' has a wrong offset!");
static_assert(offsetof(FManaEventPointInfo, Type) == 0x000014, "Member 'FManaEventPointInfo::Type' has a wrong offset!");
static_assert(offsetof(FManaEventPointInfo, Parameter) == 0x000018, "Member 'FManaEventPointInfo::Parameter' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAsrRackConfigUI
// 0x0008 (0x0008 - 0x0000)
struct FAtomAsrRackConfigUI final
{
public:
	EAtomSoundRendererType                        SoundRendererTypeUI;                               // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ElementID;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomAsrRackConfigUI) == 0x000004, "Wrong alignment on FAtomAsrRackConfigUI");
static_assert(sizeof(FAtomAsrRackConfigUI) == 0x000008, "Wrong size on FAtomAsrRackConfigUI");
static_assert(offsetof(FAtomAsrRackConfigUI, SoundRendererTypeUI) == 0x000000, "Member 'FAtomAsrRackConfigUI::SoundRendererTypeUI' has a wrong offset!");
static_assert(offsetof(FAtomAsrRackConfigUI, ElementID) == 0x000004, "Member 'FAtomAsrRackConfigUI::ElementID' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAisacControlParam
// 0x0018 (0x0018 - 0x0000)
struct FAtomAisacControlParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomAisacControlParam) == 0x000008, "Wrong alignment on FAtomAisacControlParam");
static_assert(sizeof(FAtomAisacControlParam) == 0x000018, "Wrong size on FAtomAisacControlParam");
static_assert(offsetof(FAtomAisacControlParam, Name) == 0x000000, "Member 'FAtomAisacControlParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomAisacControlParam, Value) == 0x000010, "Member 'FAtomAisacControlParam::Value' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAisacInfo
// 0x0030 (0x0030 - 0x0000)
struct FAtomAisacInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DefaultControlFlag;                                // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultControlValue;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ControlId;                                         // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ControlName;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomAisacInfo) == 0x000008, "Wrong alignment on FAtomAisacInfo");
static_assert(sizeof(FAtomAisacInfo) == 0x000030, "Wrong size on FAtomAisacInfo");
static_assert(offsetof(FAtomAisacInfo, Name) == 0x000000, "Member 'FAtomAisacInfo::Name' has a wrong offset!");
static_assert(offsetof(FAtomAisacInfo, DefaultControlFlag) == 0x000010, "Member 'FAtomAisacInfo::DefaultControlFlag' has a wrong offset!");
static_assert(offsetof(FAtomAisacInfo, DefaultControlValue) == 0x000014, "Member 'FAtomAisacInfo::DefaultControlValue' has a wrong offset!");
static_assert(offsetof(FAtomAisacInfo, ControlId) == 0x000018, "Member 'FAtomAisacInfo::ControlId' has a wrong offset!");
static_assert(offsetof(FAtomAisacInfo, ControlName) == 0x000020, "Member 'FAtomAisacInfo::ControlName' has a wrong offset!");

// ScriptStruct CriWareRuntime.SnapshotSwitchSettings
// 0x0038 (0x0038 - 0x0000)
struct FSnapshotSwitchSettings final
{
public:
	int32                                         ASRRackID;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DspBusSettingsID;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DspBusSettingsName;                                // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SnapshotID;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SnapshotName;                                      // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTime;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnapshotSwitchSettings) == 0x000008, "Wrong alignment on FSnapshotSwitchSettings");
static_assert(sizeof(FSnapshotSwitchSettings) == 0x000038, "Wrong size on FSnapshotSwitchSettings");
static_assert(offsetof(FSnapshotSwitchSettings, ASRRackID) == 0x000000, "Member 'FSnapshotSwitchSettings::ASRRackID' has a wrong offset!");
static_assert(offsetof(FSnapshotSwitchSettings, DspBusSettingsID) == 0x000004, "Member 'FSnapshotSwitchSettings::DspBusSettingsID' has a wrong offset!");
static_assert(offsetof(FSnapshotSwitchSettings, DspBusSettingsName) == 0x000008, "Member 'FSnapshotSwitchSettings::DspBusSettingsName' has a wrong offset!");
static_assert(offsetof(FSnapshotSwitchSettings, SnapshotID) == 0x000018, "Member 'FSnapshotSwitchSettings::SnapshotID' has a wrong offset!");
static_assert(offsetof(FSnapshotSwitchSettings, SnapshotName) == 0x000020, "Member 'FSnapshotSwitchSettings::SnapshotName' has a wrong offset!");
static_assert(offsetof(FSnapshotSwitchSettings, FadeTime) == 0x000030, "Member 'FSnapshotSwitchSettings::FadeTime' has a wrong offset!");

// ScriptStruct CriWareRuntime.BusSendInterpolationSettings
// 0x0048 (0x0048 - 0x0000)
struct FBusSendInterpolationSettings final
{
public:
	int32                                         DspBusSettingsID;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DspBusSettingsName;                                // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BusId;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BusName;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BusSendLevelForInside;                             // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BusSendLevelForOutside;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0xC];                                       // 0x003C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBusSendInterpolationSettings) == 0x000008, "Wrong alignment on FBusSendInterpolationSettings");
static_assert(sizeof(FBusSendInterpolationSettings) == 0x000048, "Wrong size on FBusSendInterpolationSettings");
static_assert(offsetof(FBusSendInterpolationSettings, DspBusSettingsID) == 0x000000, "Member 'FBusSendInterpolationSettings::DspBusSettingsID' has a wrong offset!");
static_assert(offsetof(FBusSendInterpolationSettings, DspBusSettingsName) == 0x000008, "Member 'FBusSendInterpolationSettings::DspBusSettingsName' has a wrong offset!");
static_assert(offsetof(FBusSendInterpolationSettings, BusId) == 0x000018, "Member 'FBusSendInterpolationSettings::BusId' has a wrong offset!");
static_assert(offsetof(FBusSendInterpolationSettings, BusName) == 0x000020, "Member 'FBusSendInterpolationSettings::BusName' has a wrong offset!");
static_assert(offsetof(FBusSendInterpolationSettings, BusSendLevelForInside) == 0x000030, "Member 'FBusSendInterpolationSettings::BusSendLevelForInside' has a wrong offset!");
static_assert(offsetof(FBusSendInterpolationSettings, BusSendLevelForOutside) == 0x000034, "Member 'FBusSendInterpolationSettings::BusSendLevelForOutside' has a wrong offset!");
static_assert(offsetof(FBusSendInterpolationSettings, Width) == 0x000038, "Member 'FBusSendInterpolationSettings::Width' has a wrong offset!");

// ScriptStruct CriWareRuntime.AisacControlInterpolationSettings
// 0x0030 (0x0030 - 0x0000)
struct FAisacControlInterpolationSettings final
{
public:
	int32                                         AisacControlID;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AisacControlName;                                  // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AisacControlValueForInside;                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AisacControlValueForOutside;                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0xC];                                       // 0x0024(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAisacControlInterpolationSettings) == 0x000008, "Wrong alignment on FAisacControlInterpolationSettings");
static_assert(sizeof(FAisacControlInterpolationSettings) == 0x000030, "Wrong size on FAisacControlInterpolationSettings");
static_assert(offsetof(FAisacControlInterpolationSettings, AisacControlID) == 0x000000, "Member 'FAisacControlInterpolationSettings::AisacControlID' has a wrong offset!");
static_assert(offsetof(FAisacControlInterpolationSettings, AisacControlName) == 0x000008, "Member 'FAisacControlInterpolationSettings::AisacControlName' has a wrong offset!");
static_assert(offsetof(FAisacControlInterpolationSettings, AisacControlValueForInside) == 0x000018, "Member 'FAisacControlInterpolationSettings::AisacControlValueForInside' has a wrong offset!");
static_assert(offsetof(FAisacControlInterpolationSettings, AisacControlValueForOutside) == 0x00001C, "Member 'FAisacControlInterpolationSettings::AisacControlValueForOutside' has a wrong offset!");
static_assert(offsetof(FAisacControlInterpolationSettings, Width) == 0x000020, "Member 'FAisacControlInterpolationSettings::Width' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAudioVolumeParameters
// 0x0040 (0x0040 - 0x0000)
struct FAtomAudioVolumeParameters final
{
public:
	bool                                          bUseSnapshotSettings;                              // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBusSendSettings;                               // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAisacControlSettings;                          // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDistanceForEntranceVolume;                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchIntepolationInsideForBus;                   // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchIntepolationInsideForAisac;                 // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSnapshotSwitchSettings>        SnapshotSwitchSettings;                            // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBusSendInterpolationSettings>  BusSendInterpolateSettings;                        // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAisacControlInterpolationSettings> AisacControlInterpolateSettings;                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomAudioVolumeParameters) == 0x000008, "Wrong alignment on FAtomAudioVolumeParameters");
static_assert(sizeof(FAtomAudioVolumeParameters) == 0x000040, "Wrong size on FAtomAudioVolumeParameters");
static_assert(offsetof(FAtomAudioVolumeParameters, bUseSnapshotSettings) == 0x000000, "Member 'FAtomAudioVolumeParameters::bUseSnapshotSettings' has a wrong offset!");
static_assert(offsetof(FAtomAudioVolumeParameters, bUseBusSendSettings) == 0x000001, "Member 'FAtomAudioVolumeParameters::bUseBusSendSettings' has a wrong offset!");
static_assert(offsetof(FAtomAudioVolumeParameters, bUseAisacControlSettings) == 0x000002, "Member 'FAtomAudioVolumeParameters::bUseAisacControlSettings' has a wrong offset!");
static_assert(offsetof(FAtomAudioVolumeParameters, MaxDistanceForEntranceVolume) == 0x000004, "Member 'FAtomAudioVolumeParameters::MaxDistanceForEntranceVolume' has a wrong offset!");
static_assert(offsetof(FAtomAudioVolumeParameters, bSwitchIntepolationInsideForBus) == 0x000008, "Member 'FAtomAudioVolumeParameters::bSwitchIntepolationInsideForBus' has a wrong offset!");
static_assert(offsetof(FAtomAudioVolumeParameters, bSwitchIntepolationInsideForAisac) == 0x000009, "Member 'FAtomAudioVolumeParameters::bSwitchIntepolationInsideForAisac' has a wrong offset!");
static_assert(offsetof(FAtomAudioVolumeParameters, SnapshotSwitchSettings) == 0x000010, "Member 'FAtomAudioVolumeParameters::SnapshotSwitchSettings' has a wrong offset!");
static_assert(offsetof(FAtomAudioVolumeParameters, BusSendInterpolateSettings) == 0x000020, "Member 'FAtomAudioVolumeParameters::BusSendInterpolateSettings' has a wrong offset!");
static_assert(offsetof(FAtomAudioVolumeParameters, AisacControlInterpolateSettings) == 0x000030, "Member 'FAtomAudioVolumeParameters::AisacControlInterpolateSettings' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAisacControlSettingsParam
// 0x0018 (0x0018 - 0x0000)
struct FAtomAisacControlSettingsParam final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomAisacControlSettingsParam) == 0x000008, "Wrong alignment on FAtomAisacControlSettingsParam");
static_assert(sizeof(FAtomAisacControlSettingsParam) == 0x000018, "Wrong size on FAtomAisacControlSettingsParam");
static_assert(offsetof(FAtomAisacControlSettingsParam, ID) == 0x000000, "Member 'FAtomAisacControlSettingsParam::ID' has a wrong offset!");
static_assert(offsetof(FAtomAisacControlSettingsParam, Name) == 0x000008, "Member 'FAtomAisacControlSettingsParam::Name' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomGlobalAisacSettingsParam
// 0x0010 (0x0010 - 0x0000)
struct FAtomGlobalAisacSettingsParam final
{
public:
	class FString                                 AisacControl;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomGlobalAisacSettingsParam) == 0x000008, "Wrong alignment on FAtomGlobalAisacSettingsParam");
static_assert(sizeof(FAtomGlobalAisacSettingsParam) == 0x000010, "Wrong size on FAtomGlobalAisacSettingsParam");
static_assert(offsetof(FAtomGlobalAisacSettingsParam, AisacControl) == 0x000000, "Member 'FAtomGlobalAisacSettingsParam::AisacControl' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCategoryParam
// 0x0030 (0x0030 - 0x0000)
struct FAtomCategoryParam final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Group;                                             // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomCategoryParam) == 0x000008, "Wrong alignment on FAtomCategoryParam");
static_assert(sizeof(FAtomCategoryParam) == 0x000030, "Wrong size on FAtomCategoryParam");
static_assert(offsetof(FAtomCategoryParam, ID) == 0x000000, "Member 'FAtomCategoryParam::ID' has a wrong offset!");
static_assert(offsetof(FAtomCategoryParam, Name) == 0x000008, "Member 'FAtomCategoryParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomCategoryParam, Group) == 0x000018, "Member 'FAtomCategoryParam::Group' has a wrong offset!");
static_assert(offsetof(FAtomCategoryParam, Volume) == 0x000028, "Member 'FAtomCategoryParam::Volume' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomDspBusSettingsParam
// 0x0030 (0x0030 - 0x0000)
struct FAtomDspBusSettingsParam final
{
public:
	class FString                                 BusSettingsName;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAtomStringWithComment>         Snapshot;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAtomStringWithComment>         Bus;                                               // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomDspBusSettingsParam) == 0x000008, "Wrong alignment on FAtomDspBusSettingsParam");
static_assert(sizeof(FAtomDspBusSettingsParam) == 0x000030, "Wrong size on FAtomDspBusSettingsParam");
static_assert(offsetof(FAtomDspBusSettingsParam, BusSettingsName) == 0x000000, "Member 'FAtomDspBusSettingsParam::BusSettingsName' has a wrong offset!");
static_assert(offsetof(FAtomDspBusSettingsParam, Snapshot) == 0x000010, "Member 'FAtomDspBusSettingsParam::Snapshot' has a wrong offset!");
static_assert(offsetof(FAtomDspBusSettingsParam, Bus) == 0x000020, "Member 'FAtomDspBusSettingsParam::Bus' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomConfigDataTable
// 0x00B0 (0x00B8 - 0x0008)
struct FAtomConfigDataTable : public FTableRowBase
{
public:
	class FString                                 BuildDate;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCategoriesPerPlayback;                          // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumCategories;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumAisacControls;                                  // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumGlobalAisacs;                                   // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumVoiceLimitGroups;                               // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDspBusSettings;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDspBusSettingSnapshots;                         // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumDspBus;                                         // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumGameVariables;                                  // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSelectors;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumReacts;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtomSelectorSettingsParam>     Selector;                                          // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAtomAisacControlSettingsParam> AisacControl;                                      // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAtomGameVariableParam>         GameVariable;                                      // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAtomGlobalAisacSettingsParam>  GlobalAisac;                                       // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAtomCategoryParam>             Category;                                          // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAtomDspBusSettingsParam>       DspBusSettings;                                    // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAtomStringWithComment>         React;                                             // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomConfigDataTable) == 0x000008, "Wrong alignment on FAtomConfigDataTable");
static_assert(sizeof(FAtomConfigDataTable) == 0x0000B8, "Wrong size on FAtomConfigDataTable");
static_assert(offsetof(FAtomConfigDataTable, BuildDate) == 0x000008, "Member 'FAtomConfigDataTable::BuildDate' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, NumCategoriesPerPlayback) == 0x000018, "Member 'FAtomConfigDataTable::NumCategoriesPerPlayback' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, NumCategories) == 0x00001C, "Member 'FAtomConfigDataTable::NumCategories' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, NumAisacControls) == 0x000020, "Member 'FAtomConfigDataTable::NumAisacControls' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, NumGlobalAisacs) == 0x000024, "Member 'FAtomConfigDataTable::NumGlobalAisacs' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, NumVoiceLimitGroups) == 0x000028, "Member 'FAtomConfigDataTable::NumVoiceLimitGroups' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, NumDspBusSettings) == 0x00002C, "Member 'FAtomConfigDataTable::NumDspBusSettings' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, NumDspBusSettingSnapshots) == 0x000030, "Member 'FAtomConfigDataTable::NumDspBusSettingSnapshots' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, NumDspBus) == 0x000034, "Member 'FAtomConfigDataTable::NumDspBus' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, NumGameVariables) == 0x000038, "Member 'FAtomConfigDataTable::NumGameVariables' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, NumSelectors) == 0x00003C, "Member 'FAtomConfigDataTable::NumSelectors' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, NumReacts) == 0x000040, "Member 'FAtomConfigDataTable::NumReacts' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, Selector) == 0x000048, "Member 'FAtomConfigDataTable::Selector' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, AisacControl) == 0x000058, "Member 'FAtomConfigDataTable::AisacControl' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, GameVariable) == 0x000068, "Member 'FAtomConfigDataTable::GameVariable' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, GlobalAisac) == 0x000078, "Member 'FAtomConfigDataTable::GlobalAisac' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, Category) == 0x000088, "Member 'FAtomConfigDataTable::Category' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, DspBusSettings) == 0x000098, "Member 'FAtomConfigDataTable::DspBusSettings' has a wrong offset!");
static_assert(offsetof(FAtomConfigDataTable, React) == 0x0000A8, "Member 'FAtomConfigDataTable::React' has a wrong offset!");

// ScriptStruct CriWareRuntime.AcfDataTable
// 0x0000 (0x00B8 - 0x00B8)
struct FAcfDataTable final : public FAtomConfigDataTable
{
};
static_assert(alignof(FAcfDataTable) == 0x000008, "Wrong alignment on FAcfDataTable");
static_assert(sizeof(FAcfDataTable) == 0x0000B8, "Wrong size on FAcfDataTable");

// ScriptStruct CriWareRuntime.AtomCueInfoSelectorParam
// 0x0020 (0x0020 - 0x0000)
struct FAtomCueInfoSelectorParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Label;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomCueInfoSelectorParam) == 0x000008, "Wrong alignment on FAtomCueInfoSelectorParam");
static_assert(sizeof(FAtomCueInfoSelectorParam) == 0x000020, "Wrong size on FAtomCueInfoSelectorParam");
static_assert(offsetof(FAtomCueInfoSelectorParam, Name) == 0x000000, "Member 'FAtomCueInfoSelectorParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoSelectorParam, Label) == 0x000010, "Member 'FAtomCueInfoSelectorParam::Label' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCueInfoCategoryParam
// 0x0010 (0x0010 - 0x0000)
struct FAtomCueInfoCategoryParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomCueInfoCategoryParam) == 0x000008, "Wrong alignment on FAtomCueInfoCategoryParam");
static_assert(sizeof(FAtomCueInfoCategoryParam) == 0x000010, "Wrong size on FAtomCueInfoCategoryParam");
static_assert(offsetof(FAtomCueInfoCategoryParam, Name) == 0x000000, "Member 'FAtomCueInfoCategoryParam::Name' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCueInfoTrackParam
// 0x0038 (0x0038 - 0x0000)
struct FAtomCueInfoTrackParam final
{
public:
	float                                         Volume;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomCueInfoSelectorParam              Selector;                                          // 0x0018(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomCueInfoTrackParam) == 0x000008, "Wrong alignment on FAtomCueInfoTrackParam");
static_assert(sizeof(FAtomCueInfoTrackParam) == 0x000038, "Wrong size on FAtomCueInfoTrackParam");
static_assert(offsetof(FAtomCueInfoTrackParam, Volume) == 0x000000, "Member 'FAtomCueInfoTrackParam::Volume' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoTrackParam, Name) == 0x000008, "Member 'FAtomCueInfoTrackParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoTrackParam, Selector) == 0x000018, "Member 'FAtomCueInfoTrackParam::Selector' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCueInfoBusSendParam
// 0x0018 (0x0018 - 0x0000)
struct FAtomCueInfoBusSendParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Level;                                             // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomCueInfoBusSendParam) == 0x000008, "Wrong alignment on FAtomCueInfoBusSendParam");
static_assert(sizeof(FAtomCueInfoBusSendParam) == 0x000018, "Wrong size on FAtomCueInfoBusSendParam");
static_assert(offsetof(FAtomCueInfoBusSendParam, Name) == 0x000000, "Member 'FAtomCueInfoBusSendParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoBusSendParam, Enable) == 0x000010, "Member 'FAtomCueInfoBusSendParam::Enable' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoBusSendParam, Level) == 0x000014, "Member 'FAtomCueInfoBusSendParam::Level' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCueInfoBlocksParam
// 0x0018 (0x0018 - 0x0000)
struct FAtomCueInfoBlocksParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPosition;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomCueInfoBlocksParam) == 0x000008, "Wrong alignment on FAtomCueInfoBlocksParam");
static_assert(sizeof(FAtomCueInfoBlocksParam) == 0x000018, "Wrong size on FAtomCueInfoBlocksParam");
static_assert(offsetof(FAtomCueInfoBlocksParam, Name) == 0x000000, "Member 'FAtomCueInfoBlocksParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoBlocksParam, StartPosition) == 0x000010, "Member 'FAtomCueInfoBlocksParam::StartPosition' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoBlocksParam, Length) == 0x000014, "Member 'FAtomCueInfoBlocksParam::Length' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCueInfoAttachedSelectorParam
// 0x0010 (0x0010 - 0x0000)
struct FAtomCueInfoAttachedSelectorParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomCueInfoAttachedSelectorParam) == 0x000008, "Wrong alignment on FAtomCueInfoAttachedSelectorParam");
static_assert(sizeof(FAtomCueInfoAttachedSelectorParam) == 0x000010, "Wrong size on FAtomCueInfoAttachedSelectorParam");
static_assert(offsetof(FAtomCueInfoAttachedSelectorParam, Name) == 0x000000, "Member 'FAtomCueInfoAttachedSelectorParam::Name' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCueInfoAttachedAisacControlParam
// 0x0018 (0x0018 - 0x0000)
struct FAtomCueInfoAttachedAisacControlParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomCueInfoAttachedAisacControlParam) == 0x000008, "Wrong alignment on FAtomCueInfoAttachedAisacControlParam");
static_assert(sizeof(FAtomCueInfoAttachedAisacControlParam) == 0x000018, "Wrong size on FAtomCueInfoAttachedAisacControlParam");
static_assert(offsetof(FAtomCueInfoAttachedAisacControlParam, Name) == 0x000000, "Member 'FAtomCueInfoAttachedAisacControlParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoAttachedAisacControlParam, ID) == 0x000010, "Member 'FAtomCueInfoAttachedAisacControlParam::ID' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCueInfoDataTable
// 0x00F8 (0x0100 - 0x0008)
struct FAtomCueInfoDataTable final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueId;                                             // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CueTypeIndex;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CueType;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomCueInfoSelectorParam              DefaultSelectorLabel;                              // 0x0030(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Public;                                            // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CategoryCuePriority;                               // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CategoryCuePriorityType;                           // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CategoryCuePriorityTypeIndex;                      // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CuePriorityType;                                   // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CuePriorityTypeIndex;                              // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCueLimit;                                    // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumCueLimits;                                      // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Probability;                                       // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Length;                                            // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtomCueInfoCategoryParam>      Category;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAtomCueInfoTrackParam>         Track;                                             // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAtomCueInfoBusSendParam>       BusSend;                                           // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAtomCueInfoBlocksParam>        Blocks;                                            // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAtomCueInfoAttachedSelectorParam> AttachedSelector;                                  // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FAtomCueInfoAttachedAisacControlParam> AttachedAisacControl;                              // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomCueInfoDataTable) == 0x000008, "Wrong alignment on FAtomCueInfoDataTable");
static_assert(sizeof(FAtomCueInfoDataTable) == 0x000100, "Wrong size on FAtomCueInfoDataTable");
static_assert(offsetof(FAtomCueInfoDataTable, Name) == 0x000008, "Member 'FAtomCueInfoDataTable::Name' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, CueId) == 0x000018, "Member 'FAtomCueInfoDataTable::CueId' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, CueTypeIndex) == 0x00001C, "Member 'FAtomCueInfoDataTable::CueTypeIndex' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, CueType) == 0x000020, "Member 'FAtomCueInfoDataTable::CueType' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, DefaultSelectorLabel) == 0x000030, "Member 'FAtomCueInfoDataTable::DefaultSelectorLabel' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, Volume) == 0x000050, "Member 'FAtomCueInfoDataTable::Volume' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, Public) == 0x000054, "Member 'FAtomCueInfoDataTable::Public' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, CategoryCuePriority) == 0x000058, "Member 'FAtomCueInfoDataTable::CategoryCuePriority' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, CategoryCuePriorityType) == 0x000060, "Member 'FAtomCueInfoDataTable::CategoryCuePriorityType' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, CategoryCuePriorityTypeIndex) == 0x000070, "Member 'FAtomCueInfoDataTable::CategoryCuePriorityTypeIndex' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, CuePriorityType) == 0x000078, "Member 'FAtomCueInfoDataTable::CuePriorityType' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, CuePriorityTypeIndex) == 0x000088, "Member 'FAtomCueInfoDataTable::CuePriorityTypeIndex' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, EnableCueLimit) == 0x00008C, "Member 'FAtomCueInfoDataTable::EnableCueLimit' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, NumCueLimits) == 0x000090, "Member 'FAtomCueInfoDataTable::NumCueLimits' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, Probability) == 0x000094, "Member 'FAtomCueInfoDataTable::Probability' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, Length) == 0x000098, "Member 'FAtomCueInfoDataTable::Length' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, Category) == 0x0000A0, "Member 'FAtomCueInfoDataTable::Category' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, Track) == 0x0000B0, "Member 'FAtomCueInfoDataTable::Track' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, BusSend) == 0x0000C0, "Member 'FAtomCueInfoDataTable::BusSend' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, Blocks) == 0x0000D0, "Member 'FAtomCueInfoDataTable::Blocks' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, AttachedSelector) == 0x0000E0, "Member 'FAtomCueInfoDataTable::AttachedSelector' has a wrong offset!");
static_assert(offsetof(FAtomCueInfoDataTable, AttachedAisacControl) == 0x0000F0, "Member 'FAtomCueInfoDataTable::AttachedAisacControl' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCueSheetDataTable
// 0x0068 (0x0070 - 0x0008)
struct FAtomCueSheetDataTable final : public FTableRowBase
{
public:
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildDate;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WorkUnit;                                          // 0x0028(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCueLimit;                                    // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumCueLimits;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PriorityType;                                      // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PriorityTypeIndex;                                 // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtomCueInfoDataTable>          Cue;                                               // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomCueSheetDataTable) == 0x000008, "Wrong alignment on FAtomCueSheetDataTable");
static_assert(sizeof(FAtomCueSheetDataTable) == 0x000070, "Wrong size on FAtomCueSheetDataTable");
static_assert(offsetof(FAtomCueSheetDataTable, Name) == 0x000008, "Member 'FAtomCueSheetDataTable::Name' has a wrong offset!");
static_assert(offsetof(FAtomCueSheetDataTable, BuildDate) == 0x000018, "Member 'FAtomCueSheetDataTable::BuildDate' has a wrong offset!");
static_assert(offsetof(FAtomCueSheetDataTable, WorkUnit) == 0x000028, "Member 'FAtomCueSheetDataTable::WorkUnit' has a wrong offset!");
static_assert(offsetof(FAtomCueSheetDataTable, Volume) == 0x000038, "Member 'FAtomCueSheetDataTable::Volume' has a wrong offset!");
static_assert(offsetof(FAtomCueSheetDataTable, EnableCueLimit) == 0x00003C, "Member 'FAtomCueSheetDataTable::EnableCueLimit' has a wrong offset!");
static_assert(offsetof(FAtomCueSheetDataTable, NumCueLimits) == 0x000040, "Member 'FAtomCueSheetDataTable::NumCueLimits' has a wrong offset!");
static_assert(offsetof(FAtomCueSheetDataTable, PriorityType) == 0x000048, "Member 'FAtomCueSheetDataTable::PriorityType' has a wrong offset!");
static_assert(offsetof(FAtomCueSheetDataTable, PriorityTypeIndex) == 0x000058, "Member 'FAtomCueSheetDataTable::PriorityTypeIndex' has a wrong offset!");
static_assert(offsetof(FAtomCueSheetDataTable, Cue) == 0x000060, "Member 'FAtomCueSheetDataTable::Cue' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomListenerFocusPointInfo
// 0x0018 (0x0018 - 0x0000)
struct FAtomListenerFocusPointInfo final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        TargetComponent;                                   // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceLevel;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionLevel;                                    // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomListenerFocusPointInfo) == 0x000008, "Wrong alignment on FAtomListenerFocusPointInfo");
static_assert(sizeof(FAtomListenerFocusPointInfo) == 0x000018, "Wrong size on FAtomListenerFocusPointInfo");
static_assert(offsetof(FAtomListenerFocusPointInfo, TargetActor) == 0x000000, "Member 'FAtomListenerFocusPointInfo::TargetActor' has a wrong offset!");
static_assert(offsetof(FAtomListenerFocusPointInfo, TargetComponent) == 0x000008, "Member 'FAtomListenerFocusPointInfo::TargetComponent' has a wrong offset!");
static_assert(offsetof(FAtomListenerFocusPointInfo, DistanceLevel) == 0x000010, "Member 'FAtomListenerFocusPointInfo::DistanceLevel' has a wrong offset!");
static_assert(offsetof(FAtomListenerFocusPointInfo, DirectionLevel) == 0x000014, "Member 'FAtomListenerFocusPointInfo::DirectionLevel' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomSoundManager
// 0x0001 (0x0001 - 0x0000)
struct FAtomSoundManager final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomSoundManager) == 0x000001, "Wrong alignment on FAtomSoundManager");
static_assert(sizeof(FAtomSoundManager) == 0x000001, "Wrong size on FAtomSoundManager");

// ScriptStruct CriWareRuntime.AtomComponentParams
// 0x0060 (0x0060 - 0x0000)
struct FAtomComponentParams final
{
public:
	float                                         DefaultVolume;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultPitchMultiplier;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableMultipleSoundPlayback : 1;                  // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsePlaylist : 1;                                  // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bIsMovable;                                        // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStraddleAudioVolume;                           // 0x000E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAudioVolume;                                   // 0x000F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAreaSoundVolume;                               // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomSoundObject*                       SoundObject;                                       // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultBlockIndex;                                 // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtomAisacControlParam>         DefaultAisacControl;                               // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAtomSelectorParam>             DefaultSelectorLabel;                              // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EAtomLoopSetting                              LoopSetting;                                       // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               Rotation;                                          // 0x0054(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomComponentParams) == 0x000008, "Wrong alignment on FAtomComponentParams");
static_assert(sizeof(FAtomComponentParams) == 0x000060, "Wrong size on FAtomComponentParams");
static_assert(offsetof(FAtomComponentParams, DefaultVolume) == 0x000000, "Member 'FAtomComponentParams::DefaultVolume' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, DefaultPitchMultiplier) == 0x000004, "Member 'FAtomComponentParams::DefaultPitchMultiplier' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, StartTime) == 0x000008, "Member 'FAtomComponentParams::StartTime' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, bIsMovable) == 0x00000D, "Member 'FAtomComponentParams::bIsMovable' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, bCanStraddleAudioVolume) == 0x00000E, "Member 'FAtomComponentParams::bCanStraddleAudioVolume' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, bUseAudioVolume) == 0x00000F, "Member 'FAtomComponentParams::bUseAudioVolume' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, bUseAreaSoundVolume) == 0x000010, "Member 'FAtomComponentParams::bUseAreaSoundVolume' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, SoundObject) == 0x000018, "Member 'FAtomComponentParams::SoundObject' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, AttenuationSettings) == 0x000020, "Member 'FAtomComponentParams::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, DefaultBlockIndex) == 0x000028, "Member 'FAtomComponentParams::DefaultBlockIndex' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, DefaultAisacControl) == 0x000030, "Member 'FAtomComponentParams::DefaultAisacControl' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, DefaultSelectorLabel) == 0x000040, "Member 'FAtomComponentParams::DefaultSelectorLabel' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, LoopSetting) == 0x000050, "Member 'FAtomComponentParams::LoopSetting' has a wrong offset!");
static_assert(offsetof(FAtomComponentParams, Rotation) == 0x000054, "Member 'FAtomComponentParams::Rotation' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomTriggerRow
// 0x0018 (0x0020 - 0x0008)
struct FAtomTriggerRow final : public FTableRowBase
{
public:
	float                                         Time;                                              // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Bone;                                              // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          Cue;                                               // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomTriggerRow) == 0x000008, "Wrong alignment on FAtomTriggerRow");
static_assert(sizeof(FAtomTriggerRow) == 0x000020, "Wrong size on FAtomTriggerRow");
static_assert(offsetof(FAtomTriggerRow, Time) == 0x000008, "Member 'FAtomTriggerRow::Time' has a wrong offset!");
static_assert(offsetof(FAtomTriggerRow, Bone) == 0x00000C, "Member 'FAtomTriggerRow::Bone' has a wrong offset!");
static_assert(offsetof(FAtomTriggerRow, Cue) == 0x000018, "Member 'FAtomTriggerRow::Cue' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAsrRackConfig
// 0x0008 (0x0008 - 0x0000)
struct FAtomAsrRackConfig final
{
public:
	int32                                         SoundRendererType;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElementID;                                         // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomAsrRackConfig) == 0x000004, "Wrong alignment on FAtomAsrRackConfig");
static_assert(sizeof(FAtomAsrRackConfig) == 0x000008, "Wrong size on FAtomAsrRackConfig");
static_assert(offsetof(FAtomAsrRackConfig, SoundRendererType) == 0x000000, "Member 'FAtomAsrRackConfig::SoundRendererType' has a wrong offset!");
static_assert(offsetof(FAtomAsrRackConfig, ElementID) == 0x000004, "Member 'FAtomAsrRackConfig::ElementID' has a wrong offset!");

// ScriptStruct CriWareRuntime.ManaAudioTrackInfo
// 0x0010 (0x0010 - 0x0000)
struct FManaAudioTrackInfo final
{
public:
	int32                                         NumChannels;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SamplingRate;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalSamples;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAmbisonics;                                     // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaSoundType                                Type;                                              // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FManaAudioTrackInfo) == 0x000004, "Wrong alignment on FManaAudioTrackInfo");
static_assert(sizeof(FManaAudioTrackInfo) == 0x000010, "Wrong size on FManaAudioTrackInfo");
static_assert(offsetof(FManaAudioTrackInfo, NumChannels) == 0x000000, "Member 'FManaAudioTrackInfo::NumChannels' has a wrong offset!");
static_assert(offsetof(FManaAudioTrackInfo, SamplingRate) == 0x000004, "Member 'FManaAudioTrackInfo::SamplingRate' has a wrong offset!");
static_assert(offsetof(FManaAudioTrackInfo, TotalSamples) == 0x000008, "Member 'FManaAudioTrackInfo::TotalSamples' has a wrong offset!");
static_assert(offsetof(FManaAudioTrackInfo, bIsAmbisonics) == 0x00000C, "Member 'FManaAudioTrackInfo::bIsAmbisonics' has a wrong offset!");
static_assert(offsetof(FManaAudioTrackInfo, Type) == 0x00000D, "Member 'FManaAudioTrackInfo::Type' has a wrong offset!");

// ScriptStruct CriWareRuntime.ManaVideoTrackInfo
// 0x001C (0x001C - 0x0000)
struct FManaVideoTrackInfo final
{
public:
	struct FIntPoint                              TextureDimensions;                                 // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              DisplayDimensions;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameRate;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFrames;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlpha;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaMovieType                                Type;                                              // 0x0019(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FManaVideoTrackInfo) == 0x000004, "Wrong alignment on FManaVideoTrackInfo");
static_assert(sizeof(FManaVideoTrackInfo) == 0x00001C, "Wrong size on FManaVideoTrackInfo");
static_assert(offsetof(FManaVideoTrackInfo, TextureDimensions) == 0x000000, "Member 'FManaVideoTrackInfo::TextureDimensions' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, DisplayDimensions) == 0x000008, "Member 'FManaVideoTrackInfo::DisplayDimensions' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, FrameRate) == 0x000010, "Member 'FManaVideoTrackInfo::FrameRate' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, TotalFrames) == 0x000014, "Member 'FManaVideoTrackInfo::TotalFrames' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, bIsAlpha) == 0x000018, "Member 'FManaVideoTrackInfo::bIsAlpha' has a wrong offset!");
static_assert(offsetof(FManaVideoTrackInfo, Type) == 0x000019, "Member 'FManaVideoTrackInfo::Type' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCategoryInfoParam
// 0x0020 (0x0020 - 0x0000)
struct FAtomCategoryInfoParam final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Category_id;                                       // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Group_no;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0018(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPaused;                                          // 0x001C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomCategoryInfoParam) == 0x000008, "Wrong alignment on FAtomCategoryInfoParam");
static_assert(sizeof(FAtomCategoryInfoParam) == 0x000020, "Wrong size on FAtomCategoryInfoParam");
static_assert(offsetof(FAtomCategoryInfoParam, Name) == 0x000000, "Member 'FAtomCategoryInfoParam::Name' has a wrong offset!");
static_assert(offsetof(FAtomCategoryInfoParam, Category_id) == 0x000010, "Member 'FAtomCategoryInfoParam::Category_id' has a wrong offset!");
static_assert(offsetof(FAtomCategoryInfoParam, Group_no) == 0x000014, "Member 'FAtomCategoryInfoParam::Group_no' has a wrong offset!");
static_assert(offsetof(FAtomCategoryInfoParam, Volume) == 0x000018, "Member 'FAtomCategoryInfoParam::Volume' has a wrong offset!");
static_assert(offsetof(FAtomCategoryInfoParam, IsPaused) == 0x00001C, "Member 'FAtomCategoryInfoParam::IsPaused' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomAttenuationDistanceParam
// 0x0008 (0x0008 - 0x0000)
struct FAtomAttenuationDistanceParam final
{
public:
	float                                         MinDistance;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistance;                                       // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAtomAttenuationDistanceParam) == 0x000004, "Wrong alignment on FAtomAttenuationDistanceParam");
static_assert(sizeof(FAtomAttenuationDistanceParam) == 0x000008, "Wrong size on FAtomAttenuationDistanceParam");
static_assert(offsetof(FAtomAttenuationDistanceParam, MinDistance) == 0x000000, "Member 'FAtomAttenuationDistanceParam::MinDistance' has a wrong offset!");
static_assert(offsetof(FAtomAttenuationDistanceParam, MaxDistance) == 0x000004, "Member 'FAtomAttenuationDistanceParam::MaxDistance' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomCueInfo
// 0x0060 (0x0060 - 0x0000)
struct FAtomCueInfo final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HeaderVisibility;                                  // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              Duration;                                          // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserData;                                          // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         CategoryNames;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         AisacControlNames;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	struct FAtomAttenuationDistanceParam          AttenuationDistance;                               // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bLooping : 1;                                      // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsParameterPalletAssigned : 1;                    // 0x0058(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomCueInfo) == 0x000008, "Wrong alignment on FAtomCueInfo");
static_assert(sizeof(FAtomCueInfo) == 0x000060, "Wrong size on FAtomCueInfo");
static_assert(offsetof(FAtomCueInfo, ID) == 0x000000, "Member 'FAtomCueInfo::ID' has a wrong offset!");
static_assert(offsetof(FAtomCueInfo, HeaderVisibility) == 0x000004, "Member 'FAtomCueInfo::HeaderVisibility' has a wrong offset!");
static_assert(offsetof(FAtomCueInfo, Name) == 0x000008, "Member 'FAtomCueInfo::Name' has a wrong offset!");
static_assert(offsetof(FAtomCueInfo, Duration) == 0x000018, "Member 'FAtomCueInfo::Duration' has a wrong offset!");
static_assert(offsetof(FAtomCueInfo, UserData) == 0x000020, "Member 'FAtomCueInfo::UserData' has a wrong offset!");
static_assert(offsetof(FAtomCueInfo, CategoryNames) == 0x000030, "Member 'FAtomCueInfo::CategoryNames' has a wrong offset!");
static_assert(offsetof(FAtomCueInfo, AisacControlNames) == 0x000040, "Member 'FAtomCueInfo::AisacControlNames' has a wrong offset!");
static_assert(offsetof(FAtomCueInfo, AttenuationDistance) == 0x000050, "Member 'FAtomCueInfo::AttenuationDistance' has a wrong offset!");

// ScriptStruct CriWareRuntime.AtomWaveInfo
// 0x0014 (0x0014 - 0x0000)
struct FAtomWaveInfo final
{
public:
	EAtomFormat                                   Format;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SamplingRate;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumChannels;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSamples;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsStreamed : 1;                                   // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtomWaveInfo) == 0x000004, "Wrong alignment on FAtomWaveInfo");
static_assert(sizeof(FAtomWaveInfo) == 0x000014, "Wrong size on FAtomWaveInfo");
static_assert(offsetof(FAtomWaveInfo, Format) == 0x000000, "Member 'FAtomWaveInfo::Format' has a wrong offset!");
static_assert(offsetof(FAtomWaveInfo, SamplingRate) == 0x000004, "Member 'FAtomWaveInfo::SamplingRate' has a wrong offset!");
static_assert(offsetof(FAtomWaveInfo, NumChannels) == 0x000008, "Member 'FAtomWaveInfo::NumChannels' has a wrong offset!");
static_assert(offsetof(FAtomWaveInfo, NumSamples) == 0x00000C, "Member 'FAtomWaveInfo::NumSamples' has a wrong offset!");

}

