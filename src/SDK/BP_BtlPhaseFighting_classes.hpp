#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlPhaseFighting

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Xrd777_structs.hpp"
#include "BP_BtlPhaseBase_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlPhaseFighting.BP_BtlPhaseFighting_C
// 0x00A8 (0x0330 - 0x0288)
class ABP_BtlPhaseFighting_C final : public ABP_BtlPhaseBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0288(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_BtlCameraCalc_C*                    BP_BtlCameraCalc;                                  // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlAIManagerComponent*                 AIManager;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlActionManager_C*                 ActionManager;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlGuiComponent_C*                  BtlGui;                                            // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlCoreComponent*                      BtlCore;                                           // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlTargetManager_C*                 TargetManager;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlCameraManagerComponent_C*        CameraManager;                                     // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlInputComponent*                     BtlInput;                                          // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReadyForExit;                                      // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_BtlEnvironment_C*                   BtlEnvironment;                                    // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlUICameraComponent_C*             UICamera;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NonePreAct;                                        // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlAlloutController_C*              AlloutController;                                  // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BtlCharacterBase_C*                 MainChara;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReadyForExitFromAllout;                            // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlEventAlloutShuffleMonitor*          ShuffleTimeMonitor;                                // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlEvent_C*                         BtlEvent;                                          // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EndStartWipe;                                      // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EndStartup;                                        // 0x0319(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableInterruptProgress;                           // 0x031A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          RequestSerialEncount;                              // 0x031B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRetryStart;                                      // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         AlloutDamageEffect;                                // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSwitchedAlloutCut3;                              // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_BtlPhaseFighting(int32 EntryPoint);
	void On_Progress_Next_Turn_From_Retry();
	void On_Retry();
	void HasFinishedWipePerformance();
	void Has_Finished_Turn_End_Event();
	void Has_Finished_AI_Start();
	void On_Process_Select_Command();
	void FinalizePhaseInBP();
	void StartPhaseInBP();
	void On_Progress_Next_Turn();
	void On_Start_Action_Turn();
	void On_Process_Pre_Act();
	void On_Process_Act_Bad_Status();
	void On_Process_Recover_Bad_Status();
	void On_Process_Expire_Support();
	void Has_Finished_Shuffle_Time();
	void On_Shift_Result();
	void On_Switch_Allout_cut_3();
	void On_Switch_Shuffle();
	void On_Switch_Allout_Cut_2();
	void On_Play_General_Attack();
	void On_Cancel_Holdup();
	void On_Shift_General_Attack();
	void On_Start_Holdup();
	void On_Allout_Shuffle_BGM_Switch();
	void OnLoaded_BEF8F5C44FEAA533FABD21BFFF755582(class UObject* Loaded);
	void OnLoaded_89C338DF41743B3A060FCBAB8ED6F29A(class UObject* Loaded);
	void UserConstructionScript();
	class ABtlPhase* GetNextPhaseInBP();
	void GetMainAction(class ABP_BtlCharacterBase_C** MainCharacter);
	void GetEventMainAction(class ABP_BtlCharacterBase_C** EventMainChara);
	void PrepareTurnStart(class ABP_BtlCharacterBase_C* Character);
	void Setup(class UBtlAIManagerComponent* AIManager_0, class UBP_BtlActionManager_C* ActionManager_0, class UBP_BtlGuiComponent_C* BtlGui_0, class UBtlCoreComponent* BtlCore_0, class UBP_BtlTargetManager_C* TargetManager_0, class UBP_BtlCameraManagerComponent_C* CameraManager_0, class UBtlInputComponent* BtlInput_0, class UBP_BtlEnvironment_C* BtlEnvironment_0, class UBP_BtlUICameraComponent_C* UICamera_0, class UBP_BtlEvent_C* BtlEvent_0);
	void SetExitReady();
	void SetupFormation(class ABP_BtlCharacterBase_C* NextCharacter);
	void WaitAnimAllPlayer(bool NoBlend);
	void WaitAnimAllEnemies();
	void Wait_Dying_Anim_Alive_Enemies_For_Allout_Damage();
	void SetupParyPanel(class ABtlActor* MainChara_0);
	void SwitchEachInitiateProc();
	void SetupAllCharacter();
	class ABtlPhase* CreateNextPhase(EBtlPhaseType Phase);
	void ProcPreAct();
	void PreActRelocation();
	void PlayPreActCamera();
	void MakeOtherAlloutMember(TArray<class ABP_BtlCharacterBase_C*>* OtherMembers);
	void SetupAlloutAttack(class ABP_BtlCharacterBase_C* MainCharacter, class ABP_BtlCharacterBase_C* HERO);
	void RotateEnemyAnchorForAllout();
	void SetupTargetsForAllout();
	void SetAllCharacterVisible(bool Visible);
	void HideExceptAlloutParticipants();
	void RotateHeroToCenter();
	void HideDeadPlayer();
	void ProcAutoSkillRecovery();
	void Proc_Before_Command_Select();
	void Proc_Switch_to_Rush();
	void DoAttackByRush(class ABP_BtlCharacterBase_C* MainCharacter);
	bool SyncProgressTimingInBP();
	void RestoreSpecificModelsFromAllout();
	void FinalizeAlloutAnnihilation();

	bool CheckProgressNextPhaseInBP() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlPhaseFighting_C">();
	}
	static class ABP_BtlPhaseFighting_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlPhaseFighting_C>();
	}
};
static_assert(alignof(ABP_BtlPhaseFighting_C) == 0x000008, "Wrong alignment on ABP_BtlPhaseFighting_C");
static_assert(sizeof(ABP_BtlPhaseFighting_C) == 0x000330, "Wrong size on ABP_BtlPhaseFighting_C");
static_assert(offsetof(ABP_BtlPhaseFighting_C, UberGraphFrame) == 0x000288, "Member 'ABP_BtlPhaseFighting_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, BP_BtlCameraCalc) == 0x000290, "Member 'ABP_BtlPhaseFighting_C::BP_BtlCameraCalc' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, AIManager) == 0x000298, "Member 'ABP_BtlPhaseFighting_C::AIManager' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, ActionManager) == 0x0002A0, "Member 'ABP_BtlPhaseFighting_C::ActionManager' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, BtlGui) == 0x0002A8, "Member 'ABP_BtlPhaseFighting_C::BtlGui' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, BtlCore) == 0x0002B0, "Member 'ABP_BtlPhaseFighting_C::BtlCore' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, TargetManager) == 0x0002B8, "Member 'ABP_BtlPhaseFighting_C::TargetManager' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, CameraManager) == 0x0002C0, "Member 'ABP_BtlPhaseFighting_C::CameraManager' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, BtlInput) == 0x0002C8, "Member 'ABP_BtlPhaseFighting_C::BtlInput' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, ReadyForExit) == 0x0002D0, "Member 'ABP_BtlPhaseFighting_C::ReadyForExit' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, BtlEnvironment) == 0x0002D8, "Member 'ABP_BtlPhaseFighting_C::BtlEnvironment' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, UICamera) == 0x0002E0, "Member 'ABP_BtlPhaseFighting_C::UICamera' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, NonePreAct) == 0x0002E8, "Member 'ABP_BtlPhaseFighting_C::NonePreAct' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, AlloutController) == 0x0002F0, "Member 'ABP_BtlPhaseFighting_C::AlloutController' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, MainChara) == 0x0002F8, "Member 'ABP_BtlPhaseFighting_C::MainChara' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, ReadyForExitFromAllout) == 0x000300, "Member 'ABP_BtlPhaseFighting_C::ReadyForExitFromAllout' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, ShuffleTimeMonitor) == 0x000308, "Member 'ABP_BtlPhaseFighting_C::ShuffleTimeMonitor' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, BtlEvent) == 0x000310, "Member 'ABP_BtlPhaseFighting_C::BtlEvent' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, EndStartWipe) == 0x000318, "Member 'ABP_BtlPhaseFighting_C::EndStartWipe' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, EndStartup) == 0x000319, "Member 'ABP_BtlPhaseFighting_C::EndStartup' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, EnableInterruptProgress) == 0x00031A, "Member 'ABP_BtlPhaseFighting_C::EnableInterruptProgress' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, RequestSerialEncount) == 0x00031B, "Member 'ABP_BtlPhaseFighting_C::RequestSerialEncount' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, IsRetryStart) == 0x00031C, "Member 'ABP_BtlPhaseFighting_C::IsRetryStart' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, AlloutDamageEffect) == 0x000320, "Member 'ABP_BtlPhaseFighting_C::AlloutDamageEffect' has a wrong offset!");
static_assert(offsetof(ABP_BtlPhaseFighting_C, IsSwitchedAlloutCut3) == 0x000328, "Member 'ABP_BtlPhaseFighting_C::IsSwitchedAlloutCut3' has a wrong offset!");

}

