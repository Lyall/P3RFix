#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SoundManager

#include "Basic.hpp"

#include "SoundManager_classes.hpp"
#include "SoundManager_parameters.hpp"


namespace SDK
{

// Function SoundManager.AsyncCueSheetManager.GetAtomCueSheet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USoundAtomCueSheet*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USoundAtomCueSheet* UAsyncCueSheetManager::GetAtomCueSheet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncCueSheetManager", "GetAtomCueSheet");

	Params::AsyncCueSheetManager_GetAtomCueSheet Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.AsyncCueSheetManager.LoadAsync
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSoftObjectPath                  PathForCueSheet                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAsyncCueSheetManager::LoadAsync(const struct FSoftObjectPath& PathForCueSheet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncCueSheetManager", "LoadAsync");

	Params::AsyncCueSheetManager_LoadAsync Parms{};

	Parms.PathForCueSheet = std::move(PathForCueSheet);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction SoundManager.AsyncCueSheetManager.OnLoadCompleted__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UAsyncCueSheetManager::OnLoadCompleted__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncCueSheetManager", "OnLoadCompleted__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction SoundManager.AsyncCueSheetManager.OnLoadFailed__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UAsyncCueSheetManager::OnLoadFailed__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AsyncCueSheetManager", "OnLoadFailed__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SoundManager.LiveLipSync.attachSoundManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MajNum                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinNum                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULiveLipSync::AttachSoundManager(int32 MajNum, int32 MinNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LiveLipSync", "attachSoundManager");

	Params::LiveLipSync_AttachSoundManager Parms{};

	Parms.MajNum = MajNum;
	Parms.MinNum = MinNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.LiveLipSync.detachSoundManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MajNum                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinNum                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULiveLipSync::DetachSoundManager(int32 MajNum, int32 MinNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LiveLipSync", "detachSoundManager");

	Params::LiveLipSync_DetachSoundManager Parms{};

	Parms.MajNum = MajNum;
	Parms.MinNum = MinNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.LiveLipSync.getLipsyncLiveInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FCriLipsMouthInfo                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FCriLipsMouthInfo ULiveLipSync::GetLipsyncLiveInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LiveLipSync", "getLipsyncLiveInfo");

	Params::LiveLipSync_GetLipsyncLiveInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.LiveLipSync.getLipsyncLiveJapanese
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// struct FCriLipsMorphTargetBlendAmountAsJapaneseReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FCriLipsMorphTargetBlendAmountAsJapanese ULiveLipSync::GetLipsyncLiveJapanese()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LiveLipSync", "getLipsyncLiveJapanese");

	Params::LiveLipSync_GetLipsyncLiveJapanese Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.getNumCuePlayingCountByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPlayAdxControl::GetNumCuePlayingCountByName(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("PlayAdxControl", "getNumCuePlayingCountByName");

	Params::PlayAdxControl_GetNumCuePlayingCountByName Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.attachLipsyncLive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MajorNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinorNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayAdxControl::AttachLipsyncLive(int32 MajorNum, int32 MinorNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "attachLipsyncLive");

	Params::PlayAdxControl_AttachLipsyncLive Parms{};

	Parms.MajorNum = MajorNum;
	Parms.MinorNum = MinorNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.checkPauseSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayAdxControl::CheckPauseSound(int32 PlayerMajorID, int32 PlayerMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "checkPauseSound");

	Params::PlayAdxControl_CheckPauseSound Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.checkPlaying
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayAdxControl::CheckPlaying(int32 PlayerMajorID, int32 PlayerMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "checkPlaying");

	Params::PlayAdxControl_CheckPlaying Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.checkReadAcb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPlayAdxControl::CheckReadAcb(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "checkReadAcb");

	Params::PlayAdxControl_CheckReadAcb Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.checkReadEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bankID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayAdxControl::CheckReadEnd(int32 bankID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "checkReadEnd");

	Params::PlayAdxControl_CheckReadEnd Parms{};

	Parms.bankID = bankID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.createPlayerBank
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsMulti                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPlayAdxControl::CreatePlayerBank(int32 PlayerMajorID, int32 PlayerMinorID, bool IsMulti)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "createPlayerBank");

	Params::PlayAdxControl_CreatePlayerBank Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;
	Parms.IsMulti = IsMulti;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.detachLipsyncLive
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MajorNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinorNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayAdxControl::DetachLipsyncLive(int32 MajorNum, int32 MinorNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "detachLipsyncLive");

	Params::PlayAdxControl_DetachLipsyncLive Parms{};

	Parms.MajorNum = MajorNum;
	Parms.MinorNum = MinorNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.fadeInBGMCategorySoundmanager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FadeInTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeInVolume                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayAdxControl::FadeInBGMCategorySoundmanager(int32 FadeInTime, float FadeInVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "fadeInBGMCategorySoundmanager");

	Params::PlayAdxControl_FadeInBGMCategorySoundmanager Parms{};

	Parms.FadeInTime = FadeInTime;
	Parms.FadeInVolume = FadeInVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.fadeInSndMng
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FadeInTime                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayAdxControl::FadeInSndMng(int32 PlayerMajorID, int32 PlayerMinorID, int32 FadeInTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "fadeInSndMng");

	Params::PlayAdxControl_FadeInSndMng Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;
	Parms.FadeInTime = FadeInTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundManager.PlayAdxControl.fadeOutBGMCategorySoundManager
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FadeOutTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeOutVolume                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayAdxControl::FadeOutBGMCategorySoundManager(int32 FadeOutTime, float FadeOutVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "fadeOutBGMCategorySoundManager");

	Params::PlayAdxControl_FadeOutBGMCategorySoundManager Parms{};

	Parms.FadeOutTime = FadeOutTime;
	Parms.FadeOutVolume = FadeOutVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.fadeOutSndMng
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FadeOutTime                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayAdxControl::FadeOutSndMng(int32 PlayerMajorID, int32 PlayerMinorID, int32 FadeOutTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "fadeOutSndMng");

	Params::PlayAdxControl_FadeOutSndMng Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;
	Parms.FadeOutTime = FadeOutTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundManager.PlayAdxControl.getIntegratedLoudness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPlayAdxControl::GetIntegratedLoudness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "getIntegratedLoudness");

	Params::PlayAdxControl_GetIntegratedLoudness Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.getLengthPlayerBank
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MajorNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinorNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UPlayAdxControl::GetLengthPlayerBank(int32 MajorNum, int32 MinorNum, int32 CueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "getLengthPlayerBank");

	Params::PlayAdxControl_GetLengthPlayerBank Parms{};

	Parms.MajorNum = MajorNum;
	Parms.MinorNum = MinorNum;
	Parms.CueId = CueId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.getLengthSoundBank
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bankID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UPlayAdxControl::GetLengthSoundBank(int32 bankID, int32 CueId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "getLengthSoundBank");

	Params::PlayAdxControl_GetLengthSoundBank Parms{};

	Parms.bankID = bankID;
	Parms.CueId = CueId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.getLipsyncLiveInfo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MajorNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinorNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCriLipsMouthInfo                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FCriLipsMouthInfo UPlayAdxControl::GetLipsyncLiveInfo(int32 MajorNum, int32 MinorNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "getLipsyncLiveInfo");

	Params::PlayAdxControl_GetLipsyncLiveInfo Parms{};

	Parms.MajorNum = MajorNum;
	Parms.MinorNum = MinorNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.getLipsyncLiveJapanese
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   MajorNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinorNum                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FCriLipsMorphTargetBlendAmountAsJapaneseReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FCriLipsMorphTargetBlendAmountAsJapanese UPlayAdxControl::GetLipsyncLiveJapanese(int32 MajorNum, int32 MinorNum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "getLipsyncLiveJapanese");

	Params::PlayAdxControl_GetLipsyncLiveJapanese Parms{};

	Parms.MajorNum = MajorNum;
	Parms.MinorNum = MinorNum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.getMomentaryLoudness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPlayAdxControl::GetMomentaryLoudness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "getMomentaryLoudness");

	Params::PlayAdxControl_GetMomentaryLoudness Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.getShortLoudness
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPlayAdxControl::GetShortLoudness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "getShortLoudness");

	Params::PlayAdxControl_GetShortLoudness Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.GetTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPlayAdxControl::GetTime(int32 PlayerMajorID, int32 PlayerMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "GetTime");

	Params::PlayAdxControl_GetTime Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.IsLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlayAdxControl::IsLoop(int32 PlayerMajorID, int32 PlayerMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "IsLoop");

	Params::PlayAdxControl_IsLoop Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.pauseSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Flag                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayAdxControl::PauseSound(int32 PlayerMajorID, int32 PlayerMinorID, bool Flag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "pauseSound");

	Params::PlayAdxControl_PauseSound Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;
	Parms.Flag = Flag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundManager.PlayAdxControl.releasePlayerBank
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayAdxControl::ReleasePlayerBank(int32 PlayerMajorID, int32 PlayerMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "releasePlayerBank");

	Params::PlayAdxControl_ReleasePlayerBank Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundManager.PlayAdxControl.requestFreeAcb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   bankID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayAdxControl::RequestFreeAcb(int32 bankID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "requestFreeAcb");

	Params::PlayAdxControl_RequestFreeAcb Parms{};

	Parms.bankID = bankID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundManager.PlayAdxControl.requestLoadAcb
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPlayAdxControl::RequestLoadAcb(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "requestLoadAcb");

	Params::PlayAdxControl_RequestLoadAcb Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.PlayAdxControl.requestSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CueId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsForceChange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayAdxControl::RequestSound(int32 PlayerMajorID, int32 PlayerMinorID, int32 CueId, bool IsForceChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "requestSound");

	Params::PlayAdxControl_RequestSound Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;
	Parms.CueId = CueId;
	Parms.IsForceChange = IsForceChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundManager.PlayAdxControl.resetLoudness
// (Final, Native, Public, BlueprintCallable)

void UPlayAdxControl::ResetLoudness()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "resetLoudness");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SoundManager.PlayAdxControl.setPlayerAcbBank
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPlayerType                             Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   bankID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayAdxControl::SetPlayerAcbBank(int32 PlayerMajorID, int32 PlayerMinorID, EPlayerType Type, int32 bankID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "setPlayerAcbBank");

	Params::PlayAdxControl_SetPlayerAcbBank Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;
	Parms.Type = Type;
	Parms.bankID = bankID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundManager.PlayAdxControl.stopSound
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayAdxControl::StopSound(int32 PlayerMajorID, int32 PlayerMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "stopSound");

	Params::PlayAdxControl_StopSound Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundManager.PlayAdxControl.stopSound_IMD
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerMajorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerMinorID                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayAdxControl::StopSound_IMD(int32 PlayerMajorID, int32 PlayerMinorID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayAdxControl", "stopSound_IMD");

	Params::PlayAdxControl_StopSound_IMD Parms{};

	Parms.PlayerMajorID = PlayerMajorID;
	Parms.PlayerMinorID = PlayerMinorID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SoundManager.ACBLoadObject.OnLoadCompleted
// (Final, Native, Protected, BlueprintCallable)

void UACBLoadObject::OnLoadCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ACBLoadObject", "OnLoadCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SoundManager.ACBLoadObject.OnLoadFailed
// (Final, Native, Protected, BlueprintCallable)

void UACBLoadObject::OnLoadFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ACBLoadObject", "OnLoadFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SoundManager.SoundManagerReadyAsyncFunction.SoundManagerReadyAsyncFunction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPlayAdxControl*                  Control                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   bankID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundManagerReadyAsyncFunction*  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USoundManagerReadyAsyncFunction* USoundManagerReadyAsyncFunction::SoundManagerReadyAsyncFunction(class UObject* WorldContextObject, class UPlayAdxControl* Control, int32 bankID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SoundManagerReadyAsyncFunction", "SoundManagerReadyAsyncFunction");

	Params::SoundManagerReadyAsyncFunction_SoundManagerReadyAsyncFunction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Control = Control;
	Parms.bankID = bankID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SoundManager.SoundManagerGameInstanceSubSystem.GetPlayAdxControl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPlayAdxControl*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UPlayAdxControl* USoundManagerGameInstanceSubSystem::GetPlayAdxControl()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoundManagerGameInstanceSubSystem", "GetPlayAdxControl");

	Params::SoundManagerGameInstanceSubSystem_GetPlayAdxControl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

