#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SldAssetPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SldAssetPlugin.ESLDPartsTypes
// NumValues: 0x0005
enum class ESLDPartsTypes : uint8
{
	APP_SPRLAYOUT_PARTS_TYPE_NONE            = 0,
	APP_SPRLAYOUT_PARTS_TYPE_DUMMY           = 1,
	APP_SPRLAYOUT_PARTS_TYPE_PARTS           = 2,
	APP_SPRLAYOUT_PARTS_TYPE_RESOURCE        = 3,
	APP_SPRLAYOUT_PARTS_TYPE_MAX             = 4,
};

// Enum SldAssetPlugin.ESLDResTypes
// NumValues: 0x0004
enum class ESLDResTypes : uint8
{
	APP_SPRLAYOUT_RESOURCE_TYPE_NONE         = 0,
	APP_SPRLAYOUT_RESOURCE_TYPE_SPR          = 1,
	APP_SPRLAYOUT_RESOURCE_TYPE_TEXTURE      = 2,
	APP_SPRLAYOUT_RESOURCE_TYPE_MAX          = 3,
};

// ScriptStruct SldAssetPlugin.PVectore
// 0x0008 (0x0008 - 0x0000)
struct FPVectore final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPVectore) == 0x000004, "Wrong alignment on FPVectore");
static_assert(sizeof(FPVectore) == 0x000008, "Wrong size on FPVectore");
static_assert(offsetof(FPVectore, X) == 0x000000, "Member 'FPVectore::X' has a wrong offset!");
static_assert(offsetof(FPVectore, Y) == 0x000004, "Member 'FPVectore::Y' has a wrong offset!");

// ScriptStruct SldAssetPlugin.DrawebleUVPos
// 0x0010 (0x0010 - 0x0000)
struct FDrawebleUVPos final
{
public:
	float                                         U0;                                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         U1;                                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         V0;                                                // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         V1;                                                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDrawebleUVPos) == 0x000004, "Wrong alignment on FDrawebleUVPos");
static_assert(sizeof(FDrawebleUVPos) == 0x000010, "Wrong size on FDrawebleUVPos");
static_assert(offsetof(FDrawebleUVPos, U0) == 0x000000, "Member 'FDrawebleUVPos::U0' has a wrong offset!");
static_assert(offsetof(FDrawebleUVPos, U1) == 0x000004, "Member 'FDrawebleUVPos::U1' has a wrong offset!");
static_assert(offsetof(FDrawebleUVPos, V0) == 0x000008, "Member 'FDrawebleUVPos::V0' has a wrong offset!");
static_assert(offsetof(FDrawebleUVPos, V1) == 0x00000C, "Member 'FDrawebleUVPos::V1' has a wrong offset!");

// ScriptStruct SldAssetPlugin.DrawebleVertexPos
// 0x0020 (0x0020 - 0x0000)
struct FDrawebleVertexPos final
{
public:
	struct FPVectore                              V00;                                               // 0x0000(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPVectore                              V01;                                               // 0x0008(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPVectore                              V10;                                               // 0x0010(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FPVectore                              V11;                                               // 0x0018(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDrawebleVertexPos) == 0x000004, "Wrong alignment on FDrawebleVertexPos");
static_assert(sizeof(FDrawebleVertexPos) == 0x000020, "Wrong size on FDrawebleVertexPos");
static_assert(offsetof(FDrawebleVertexPos, V00) == 0x000000, "Member 'FDrawebleVertexPos::V00' has a wrong offset!");
static_assert(offsetof(FDrawebleVertexPos, V01) == 0x000008, "Member 'FDrawebleVertexPos::V01' has a wrong offset!");
static_assert(offsetof(FDrawebleVertexPos, V10) == 0x000010, "Member 'FDrawebleVertexPos::V10' has a wrong offset!");
static_assert(offsetof(FDrawebleVertexPos, V11) == 0x000018, "Member 'FDrawebleVertexPos::V11' has a wrong offset!");

// ScriptStruct SldAssetPlugin.SprLayoutDrawItem
// 0x00B0 (0x00B0 - 0x0000)
struct FSprLayoutDrawItem final
{
public:
	uint32                                        _uniqueID;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                _transform;                                        // 0x0010(0x0040)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FLinearColor                           _color;                                            // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPVectore                              _imageSize;                                        // 0x0060(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FDrawebleUVPos                         _uv;                                               // 0x0068(0x0010)(NoDestructor, NativeAccessSpecifierPrivate)
	struct FDrawebleVertexPos                     _vertexPos;                                        // 0x0078(0x0020)(NoDestructor, NativeAccessSpecifierPrivate)
	class UTexture*                               _texture;                                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector2D                              _offset;                                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSprLayoutDrawItem) == 0x000010, "Wrong alignment on FSprLayoutDrawItem");
static_assert(sizeof(FSprLayoutDrawItem) == 0x0000B0, "Wrong size on FSprLayoutDrawItem");
static_assert(offsetof(FSprLayoutDrawItem, _uniqueID) == 0x000000, "Member 'FSprLayoutDrawItem::_uniqueID' has a wrong offset!");
static_assert(offsetof(FSprLayoutDrawItem, _transform) == 0x000010, "Member 'FSprLayoutDrawItem::_transform' has a wrong offset!");
static_assert(offsetof(FSprLayoutDrawItem, _color) == 0x000050, "Member 'FSprLayoutDrawItem::_color' has a wrong offset!");
static_assert(offsetof(FSprLayoutDrawItem, _imageSize) == 0x000060, "Member 'FSprLayoutDrawItem::_imageSize' has a wrong offset!");
static_assert(offsetof(FSprLayoutDrawItem, _uv) == 0x000068, "Member 'FSprLayoutDrawItem::_uv' has a wrong offset!");
static_assert(offsetof(FSprLayoutDrawItem, _vertexPos) == 0x000078, "Member 'FSprLayoutDrawItem::_vertexPos' has a wrong offset!");
static_assert(offsetof(FSprLayoutDrawItem, _texture) == 0x000098, "Member 'FSprLayoutDrawItem::_texture' has a wrong offset!");
static_assert(offsetof(FSprLayoutDrawItem, _offset) == 0x0000A0, "Member 'FSprLayoutDrawItem::_offset' has a wrong offset!");

// ScriptStruct SldAssetPlugin.SprLayoutEditGroup
// 0x0018 (0x0018 - 0x0000)
struct FSprLayoutEditGroup final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSprLayoutDrawItem>             DrawItems;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSprLayoutEditGroup) == 0x000008, "Wrong alignment on FSprLayoutEditGroup");
static_assert(sizeof(FSprLayoutEditGroup) == 0x000018, "Wrong size on FSprLayoutEditGroup");
static_assert(offsetof(FSprLayoutEditGroup, Name) == 0x000000, "Member 'FSprLayoutEditGroup::Name' has a wrong offset!");
static_assert(offsetof(FSprLayoutEditGroup, DrawItems) == 0x000008, "Member 'FSprLayoutEditGroup::DrawItems' has a wrong offset!");

// ScriptStruct SldAssetPlugin.SprLayoutEditScene
// 0x0018 (0x0018 - 0x0000)
struct FSprLayoutEditScene final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSprLayoutEditGroup>            Groups;                                            // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSprLayoutEditScene) == 0x000008, "Wrong alignment on FSprLayoutEditScene");
static_assert(sizeof(FSprLayoutEditScene) == 0x000018, "Wrong size on FSprLayoutEditScene");
static_assert(offsetof(FSprLayoutEditScene, Name) == 0x000000, "Member 'FSprLayoutEditScene::Name' has a wrong offset!");
static_assert(offsetof(FSprLayoutEditScene, Groups) == 0x000008, "Member 'FSprLayoutEditScene::Groups' has a wrong offset!");

// ScriptStruct SldAssetPlugin.SprLayoutEditResources
// 0x0010 (0x0010 - 0x0000)
struct FSprLayoutEditResources final
{
public:
	ESLDResTypes                                  Type;                                              // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Resources;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSprLayoutEditResources) == 0x000008, "Wrong alignment on FSprLayoutEditResources");
static_assert(sizeof(FSprLayoutEditResources) == 0x000010, "Wrong size on FSprLayoutEditResources");
static_assert(offsetof(FSprLayoutEditResources, Type) == 0x000000, "Member 'FSprLayoutEditResources::Type' has a wrong offset!");
static_assert(offsetof(FSprLayoutEditResources, Resources) == 0x000008, "Member 'FSprLayoutEditResources::Resources' has a wrong offset!");

}

