#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OffscreenRendering

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class OffscreenRendering.PreviewWorldUpdater
// 0x0110 (0x0330 - 0x0220)
class APreviewWorldUpdater : public AActor
{
public:
	class UWorld*                                 PreviewWorld;                                      // 0x0220(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_228[0x10];                                     // 0x0228(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraPosition;                                    // 0x0238(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CameraOffset;                                      // 0x0244(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               CameraAngle;                                       // 0x0250(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CameraPosBoneName;                                 // 0x0260(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FOV;                                               // 0x0270(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsGazeMode;                                        // 0x0274(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_275[0x3];                                      // 0x0275(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PointOfGazeOffset;                                 // 0x0278(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_284[0x4];                                      // 0x0284(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GazeOffsetBoneName;                                // 0x0288(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_298[0x18];                                     // 0x0298(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CameraTransform;                                   // 0x02B0(0x0030)(Edit, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  TargetActor;                                       // 0x02E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ASceneCapture2D>         SceneCaptureActor;                                 // 0x02E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UNiagaraComponent*>              Niagaras;                                          // 0x02F0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UNiagaraComponent*                      OneShotEffect;                                     // 0x0300(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AActor>                     SpawnPendingActorClass;                            // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	FMulticastInlineDelegateProperty_             OnSetTargetActor;                                  // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	uint8                                         Pad_320[0x8];                                      // 0x0320(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsAntialias;                                      // 0x0328(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsTAA;                                            // 0x0329(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsToneCurves;                                     // 0x032A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsBloom;                                          // 0x032B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsMotionBlur;                                     // 0x032C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsExposure;                                       // 0x032D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_32E[0x2];                                      // 0x032E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cleanup();
	void OnSetTargetActor__DelegateSignature(class AActor* Actor);
	void SetCameraAngle(const struct FRotator& NewCameraAngle);
	void SetCameraPosBoneName(const class FString& NewCameraPosBoneName);
	void SetCameraPosition(const struct FVector& NewCameraPosition);
	void SetCameraTransform(const struct FTransform& NewCameraTransform);
	void SetFoV(float NewFOV);
	void SetGazeMode(bool NewGazeMode);
	void SetGazeOffset(const struct FVector& NewGazeOffset);
	void SetGazeOffsetBoneName(const class FString& NewGazeOffsetBoneName);
	class AActor* SetTargetActor(TSubclassOf<class AActor> ActorClass, bool IsResetCamera);
	class AActor* SpawnAttachedActor(TSubclassOf<class AActor> ActorClass);

	class UWorld* GetPreviewWorld() const;
	class ASceneCapture2D* GetSceneCaptureActor() const;
	class AActor* GetTargetActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PreviewWorldUpdater">();
	}
	static class APreviewWorldUpdater* GetDefaultObj()
	{
		return GetDefaultObjImpl<APreviewWorldUpdater>();
	}
};
static_assert(alignof(APreviewWorldUpdater) == 0x000010, "Wrong alignment on APreviewWorldUpdater");
static_assert(sizeof(APreviewWorldUpdater) == 0x000330, "Wrong size on APreviewWorldUpdater");
static_assert(offsetof(APreviewWorldUpdater, PreviewWorld) == 0x000220, "Member 'APreviewWorldUpdater::PreviewWorld' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, CameraPosition) == 0x000238, "Member 'APreviewWorldUpdater::CameraPosition' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, CameraOffset) == 0x000244, "Member 'APreviewWorldUpdater::CameraOffset' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, CameraAngle) == 0x000250, "Member 'APreviewWorldUpdater::CameraAngle' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, CameraPosBoneName) == 0x000260, "Member 'APreviewWorldUpdater::CameraPosBoneName' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, FOV) == 0x000270, "Member 'APreviewWorldUpdater::FOV' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, IsGazeMode) == 0x000274, "Member 'APreviewWorldUpdater::IsGazeMode' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, PointOfGazeOffset) == 0x000278, "Member 'APreviewWorldUpdater::PointOfGazeOffset' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, GazeOffsetBoneName) == 0x000288, "Member 'APreviewWorldUpdater::GazeOffsetBoneName' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, CameraTransform) == 0x0002B0, "Member 'APreviewWorldUpdater::CameraTransform' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, TargetActor) == 0x0002E0, "Member 'APreviewWorldUpdater::TargetActor' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, SceneCaptureActor) == 0x0002E8, "Member 'APreviewWorldUpdater::SceneCaptureActor' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, Niagaras) == 0x0002F0, "Member 'APreviewWorldUpdater::Niagaras' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, OneShotEffect) == 0x000300, "Member 'APreviewWorldUpdater::OneShotEffect' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, SpawnPendingActorClass) == 0x000308, "Member 'APreviewWorldUpdater::SpawnPendingActorClass' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, OnSetTargetActor) == 0x000310, "Member 'APreviewWorldUpdater::OnSetTargetActor' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, bIsAntialias) == 0x000328, "Member 'APreviewWorldUpdater::bIsAntialias' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, bIsTAA) == 0x000329, "Member 'APreviewWorldUpdater::bIsTAA' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, bIsToneCurves) == 0x00032A, "Member 'APreviewWorldUpdater::bIsToneCurves' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, bIsBloom) == 0x00032B, "Member 'APreviewWorldUpdater::bIsBloom' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, bIsMotionBlur) == 0x00032C, "Member 'APreviewWorldUpdater::bIsMotionBlur' has a wrong offset!");
static_assert(offsetof(APreviewWorldUpdater, bIsExposure) == 0x00032D, "Member 'APreviewWorldUpdater::bIsExposure' has a wrong offset!");

}

