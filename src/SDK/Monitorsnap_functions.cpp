#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Monitorsnap

#include "Basic.hpp"

#include "Monitorsnap_classes.hpp"
#include "Monitorsnap_parameters.hpp"


namespace SDK
{

// Function monitorsnap.MonitorBlueprintLibrary.ApplyMonitorSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FMonitorResolution               Resolution                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EWindowMode                             ScreenMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMonitorHandle                   Monitor                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bCheckForCommandLineOverrides                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMonitorBlueprintLibrary::ApplyMonitorSettings(const struct FMonitorResolution& Resolution, EWindowMode ScreenMode, const struct FMonitorHandle& Monitor, bool bCheckForCommandLineOverrides, float Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "ApplyMonitorSettings");

	Params::MonitorBlueprintLibrary_ApplyMonitorSettings Parms{};

	Parms.Resolution = std::move(Resolution);
	Parms.ScreenMode = ScreenMode;
	Parms.Monitor = std::move(Monitor);
	Parms.bCheckForCommandLineOverrides = bCheckForCommandLineOverrides;
	Parms.Duration = Duration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function monitorsnap.MonitorBlueprintLibrary.EqualEqual_MonitorHandleMonitorHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorHandle                   A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FMonitorHandle                   B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMonitorBlueprintLibrary::EqualEqual_MonitorHandleMonitorHandle(const struct FMonitorHandle& A, const struct FMonitorHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "EqualEqual_MonitorHandleMonitorHandle");

	Params::MonitorBlueprintLibrary_EqualEqual_MonitorHandleMonitorHandle Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.EqualEqual_MonitorResolutionMonitorResolution
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorResolution               Left                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FMonitorResolution               Right                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMonitorBlueprintLibrary::EqualEqual_MonitorResolutionMonitorResolution(const struct FMonitorResolution& Left, const struct FMonitorResolution& Right)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "EqualEqual_MonitorResolutionMonitorResolution");

	Params::MonitorBlueprintLibrary_EqualEqual_MonitorResolutionMonitorResolution Parms{};

	Parms.Left = std::move(Left);
	Parms.Right = std::move(Right);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.GetAvailableMonitors
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<struct FMonitorHandle>           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FMonitorHandle> UMonitorBlueprintLibrary::GetAvailableMonitors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "GetAvailableMonitors");

	Params::MonitorBlueprintLibrary_GetAvailableMonitors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.GetClosestEnclosingResolution
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorHandle                   MonitorHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FIntPoint                        DesiredSize                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FMonitorResolution               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMonitorResolution UMonitorBlueprintLibrary::GetClosestEnclosingResolution(const struct FMonitorHandle& MonitorHandle, const struct FIntPoint& DesiredSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "GetClosestEnclosingResolution");

	Params::MonitorBlueprintLibrary_GetClosestEnclosingResolution Parms{};

	Parms.MonitorHandle = std::move(MonitorHandle);
	Parms.DesiredSize = std::move(DesiredSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.GetCurrentMonitor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorHandle                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMonitorHandle UMonitorBlueprintLibrary::GetCurrentMonitor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "GetCurrentMonitor");

	Params::MonitorBlueprintLibrary_GetCurrentMonitor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.GetMonitorName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorHandle                   MonitorHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMonitorBlueprintLibrary::GetMonitorName(const struct FMonitorHandle& MonitorHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "GetMonitorName");

	Params::MonitorBlueprintLibrary_GetMonitorName Parms{};

	Parms.MonitorHandle = std::move(MonitorHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.GetMonitorPosition
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorHandle                   MonitorHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UMonitorBlueprintLibrary::GetMonitorPosition(const struct FMonitorHandle& MonitorHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "GetMonitorPosition");

	Params::MonitorBlueprintLibrary_GetMonitorPosition Parms{};

	Parms.MonitorHandle = std::move(MonitorHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.GetMonitorSize
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorHandle                   MonitorHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Width                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMonitorBlueprintLibrary::GetMonitorSize(const struct FMonitorHandle& MonitorHandle, int32* Width, int32* Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "GetMonitorSize");

	Params::MonitorBlueprintLibrary_GetMonitorSize Parms{};

	Parms.MonitorHandle = std::move(MonitorHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Width != nullptr)
		*Width = Parms.Width;

	if (Height != nullptr)
		*Height = Parms.Height;
}


// Function monitorsnap.MonitorBlueprintLibrary.GetPrimaryMonitor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorHandle                   ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FMonitorHandle UMonitorBlueprintLibrary::GetPrimaryMonitor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "GetPrimaryMonitor");

	Params::MonitorBlueprintLibrary_GetPrimaryMonitor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.GetRefreshRate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorResolution               Resolution                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMonitorBlueprintLibrary::GetRefreshRate(const struct FMonitorResolution& Resolution)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "GetRefreshRate");

	Params::MonitorBlueprintLibrary_GetRefreshRate Parms{};

	Parms.Resolution = std::move(Resolution);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.GetSupportedFullscreenResolutions
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorHandle                   MonitorHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FMonitorResolution>       OutResolutions                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMonitorBlueprintLibrary::GetSupportedFullscreenResolutions(const struct FMonitorHandle& MonitorHandle, TArray<struct FMonitorResolution>* OutResolutions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "GetSupportedFullscreenResolutions");

	Params::MonitorBlueprintLibrary_GetSupportedFullscreenResolutions Parms{};

	Parms.MonitorHandle = std::move(MonitorHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResolutions != nullptr)
		*OutResolutions = std::move(Parms.OutResolutions);

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.GetSupportedFullscreenResolutionsUniqueOnly
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorHandle                   MonitorHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TArray<struct FMonitorResolution>       OutResolutions                                         (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMonitorBlueprintLibrary::GetSupportedFullscreenResolutionsUniqueOnly(const struct FMonitorHandle& MonitorHandle, TArray<struct FMonitorResolution>* OutResolutions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "GetSupportedFullscreenResolutionsUniqueOnly");

	Params::MonitorBlueprintLibrary_GetSupportedFullscreenResolutionsUniqueOnly Parms{};

	Parms.MonitorHandle = std::move(MonitorHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResolutions != nullptr)
		*OutResolutions = std::move(Parms.OutResolutions);

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.IsSupportedFullscreen
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorHandle                   MonitorHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMonitorBlueprintLibrary::IsSupportedFullscreen(const struct FMonitorHandle& MonitorHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "IsSupportedFullscreen");

	Params::MonitorBlueprintLibrary_IsSupportedFullscreen Parms{};

	Parms.MonitorHandle = std::move(MonitorHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.IsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorHandle                   MonitorHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMonitorBlueprintLibrary::IsValid(const struct FMonitorHandle& MonitorHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "IsValid");

	Params::MonitorBlueprintLibrary_IsValid Parms{};

	Parms.MonitorHandle = std::move(MonitorHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function monitorsnap.MonitorBlueprintLibrary.NotEqual_MonitorHandleMonitorHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FMonitorHandle                   A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FMonitorHandle                   B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UMonitorBlueprintLibrary::NotEqual_MonitorHandleMonitorHandle(const struct FMonitorHandle& A, const struct FMonitorHandle& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MonitorBlueprintLibrary", "NotEqual_MonitorHandleMonitorHandle");

	Params::MonitorBlueprintLibrary_NotEqual_MonitorHandleMonitorHandle Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

