#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlGuiBaseActor

#include "Basic.hpp"

#include "Xrd777_structs.hpp"
#include "Xrd777_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlGuiBaseActor.BP_BtlGuiBaseActor_C
// 0x00D8 (0x0350 - 0x0278)
class ABP_BtlGuiBaseActor_C : public AAppActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          InVisible;                                         // 0x0288(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnEntryVisivle;                                    // 0x0290(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnEntryHidden;                                     // 0x02A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EBtlGuiState                                  State;                                             // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChangeState;                                     // 0x02B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnAlwaysVisible;                                   // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	FMulticastInlineDelegateProperty_             OnAlwaysHidden;                                    // 0x02D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsCallBeginPlay;                                   // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlGuiBaseActor_C*                  ParentActor;                                       // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   NameKey;                                           // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlGuiComponent_C*                  BtlGui;                                            // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsStateInit;                                       // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EBtlGuiState                                  MainState;                                         // 0x0309(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30A[0x6];                                      // 0x030A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           GuiBaseNameList;                                   // 0x0310(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_BtlGuiBaseActor_C*>          GuiBaseItemList;                                   // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          AlwaysUpdate;                                      // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnChangeStateParam;                                // 0x0338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	float                                         BindTimer;                                         // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BindFlag;                                          // 0x034C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnEntryVisivle__DelegateSignature();
	void OnEntryHidden__DelegateSignature();
	void OnChangeState__DelegateSignature();
	void OnAlwaysVisible__DelegateSignature();
	void OnAlwaysHidden__DelegateSignature();
	void OnChangeStateParam__DelegateSignature(bool Flag, int32 Number);
	void ExecuteUbergraph_BP_BtlGuiBaseActor(int32 EntryPoint);
	void GUIBindActionWrap();
	void ReceiveDestroyed();
	void GuiActorEncountEnd();
	void GuiActorEncountStart();
	void GuiActorUnbindAction();
	void GuiActorBindAction();
	void GuiActorBeginDestroy();
	void GuiActorStateExit();
	void GuiActorStateInit(bool Flag, int32 Param);
	void GuiActorBeginPlay();
	void GuiActorUpdate(float DeltaTime);
	void AttachChild(class UClass* Child, class FName Name_0, class ABP_BtlGuiBaseActor_C** Object, bool* Sucsess);
	void SetVisible(bool IsVisible);
	void FindGuiActorByName(class FName Name_0, class ABP_BtlGuiBaseActor_C** GuiActor, bool* Sucsess);
	void UpdateAll(float DeltaTime);
	void DrawAllItem();
	void RemoveActor();
	void Set_Personal_State(EBtlGuiState State_0);
	void BeginPlayAll();
	void IsReadyAll(bool* Conpleted);
	void SetAlwaysUpdate(bool AlwaysUpdate_0);
	void ChangeState(EBtlGuiState State_0, bool Flag, int32 Number);
	void SetBindTimer(float BindTimer_0);
	void CoreSetRetry(class UBP_BtlGuiComponent_C* BtlGui_0);
	void BeginPlayOnlyAll();
	void RemoveDrawAllItem();
	void RemoveActorsByKey(class FName Key);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlGuiBaseActor_C">();
	}
	static class ABP_BtlGuiBaseActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlGuiBaseActor_C>();
	}
};
static_assert(alignof(ABP_BtlGuiBaseActor_C) == 0x000008, "Wrong alignment on ABP_BtlGuiBaseActor_C");
static_assert(sizeof(ABP_BtlGuiBaseActor_C) == 0x000350, "Wrong size on ABP_BtlGuiBaseActor_C");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, UberGraphFrame) == 0x000278, "Member 'ABP_BtlGuiBaseActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, DefaultSceneRoot) == 0x000280, "Member 'ABP_BtlGuiBaseActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, InVisible) == 0x000288, "Member 'ABP_BtlGuiBaseActor_C::InVisible' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, OnEntryVisivle) == 0x000290, "Member 'ABP_BtlGuiBaseActor_C::OnEntryVisivle' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, OnEntryHidden) == 0x0002A0, "Member 'ABP_BtlGuiBaseActor_C::OnEntryHidden' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, State) == 0x0002B0, "Member 'ABP_BtlGuiBaseActor_C::State' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, OnChangeState) == 0x0002B8, "Member 'ABP_BtlGuiBaseActor_C::OnChangeState' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, OnAlwaysVisible) == 0x0002C8, "Member 'ABP_BtlGuiBaseActor_C::OnAlwaysVisible' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, OnAlwaysHidden) == 0x0002D8, "Member 'ABP_BtlGuiBaseActor_C::OnAlwaysHidden' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, IsCallBeginPlay) == 0x0002E8, "Member 'ABP_BtlGuiBaseActor_C::IsCallBeginPlay' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, ParentActor) == 0x0002F0, "Member 'ABP_BtlGuiBaseActor_C::ParentActor' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, NameKey) == 0x0002F8, "Member 'ABP_BtlGuiBaseActor_C::NameKey' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, BtlGui) == 0x000300, "Member 'ABP_BtlGuiBaseActor_C::BtlGui' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, IsStateInit) == 0x000308, "Member 'ABP_BtlGuiBaseActor_C::IsStateInit' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, MainState) == 0x000309, "Member 'ABP_BtlGuiBaseActor_C::MainState' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, GuiBaseNameList) == 0x000310, "Member 'ABP_BtlGuiBaseActor_C::GuiBaseNameList' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, GuiBaseItemList) == 0x000320, "Member 'ABP_BtlGuiBaseActor_C::GuiBaseItemList' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, AlwaysUpdate) == 0x000330, "Member 'ABP_BtlGuiBaseActor_C::AlwaysUpdate' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, OnChangeStateParam) == 0x000338, "Member 'ABP_BtlGuiBaseActor_C::OnChangeStateParam' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, BindTimer) == 0x000348, "Member 'ABP_BtlGuiBaseActor_C::BindTimer' has a wrong offset!");
static_assert(offsetof(ABP_BtlGuiBaseActor_C, BindFlag) == 0x00034C, "Member 'ABP_BtlGuiBaseActor_C::BindFlag' has a wrong offset!");

}

