#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlUIColorModel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Xrd777_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlUIColorModel.BP_BtlUIColorModel_C
// 0x0060 (0x0280 - 0x0220)
class ABP_BtlUIColorModel_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   ChildActorGun;                                     // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_AppCharacter_C*                     AppCharacter;                                      // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_AppKoromaru_C*                      AppKoromaru;                                       // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsKoromaru;                                        // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	EAppCharWeaponType                            WeaponType;                                        // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A[0x6];                                      // 0x024A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 CharacterReference;                                // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          LoadCompleted;                                     // 0x0258(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       MaterialList;                                      // 0x0260(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                PosOffset;                                         // 0x0270(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCharacterVisible;                                // 0x027C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseGun;                                            // 0x027D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_BtlUIColorModel(int32 EntryPoint);
	void ReceiveDestroyed();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void SetWeaponVisible(bool Visible);
	void SetGunVisible(bool Visible);
	void SetEquipVisibility(bool WeaponVisible, bool GunVisible);
	void CheckSetupCompleted(bool* COMPLETE);
	void GetShowActorList(TArray<class AActor*>* List);
	void SetColorModel(const struct FLinearColor& ColorA, const struct FLinearColor& ColorB);
	void SetCharacterVisible(bool Visible);
	void SetColorModelGun(const struct FLinearColor& ColorA, const struct FLinearColor& ColorB);
	void SetTheurgiaGun(bool IsTheurgiaGun);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlUIColorModel_C">();
	}
	static class ABP_BtlUIColorModel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlUIColorModel_C>();
	}
};
static_assert(alignof(ABP_BtlUIColorModel_C) == 0x000008, "Wrong alignment on ABP_BtlUIColorModel_C");
static_assert(sizeof(ABP_BtlUIColorModel_C) == 0x000280, "Wrong size on ABP_BtlUIColorModel_C");
static_assert(offsetof(ABP_BtlUIColorModel_C, UberGraphFrame) == 0x000220, "Member 'ABP_BtlUIColorModel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlUIColorModel_C, ChildActorGun) == 0x000228, "Member 'ABP_BtlUIColorModel_C::ChildActorGun' has a wrong offset!");
static_assert(offsetof(ABP_BtlUIColorModel_C, DefaultSceneRoot) == 0x000230, "Member 'ABP_BtlUIColorModel_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BtlUIColorModel_C, AppCharacter) == 0x000238, "Member 'ABP_BtlUIColorModel_C::AppCharacter' has a wrong offset!");
static_assert(offsetof(ABP_BtlUIColorModel_C, AppKoromaru) == 0x000240, "Member 'ABP_BtlUIColorModel_C::AppKoromaru' has a wrong offset!");
static_assert(offsetof(ABP_BtlUIColorModel_C, IsKoromaru) == 0x000248, "Member 'ABP_BtlUIColorModel_C::IsKoromaru' has a wrong offset!");
static_assert(offsetof(ABP_BtlUIColorModel_C, WeaponType) == 0x000249, "Member 'ABP_BtlUIColorModel_C::WeaponType' has a wrong offset!");
static_assert(offsetof(ABP_BtlUIColorModel_C, CharacterReference) == 0x000250, "Member 'ABP_BtlUIColorModel_C::CharacterReference' has a wrong offset!");
static_assert(offsetof(ABP_BtlUIColorModel_C, LoadCompleted) == 0x000258, "Member 'ABP_BtlUIColorModel_C::LoadCompleted' has a wrong offset!");
static_assert(offsetof(ABP_BtlUIColorModel_C, MaterialList) == 0x000260, "Member 'ABP_BtlUIColorModel_C::MaterialList' has a wrong offset!");
static_assert(offsetof(ABP_BtlUIColorModel_C, PosOffset) == 0x000270, "Member 'ABP_BtlUIColorModel_C::PosOffset' has a wrong offset!");
static_assert(offsetof(ABP_BtlUIColorModel_C, IsCharacterVisible) == 0x00027C, "Member 'ABP_BtlUIColorModel_C::IsCharacterVisible' has a wrong offset!");
static_assert(offsetof(ABP_BtlUIColorModel_C, UseGun) == 0x00027D, "Member 'ABP_BtlUIColorModel_C::UseGun' has a wrong offset!");

}

