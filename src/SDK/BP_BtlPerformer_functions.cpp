#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlPerformer

#include "Basic.hpp"

#include "BP_BtlPerformer_classes.hpp"
#include "BP_BtlPerformer_parameters.hpp"


namespace SDK
{

// Function BP_BtlPerformer.BP_BtlPerformer_C.ExecuteUbergraph_BP_BtlPerformer
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::ExecuteUbergraph_BP_BtlPerformer(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "ExecuteUbergraph_BP_BtlPerformer");

	Params::BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Elizabeth Animation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EBtlAnimationType                       AnimId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NotPlayFaceAnim                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Elizabeth_Animation(EBtlAnimationType AnimId, bool NotPlayFaceAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Elizabeth Animation");

	Params::BP_BtlPerformer_C_BCD_Elizabeth_Animation Parms{};

	Parms.AnimId = AnimId;
	Parms.NotPlayFaceAnim = NotPlayFaceAnim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Elizabeth Animation With Blend
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EBtlAnimationType                       Anim_ID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Blend                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NotPlayFaceAnim                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Elizabeth_Animation_With_Blend(EBtlAnimationType Anim_ID, float Blend, bool NotPlayFaceAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Elizabeth Animation With Blend");

	Params::BP_BtlPerformer_C_BCD_Elizabeth_Animation_With_Blend Parms{};

	Parms.Anim_ID = Anim_ID;
	Parms.Blend = Blend;
	Parms.NotPlayFaceAnim = NotPlayFaceAnim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Restore All Chara Point Lights
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPerformer_C::BCD_Restore_All_Chara_Point_Lights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Restore All Chara Point Lights");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Collect All Chara Point Lights
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPerformer_C::BCD_Collect_All_Chara_Point_Lights()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Collect All Chara Point Lights");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Disable Face Anim Update With Body
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Disable                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Disable_Face_Anim_Update_With_Body(bool Disable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Disable Face Anim Update With Body");

	Params::BP_BtlPerformer_C_BCD_Disable_Face_Anim_Update_With_Body Parms{};

	Parms.Disable = Disable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Assign Attach Point 
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             Socket_Name                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_Assign_Attach_Point_(class FName Socket_Name)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Assign Attach Point ");

	Params::BP_BtlPerformer_C_BCD_Assign_Attach_Point_ Parms{};

	Parms.Socket_Name = Socket_Name;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Face Anim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EAppCharFaceAnimID                      Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendIn                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendOut                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForceNoBlink                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Chara_Face_Anim(EAppCharFaceAnimID Type, float BlendIn, float BlendOut, bool ForceNoBlink)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Chara Face Anim");

	Params::BP_BtlPerformer_C_BCD_Chara_Face_Anim Parms{};

	Parms.Type = Type;
	Parms.BlendIn = BlendIn;
	Parms.BlendOut = BlendOut;
	Parms.ForceNoBlink = ForceNoBlink;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Scene Animation Blend
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EBtlSceneAnimationType                  Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   BlendTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreElizabeth                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    WithForceUpdate                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Chara_Scene_Animation_Blend(EBtlSceneAnimationType Type, float BlendTime, bool IgnoreElizabeth, bool WithForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Chara Scene Animation Blend");

	Params::BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend Parms{};

	Parms.Type = Type;
	Parms.BlendTime = BlendTime;
	Parms.IgnoreElizabeth = IgnoreElizabeth;
	Parms.WithForceUpdate = WithForceUpdate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Set HomePosition
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPerformer_C::BCD_Set_HomePosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Set HomePosition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Animation With Next
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EBtlAnimationType                       Anim_ID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBtlAnimationType                       Anim_ID_Next                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_Chara_Animation_With_Next(EBtlAnimationType Anim_ID, EBtlAnimationType Anim_ID_Next)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Chara Animation With Next");

	Params::BP_BtlPerformer_C_BCD_Chara_Animation_With_Next Parms{};

	Parms.Anim_ID = Anim_ID;
	Parms.Anim_ID_Next = Anim_ID_Next;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Weapon Anim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimSequenceBase*                Anim_Sequence                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_Chara_Weapon_Anim(class UAnimSequenceBase* Anim_Sequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Chara Weapon Anim");

	Params::BP_BtlPerformer_C_BCD_Chara_Weapon_Anim Parms{};

	Parms.Anim_Sequence = Anim_Sequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Gun Visible
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Chara_Gun_Visible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Chara Gun Visible");

	Params::BP_BtlPerformer_C_BCD_Chara_Gun_Visible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Weapon Visible
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Chara_Weapon_Visible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Chara Weapon Visible");

	Params::BP_BtlPerformer_C_BCD_Chara_Weapon_Visible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Animation With Blend
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EBtlAnimationType                       Anim_ID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Blend                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NotPlayFaceAnim                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Chara_Animation_With_Blend(EBtlAnimationType Anim_ID, float Blend, bool NotPlayFaceAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Chara Animation With Blend");

	Params::BP_BtlPerformer_C_BCD_Chara_Animation_With_Blend Parms{};

	Parms.Anim_ID = Anim_ID;
	Parms.Blend = Blend;
	Parms.NotPlayFaceAnim = NotPlayFaceAnim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Set Visible
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    ExceptPersona                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool                                    KeepAnimation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Chara_Set_Visible(bool Visible, bool ExceptPersona, bool KeepAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Chara Set Visible");

	Params::BP_BtlPerformer_C_BCD_Chara_Set_Visible Parms{};

	Parms.Visible = Visible;
	Parms.ExceptPersona = ExceptPersona;
	Parms.KeepAnimation = KeepAnimation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Bind To Mannequin
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Bind                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Bind_To_Mannequin(bool Bind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Bind To Mannequin");

	Params::BP_BtlPerformer_C_BCD_Bind_To_Mannequin Parms{};

	Parms.Bind = Bind;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Set Pos
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Trans                                                  (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Chara_Set_Pos(const struct FTransform& Trans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Chara Set Pos");

	Params::BP_BtlPerformer_C_BCD_Chara_Set_Pos Parms{};

	Parms.Trans = std::move(Trans);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Scene Animation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EBtlSceneAnimationType                  AnimId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBtlSceneAnimationType                  AnimID_Next                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreElizabeth                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Chara_Scene_Animation(EBtlSceneAnimationType AnimId, EBtlSceneAnimationType AnimID_Next, bool IgnoreElizabeth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Chara Scene Animation");

	Params::BP_BtlPerformer_C_BCD_Chara_Scene_Animation Parms{};

	Parms.AnimId = AnimId;
	Parms.AnimID_Next = AnimID_Next;
	Parms.IgnoreElizabeth = IgnoreElizabeth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Animation
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EBtlAnimationType                       AnimId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NotPlayFaceAnim                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::BCD_Chara_Animation(EBtlAnimationType AnimId, bool NotPlayFaceAnim)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Chara Animation");

	Params::BP_BtlPerformer_C_BCD_Chara_Animation Parms{};

	Parms.AnimId = AnimId;
	Parms.NotPlayFaceAnim = NotPlayFaceAnim;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "ReceiveTick");

	Params::BP_BtlPerformer_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Camera cylinder
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Interp_Time                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Radius                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Height_Ratio                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rotate_Degree                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBtlEventAreaType                       TargetType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_Camera_cylinder(float Interp_Time, float Radius, float Height_Ratio, float Rotate_Degree, EBtlEventAreaType TargetType, class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Camera cylinder");

	Params::BP_BtlPerformer_C_BCD_Camera_cylinder Parms{};

	Parms.Interp_Time = Interp_Time;
	Parms.Radius = Radius;
	Parms.Height_Ratio = Height_Ratio;
	Parms.Rotate_Degree = Rotate_Degree;
	Parms.TargetType = TargetType;
	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Affect Recovery
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   HpRatio                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_Affect_Recovery(float HpRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Affect Recovery");

	Params::BP_BtlPerformer_C_BCD_Affect_Recovery Parms{};

	Parms.HpRatio = HpRatio;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Affect All Damage
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPerformer_C::BCD_Affect_All_Damage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Affect All Damage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Affect Divided Damage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DamagePercent                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_Affect_Divided_Damage(int32 DamagePercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Affect Divided Damage");

	Params::BP_BtlPerformer_C_BCD_Affect_Divided_Damage Parms{};

	Parms.DamagePercent = DamagePercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD NyxAvatar Fadeout Weapon Effect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_NyxAvatar_Fadeout_Weapon_Effect(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD NyxAvatar Fadeout Weapon Effect");

	Params::BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Weapon_Effect Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD NyxAvatar Fadeout Feather Effect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_NyxAvatar_Fadeout_Feather_Effect(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD NyxAvatar Fadeout Feather Effect");

	Params::BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Feather_Effect Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Jin FadeOut Drug Loop Effect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_Jin_FadeOut_Drug_Loop_Effect(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Jin FadeOut Drug Loop Effect");

	Params::BP_BtlPerformer_C_BCD_Jin_FadeOut_Drug_Loop_Effect Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD HangedMan FadeOut Floating Effect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_HangedMan_FadeOut_Floating_Effect(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD HangedMan FadeOut Floating Effect");

	Params::BP_BtlPerformer_C_BCD_HangedMan_FadeOut_Floating_Effect Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD HangedMan FadeIn Floating Effect
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_HangedMan_FadeIn_Floating_Effect(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD HangedMan FadeIn Floating Effect");

	Params::BP_BtlPerformer_C_BCD_HangedMan_FadeIn_Floating_Effect Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD NyxCore Request Hero Attack Sequence
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPerformer_C::BCD_NyxCore_Request_Hero_Attack_Sequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD NyxCore Request Hero Attack Sequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Strength Flower Fadeout
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_Strength_Flower_Fadeout(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Strength Flower Fadeout");

	Params::BP_BtlPerformer_C_BCD_Strength_Flower_Fadeout Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Fortune Fadeout
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_Fortune_Fadeout(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Fortune Fadeout");

	Params::BP_BtlPerformer_C_BCD_Fortune_Fadeout Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Fortune Fadein
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_Fortune_Fadein(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Fortune Fadein");

	Params::BP_BtlPerformer_C_BCD_Fortune_Fadein Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Fortune Fadeout Flower Loop
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_Fortune_Fadeout_Flower_Loop(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Fortune Fadeout Flower Loop");

	Params::BP_BtlPerformer_C_BCD_Fortune_Fadeout_Flower_Loop Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Fortune Fadein Flower Loop
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_Fortune_Fadein_Flower_Loop(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Fortune Fadein Flower Loop");

	Params::BP_BtlPerformer_C_BCD_Fortune_Fadein_Flower_Loop Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD NyxAvatar Play Feater Anim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AnimTime                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::BCD_NyxAvatar_Play_Feater_Anim(float AnimTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD NyxAvatar Play Feater Anim");

	Params::BP_BtlPerformer_C_BCD_NyxAvatar_Play_Feater_Anim Parms{};

	Parms.AnimTime = AnimTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Hide Hermit Charge Visible
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPerformer_C::BCD_Hide_Hermit_Charge_Visible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Hide Hermit Charge Visible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Play Dead Voice
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlPerformer_C::BCD_Play_Dead_Voice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "BCD Play Dead Voice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.SetupPerformer
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::SetupPerformer(class ABP_BtlCharacterBase_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "SetupPerformer");

	Params::BP_BtlPerformer_C_SetupPerformer Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.GetCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_BtlCharacterBase_C*           Character                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::GetCharacter(class ABP_BtlCharacterBase_C** Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "GetCharacter");

	Params::BP_BtlPerformer_C_GetCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Character != nullptr)
		*Character = Parms.Character;
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.SetCharacter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::SetCharacter(class ABP_BtlCharacterBase_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "SetCharacter");

	Params::BP_BtlPerformer_C_SetCharacter Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.GetPerformerTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Transform                                              (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::GetPerformerTransform(struct FTransform* Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "GetPerformerTransform");

	Params::BP_BtlPerformer_C_GetPerformerTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Transform != nullptr)
		*Transform = std::move(Parms.Transform);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.FinalizePerformer
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlPerformer_C::FinalizePerformer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "FinalizePerformer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.CalcCylinderLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Radius_Ratio                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Height_Ratio                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Rotate_Degree                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseCommonCylinder                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FVector                          Return_Value                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::CalcCylinderLocation(float Radius_Ratio, float Height_Ratio, float Rotate_Degree, bool UseCommonCylinder, struct FVector* Return_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "CalcCylinderLocation");

	Params::BP_BtlPerformer_C_CalcCylinderLocation Parms{};

	Parms.Radius_Ratio = Radius_Ratio;
	Parms.Height_Ratio = Height_Ratio;
	Parms.Rotate_Degree = Rotate_Degree;
	Parms.UseCommonCylinder = UseCommonCylinder;

	UObject::ProcessEvent(Func, &Parms);

	if (Return_Value != nullptr)
		*Return_Value = std::move(Parms.Return_Value);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.CalcLookAtRotate
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       Camera                                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FTransform                       Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// struct FRotator                         Rotator                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::CalcLookAtRotate(const struct FTransform& Camera, const struct FTransform& Target, struct FRotator* Rotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "CalcLookAtRotate");

	Params::BP_BtlPerformer_C_CalcLookAtRotate Parms{};

	Parms.Camera = std::move(Camera);
	Parms.Target = std::move(Target);

	UObject::ProcessEvent(Func, &Parms);

	if (Rotator != nullptr)
		*Rotator = std::move(Parms.Rotator);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.SyncLocation
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlPerformer_C::SyncLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "SyncLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.GetSocketTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       OwnerTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// bool                                    UseCommonCylinder                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       Output                                                 (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::GetSocketTransform(class FName SocketName, const struct FTransform& OwnerTransform, bool UseCommonCylinder, struct FTransform* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "GetSocketTransform");

	Params::BP_BtlPerformer_C_GetSocketTransform Parms{};

	Parms.SocketName = SocketName;
	Parms.OwnerTransform = std::move(OwnerTransform);
	Parms.UseCommonCylinder = UseCommonCylinder;

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.GetCylinderHight
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Rato                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UseCommonCylinder                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// struct FTransform                       Output                                                 (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::GetCylinderHight(float Rato, bool UseCommonCylinder, struct FTransform* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "GetCylinderHight");

	Params::BP_BtlPerformer_C_GetCylinderHight Parms{};

	Parms.Rato = Rato;
	Parms.UseCommonCylinder = UseCommonCylinder;

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.Clear
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BtlPerformer_C::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "Clear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.UpdateEachTick
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlPerformer_C::UpdateEachTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "UpdateEachTick");

	Params::BP_BtlPerformer_C_UpdateEachTick Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlPerformer.BP_BtlPerformer_C.IsEnemyTeammates
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlPerformer_C::IsEnemyTeammates(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlPerformer_C", "IsEnemyTeammates");

	Params::BP_BtlPerformer_C_IsEnemyTeammates Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}

}

