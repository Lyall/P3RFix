#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AnimalBase

#include "Basic.hpp"

#include "ALS_MovementAction_structs.hpp"
#include "Engine_structs.hpp"
#include "ALS_OverlayState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_CharacterBase_classes.hpp"
#include "ALS_Gait_structs.hpp"
#include "ALS_MovementState_structs.hpp"
#include "ALS_RotationMode_structs.hpp"
#include "ALS_ViewMode_structs.hpp"
#include "ALS_Stance_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AnimalBase.BP_AnimalBase_C
// 0x0050 (0x0660 - 0x0610)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_AnimalBase_C : public ABP_CharacterBase_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_AnimalBase_C;                    // 0x0610(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 FaceMesh;                                          // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 CostumeMesh;                                       // 0x0620(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Acceleration;                                      // 0x0628(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousVelocity;                                  // 0x0634(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreviousAimYaw;                                    // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMoving;                                          // 0x0644(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_645[0x3];                                      // 0x0645(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimYawRate;                                        // 0x064C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementInputAmount;                               // 0x0650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasMovementInput;                                  // 0x0654(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_AnimalBase(int32 EntryPoint);
	void ReceiveTick(float DeltaSeconds);
	void BPI_Set_OverlayState(EALS_OverlayState NewOverlayState);
	void BPI_Set_ViewMode(EALS_ViewMode NewViewMode);
	void BPI_Set_Gait(EALS_Gait NewGait);
	void BPI_Set_RotationMode(EALS_RotationMode NewRotationMode);
	void BPI_Set_MovementAction(EALS_MovementAction NewMovementAction);
	void BPI_Set_MovementState(EALS_MovementState NewMovementState);
	void UserConstructionScript();
	void Set_Essential_Values();
	struct FVector Calculate_Acceleration();
	void Cache_Values();
	void BPI_Get_EssentialValues(struct FVector* Velocity, struct FVector* Acceleration_0, struct FVector* MovementInput, bool* IsMoving_0, bool* HasMovementInput_0, float* Speed_0, float* MovementInputAmount_0, struct FRotator* AimingRotation, float* AimYawRate_0);
	void BPI_Get_CurrentStates(EMovementMode* PawnMovementMode, EALS_MovementState* MovementState, EALS_MovementState* PrevMovementState, EALS_MovementAction* MovementAction, EALS_RotationMode* RotationMode, EALS_Gait* ActualGait, EALS_Stance* ActualStance, EALS_ViewMode* ViewMode, EALS_OverlayState* OverlayState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AnimalBase_C">();
	}
	static class ABP_AnimalBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AnimalBase_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_AnimalBase_C) == 0x000010, "Wrong alignment on ABP_AnimalBase_C");
static_assert(sizeof(ABP_AnimalBase_C) == 0x000660, "Wrong size on ABP_AnimalBase_C");
static_assert(offsetof(ABP_AnimalBase_C, UberGraphFrame_BP_AnimalBase_C) == 0x000610, "Member 'ABP_AnimalBase_C::UberGraphFrame_BP_AnimalBase_C' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBase_C, FaceMesh) == 0x000618, "Member 'ABP_AnimalBase_C::FaceMesh' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBase_C, CostumeMesh) == 0x000620, "Member 'ABP_AnimalBase_C::CostumeMesh' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBase_C, Acceleration) == 0x000628, "Member 'ABP_AnimalBase_C::Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBase_C, PreviousVelocity) == 0x000634, "Member 'ABP_AnimalBase_C::PreviousVelocity' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBase_C, PreviousAimYaw) == 0x000640, "Member 'ABP_AnimalBase_C::PreviousAimYaw' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBase_C, IsMoving) == 0x000644, "Member 'ABP_AnimalBase_C::IsMoving' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBase_C, Speed) == 0x000648, "Member 'ABP_AnimalBase_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBase_C, AimYawRate) == 0x00064C, "Member 'ABP_AnimalBase_C::AimYawRate' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBase_C, MovementInputAmount) == 0x000650, "Member 'ABP_AnimalBase_C::MovementInputAmount' has a wrong offset!");
static_assert(offsetof(ABP_AnimalBase_C, HasMovementInput) == 0x000654, "Member 'ABP_AnimalBase_C::HasMovementInput' has a wrong offset!");

}

