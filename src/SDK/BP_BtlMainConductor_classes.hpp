#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlMainConductor

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Xrd777_structs.hpp"
#include "Xrd777_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlMainConductor.BP_BtlMainConductor_C
// 0x00F0 (0x0368 - 0x0278)
class ABP_BtlMainConductor_C final : public AAppActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0278(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_BtlTargetManager_C*                 BP_BtlTargetManager;                               // 0x0280(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlCoreComponent_C*                 BP_BtlCoreComponent;                               // 0x0288(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlCameraCalc_C*                    BP_BtlCameraCalc;                                  // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlUICameraComponent_C*             BtlUICamera;                                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlEnvironment_C*                   BP_BtlEnvironment;                                 // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlResidentDataComp_C*              BP_BtlResidentDataComp;                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlActionManager_C*                 BP_BtlActionManager;                               // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlEvent_C*                         BtlEvent;                                          // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlInputComponent*                     BtlInput;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlCameraManagerComponent_C*        BtlCameraManager;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BtlGuiComponent_C*                  BtlGui;                                            // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlAIManagerComponent*                 BtlAIManager;                                      // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FBtlEncountParam                       Encount_Parameter;                                 // 0x02E8(0x0024)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             On_Finish_Battle;                                  // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class FName>                           UsingLevelNames;                                   // 0x0320(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         LoadingIndex;                                      // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadedPerformer;                                   // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          LoadedLevels;                                      // 0x0335(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          CheckCharacterReady;                               // 0x0336(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NotReadyCharacter;                                 // 0x0337(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class ABP_BtlPhaseFighting_C*                 BtlFIghting;                                       // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LoadFinshedCount;                                  // 0x0340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadedStuff;                                       // 0x0344(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsSerialEncount;                                   // 0x0345(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_346[0x2];                                      // 0x0346(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             On_Finish_Load_For_Serial_Encount;                 // 0x0348(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_BtlSpawnedActorParent_C*            SpawnedActorParent;                                // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LoadedCount;                                       // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoadedEnemy;                                       // 0x0364(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StartedLoadingAlongWithBattleStart;                // 0x0365(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsRequestedBGM;                                    // 0x0366(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void On_Finish_Battle__DelegateSignature();
	void On_Finish_Load_For_Serial_Encount__DelegateSignature();
	void ExecuteUbergraph_BP_BtlMainConductor(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Sync_Encount_Event_Camera();
	void Has_Finished_Encount_Event();
	void On_Finish_Unloading_Levels();
	void On_Debug_Kill();
	void On_Initialize_Battle();
	void On_Exit_Battle();
	void On_Encount(const struct FBtlEncountParam& Encount_Param);
	void On_Destroy_Battle_();
	void On_Unload_Levels();
	void On_Load_Levels();
	void Has_Finished_Load_Enemy_For_Quick_Enc_Mode();
	void On_Finish_Enemy_Load();
	void Has_Finished_All_Loading_Events();
	void On_Start_Loading_GUI_Models();
	void On_Start_Battle_From_Serial_Encount();
	void On_Finished_Stuff_Load();
	void On_Finish_Loading_Levels();
	void ReceiveTick(float DeltaSeconds);
	void On_Finish_Data_Load();
	void On_Load();
	void On_Load_Residential_Data();
	void On_Retry_Battle();
	void HasFinishedWipe();
	void On_Start_Turn_Battle();
	void Has_Finished_Serial_Encount_Enemy();
	void On_Load_Serial_Encount();
	void MarkAsBtlCoreIsReady();
	void GetBtlCore(class UBP_BtlCoreComponent_C** BtlCore);
	void GetTargetsManager(class UBP_BtlTargetManager_C** TargetsManager);
	void GetMainAction(class ABP_BtlCharacterBase_C** Btl_Character_Base);
	void Setup_Battle_Camera();
	void Setup_Battle_Event();
	void GetEventControl(class ABP_BtlEventAssistant_C** Event_Assistant);
	void GetHero(class ABP_BtlCharacterBase_C** HERO);
	void SetAllCharacterVisible(bool Visible, bool NotAffectGuest);
	void Event_Encount_();
	void SetBGLevelReference();
	void Setup_Battle_Stuff();
	void EliminateAllEnemies();
	void MakeLoadLevelName();
	void AttachEnemiesToAnchor();
	void WaitAllCharacter();
	void SetupBattle();
	void CheckReadyPerformerData(bool* Ready);
	void AttachPlayersToAnchor();
	void RestoreEnvironment();
	void SetFormationData();
	void Start_Loading_Along_With_Battle_Start();
	void SetupBtlCoreToAllChara();
	void RequestFightingBGM();
	void SetBattleCameraToViewTarget();
	void SetBattleCompToBtlCore();
	class FString GetLevelPath(const class FString& Major, const class FString& Minor);
	class FString GetEnvLevelPath(const class FString& Major, const class FString& Minor);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlMainConductor_C">();
	}
	static class ABP_BtlMainConductor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlMainConductor_C>();
	}
};
static_assert(alignof(ABP_BtlMainConductor_C) == 0x000008, "Wrong alignment on ABP_BtlMainConductor_C");
static_assert(sizeof(ABP_BtlMainConductor_C) == 0x000368, "Wrong size on ABP_BtlMainConductor_C");
static_assert(offsetof(ABP_BtlMainConductor_C, UberGraphFrame) == 0x000278, "Member 'ABP_BtlMainConductor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BP_BtlTargetManager) == 0x000280, "Member 'ABP_BtlMainConductor_C::BP_BtlTargetManager' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BP_BtlCoreComponent) == 0x000288, "Member 'ABP_BtlMainConductor_C::BP_BtlCoreComponent' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BP_BtlCameraCalc) == 0x000290, "Member 'ABP_BtlMainConductor_C::BP_BtlCameraCalc' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BtlUICamera) == 0x000298, "Member 'ABP_BtlMainConductor_C::BtlUICamera' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BP_BtlEnvironment) == 0x0002A0, "Member 'ABP_BtlMainConductor_C::BP_BtlEnvironment' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BP_BtlResidentDataComp) == 0x0002A8, "Member 'ABP_BtlMainConductor_C::BP_BtlResidentDataComp' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BP_BtlActionManager) == 0x0002B0, "Member 'ABP_BtlMainConductor_C::BP_BtlActionManager' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BtlEvent) == 0x0002B8, "Member 'ABP_BtlMainConductor_C::BtlEvent' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BtlInput) == 0x0002C0, "Member 'ABP_BtlMainConductor_C::BtlInput' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BtlCameraManager) == 0x0002C8, "Member 'ABP_BtlMainConductor_C::BtlCameraManager' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BtlGui) == 0x0002D0, "Member 'ABP_BtlMainConductor_C::BtlGui' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BtlAIManager) == 0x0002D8, "Member 'ABP_BtlMainConductor_C::BtlAIManager' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, DefaultSceneRoot) == 0x0002E0, "Member 'ABP_BtlMainConductor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, Encount_Parameter) == 0x0002E8, "Member 'ABP_BtlMainConductor_C::Encount_Parameter' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, On_Finish_Battle) == 0x000310, "Member 'ABP_BtlMainConductor_C::On_Finish_Battle' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, UsingLevelNames) == 0x000320, "Member 'ABP_BtlMainConductor_C::UsingLevelNames' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, LoadingIndex) == 0x000330, "Member 'ABP_BtlMainConductor_C::LoadingIndex' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, LoadedPerformer) == 0x000334, "Member 'ABP_BtlMainConductor_C::LoadedPerformer' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, LoadedLevels) == 0x000335, "Member 'ABP_BtlMainConductor_C::LoadedLevels' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, CheckCharacterReady) == 0x000336, "Member 'ABP_BtlMainConductor_C::CheckCharacterReady' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, NotReadyCharacter) == 0x000337, "Member 'ABP_BtlMainConductor_C::NotReadyCharacter' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, BtlFIghting) == 0x000338, "Member 'ABP_BtlMainConductor_C::BtlFIghting' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, LoadFinshedCount) == 0x000340, "Member 'ABP_BtlMainConductor_C::LoadFinshedCount' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, LoadedStuff) == 0x000344, "Member 'ABP_BtlMainConductor_C::LoadedStuff' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, IsSerialEncount) == 0x000345, "Member 'ABP_BtlMainConductor_C::IsSerialEncount' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, On_Finish_Load_For_Serial_Encount) == 0x000348, "Member 'ABP_BtlMainConductor_C::On_Finish_Load_For_Serial_Encount' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, SpawnedActorParent) == 0x000358, "Member 'ABP_BtlMainConductor_C::SpawnedActorParent' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, LoadedCount) == 0x000360, "Member 'ABP_BtlMainConductor_C::LoadedCount' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, LoadedEnemy) == 0x000364, "Member 'ABP_BtlMainConductor_C::LoadedEnemy' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, StartedLoadingAlongWithBattleStart) == 0x000365, "Member 'ABP_BtlMainConductor_C::StartedLoadingAlongWithBattleStart' has a wrong offset!");
static_assert(offsetof(ABP_BtlMainConductor_C, IsRequestedBGM) == 0x000366, "Member 'ABP_BtlMainConductor_C::IsRequestedBGM' has a wrong offset!");

}

