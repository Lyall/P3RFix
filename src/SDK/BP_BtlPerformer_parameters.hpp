#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlPerformer

#include "Basic.hpp"

#include "Xrd777_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_BtlPerformer.BP_BtlPerformer_C.ExecuteUbergraph_BP_BtlPerformer
// 0x0520 (0x0520 - 0x0000)
struct BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVelvet_ReturnValue;                     // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBtlBossHermitInterface> K2Node_DynamicCast_AsBtl_Boss_Hermit_Interface;    // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AnimTime_10;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBtlBossHermitInterface> K2Node_DynamicCast_AsBtl_Boss_Hermit_Interface_1;  // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBtlBossNyxAvatarInterface> K2Node_DynamicCast_AsBtl_Boss_Nyx_Avatar_Interface; // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AnimTime_9;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBtlBossFortuneInterface> K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface;   // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AnimTime_8;                     // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBtlBossFortuneInterface> K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface_1; // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_89[0x3];                                       // 0x0089(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AnimTime_7;                     // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBtlBossFortuneInterface> K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface_2; // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x00A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A2[0x2];                                       // 0x00A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AnimTime_6;                     // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBtlBossFortuneInterface> K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface_3; // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AnimTime_5;                     // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBtlBossFortuneInterface> K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface_4; // 0x00C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_9;                    // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D3[0x1];                                       // 0x00D3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AnimTime_4;                     // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_AnimTime_3;                     // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBtlBossHangedManInterface> K2Node_DynamicCast_AsBtl_Boss_Hanged_Man_Interface; // 0x00E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_8;                     // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_10;                   // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AnimTime_2;                     // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBtlBossHangedManInterface> K2Node_DynamicCast_AsBtl_Boss_Hanged_Man_Interface_1; // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_9;                     // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_11;                   // 0x0109(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AnimTime_1;                     // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBtlBossStregaInterface> K2Node_DynamicCast_AsBtl_Boss_Strega_Interface;    // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_10;                    // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_12;                   // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_AnimTime;                       // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBtlBossNyxAvatarInterface> K2Node_DynamicCast_AsBtl_Boss_Nyx_Avatar_Interface_1; // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_11;                    // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_13;                   // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_13A[0x2];                                      // 0x013A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_DamagePercent;                  // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBtlBossNyxAvatarInterface> K2Node_DynamicCast_AsBtl_Boss_Nyx_Avatar_Interface_2; // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_12;                    // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Conv_IntToFloat_ReturnValue;              // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_14;                   // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_15;                   // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_16;                   // 0x015E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15F[0x1];                                      // 0x015F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_HpRatio;                        // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_17;                   // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Interp_Time;                    // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Radius;                         // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Height_Ratio;                   // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_Rotate_Degree;                  // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlEventAreaType                             K2Node_CustomEvent_TargetType;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_CustomEvent_SocketName;                     // 0x017C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_CalcCylinderLocation_Return_Value;        // 0x0184(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_Conv_VectorToTransform_ReturnValue;       // 0x0190(0x0030)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlPerformer_C*                     CallFunc_GetTargetPerformer_Performer;             // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetPerformerTransform_Transform;          // 0x01D0(0x0030)(IsPlainOldData, NoDestructor)
	EBtlAnimationType                             K2Node_CustomEvent_AnimID_2;                       // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NotPlayFaceAnim_3;              // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_202[0xE];                                      // 0x0202(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_output;                // 0x0210(0x0030)(IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_CalcLookAtRotate_Rotator;                 // 0x0240(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0250(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0280(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0290(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_18;                   // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBtlSceneAnimationType                        K2Node_CustomEvent_AnimID_1;                       // 0x02C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        K2Node_CustomEvent_AnimID_Next;                    // 0x02C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IgnoreElizabeth_1;              // 0x02C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1; // 0x02C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_19;                   // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVelvet_ReturnValue_1;                   // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2DB[0x5];                                      // 0x02DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_2; // 0x02E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x02F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0300(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_BtlHumanBase_C*                     K2Node_DynamicCast_AsBP_Btl_Human_Base;            // 0x0310(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_13;                    // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0320(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FTransform                             K2Node_CustomEvent_Trans;                          // 0x0330(0x0030)(IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_20;                   // 0x0360(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_361[0x3];                                      // 0x0361(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0364(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x03EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Bind;                           // 0x03ED(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Visible_2;                      // 0x03EE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_ExceptPersona;                  // 0x03EF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_KeepAnimation;                  // 0x03F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_21;                   // 0x03F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID_2;                      // 0x03F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F3[0x1];                                      // 0x03F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Blend_1;                        // 0x03F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NotPlayFaceAnim_2;              // 0x03F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_22;                   // 0x03F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3FA[0x6];                                      // 0x03FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_3; // 0x0400(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0410(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_Visible_1;                      // 0x0420(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_23;                   // 0x0421(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Visible;                        // 0x0422(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_24;                   // 0x0423(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_424[0x4];                                      // 0x0424(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequenceBase*                      K2Node_CustomEvent_Anim_Sequence;                  // 0x0428(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_25;                   // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID_1;                      // 0x0431(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID_Next;                   // 0x0432(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_433[0x5];                                      // 0x0433(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_4; // 0x0438(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_26;                   // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_5; // 0x0450(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x0460(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x0470(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x0480(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_27;                   // 0x0490(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBtlSceneAnimationType                        K2Node_CustomEvent_type_1;                         // 0x0491(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_492[0x2];                                      // 0x0492(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_BlendTime;                      // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IgnoreElizabeth;                // 0x0498(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_WithForceUpdate;                // 0x0499(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_28;                   // 0x049A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49B[0x5];                                      // 0x049B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlHumanBase_C*                     K2Node_DynamicCast_AsBP_Btl_Human_Base_1;          // 0x04A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_14;                    // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVelvet_ReturnValue_2;                   // 0x04A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EAppCharFaceAnimID                            K2Node_CustomEvent_type;                           // 0x04AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4AB[0x1];                                      // 0x04AB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_BlendIn;                        // 0x04AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_CustomEvent_BlendOut;                       // 0x04B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_ForceNoBlink;                   // 0x04B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x04B5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_29;                   // 0x04B6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4B7[0x1];                                      // 0x04B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x04BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4BD[0x3];                                      // 0x04BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_CustomEvent_Socket_Name;                    // 0x04C4(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlHumanBase_C*                     K2Node_DynamicCast_AsBP_Btl_Human_Base_2;          // 0x04D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_15;                    // 0x04D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_30;                   // 0x04D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_31;                   // 0x04DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4DB[0x5];                                      // 0x04DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 CallFunc_GetSkeletalMesh_SkeletalMesh;             // 0x04E0(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_32;                   // 0x04E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_CustomEvent_Disable;                        // 0x04E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_33;                   // 0x04EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_34;                   // 0x04EB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4EC[0x4];                                      // 0x04EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlHumanBase_C*                     K2Node_DynamicCast_AsBP_Btl_Human_Base_3;          // 0x04F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_16;                    // 0x04F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_35;                   // 0x04F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue_36;                   // 0x04FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsVelvet_ReturnValue_3;                   // 0x04FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlHumanBase_C*                     K2Node_DynamicCast_AsBP_Btl_Human_Base_4;          // 0x0500(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_17;                    // 0x0508(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBtlAnimationType                             K2Node_CustomEvent_Anim_ID;                        // 0x0509(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_50A[0x2];                                      // 0x050A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Blend;                          // 0x050C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NotPlayFaceAnim_1;              // 0x0510(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EBtlAnimationType                             K2Node_CustomEvent_AnimID;                         // 0x0511(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NotPlayFaceAnim;                // 0x0512(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer) == 0x000010, "Wrong alignment on BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer");
static_assert(sizeof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer) == 0x000520, "Wrong size on BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, EntryPoint) == 0x000000, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue) == 0x000004, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsVelvet_ReturnValue) == 0x000005, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsVelvet_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_1) == 0x000006, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_2) == 0x000007, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Hermit_Interface) == 0x000008, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Hermit_Interface' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimTime_10) == 0x00001C, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimTime_10' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Hermit_Interface_1) == 0x000020, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Hermit_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_3) == 0x000031, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Nyx_Avatar_Interface) == 0x000038, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Nyx_Avatar_Interface' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimTime_9) == 0x00004C, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimTime_9' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_4) == 0x000050, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface) == 0x000058, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_3) == 0x000068, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimTime_8) == 0x00006C, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimTime_8' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_5) == 0x000070, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface_1) == 0x000078, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_4) == 0x000088, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimTime_7) == 0x00008C, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimTime_7' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface_2) == 0x000090, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_5) == 0x0000A0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_6) == 0x0000A1, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimTime_6) == 0x0000A4, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimTime_6' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface_3) == 0x0000A8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_6) == 0x0000B8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_7) == 0x0000B9, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimTime_5) == 0x0000BC, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimTime_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface_4) == 0x0000C0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Fortune_Interface_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_7) == 0x0000D0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_8) == 0x0000D1, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_9) == 0x0000D2, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimTime_4) == 0x0000D4, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimTime_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimTime_3) == 0x0000D8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimTime_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Hanged_Man_Interface) == 0x0000E0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Hanged_Man_Interface' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_8) == 0x0000F0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_8' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_10) == 0x0000F1, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimTime_2) == 0x0000F4, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimTime_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Hanged_Man_Interface_1) == 0x0000F8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Hanged_Man_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_9) == 0x000108, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_9' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_11) == 0x000109, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimTime_1) == 0x00010C, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimTime_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Strega_Interface) == 0x000110, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Strega_Interface' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_10) == 0x000120, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_10' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_12) == 0x000121, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimTime) == 0x000124, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimTime' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Nyx_Avatar_Interface_1) == 0x000128, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Nyx_Avatar_Interface_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_11) == 0x000138, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_11' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_13) == 0x000139, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_DamagePercent) == 0x00013C, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_DamagePercent' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBtl_Boss_Nyx_Avatar_Interface_2) == 0x000140, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBtl_Boss_Nyx_Avatar_Interface_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_12) == 0x000150, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_12' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_Conv_IntToFloat_ReturnValue) == 0x000154, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_Conv_IntToFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000158, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_14) == 0x00015C, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_15) == 0x00015D, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_16) == 0x00015E, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_16' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_HpRatio) == 0x000160, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_HpRatio' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_17) == 0x000164, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_17' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Interp_Time) == 0x000168, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Interp_Time' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Radius) == 0x00016C, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Radius' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Height_Ratio) == 0x000170, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Height_Ratio' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Rotate_Degree) == 0x000174, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Rotate_Degree' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_TargetType) == 0x000178, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_TargetType' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_SocketName) == 0x00017C, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_SocketName' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_CalcCylinderLocation_Return_Value) == 0x000184, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_CalcCylinderLocation_Return_Value' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_Conv_VectorToTransform_ReturnValue) == 0x000190, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_Conv_VectorToTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_Event_DeltaSeconds) == 0x0001C0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_GetTargetPerformer_Performer) == 0x0001C8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_GetTargetPerformer_Performer' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_GetPerformerTransform_Transform) == 0x0001D0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_GetPerformerTransform_Transform' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimID_2) == 0x000200, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimID_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_NotPlayFaceAnim_3) == 0x000201, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_NotPlayFaceAnim_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_GetSocketTransform_output) == 0x000210, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_GetSocketTransform_output' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_CalcLookAtRotate_Rotator) == 0x000240, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_CalcLookAtRotate_Rotator' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000250, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_BreakRotator_Roll) == 0x000260, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_BreakRotator_Pitch) == 0x000264, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_BreakRotator_Yaw) == 0x000268, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_Concat_StrStr_ReturnValue) == 0x000270, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_MakeRotator_ReturnValue) == 0x000280, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_MakeTransform_ReturnValue) == 0x000290, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_18) == 0x0002C0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_18' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimID_1) == 0x0002C1, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimID_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimID_Next) == 0x0002C2, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimID_Next' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_IgnoreElizabeth_1) == 0x0002C3, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_IgnoreElizabeth_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1) == 0x0002C8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_19) == 0x0002D8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_19' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsVelvet_ReturnValue_1) == 0x0002D9, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsVelvet_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_BooleanAND_ReturnValue) == 0x0002DA, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_2) == 0x0002E0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0002F0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000300, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBP_Btl_Human_Base) == 0x000310, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBP_Btl_Human_Base' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_13) == 0x000318, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_13' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000320, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Trans) == 0x000330, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Trans' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_20) == 0x000360, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_20' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000364, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0003EC, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Bind) == 0x0003ED, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Bind' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Visible_2) == 0x0003EE, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Visible_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_ExceptPersona) == 0x0003EF, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_ExceptPersona' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_KeepAnimation) == 0x0003F0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_KeepAnimation' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_21) == 0x0003F1, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_21' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Anim_ID_2) == 0x0003F2, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Anim_ID_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Blend_1) == 0x0003F4, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Blend_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_NotPlayFaceAnim_2) == 0x0003F8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_NotPlayFaceAnim_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_22) == 0x0003F9, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_22' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_3) == 0x000400, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000410, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Visible_1) == 0x000420, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Visible_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_23) == 0x000421, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_23' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Visible) == 0x000422, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Visible' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_24) == 0x000423, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_24' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Anim_Sequence) == 0x000428, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Anim_Sequence' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_25) == 0x000430, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_25' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Anim_ID_1) == 0x000431, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Anim_ID_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Anim_ID_Next) == 0x000432, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Anim_ID_Next' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_4) == 0x000438, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_26) == 0x000448, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_26' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_5) == 0x000450, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_Concat_StrStr_ReturnValue_5) == 0x000460, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_Concat_StrStr_ReturnValue_6) == 0x000470, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_Concat_StrStr_ReturnValue_7) == 0x000480, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_27) == 0x000490, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_27' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_type_1) == 0x000491, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_type_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_BlendTime) == 0x000494, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_BlendTime' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_IgnoreElizabeth) == 0x000498, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_IgnoreElizabeth' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_WithForceUpdate) == 0x000499, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_WithForceUpdate' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_28) == 0x00049A, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_28' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBP_Btl_Human_Base_1) == 0x0004A0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBP_Btl_Human_Base_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_14) == 0x0004A8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_14' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsVelvet_ReturnValue_2) == 0x0004A9, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsVelvet_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_type) == 0x0004AA, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_type' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_BlendIn) == 0x0004AC, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_BlendIn' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_BlendOut) == 0x0004B0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_BlendOut' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_ForceNoBlink) == 0x0004B4, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_ForceNoBlink' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_BooleanAND_ReturnValue_1) == 0x0004B5, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_29) == 0x0004B6, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_29' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, Temp_int_Variable) == 0x0004B8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0004BC, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_Add_IntInt_ReturnValue) == 0x0004C0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Socket_Name) == 0x0004C4, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Socket_Name' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBP_Btl_Human_Base_2) == 0x0004D0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBP_Btl_Human_Base_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_15) == 0x0004D8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_15' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_30) == 0x0004D9, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_30' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_31) == 0x0004DA, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_31' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_GetSkeletalMesh_SkeletalMesh) == 0x0004E0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_GetSkeletalMesh_SkeletalMesh' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_32) == 0x0004E8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_32' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Disable) == 0x0004E9, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Disable' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_33) == 0x0004EA, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_33' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_34) == 0x0004EB, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_34' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBP_Btl_Human_Base_3) == 0x0004F0, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBP_Btl_Human_Base_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_16) == 0x0004F8, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_16' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_35) == 0x0004F9, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_35' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsValid_ReturnValue_36) == 0x0004FA, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsValid_ReturnValue_36' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, CallFunc_IsVelvet_ReturnValue_3) == 0x0004FB, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::CallFunc_IsVelvet_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_AsBP_Btl_Human_Base_4) == 0x000500, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_AsBP_Btl_Human_Base_4' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_DynamicCast_bSuccess_17) == 0x000508, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_DynamicCast_bSuccess_17' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Anim_ID) == 0x000509, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Anim_ID' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_Blend) == 0x00050C, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_Blend' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_NotPlayFaceAnim_1) == 0x000510, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_NotPlayFaceAnim_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_AnimID) == 0x000511, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_AnimID' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer, K2Node_CustomEvent_NotPlayFaceAnim) == 0x000512, "Member 'BP_BtlPerformer_C_ExecuteUbergraph_BP_BtlPerformer::K2Node_CustomEvent_NotPlayFaceAnim' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Elizabeth Animation
// 0x0002 (0x0002 - 0x0000)
struct BP_BtlPerformer_C_BCD_Elizabeth_Animation final
{
public:
	EBtlAnimationType                             AnimId;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotPlayFaceAnim;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Elizabeth_Animation) == 0x000001, "Wrong alignment on BP_BtlPerformer_C_BCD_Elizabeth_Animation");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Elizabeth_Animation) == 0x000002, "Wrong size on BP_BtlPerformer_C_BCD_Elizabeth_Animation");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Elizabeth_Animation, AnimId) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Elizabeth_Animation::AnimId' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Elizabeth_Animation, NotPlayFaceAnim) == 0x000001, "Member 'BP_BtlPerformer_C_BCD_Elizabeth_Animation::NotPlayFaceAnim' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Elizabeth Animation With Blend
// 0x000C (0x000C - 0x0000)
struct BP_BtlPerformer_C_BCD_Elizabeth_Animation_With_Blend final
{
public:
	EBtlAnimationType                             Anim_ID;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotPlayFaceAnim;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Elizabeth_Animation_With_Blend) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Elizabeth_Animation_With_Blend");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Elizabeth_Animation_With_Blend) == 0x00000C, "Wrong size on BP_BtlPerformer_C_BCD_Elizabeth_Animation_With_Blend");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Elizabeth_Animation_With_Blend, Anim_ID) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Elizabeth_Animation_With_Blend::Anim_ID' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Elizabeth_Animation_With_Blend, Blend) == 0x000004, "Member 'BP_BtlPerformer_C_BCD_Elizabeth_Animation_With_Blend::Blend' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Elizabeth_Animation_With_Blend, NotPlayFaceAnim) == 0x000008, "Member 'BP_BtlPerformer_C_BCD_Elizabeth_Animation_With_Blend::NotPlayFaceAnim' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Disable Face Anim Update With Body
// 0x0001 (0x0001 - 0x0000)
struct BP_BtlPerformer_C_BCD_Disable_Face_Anim_Update_With_Body final
{
public:
	bool                                          Disable;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Disable_Face_Anim_Update_With_Body) == 0x000001, "Wrong alignment on BP_BtlPerformer_C_BCD_Disable_Face_Anim_Update_With_Body");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Disable_Face_Anim_Update_With_Body) == 0x000001, "Wrong size on BP_BtlPerformer_C_BCD_Disable_Face_Anim_Update_With_Body");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Disable_Face_Anim_Update_With_Body, Disable) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Disable_Face_Anim_Update_With_Body::Disable' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Assign Attach Point 
// 0x0008 (0x0008 - 0x0000)
struct BP_BtlPerformer_C_BCD_Assign_Attach_Point_ final
{
public:
	class FName                                   Socket_Name;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Assign_Attach_Point_) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Assign_Attach_Point_");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Assign_Attach_Point_) == 0x000008, "Wrong size on BP_BtlPerformer_C_BCD_Assign_Attach_Point_");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Assign_Attach_Point_, Socket_Name) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Assign_Attach_Point_::Socket_Name' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Face Anim
// 0x0010 (0x0010 - 0x0000)
struct BP_BtlPerformer_C_BCD_Chara_Face_Anim final
{
public:
	EAppCharFaceAnimID                            Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendIn;                                           // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BlendOut;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceNoBlink;                                      // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Chara_Face_Anim) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Chara_Face_Anim");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Chara_Face_Anim) == 0x000010, "Wrong size on BP_BtlPerformer_C_BCD_Chara_Face_Anim");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Face_Anim, Type) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Chara_Face_Anim::Type' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Face_Anim, BlendIn) == 0x000004, "Member 'BP_BtlPerformer_C_BCD_Chara_Face_Anim::BlendIn' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Face_Anim, BlendOut) == 0x000008, "Member 'BP_BtlPerformer_C_BCD_Chara_Face_Anim::BlendOut' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Face_Anim, ForceNoBlink) == 0x00000C, "Member 'BP_BtlPerformer_C_BCD_Chara_Face_Anim::ForceNoBlink' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Scene Animation Blend
// 0x000C (0x000C - 0x0000)
struct BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend final
{
public:
	EBtlSceneAnimationType                        Type;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendTime;                                         // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreElizabeth;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          WithForceUpdate;                                   // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend) == 0x00000C, "Wrong size on BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend, Type) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend::Type' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend, BlendTime) == 0x000004, "Member 'BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend::BlendTime' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend, IgnoreElizabeth) == 0x000008, "Member 'BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend::IgnoreElizabeth' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend, WithForceUpdate) == 0x000009, "Member 'BP_BtlPerformer_C_BCD_Chara_Scene_Animation_Blend::WithForceUpdate' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Animation With Next
// 0x0002 (0x0002 - 0x0000)
struct BP_BtlPerformer_C_BCD_Chara_Animation_With_Next final
{
public:
	EBtlAnimationType                             Anim_ID;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlAnimationType                             Anim_ID_Next;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Chara_Animation_With_Next) == 0x000001, "Wrong alignment on BP_BtlPerformer_C_BCD_Chara_Animation_With_Next");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Chara_Animation_With_Next) == 0x000002, "Wrong size on BP_BtlPerformer_C_BCD_Chara_Animation_With_Next");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Animation_With_Next, Anim_ID) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Chara_Animation_With_Next::Anim_ID' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Animation_With_Next, Anim_ID_Next) == 0x000001, "Member 'BP_BtlPerformer_C_BCD_Chara_Animation_With_Next::Anim_ID_Next' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Weapon Anim
// 0x0008 (0x0008 - 0x0000)
struct BP_BtlPerformer_C_BCD_Chara_Weapon_Anim final
{
public:
	class UAnimSequenceBase*                      Anim_Sequence;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Chara_Weapon_Anim) == 0x000008, "Wrong alignment on BP_BtlPerformer_C_BCD_Chara_Weapon_Anim");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Chara_Weapon_Anim) == 0x000008, "Wrong size on BP_BtlPerformer_C_BCD_Chara_Weapon_Anim");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Weapon_Anim, Anim_Sequence) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Chara_Weapon_Anim::Anim_Sequence' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Gun Visible
// 0x0001 (0x0001 - 0x0000)
struct BP_BtlPerformer_C_BCD_Chara_Gun_Visible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Chara_Gun_Visible) == 0x000001, "Wrong alignment on BP_BtlPerformer_C_BCD_Chara_Gun_Visible");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Chara_Gun_Visible) == 0x000001, "Wrong size on BP_BtlPerformer_C_BCD_Chara_Gun_Visible");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Gun_Visible, Visible) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Chara_Gun_Visible::Visible' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Weapon Visible
// 0x0001 (0x0001 - 0x0000)
struct BP_BtlPerformer_C_BCD_Chara_Weapon_Visible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Chara_Weapon_Visible) == 0x000001, "Wrong alignment on BP_BtlPerformer_C_BCD_Chara_Weapon_Visible");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Chara_Weapon_Visible) == 0x000001, "Wrong size on BP_BtlPerformer_C_BCD_Chara_Weapon_Visible");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Weapon_Visible, Visible) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Chara_Weapon_Visible::Visible' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Animation With Blend
// 0x000C (0x000C - 0x0000)
struct BP_BtlPerformer_C_BCD_Chara_Animation_With_Blend final
{
public:
	EBtlAnimationType                             Anim_ID;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Blend;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotPlayFaceAnim;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Chara_Animation_With_Blend) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Chara_Animation_With_Blend");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Chara_Animation_With_Blend) == 0x00000C, "Wrong size on BP_BtlPerformer_C_BCD_Chara_Animation_With_Blend");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Animation_With_Blend, Anim_ID) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Chara_Animation_With_Blend::Anim_ID' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Animation_With_Blend, Blend) == 0x000004, "Member 'BP_BtlPerformer_C_BCD_Chara_Animation_With_Blend::Blend' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Animation_With_Blend, NotPlayFaceAnim) == 0x000008, "Member 'BP_BtlPerformer_C_BCD_Chara_Animation_With_Blend::NotPlayFaceAnim' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Set Visible
// 0x0003 (0x0003 - 0x0000)
struct BP_BtlPerformer_C_BCD_Chara_Set_Visible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          ExceptPersona;                                     // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          KeepAnimation;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Chara_Set_Visible) == 0x000001, "Wrong alignment on BP_BtlPerformer_C_BCD_Chara_Set_Visible");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Chara_Set_Visible) == 0x000003, "Wrong size on BP_BtlPerformer_C_BCD_Chara_Set_Visible");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Set_Visible, Visible) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Chara_Set_Visible::Visible' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Set_Visible, ExceptPersona) == 0x000001, "Member 'BP_BtlPerformer_C_BCD_Chara_Set_Visible::ExceptPersona' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Set_Visible, KeepAnimation) == 0x000002, "Member 'BP_BtlPerformer_C_BCD_Chara_Set_Visible::KeepAnimation' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Bind To Mannequin
// 0x0001 (0x0001 - 0x0000)
struct BP_BtlPerformer_C_BCD_Bind_To_Mannequin final
{
public:
	bool                                          Bind;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Bind_To_Mannequin) == 0x000001, "Wrong alignment on BP_BtlPerformer_C_BCD_Bind_To_Mannequin");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Bind_To_Mannequin) == 0x000001, "Wrong size on BP_BtlPerformer_C_BCD_Bind_To_Mannequin");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Bind_To_Mannequin, Bind) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Bind_To_Mannequin::Bind' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Set Pos
// 0x0030 (0x0030 - 0x0000)
struct BP_BtlPerformer_C_BCD_Chara_Set_Pos final
{
public:
	struct FTransform                             Trans;                                             // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Chara_Set_Pos) == 0x000010, "Wrong alignment on BP_BtlPerformer_C_BCD_Chara_Set_Pos");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Chara_Set_Pos) == 0x000030, "Wrong size on BP_BtlPerformer_C_BCD_Chara_Set_Pos");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Set_Pos, Trans) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Chara_Set_Pos::Trans' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Scene Animation
// 0x0003 (0x0003 - 0x0000)
struct BP_BtlPerformer_C_BCD_Chara_Scene_Animation final
{
public:
	EBtlSceneAnimationType                        AnimId;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlSceneAnimationType                        AnimID_Next;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreElizabeth;                                   // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Chara_Scene_Animation) == 0x000001, "Wrong alignment on BP_BtlPerformer_C_BCD_Chara_Scene_Animation");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Chara_Scene_Animation) == 0x000003, "Wrong size on BP_BtlPerformer_C_BCD_Chara_Scene_Animation");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Scene_Animation, AnimId) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Chara_Scene_Animation::AnimId' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Scene_Animation, AnimID_Next) == 0x000001, "Member 'BP_BtlPerformer_C_BCD_Chara_Scene_Animation::AnimID_Next' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Scene_Animation, IgnoreElizabeth) == 0x000002, "Member 'BP_BtlPerformer_C_BCD_Chara_Scene_Animation::IgnoreElizabeth' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Chara Animation
// 0x0002 (0x0002 - 0x0000)
struct BP_BtlPerformer_C_BCD_Chara_Animation final
{
public:
	EBtlAnimationType                             AnimId;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotPlayFaceAnim;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Chara_Animation) == 0x000001, "Wrong alignment on BP_BtlPerformer_C_BCD_Chara_Animation");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Chara_Animation) == 0x000002, "Wrong size on BP_BtlPerformer_C_BCD_Chara_Animation");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Animation, AnimId) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Chara_Animation::AnimId' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Chara_Animation, NotPlayFaceAnim) == 0x000001, "Member 'BP_BtlPerformer_C_BCD_Chara_Animation::NotPlayFaceAnim' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_ReceiveTick");
static_assert(sizeof(BP_BtlPerformer_C_ReceiveTick) == 0x000004, "Wrong size on BP_BtlPerformer_C_ReceiveTick");
static_assert(offsetof(BP_BtlPerformer_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_BtlPerformer_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Camera cylinder
// 0x001C (0x001C - 0x0000)
struct BP_BtlPerformer_C_BCD_Camera_cylinder final
{
public:
	float                                         Interp_Time;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height_Ratio;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotate_Degree;                                     // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBtlEventAreaType                             TargetType;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0014(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Camera_cylinder) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Camera_cylinder");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Camera_cylinder) == 0x00001C, "Wrong size on BP_BtlPerformer_C_BCD_Camera_cylinder");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Camera_cylinder, Interp_Time) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Camera_cylinder::Interp_Time' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Camera_cylinder, Radius) == 0x000004, "Member 'BP_BtlPerformer_C_BCD_Camera_cylinder::Radius' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Camera_cylinder, Height_Ratio) == 0x000008, "Member 'BP_BtlPerformer_C_BCD_Camera_cylinder::Height_Ratio' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Camera_cylinder, Rotate_Degree) == 0x00000C, "Member 'BP_BtlPerformer_C_BCD_Camera_cylinder::Rotate_Degree' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Camera_cylinder, TargetType) == 0x000010, "Member 'BP_BtlPerformer_C_BCD_Camera_cylinder::TargetType' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Camera_cylinder, SocketName) == 0x000014, "Member 'BP_BtlPerformer_C_BCD_Camera_cylinder::SocketName' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Affect Recovery
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_Affect_Recovery final
{
public:
	float                                         HpRatio;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Affect_Recovery) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Affect_Recovery");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Affect_Recovery) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_Affect_Recovery");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Affect_Recovery, HpRatio) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Affect_Recovery::HpRatio' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Affect Divided Damage
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_Affect_Divided_Damage final
{
public:
	int32                                         DamagePercent;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Affect_Divided_Damage) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Affect_Divided_Damage");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Affect_Divided_Damage) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_Affect_Divided_Damage");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Affect_Divided_Damage, DamagePercent) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Affect_Divided_Damage::DamagePercent' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD NyxAvatar Fadeout Weapon Effect
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Weapon_Effect final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Weapon_Effect) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Weapon_Effect");
static_assert(sizeof(BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Weapon_Effect) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Weapon_Effect");
static_assert(offsetof(BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Weapon_Effect, AnimTime) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Weapon_Effect::AnimTime' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD NyxAvatar Fadeout Feather Effect
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Feather_Effect final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Feather_Effect) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Feather_Effect");
static_assert(sizeof(BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Feather_Effect) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Feather_Effect");
static_assert(offsetof(BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Feather_Effect, AnimTime) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_NyxAvatar_Fadeout_Feather_Effect::AnimTime' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Jin FadeOut Drug Loop Effect
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_Jin_FadeOut_Drug_Loop_Effect final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Jin_FadeOut_Drug_Loop_Effect) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Jin_FadeOut_Drug_Loop_Effect");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Jin_FadeOut_Drug_Loop_Effect) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_Jin_FadeOut_Drug_Loop_Effect");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Jin_FadeOut_Drug_Loop_Effect, AnimTime) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Jin_FadeOut_Drug_Loop_Effect::AnimTime' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD HangedMan FadeOut Floating Effect
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_HangedMan_FadeOut_Floating_Effect final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_HangedMan_FadeOut_Floating_Effect) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_HangedMan_FadeOut_Floating_Effect");
static_assert(sizeof(BP_BtlPerformer_C_BCD_HangedMan_FadeOut_Floating_Effect) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_HangedMan_FadeOut_Floating_Effect");
static_assert(offsetof(BP_BtlPerformer_C_BCD_HangedMan_FadeOut_Floating_Effect, AnimTime) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_HangedMan_FadeOut_Floating_Effect::AnimTime' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD HangedMan FadeIn Floating Effect
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_HangedMan_FadeIn_Floating_Effect final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_HangedMan_FadeIn_Floating_Effect) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_HangedMan_FadeIn_Floating_Effect");
static_assert(sizeof(BP_BtlPerformer_C_BCD_HangedMan_FadeIn_Floating_Effect) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_HangedMan_FadeIn_Floating_Effect");
static_assert(offsetof(BP_BtlPerformer_C_BCD_HangedMan_FadeIn_Floating_Effect, AnimTime) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_HangedMan_FadeIn_Floating_Effect::AnimTime' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Strength Flower Fadeout
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_Strength_Flower_Fadeout final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Strength_Flower_Fadeout) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Strength_Flower_Fadeout");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Strength_Flower_Fadeout) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_Strength_Flower_Fadeout");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Strength_Flower_Fadeout, AnimTime) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Strength_Flower_Fadeout::AnimTime' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Fortune Fadeout
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_Fortune_Fadeout final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Fortune_Fadeout) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Fortune_Fadeout");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Fortune_Fadeout) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_Fortune_Fadeout");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Fortune_Fadeout, AnimTime) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Fortune_Fadeout::AnimTime' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Fortune Fadein
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_Fortune_Fadein final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Fortune_Fadein) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Fortune_Fadein");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Fortune_Fadein) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_Fortune_Fadein");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Fortune_Fadein, AnimTime) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Fortune_Fadein::AnimTime' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Fortune Fadeout Flower Loop
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_Fortune_Fadeout_Flower_Loop final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Fortune_Fadeout_Flower_Loop) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Fortune_Fadeout_Flower_Loop");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Fortune_Fadeout_Flower_Loop) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_Fortune_Fadeout_Flower_Loop");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Fortune_Fadeout_Flower_Loop, AnimTime) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Fortune_Fadeout_Flower_Loop::AnimTime' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD Fortune Fadein Flower Loop
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_Fortune_Fadein_Flower_Loop final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_Fortune_Fadein_Flower_Loop) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_Fortune_Fadein_Flower_Loop");
static_assert(sizeof(BP_BtlPerformer_C_BCD_Fortune_Fadein_Flower_Loop) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_Fortune_Fadein_Flower_Loop");
static_assert(offsetof(BP_BtlPerformer_C_BCD_Fortune_Fadein_Flower_Loop, AnimTime) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_Fortune_Fadein_Flower_Loop::AnimTime' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.BCD NyxAvatar Play Feater Anim
// 0x0004 (0x0004 - 0x0000)
struct BP_BtlPerformer_C_BCD_NyxAvatar_Play_Feater_Anim final
{
public:
	float                                         AnimTime;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_BCD_NyxAvatar_Play_Feater_Anim) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_BCD_NyxAvatar_Play_Feater_Anim");
static_assert(sizeof(BP_BtlPerformer_C_BCD_NyxAvatar_Play_Feater_Anim) == 0x000004, "Wrong size on BP_BtlPerformer_C_BCD_NyxAvatar_Play_Feater_Anim");
static_assert(offsetof(BP_BtlPerformer_C_BCD_NyxAvatar_Play_Feater_Anim, AnimTime) == 0x000000, "Member 'BP_BtlPerformer_C_BCD_NyxAvatar_Play_Feater_Anim::AnimTime' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.SetupPerformer
// 0x0010 (0x0010 - 0x0000)
struct BP_BtlPerformer_C_SetupPerformer final
{
public:
	class ABP_BtlCharacterBase_C*                 Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_SetupPerformer) == 0x000008, "Wrong alignment on BP_BtlPerformer_C_SetupPerformer");
static_assert(sizeof(BP_BtlPerformer_C_SetupPerformer) == 0x000010, "Wrong size on BP_BtlPerformer_C_SetupPerformer");
static_assert(offsetof(BP_BtlPerformer_C_SetupPerformer, Character) == 0x000000, "Member 'BP_BtlPerformer_C_SetupPerformer::Character' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_SetupPerformer, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_BtlPerformer_C_SetupPerformer::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.GetCharacter
// 0x0008 (0x0008 - 0x0000)
struct BP_BtlPerformer_C_GetCharacter final
{
public:
	class ABP_BtlCharacterBase_C*                 Character;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_GetCharacter) == 0x000008, "Wrong alignment on BP_BtlPerformer_C_GetCharacter");
static_assert(sizeof(BP_BtlPerformer_C_GetCharacter) == 0x000008, "Wrong size on BP_BtlPerformer_C_GetCharacter");
static_assert(offsetof(BP_BtlPerformer_C_GetCharacter, Character) == 0x000000, "Member 'BP_BtlPerformer_C_GetCharacter::Character' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.SetCharacter
// 0x0008 (0x0008 - 0x0000)
struct BP_BtlPerformer_C_SetCharacter final
{
public:
	class ABP_BtlCharacterBase_C*                 Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_SetCharacter) == 0x000008, "Wrong alignment on BP_BtlPerformer_C_SetCharacter");
static_assert(sizeof(BP_BtlPerformer_C_SetCharacter) == 0x000008, "Wrong size on BP_BtlPerformer_C_SetCharacter");
static_assert(offsetof(BP_BtlPerformer_C_SetCharacter, Character) == 0x000000, "Member 'BP_BtlPerformer_C_SetCharacter::Character' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.GetPerformerTransform
// 0x00D0 (0x00D0 - 0x0000)
struct BP_BtlPerformer_C_GetPerformerTransform final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             Work;                                              // 0x0030(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0060(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0xF];                                       // 0x0091(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetInitialTransform_trans;                // 0x00A0(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_GetPerformerTransform) == 0x000010, "Wrong alignment on BP_BtlPerformer_C_GetPerformerTransform");
static_assert(sizeof(BP_BtlPerformer_C_GetPerformerTransform) == 0x0000D0, "Wrong size on BP_BtlPerformer_C_GetPerformerTransform");
static_assert(offsetof(BP_BtlPerformer_C_GetPerformerTransform, Transform) == 0x000000, "Member 'BP_BtlPerformer_C_GetPerformerTransform::Transform' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetPerformerTransform, Work) == 0x000030, "Member 'BP_BtlPerformer_C_GetPerformerTransform::Work' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetPerformerTransform, CallFunc_GetTransform_ReturnValue) == 0x000060, "Member 'BP_BtlPerformer_C_GetPerformerTransform::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetPerformerTransform, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'BP_BtlPerformer_C_GetPerformerTransform::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetPerformerTransform, CallFunc_GetInitialTransform_trans) == 0x0000A0, "Member 'BP_BtlPerformer_C_GetPerformerTransform::CallFunc_GetInitialTransform_trans' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.FinalizePerformer
// 0x0001 (0x0001 - 0x0000)
struct BP_BtlPerformer_C_FinalizePerformer final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_FinalizePerformer) == 0x000001, "Wrong alignment on BP_BtlPerformer_C_FinalizePerformer");
static_assert(sizeof(BP_BtlPerformer_C_FinalizePerformer) == 0x000001, "Wrong size on BP_BtlPerformer_C_FinalizePerformer");
static_assert(offsetof(BP_BtlPerformer_C_FinalizePerformer, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_BtlPerformer_C_FinalizePerformer::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.CalcCylinderLocation
// 0x0058 (0x0058 - 0x0000)
struct BP_BtlPerformer_C_CalcCylinderLocation final
{
public:
	float                                         Radius_Ratio;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Height_Ratio;                                      // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Rotate_Degree;                                     // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCommonCylinder;                                 // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Return_Value;                                      // 0x0010(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x001C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	TArray<class ABP_BtlCharacterBase_C*>         K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ReferenceParm)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CalculateCylinderLocation_Location;       // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_CalcCylinderLocation) == 0x000008, "Wrong alignment on BP_BtlPerformer_C_CalcCylinderLocation");
static_assert(sizeof(BP_BtlPerformer_C_CalcCylinderLocation) == 0x000058, "Wrong size on BP_BtlPerformer_C_CalcCylinderLocation");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, Radius_Ratio) == 0x000000, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::Radius_Ratio' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, Height_Ratio) == 0x000004, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::Height_Ratio' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, Rotate_Degree) == 0x000008, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::Rotate_Degree' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, UseCommonCylinder) == 0x00000C, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::UseCommonCylinder' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, Return_Value) == 0x000010, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::Return_Value' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x00001C, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, K2Node_MakeArray_Array) == 0x000028, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, CallFunc_Add_FloatFloat_ReturnValue) == 0x000044, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcCylinderLocation, CallFunc_CalculateCylinderLocation_Location) == 0x00004C, "Member 'BP_BtlPerformer_C_CalcCylinderLocation::CallFunc_CalculateCylinderLocation_Location' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.CalcLookAtRotate
// 0x00C0 (0x00C0 - 0x0000)
struct BP_BtlPerformer_C_CalcLookAtRotate final
{
public:
	struct FTransform                             Camera;                                            // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FTransform                             Target;                                            // 0x0030(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	struct FRotator                               Rotator;                                           // 0x0060(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x006C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x009C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x00B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_CalcLookAtRotate) == 0x000010, "Wrong alignment on BP_BtlPerformer_C_CalcLookAtRotate");
static_assert(sizeof(BP_BtlPerformer_C_CalcLookAtRotate) == 0x0000C0, "Wrong size on BP_BtlPerformer_C_CalcLookAtRotate");
static_assert(offsetof(BP_BtlPerformer_C_CalcLookAtRotate, Camera) == 0x000000, "Member 'BP_BtlPerformer_C_CalcLookAtRotate::Camera' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcLookAtRotate, Target) == 0x000030, "Member 'BP_BtlPerformer_C_CalcLookAtRotate::Target' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcLookAtRotate, Rotator) == 0x000060, "Member 'BP_BtlPerformer_C_CalcLookAtRotate::Rotator' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcLookAtRotate, CallFunc_BreakTransform_Location) == 0x00006C, "Member 'BP_BtlPerformer_C_CalcLookAtRotate::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcLookAtRotate, CallFunc_BreakTransform_Rotation) == 0x000078, "Member 'BP_BtlPerformer_C_CalcLookAtRotate::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcLookAtRotate, CallFunc_BreakTransform_Scale) == 0x000084, "Member 'BP_BtlPerformer_C_CalcLookAtRotate::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcLookAtRotate, CallFunc_BreakTransform_Location_1) == 0x000090, "Member 'BP_BtlPerformer_C_CalcLookAtRotate::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcLookAtRotate, CallFunc_BreakTransform_Rotation_1) == 0x00009C, "Member 'BP_BtlPerformer_C_CalcLookAtRotate::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcLookAtRotate, CallFunc_BreakTransform_Scale_1) == 0x0000A8, "Member 'BP_BtlPerformer_C_CalcLookAtRotate::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_CalcLookAtRotate, CallFunc_FindLookAtRotation_ReturnValue) == 0x0000B4, "Member 'BP_BtlPerformer_C_CalcLookAtRotate::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.SyncLocation
// 0x00C0 (0x00C0 - 0x0000)
struct BP_BtlPerformer_C_SyncLocation final
{
public:
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0000(0x0030)(ConstParm, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorTransform_SweepHitResult;      // 0x0030(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorTransform_ReturnValue;         // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_SyncLocation) == 0x000010, "Wrong alignment on BP_BtlPerformer_C_SyncLocation");
static_assert(sizeof(BP_BtlPerformer_C_SyncLocation) == 0x0000C0, "Wrong size on BP_BtlPerformer_C_SyncLocation");
static_assert(offsetof(BP_BtlPerformer_C_SyncLocation, CallFunc_GetTransform_ReturnValue) == 0x000000, "Member 'BP_BtlPerformer_C_SyncLocation::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_SyncLocation, CallFunc_K2_SetActorTransform_SweepHitResult) == 0x000030, "Member 'BP_BtlPerformer_C_SyncLocation::CallFunc_K2_SetActorTransform_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_SyncLocation, CallFunc_K2_SetActorTransform_ReturnValue) == 0x0000B8, "Member 'BP_BtlPerformer_C_SyncLocation::CallFunc_K2_SetActorTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_SyncLocation, CallFunc_IsValid_ReturnValue) == 0x0000B9, "Member 'BP_BtlPerformer_C_SyncLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.GetSocketTransform
// 0x0290 (0x0290 - 0x0000)
struct BP_BtlPerformer_C_GetSocketTransform final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OwnerTransform;                                    // 0x0010(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	bool                                          UseCommonCylinder;                                 // 0x0040(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Output;                                            // 0x0050(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	struct FTransform                             OutputTransform;                                   // 0x0080(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	float                                         NewLocalVar_0;                                     // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0xC];                                       // 0x00B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             AddTransform;                                      // 0x00C0(0x0030)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetCylinderHight_output;                  // 0x00F0(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetCylinderHight_output_1;                // 0x0120(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_GetCylinderHight_output_2;                // 0x0150(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Location;                  // 0x0180(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation;                  // 0x018C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale;                     // 0x0198(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakTransform_Location_1;                // 0x01A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_1;                // 0x01B4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_1;                   // 0x01C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetSocketTransform_ReturnValue;           // 0x01D0(0x0030)(IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0200(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakTransform_Location_2;                // 0x020C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_BreakTransform_Rotation_2;                // 0x0218(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_BreakTransform_Scale_2;                   // 0x0224(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0230(0x0030)(IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue_1;              // 0x0260(0x0030)(IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_GetSocketTransform) == 0x000010, "Wrong alignment on BP_BtlPerformer_C_GetSocketTransform");
static_assert(sizeof(BP_BtlPerformer_C_GetSocketTransform) == 0x000290, "Wrong size on BP_BtlPerformer_C_GetSocketTransform");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, SocketName) == 0x000000, "Member 'BP_BtlPerformer_C_GetSocketTransform::SocketName' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, OwnerTransform) == 0x000010, "Member 'BP_BtlPerformer_C_GetSocketTransform::OwnerTransform' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, UseCommonCylinder) == 0x000040, "Member 'BP_BtlPerformer_C_GetSocketTransform::UseCommonCylinder' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, Output) == 0x000050, "Member 'BP_BtlPerformer_C_GetSocketTransform::Output' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, OutputTransform) == 0x000080, "Member 'BP_BtlPerformer_C_GetSocketTransform::OutputTransform' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, NewLocalVar_0) == 0x0000B0, "Member 'BP_BtlPerformer_C_GetSocketTransform::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, AddTransform) == 0x0000C0, "Member 'BP_BtlPerformer_C_GetSocketTransform::AddTransform' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_GetCylinderHight_output) == 0x0000F0, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_GetCylinderHight_output' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_GetCylinderHight_output_1) == 0x000120, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_GetCylinderHight_output_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_GetCylinderHight_output_2) == 0x000150, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_GetCylinderHight_output_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_BreakTransform_Location) == 0x000180, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_BreakTransform_Location' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_BreakTransform_Rotation) == 0x00018C, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_BreakTransform_Rotation' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_BreakTransform_Scale) == 0x000198, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_BreakTransform_Scale' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, K2Node_SwitchName_CmpSuccess) == 0x0001A4, "Member 'BP_BtlPerformer_C_GetSocketTransform::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_BreakTransform_Location_1) == 0x0001A8, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_BreakTransform_Location_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_BreakTransform_Rotation_1) == 0x0001B4, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_BreakTransform_Rotation_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_BreakTransform_Scale_1) == 0x0001C0, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_BreakTransform_Scale_1' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_GetSocketTransform_ReturnValue) == 0x0001D0, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_GetSocketTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_Add_VectorVector_ReturnValue) == 0x000200, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_BreakTransform_Location_2) == 0x00020C, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_BreakTransform_Location_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_BreakTransform_Rotation_2) == 0x000218, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_BreakTransform_Rotation_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_BreakTransform_Scale_2) == 0x000224, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_BreakTransform_Scale_2' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_MakeTransform_ReturnValue) == 0x000230, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetSocketTransform, CallFunc_MakeTransform_ReturnValue_1) == 0x000260, "Member 'BP_BtlPerformer_C_GetSocketTransform::CallFunc_MakeTransform_ReturnValue_1' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.GetCylinderHight
// 0x00C0 (0x00C0 - 0x0000)
struct BP_BtlPerformer_C_GetCylinderHight final
{
public:
	float                                         Rato;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCommonCylinder;                                 // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_5[0xB];                                        // 0x0005(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Output;                                            // 0x0010(0x0030)(Parm, OutParm, IsPlainOldData, NoDestructor)
	float                                         Height;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0044(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_CenterBottom;           // 0x0050(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Radius;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetCylinderCommon_Height;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_CenterCylinder;         // 0x0064(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCylinderCommon_LocalCylinderLocation;  // 0x0070(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0080(0x0030)(IsPlainOldData, NoDestructor)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BtlPerformer_C_GetCylinderHight) == 0x000010, "Wrong alignment on BP_BtlPerformer_C_GetCylinderHight");
static_assert(sizeof(BP_BtlPerformer_C_GetCylinderHight) == 0x0000C0, "Wrong size on BP_BtlPerformer_C_GetCylinderHight");
static_assert(offsetof(BP_BtlPerformer_C_GetCylinderHight, Rato) == 0x000000, "Member 'BP_BtlPerformer_C_GetCylinderHight::Rato' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetCylinderHight, UseCommonCylinder) == 0x000004, "Member 'BP_BtlPerformer_C_GetCylinderHight::UseCommonCylinder' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetCylinderHight, Output) == 0x000010, "Member 'BP_BtlPerformer_C_GetCylinderHight::Output' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetCylinderHight, Height) == 0x000040, "Member 'BP_BtlPerformer_C_GetCylinderHight::Height' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetCylinderHight, CallFunc_MakeVector_ReturnValue) == 0x000044, "Member 'BP_BtlPerformer_C_GetCylinderHight::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetCylinderHight, CallFunc_GetCylinderCommon_CenterBottom) == 0x000050, "Member 'BP_BtlPerformer_C_GetCylinderHight::CallFunc_GetCylinderCommon_CenterBottom' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetCylinderHight, CallFunc_GetCylinderCommon_Radius) == 0x00005C, "Member 'BP_BtlPerformer_C_GetCylinderHight::CallFunc_GetCylinderCommon_Radius' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetCylinderHight, CallFunc_GetCylinderCommon_Height) == 0x000060, "Member 'BP_BtlPerformer_C_GetCylinderHight::CallFunc_GetCylinderCommon_Height' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetCylinderHight, CallFunc_GetCylinderCommon_CenterCylinder) == 0x000064, "Member 'BP_BtlPerformer_C_GetCylinderHight::CallFunc_GetCylinderCommon_CenterCylinder' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetCylinderHight, CallFunc_GetCylinderCommon_LocalCylinderLocation) == 0x000070, "Member 'BP_BtlPerformer_C_GetCylinderHight::CallFunc_GetCylinderCommon_LocalCylinderLocation' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetCylinderHight, CallFunc_MakeTransform_ReturnValue) == 0x000080, "Member 'BP_BtlPerformer_C_GetCylinderHight::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_GetCylinderHight, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x0000B0, "Member 'BP_BtlPerformer_C_GetCylinderHight::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.Clear
// 0x0020 (0x0020 - 0x0000)
struct BP_BtlPerformer_C_Clear final
{
public:
	class ABP_BtlCharacterBase_C*                 CallFunc_GetCharacter_Character;                   // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharacterBase_C*                    CallFunc_GetAppCharacterActor_Character;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_Clear) == 0x000008, "Wrong alignment on BP_BtlPerformer_C_Clear");
static_assert(sizeof(BP_BtlPerformer_C_Clear) == 0x000020, "Wrong size on BP_BtlPerformer_C_Clear");
static_assert(offsetof(BP_BtlPerformer_C_Clear, CallFunc_GetCharacter_Character) == 0x000000, "Member 'BP_BtlPerformer_C_Clear::CallFunc_GetCharacter_Character' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_Clear, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_BtlPerformer_C_Clear::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_Clear, CallFunc_GetAppCharacterActor_Character) == 0x000010, "Member 'BP_BtlPerformer_C_Clear::CallFunc_GetAppCharacterActor_Character' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_Clear, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'BP_BtlPerformer_C_Clear::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.UpdateEachTick
// 0x0028 (0x0028 - 0x0000)
struct BP_BtlPerformer_C_UpdateEachTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BtlCharacterBase_C*                 CallFunc_GetCharacter_Character;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_CharacterBase_C*                    CallFunc_GetAppCharacterActor_Character;           // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_UpdateEachTick) == 0x000008, "Wrong alignment on BP_BtlPerformer_C_UpdateEachTick");
static_assert(sizeof(BP_BtlPerformer_C_UpdateEachTick) == 0x000028, "Wrong size on BP_BtlPerformer_C_UpdateEachTick");
static_assert(offsetof(BP_BtlPerformer_C_UpdateEachTick, DeltaTime) == 0x000000, "Member 'BP_BtlPerformer_C_UpdateEachTick::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_UpdateEachTick, CallFunc_GetCharacter_Character) == 0x000008, "Member 'BP_BtlPerformer_C_UpdateEachTick::CallFunc_GetCharacter_Character' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_UpdateEachTick, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_BtlPerformer_C_UpdateEachTick::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_UpdateEachTick, CallFunc_GetAppCharacterActor_Character) == 0x000018, "Member 'BP_BtlPerformer_C_UpdateEachTick::CallFunc_GetAppCharacterActor_Character' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_UpdateEachTick, CallFunc_IsValid_ReturnValue_1) == 0x000020, "Member 'BP_BtlPerformer_C_UpdateEachTick::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_BtlPerformer.BP_BtlPerformer_C.IsEnemyTeammates
// 0x000C (0x000C - 0x0000)
struct BP_BtlPerformer_C_IsEnemyTeammates final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetID_ReturnValue;                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsPlayingAstrea_ReturnValue;              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_BtlPerformer_C_IsEnemyTeammates) == 0x000004, "Wrong alignment on BP_BtlPerformer_C_IsEnemyTeammates");
static_assert(sizeof(BP_BtlPerformer_C_IsEnemyTeammates) == 0x00000C, "Wrong size on BP_BtlPerformer_C_IsEnemyTeammates");
static_assert(offsetof(BP_BtlPerformer_C_IsEnemyTeammates, Result) == 0x000000, "Member 'BP_BtlPerformer_C_IsEnemyTeammates::Result' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_IsEnemyTeammates, CallFunc_IsValid_ReturnValue) == 0x000001, "Member 'BP_BtlPerformer_C_IsEnemyTeammates::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_IsEnemyTeammates, CallFunc_GetID_ReturnValue) == 0x000004, "Member 'BP_BtlPerformer_C_IsEnemyTeammates::CallFunc_GetID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_IsEnemyTeammates, K2Node_SwitchInteger_CmpSuccess) == 0x000008, "Member 'BP_BtlPerformer_C_IsEnemyTeammates::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_BtlPerformer_C_IsEnemyTeammates, CallFunc_IsPlayingAstrea_ReturnValue) == 0x000009, "Member 'BP_BtlPerformer_C_IsEnemyTeammates::CallFunc_IsPlayingAstrea_ReturnValue' has a wrong offset!");

}

