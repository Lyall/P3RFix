#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlSkillBase

#include "Basic.hpp"

#include "BP_BtlSkillBase_classes.hpp"
#include "BP_BtlSkillBase_parameters.hpp"


namespace SDK
{

// Function BP_BtlSkillBase.BP_BtlSkillBase_C.Skill End__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_BtlSkillBase_C::Skill_End__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "Skill End__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.ExecuteUbergraph_BP_BtlSkillBase
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlSkillBase_C::ExecuteUbergraph_BP_BtlSkillBase(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "ExecuteUbergraph_BP_BtlSkillBase");

	Params::BP_BtlSkillBase_C_ExecuteUbergraph_BP_BtlSkillBase Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BtlSkillBase_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.On Skill Play For Test Mode
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BtlTargetManager_C*           TargetManager                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlSkillBase_C::On_Skill_Play_For_Test_Mode(class UBP_BtlTargetManager_C* TargetManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "On Skill Play For Test Mode");

	Params::BP_BtlSkillBase_C_On_Skill_Play_For_Test_Mode Parms{};

	Parms.TargetManager = TargetManager;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.On Destroy
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlSkillBase_C::On_Destroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "On Destroy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.Skill Destroy
// (BlueprintCallable, BlueprintEvent)

void ABP_BtlSkillBase_C::Skill_Destroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "Skill Destroy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.On Skill Play
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BtlTargetManager_C*           Target_Manager_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_BtlEnvironment_C*             BtlEnv                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlSkillBase_C::On_Skill_Play(class UBP_BtlTargetManager_C* Target_Manager_0, class UBP_BtlEnvironment_C* BtlEnv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "On Skill Play");

	Params::BP_BtlSkillBase_C_On_Skill_Play Parms{};

	Parms.Target_Manager_0 = Target_Manager_0;
	Parms.BtlEnv = BtlEnv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlSkillBase_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "ReceiveTick");

	Params::BP_BtlSkillBase_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlSkillBase_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.Request VFX to Targets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBtlSkillParam                   Skill_Paramater                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// TArray<class ABtlActor*>                Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_BtlSkillBase_C::Request_VFX_to_Targets(const struct FBtlSkillParam& Skill_Paramater, TArray<class ABtlActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "Request VFX to Targets");

	Params::BP_BtlSkillBase_C_Request_VFX_to_Targets Parms{};

	Parms.Skill_Paramater = std::move(Skill_Paramater);
	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.Request VFX to Enchanter
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBtlSkillParam                   SkillParameter                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class ABtlActor*                        Enchanter                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlSkillBase_C::Request_VFX_to_Enchanter(const struct FBtlSkillParam& SkillParameter, class ABtlActor* Enchanter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "Request VFX to Enchanter");

	Params::BP_BtlSkillBase_C_Request_VFX_to_Enchanter Parms{};

	Parms.SkillParameter = std::move(SkillParameter);
	Parms.Enchanter = Enchanter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.MonitorRequests
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlSkillBase_C::MonitorRequests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "MonitorRequests");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.RefleshRequests
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlSkillBase_C::RefleshRequests()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "RefleshRequests");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.Request VFX to field
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBtlSkillParam                   SkillParameter                                         (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// class UBtlTargetsManagerComponent*      TargetsPackage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlSkillBase_C::Request_VFX_to_field(const struct FBtlSkillParam& SkillParameter, class UBtlTargetsManagerComponent* TargetsPackage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "Request VFX to field");

	Params::BP_BtlSkillBase_C_Request_VFX_to_field Parms{};

	Parms.SkillParameter = std::move(SkillParameter);
	Parms.TargetsPackage = TargetsPackage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.CalcLocation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABtlActor*>                Btl_Actor                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EBtlSkillTargetType                     Target_Type                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBtlSkillPositionTargetType             Position_Type                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBtlSkillPositionHeightType             Position_Height_Type                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBtlSkillDirectionTargetType            Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlSkillBase_C::CalcLocation(TArray<class ABtlActor*>& Btl_Actor, EBtlSkillTargetType Target_Type, EBtlSkillPositionTargetType Position_Type, EBtlSkillPositionHeightType Position_Height_Type, EBtlSkillDirectionTargetType Direction, struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "CalcLocation");

	Params::BP_BtlSkillBase_C_CalcLocation Parms{};

	Parms.Btl_Actor = std::move(Btl_Actor);
	Parms.Target_Type = Target_Type;
	Parms.Position_Type = Position_Type;
	Parms.Position_Height_Type = Position_Height_Type;
	Parms.Direction = Direction;

	UObject::ProcessEvent(Func, &Parms);

	Btl_Actor = std::move(Parms.Btl_Actor);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.CalcCylinderLocation
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABtlActor*                        Btl_Actor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBtlSkillPositionHeightType             Height_Type                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Trans                                                  (Parm, OutParm, IsPlainOldData, NoDestructor)

void ABP_BtlSkillBase_C::CalcCylinderLocation(class ABtlActor* Btl_Actor, EBtlSkillPositionHeightType Height_Type, struct FTransform* Trans)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "CalcCylinderLocation");

	Params::BP_BtlSkillBase_C_CalcCylinderLocation Parms{};

	Parms.Btl_Actor = Btl_Actor;
	Parms.Height_Type = Height_Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Trans != nullptr)
		*Trans = std::move(Parms.Trans);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.TurningEnvironment
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BtlEnvironment_C*             BtlEnv                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlSkillBase_C::TurningEnvironment(class UBP_BtlEnvironment_C* BtlEnv)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "TurningEnvironment");

	Params::BP_BtlSkillBase_C_TurningEnvironment Parms{};

	Parms.BtlEnv = BtlEnv;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.GetTargets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_BtlCharacterBase_C*>   CharaList                                              (Parm, OutParm)

void ABP_BtlSkillBase_C::GetTargets(TArray<class ABP_BtlCharacterBase_C*>* CharaList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "GetTargets");

	Params::BP_BtlSkillBase_C_GetTargets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CharaList != nullptr)
		*CharaList = std::move(Parms.CharaList);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.CalcDestroyTime
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BtlSkillBase_C::CalcDestroyTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "CalcDestroyTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.Calc Additional Location
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABtlActor*                        Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBtlSkillDirectionTargetType            Direction                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBtlSkillTargetType                     TargetType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Trans                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotate                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BtlSkillBase_C::Calc_Additional_Location(class ABtlActor* Target, EBtlSkillDirectionTargetType Direction, EBtlSkillTargetType TargetType, struct FVector* Trans, struct FRotator* Rotate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "Calc Additional Location");

	Params::BP_BtlSkillBase_C_Calc_Additional_Location Parms{};

	Parms.Target = Target;
	Parms.Direction = Direction;
	Parms.TargetType = TargetType;

	UObject::ProcessEvent(Func, &Parms);

	if (Trans != nullptr)
		*Trans = std::move(Parms.Trans);

	if (Rotate != nullptr)
		*Rotate = std::move(Parms.Rotate);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.Request VFX to Target Group
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBtlSkillParam                   Skill_Paramater                                        (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// TArray<class ABtlActor*>                Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_BtlSkillBase_C::Request_VFX_to_Target_Group(const struct FBtlSkillParam& Skill_Paramater, TArray<class ABtlActor*>& Targets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "Request VFX to Target Group");

	Params::BP_BtlSkillBase_C_Request_VFX_to_Target_Group Parms{};

	Parms.Skill_Paramater = std::move(Skill_Paramater);
	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);
}


// Function BP_BtlSkillBase.BP_BtlSkillBase_C.GetEnchanter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_BtlCharacterBase_C*           Character                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BtlSkillBase_C::GetEnchanter(class ABP_BtlCharacterBase_C** Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BtlSkillBase_C", "GetEnchanter");

	Params::BP_BtlSkillBase_C_GetEnchanter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Character != nullptr)
		*Character = Parms.Character;
}

}

