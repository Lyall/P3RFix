#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CharacterBase

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CharacterBase_structs.hpp"


namespace SDK::Params
{

// Function CharacterBase.CharacterBaseBpLib.GetSoftClassPath
// 0x0040 (0x0040 - 0x0000)
struct CharacterBaseBpLib_GetSoftClassPath final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAnimBlueprint>          AnimBP;                                            // 0x0008(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBaseBpLib_GetSoftClassPath) == 0x000008, "Wrong alignment on CharacterBaseBpLib_GetSoftClassPath");
static_assert(sizeof(CharacterBaseBpLib_GetSoftClassPath) == 0x000040, "Wrong size on CharacterBaseBpLib_GetSoftClassPath");
static_assert(offsetof(CharacterBaseBpLib_GetSoftClassPath, WorldContextObject) == 0x000000, "Member 'CharacterBaseBpLib_GetSoftClassPath::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterBaseBpLib_GetSoftClassPath, AnimBP) == 0x000008, "Member 'CharacterBaseBpLib_GetSoftClassPath::AnimBP' has a wrong offset!");
static_assert(offsetof(CharacterBaseBpLib_GetSoftClassPath, ReturnValue) == 0x000030, "Member 'CharacterBaseBpLib_GetSoftClassPath::ReturnValue' has a wrong offset!");

// Function CharacterBase.AnimInstanceCore.GetLookAtTargetActor
// 0x0008 (0x0008 - 0x0000)
struct AnimInstanceCore_GetLookAtTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceCore_GetLookAtTargetActor) == 0x000008, "Wrong alignment on AnimInstanceCore_GetLookAtTargetActor");
static_assert(sizeof(AnimInstanceCore_GetLookAtTargetActor) == 0x000008, "Wrong size on AnimInstanceCore_GetLookAtTargetActor");
static_assert(offsetof(AnimInstanceCore_GetLookAtTargetActor, ReturnValue) == 0x000000, "Member 'AnimInstanceCore_GetLookAtTargetActor::ReturnValue' has a wrong offset!");

// Function CharacterBase.AnimInstanceCore.GetLookAtTargetActorBoneName
// 0x0010 (0x0010 - 0x0000)
struct AnimInstanceCore_GetLookAtTargetActorBoneName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceCore_GetLookAtTargetActorBoneName) == 0x000008, "Wrong alignment on AnimInstanceCore_GetLookAtTargetActorBoneName");
static_assert(sizeof(AnimInstanceCore_GetLookAtTargetActorBoneName) == 0x000010, "Wrong size on AnimInstanceCore_GetLookAtTargetActorBoneName");
static_assert(offsetof(AnimInstanceCore_GetLookAtTargetActorBoneName, ReturnValue) == 0x000000, "Member 'AnimInstanceCore_GetLookAtTargetActorBoneName::ReturnValue' has a wrong offset!");

// Function CharacterBase.AnimInstanceCore.GetLookAtType
// 0x0001 (0x0001 - 0x0000)
struct AnimInstanceCore_GetLookAtType final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceCore_GetLookAtType) == 0x000001, "Wrong alignment on AnimInstanceCore_GetLookAtType");
static_assert(sizeof(AnimInstanceCore_GetLookAtType) == 0x000001, "Wrong size on AnimInstanceCore_GetLookAtType");
static_assert(offsetof(AnimInstanceCore_GetLookAtType, ReturnValue) == 0x000000, "Member 'AnimInstanceCore_GetLookAtType::ReturnValue' has a wrong offset!");

// Function CharacterBase.AnimInstanceCore.GetLookAtWorldLocation
// 0x000C (0x000C - 0x0000)
struct AnimInstanceCore_GetLookAtWorldLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceCore_GetLookAtWorldLocation) == 0x000004, "Wrong alignment on AnimInstanceCore_GetLookAtWorldLocation");
static_assert(sizeof(AnimInstanceCore_GetLookAtWorldLocation) == 0x00000C, "Wrong size on AnimInstanceCore_GetLookAtWorldLocation");
static_assert(offsetof(AnimInstanceCore_GetLookAtWorldLocation, ReturnValue) == 0x000000, "Member 'AnimInstanceCore_GetLookAtWorldLocation::ReturnValue' has a wrong offset!");

// Function CharacterBase.AnimInstanceCore.IsPlaySlotAnimation
// 0x000C (0x000C - 0x0000)
struct AnimInstanceCore_IsPlaySlotAnimation final
{
public:
	class FName                                   InAnimSlotName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimInstanceCore_IsPlaySlotAnimation) == 0x000004, "Wrong alignment on AnimInstanceCore_IsPlaySlotAnimation");
static_assert(sizeof(AnimInstanceCore_IsPlaySlotAnimation) == 0x00000C, "Wrong size on AnimInstanceCore_IsPlaySlotAnimation");
static_assert(offsetof(AnimInstanceCore_IsPlaySlotAnimation, InAnimSlotName) == 0x000000, "Member 'AnimInstanceCore_IsPlaySlotAnimation::InAnimSlotName' has a wrong offset!");
static_assert(offsetof(AnimInstanceCore_IsPlaySlotAnimation, ReturnValue) == 0x000008, "Member 'AnimInstanceCore_IsPlaySlotAnimation::ReturnValue' has a wrong offset!");

// Function CharacterBase.AnimInstanceCore.SetLookAtTargetActor
// 0x0008 (0x0008 - 0x0000)
struct AnimInstanceCore_SetLookAtTargetActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceCore_SetLookAtTargetActor) == 0x000008, "Wrong alignment on AnimInstanceCore_SetLookAtTargetActor");
static_assert(sizeof(AnimInstanceCore_SetLookAtTargetActor) == 0x000008, "Wrong size on AnimInstanceCore_SetLookAtTargetActor");
static_assert(offsetof(AnimInstanceCore_SetLookAtTargetActor, TargetActor) == 0x000000, "Member 'AnimInstanceCore_SetLookAtTargetActor::TargetActor' has a wrong offset!");

// Function CharacterBase.AnimInstanceCore.SetLookAtTargetActorBoneName
// 0x0010 (0x0010 - 0x0000)
struct AnimInstanceCore_SetLookAtTargetActorBoneName final
{
public:
	class FString                                 BoneName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceCore_SetLookAtTargetActorBoneName) == 0x000008, "Wrong alignment on AnimInstanceCore_SetLookAtTargetActorBoneName");
static_assert(sizeof(AnimInstanceCore_SetLookAtTargetActorBoneName) == 0x000010, "Wrong size on AnimInstanceCore_SetLookAtTargetActorBoneName");
static_assert(offsetof(AnimInstanceCore_SetLookAtTargetActorBoneName, BoneName) == 0x000000, "Member 'AnimInstanceCore_SetLookAtTargetActorBoneName::BoneName' has a wrong offset!");

// Function CharacterBase.AnimInstanceCore.SetLookAtType
// 0x0001 (0x0001 - 0x0000)
struct AnimInstanceCore_SetLookAtType final
{
public:
	uint8                                         LookAtType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceCore_SetLookAtType) == 0x000001, "Wrong alignment on AnimInstanceCore_SetLookAtType");
static_assert(sizeof(AnimInstanceCore_SetLookAtType) == 0x000001, "Wrong size on AnimInstanceCore_SetLookAtType");
static_assert(offsetof(AnimInstanceCore_SetLookAtType, LookAtType) == 0x000000, "Member 'AnimInstanceCore_SetLookAtType::LookAtType' has a wrong offset!");

// Function CharacterBase.AnimInstanceCore.SetLookAtWorldLocation
// 0x000C (0x000C - 0x0000)
struct AnimInstanceCore_SetLookAtWorldLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceCore_SetLookAtWorldLocation) == 0x000004, "Wrong alignment on AnimInstanceCore_SetLookAtWorldLocation");
static_assert(sizeof(AnimInstanceCore_SetLookAtWorldLocation) == 0x00000C, "Wrong size on AnimInstanceCore_SetLookAtWorldLocation");
static_assert(offsetof(AnimInstanceCore_SetLookAtWorldLocation, Location) == 0x000000, "Member 'AnimInstanceCore_SetLookAtWorldLocation::Location' has a wrong offset!");

// Function CharacterBase.AnimInstanceCore.SetOverrideLocomotionNotMoveAnim
// 0x0008 (0x0008 - 0x0000)
struct AnimInstanceCore_SetOverrideLocomotionNotMoveAnim final
{
public:
	class UAnimSequence*                          InAnimSeq;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimInstanceCore_SetOverrideLocomotionNotMoveAnim) == 0x000008, "Wrong alignment on AnimInstanceCore_SetOverrideLocomotionNotMoveAnim");
static_assert(sizeof(AnimInstanceCore_SetOverrideLocomotionNotMoveAnim) == 0x000008, "Wrong size on AnimInstanceCore_SetOverrideLocomotionNotMoveAnim");
static_assert(offsetof(AnimInstanceCore_SetOverrideLocomotionNotMoveAnim, InAnimSeq) == 0x000000, "Member 'AnimInstanceCore_SetOverrideLocomotionNotMoveAnim::InAnimSeq' has a wrong offset!");

// Function CharacterBase.CharacterBaseCore.GetCompLastRenderTimeOnScreen
// 0x0010 (0x0010 - 0x0000)
struct CharacterBaseCore_GetCompLastRenderTimeOnScreen final
{
public:
	class UPrimitiveComponent*                    MeshComp;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterBaseCore_GetCompLastRenderTimeOnScreen) == 0x000008, "Wrong alignment on CharacterBaseCore_GetCompLastRenderTimeOnScreen");
static_assert(sizeof(CharacterBaseCore_GetCompLastRenderTimeOnScreen) == 0x000010, "Wrong size on CharacterBaseCore_GetCompLastRenderTimeOnScreen");
static_assert(offsetof(CharacterBaseCore_GetCompLastRenderTimeOnScreen, MeshComp) == 0x000000, "Member 'CharacterBaseCore_GetCompLastRenderTimeOnScreen::MeshComp' has a wrong offset!");
static_assert(offsetof(CharacterBaseCore_GetCompLastRenderTimeOnScreen, ReturnValue) == 0x000008, "Member 'CharacterBaseCore_GetCompLastRenderTimeOnScreen::ReturnValue' has a wrong offset!");

// Function CharacterBase.CharacterBaseCore.GetLastRenderTimeOnScreen
// 0x0004 (0x0004 - 0x0000)
struct CharacterBaseCore_GetLastRenderTimeOnScreen final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterBaseCore_GetLastRenderTimeOnScreen) == 0x000004, "Wrong alignment on CharacterBaseCore_GetLastRenderTimeOnScreen");
static_assert(sizeof(CharacterBaseCore_GetLastRenderTimeOnScreen) == 0x000004, "Wrong size on CharacterBaseCore_GetLastRenderTimeOnScreen");
static_assert(offsetof(CharacterBaseCore_GetLastRenderTimeOnScreen, ReturnValue) == 0x000000, "Member 'CharacterBaseCore_GetLastRenderTimeOnScreen::ReturnValue' has a wrong offset!");

// Function CharacterBase.CharacterBaseCore.GetMontageSectionName
// 0x0018 (0x0018 - 0x0000)
struct CharacterBaseCore_GetMontageSectionName final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterBaseCore_GetMontageSectionName) == 0x000008, "Wrong alignment on CharacterBaseCore_GetMontageSectionName");
static_assert(sizeof(CharacterBaseCore_GetMontageSectionName) == 0x000018, "Wrong size on CharacterBaseCore_GetMontageSectionName");
static_assert(offsetof(CharacterBaseCore_GetMontageSectionName, Montage) == 0x000000, "Member 'CharacterBaseCore_GetMontageSectionName::Montage' has a wrong offset!");
static_assert(offsetof(CharacterBaseCore_GetMontageSectionName, Index_0) == 0x000008, "Member 'CharacterBaseCore_GetMontageSectionName::Index_0' has a wrong offset!");
static_assert(offsetof(CharacterBaseCore_GetMontageSectionName, ReturnValue) == 0x00000C, "Member 'CharacterBaseCore_GetMontageSectionName::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobBaseAiControllerCore.AddPointIndex
// 0x0004 (0x0004 - 0x0000)
struct MobBaseAiControllerCore_AddPointIndex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobBaseAiControllerCore_AddPointIndex) == 0x000004, "Wrong alignment on MobBaseAiControllerCore_AddPointIndex");
static_assert(sizeof(MobBaseAiControllerCore_AddPointIndex) == 0x000004, "Wrong size on MobBaseAiControllerCore_AddPointIndex");
static_assert(offsetof(MobBaseAiControllerCore_AddPointIndex, Value) == 0x000000, "Member 'MobBaseAiControllerCore_AddPointIndex::Value' has a wrong offset!");

// Function CharacterBase.MobBaseAiControllerCore.GetPointIndex
// 0x0004 (0x0004 - 0x0000)
struct MobBaseAiControllerCore_GetPointIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobBaseAiControllerCore_GetPointIndex) == 0x000004, "Wrong alignment on MobBaseAiControllerCore_GetPointIndex");
static_assert(sizeof(MobBaseAiControllerCore_GetPointIndex) == 0x000004, "Wrong size on MobBaseAiControllerCore_GetPointIndex");
static_assert(offsetof(MobBaseAiControllerCore_GetPointIndex, ReturnValue) == 0x000000, "Member 'MobBaseAiControllerCore_GetPointIndex::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobBaseAiControllerCore.GetPointIndexLAST
// 0x0004 (0x0004 - 0x0000)
struct MobBaseAiControllerCore_GetPointIndexLAST final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobBaseAiControllerCore_GetPointIndexLAST) == 0x000004, "Wrong alignment on MobBaseAiControllerCore_GetPointIndexLAST");
static_assert(sizeof(MobBaseAiControllerCore_GetPointIndexLAST) == 0x000004, "Wrong size on MobBaseAiControllerCore_GetPointIndexLAST");
static_assert(offsetof(MobBaseAiControllerCore_GetPointIndexLAST, ReturnValue) == 0x000000, "Member 'MobBaseAiControllerCore_GetPointIndexLAST::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobBaseAiControllerCore.SetPointIndex
// 0x0004 (0x0004 - 0x0000)
struct MobBaseAiControllerCore_SetPointIndex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobBaseAiControllerCore_SetPointIndex) == 0x000004, "Wrong alignment on MobBaseAiControllerCore_SetPointIndex");
static_assert(sizeof(MobBaseAiControllerCore_SetPointIndex) == 0x000004, "Wrong size on MobBaseAiControllerCore_SetPointIndex");
static_assert(offsetof(MobBaseAiControllerCore_SetPointIndex, Value) == 0x000000, "Member 'MobBaseAiControllerCore_SetPointIndex::Value' has a wrong offset!");

// Function CharacterBase.MobBaseAiControllerCore.UpdateActorBlueprint
// 0x0008 (0x0008 - 0x0000)
struct MobBaseAiControllerCore_UpdateActorBlueprint final
{
public:
	float                                         WalkSpeedRatio;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobBaseAiControllerCore_UpdateActorBlueprint) == 0x000004, "Wrong alignment on MobBaseAiControllerCore_UpdateActorBlueprint");
static_assert(sizeof(MobBaseAiControllerCore_UpdateActorBlueprint) == 0x000008, "Wrong size on MobBaseAiControllerCore_UpdateActorBlueprint");
static_assert(offsetof(MobBaseAiControllerCore_UpdateActorBlueprint, WalkSpeedRatio) == 0x000000, "Member 'MobBaseAiControllerCore_UpdateActorBlueprint::WalkSpeedRatio' has a wrong offset!");
static_assert(offsetof(MobBaseAiControllerCore_UpdateActorBlueprint, DeltaTime) == 0x000004, "Member 'MobBaseAiControllerCore_UpdateActorBlueprint::DeltaTime' has a wrong offset!");

// Function CharacterBase.MobBaseAiControllerCore.UpdateProc
// 0x0004 (0x0004 - 0x0000)
struct MobBaseAiControllerCore_UpdateProc final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobBaseAiControllerCore_UpdateProc) == 0x000004, "Wrong alignment on MobBaseAiControllerCore_UpdateProc");
static_assert(sizeof(MobBaseAiControllerCore_UpdateProc) == 0x000004, "Wrong size on MobBaseAiControllerCore_UpdateProc");
static_assert(offsetof(MobBaseAiControllerCore_UpdateProc, DeltaTime) == 0x000000, "Member 'MobBaseAiControllerCore_UpdateProc::DeltaTime' has a wrong offset!");

// Function CharacterBase.MobBaseAiControllerCore.GetOwnerActor
// 0x0008 (0x0008 - 0x0000)
struct MobBaseAiControllerCore_GetOwnerActor final
{
public:
	class AMobWalkCharaBaseCore*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobBaseAiControllerCore_GetOwnerActor) == 0x000008, "Wrong alignment on MobBaseAiControllerCore_GetOwnerActor");
static_assert(sizeof(MobBaseAiControllerCore_GetOwnerActor) == 0x000008, "Wrong size on MobBaseAiControllerCore_GetOwnerActor");
static_assert(offsetof(MobBaseAiControllerCore_GetOwnerActor, ReturnValue) == 0x000000, "Member 'MobBaseAiControllerCore_GetOwnerActor::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobBaseAiControllerCore.GetRoutePointNEXT
// 0x0040 (0x0040 - 0x0000)
struct MobBaseAiControllerCore_GetRoutePointNEXT final
{
public:
	struct FMobWalkRoutePoint                     ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobBaseAiControllerCore_GetRoutePointNEXT) == 0x000010, "Wrong alignment on MobBaseAiControllerCore_GetRoutePointNEXT");
static_assert(sizeof(MobBaseAiControllerCore_GetRoutePointNEXT) == 0x000040, "Wrong size on MobBaseAiControllerCore_GetRoutePointNEXT");
static_assert(offsetof(MobBaseAiControllerCore_GetRoutePointNEXT, ReturnValue) == 0x000000, "Member 'MobBaseAiControllerCore_GetRoutePointNEXT::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobBaseAiControllerCore.GetRoutePointNOW
// 0x0040 (0x0040 - 0x0000)
struct MobBaseAiControllerCore_GetRoutePointNOW final
{
public:
	struct FMobWalkRoutePoint                     ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobBaseAiControllerCore_GetRoutePointNOW) == 0x000010, "Wrong alignment on MobBaseAiControllerCore_GetRoutePointNOW");
static_assert(sizeof(MobBaseAiControllerCore_GetRoutePointNOW) == 0x000040, "Wrong size on MobBaseAiControllerCore_GetRoutePointNOW");
static_assert(offsetof(MobBaseAiControllerCore_GetRoutePointNOW, ReturnValue) == 0x000000, "Member 'MobBaseAiControllerCore_GetRoutePointNOW::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobCharaBaseListener.UpdateMobChara
// 0x0004 (0x0004 - 0x0000)
struct MobCharaBaseListener_UpdateMobChara final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobCharaBaseListener_UpdateMobChara) == 0x000004, "Wrong alignment on MobCharaBaseListener_UpdateMobChara");
static_assert(sizeof(MobCharaBaseListener_UpdateMobChara) == 0x000004, "Wrong size on MobCharaBaseListener_UpdateMobChara");
static_assert(offsetof(MobCharaBaseListener_UpdateMobChara, DeltaTime) == 0x000000, "Member 'MobCharaBaseListener_UpdateMobChara::DeltaTime' has a wrong offset!");

// Function CharacterBase.MobWalkTarget.GetTargetType
// 0x0001 (0x0001 - 0x0000)
struct MobWalkTarget_GetTargetType final
{
public:
	EMobWalkTargetType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkTarget_GetTargetType) == 0x000001, "Wrong alignment on MobWalkTarget_GetTargetType");
static_assert(sizeof(MobWalkTarget_GetTargetType) == 0x000001, "Wrong size on MobWalkTarget_GetTargetType");
static_assert(offsetof(MobWalkTarget_GetTargetType, ReturnValue) == 0x000000, "Member 'MobWalkTarget_GetTargetType::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.AddPointList
// 0x0040 (0x0040 - 0x0000)
struct MobWalkCharaBaseCore_AddPointList final
{
public:
	struct FMobWalkRoutePoint                     InPoint;                                           // 0x0000(0x0040)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_AddPointList) == 0x000010, "Wrong alignment on MobWalkCharaBaseCore_AddPointList");
static_assert(sizeof(MobWalkCharaBaseCore_AddPointList) == 0x000040, "Wrong size on MobWalkCharaBaseCore_AddPointList");
static_assert(offsetof(MobWalkCharaBaseCore_AddPointList, InPoint) == 0x000000, "Member 'MobWalkCharaBaseCore_AddPointList::InPoint' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.GetPointListMax
// 0x0004 (0x0004 - 0x0000)
struct MobWalkCharaBaseCore_GetPointListMax final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_GetPointListMax) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_GetPointListMax");
static_assert(sizeof(MobWalkCharaBaseCore_GetPointListMax) == 0x000004, "Wrong size on MobWalkCharaBaseCore_GetPointListMax");
static_assert(offsetof(MobWalkCharaBaseCore_GetPointListMax, ReturnValue) == 0x000000, "Member 'MobWalkCharaBaseCore_GetPointListMax::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.SetBpIndex
// 0x0004 (0x0004 - 0x0000)
struct MobWalkCharaBaseCore_SetBpIndex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_SetBpIndex) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_SetBpIndex");
static_assert(sizeof(MobWalkCharaBaseCore_SetBpIndex) == 0x000004, "Wrong size on MobWalkCharaBaseCore_SetBpIndex");
static_assert(offsetof(MobWalkCharaBaseCore_SetBpIndex, Value) == 0x000000, "Member 'MobWalkCharaBaseCore_SetBpIndex::Value' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.SetFollowParent
// 0x0008 (0x0008 - 0x0000)
struct MobWalkCharaBaseCore_SetFollowParent final
{
public:
	class AActor*                                 InParent;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_SetFollowParent) == 0x000008, "Wrong alignment on MobWalkCharaBaseCore_SetFollowParent");
static_assert(sizeof(MobWalkCharaBaseCore_SetFollowParent) == 0x000008, "Wrong size on MobWalkCharaBaseCore_SetFollowParent");
static_assert(offsetof(MobWalkCharaBaseCore_SetFollowParent, InParent) == 0x000000, "Member 'MobWalkCharaBaseCore_SetFollowParent::InParent' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.SetFollowRelativeLocation
// 0x000C (0x000C - 0x0000)
struct MobWalkCharaBaseCore_SetFollowRelativeLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_SetFollowRelativeLocation) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_SetFollowRelativeLocation");
static_assert(sizeof(MobWalkCharaBaseCore_SetFollowRelativeLocation) == 0x00000C, "Wrong size on MobWalkCharaBaseCore_SetFollowRelativeLocation");
static_assert(offsetof(MobWalkCharaBaseCore_SetFollowRelativeLocation, InLocation) == 0x000000, "Member 'MobWalkCharaBaseCore_SetFollowRelativeLocation::InLocation' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.SetOpacityCore
// 0x0004 (0x0004 - 0x0000)
struct MobWalkCharaBaseCore_SetOpacityCore final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_SetOpacityCore) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_SetOpacityCore");
static_assert(sizeof(MobWalkCharaBaseCore_SetOpacityCore) == 0x000004, "Wrong size on MobWalkCharaBaseCore_SetOpacityCore");
static_assert(offsetof(MobWalkCharaBaseCore_SetOpacityCore, Value) == 0x000000, "Member 'MobWalkCharaBaseCore_SetOpacityCore::Value' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.SetPointIndex
// 0x0004 (0x0004 - 0x0000)
struct MobWalkCharaBaseCore_SetPointIndex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_SetPointIndex) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_SetPointIndex");
static_assert(sizeof(MobWalkCharaBaseCore_SetPointIndex) == 0x000004, "Wrong size on MobWalkCharaBaseCore_SetPointIndex");
static_assert(offsetof(MobWalkCharaBaseCore_SetPointIndex, Value) == 0x000000, "Member 'MobWalkCharaBaseCore_SetPointIndex::Value' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.SetStartLocation
// 0x000C (0x000C - 0x0000)
struct MobWalkCharaBaseCore_SetStartLocation final
{
public:
	struct FVector                                InLocation;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_SetStartLocation) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_SetStartLocation");
static_assert(sizeof(MobWalkCharaBaseCore_SetStartLocation) == 0x00000C, "Wrong size on MobWalkCharaBaseCore_SetStartLocation");
static_assert(offsetof(MobWalkCharaBaseCore_SetStartLocation, InLocation) == 0x000000, "Member 'MobWalkCharaBaseCore_SetStartLocation::InLocation' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.SetWaitTime
// 0x0004 (0x0004 - 0x0000)
struct MobWalkCharaBaseCore_SetWaitTime final
{
public:
	float                                         InTime;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_SetWaitTime) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_SetWaitTime");
static_assert(sizeof(MobWalkCharaBaseCore_SetWaitTime) == 0x000004, "Wrong size on MobWalkCharaBaseCore_SetWaitTime");
static_assert(offsetof(MobWalkCharaBaseCore_SetWaitTime, InTime) == 0x000000, "Member 'MobWalkCharaBaseCore_SetWaitTime::InTime' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.GetBpIndex
// 0x0004 (0x0004 - 0x0000)
struct MobWalkCharaBaseCore_GetBpIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_GetBpIndex) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_GetBpIndex");
static_assert(sizeof(MobWalkCharaBaseCore_GetBpIndex) == 0x000004, "Wrong size on MobWalkCharaBaseCore_GetBpIndex");
static_assert(offsetof(MobWalkCharaBaseCore_GetBpIndex, ReturnValue) == 0x000000, "Member 'MobWalkCharaBaseCore_GetBpIndex::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.GetFollowParent
// 0x0008 (0x0008 - 0x0000)
struct MobWalkCharaBaseCore_GetFollowParent final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_GetFollowParent) == 0x000008, "Wrong alignment on MobWalkCharaBaseCore_GetFollowParent");
static_assert(sizeof(MobWalkCharaBaseCore_GetFollowParent) == 0x000008, "Wrong size on MobWalkCharaBaseCore_GetFollowParent");
static_assert(offsetof(MobWalkCharaBaseCore_GetFollowParent, ReturnValue) == 0x000000, "Member 'MobWalkCharaBaseCore_GetFollowParent::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.GetFollowRelativeLocation
// 0x000C (0x000C - 0x0000)
struct MobWalkCharaBaseCore_GetFollowRelativeLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_GetFollowRelativeLocation) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_GetFollowRelativeLocation");
static_assert(sizeof(MobWalkCharaBaseCore_GetFollowRelativeLocation) == 0x00000C, "Wrong size on MobWalkCharaBaseCore_GetFollowRelativeLocation");
static_assert(offsetof(MobWalkCharaBaseCore_GetFollowRelativeLocation, ReturnValue) == 0x000000, "Member 'MobWalkCharaBaseCore_GetFollowRelativeLocation::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.GetOpacityCore
// 0x0004 (0x0004 - 0x0000)
struct MobWalkCharaBaseCore_GetOpacityCore final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_GetOpacityCore) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_GetOpacityCore");
static_assert(sizeof(MobWalkCharaBaseCore_GetOpacityCore) == 0x000004, "Wrong size on MobWalkCharaBaseCore_GetOpacityCore");
static_assert(offsetof(MobWalkCharaBaseCore_GetOpacityCore, ReturnValue) == 0x000000, "Member 'MobWalkCharaBaseCore_GetOpacityCore::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.GetPointIndex
// 0x0004 (0x0004 - 0x0000)
struct MobWalkCharaBaseCore_GetPointIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_GetPointIndex) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_GetPointIndex");
static_assert(sizeof(MobWalkCharaBaseCore_GetPointIndex) == 0x000004, "Wrong size on MobWalkCharaBaseCore_GetPointIndex");
static_assert(offsetof(MobWalkCharaBaseCore_GetPointIndex, ReturnValue) == 0x000000, "Member 'MobWalkCharaBaseCore_GetPointIndex::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.GetPointList
// 0x0050 (0x0050 - 0x0000)
struct MobWalkCharaBaseCore_GetPointList final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0xC];                                        // 0x0004(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMobWalkRoutePoint                     ReturnValue;                                       // 0x0010(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_GetPointList) == 0x000010, "Wrong alignment on MobWalkCharaBaseCore_GetPointList");
static_assert(sizeof(MobWalkCharaBaseCore_GetPointList) == 0x000050, "Wrong size on MobWalkCharaBaseCore_GetPointList");
static_assert(offsetof(MobWalkCharaBaseCore_GetPointList, Index_0) == 0x000000, "Member 'MobWalkCharaBaseCore_GetPointList::Index_0' has a wrong offset!");
static_assert(offsetof(MobWalkCharaBaseCore_GetPointList, ReturnValue) == 0x000010, "Member 'MobWalkCharaBaseCore_GetPointList::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.GetPointList_LAST
// 0x0040 (0x0040 - 0x0000)
struct MobWalkCharaBaseCore_GetPointList_LAST final
{
public:
	struct FMobWalkRoutePoint                     ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_GetPointList_LAST) == 0x000010, "Wrong alignment on MobWalkCharaBaseCore_GetPointList_LAST");
static_assert(sizeof(MobWalkCharaBaseCore_GetPointList_LAST) == 0x000040, "Wrong size on MobWalkCharaBaseCore_GetPointList_LAST");
static_assert(offsetof(MobWalkCharaBaseCore_GetPointList_LAST, ReturnValue) == 0x000000, "Member 'MobWalkCharaBaseCore_GetPointList_LAST::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.GetPointList_START
// 0x0040 (0x0040 - 0x0000)
struct MobWalkCharaBaseCore_GetPointList_START final
{
public:
	struct FMobWalkRoutePoint                     ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_GetPointList_START) == 0x000010, "Wrong alignment on MobWalkCharaBaseCore_GetPointList_START");
static_assert(sizeof(MobWalkCharaBaseCore_GetPointList_START) == 0x000040, "Wrong size on MobWalkCharaBaseCore_GetPointList_START");
static_assert(offsetof(MobWalkCharaBaseCore_GetPointList_START, ReturnValue) == 0x000000, "Member 'MobWalkCharaBaseCore_GetPointList_START::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.GetStartLocation
// 0x000C (0x000C - 0x0000)
struct MobWalkCharaBaseCore_GetStartLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_GetStartLocation) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_GetStartLocation");
static_assert(sizeof(MobWalkCharaBaseCore_GetStartLocation) == 0x00000C, "Wrong size on MobWalkCharaBaseCore_GetStartLocation");
static_assert(offsetof(MobWalkCharaBaseCore_GetStartLocation, ReturnValue) == 0x000000, "Member 'MobWalkCharaBaseCore_GetStartLocation::ReturnValue' has a wrong offset!");

// Function CharacterBase.MobWalkCharaBaseCore.GetWaitTime
// 0x0004 (0x0004 - 0x0000)
struct MobWalkCharaBaseCore_GetWaitTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MobWalkCharaBaseCore_GetWaitTime) == 0x000004, "Wrong alignment on MobWalkCharaBaseCore_GetWaitTime");
static_assert(sizeof(MobWalkCharaBaseCore_GetWaitTime) == 0x000004, "Wrong size on MobWalkCharaBaseCore_GetWaitTime");
static_assert(offsetof(MobWalkCharaBaseCore_GetWaitTime, ReturnValue) == 0x000000, "Member 'MobWalkCharaBaseCore_GetWaitTime::ReturnValue' has a wrong offset!");

// Function CharacterBase.NpcAnimationBaseCore.GetIdolAnimSequnece
// 0x0008 (0x0008 - 0x0000)
struct NpcAnimationBaseCore_GetIdolAnimSequnece final
{
public:
	class UAnimSequenceBase*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimationBaseCore_GetIdolAnimSequnece) == 0x000008, "Wrong alignment on NpcAnimationBaseCore_GetIdolAnimSequnece");
static_assert(sizeof(NpcAnimationBaseCore_GetIdolAnimSequnece) == 0x000008, "Wrong size on NpcAnimationBaseCore_GetIdolAnimSequnece");
static_assert(offsetof(NpcAnimationBaseCore_GetIdolAnimSequnece, ReturnValue) == 0x000000, "Member 'NpcAnimationBaseCore_GetIdolAnimSequnece::ReturnValue' has a wrong offset!");

// Function CharacterBase.NpcAnimationBaseCore.GetLookAtTargetActor
// 0x0008 (0x0008 - 0x0000)
struct NpcAnimationBaseCore_GetLookAtTargetActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimationBaseCore_GetLookAtTargetActor) == 0x000008, "Wrong alignment on NpcAnimationBaseCore_GetLookAtTargetActor");
static_assert(sizeof(NpcAnimationBaseCore_GetLookAtTargetActor) == 0x000008, "Wrong size on NpcAnimationBaseCore_GetLookAtTargetActor");
static_assert(offsetof(NpcAnimationBaseCore_GetLookAtTargetActor, ReturnValue) == 0x000000, "Member 'NpcAnimationBaseCore_GetLookAtTargetActor::ReturnValue' has a wrong offset!");

// Function CharacterBase.NpcAnimationBaseCore.GetLookAtTargetActorBoneName
// 0x0010 (0x0010 - 0x0000)
struct NpcAnimationBaseCore_GetLookAtTargetActorBoneName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimationBaseCore_GetLookAtTargetActorBoneName) == 0x000008, "Wrong alignment on NpcAnimationBaseCore_GetLookAtTargetActorBoneName");
static_assert(sizeof(NpcAnimationBaseCore_GetLookAtTargetActorBoneName) == 0x000010, "Wrong size on NpcAnimationBaseCore_GetLookAtTargetActorBoneName");
static_assert(offsetof(NpcAnimationBaseCore_GetLookAtTargetActorBoneName, ReturnValue) == 0x000000, "Member 'NpcAnimationBaseCore_GetLookAtTargetActorBoneName::ReturnValue' has a wrong offset!");

// Function CharacterBase.NpcAnimationBaseCore.GetLookAtType
// 0x0001 (0x0001 - 0x0000)
struct NpcAnimationBaseCore_GetLookAtType final
{
public:
	ENpcAnimLookAtType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimationBaseCore_GetLookAtType) == 0x000001, "Wrong alignment on NpcAnimationBaseCore_GetLookAtType");
static_assert(sizeof(NpcAnimationBaseCore_GetLookAtType) == 0x000001, "Wrong size on NpcAnimationBaseCore_GetLookAtType");
static_assert(offsetof(NpcAnimationBaseCore_GetLookAtType, ReturnValue) == 0x000000, "Member 'NpcAnimationBaseCore_GetLookAtType::ReturnValue' has a wrong offset!");

// Function CharacterBase.NpcAnimationBaseCore.GetLookAtWorldLocation
// 0x000C (0x000C - 0x0000)
struct NpcAnimationBaseCore_GetLookAtWorldLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimationBaseCore_GetLookAtWorldLocation) == 0x000004, "Wrong alignment on NpcAnimationBaseCore_GetLookAtWorldLocation");
static_assert(sizeof(NpcAnimationBaseCore_GetLookAtWorldLocation) == 0x00000C, "Wrong size on NpcAnimationBaseCore_GetLookAtWorldLocation");
static_assert(offsetof(NpcAnimationBaseCore_GetLookAtWorldLocation, ReturnValue) == 0x000000, "Member 'NpcAnimationBaseCore_GetLookAtWorldLocation::ReturnValue' has a wrong offset!");

// Function CharacterBase.NpcAnimationBaseCore.SetIdolAnimSequnece
// 0x0008 (0x0008 - 0x0000)
struct NpcAnimationBaseCore_SetIdolAnimSequnece final
{
public:
	class UAnimSequenceBase*                      Anim;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimationBaseCore_SetIdolAnimSequnece) == 0x000008, "Wrong alignment on NpcAnimationBaseCore_SetIdolAnimSequnece");
static_assert(sizeof(NpcAnimationBaseCore_SetIdolAnimSequnece) == 0x000008, "Wrong size on NpcAnimationBaseCore_SetIdolAnimSequnece");
static_assert(offsetof(NpcAnimationBaseCore_SetIdolAnimSequnece, Anim) == 0x000000, "Member 'NpcAnimationBaseCore_SetIdolAnimSequnece::Anim' has a wrong offset!");

// Function CharacterBase.NpcAnimationBaseCore.SetLookAtTargetActor
// 0x0008 (0x0008 - 0x0000)
struct NpcAnimationBaseCore_SetLookAtTargetActor final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimationBaseCore_SetLookAtTargetActor) == 0x000008, "Wrong alignment on NpcAnimationBaseCore_SetLookAtTargetActor");
static_assert(sizeof(NpcAnimationBaseCore_SetLookAtTargetActor) == 0x000008, "Wrong size on NpcAnimationBaseCore_SetLookAtTargetActor");
static_assert(offsetof(NpcAnimationBaseCore_SetLookAtTargetActor, TargetActor) == 0x000000, "Member 'NpcAnimationBaseCore_SetLookAtTargetActor::TargetActor' has a wrong offset!");

// Function CharacterBase.NpcAnimationBaseCore.SetLookAtTargetActorBoneName
// 0x0010 (0x0010 - 0x0000)
struct NpcAnimationBaseCore_SetLookAtTargetActorBoneName final
{
public:
	class FString                                 BoneName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimationBaseCore_SetLookAtTargetActorBoneName) == 0x000008, "Wrong alignment on NpcAnimationBaseCore_SetLookAtTargetActorBoneName");
static_assert(sizeof(NpcAnimationBaseCore_SetLookAtTargetActorBoneName) == 0x000010, "Wrong size on NpcAnimationBaseCore_SetLookAtTargetActorBoneName");
static_assert(offsetof(NpcAnimationBaseCore_SetLookAtTargetActorBoneName, BoneName) == 0x000000, "Member 'NpcAnimationBaseCore_SetLookAtTargetActorBoneName::BoneName' has a wrong offset!");

// Function CharacterBase.NpcAnimationBaseCore.SetLookAtType
// 0x0001 (0x0001 - 0x0000)
struct NpcAnimationBaseCore_SetLookAtType final
{
public:
	ENpcAnimLookAtType                            Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimationBaseCore_SetLookAtType) == 0x000001, "Wrong alignment on NpcAnimationBaseCore_SetLookAtType");
static_assert(sizeof(NpcAnimationBaseCore_SetLookAtType) == 0x000001, "Wrong size on NpcAnimationBaseCore_SetLookAtType");
static_assert(offsetof(NpcAnimationBaseCore_SetLookAtType, Type) == 0x000000, "Member 'NpcAnimationBaseCore_SetLookAtType::Type' has a wrong offset!");

// Function CharacterBase.NpcAnimationBaseCore.SetLookAtWorldLocation
// 0x000C (0x000C - 0x0000)
struct NpcAnimationBaseCore_SetLookAtWorldLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcAnimationBaseCore_SetLookAtWorldLocation) == 0x000004, "Wrong alignment on NpcAnimationBaseCore_SetLookAtWorldLocation");
static_assert(sizeof(NpcAnimationBaseCore_SetLookAtWorldLocation) == 0x00000C, "Wrong size on NpcAnimationBaseCore_SetLookAtWorldLocation");
static_assert(offsetof(NpcAnimationBaseCore_SetLookAtWorldLocation, Location) == 0x000000, "Member 'NpcAnimationBaseCore_SetLookAtWorldLocation::Location' has a wrong offset!");

// Function CharacterBase.NpcBaseCore.GetMontageSectionName
// 0x0018 (0x0018 - 0x0000)
struct NpcBaseCore_GetMontageSectionName final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x000C(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NpcBaseCore_GetMontageSectionName) == 0x000008, "Wrong alignment on NpcBaseCore_GetMontageSectionName");
static_assert(sizeof(NpcBaseCore_GetMontageSectionName) == 0x000018, "Wrong size on NpcBaseCore_GetMontageSectionName");
static_assert(offsetof(NpcBaseCore_GetMontageSectionName, Montage) == 0x000000, "Member 'NpcBaseCore_GetMontageSectionName::Montage' has a wrong offset!");
static_assert(offsetof(NpcBaseCore_GetMontageSectionName, Index_0) == 0x000008, "Member 'NpcBaseCore_GetMontageSectionName::Index_0' has a wrong offset!");
static_assert(offsetof(NpcBaseCore_GetMontageSectionName, ReturnValue) == 0x00000C, "Member 'NpcBaseCore_GetMontageSectionName::ReturnValue' has a wrong offset!");

// Function CharacterBase.NpcBaseCore.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct NpcBaseCore_GetMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NpcBaseCore_GetMesh) == 0x000008, "Wrong alignment on NpcBaseCore_GetMesh");
static_assert(sizeof(NpcBaseCore_GetMesh) == 0x000008, "Wrong size on NpcBaseCore_GetMesh");
static_assert(offsetof(NpcBaseCore_GetMesh, ReturnValue) == 0x000000, "Member 'NpcBaseCore_GetMesh::ReturnValue' has a wrong offset!");

}

