#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AudioMixer

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AudioMixer_structs.hpp"


namespace SDK::Params
{

// Function AudioMixer.SynthComponent.SetLowPassFilterEnabled
// 0x0001 (0x0001 - 0x0000)
struct SynthComponent_SetLowPassFilterEnabled final
{
public:
	bool                                          InLowPassFilterEnabled;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthComponent_SetLowPassFilterEnabled) == 0x000001, "Wrong alignment on SynthComponent_SetLowPassFilterEnabled");
static_assert(sizeof(SynthComponent_SetLowPassFilterEnabled) == 0x000001, "Wrong size on SynthComponent_SetLowPassFilterEnabled");
static_assert(offsetof(SynthComponent_SetLowPassFilterEnabled, InLowPassFilterEnabled) == 0x000000, "Member 'SynthComponent_SetLowPassFilterEnabled::InLowPassFilterEnabled' has a wrong offset!");

// Function AudioMixer.SynthComponent.SetLowPassFilterFrequency
// 0x0004 (0x0004 - 0x0000)
struct SynthComponent_SetLowPassFilterFrequency final
{
public:
	float                                         InLowPassFilterFrequency;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthComponent_SetLowPassFilterFrequency) == 0x000004, "Wrong alignment on SynthComponent_SetLowPassFilterFrequency");
static_assert(sizeof(SynthComponent_SetLowPassFilterFrequency) == 0x000004, "Wrong size on SynthComponent_SetLowPassFilterFrequency");
static_assert(offsetof(SynthComponent_SetLowPassFilterFrequency, InLowPassFilterFrequency) == 0x000000, "Member 'SynthComponent_SetLowPassFilterFrequency::InLowPassFilterFrequency' has a wrong offset!");

// Function AudioMixer.SynthComponent.SetOutputToBusOnly
// 0x0001 (0x0001 - 0x0000)
struct SynthComponent_SetOutputToBusOnly final
{
public:
	bool                                          bInOutputToBusOnly;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthComponent_SetOutputToBusOnly) == 0x000001, "Wrong alignment on SynthComponent_SetOutputToBusOnly");
static_assert(sizeof(SynthComponent_SetOutputToBusOnly) == 0x000001, "Wrong size on SynthComponent_SetOutputToBusOnly");
static_assert(offsetof(SynthComponent_SetOutputToBusOnly, bInOutputToBusOnly) == 0x000000, "Member 'SynthComponent_SetOutputToBusOnly::bInOutputToBusOnly' has a wrong offset!");

// Function AudioMixer.SynthComponent.SetSubmixSend
// 0x0010 (0x0010 - 0x0000)
struct SynthComponent_SetSubmixSend final
{
public:
	class USoundSubmixBase*                       Submix;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SendLevel;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SynthComponent_SetSubmixSend) == 0x000008, "Wrong alignment on SynthComponent_SetSubmixSend");
static_assert(sizeof(SynthComponent_SetSubmixSend) == 0x000010, "Wrong size on SynthComponent_SetSubmixSend");
static_assert(offsetof(SynthComponent_SetSubmixSend, Submix) == 0x000000, "Member 'SynthComponent_SetSubmixSend::Submix' has a wrong offset!");
static_assert(offsetof(SynthComponent_SetSubmixSend, SendLevel) == 0x000008, "Member 'SynthComponent_SetSubmixSend::SendLevel' has a wrong offset!");

// Function AudioMixer.SynthComponent.SetVolumeMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SynthComponent_SetVolumeMultiplier final
{
public:
	float                                         VolumeMultiplier;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthComponent_SetVolumeMultiplier) == 0x000004, "Wrong alignment on SynthComponent_SetVolumeMultiplier");
static_assert(sizeof(SynthComponent_SetVolumeMultiplier) == 0x000004, "Wrong size on SynthComponent_SetVolumeMultiplier");
static_assert(offsetof(SynthComponent_SetVolumeMultiplier, VolumeMultiplier) == 0x000000, "Member 'SynthComponent_SetVolumeMultiplier::VolumeMultiplier' has a wrong offset!");

// Function AudioMixer.SynthComponent.IsPlaying
// 0x0001 (0x0001 - 0x0000)
struct SynthComponent_IsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SynthComponent_IsPlaying) == 0x000001, "Wrong alignment on SynthComponent_IsPlaying");
static_assert(sizeof(SynthComponent_IsPlaying) == 0x000001, "Wrong size on SynthComponent_IsPlaying");
static_assert(offsetof(SynthComponent_IsPlaying, ReturnValue) == 0x000000, "Member 'SynthComponent_IsPlaying::ReturnValue' has a wrong offset!");

// Function AudioMixer.SubmixEffectSubmixEQPreset.SetSettings
// 0x0010 (0x0010 - 0x0000)
struct SubmixEffectSubmixEQPreset_SetSettings final
{
public:
	struct FSubmixEffectSubmixEQSettings          InSettings;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectSubmixEQPreset_SetSettings) == 0x000008, "Wrong alignment on SubmixEffectSubmixEQPreset_SetSettings");
static_assert(sizeof(SubmixEffectSubmixEQPreset_SetSettings) == 0x000010, "Wrong size on SubmixEffectSubmixEQPreset_SetSettings");
static_assert(offsetof(SubmixEffectSubmixEQPreset_SetSettings, InSettings) == 0x000000, "Member 'SubmixEffectSubmixEQPreset_SetSettings::InSettings' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.AddMasterSubmixEffect
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_AddMasterSubmixEffect final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSubmixPreset*               SubmixEffectPreset;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_AddMasterSubmixEffect) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_AddMasterSubmixEffect");
static_assert(sizeof(AudioMixerBlueprintLibrary_AddMasterSubmixEffect) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_AddMasterSubmixEffect");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddMasterSubmixEffect, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_AddMasterSubmixEffect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddMasterSubmixEffect, SubmixEffectPreset) == 0x000008, "Member 'AudioMixerBlueprintLibrary_AddMasterSubmixEffect::SubmixEffectPreset' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.AddSourceEffectToPresetChain
// 0x0020 (0x0020 - 0x0000)
struct AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*          PresetChain;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSourceEffectChainEntry                Entry;                                             // 0x0010(0x0010)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain");
static_assert(sizeof(AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain) == 0x000020, "Wrong size on AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain, PresetChain) == 0x000008, "Member 'AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain::PresetChain' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain, Entry) == 0x000010, "Member 'AudioMixerBlueprintLibrary_AddSourceEffectToPresetChain::Entry' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.AddSubmixEffect
// 0x0020 (0x0020 - 0x0000)
struct AudioMixerBlueprintLibrary_AddSubmixEffect final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SoundSubmix;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSubmixPreset*               SubmixEffectPreset;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_AddSubmixEffect) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_AddSubmixEffect");
static_assert(sizeof(AudioMixerBlueprintLibrary_AddSubmixEffect) == 0x000020, "Wrong size on AudioMixerBlueprintLibrary_AddSubmixEffect");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSubmixEffect, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_AddSubmixEffect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSubmixEffect, SoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_AddSubmixEffect::SoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSubmixEffect, SubmixEffectPreset) == 0x000010, "Member 'AudioMixerBlueprintLibrary_AddSubmixEffect::SubmixEffectPreset' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_AddSubmixEffect, ReturnValue) == 0x000018, "Member 'AudioMixerBlueprintLibrary_AddSubmixEffect::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.ClearMasterSubmixEffects
// 0x0008 (0x0008 - 0x0000)
struct AudioMixerBlueprintLibrary_ClearMasterSubmixEffects final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_ClearMasterSubmixEffects) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_ClearMasterSubmixEffects");
static_assert(sizeof(AudioMixerBlueprintLibrary_ClearMasterSubmixEffects) == 0x000008, "Wrong size on AudioMixerBlueprintLibrary_ClearMasterSubmixEffects");
static_assert(offsetof(AudioMixerBlueprintLibrary_ClearMasterSubmixEffects, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_ClearMasterSubmixEffects::WorldContextObject' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.ClearSubmixEffectChainOverride
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_ClearSubmixEffectChainOverride final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SoundSubmix;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeTimeSec;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_ClearSubmixEffectChainOverride) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_ClearSubmixEffectChainOverride");
static_assert(sizeof(AudioMixerBlueprintLibrary_ClearSubmixEffectChainOverride) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_ClearSubmixEffectChainOverride");
static_assert(offsetof(AudioMixerBlueprintLibrary_ClearSubmixEffectChainOverride, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_ClearSubmixEffectChainOverride::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ClearSubmixEffectChainOverride, SoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_ClearSubmixEffectChainOverride::SoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ClearSubmixEffectChainOverride, FadeTimeSec) == 0x000010, "Member 'AudioMixerBlueprintLibrary_ClearSubmixEffectChainOverride::FadeTimeSec' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.ClearSubmixEffects
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_ClearSubmixEffects final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SoundSubmix;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_ClearSubmixEffects) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_ClearSubmixEffects");
static_assert(sizeof(AudioMixerBlueprintLibrary_ClearSubmixEffects) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_ClearSubmixEffects");
static_assert(offsetof(AudioMixerBlueprintLibrary_ClearSubmixEffects, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_ClearSubmixEffects::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ClearSubmixEffects, SoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_ClearSubmixEffects::SoundSubmix' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.GetMagnitudeForFrequencies
// 0x0030 (0x0030 - 0x0000)
struct AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Frequencies;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 Magnitudes;                                        // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToAnalyze;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies");
static_assert(sizeof(AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies) == 0x000030, "Wrong size on AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies, Frequencies) == 0x000008, "Member 'AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies::Frequencies' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies, Magnitudes) == 0x000018, "Member 'AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies::Magnitudes' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies, SubmixToAnalyze) == 0x000028, "Member 'AudioMixerBlueprintLibrary_GetMagnitudeForFrequencies::SubmixToAnalyze' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.GetNumberOfEntriesInSourceEffectChain
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*          PresetChain;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain");
static_assert(sizeof(AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain, PresetChain) == 0x000008, "Member 'AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain::PresetChain' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain, ReturnValue) == 0x000010, "Member 'AudioMixerBlueprintLibrary_GetNumberOfEntriesInSourceEffectChain::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.GetPhaseForFrequencies
// 0x0030 (0x0030 - 0x0000)
struct AudioMixerBlueprintLibrary_GetPhaseForFrequencies final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 Frequencies;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<float>                                 Phases;                                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToAnalyze;                                   // 0x0028(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_GetPhaseForFrequencies) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_GetPhaseForFrequencies");
static_assert(sizeof(AudioMixerBlueprintLibrary_GetPhaseForFrequencies) == 0x000030, "Wrong size on AudioMixerBlueprintLibrary_GetPhaseForFrequencies");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetPhaseForFrequencies, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_GetPhaseForFrequencies::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetPhaseForFrequencies, Frequencies) == 0x000008, "Member 'AudioMixerBlueprintLibrary_GetPhaseForFrequencies::Frequencies' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetPhaseForFrequencies, Phases) == 0x000018, "Member 'AudioMixerBlueprintLibrary_GetPhaseForFrequencies::Phases' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_GetPhaseForFrequencies, SubmixToAnalyze) == 0x000028, "Member 'AudioMixerBlueprintLibrary_GetPhaseForFrequencies::SubmixToAnalyze' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.IsAudioBusActive
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_IsAudioBusActive final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioBus*                              AudioBus;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_IsAudioBusActive) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_IsAudioBusActive");
static_assert(sizeof(AudioMixerBlueprintLibrary_IsAudioBusActive) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_IsAudioBusActive");
static_assert(offsetof(AudioMixerBlueprintLibrary_IsAudioBusActive, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_IsAudioBusActive::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_IsAudioBusActive, AudioBus) == 0x000008, "Member 'AudioMixerBlueprintLibrary_IsAudioBusActive::AudioBus' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_IsAudioBusActive, ReturnValue) == 0x000010, "Member 'AudioMixerBlueprintLibrary_IsAudioBusActive::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.MakeFullSpectrumSpectralAnalysisBandSettings
// 0x0028 (0x0028 - 0x0000)
struct AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings final
{
public:
	int32                                         InNumBands;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMinimumFrequency;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InMaximumFrequency;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAttackTimeMsec;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InReleaseTimeMsec;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoundSubmixSpectralAnalysisBandSettings> ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings");
static_assert(sizeof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings) == 0x000028, "Wrong size on AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings, InNumBands) == 0x000000, "Member 'AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings::InNumBands' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings, InMinimumFrequency) == 0x000004, "Member 'AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings::InMinimumFrequency' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings, InMaximumFrequency) == 0x000008, "Member 'AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings::InMaximumFrequency' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings, InAttackTimeMsec) == 0x00000C, "Member 'AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings::InAttackTimeMsec' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings, InReleaseTimeMsec) == 0x000010, "Member 'AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings::InReleaseTimeMsec' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings, ReturnValue) == 0x000018, "Member 'AudioMixerBlueprintLibrary_MakeFullSpectrumSpectralAnalysisBandSettings::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.MakeMusicalSpectralAnalysisBandSettings
// 0x0028 (0x0028 - 0x0000)
struct AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings final
{
public:
	int32                                         InNumSemitones;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicalNoteName                              InStartingMusicalNote;                             // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InStartingOctave;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAttackTimeMsec;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InReleaseTimeMsec;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoundSubmixSpectralAnalysisBandSettings> ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings");
static_assert(sizeof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings) == 0x000028, "Wrong size on AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings, InNumSemitones) == 0x000000, "Member 'AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings::InNumSemitones' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings, InStartingMusicalNote) == 0x000004, "Member 'AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings::InStartingMusicalNote' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings, InStartingOctave) == 0x000008, "Member 'AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings::InStartingOctave' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings, InAttackTimeMsec) == 0x00000C, "Member 'AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings::InAttackTimeMsec' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings, InReleaseTimeMsec) == 0x000010, "Member 'AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings::InReleaseTimeMsec' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings, ReturnValue) == 0x000018, "Member 'AudioMixerBlueprintLibrary_MakeMusicalSpectralAnalysisBandSettings::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.MakePresetSpectralAnalysisBandSettings
// 0x0020 (0x0020 - 0x0000)
struct AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings final
{
public:
	EAudioSpectrumBandPresetType                  InBandPresetType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InNumBands;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InAttackTimeMsec;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InReleaseTimeMsec;                                 // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoundSubmixSpectralAnalysisBandSettings> ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings");
static_assert(sizeof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings) == 0x000020, "Wrong size on AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings, InBandPresetType) == 0x000000, "Member 'AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings::InBandPresetType' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings, InNumBands) == 0x000004, "Member 'AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings::InNumBands' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings, InAttackTimeMsec) == 0x000008, "Member 'AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings::InAttackTimeMsec' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings, InReleaseTimeMsec) == 0x00000C, "Member 'AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings::InReleaseTimeMsec' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings, ReturnValue) == 0x000010, "Member 'AudioMixerBlueprintLibrary_MakePresetSpectralAnalysisBandSettings::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.PauseRecordingOutput
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_PauseRecordingOutput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToPause;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_PauseRecordingOutput) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_PauseRecordingOutput");
static_assert(sizeof(AudioMixerBlueprintLibrary_PauseRecordingOutput) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_PauseRecordingOutput");
static_assert(offsetof(AudioMixerBlueprintLibrary_PauseRecordingOutput, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_PauseRecordingOutput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_PauseRecordingOutput, SubmixToPause) == 0x000008, "Member 'AudioMixerBlueprintLibrary_PauseRecordingOutput::SubmixToPause' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.PrimeSoundCueForPlayback
// 0x0008 (0x0008 - 0x0000)
struct AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback final
{
public:
	class USoundCue*                              SoundCue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback");
static_assert(sizeof(AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback) == 0x000008, "Wrong size on AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback");
static_assert(offsetof(AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback, SoundCue) == 0x000000, "Member 'AudioMixerBlueprintLibrary_PrimeSoundCueForPlayback::SoundCue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.PrimeSoundForPlayback
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_PrimeSoundForPlayback final
{
public:
	class USoundWave*                             SoundWave;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class USoundWave* LoadedSoundWave, bool WasCancelled)> OnLoadCompletion;                                  // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_PrimeSoundForPlayback) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_PrimeSoundForPlayback");
static_assert(sizeof(AudioMixerBlueprintLibrary_PrimeSoundForPlayback) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_PrimeSoundForPlayback");
static_assert(offsetof(AudioMixerBlueprintLibrary_PrimeSoundForPlayback, SoundWave) == 0x000000, "Member 'AudioMixerBlueprintLibrary_PrimeSoundForPlayback::SoundWave' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_PrimeSoundForPlayback, OnLoadCompletion) == 0x000008, "Member 'AudioMixerBlueprintLibrary_PrimeSoundForPlayback::OnLoadCompletion' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.RemoveMasterSubmixEffect
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSubmixPreset*               SubmixEffectPreset;                                // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect");
static_assert(sizeof(AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect, SubmixEffectPreset) == 0x000008, "Member 'AudioMixerBlueprintLibrary_RemoveMasterSubmixEffect::SubmixEffectPreset' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.RemoveSourceEffectFromPresetChain
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*          PresetChain;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain");
static_assert(sizeof(AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain, PresetChain) == 0x000008, "Member 'AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain::PresetChain' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain, EntryIndex) == 0x000010, "Member 'AudioMixerBlueprintLibrary_RemoveSourceEffectFromPresetChain::EntryIndex' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffect
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_RemoveSubmixEffect final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SoundSubmix;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSubmixPreset*               SubmixEffectPreset;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_RemoveSubmixEffect) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_RemoveSubmixEffect");
static_assert(sizeof(AudioMixerBlueprintLibrary_RemoveSubmixEffect) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_RemoveSubmixEffect");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffect, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffect, SoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffect::SoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffect, SubmixEffectPreset) == 0x000010, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffect::SubmixEffectPreset' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectAtIndex
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_RemoveSubmixEffectAtIndex final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SoundSubmix;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubmixChainIndex;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_RemoveSubmixEffectAtIndex) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_RemoveSubmixEffectAtIndex");
static_assert(sizeof(AudioMixerBlueprintLibrary_RemoveSubmixEffectAtIndex) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_RemoveSubmixEffectAtIndex");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectAtIndex, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectAtIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectAtIndex, SoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectAtIndex::SoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectAtIndex, SubmixChainIndex) == 0x000010, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectAtIndex::SubmixChainIndex' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectPreset
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SoundSubmix;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSubmixPreset*               SubmixEffectPreset;                                // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset");
static_assert(sizeof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset, SoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset::SoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset, SubmixEffectPreset) == 0x000010, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectPreset::SubmixEffectPreset' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.RemoveSubmixEffectPresetAtIndex
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SoundSubmix;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubmixChainIndex;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex");
static_assert(sizeof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex, SoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex::SoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex, SubmixChainIndex) == 0x000010, "Member 'AudioMixerBlueprintLibrary_RemoveSubmixEffectPresetAtIndex::SubmixChainIndex' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.ReplaceSoundEffectSubmix
// 0x0020 (0x0020 - 0x0000)
struct AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           InSoundSubmix;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubmixChainIndex;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundEffectSubmixPreset*               SubmixEffectPreset;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix");
static_assert(sizeof(AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix) == 0x000020, "Wrong size on AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix");
static_assert(offsetof(AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix, InSoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix::InSoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix, SubmixChainIndex) == 0x000010, "Member 'AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix::SubmixChainIndex' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix, SubmixEffectPreset) == 0x000018, "Member 'AudioMixerBlueprintLibrary_ReplaceSoundEffectSubmix::SubmixEffectPreset' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.ReplaceSubmixEffect
// 0x0020 (0x0020 - 0x0000)
struct AudioMixerBlueprintLibrary_ReplaceSubmixEffect final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           InSoundSubmix;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SubmixChainIndex;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundEffectSubmixPreset*               SubmixEffectPreset;                                // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_ReplaceSubmixEffect) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_ReplaceSubmixEffect");
static_assert(sizeof(AudioMixerBlueprintLibrary_ReplaceSubmixEffect) == 0x000020, "Wrong size on AudioMixerBlueprintLibrary_ReplaceSubmixEffect");
static_assert(offsetof(AudioMixerBlueprintLibrary_ReplaceSubmixEffect, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_ReplaceSubmixEffect::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ReplaceSubmixEffect, InSoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_ReplaceSubmixEffect::InSoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ReplaceSubmixEffect, SubmixChainIndex) == 0x000010, "Member 'AudioMixerBlueprintLibrary_ReplaceSubmixEffect::SubmixChainIndex' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ReplaceSubmixEffect, SubmixEffectPreset) == 0x000018, "Member 'AudioMixerBlueprintLibrary_ReplaceSubmixEffect::SubmixEffectPreset' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.ResumeRecordingOutput
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_ResumeRecordingOutput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToPause;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_ResumeRecordingOutput) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_ResumeRecordingOutput");
static_assert(sizeof(AudioMixerBlueprintLibrary_ResumeRecordingOutput) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_ResumeRecordingOutput");
static_assert(offsetof(AudioMixerBlueprintLibrary_ResumeRecordingOutput, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_ResumeRecordingOutput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_ResumeRecordingOutput, SubmixToPause) == 0x000008, "Member 'AudioMixerBlueprintLibrary_ResumeRecordingOutput::SubmixToPause' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.SetBypassSourceEffectChainEntry
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundEffectSourcePresetChain*          PresetChain;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBypassed;                                         // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry");
static_assert(sizeof(AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry");
static_assert(offsetof(AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry, PresetChain) == 0x000008, "Member 'AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry::PresetChain' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry, EntryIndex) == 0x000010, "Member 'AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry::EntryIndex' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry, bBypassed) == 0x000014, "Member 'AudioMixerBlueprintLibrary_SetBypassSourceEffectChainEntry::bBypassed' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.SetSubmixEffectChainOverride
// 0x0028 (0x0028 - 0x0000)
struct AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SoundSubmix;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USoundEffectSubmixPreset*>       SubmixEffectPresetChain;                           // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FadeTimeSec;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride");
static_assert(sizeof(AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride) == 0x000028, "Wrong size on AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride");
static_assert(offsetof(AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride, SoundSubmix) == 0x000008, "Member 'AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride::SoundSubmix' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride, SubmixEffectPresetChain) == 0x000010, "Member 'AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride::SubmixEffectPresetChain' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride, FadeTimeSec) == 0x000020, "Member 'AudioMixerBlueprintLibrary_SetSubmixEffectChainOverride::FadeTimeSec' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.StartAnalyzingOutput
// 0x0020 (0x0020 - 0x0000)
struct AudioMixerBlueprintLibrary_StartAnalyzingOutput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToAnalyze;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFFTSize                                      FFTSize;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFFTPeakInterpolationMethod                   InterpolationMethod;                               // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFFTWindowType                                WindowType;                                        // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HopSize;                                           // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioSpectrumType                            SpectrumType;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioMixerBlueprintLibrary_StartAnalyzingOutput) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_StartAnalyzingOutput");
static_assert(sizeof(AudioMixerBlueprintLibrary_StartAnalyzingOutput) == 0x000020, "Wrong size on AudioMixerBlueprintLibrary_StartAnalyzingOutput");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, SubmixToAnalyze) == 0x000008, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::SubmixToAnalyze' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, FFTSize) == 0x000010, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::FFTSize' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, InterpolationMethod) == 0x000011, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::InterpolationMethod' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, WindowType) == 0x000012, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::WindowType' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, HopSize) == 0x000014, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::HopSize' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAnalyzingOutput, SpectrumType) == 0x000018, "Member 'AudioMixerBlueprintLibrary_StartAnalyzingOutput::SpectrumType' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.StartAudioBus
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_StartAudioBus final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioBus*                              AudioBus;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_StartAudioBus) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_StartAudioBus");
static_assert(sizeof(AudioMixerBlueprintLibrary_StartAudioBus) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_StartAudioBus");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAudioBus, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_StartAudioBus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartAudioBus, AudioBus) == 0x000008, "Member 'AudioMixerBlueprintLibrary_StartAudioBus::AudioBus' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.StartRecordingOutput
// 0x0018 (0x0018 - 0x0000)
struct AudioMixerBlueprintLibrary_StartRecordingOutput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectedDuration;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundSubmix*                           SubmixToRecord;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_StartRecordingOutput) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_StartRecordingOutput");
static_assert(sizeof(AudioMixerBlueprintLibrary_StartRecordingOutput) == 0x000018, "Wrong size on AudioMixerBlueprintLibrary_StartRecordingOutput");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartRecordingOutput, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_StartRecordingOutput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartRecordingOutput, ExpectedDuration) == 0x000008, "Member 'AudioMixerBlueprintLibrary_StartRecordingOutput::ExpectedDuration' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StartRecordingOutput, SubmixToRecord) == 0x000010, "Member 'AudioMixerBlueprintLibrary_StartRecordingOutput::SubmixToRecord' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.StopAnalyzingOutput
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_StopAnalyzingOutput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToStopAnalyzing;                             // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_StopAnalyzingOutput) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_StopAnalyzingOutput");
static_assert(sizeof(AudioMixerBlueprintLibrary_StopAnalyzingOutput) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_StopAnalyzingOutput");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopAnalyzingOutput, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_StopAnalyzingOutput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopAnalyzingOutput, SubmixToStopAnalyzing) == 0x000008, "Member 'AudioMixerBlueprintLibrary_StopAnalyzingOutput::SubmixToStopAnalyzing' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.StopAudioBus
// 0x0010 (0x0010 - 0x0000)
struct AudioMixerBlueprintLibrary_StopAudioBus final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioBus*                              AudioBus;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_StopAudioBus) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_StopAudioBus");
static_assert(sizeof(AudioMixerBlueprintLibrary_StopAudioBus) == 0x000010, "Wrong size on AudioMixerBlueprintLibrary_StopAudioBus");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopAudioBus, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_StopAudioBus::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopAudioBus, AudioBus) == 0x000008, "Member 'AudioMixerBlueprintLibrary_StopAudioBus::AudioBus' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.StopRecordingOutput
// 0x0048 (0x0048 - 0x0000)
struct AudioMixerBlueprintLibrary_StopRecordingOutput final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAudioRecordingExportType                     ExportType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Name_0;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundSubmix*                           SubmixToRecord;                                    // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             ExistingSoundWaveToOverwrite;                      // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_StopRecordingOutput) == 0x000008, "Wrong alignment on AudioMixerBlueprintLibrary_StopRecordingOutput");
static_assert(sizeof(AudioMixerBlueprintLibrary_StopRecordingOutput) == 0x000048, "Wrong size on AudioMixerBlueprintLibrary_StopRecordingOutput");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, WorldContextObject) == 0x000000, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, ExportType) == 0x000008, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::ExportType' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, Name_0) == 0x000010, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::Name_0' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, Path) == 0x000020, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::Path' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, SubmixToRecord) == 0x000030, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::SubmixToRecord' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, ExistingSoundWaveToOverwrite) == 0x000038, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::ExistingSoundWaveToOverwrite' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_StopRecordingOutput, ReturnValue) == 0x000040, "Member 'AudioMixerBlueprintLibrary_StopRecordingOutput::ReturnValue' has a wrong offset!");

// Function AudioMixer.AudioMixerBlueprintLibrary.TrimAudioCache
// 0x0008 (0x0008 - 0x0000)
struct AudioMixerBlueprintLibrary_TrimAudioCache final
{
public:
	float                                         InMegabytesToFree;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioMixerBlueprintLibrary_TrimAudioCache) == 0x000004, "Wrong alignment on AudioMixerBlueprintLibrary_TrimAudioCache");
static_assert(sizeof(AudioMixerBlueprintLibrary_TrimAudioCache) == 0x000008, "Wrong size on AudioMixerBlueprintLibrary_TrimAudioCache");
static_assert(offsetof(AudioMixerBlueprintLibrary_TrimAudioCache, InMegabytesToFree) == 0x000000, "Member 'AudioMixerBlueprintLibrary_TrimAudioCache::InMegabytesToFree' has a wrong offset!");
static_assert(offsetof(AudioMixerBlueprintLibrary_TrimAudioCache, ReturnValue) == 0x000004, "Member 'AudioMixerBlueprintLibrary_TrimAudioCache::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.GetCurrentTimestamp
// 0x0018 (0x0018 - 0x0000)
struct QuartzClockHandle_GetCurrentTimestamp final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzTransportTimeStamp              ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzClockHandle_GetCurrentTimestamp) == 0x000008, "Wrong alignment on QuartzClockHandle_GetCurrentTimestamp");
static_assert(sizeof(QuartzClockHandle_GetCurrentTimestamp) == 0x000018, "Wrong size on QuartzClockHandle_GetCurrentTimestamp");
static_assert(offsetof(QuartzClockHandle_GetCurrentTimestamp, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_GetCurrentTimestamp::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_GetCurrentTimestamp, ReturnValue) == 0x000008, "Member 'QuartzClockHandle_GetCurrentTimestamp::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.GetDurationOfQuantizationTypeInSeconds
// 0x0018 (0x0018 - 0x0000)
struct QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuartzCommandQuantization                    QuantizationType;                                  // 0x0008(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Multiplier;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds) == 0x000008, "Wrong alignment on QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds");
static_assert(sizeof(QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds) == 0x000018, "Wrong size on QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds");
static_assert(offsetof(QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds, QuantizationType) == 0x000008, "Member 'QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds::QuantizationType' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds, Multiplier) == 0x00000C, "Member 'QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds::Multiplier' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds, ReturnValue) == 0x000010, "Member 'QuartzClockHandle_GetDurationOfQuantizationTypeInSeconds::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.GetEstimatedRunTime
// 0x0010 (0x0010 - 0x0000)
struct QuartzClockHandle_GetEstimatedRunTime final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_GetEstimatedRunTime) == 0x000008, "Wrong alignment on QuartzClockHandle_GetEstimatedRunTime");
static_assert(sizeof(QuartzClockHandle_GetEstimatedRunTime) == 0x000010, "Wrong size on QuartzClockHandle_GetEstimatedRunTime");
static_assert(offsetof(QuartzClockHandle_GetEstimatedRunTime, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_GetEstimatedRunTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_GetEstimatedRunTime, ReturnValue) == 0x000008, "Member 'QuartzClockHandle_GetEstimatedRunTime::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.IsClockRunning
// 0x0010 (0x0010 - 0x0000)
struct QuartzClockHandle_IsClockRunning final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_IsClockRunning) == 0x000008, "Wrong alignment on QuartzClockHandle_IsClockRunning");
static_assert(sizeof(QuartzClockHandle_IsClockRunning) == 0x000010, "Wrong size on QuartzClockHandle_IsClockRunning");
static_assert(offsetof(QuartzClockHandle_IsClockRunning, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_IsClockRunning::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_IsClockRunning, ReturnValue) == 0x000008, "Member 'QuartzClockHandle_IsClockRunning::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.PauseClock
// 0x0010 (0x0010 - 0x0000)
struct QuartzClockHandle_PauseClock final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzClockHandle_PauseClock) == 0x000008, "Wrong alignment on QuartzClockHandle_PauseClock");
static_assert(sizeof(QuartzClockHandle_PauseClock) == 0x000010, "Wrong size on QuartzClockHandle_PauseClock");
static_assert(offsetof(QuartzClockHandle_PauseClock, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_PauseClock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_PauseClock, ClockHandle) == 0x000008, "Member 'QuartzClockHandle_PauseClock::ClockHandle' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.ResetTransport
// 0x0018 (0x0018 - 0x0000)
struct QuartzClockHandle_ResetTransport final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> InDelegate;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzClockHandle_ResetTransport) == 0x000008, "Wrong alignment on QuartzClockHandle_ResetTransport");
static_assert(sizeof(QuartzClockHandle_ResetTransport) == 0x000018, "Wrong size on QuartzClockHandle_ResetTransport");
static_assert(offsetof(QuartzClockHandle_ResetTransport, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_ResetTransport::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_ResetTransport, InDelegate) == 0x000008, "Member 'QuartzClockHandle_ResetTransport::InDelegate' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.ResetTransportQuantized
// 0x0030 (0x0030 - 0x0000)
struct QuartzClockHandle_ResetTransportQuantized final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzQuantizationBoundary            InQuantizationBoundary;                            // 0x0008(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> InDelegate;                                        // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzClockHandle_ResetTransportQuantized) == 0x000008, "Wrong alignment on QuartzClockHandle_ResetTransportQuantized");
static_assert(sizeof(QuartzClockHandle_ResetTransportQuantized) == 0x000030, "Wrong size on QuartzClockHandle_ResetTransportQuantized");
static_assert(offsetof(QuartzClockHandle_ResetTransportQuantized, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_ResetTransportQuantized::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_ResetTransportQuantized, InQuantizationBoundary) == 0x000008, "Member 'QuartzClockHandle_ResetTransportQuantized::InQuantizationBoundary' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_ResetTransportQuantized, InDelegate) == 0x000014, "Member 'QuartzClockHandle_ResetTransportQuantized::InDelegate' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_ResetTransportQuantized, ClockHandle) == 0x000028, "Member 'QuartzClockHandle_ResetTransportQuantized::ClockHandle' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.ResumeClock
// 0x0010 (0x0010 - 0x0000)
struct QuartzClockHandle_ResumeClock final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzClockHandle_ResumeClock) == 0x000008, "Wrong alignment on QuartzClockHandle_ResumeClock");
static_assert(sizeof(QuartzClockHandle_ResumeClock) == 0x000010, "Wrong size on QuartzClockHandle_ResumeClock");
static_assert(offsetof(QuartzClockHandle_ResumeClock, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_ResumeClock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_ResumeClock, ClockHandle) == 0x000008, "Member 'QuartzClockHandle_ResumeClock::ClockHandle' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.SetBeatsPerMinute
// 0x0038 (0x0038 - 0x0000)
struct QuartzClockHandle_SetBeatsPerMinute final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzQuantizationBoundary            QuantizationBoundary;                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> Delegate;                                          // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BeatsPerMinute;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_SetBeatsPerMinute) == 0x000008, "Wrong alignment on QuartzClockHandle_SetBeatsPerMinute");
static_assert(sizeof(QuartzClockHandle_SetBeatsPerMinute) == 0x000038, "Wrong size on QuartzClockHandle_SetBeatsPerMinute");
static_assert(offsetof(QuartzClockHandle_SetBeatsPerMinute, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_SetBeatsPerMinute::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetBeatsPerMinute, QuantizationBoundary) == 0x000008, "Member 'QuartzClockHandle_SetBeatsPerMinute::QuantizationBoundary' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetBeatsPerMinute, Delegate) == 0x000014, "Member 'QuartzClockHandle_SetBeatsPerMinute::Delegate' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetBeatsPerMinute, ClockHandle) == 0x000028, "Member 'QuartzClockHandle_SetBeatsPerMinute::ClockHandle' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetBeatsPerMinute, BeatsPerMinute) == 0x000030, "Member 'QuartzClockHandle_SetBeatsPerMinute::BeatsPerMinute' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.SetMillisecondsPerTick
// 0x0038 (0x0038 - 0x0000)
struct QuartzClockHandle_SetMillisecondsPerTick final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzQuantizationBoundary            QuantizationBoundary;                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> Delegate;                                          // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MillisecondsPerTick;                               // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_SetMillisecondsPerTick) == 0x000008, "Wrong alignment on QuartzClockHandle_SetMillisecondsPerTick");
static_assert(sizeof(QuartzClockHandle_SetMillisecondsPerTick) == 0x000038, "Wrong size on QuartzClockHandle_SetMillisecondsPerTick");
static_assert(offsetof(QuartzClockHandle_SetMillisecondsPerTick, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_SetMillisecondsPerTick::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetMillisecondsPerTick, QuantizationBoundary) == 0x000008, "Member 'QuartzClockHandle_SetMillisecondsPerTick::QuantizationBoundary' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetMillisecondsPerTick, Delegate) == 0x000014, "Member 'QuartzClockHandle_SetMillisecondsPerTick::Delegate' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetMillisecondsPerTick, ClockHandle) == 0x000028, "Member 'QuartzClockHandle_SetMillisecondsPerTick::ClockHandle' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetMillisecondsPerTick, MillisecondsPerTick) == 0x000030, "Member 'QuartzClockHandle_SetMillisecondsPerTick::MillisecondsPerTick' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.SetSecondsPerTick
// 0x0038 (0x0038 - 0x0000)
struct QuartzClockHandle_SetSecondsPerTick final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzQuantizationBoundary            QuantizationBoundary;                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> Delegate;                                          // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondsPerTick;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_SetSecondsPerTick) == 0x000008, "Wrong alignment on QuartzClockHandle_SetSecondsPerTick");
static_assert(sizeof(QuartzClockHandle_SetSecondsPerTick) == 0x000038, "Wrong size on QuartzClockHandle_SetSecondsPerTick");
static_assert(offsetof(QuartzClockHandle_SetSecondsPerTick, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_SetSecondsPerTick::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetSecondsPerTick, QuantizationBoundary) == 0x000008, "Member 'QuartzClockHandle_SetSecondsPerTick::QuantizationBoundary' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetSecondsPerTick, Delegate) == 0x000014, "Member 'QuartzClockHandle_SetSecondsPerTick::Delegate' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetSecondsPerTick, ClockHandle) == 0x000028, "Member 'QuartzClockHandle_SetSecondsPerTick::ClockHandle' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetSecondsPerTick, SecondsPerTick) == 0x000030, "Member 'QuartzClockHandle_SetSecondsPerTick::SecondsPerTick' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.SetThirtySecondNotesPerMinute
// 0x0038 (0x0038 - 0x0000)
struct QuartzClockHandle_SetThirtySecondNotesPerMinute final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzQuantizationBoundary            QuantizationBoundary;                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> Delegate;                                          // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThirtySecondsNotesPerMinute;                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_SetThirtySecondNotesPerMinute) == 0x000008, "Wrong alignment on QuartzClockHandle_SetThirtySecondNotesPerMinute");
static_assert(sizeof(QuartzClockHandle_SetThirtySecondNotesPerMinute) == 0x000038, "Wrong size on QuartzClockHandle_SetThirtySecondNotesPerMinute");
static_assert(offsetof(QuartzClockHandle_SetThirtySecondNotesPerMinute, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_SetThirtySecondNotesPerMinute::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetThirtySecondNotesPerMinute, QuantizationBoundary) == 0x000008, "Member 'QuartzClockHandle_SetThirtySecondNotesPerMinute::QuantizationBoundary' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetThirtySecondNotesPerMinute, Delegate) == 0x000014, "Member 'QuartzClockHandle_SetThirtySecondNotesPerMinute::Delegate' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetThirtySecondNotesPerMinute, ClockHandle) == 0x000028, "Member 'QuartzClockHandle_SetThirtySecondNotesPerMinute::ClockHandle' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetThirtySecondNotesPerMinute, ThirtySecondsNotesPerMinute) == 0x000030, "Member 'QuartzClockHandle_SetThirtySecondNotesPerMinute::ThirtySecondsNotesPerMinute' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.SetTicksPerSecond
// 0x0038 (0x0038 - 0x0000)
struct QuartzClockHandle_SetTicksPerSecond final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzQuantizationBoundary            QuantizationBoundary;                              // 0x0008(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> Delegate;                                          // 0x0014(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TicksPerSecond;                                    // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_SetTicksPerSecond) == 0x000008, "Wrong alignment on QuartzClockHandle_SetTicksPerSecond");
static_assert(sizeof(QuartzClockHandle_SetTicksPerSecond) == 0x000038, "Wrong size on QuartzClockHandle_SetTicksPerSecond");
static_assert(offsetof(QuartzClockHandle_SetTicksPerSecond, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_SetTicksPerSecond::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetTicksPerSecond, QuantizationBoundary) == 0x000008, "Member 'QuartzClockHandle_SetTicksPerSecond::QuantizationBoundary' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetTicksPerSecond, Delegate) == 0x000014, "Member 'QuartzClockHandle_SetTicksPerSecond::Delegate' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetTicksPerSecond, ClockHandle) == 0x000028, "Member 'QuartzClockHandle_SetTicksPerSecond::ClockHandle' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SetTicksPerSecond, TicksPerSecond) == 0x000030, "Member 'QuartzClockHandle_SetTicksPerSecond::TicksPerSecond' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.StartClock
// 0x0010 (0x0010 - 0x0000)
struct QuartzClockHandle_StartClock final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzClockHandle_StartClock) == 0x000008, "Wrong alignment on QuartzClockHandle_StartClock");
static_assert(sizeof(QuartzClockHandle_StartClock) == 0x000010, "Wrong size on QuartzClockHandle_StartClock");
static_assert(offsetof(QuartzClockHandle_StartClock, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_StartClock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_StartClock, ClockHandle) == 0x000008, "Member 'QuartzClockHandle_StartClock::ClockHandle' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.StartOtherClock
// 0x0030 (0x0030 - 0x0000)
struct QuartzClockHandle_StartOtherClock final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OtherClockName;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzQuantizationBoundary            InQuantizationBoundary;                            // 0x0010(0x000C)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TDelegate<void(EQuartzCommandDelegateSubType EventType, class FName Name)> InDelegate;                                        // 0x001C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_StartOtherClock) == 0x000008, "Wrong alignment on QuartzClockHandle_StartOtherClock");
static_assert(sizeof(QuartzClockHandle_StartOtherClock) == 0x000030, "Wrong size on QuartzClockHandle_StartOtherClock");
static_assert(offsetof(QuartzClockHandle_StartOtherClock, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_StartOtherClock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_StartOtherClock, OtherClockName) == 0x000008, "Member 'QuartzClockHandle_StartOtherClock::OtherClockName' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_StartOtherClock, InQuantizationBoundary) == 0x000010, "Member 'QuartzClockHandle_StartOtherClock::InQuantizationBoundary' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_StartOtherClock, InDelegate) == 0x00001C, "Member 'QuartzClockHandle_StartOtherClock::InDelegate' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.StopClock
// 0x0018 (0x0018 - 0x0000)
struct QuartzClockHandle_StopClock final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CancelPendingEvents;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzClockHandle_StopClock) == 0x000008, "Wrong alignment on QuartzClockHandle_StopClock");
static_assert(sizeof(QuartzClockHandle_StopClock) == 0x000018, "Wrong size on QuartzClockHandle_StopClock");
static_assert(offsetof(QuartzClockHandle_StopClock, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_StopClock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_StopClock, CancelPendingEvents) == 0x000008, "Member 'QuartzClockHandle_StopClock::CancelPendingEvents' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_StopClock, ClockHandle) == 0x000010, "Member 'QuartzClockHandle_StopClock::ClockHandle' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.SubscribeToAllQuantizationEvents
// 0x0020 (0x0020 - 0x0000)
struct QuartzClockHandle_SubscribeToAllQuantizationEvents final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class FName ClockName, EQuartzCommandQuantization QuantizationType, int32 NumBars, int32 Beat, float BeatFraction)> OnQuantizationEvent;                               // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzClockHandle_SubscribeToAllQuantizationEvents) == 0x000008, "Wrong alignment on QuartzClockHandle_SubscribeToAllQuantizationEvents");
static_assert(sizeof(QuartzClockHandle_SubscribeToAllQuantizationEvents) == 0x000020, "Wrong size on QuartzClockHandle_SubscribeToAllQuantizationEvents");
static_assert(offsetof(QuartzClockHandle_SubscribeToAllQuantizationEvents, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_SubscribeToAllQuantizationEvents::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SubscribeToAllQuantizationEvents, OnQuantizationEvent) == 0x000008, "Member 'QuartzClockHandle_SubscribeToAllQuantizationEvents::OnQuantizationEvent' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SubscribeToAllQuantizationEvents, ClockHandle) == 0x000018, "Member 'QuartzClockHandle_SubscribeToAllQuantizationEvents::ClockHandle' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.SubscribeToQuantizationEvent
// 0x0028 (0x0028 - 0x0000)
struct QuartzClockHandle_SubscribeToQuantizationEvent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuartzCommandQuantization                    InQuantizationBoundary;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName ClockName, EQuartzCommandQuantization QuantizationType, int32 NumBars, int32 Beat, float BeatFraction)> OnQuantizationEvent;                               // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzClockHandle_SubscribeToQuantizationEvent) == 0x000008, "Wrong alignment on QuartzClockHandle_SubscribeToQuantizationEvent");
static_assert(sizeof(QuartzClockHandle_SubscribeToQuantizationEvent) == 0x000028, "Wrong size on QuartzClockHandle_SubscribeToQuantizationEvent");
static_assert(offsetof(QuartzClockHandle_SubscribeToQuantizationEvent, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_SubscribeToQuantizationEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SubscribeToQuantizationEvent, InQuantizationBoundary) == 0x000008, "Member 'QuartzClockHandle_SubscribeToQuantizationEvent::InQuantizationBoundary' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SubscribeToQuantizationEvent, OnQuantizationEvent) == 0x00000C, "Member 'QuartzClockHandle_SubscribeToQuantizationEvent::OnQuantizationEvent' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_SubscribeToQuantizationEvent, ClockHandle) == 0x000020, "Member 'QuartzClockHandle_SubscribeToQuantizationEvent::ClockHandle' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.UnsubscribeFromAllTimeDivisions
// 0x0010 (0x0010 - 0x0000)
struct QuartzClockHandle_UnsubscribeFromAllTimeDivisions final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzClockHandle_UnsubscribeFromAllTimeDivisions) == 0x000008, "Wrong alignment on QuartzClockHandle_UnsubscribeFromAllTimeDivisions");
static_assert(sizeof(QuartzClockHandle_UnsubscribeFromAllTimeDivisions) == 0x000010, "Wrong size on QuartzClockHandle_UnsubscribeFromAllTimeDivisions");
static_assert(offsetof(QuartzClockHandle_UnsubscribeFromAllTimeDivisions, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_UnsubscribeFromAllTimeDivisions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_UnsubscribeFromAllTimeDivisions, ClockHandle) == 0x000008, "Member 'QuartzClockHandle_UnsubscribeFromAllTimeDivisions::ClockHandle' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.UnsubscribeFromTimeDivision
// 0x0018 (0x0018 - 0x0000)
struct QuartzClockHandle_UnsubscribeFromTimeDivision final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuartzCommandQuantization                    InQuantizationBoundary;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     ClockHandle;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzClockHandle_UnsubscribeFromTimeDivision) == 0x000008, "Wrong alignment on QuartzClockHandle_UnsubscribeFromTimeDivision");
static_assert(sizeof(QuartzClockHandle_UnsubscribeFromTimeDivision) == 0x000018, "Wrong size on QuartzClockHandle_UnsubscribeFromTimeDivision");
static_assert(offsetof(QuartzClockHandle_UnsubscribeFromTimeDivision, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_UnsubscribeFromTimeDivision::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_UnsubscribeFromTimeDivision, InQuantizationBoundary) == 0x000008, "Member 'QuartzClockHandle_UnsubscribeFromTimeDivision::InQuantizationBoundary' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_UnsubscribeFromTimeDivision, ClockHandle) == 0x000010, "Member 'QuartzClockHandle_UnsubscribeFromTimeDivision::ClockHandle' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.GetBeatsPerMinute
// 0x0010 (0x0010 - 0x0000)
struct QuartzClockHandle_GetBeatsPerMinute final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_GetBeatsPerMinute) == 0x000008, "Wrong alignment on QuartzClockHandle_GetBeatsPerMinute");
static_assert(sizeof(QuartzClockHandle_GetBeatsPerMinute) == 0x000010, "Wrong size on QuartzClockHandle_GetBeatsPerMinute");
static_assert(offsetof(QuartzClockHandle_GetBeatsPerMinute, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_GetBeatsPerMinute::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_GetBeatsPerMinute, ReturnValue) == 0x000008, "Member 'QuartzClockHandle_GetBeatsPerMinute::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.GetMillisecondsPerTick
// 0x0010 (0x0010 - 0x0000)
struct QuartzClockHandle_GetMillisecondsPerTick final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_GetMillisecondsPerTick) == 0x000008, "Wrong alignment on QuartzClockHandle_GetMillisecondsPerTick");
static_assert(sizeof(QuartzClockHandle_GetMillisecondsPerTick) == 0x000010, "Wrong size on QuartzClockHandle_GetMillisecondsPerTick");
static_assert(offsetof(QuartzClockHandle_GetMillisecondsPerTick, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_GetMillisecondsPerTick::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_GetMillisecondsPerTick, ReturnValue) == 0x000008, "Member 'QuartzClockHandle_GetMillisecondsPerTick::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.GetSecondsPerTick
// 0x0010 (0x0010 - 0x0000)
struct QuartzClockHandle_GetSecondsPerTick final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_GetSecondsPerTick) == 0x000008, "Wrong alignment on QuartzClockHandle_GetSecondsPerTick");
static_assert(sizeof(QuartzClockHandle_GetSecondsPerTick) == 0x000010, "Wrong size on QuartzClockHandle_GetSecondsPerTick");
static_assert(offsetof(QuartzClockHandle_GetSecondsPerTick, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_GetSecondsPerTick::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_GetSecondsPerTick, ReturnValue) == 0x000008, "Member 'QuartzClockHandle_GetSecondsPerTick::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.GetThirtySecondNotesPerMinute
// 0x0010 (0x0010 - 0x0000)
struct QuartzClockHandle_GetThirtySecondNotesPerMinute final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_GetThirtySecondNotesPerMinute) == 0x000008, "Wrong alignment on QuartzClockHandle_GetThirtySecondNotesPerMinute");
static_assert(sizeof(QuartzClockHandle_GetThirtySecondNotesPerMinute) == 0x000010, "Wrong size on QuartzClockHandle_GetThirtySecondNotesPerMinute");
static_assert(offsetof(QuartzClockHandle_GetThirtySecondNotesPerMinute, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_GetThirtySecondNotesPerMinute::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_GetThirtySecondNotesPerMinute, ReturnValue) == 0x000008, "Member 'QuartzClockHandle_GetThirtySecondNotesPerMinute::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzClockHandle.GetTicksPerSecond
// 0x0010 (0x0010 - 0x0000)
struct QuartzClockHandle_GetTicksPerSecond final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzClockHandle_GetTicksPerSecond) == 0x000008, "Wrong alignment on QuartzClockHandle_GetTicksPerSecond");
static_assert(sizeof(QuartzClockHandle_GetTicksPerSecond) == 0x000010, "Wrong size on QuartzClockHandle_GetTicksPerSecond");
static_assert(offsetof(QuartzClockHandle_GetTicksPerSecond, WorldContextObject) == 0x000000, "Member 'QuartzClockHandle_GetTicksPerSecond::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzClockHandle_GetTicksPerSecond, ReturnValue) == 0x000008, "Member 'QuartzClockHandle_GetTicksPerSecond::ReturnValue' has a wrong offset!");

// Function AudioMixer.SubmixEffectDynamicsProcessorPreset.SetAudioBus
// 0x0008 (0x0008 - 0x0000)
struct SubmixEffectDynamicsProcessorPreset_SetAudioBus final
{
public:
	class UAudioBus*                              AudioBus;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectDynamicsProcessorPreset_SetAudioBus) == 0x000008, "Wrong alignment on SubmixEffectDynamicsProcessorPreset_SetAudioBus");
static_assert(sizeof(SubmixEffectDynamicsProcessorPreset_SetAudioBus) == 0x000008, "Wrong size on SubmixEffectDynamicsProcessorPreset_SetAudioBus");
static_assert(offsetof(SubmixEffectDynamicsProcessorPreset_SetAudioBus, AudioBus) == 0x000000, "Member 'SubmixEffectDynamicsProcessorPreset_SetAudioBus::AudioBus' has a wrong offset!");

// Function AudioMixer.SubmixEffectDynamicsProcessorPreset.SetExternalSubmix
// 0x0008 (0x0008 - 0x0000)
struct SubmixEffectDynamicsProcessorPreset_SetExternalSubmix final
{
public:
	class USoundSubmix*                           Submix;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectDynamicsProcessorPreset_SetExternalSubmix) == 0x000008, "Wrong alignment on SubmixEffectDynamicsProcessorPreset_SetExternalSubmix");
static_assert(sizeof(SubmixEffectDynamicsProcessorPreset_SetExternalSubmix) == 0x000008, "Wrong size on SubmixEffectDynamicsProcessorPreset_SetExternalSubmix");
static_assert(offsetof(SubmixEffectDynamicsProcessorPreset_SetExternalSubmix, Submix) == 0x000000, "Member 'SubmixEffectDynamicsProcessorPreset_SetExternalSubmix::Submix' has a wrong offset!");

// Function AudioMixer.SubmixEffectDynamicsProcessorPreset.SetSettings
// 0x0060 (0x0060 - 0x0000)
struct SubmixEffectDynamicsProcessorPreset_SetSettings final
{
public:
	struct FSubmixEffectDynamicsProcessorSettings Settings_0;                                        // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectDynamicsProcessorPreset_SetSettings) == 0x000008, "Wrong alignment on SubmixEffectDynamicsProcessorPreset_SetSettings");
static_assert(sizeof(SubmixEffectDynamicsProcessorPreset_SetSettings) == 0x000060, "Wrong size on SubmixEffectDynamicsProcessorPreset_SetSettings");
static_assert(offsetof(SubmixEffectDynamicsProcessorPreset_SetSettings, Settings_0) == 0x000000, "Member 'SubmixEffectDynamicsProcessorPreset_SetSettings::Settings_0' has a wrong offset!");

// Function AudioMixer.SubmixEffectReverbPreset.SetSettings
// 0x0040 (0x0040 - 0x0000)
struct SubmixEffectReverbPreset_SetSettings final
{
public:
	struct FSubmixEffectReverbSettings            InSettings;                                        // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectReverbPreset_SetSettings) == 0x000004, "Wrong alignment on SubmixEffectReverbPreset_SetSettings");
static_assert(sizeof(SubmixEffectReverbPreset_SetSettings) == 0x000040, "Wrong size on SubmixEffectReverbPreset_SetSettings");
static_assert(offsetof(SubmixEffectReverbPreset_SetSettings, InSettings) == 0x000000, "Member 'SubmixEffectReverbPreset_SetSettings::InSettings' has a wrong offset!");

// Function AudioMixer.SubmixEffectReverbPreset.SetSettingsWithReverbEffect
// 0x0010 (0x0010 - 0x0000)
struct SubmixEffectReverbPreset_SetSettingsWithReverbEffect final
{
public:
	const class UReverbEffect*                    InReverbEffect;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetLevel;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DryLevel;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubmixEffectReverbPreset_SetSettingsWithReverbEffect) == 0x000008, "Wrong alignment on SubmixEffectReverbPreset_SetSettingsWithReverbEffect");
static_assert(sizeof(SubmixEffectReverbPreset_SetSettingsWithReverbEffect) == 0x000010, "Wrong size on SubmixEffectReverbPreset_SetSettingsWithReverbEffect");
static_assert(offsetof(SubmixEffectReverbPreset_SetSettingsWithReverbEffect, InReverbEffect) == 0x000000, "Member 'SubmixEffectReverbPreset_SetSettingsWithReverbEffect::InReverbEffect' has a wrong offset!");
static_assert(offsetof(SubmixEffectReverbPreset_SetSettingsWithReverbEffect, WetLevel) == 0x000008, "Member 'SubmixEffectReverbPreset_SetSettingsWithReverbEffect::WetLevel' has a wrong offset!");
static_assert(offsetof(SubmixEffectReverbPreset_SetSettingsWithReverbEffect, DryLevel) == 0x00000C, "Member 'SubmixEffectReverbPreset_SetSettingsWithReverbEffect::DryLevel' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.CreateNewClock
// 0x0040 (0x0040 - 0x0000)
struct QuartzSubsystem_CreateNewClock final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClockName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzClockSettings                   InSettings;                                        // 0x0010(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          bOverrideSettingsIfClockExists;                    // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAudioEngineClockManager;                       // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UQuartzClockHandle*                     ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzSubsystem_CreateNewClock) == 0x000008, "Wrong alignment on QuartzSubsystem_CreateNewClock");
static_assert(sizeof(QuartzSubsystem_CreateNewClock) == 0x000040, "Wrong size on QuartzSubsystem_CreateNewClock");
static_assert(offsetof(QuartzSubsystem_CreateNewClock, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_CreateNewClock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_CreateNewClock, ClockName) == 0x000008, "Member 'QuartzSubsystem_CreateNewClock::ClockName' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_CreateNewClock, InSettings) == 0x000010, "Member 'QuartzSubsystem_CreateNewClock::InSettings' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_CreateNewClock, bOverrideSettingsIfClockExists) == 0x000030, "Member 'QuartzSubsystem_CreateNewClock::bOverrideSettingsIfClockExists' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_CreateNewClock, bUseAudioEngineClockManager) == 0x000031, "Member 'QuartzSubsystem_CreateNewClock::bUseAudioEngineClockManager' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_CreateNewClock, ReturnValue) == 0x000038, "Member 'QuartzSubsystem_CreateNewClock::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.DeleteClockByHandle
// 0x0010 (0x0010 - 0x0000)
struct QuartzSubsystem_DeleteClockByHandle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuartzClockHandle*                     InClockHandle;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzSubsystem_DeleteClockByHandle) == 0x000008, "Wrong alignment on QuartzSubsystem_DeleteClockByHandle");
static_assert(sizeof(QuartzSubsystem_DeleteClockByHandle) == 0x000010, "Wrong size on QuartzSubsystem_DeleteClockByHandle");
static_assert(offsetof(QuartzSubsystem_DeleteClockByHandle, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_DeleteClockByHandle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_DeleteClockByHandle, InClockHandle) == 0x000008, "Member 'QuartzSubsystem_DeleteClockByHandle::InClockHandle' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.DeleteClockByName
// 0x0010 (0x0010 - 0x0000)
struct QuartzSubsystem_DeleteClockByName final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClockName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzSubsystem_DeleteClockByName) == 0x000008, "Wrong alignment on QuartzSubsystem_DeleteClockByName");
static_assert(sizeof(QuartzSubsystem_DeleteClockByName) == 0x000010, "Wrong size on QuartzSubsystem_DeleteClockByName");
static_assert(offsetof(QuartzSubsystem_DeleteClockByName, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_DeleteClockByName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_DeleteClockByName, ClockName) == 0x000008, "Member 'QuartzSubsystem_DeleteClockByName::ClockName' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.DoesClockExist
// 0x0018 (0x0018 - 0x0000)
struct QuartzSubsystem_DoesClockExist final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClockName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzSubsystem_DoesClockExist) == 0x000008, "Wrong alignment on QuartzSubsystem_DoesClockExist");
static_assert(sizeof(QuartzSubsystem_DoesClockExist) == 0x000018, "Wrong size on QuartzSubsystem_DoesClockExist");
static_assert(offsetof(QuartzSubsystem_DoesClockExist, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_DoesClockExist::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_DoesClockExist, ClockName) == 0x000008, "Member 'QuartzSubsystem_DoesClockExist::ClockName' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_DoesClockExist, ReturnValue) == 0x000010, "Member 'QuartzSubsystem_DoesClockExist::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadAverageLatency
// 0x0004 (0x0004 - 0x0000)
struct QuartzSubsystem_GetAudioRenderThreadToGameThreadAverageLatency final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzSubsystem_GetAudioRenderThreadToGameThreadAverageLatency) == 0x000004, "Wrong alignment on QuartzSubsystem_GetAudioRenderThreadToGameThreadAverageLatency");
static_assert(sizeof(QuartzSubsystem_GetAudioRenderThreadToGameThreadAverageLatency) == 0x000004, "Wrong size on QuartzSubsystem_GetAudioRenderThreadToGameThreadAverageLatency");
static_assert(offsetof(QuartzSubsystem_GetAudioRenderThreadToGameThreadAverageLatency, ReturnValue) == 0x000000, "Member 'QuartzSubsystem_GetAudioRenderThreadToGameThreadAverageLatency::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadMaxLatency
// 0x0004 (0x0004 - 0x0000)
struct QuartzSubsystem_GetAudioRenderThreadToGameThreadMaxLatency final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzSubsystem_GetAudioRenderThreadToGameThreadMaxLatency) == 0x000004, "Wrong alignment on QuartzSubsystem_GetAudioRenderThreadToGameThreadMaxLatency");
static_assert(sizeof(QuartzSubsystem_GetAudioRenderThreadToGameThreadMaxLatency) == 0x000004, "Wrong size on QuartzSubsystem_GetAudioRenderThreadToGameThreadMaxLatency");
static_assert(offsetof(QuartzSubsystem_GetAudioRenderThreadToGameThreadMaxLatency, ReturnValue) == 0x000000, "Member 'QuartzSubsystem_GetAudioRenderThreadToGameThreadMaxLatency::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetAudioRenderThreadToGameThreadMinLatency
// 0x0004 (0x0004 - 0x0000)
struct QuartzSubsystem_GetAudioRenderThreadToGameThreadMinLatency final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzSubsystem_GetAudioRenderThreadToGameThreadMinLatency) == 0x000004, "Wrong alignment on QuartzSubsystem_GetAudioRenderThreadToGameThreadMinLatency");
static_assert(sizeof(QuartzSubsystem_GetAudioRenderThreadToGameThreadMinLatency) == 0x000004, "Wrong size on QuartzSubsystem_GetAudioRenderThreadToGameThreadMinLatency");
static_assert(offsetof(QuartzSubsystem_GetAudioRenderThreadToGameThreadMinLatency, ReturnValue) == 0x000000, "Member 'QuartzSubsystem_GetAudioRenderThreadToGameThreadMinLatency::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetCurrentClockTimestamp
// 0x0020 (0x0020 - 0x0000)
struct QuartzSubsystem_GetCurrentClockTimestamp final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InClockName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuartzTransportTimeStamp              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzSubsystem_GetCurrentClockTimestamp) == 0x000008, "Wrong alignment on QuartzSubsystem_GetCurrentClockTimestamp");
static_assert(sizeof(QuartzSubsystem_GetCurrentClockTimestamp) == 0x000020, "Wrong size on QuartzSubsystem_GetCurrentClockTimestamp");
static_assert(offsetof(QuartzSubsystem_GetCurrentClockTimestamp, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_GetCurrentClockTimestamp::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetCurrentClockTimestamp, InClockName) == 0x000008, "Member 'QuartzSubsystem_GetCurrentClockTimestamp::InClockName' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetCurrentClockTimestamp, ReturnValue) == 0x000010, "Member 'QuartzSubsystem_GetCurrentClockTimestamp::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetDurationOfQuantizationTypeInSeconds
// 0x0020 (0x0020 - 0x0000)
struct QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClockName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuartzCommandQuantization                    QuantizationType;                                  // 0x0010(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Multiplier;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds) == 0x000008, "Wrong alignment on QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds");
static_assert(sizeof(QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds) == 0x000020, "Wrong size on QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds");
static_assert(offsetof(QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds, ClockName) == 0x000008, "Member 'QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds::ClockName' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds, QuantizationType) == 0x000010, "Member 'QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds::QuantizationType' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds, Multiplier) == 0x000014, "Member 'QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds::Multiplier' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds, ReturnValue) == 0x000018, "Member 'QuartzSubsystem_GetDurationOfQuantizationTypeInSeconds::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetEstimatedClockRunTime
// 0x0018 (0x0018 - 0x0000)
struct QuartzSubsystem_GetEstimatedClockRunTime final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InClockName;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzSubsystem_GetEstimatedClockRunTime) == 0x000008, "Wrong alignment on QuartzSubsystem_GetEstimatedClockRunTime");
static_assert(sizeof(QuartzSubsystem_GetEstimatedClockRunTime) == 0x000018, "Wrong size on QuartzSubsystem_GetEstimatedClockRunTime");
static_assert(offsetof(QuartzSubsystem_GetEstimatedClockRunTime, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_GetEstimatedClockRunTime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetEstimatedClockRunTime, InClockName) == 0x000008, "Member 'QuartzSubsystem_GetEstimatedClockRunTime::InClockName' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetEstimatedClockRunTime, ReturnValue) == 0x000010, "Member 'QuartzSubsystem_GetEstimatedClockRunTime::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadAverageLatency
// 0x0010 (0x0010 - 0x0000)
struct QuartzSubsystem_GetGameThreadToAudioRenderThreadAverageLatency final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzSubsystem_GetGameThreadToAudioRenderThreadAverageLatency) == 0x000008, "Wrong alignment on QuartzSubsystem_GetGameThreadToAudioRenderThreadAverageLatency");
static_assert(sizeof(QuartzSubsystem_GetGameThreadToAudioRenderThreadAverageLatency) == 0x000010, "Wrong size on QuartzSubsystem_GetGameThreadToAudioRenderThreadAverageLatency");
static_assert(offsetof(QuartzSubsystem_GetGameThreadToAudioRenderThreadAverageLatency, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_GetGameThreadToAudioRenderThreadAverageLatency::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetGameThreadToAudioRenderThreadAverageLatency, ReturnValue) == 0x000008, "Member 'QuartzSubsystem_GetGameThreadToAudioRenderThreadAverageLatency::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadMaxLatency
// 0x0010 (0x0010 - 0x0000)
struct QuartzSubsystem_GetGameThreadToAudioRenderThreadMaxLatency final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzSubsystem_GetGameThreadToAudioRenderThreadMaxLatency) == 0x000008, "Wrong alignment on QuartzSubsystem_GetGameThreadToAudioRenderThreadMaxLatency");
static_assert(sizeof(QuartzSubsystem_GetGameThreadToAudioRenderThreadMaxLatency) == 0x000010, "Wrong size on QuartzSubsystem_GetGameThreadToAudioRenderThreadMaxLatency");
static_assert(offsetof(QuartzSubsystem_GetGameThreadToAudioRenderThreadMaxLatency, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_GetGameThreadToAudioRenderThreadMaxLatency::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetGameThreadToAudioRenderThreadMaxLatency, ReturnValue) == 0x000008, "Member 'QuartzSubsystem_GetGameThreadToAudioRenderThreadMaxLatency::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetGameThreadToAudioRenderThreadMinLatency
// 0x0010 (0x0010 - 0x0000)
struct QuartzSubsystem_GetGameThreadToAudioRenderThreadMinLatency final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzSubsystem_GetGameThreadToAudioRenderThreadMinLatency) == 0x000008, "Wrong alignment on QuartzSubsystem_GetGameThreadToAudioRenderThreadMinLatency");
static_assert(sizeof(QuartzSubsystem_GetGameThreadToAudioRenderThreadMinLatency) == 0x000010, "Wrong size on QuartzSubsystem_GetGameThreadToAudioRenderThreadMinLatency");
static_assert(offsetof(QuartzSubsystem_GetGameThreadToAudioRenderThreadMinLatency, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_GetGameThreadToAudioRenderThreadMinLatency::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetGameThreadToAudioRenderThreadMinLatency, ReturnValue) == 0x000008, "Member 'QuartzSubsystem_GetGameThreadToAudioRenderThreadMinLatency::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetHandleForClock
// 0x0018 (0x0018 - 0x0000)
struct QuartzSubsystem_GetHandleForClock final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClockName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UQuartzClockHandle*                     ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzSubsystem_GetHandleForClock) == 0x000008, "Wrong alignment on QuartzSubsystem_GetHandleForClock");
static_assert(sizeof(QuartzSubsystem_GetHandleForClock) == 0x000018, "Wrong size on QuartzSubsystem_GetHandleForClock");
static_assert(offsetof(QuartzSubsystem_GetHandleForClock, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_GetHandleForClock::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetHandleForClock, ClockName) == 0x000008, "Member 'QuartzSubsystem_GetHandleForClock::ClockName' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetHandleForClock, ReturnValue) == 0x000010, "Member 'QuartzSubsystem_GetHandleForClock::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetRoundTripAverageLatency
// 0x0010 (0x0010 - 0x0000)
struct QuartzSubsystem_GetRoundTripAverageLatency final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzSubsystem_GetRoundTripAverageLatency) == 0x000008, "Wrong alignment on QuartzSubsystem_GetRoundTripAverageLatency");
static_assert(sizeof(QuartzSubsystem_GetRoundTripAverageLatency) == 0x000010, "Wrong size on QuartzSubsystem_GetRoundTripAverageLatency");
static_assert(offsetof(QuartzSubsystem_GetRoundTripAverageLatency, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_GetRoundTripAverageLatency::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetRoundTripAverageLatency, ReturnValue) == 0x000008, "Member 'QuartzSubsystem_GetRoundTripAverageLatency::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetRoundTripMaxLatency
// 0x0010 (0x0010 - 0x0000)
struct QuartzSubsystem_GetRoundTripMaxLatency final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzSubsystem_GetRoundTripMaxLatency) == 0x000008, "Wrong alignment on QuartzSubsystem_GetRoundTripMaxLatency");
static_assert(sizeof(QuartzSubsystem_GetRoundTripMaxLatency) == 0x000010, "Wrong size on QuartzSubsystem_GetRoundTripMaxLatency");
static_assert(offsetof(QuartzSubsystem_GetRoundTripMaxLatency, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_GetRoundTripMaxLatency::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetRoundTripMaxLatency, ReturnValue) == 0x000008, "Member 'QuartzSubsystem_GetRoundTripMaxLatency::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.GetRoundTripMinLatency
// 0x0010 (0x0010 - 0x0000)
struct QuartzSubsystem_GetRoundTripMinLatency final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzSubsystem_GetRoundTripMinLatency) == 0x000008, "Wrong alignment on QuartzSubsystem_GetRoundTripMinLatency");
static_assert(sizeof(QuartzSubsystem_GetRoundTripMinLatency) == 0x000010, "Wrong size on QuartzSubsystem_GetRoundTripMinLatency");
static_assert(offsetof(QuartzSubsystem_GetRoundTripMinLatency, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_GetRoundTripMinLatency::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_GetRoundTripMinLatency, ReturnValue) == 0x000008, "Member 'QuartzSubsystem_GetRoundTripMinLatency::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.IsClockRunning
// 0x0018 (0x0018 - 0x0000)
struct QuartzSubsystem_IsClockRunning final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClockName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuartzSubsystem_IsClockRunning) == 0x000008, "Wrong alignment on QuartzSubsystem_IsClockRunning");
static_assert(sizeof(QuartzSubsystem_IsClockRunning) == 0x000018, "Wrong size on QuartzSubsystem_IsClockRunning");
static_assert(offsetof(QuartzSubsystem_IsClockRunning, WorldContextObject) == 0x000000, "Member 'QuartzSubsystem_IsClockRunning::WorldContextObject' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_IsClockRunning, ClockName) == 0x000008, "Member 'QuartzSubsystem_IsClockRunning::ClockName' has a wrong offset!");
static_assert(offsetof(QuartzSubsystem_IsClockRunning, ReturnValue) == 0x000010, "Member 'QuartzSubsystem_IsClockRunning::ReturnValue' has a wrong offset!");

// Function AudioMixer.QuartzSubsystem.IsQuartzEnabled
// 0x0001 (0x0001 - 0x0000)
struct QuartzSubsystem_IsQuartzEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuartzSubsystem_IsQuartzEnabled) == 0x000001, "Wrong alignment on QuartzSubsystem_IsQuartzEnabled");
static_assert(sizeof(QuartzSubsystem_IsQuartzEnabled) == 0x000001, "Wrong size on QuartzSubsystem_IsQuartzEnabled");
static_assert(offsetof(QuartzSubsystem_IsQuartzEnabled, ReturnValue) == 0x000000, "Member 'QuartzSubsystem_IsQuartzEnabled::ReturnValue' has a wrong offset!");

}

