#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlItemList

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Xrd777_structs.hpp"
#include "BP_BtlGuiBaseActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlItemList.BP_BtlItemList_C
// 0x0288 (0x05D8 - 0x0350)
class ABP_BtlItemList_C final : public ABP_BtlGuiBaseActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BtlItemList_C;                   // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBtlGuiDrawComponent*                   BtlGuiDrawCanvas2;                                 // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawComponent*                   BtlGuiDrawCanvas1;                                 // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiResources*                       BtlGuiResources;                                   // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiListComponent*                   BtlGuiList;                                        // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlDataBaseComponent*                  BtlDataBase;                                       // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawComponent*                   BtlGuiDraw;                                        // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         OutAnimeTimeline_3__Alpha_Silluette_52C3B6D244BC107A1DAF0199B4F6B926; // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutAnimeTimeline___1______52C3B6D244BC107A1DAF0199B4F6B926; // 0x038C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutAnimeTimeline____52C3B6D244BC107A1DAF0199B4F6B926; // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            OutAnimeTimeline__Direction_52C3B6D244BC107A1DAF0199B4F6B926; // 0x0394(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_395[0x3];                                      // 0x0395(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     OutAnimeTimeline;                                  // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAnimeTimeline_8_MoveWhite_93B7E4184EADFB17BD9BF1B1DB462458; // 0x03A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAnimeTimeline_7_MoveRedCursor_93B7E4184EADFB17BD9BF1B1DB462458; // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAnimeTimeline_6_Alpha_Cursor_93B7E4184EADFB17BD9BF1B1DB462458; // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAnimeTimeline________1_____93B7E4184EADFB17BD9BF1B1DB462458; // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAnimeTimeline_______________1_____93B7E4184EADFB17BD9BF1B1DB462458; // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAnimeTimeline________1______93B7E4184EADFB17BD9BF1B1DB462458; // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAnimeTimeline_________93B7E4184EADFB17BD9BF1B1DB462458; // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InAnimeTimeline_________93B7E4184EADFB17BD9BF1B1DB462458_0; // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            InAnimeTimeline__Direction_93B7E4184EADFB17BD9BF1B1DB462458; // 0x03C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     InAnimeTimeline;                                   // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ListDtawMax;                                       // 0x03D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D4[0x4];                                      // 0x03D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBtlItemData>                   ItemList;                                          // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CursorIndex;                                       // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TopIndex;                                          // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentIndex;                                      // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ForIndex;                                          // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 ItemNameStr;                                       // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 ItemNumStr;                                        // 0x0408(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class UBtlGuiDrawObjectMsg*                   ItemHelp;                                          // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PosA;                                              // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ThreeSize;                                         // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PosB;                                              // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PosC;                                              // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PosD;                                              // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Pose;                                              // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PosF;                                              // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Caustics;                                          // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectRoundRect*             RedCursor;                                         // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectRoundRect*             WhiteCursor;                                       // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NowListMax;                                        // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectSprite*                Detal_Title;                                       // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectMsg*                   DetaiMsg1;                                         // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ENoList;                                           // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharaRote;                                         // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectPrimitive*             ScrollbarBlack;                                    // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectPrimitive*             ScrollbarWhilte;                                   // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevPositionFrame;                                 // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PrevPositionFrameBack;                             // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PositionWork;                                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PrevPositionWorkBack;                              // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PrevPositionWork;                                  // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectPlg*                   ItemTitlePlg;                                      // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TitleRotation;                                     // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectRoundRect*             BGRectBack;                                        // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectRoundRect*             BGRectFront;                                       // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BGRectAncherPos;                                   // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BGRectRotaition;                                   // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TitleAlpha;                                        // 0x04EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemListFrame;                                     // 0x04F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ItemListIntervalFrame;                             // 0x04F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InanimeListFrame;                                  // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartInAnimeItemList;                              // 0x04FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_4FD[0x3];                                      // 0x04FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HelpAnime;                                         // 0x0500(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InAnimeDetailFrame;                                // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectSprite*                HelpSprite;                                        // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TitleAnchor;                                       // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              InanimeTitleAnchor;                                // 0x0514(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              OutAnimeTItleAncher;                               // 0x051C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectPlg*                   Item_Titlte_line;                                  // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MainAlpha;                                         // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_534[0x4];                                      // 0x0534(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectSprite*                NoItemSpr;                                         // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectText*                  NoItemText;                                        // 0x0540(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectMsg*                   DetaiMsg2;                                         // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectMsg*                   DetaiMsg3;                                         // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              HelpTitlePos;                                      // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CharaSilhouetteColorDark;                          // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 CharaSilhouetteColorLight;                         // 0x0564(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              SilhouettePos;                                     // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectImage*                 SilhouetteImage;                                   // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStateChangeToTarget;                             // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_579[0x7];                                      // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             EndOutAnime;                                       // 0x0580(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsPlayingAnimation;                                // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_591[0x3];                                      // 0x0591(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BeforeCoursorIndexFromTop;                         // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSameCursor;                                      // 0x0598(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_599[0x3];                                      // 0x0599(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimeAlphaCursor;                                  // 0x059C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimeRedMove;                                      // 0x05A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimeWhiteMove;                                    // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AnimeAlphaSilluette;                               // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AC[0x4];                                      // 0x05AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              BtlActor;                                          // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectRect*                  ScrollBarSliderMouseCollision;                     // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectRect*                  ScrollBarMouseCollision;                           // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBtlGuiDrawObjectRect*>          MouseCollisionList;                                // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void EndOutAnime__DelegateSignature();
	void ExecuteUbergraph_BP_BtlItemList(int32 EntryPoint);
	void GuiActorStateExit();
	void PlsyCursorSE();
	void EntryChangeState();
	void GuiActorUpdate(float DeltaTime);
	void GuiActorBeginPlay();
	void GuiActorStateInit(bool Flag, int32 Param);
	void StateChangeTargetSelect();
	void StateChangeTop();
	void DebugOutAnime();
	void DebugInAnime();
	void CallCANCEL();
	void CallOK();
	void GuiActorUnbindAction();
	void GuiActorBindAction();
	void OutAnime();
	void InAnime();
	void ChangeCursor();
	void OutAnimeTimeline__UpdateFunc();
	void OutAnimeTimeline__FinishedFunc();
	void InAnimeTimeline__UpdateFunc();
	void InAnimeTimeline__FinishedFunc();
	void CreateRectPrimitive(const struct FVector2D& Size, const struct FColor& Color, TArray<struct FBtlGuiVertex>* NewParam);
	void Draw_Caustics();
	void ClearAplha(class UBtlGuiDrawComponent* Component);
	void Update_ItemList();
	void Update_Item_Num(int32 Num, class UBtlGuiDrawObjectSprite* Oneketa, class UBtlGuiDrawObjectSprite* TwoketaL, class UBtlGuiDrawObjectSprite* TwoketaR);
	void Update_Cursor(float DeltaTime);
	void Update_Detail_Text(const class FString& Text);
	void Update_NoItem();
	void Update_Scrolbar();
	void Update_BackGround();
	struct FVector2D Ancher_Get_Pos(const struct FVector2D& ObjectPos, const struct FVector2D& AncherPos, float Degree);
	void Update(float DeltaTime);
	uint8 Calc_Alpha(int32 Alpha);
	void JumpCursorItemID(int32 ItemId);
	void CalcAlphaColor(const struct FColor& In, float Value, struct FColor* Out);
	void CalcColorItemString(bool IsUsable, bool IsSelect, struct FColor* Out);
	void CalcColorItemIcon(bool IsUsable, bool IsSelect, struct FColor* Out, struct FBtlBlendState* blendState);
	void CalcColorCostString(bool IsUsable, bool IsSelect, struct FColor* Out);
	void RefrectLocalizeData();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlItemList_C">();
	}
	static class ABP_BtlItemList_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlItemList_C>();
	}
};
static_assert(alignof(ABP_BtlItemList_C) == 0x000008, "Wrong alignment on ABP_BtlItemList_C");
static_assert(sizeof(ABP_BtlItemList_C) == 0x0005D8, "Wrong size on ABP_BtlItemList_C");
static_assert(offsetof(ABP_BtlItemList_C, UberGraphFrame_BP_BtlItemList_C) == 0x000350, "Member 'ABP_BtlItemList_C::UberGraphFrame_BP_BtlItemList_C' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, BtlGuiDrawCanvas2) == 0x000358, "Member 'ABP_BtlItemList_C::BtlGuiDrawCanvas2' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, BtlGuiDrawCanvas1) == 0x000360, "Member 'ABP_BtlItemList_C::BtlGuiDrawCanvas1' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, BtlGuiResources) == 0x000368, "Member 'ABP_BtlItemList_C::BtlGuiResources' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, BtlGuiList) == 0x000370, "Member 'ABP_BtlItemList_C::BtlGuiList' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, BtlDataBase) == 0x000378, "Member 'ABP_BtlItemList_C::BtlDataBase' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, BtlGuiDraw) == 0x000380, "Member 'ABP_BtlItemList_C::BtlGuiDraw' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, OutAnimeTimeline_3__Alpha_Silluette_52C3B6D244BC107A1DAF0199B4F6B926) == 0x000388, "Member 'ABP_BtlItemList_C::OutAnimeTimeline_3__Alpha_Silluette_52C3B6D244BC107A1DAF0199B4F6B926' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, OutAnimeTimeline___1______52C3B6D244BC107A1DAF0199B4F6B926) == 0x00038C, "Member 'ABP_BtlItemList_C::OutAnimeTimeline___1______52C3B6D244BC107A1DAF0199B4F6B926' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, OutAnimeTimeline____52C3B6D244BC107A1DAF0199B4F6B926) == 0x000390, "Member 'ABP_BtlItemList_C::OutAnimeTimeline____52C3B6D244BC107A1DAF0199B4F6B926' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, OutAnimeTimeline__Direction_52C3B6D244BC107A1DAF0199B4F6B926) == 0x000394, "Member 'ABP_BtlItemList_C::OutAnimeTimeline__Direction_52C3B6D244BC107A1DAF0199B4F6B926' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, OutAnimeTimeline) == 0x000398, "Member 'ABP_BtlItemList_C::OutAnimeTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InAnimeTimeline_8_MoveWhite_93B7E4184EADFB17BD9BF1B1DB462458) == 0x0003A0, "Member 'ABP_BtlItemList_C::InAnimeTimeline_8_MoveWhite_93B7E4184EADFB17BD9BF1B1DB462458' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InAnimeTimeline_7_MoveRedCursor_93B7E4184EADFB17BD9BF1B1DB462458) == 0x0003A4, "Member 'ABP_BtlItemList_C::InAnimeTimeline_7_MoveRedCursor_93B7E4184EADFB17BD9BF1B1DB462458' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InAnimeTimeline_6_Alpha_Cursor_93B7E4184EADFB17BD9BF1B1DB462458) == 0x0003A8, "Member 'ABP_BtlItemList_C::InAnimeTimeline_6_Alpha_Cursor_93B7E4184EADFB17BD9BF1B1DB462458' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InAnimeTimeline________1_____93B7E4184EADFB17BD9BF1B1DB462458) == 0x0003AC, "Member 'ABP_BtlItemList_C::InAnimeTimeline________1_____93B7E4184EADFB17BD9BF1B1DB462458' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InAnimeTimeline_______________1_____93B7E4184EADFB17BD9BF1B1DB462458) == 0x0003B0, "Member 'ABP_BtlItemList_C::InAnimeTimeline_______________1_____93B7E4184EADFB17BD9BF1B1DB462458' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InAnimeTimeline________1______93B7E4184EADFB17BD9BF1B1DB462458) == 0x0003B4, "Member 'ABP_BtlItemList_C::InAnimeTimeline________1______93B7E4184EADFB17BD9BF1B1DB462458' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InAnimeTimeline_________93B7E4184EADFB17BD9BF1B1DB462458) == 0x0003B8, "Member 'ABP_BtlItemList_C::InAnimeTimeline_________93B7E4184EADFB17BD9BF1B1DB462458' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InAnimeTimeline_________93B7E4184EADFB17BD9BF1B1DB462458_0) == 0x0003BC, "Member 'ABP_BtlItemList_C::InAnimeTimeline_________93B7E4184EADFB17BD9BF1B1DB462458_0' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InAnimeTimeline__Direction_93B7E4184EADFB17BD9BF1B1DB462458) == 0x0003C0, "Member 'ABP_BtlItemList_C::InAnimeTimeline__Direction_93B7E4184EADFB17BD9BF1B1DB462458' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InAnimeTimeline) == 0x0003C8, "Member 'ABP_BtlItemList_C::InAnimeTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ListDtawMax) == 0x0003D0, "Member 'ABP_BtlItemList_C::ListDtawMax' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ItemList) == 0x0003D8, "Member 'ABP_BtlItemList_C::ItemList' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, CursorIndex) == 0x0003E8, "Member 'ABP_BtlItemList_C::CursorIndex' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, TopIndex) == 0x0003EC, "Member 'ABP_BtlItemList_C::TopIndex' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, CurrentIndex) == 0x0003F0, "Member 'ABP_BtlItemList_C::CurrentIndex' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ForIndex) == 0x0003F4, "Member 'ABP_BtlItemList_C::ForIndex' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ItemNameStr) == 0x0003F8, "Member 'ABP_BtlItemList_C::ItemNameStr' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ItemNumStr) == 0x000408, "Member 'ABP_BtlItemList_C::ItemNumStr' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ItemHelp) == 0x000418, "Member 'ABP_BtlItemList_C::ItemHelp' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, PosA) == 0x000420, "Member 'ABP_BtlItemList_C::PosA' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ThreeSize) == 0x000428, "Member 'ABP_BtlItemList_C::ThreeSize' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, PosB) == 0x000430, "Member 'ABP_BtlItemList_C::PosB' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, PosC) == 0x000438, "Member 'ABP_BtlItemList_C::PosC' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, PosD) == 0x000440, "Member 'ABP_BtlItemList_C::PosD' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, Pose) == 0x000448, "Member 'ABP_BtlItemList_C::Pose' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, PosF) == 0x000450, "Member 'ABP_BtlItemList_C::PosF' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, Caustics) == 0x000458, "Member 'ABP_BtlItemList_C::Caustics' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, RedCursor) == 0x000460, "Member 'ABP_BtlItemList_C::RedCursor' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, WhiteCursor) == 0x000468, "Member 'ABP_BtlItemList_C::WhiteCursor' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, NowListMax) == 0x000470, "Member 'ABP_BtlItemList_C::NowListMax' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, Detal_Title) == 0x000478, "Member 'ABP_BtlItemList_C::Detal_Title' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, DetaiMsg1) == 0x000480, "Member 'ABP_BtlItemList_C::DetaiMsg1' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ENoList) == 0x000488, "Member 'ABP_BtlItemList_C::ENoList' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, CharaRote) == 0x00048C, "Member 'ABP_BtlItemList_C::CharaRote' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ScrollbarBlack) == 0x000490, "Member 'ABP_BtlItemList_C::ScrollbarBlack' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ScrollbarWhilte) == 0x000498, "Member 'ABP_BtlItemList_C::ScrollbarWhilte' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, PrevPositionFrame) == 0x0004A0, "Member 'ABP_BtlItemList_C::PrevPositionFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, PrevPositionFrameBack) == 0x0004A4, "Member 'ABP_BtlItemList_C::PrevPositionFrameBack' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, PositionWork) == 0x0004A8, "Member 'ABP_BtlItemList_C::PositionWork' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, PrevPositionWorkBack) == 0x0004B0, "Member 'ABP_BtlItemList_C::PrevPositionWorkBack' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, PrevPositionWork) == 0x0004B8, "Member 'ABP_BtlItemList_C::PrevPositionWork' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ItemTitlePlg) == 0x0004C0, "Member 'ABP_BtlItemList_C::ItemTitlePlg' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, TitleRotation) == 0x0004C8, "Member 'ABP_BtlItemList_C::TitleRotation' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, BGRectBack) == 0x0004D0, "Member 'ABP_BtlItemList_C::BGRectBack' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, BGRectFront) == 0x0004D8, "Member 'ABP_BtlItemList_C::BGRectFront' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, BGRectAncherPos) == 0x0004E0, "Member 'ABP_BtlItemList_C::BGRectAncherPos' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, BGRectRotaition) == 0x0004E8, "Member 'ABP_BtlItemList_C::BGRectRotaition' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, TitleAlpha) == 0x0004EC, "Member 'ABP_BtlItemList_C::TitleAlpha' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ItemListFrame) == 0x0004F0, "Member 'ABP_BtlItemList_C::ItemListFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ItemListIntervalFrame) == 0x0004F4, "Member 'ABP_BtlItemList_C::ItemListIntervalFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InanimeListFrame) == 0x0004F8, "Member 'ABP_BtlItemList_C::InanimeListFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, StartInAnimeItemList) == 0x0004FC, "Member 'ABP_BtlItemList_C::StartInAnimeItemList' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, HelpAnime) == 0x000500, "Member 'ABP_BtlItemList_C::HelpAnime' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InAnimeDetailFrame) == 0x000504, "Member 'ABP_BtlItemList_C::InAnimeDetailFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, HelpSprite) == 0x000508, "Member 'ABP_BtlItemList_C::HelpSprite' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, TitleAnchor) == 0x000510, "Member 'ABP_BtlItemList_C::TitleAnchor' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, InanimeTitleAnchor) == 0x000514, "Member 'ABP_BtlItemList_C::InanimeTitleAnchor' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, OutAnimeTItleAncher) == 0x00051C, "Member 'ABP_BtlItemList_C::OutAnimeTItleAncher' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, Item_Titlte_line) == 0x000528, "Member 'ABP_BtlItemList_C::Item_Titlte_line' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, MainAlpha) == 0x000530, "Member 'ABP_BtlItemList_C::MainAlpha' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, NoItemSpr) == 0x000538, "Member 'ABP_BtlItemList_C::NoItemSpr' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, NoItemText) == 0x000540, "Member 'ABP_BtlItemList_C::NoItemText' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, DetaiMsg2) == 0x000548, "Member 'ABP_BtlItemList_C::DetaiMsg2' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, DetaiMsg3) == 0x000550, "Member 'ABP_BtlItemList_C::DetaiMsg3' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, HelpTitlePos) == 0x000558, "Member 'ABP_BtlItemList_C::HelpTitlePos' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, CharaSilhouetteColorDark) == 0x000560, "Member 'ABP_BtlItemList_C::CharaSilhouetteColorDark' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, CharaSilhouetteColorLight) == 0x000564, "Member 'ABP_BtlItemList_C::CharaSilhouetteColorLight' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, SilhouettePos) == 0x000568, "Member 'ABP_BtlItemList_C::SilhouettePos' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, SilhouetteImage) == 0x000570, "Member 'ABP_BtlItemList_C::SilhouetteImage' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, IsStateChangeToTarget) == 0x000578, "Member 'ABP_BtlItemList_C::IsStateChangeToTarget' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, EndOutAnime) == 0x000580, "Member 'ABP_BtlItemList_C::EndOutAnime' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, IsPlayingAnimation) == 0x000590, "Member 'ABP_BtlItemList_C::IsPlayingAnimation' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, BeforeCoursorIndexFromTop) == 0x000594, "Member 'ABP_BtlItemList_C::BeforeCoursorIndexFromTop' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, IsSameCursor) == 0x000598, "Member 'ABP_BtlItemList_C::IsSameCursor' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, AnimeAlphaCursor) == 0x00059C, "Member 'ABP_BtlItemList_C::AnimeAlphaCursor' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, AnimeRedMove) == 0x0005A0, "Member 'ABP_BtlItemList_C::AnimeRedMove' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, AnimeWhiteMove) == 0x0005A4, "Member 'ABP_BtlItemList_C::AnimeWhiteMove' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, AnimeAlphaSilluette) == 0x0005A8, "Member 'ABP_BtlItemList_C::AnimeAlphaSilluette' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, BtlActor) == 0x0005B0, "Member 'ABP_BtlItemList_C::BtlActor' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ScrollBarSliderMouseCollision) == 0x0005B8, "Member 'ABP_BtlItemList_C::ScrollBarSliderMouseCollision' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, ScrollBarMouseCollision) == 0x0005C0, "Member 'ABP_BtlItemList_C::ScrollBarMouseCollision' has a wrong offset!");
static_assert(offsetof(ABP_BtlItemList_C, MouseCollisionList) == 0x0005C8, "Member 'ABP_BtlItemList_C::MouseCollisionList' has a wrong offset!");

}

