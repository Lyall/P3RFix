#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CriWareRuntime

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CriWareRuntime_structs.hpp"


namespace SDK
{

// Class CriWareRuntime.AtomEntranceVolume
// 0x0020 (0x0278 - 0x0258)
class AAtomEntranceVolume final : public AVolume
{
public:
	float                                         Priority;                                          // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEnabled : 1;                                      // 0x025C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_25D[0xB];                                      // 0x025D(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AAtomAudioVolume>> NeighbourhoodAudioVolumeArray;                     // 0x0268(0x0010)(Edit, Net, ZeroConstructor, EditConst, RepNotify, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void OnRep_bEnabled();
	void SetEnabled(bool bNewEnabled);
	void SetPriority(float NewPriority);

	bool GetEnabled() const;
	float GetPriority() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomEntranceVolume">();
	}
	static class AAtomEntranceVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtomEntranceVolume>();
	}
};
static_assert(alignof(AAtomEntranceVolume) == 0x000008, "Wrong alignment on AAtomEntranceVolume");
static_assert(sizeof(AAtomEntranceVolume) == 0x000278, "Wrong size on AAtomEntranceVolume");
static_assert(offsetof(AAtomEntranceVolume, Priority) == 0x000258, "Member 'AAtomEntranceVolume::Priority' has a wrong offset!");
static_assert(offsetof(AAtomEntranceVolume, NeighbourhoodAudioVolumeArray) == 0x000268, "Member 'AAtomEntranceVolume::NeighbourhoodAudioVolumeArray' has a wrong offset!");

// Class CriWareRuntime.Atom3dRegionHandle
// 0x0008 (0x0030 - 0x0028)
class UAtom3dRegionHandle final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Atom3dRegionHandle">();
	}
	static class UAtom3dRegionHandle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtom3dRegionHandle>();
	}
};
static_assert(alignof(UAtom3dRegionHandle) == 0x000008, "Wrong alignment on UAtom3dRegionHandle");
static_assert(sizeof(UAtom3dRegionHandle) == 0x000030, "Wrong size on UAtom3dRegionHandle");

// Class CriWareRuntime.AtomAudioVolume
// 0x0088 (0x02E0 - 0x0258)
class AAtomAudioVolume final : public AVolume
{
public:
	float                                         Priority;                                          // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEnabled : 1;                                      // 0x025C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CollisionProfile;                                  // 0x0260(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAutoSettingEntranceVolume;                        // 0x0268(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAutoSettingNeighbourAudioVolumeToEntranceVolume;  // 0x0269(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_26A[0x6];                                      // 0x026A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AudioVolumeTags;                                   // 0x0270(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bOverrideAtomAudioVolume;                          // 0x0280(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomAudioVolumeSettings*               AtomAudioVolumeSettings;                           // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomAudioVolumeParameters             AtomAudioVolumeSettingsOverrides;                  // 0x0290(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class AAtomEntranceVolume*>            EntranceVolumes;                                   // 0x02D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

public:
	static void EnableAllAudioVolume(bool bEnable);

	void OnRep_bEnabled();
	void SetEnabled(bool bNewEnabled);
	void SetPriority(float NewPriority);
	void SetReverbSettings(const struct FSnapshotSwitchSettings& NewReverbSettings);

	bool GetEnabled() const;
	float GetPriority() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomAudioVolume">();
	}
	static class AAtomAudioVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtomAudioVolume>();
	}
};
static_assert(alignof(AAtomAudioVolume) == 0x000008, "Wrong alignment on AAtomAudioVolume");
static_assert(sizeof(AAtomAudioVolume) == 0x0002E0, "Wrong size on AAtomAudioVolume");
static_assert(offsetof(AAtomAudioVolume, Priority) == 0x000258, "Member 'AAtomAudioVolume::Priority' has a wrong offset!");
static_assert(offsetof(AAtomAudioVolume, CollisionProfile) == 0x000260, "Member 'AAtomAudioVolume::CollisionProfile' has a wrong offset!");
static_assert(offsetof(AAtomAudioVolume, bAutoSettingEntranceVolume) == 0x000268, "Member 'AAtomAudioVolume::bAutoSettingEntranceVolume' has a wrong offset!");
static_assert(offsetof(AAtomAudioVolume, bAutoSettingNeighbourAudioVolumeToEntranceVolume) == 0x000269, "Member 'AAtomAudioVolume::bAutoSettingNeighbourAudioVolumeToEntranceVolume' has a wrong offset!");
static_assert(offsetof(AAtomAudioVolume, AudioVolumeTags) == 0x000270, "Member 'AAtomAudioVolume::AudioVolumeTags' has a wrong offset!");
static_assert(offsetof(AAtomAudioVolume, bOverrideAtomAudioVolume) == 0x000280, "Member 'AAtomAudioVolume::bOverrideAtomAudioVolume' has a wrong offset!");
static_assert(offsetof(AAtomAudioVolume, AtomAudioVolumeSettings) == 0x000288, "Member 'AAtomAudioVolume::AtomAudioVolumeSettings' has a wrong offset!");
static_assert(offsetof(AAtomAudioVolume, AtomAudioVolumeSettingsOverrides) == 0x000290, "Member 'AAtomAudioVolume::AtomAudioVolumeSettingsOverrides' has a wrong offset!");
static_assert(offsetof(AAtomAudioVolume, EntranceVolumes) == 0x0002D0, "Member 'AAtomAudioVolume::EntranceVolumes' has a wrong offset!");

// Class CriWareRuntime.Atom3dRegion
// 0x0020 (0x0048 - 0x0028)
class UAtom3dRegion final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtom3dRegionHandle*                    Handle;                                            // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UAtom3dRegionHandle* GetHandle();
	void SetHandle(class UAtom3dRegionHandle* InHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Atom3dRegion">();
	}
	static class UAtom3dRegion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtom3dRegion>();
	}
};
static_assert(alignof(UAtom3dRegion) == 0x000008, "Wrong alignment on UAtom3dRegion");
static_assert(sizeof(UAtom3dRegion) == 0x000048, "Wrong size on UAtom3dRegion");
static_assert(offsetof(UAtom3dRegion, Handle) == 0x000040, "Member 'UAtom3dRegion::Handle' has a wrong offset!");

// Class CriWareRuntime.Atom3dSourceBaseComponent
// 0x0090 (0x0290 - 0x0200)
class UAtom3dSourceBaseComponent : public USceneComponent
{
public:
	float                                         DefaultOutputVolumeScale;                          // 0x01F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtom3dRegion*                          DefaultRegion;                                     // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsAttenuationDistanceDebugSpheresVisible : 1;     // 0x0208(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultMinAttenuationDistance;                     // 0x020C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultMaxAttenuationDistance;                     // 0x0210(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsOutputInteriorPanFieldDebugSpheresVisible : 1;  // 0x0214(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultSourceRadius;                               // 0x0218(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultInteriorDistance;                           // 0x021C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DefaultDistanceAisacControls;                      // 0x0220(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DefaultOutputBasedAzimuthAngleAisacControls;       // 0x0230(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DefaultOutputBasedElevationAngleAisacControls;     // 0x0240(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DefaultListenerBasedAzimuthAngleAisacControls;     // 0x0250(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         DefaultListenerBasedElevationAngleAisacControls;   // 0x0260(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bIsDebugStringsForDetailsVisible : 1;              // 0x0270(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_271[0x1F];                                     // 0x0271(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetRegion(class UAtom3dRegion* InRegion);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Atom3dSourceBaseComponent">();
	}
	static class UAtom3dSourceBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtom3dSourceBaseComponent>();
	}
};
static_assert(alignof(UAtom3dSourceBaseComponent) == 0x000010, "Wrong alignment on UAtom3dSourceBaseComponent");
static_assert(sizeof(UAtom3dSourceBaseComponent) == 0x000290, "Wrong size on UAtom3dSourceBaseComponent");
static_assert(offsetof(UAtom3dSourceBaseComponent, DefaultOutputVolumeScale) == 0x0001F8, "Member 'UAtom3dSourceBaseComponent::DefaultOutputVolumeScale' has a wrong offset!");
static_assert(offsetof(UAtom3dSourceBaseComponent, DefaultRegion) == 0x000200, "Member 'UAtom3dSourceBaseComponent::DefaultRegion' has a wrong offset!");
static_assert(offsetof(UAtom3dSourceBaseComponent, DefaultMinAttenuationDistance) == 0x00020C, "Member 'UAtom3dSourceBaseComponent::DefaultMinAttenuationDistance' has a wrong offset!");
static_assert(offsetof(UAtom3dSourceBaseComponent, DefaultMaxAttenuationDistance) == 0x000210, "Member 'UAtom3dSourceBaseComponent::DefaultMaxAttenuationDistance' has a wrong offset!");
static_assert(offsetof(UAtom3dSourceBaseComponent, DefaultSourceRadius) == 0x000218, "Member 'UAtom3dSourceBaseComponent::DefaultSourceRadius' has a wrong offset!");
static_assert(offsetof(UAtom3dSourceBaseComponent, DefaultInteriorDistance) == 0x00021C, "Member 'UAtom3dSourceBaseComponent::DefaultInteriorDistance' has a wrong offset!");
static_assert(offsetof(UAtom3dSourceBaseComponent, DefaultDistanceAisacControls) == 0x000220, "Member 'UAtom3dSourceBaseComponent::DefaultDistanceAisacControls' has a wrong offset!");
static_assert(offsetof(UAtom3dSourceBaseComponent, DefaultOutputBasedAzimuthAngleAisacControls) == 0x000230, "Member 'UAtom3dSourceBaseComponent::DefaultOutputBasedAzimuthAngleAisacControls' has a wrong offset!");
static_assert(offsetof(UAtom3dSourceBaseComponent, DefaultOutputBasedElevationAngleAisacControls) == 0x000240, "Member 'UAtom3dSourceBaseComponent::DefaultOutputBasedElevationAngleAisacControls' has a wrong offset!");
static_assert(offsetof(UAtom3dSourceBaseComponent, DefaultListenerBasedAzimuthAngleAisacControls) == 0x000250, "Member 'UAtom3dSourceBaseComponent::DefaultListenerBasedAzimuthAngleAisacControls' has a wrong offset!");
static_assert(offsetof(UAtom3dSourceBaseComponent, DefaultListenerBasedElevationAngleAisacControls) == 0x000260, "Member 'UAtom3dSourceBaseComponent::DefaultListenerBasedElevationAngleAisacControls' has a wrong offset!");

// Class CriWareRuntime.Atom3dTransceiverComponent
// 0x0030 (0x02C0 - 0x0290)
class UAtom3dTransceiverComponent final : public UAtom3dSourceBaseComponent
{
public:
	class AActor*                                 InputPoint;                                        // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DefaultGlobalAisacs;                               // 0x0298(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bIsInputCrossfadeFieldDebugSpheresVisible : 1;     // 0x02A8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2A9[0x3];                                      // 0x02A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultDirectAudioRadius;                          // 0x02AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultCrossfadeDistance;                          // 0x02B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4[0xC];                                      // 0x02B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Atom3dTransceiverComponent">();
	}
	static class UAtom3dTransceiverComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtom3dTransceiverComponent>();
	}
};
static_assert(alignof(UAtom3dTransceiverComponent) == 0x000010, "Wrong alignment on UAtom3dTransceiverComponent");
static_assert(sizeof(UAtom3dTransceiverComponent) == 0x0002C0, "Wrong size on UAtom3dTransceiverComponent");
static_assert(offsetof(UAtom3dTransceiverComponent, InputPoint) == 0x000290, "Member 'UAtom3dTransceiverComponent::InputPoint' has a wrong offset!");
static_assert(offsetof(UAtom3dTransceiverComponent, DefaultGlobalAisacs) == 0x000298, "Member 'UAtom3dTransceiverComponent::DefaultGlobalAisacs' has a wrong offset!");
static_assert(offsetof(UAtom3dTransceiverComponent, DefaultDirectAudioRadius) == 0x0002AC, "Member 'UAtom3dTransceiverComponent::DefaultDirectAudioRadius' has a wrong offset!");
static_assert(offsetof(UAtom3dTransceiverComponent, DefaultCrossfadeDistance) == 0x0002B0, "Member 'UAtom3dTransceiverComponent::DefaultCrossfadeDistance' has a wrong offset!");

// Class CriWareRuntime.AtomAreaSoundVolume
// 0x0040 (0x0298 - 0x0258)
class AAtomAreaSoundVolume final : public AVolume
{
public:
	float                                         Priority;                                          // 0x0258(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bEnabled : 1;                                      // 0x025C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CollisionProfile;                                  // 0x0260(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         SoundStopDistance;                                 // 0x0268(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsEnableAtomCompoentPack;                         // 0x026C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_26D[0x2];                                      // 0x026D(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsAutoPlaySound;                                  // 0x026F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDeterminationFromVolumeBoundaryPlane;           // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAtomComponent*>                 AtomComponents;                                    // 0x0278(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USoundAtomCue*>                  Sounds;                                            // 0x0288(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	TArray<class UAtomComponent*> CreateSounds(const struct FVector& Listener_location);
	void DestroySounds();
	void OnRep_bEnabled();
	void SetEnabled(bool bNewEnabled);
	void SetPriority(float NewPriority);

	bool GetEnabled() const;
	float GetPriority() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomAreaSoundVolume">();
	}
	static class AAtomAreaSoundVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtomAreaSoundVolume>();
	}
};
static_assert(alignof(AAtomAreaSoundVolume) == 0x000008, "Wrong alignment on AAtomAreaSoundVolume");
static_assert(sizeof(AAtomAreaSoundVolume) == 0x000298, "Wrong size on AAtomAreaSoundVolume");
static_assert(offsetof(AAtomAreaSoundVolume, Priority) == 0x000258, "Member 'AAtomAreaSoundVolume::Priority' has a wrong offset!");
static_assert(offsetof(AAtomAreaSoundVolume, CollisionProfile) == 0x000260, "Member 'AAtomAreaSoundVolume::CollisionProfile' has a wrong offset!");
static_assert(offsetof(AAtomAreaSoundVolume, SoundStopDistance) == 0x000268, "Member 'AAtomAreaSoundVolume::SoundStopDistance' has a wrong offset!");
static_assert(offsetof(AAtomAreaSoundVolume, bIsEnableAtomCompoentPack) == 0x00026C, "Member 'AAtomAreaSoundVolume::bIsEnableAtomCompoentPack' has a wrong offset!");
static_assert(offsetof(AAtomAreaSoundVolume, bIsAutoPlaySound) == 0x00026F, "Member 'AAtomAreaSoundVolume::bIsAutoPlaySound' has a wrong offset!");
static_assert(offsetof(AAtomAreaSoundVolume, bIsDeterminationFromVolumeBoundaryPlane) == 0x000270, "Member 'AAtomAreaSoundVolume::bIsDeterminationFromVolumeBoundaryPlane' has a wrong offset!");
static_assert(offsetof(AAtomAreaSoundVolume, AtomComponents) == 0x000278, "Member 'AAtomAreaSoundVolume::AtomComponents' has a wrong offset!");
static_assert(offsetof(AAtomAreaSoundVolume, Sounds) == 0x000288, "Member 'AAtomAreaSoundVolume::Sounds' has a wrong offset!");

// Class CriWareRuntime.AtomAsrRack
// 0x0018 (0x0040 - 0x0028)
class UAtomAsrRack final : public UObject
{
public:
	int32                                         RackId;                                            // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x14];                                      // 0x002C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAtomAsrRack* GetAsrRack(int32 ASRRackID);
	static class UAtomAsrRack* GetDefaultAsrRack();

	void ApplyDspBusSnapshot(const class FString& SnapshotName, int32 Milliseconds);
	void AttachDspBusSetting(const class FString& SettingName);
	void ConnectToPadSpeaker(int32 UserIndex);
	void ConnectToPadVibrator(int32 UserIndex);
	void DetachDspBusSetting();
	bool GetBusAnalyzerInfo(const class FString& DspBusName, int32* Num_channels, TArray<float>* Rms_levels, TArray<float>* Peak_levels, TArray<float>* Peak_hold_levels);
	class FString GetCurrentAppliedSnapshot(int32 ASRRackID);
	void SetBusSendLevelByName(const class FString& SourceBusName, const class FString& DestBusName, float Level);
	void SetBusVolumeByName(const class FString& BusName, float Volume);
	void SetEffectBypass(const class FString& BusName, const class FString& EffectName, bool Bypasses);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomAsrRack">();
	}
	static class UAtomAsrRack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomAsrRack>();
	}
};
static_assert(alignof(UAtomAsrRack) == 0x000008, "Wrong alignment on UAtomAsrRack");
static_assert(sizeof(UAtomAsrRack) == 0x000040, "Wrong size on UAtomAsrRack");
static_assert(offsetof(UAtomAsrRack, RackId) == 0x000028, "Member 'UAtomAsrRack::RackId' has a wrong offset!");

// Class CriWareRuntime.AtomAudioVolumeSettings
// 0x0040 (0x0068 - 0x0028)
class UAtomAudioVolumeSettings final : public UObject
{
public:
	struct FAtomAudioVolumeParameters             AtomAudioVolumeParameters;                         // 0x0028(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomAudioVolumeSettings">();
	}
	static class UAtomAudioVolumeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomAudioVolumeSettings>();
	}
};
static_assert(alignof(UAtomAudioVolumeSettings) == 0x000008, "Wrong alignment on UAtomAudioVolumeSettings");
static_assert(sizeof(UAtomAudioVolumeSettings) == 0x000068, "Wrong size on UAtomAudioVolumeSettings");
static_assert(offsetof(UAtomAudioVolumeSettings, AtomAudioVolumeParameters) == 0x000028, "Member 'UAtomAudioVolumeSettings::AtomAudioVolumeParameters' has a wrong offset!");

// Class CriWareRuntime.AtomBusSampler
// 0x0040 (0x0068 - 0x0028)
class UAtomBusSampler final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnRecordingStarted;                                // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRecordingFinished;                               // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x20];                                      // 0x0048(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishRecording();
	void OnRecordingFinished__DelegateSignature();
	void OnRecordingStarted__DelegateSignature();
	void PauseRecordedSound(bool bPause);
	void PlayRecordedSound();
	void StartRecording(float InExpectedDuration, int32 InAsrRack, const class FString& InBusName, bool BusOutput);
	void StopRecordedSound();

	bool CanPlayRecordedSound() const;
	bool CanRecord() const;
	bool IsPausedRecordedSound() const;
	bool IsPlayingRecordedSound() const;
	bool IsRecording() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomBusSampler">();
	}
	static class UAtomBusSampler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomBusSampler>();
	}
};
static_assert(alignof(UAtomBusSampler) == 0x000008, "Wrong alignment on UAtomBusSampler");
static_assert(sizeof(UAtomBusSampler) == 0x000068, "Wrong size on UAtomBusSampler");
static_assert(offsetof(UAtomBusSampler, OnRecordingStarted) == 0x000028, "Member 'UAtomBusSampler::OnRecordingStarted' has a wrong offset!");
static_assert(offsetof(UAtomBusSampler, OnRecordingFinished) == 0x000038, "Member 'UAtomBusSampler::OnRecordingFinished' has a wrong offset!");

// Class CriWareRuntime.AtomCallback
// 0x0000 (0x0028 - 0x0028)
class IAtomCallback final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomCallback">();
	}
	static class IAtomCallback* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAtomCallback>();
	}
};
static_assert(alignof(IAtomCallback) == 0x000008, "Wrong alignment on IAtomCallback");
static_assert(sizeof(IAtomCallback) == 0x000028, "Wrong size on IAtomCallback");

// Class CriWareRuntime.AtomCallbackManager
// 0x0028 (0x0050 - 0x0028)
class UAtomCallbackManager final : public UObject
{
public:
	uint8                                         Pad_28[0x28];                                      // 0x0028(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void NativeBreakAtomBeatSyncInfo(const struct FAtomBeatSyncInfo& BeatSyncInfo, int32* BarCnt, int32* BeatCnt, float* BeatProgress, float* Bpm, int32* Offset, int32* NumBeats);
	static void NativeBreakAtomSequenceInfo(const struct FAtomSequenceInfo& SequenceInfo, float* Time, class FString* TagName, EAtomSequenceEventType* EventType, int32* CallbackID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomCallbackManager">();
	}
	static class UAtomCallbackManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomCallbackManager>();
	}
};
static_assert(alignof(UAtomCallbackManager) == 0x000008, "Wrong alignment on UAtomCallbackManager");
static_assert(sizeof(UAtomCallbackManager) == 0x000050, "Wrong size on UAtomCallbackManager");

// Class CriWareRuntime.AtomCategory
// 0x0000 (0x0028 - 0x0028)
class UAtomCategory final : public UBlueprintFunctionLibrary
{
public:
	static void GetAttachedAisacInfoById(int32 CategoryID, int32 AisacAttachedIndex, bool* IsSuccess, struct FAtomAisacInfo* AisacInfo);
	static void GetAttachedAisacInfoByName(const class FString& CategoryName, int32 AisacAttachedIndex, bool* IsSuccess, struct FAtomAisacInfo* AisacInfo);
	static float GetCurrentAisacControlValueById(int32 CategoryID, int32 AisacControlID);
	static float GetCurrentAisacControlValueByName(const class FString& CategoryName, const class FString& AisacControlName);
	static int32 GetNumAttachedAisacsById(int32 CategoryID);
	static int32 GetNumAttachedAisacsByName(const class FString& CategoryName);
	static float GetVolumeByName(const class FString& CategoryName);
	static bool IsPausedByName(const class FString& CategoryName);
	static void PauseByName(const class FString& CategoryName, bool bPause);
	static bool ResetAllAisacControlById(int32 CategoryID);
	static bool ResetAllAisacControlByName(const class FString& CategoryName);
	static void SetAisacControlByName(const class FString& CategoryName, const class FString& AisacName, float Value);
	static void SetVolumeByName(const class FString& CategoryName, float Volume);
	static void StopByName(const class FString& CategoryName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomCategory">();
	}
	static class UAtomCategory* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomCategory>();
	}
};
static_assert(alignof(UAtomCategory) == 0x000008, "Wrong alignment on UAtomCategory");
static_assert(sizeof(UAtomCategory) == 0x000028, "Wrong size on UAtomCategory");

// Class CriWareRuntime.AtomComponent
// 0x0EA0 (0x10A0 - 0x0200)
#pragma pack(push, 0x1)
class alignas(0x10) UAtomComponent : public USceneComponent
{
public:
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          Sound;                                             // 0x0200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtom3dRegion*                          Region;                                            // 0x0208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bAutoDestroy : 1;                                  // 0x0210(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bPersistAcrossLevelTransition : 1;                 // 0x0210(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_210_2 : 1;                                  // 0x0210(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bStopWhenOwnerDestroyed : 1;                       // 0x0210(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsUISound : 1;                                    // 0x0210(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultVolume;                                     // 0x0214(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableMultipleSoundPlayback : 1;                  // 0x0218(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUsePlaylist : 1;                                  // 0x0218(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bIsMovable;                                        // 0x0219(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStraddleAudioVolume;                           // 0x021A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAudioVolume;                                   // 0x021B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAreaSoundVolume;                               // 0x021C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21D[0x3];                                      // 0x021D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomSoundObject*                       SoundObject;                                       // 0x0220(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultBlockIndex;                                 // 0x0228(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtomAisacControlParam>         DefaultAisacControl;                               // 0x0230(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAtomSelectorParam>             DefaultSelectorLabel;                              // 0x0240(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	EAtomLoopSetting                              LoopSetting;                                       // 0x0250(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOnly2DSound : 1;                                  // 0x0251(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_252[0x6];                                      // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnStatusChanged;                                   // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnAudioVolumeChanged;                              // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnAudioFinished;                                   // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UWorld*                                 PlayWorld;                                         // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameViewportClient*                    GameViewport;                                      // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_298[0x18];                                     // 0x0298(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomSoundObject*                       DefaultSoundObject;                                // 0x02B0(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideAttenuation : 1;                          // 0x02B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoundAttenuationSettings              AttenuationOverrides;                              // 0x02C8(0x03A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_668[0x9D0];                                    // 0x0668(0x09D0)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCueSheet*                     CueSheet;                                          // 0x1038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1040[0x10];                                    // 0x1040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UAtomSoundObject*                       AppliedSoundObject;                                // 0x1050(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1058[0x20];                                    // 0x1058(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnAtomBeatSyncCallback;                            // 0x1078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnAtomSequenceCallback;                            // 0x1088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static void DestroyComponentByID(int32 TargetID);
	static class UAtomComponent* GetAtomComponentFromID(int32 TargetID);
	static bool GetDefaultAttenuationEnable();
	static void SetDefaultAttenuationEnable(bool bEnable);

	void AdjustAttenuation(const struct FSoundAttenuationSettings& InAttenuationSettings);
	void AtomBeatSyncCallbackDelegate__DelegateSignature(class UAtomComponent* AtomComponent, const struct FAtomBeatSyncInfo& BeatSyncInfo);
	void AtomSequenceCallbackDelegate__DelegateSignature(class UAtomComponent* AtomComponent, const struct FAtomSequenceInfo& SequenceInfo);
	void AttachAreaSoundVolume(class AAtomAreaSoundVolume* Sound_shape_volume);
	bool BP_GetAttenuationSettingsToApply(struct FSoundAttenuationSettings* OutAttenuationSettings);
	void ClearSelectorLabels();
	void EnqueueSound(class USoundAtomCue* NewSound);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel, float StartTime);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	TMap<class FString, float> GetAudioVolumeValueMap(EAtomAudioVolumeType Type);
	float GetVolume();
	void OnAudioFinished__DelegateSignature();
	void OnAudioVolumeChanged__DelegateSignature(EAtomAudioVolumeType Type, class AAtomAudioVolume* AtomAudioVolume, bool bIsCalledFromTick);
	void OnStatusChanged__DelegateSignature(EAtomComponentStatus Status, class UAtomComponent* AtomComponent);
	void Pause(bool bPause);
	void Play(float StartTime);
	void SetAisacByName(const class FString& ControlName, float ControlValue);
	void SetAsrRackID(int32 Asr_rack_id);
	void SetAsrRackIdArray(const TArray<int32>& AsrRackIDs);
	void SetBusSendLevel(int32 BusId, float Level);
	void SetBusSendLevelByName(const class FString& BusName, float Level);
	void SetBusSendLevelOffset(int32 BusId, float LevelOffset);
	void SetBusSendLevelOffsetByName(const class FString& BusName, float LevelOffset);
	void SetNextBlockIndex(int32 BlockIndex);
	void SetPitch(float Pitch);
	void SetPitchMultiplier(float NewPitchMultiplier);
	void SetRegion(class UAtom3dRegion* InRegion);
	void SetSelectorLabel(const class FString& Selector, const class FString& Label);
	void SetSound(class USoundAtomCue* NewSound);
	void SetSoundObject(class UAtomSoundObject* InSoundObject);
	void SetVolume(float Volume);
	void Stop();
	void StopWithoutReleaseTime();

	int32 GetAtomComponentID() const;
	class FString GetCueName() const;
	float GetCullDistance() const;
	float GetCullDistanceMargin() const;
	class AAtomAudioVolume* GetCurrentBelongingAudioVolume(EAtomAudioVolumeType Type, bool IsNeighbor) const;
	float GetCurrentCullingBoundaryDistance() const;
	float GetCurrentCullingMarginDistance() const;
	float GetCurrentEconomicTickBoundaryDistance() const;
	float GetCurrentEconomicTickFrequency() const;
	float GetCurrentEconomicTickMarginDistance() const;
	float GetCurrentMaxAttenuationDistance() const;
	float GetEconomicTickDistance() const;
	float GetEconomicTickDistanceMargin() const;
	float GetEconomicTickFrequency() const;
	float GetMaxAttenuationDistance() const;
	int32 GetNumQueuedSounds() const;
	float GetSequencePosition() const;
	EAtomComponentStatus GetStatus() const;
	float GetTime() const;
	struct FVector GetVelocity() const;
	bool HasBeenEconomicTick() const;
	bool IsLoop() const;
	bool IsPaused() const;
	bool IsPlaying() const;
	bool IsReducingTickFrequency() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomComponent">();
	}
	static class UAtomComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomComponent>();
	}
};
#pragma pack(pop)
static_assert(alignof(UAtomComponent) == 0x000010, "Wrong alignment on UAtomComponent");
static_assert(sizeof(UAtomComponent) == 0x0010A0, "Wrong size on UAtomComponent");
static_assert(offsetof(UAtomComponent, Sound) == 0x000200, "Member 'UAtomComponent::Sound' has a wrong offset!");
static_assert(offsetof(UAtomComponent, Region) == 0x000208, "Member 'UAtomComponent::Region' has a wrong offset!");
static_assert(offsetof(UAtomComponent, DefaultVolume) == 0x000214, "Member 'UAtomComponent::DefaultVolume' has a wrong offset!");
static_assert(offsetof(UAtomComponent, bIsMovable) == 0x000219, "Member 'UAtomComponent::bIsMovable' has a wrong offset!");
static_assert(offsetof(UAtomComponent, bCanStraddleAudioVolume) == 0x00021A, "Member 'UAtomComponent::bCanStraddleAudioVolume' has a wrong offset!");
static_assert(offsetof(UAtomComponent, bUseAudioVolume) == 0x00021B, "Member 'UAtomComponent::bUseAudioVolume' has a wrong offset!");
static_assert(offsetof(UAtomComponent, bUseAreaSoundVolume) == 0x00021C, "Member 'UAtomComponent::bUseAreaSoundVolume' has a wrong offset!");
static_assert(offsetof(UAtomComponent, SoundObject) == 0x000220, "Member 'UAtomComponent::SoundObject' has a wrong offset!");
static_assert(offsetof(UAtomComponent, DefaultBlockIndex) == 0x000228, "Member 'UAtomComponent::DefaultBlockIndex' has a wrong offset!");
static_assert(offsetof(UAtomComponent, DefaultAisacControl) == 0x000230, "Member 'UAtomComponent::DefaultAisacControl' has a wrong offset!");
static_assert(offsetof(UAtomComponent, DefaultSelectorLabel) == 0x000240, "Member 'UAtomComponent::DefaultSelectorLabel' has a wrong offset!");
static_assert(offsetof(UAtomComponent, LoopSetting) == 0x000250, "Member 'UAtomComponent::LoopSetting' has a wrong offset!");
static_assert(offsetof(UAtomComponent, OnStatusChanged) == 0x000258, "Member 'UAtomComponent::OnStatusChanged' has a wrong offset!");
static_assert(offsetof(UAtomComponent, OnAudioVolumeChanged) == 0x000268, "Member 'UAtomComponent::OnAudioVolumeChanged' has a wrong offset!");
static_assert(offsetof(UAtomComponent, OnAudioFinished) == 0x000278, "Member 'UAtomComponent::OnAudioFinished' has a wrong offset!");
static_assert(offsetof(UAtomComponent, PlayWorld) == 0x000288, "Member 'UAtomComponent::PlayWorld' has a wrong offset!");
static_assert(offsetof(UAtomComponent, GameViewport) == 0x000290, "Member 'UAtomComponent::GameViewport' has a wrong offset!");
static_assert(offsetof(UAtomComponent, DefaultSoundObject) == 0x0002B0, "Member 'UAtomComponent::DefaultSoundObject' has a wrong offset!");
static_assert(offsetof(UAtomComponent, AttenuationSettings) == 0x0002C0, "Member 'UAtomComponent::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(UAtomComponent, AttenuationOverrides) == 0x0002C8, "Member 'UAtomComponent::AttenuationOverrides' has a wrong offset!");
static_assert(offsetof(UAtomComponent, CueSheet) == 0x001038, "Member 'UAtomComponent::CueSheet' has a wrong offset!");
static_assert(offsetof(UAtomComponent, AppliedSoundObject) == 0x001050, "Member 'UAtomComponent::AppliedSoundObject' has a wrong offset!");
static_assert(offsetof(UAtomComponent, OnAtomBeatSyncCallback) == 0x001078, "Member 'UAtomComponent::OnAtomBeatSyncCallback' has a wrong offset!");
static_assert(offsetof(UAtomComponent, OnAtomSequenceCallback) == 0x001088, "Member 'UAtomComponent::OnAtomSequenceCallback' has a wrong offset!");

// Class CriWareRuntime.AtomComponentPool
// 0x0040 (0x0068 - 0x0028)
class UAtomComponentPool final : public UObject
{
public:
	TArray<class UAtomComponent*>                 Pool;                                              // 0x0028(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38[0x30];                                      // 0x0038(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomComponentPool">();
	}
	static class UAtomComponentPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomComponentPool>();
	}
};
static_assert(alignof(UAtomComponentPool) == 0x000008, "Wrong alignment on UAtomComponentPool");
static_assert(sizeof(UAtomComponentPool) == 0x000068, "Wrong size on UAtomComponentPool");
static_assert(offsetof(UAtomComponentPool, Pool) == 0x000028, "Member 'UAtomComponentPool::Pool' has a wrong offset!");

// Class CriWareRuntime.AtomCueSheetLoaderComponent
// 0x0090 (0x0290 - 0x0200)
class UAtomCueSheetLoaderComponent final : public USceneComponent
{
public:
	struct FSoftObjectPath                        CueSheetReference;                                 // 0x01F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCriFsBinderComponent*                  BinderComponent;                                   // 0x0210(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoadCompleted;                                   // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoadError;                                       // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x30];                                     // 0x0238(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCueSheet*                     CueSheet;                                          // 0x0268(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_270[0x20];                                     // 0x0270(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void LoadAtomCueSheet(class UObject* WorldContextObject, TSoftObjectPtr<class USoundAtomCueSheet> Asset, TDelegate<void(class USoundAtomCueSheet* Loaded)> OnLoaded, const struct FLatentActionInfo& LatentInfo);

	class USoundAtomCueSheet* GetAtomCueSheet();
	EAtomCueSheetLoaderComponentStatus GetStatus();
	void Load();
	void OnAtomCueSheetLoaded__DelegateSignature(class USoundAtomCueSheet* Loaded);
	void OnLoadCompleted__DelegateSignature();
	void OnLoadError__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomCueSheetLoaderComponent">();
	}
	static class UAtomCueSheetLoaderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomCueSheetLoaderComponent>();
	}
};
static_assert(alignof(UAtomCueSheetLoaderComponent) == 0x000010, "Wrong alignment on UAtomCueSheetLoaderComponent");
static_assert(sizeof(UAtomCueSheetLoaderComponent) == 0x000290, "Wrong size on UAtomCueSheetLoaderComponent");
static_assert(offsetof(UAtomCueSheetLoaderComponent, CueSheetReference) == 0x0001F8, "Member 'UAtomCueSheetLoaderComponent::CueSheetReference' has a wrong offset!");
static_assert(offsetof(UAtomCueSheetLoaderComponent, BinderComponent) == 0x000210, "Member 'UAtomCueSheetLoaderComponent::BinderComponent' has a wrong offset!");
static_assert(offsetof(UAtomCueSheetLoaderComponent, OnLoadCompleted) == 0x000218, "Member 'UAtomCueSheetLoaderComponent::OnLoadCompleted' has a wrong offset!");
static_assert(offsetof(UAtomCueSheetLoaderComponent, OnLoadError) == 0x000228, "Member 'UAtomCueSheetLoaderComponent::OnLoadError' has a wrong offset!");
static_assert(offsetof(UAtomCueSheetLoaderComponent, CueSheet) == 0x000268, "Member 'UAtomCueSheetLoaderComponent::CueSheet' has a wrong offset!");

// Class CriWareRuntime.AtomDeviceWatcher
// 0x0028 (0x0050 - 0x0028)
class UAtomDeviceWatcher final : public UObject
{
public:
	FMulticastInlineDelegateProperty_             OnDeviceUpdated;                                   // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetDeviceChannelCount(int32 ASRRackID);
	class FString GetDeviceName();
	EAtomDeviceType GetDeviceType(int32 ASRRackID);
	void OnDeviceUpdated__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomDeviceWatcher">();
	}
	static class UAtomDeviceWatcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomDeviceWatcher>();
	}
};
static_assert(alignof(UAtomDeviceWatcher) == 0x000008, "Wrong alignment on UAtomDeviceWatcher");
static_assert(sizeof(UAtomDeviceWatcher) == 0x000050, "Wrong size on UAtomDeviceWatcher");
static_assert(offsetof(UAtomDeviceWatcher, OnDeviceUpdated) == 0x000028, "Member 'UAtomDeviceWatcher::OnDeviceUpdated' has a wrong offset!");

// Class CriWareRuntime.AtomDisposer
// 0x0010 (0x0230 - 0x0220)
class AAtomDisposer final : public AActor
{
public:
	uint8                                         Pad_220[0x10];                                     // 0x0220(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomDisposer">();
	}
	static class AAtomDisposer* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtomDisposer>();
	}
};
static_assert(alignof(AAtomDisposer) == 0x000008, "Wrong alignment on AAtomDisposer");
static_assert(sizeof(AAtomDisposer) == 0x000230, "Wrong size on AAtomDisposer");

// Class CriWareRuntime.AtomListenerFocusPoint
// 0x0010 (0x0210 - 0x0200)
class UAtomListenerFocusPoint final : public USceneComponent
{
public:
	float                                         DistanceFocusLevel;                                // 0x01F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionFocusLevel;                               // 0x01FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_200[0x10];                                     // 0x0200(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomListenerFocusPoint">();
	}
	static class UAtomListenerFocusPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomListenerFocusPoint>();
	}
};
static_assert(alignof(UAtomListenerFocusPoint) == 0x000010, "Wrong alignment on UAtomListenerFocusPoint");
static_assert(sizeof(UAtomListenerFocusPoint) == 0x000210, "Wrong size on UAtomListenerFocusPoint");
static_assert(offsetof(UAtomListenerFocusPoint, DistanceFocusLevel) == 0x0001F8, "Member 'UAtomListenerFocusPoint::DistanceFocusLevel' has a wrong offset!");
static_assert(offsetof(UAtomListenerFocusPoint, DirectionFocusLevel) == 0x0001FC, "Member 'UAtomListenerFocusPoint::DirectionFocusLevel' has a wrong offset!");

// Class CriWareRuntime.AtomParameterComponent
// 0x0010 (0x00C0 - 0x00B0)
class UAtomParameterComponent final : public UActorComponent
{
public:
	class UAtomSoundObject*                       SoundObject;                                       // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtom3dRegion*                          Region;                                            // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomParameterComponent">();
	}
	static class UAtomParameterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomParameterComponent>();
	}
};
static_assert(alignof(UAtomParameterComponent) == 0x000008, "Wrong alignment on UAtomParameterComponent");
static_assert(sizeof(UAtomParameterComponent) == 0x0000C0, "Wrong size on UAtomParameterComponent");
static_assert(offsetof(UAtomParameterComponent, SoundObject) == 0x0000B0, "Member 'UAtomParameterComponent::SoundObject' has a wrong offset!");
static_assert(offsetof(UAtomParameterComponent, Region) == 0x0000B8, "Member 'UAtomParameterComponent::Region' has a wrong offset!");

// Class CriWareRuntime.AtomProfileData
// 0x0000 (0x0028 - 0x0028)
class UAtomProfileData final : public UBlueprintFunctionLibrary
{
public:
	static void CriWareAdx2ProfileDataSort(const TArray<struct FAtomProfileItem>& Original_item, EAtomProfileSortType Sort_type, EAtomSortOrderType Order_type, TArray<struct FAtomProfileItem>* Sorted_item);
	static TArray<struct FAtomProfileItem> CriWareAdx2ProfileDataUpdate(const class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomProfileData">();
	}
	static class UAtomProfileData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomProfileData>();
	}
};
static_assert(alignof(UAtomProfileData) == 0x000008, "Wrong alignment on UAtomProfileData");
static_assert(sizeof(UAtomProfileData) == 0x000028, "Wrong size on UAtomProfileData");

// Class CriWareRuntime.AtomSound
// 0x0008 (0x0228 - 0x0220)
class AAtomSound final : public AActor
{
public:
	class UAtomComponent*                         AtomComponent;                                     // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomSound">();
	}
	static class AAtomSound* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtomSound>();
	}
};
static_assert(alignof(AAtomSound) == 0x000008, "Wrong alignment on AAtomSound");
static_assert(sizeof(AAtomSound) == 0x000228, "Wrong size on AAtomSound");
static_assert(offsetof(AAtomSound, AtomComponent) == 0x000220, "Member 'AAtomSound::AtomComponent' has a wrong offset!");

// Class CriWareRuntime.AtomSoundData
// 0x0010 (0x0230 - 0x0220)
class AAtomSoundData final : public AActor
{
public:
	class USoundAtomCueSheet*                     CueSheet;                                          // 0x0220(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_228[0x8];                                      // 0x0228(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomSoundData">();
	}
	static class AAtomSoundData* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAtomSoundData>();
	}
};
static_assert(alignof(AAtomSoundData) == 0x000008, "Wrong alignment on AAtomSoundData");
static_assert(sizeof(AAtomSoundData) == 0x000230, "Wrong size on AAtomSoundData");
static_assert(offsetof(AAtomSoundData, CueSheet) == 0x000220, "Member 'AAtomSoundData::CueSheet' has a wrong offset!");

// Class CriWareRuntime.AtomSoundObject
// 0x0018 (0x0048 - 0x0030)
class UAtomSoundObject final : public UDataAsset
{
public:
	bool                                          EnableVoiceLimitScope;                             // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCategoryCueLimitScope;                       // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x16];                                      // 0x0032(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomSoundObject">();
	}
	static class UAtomSoundObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomSoundObject>();
	}
};
static_assert(alignof(UAtomSoundObject) == 0x000008, "Wrong alignment on UAtomSoundObject");
static_assert(sizeof(UAtomSoundObject) == 0x000048, "Wrong size on UAtomSoundObject");
static_assert(offsetof(UAtomSoundObject, EnableVoiceLimitScope) == 0x000030, "Member 'UAtomSoundObject::EnableVoiceLimitScope' has a wrong offset!");
static_assert(offsetof(UAtomSoundObject, EnableCategoryCueLimitScope) == 0x000031, "Member 'UAtomSoundObject::EnableCategoryCueLimitScope' has a wrong offset!");

// Class CriWareRuntime.AtomSpectrumAnalyzer
// 0x0000 (0x0028 - 0x0028)
class UAtomSpectrumAnalyzer final : public UBlueprintFunctionLibrary
{
public:
	static void CreateDspSpectra(class UAtomAsrRack* Asr_rack, const class FString& bus_name, int32 Num_bands);
	static void GetLevels(TArray<float>* Spectra);
	static void GetLevelsDB(float Display_range, TArray<float>* Spectra);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomSpectrumAnalyzer">();
	}
	static class UAtomSpectrumAnalyzer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomSpectrumAnalyzer>();
	}
};
static_assert(alignof(UAtomSpectrumAnalyzer) == 0x000008, "Wrong alignment on UAtomSpectrumAnalyzer");
static_assert(sizeof(UAtomSpectrumAnalyzer) == 0x000028, "Wrong size on UAtomSpectrumAnalyzer");

// Class CriWareRuntime.AtomStatics
// 0x0000 (0x0028 - 0x0028)
class UAtomStatics final : public UBlueprintFunctionLibrary
{
public:
	static void AddToAtomComponentIds(class UObject* AtomPlayGateRef, class UObject* SkeltalMeshComponentRef, int32 AtomComponentID);
	static class UAtomComponent* CreateRootedAtomComponent(const class UObject* WorldContextObject, bool bAutoDestroy);
	static float GetAtomGameVariable(const class FString& GameVariableName);
	static class AAtomAudioVolume* GetAudioVolumeAffectingListener(const int32 PlayerIndex, const EAtomAudioVolumeType TypeNum);
	static struct FAtomListenerFocusPointInfo GetListenerFocusPointInfo(const int32 PlayerIndex);
	static class UAtom3dRegion* GetListenerRegion(const int32 PlayerIndex);
	static struct FVector GetListeningPoint(const int32 PlayerIndex);
	static bool LoadAtomConfig(class USoundAtomConfig* AcfObject);
	static void PauseAudioOutput(bool bPause);
	static void PlayAtomSoundAtLocation(const class UObject* WorldContextObject, class USoundAtomCue* Sound, const struct FVector& Location, const struct FAtomComponentParams& Params_0);
	static void PlayAtomSoundAtLocationByName(const class UObject* WorldContextObject, class USoundAtomCueSheet* CueSheet, const class FString& CueName, const struct FVector& Location, const struct FAtomComponentParams& Params_0);
	static void PlaySoundAtLocation(class UObject* WorldContextObject, class USoundAtomCue* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings);
	static class UAtomComponent* PlaySoundAttached(class USoundAtomCue* Sound, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings);
	static class UAtomComponent* PlaySoundForAnimNotify(class USoundAtomCue* Sound, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bFollow);
	static void SetAtomGameVariable(const class FString& GameVariableName, float Value);
	static void SetListenerFocusPointDirectionLevel(const float DirectionLevel, const int32 PlayerIndex);
	static void SetListenerFocusPointDistanceLevel(const float DistanceLevel, const int32 PlayerIndex);
	static void SetListenerFocusPointInfo(const struct FAtomListenerFocusPointInfo& FocusPointInfo, const int32 PlayerIndex);
	static void SetListenerFocusPointTargetActor(class AActor* TargetActor, const int32 PlayerIndex);
	static void SetListenerFocusPointTargetComponent(class USceneComponent* TargetComponent, const int32 PlayerIndex);
	static void SetListenerRegion(class UAtom3dRegion* Region, const int32 PlayerIndex);
	static class UAtomComponent* SpawnAtomSound2D(const class UObject* WorldContextObject, class USoundAtomCue* Sound, const struct FAtomComponentParams& Params_0, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
	static class UAtomComponent* SpawnAtomSound2DByName(const class UObject* WorldContextObject, class USoundAtomCueSheet* CueSheet, const class FString& CueName, const struct FAtomComponentParams& Params_0, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
	static class UAtomComponent* SpawnAtomSoundAtLocation(const class UObject* WorldContextObject, class USoundAtomCue* Sound, const struct FVector& Location, const struct FAtomComponentParams& Params_0, bool bAutoDestroy);
	static class UAtomComponent* SpawnAtomSoundAtLocationByName(const class UObject* WorldContextObject, class USoundAtomCueSheet* CueSheet, const class FString& CueName, const struct FVector& Location, const struct FAtomComponentParams& Params_0, bool bAutoDestroy);
	static class UAtomComponent* SpawnAtomSoundAttached(class USoundAtomCue* Sound, class USceneComponent* AttachToComponent, const struct FAtomComponentParams& Params_0, class FName AttachPointName, const struct FVector& Location, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bAutoDestroy);
	static class UAtomComponent* SpawnAtomSoundAttachedByName(class USoundAtomCueSheet* CueSheet, const class FString& CueName, class USceneComponent* AttachToComponent, const struct FAtomComponentParams& Params_0, class FName AttachPointName, const struct FVector& Location, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, bool bAutoDestroy);
	static class UAtomComponent* SpawnSound2D(const class UObject* WorldContextObject, class USoundAtomCue* Sound, float PitchMultiplier, float StartTime, bool bPersistAcrossLevelTransition, bool bAutoDestroy);
	static class UAtomComponent* SpawnSoundAtLocation(const class UObject* WorldContextObject, class USoundAtomCue* Sound, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	static class UAtomComponent* SpawnSoundAttached(class USoundAtomCue* Sound, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, class USoundConcurrency* ConcurrencySettings, bool bAutoDestroy);
	static void StopAllSounds();
	static void StopAllSoundsForKeyFromAtomComponentIds(class UObject* AtomPlayGateRef, class UObject* SkeltalMeshComponentRef);
	static void UpdateDistanceFactorForAllSounds(float ArgDistanceFactor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomStatics">();
	}
	static class UAtomStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomStatics>();
	}
};
static_assert(alignof(UAtomStatics) == 0x000008, "Wrong alignment on UAtomStatics");
static_assert(sizeof(UAtomStatics) == 0x000028, "Wrong size on UAtomStatics");

// Class CriWareRuntime.AtomTriggerTableFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAtomTriggerTableFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetDataTableRowFromName(class UDataTable* Table, class FName RowName, struct FAtomTriggerRow* OutRow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomTriggerTableFunctionLibrary">();
	}
	static class UAtomTriggerTableFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomTriggerTableFunctionLibrary>();
	}
};
static_assert(alignof(UAtomTriggerTableFunctionLibrary) == 0x000008, "Wrong alignment on UAtomTriggerTableFunctionLibrary");
static_assert(sizeof(UAtomTriggerTableFunctionLibrary) == 0x000028, "Wrong size on UAtomTriggerTableFunctionLibrary");

// Class CriWareRuntime.AtomUnrealSoundRenderer
// 0x8050 (0x8410 - 0x03C0)
class UAtomUnrealSoundRenderer final : public USoundWaveProcedural
{
public:
	uint8                                         Pad_3C0[0x8050];                                   // 0x03C0(0x8050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomUnrealSoundRenderer">();
	}
	static class UAtomUnrealSoundRenderer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomUnrealSoundRenderer>();
	}
};
static_assert(alignof(UAtomUnrealSoundRenderer) == 0x000008, "Wrong alignment on UAtomUnrealSoundRenderer");
static_assert(sizeof(UAtomUnrealSoundRenderer) == 0x008410, "Wrong size on UAtomUnrealSoundRenderer");

// Class CriWareRuntime.AtomWavePlayer
// 0x00F8 (0x0120 - 0x0028)
class alignas(0x10) UAtomWavePlayer final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bIsUISound : 1;                                    // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnWaveFinished;                                    // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x18];                                      // 0x0050(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnWavePlaybackPercent;                             // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCue*                          SoundAtomCue;                                      // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAtomWaveInfo                          WaveInfo;                                          // 0x0098(0x0014)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bLoop : 1;                                         // 0x00AC(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_AD[0x73];                                      // 0x00AD(0x0073)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void Play(float StartTime);
	bool SetLooping(bool Looping);
	void SetPaused(bool bPause);
	void SetWave(class USoundAtomCue* InCue);
	void Stop();
	void StopDelayed(float DelayTime);

	class USoundAtomCue* GetCue() const;
	EAtomWavePlayState GetPlayState() const;
	struct FTimespan GetTime() const;
	struct FAtomWaveInfo GetWaveInfo() const;
	bool HasError() const;
	bool IsLooping() const;
	bool IsPaused() const;
	bool IsPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AtomWavePlayer">();
	}
	static class UAtomWavePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAtomWavePlayer>();
	}
};
static_assert(alignof(UAtomWavePlayer) == 0x000010, "Wrong alignment on UAtomWavePlayer");
static_assert(sizeof(UAtomWavePlayer) == 0x000120, "Wrong size on UAtomWavePlayer");
static_assert(offsetof(UAtomWavePlayer, OnWaveFinished) == 0x000040, "Member 'UAtomWavePlayer::OnWaveFinished' has a wrong offset!");
static_assert(offsetof(UAtomWavePlayer, OnWavePlaybackPercent) == 0x000068, "Member 'UAtomWavePlayer::OnWavePlaybackPercent' has a wrong offset!");
static_assert(offsetof(UAtomWavePlayer, SoundAtomCue) == 0x000090, "Member 'UAtomWavePlayer::SoundAtomCue' has a wrong offset!");
static_assert(offsetof(UAtomWavePlayer, WaveInfo) == 0x000098, "Member 'UAtomWavePlayer::WaveInfo' has a wrong offset!");

// Class CriWareRuntime.CriFsBinderComponent
// 0x0050 (0x0250 - 0x0200)
class UCriFsBinderComponent final : public USceneComponent
{
public:
	class FString                                 FilePath;                                          // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBindCompleted;                                   // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBindError;                                       // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_228[0x28];                                     // 0x0228(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Bind();
	ECriFsBinderStatus GetStatus();
	void OnBindCompleted__DelegateSignature();
	void OnBindError__DelegateSignature();
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriFsBinderComponent">();
	}
	static class UCriFsBinderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriFsBinderComponent>();
	}
};
static_assert(alignof(UCriFsBinderComponent) == 0x000010, "Wrong alignment on UCriFsBinderComponent");
static_assert(sizeof(UCriFsBinderComponent) == 0x000250, "Wrong size on UCriFsBinderComponent");
static_assert(offsetof(UCriFsBinderComponent, FilePath) == 0x0001F8, "Member 'UCriFsBinderComponent::FilePath' has a wrong offset!");
static_assert(offsetof(UCriFsBinderComponent, OnBindCompleted) == 0x000208, "Member 'UCriFsBinderComponent::OnBindCompleted' has a wrong offset!");
static_assert(offsetof(UCriFsBinderComponent, OnBindError) == 0x000218, "Member 'UCriFsBinderComponent::OnBindError' has a wrong offset!");

// Class CriWareRuntime.CriFsLoader
// 0x0008 (0x0228 - 0x0220)
class ACriFsLoader final : public AActor
{
public:
	class UCriFsLoaderComponent*                  LoaderComponent;                                   // 0x0220(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriFsLoader">();
	}
	static class ACriFsLoader* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACriFsLoader>();
	}
};
static_assert(alignof(ACriFsLoader) == 0x000008, "Wrong alignment on ACriFsLoader");
static_assert(sizeof(ACriFsLoader) == 0x000228, "Wrong size on ACriFsLoader");
static_assert(offsetof(ACriFsLoader, LoaderComponent) == 0x000220, "Member 'ACriFsLoader::LoaderComponent' has a wrong offset!");

// Class CriWareRuntime.CriFsLoaderComponent
// 0x0070 (0x0270 - 0x0200)
class UCriFsLoaderComponent final : public USceneComponent
{
public:
	class FString                                 FilePath;                                          // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoadCompleted;                                   // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnLoadError;                                       // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_228[0x48];                                     // 0x0228(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const TArray<uint8> GetDataArray();
	ECriFsLoaderStatus GetStatus();
	void Load();
	void OnLoadCompleted__DelegateSignature();
	void OnLoadError__DelegateSignature();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriFsLoaderComponent">();
	}
	static class UCriFsLoaderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriFsLoaderComponent>();
	}
};
static_assert(alignof(UCriFsLoaderComponent) == 0x000010, "Wrong alignment on UCriFsLoaderComponent");
static_assert(sizeof(UCriFsLoaderComponent) == 0x000270, "Wrong size on UCriFsLoaderComponent");
static_assert(offsetof(UCriFsLoaderComponent, FilePath) == 0x0001F8, "Member 'UCriFsLoaderComponent::FilePath' has a wrong offset!");
static_assert(offsetof(UCriFsLoaderComponent, OnLoadCompleted) == 0x000208, "Member 'UCriFsLoaderComponent::OnLoadCompleted' has a wrong offset!");
static_assert(offsetof(UCriFsLoaderComponent, OnLoadError) == 0x000218, "Member 'UCriFsLoaderComponent::OnLoadError' has a wrong offset!");

// Class CriWareRuntime.CriWareError
// 0x0028 (0x0050 - 0x0028)
class alignas(0x10) UCriWareError final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnCriWareError;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UCriWareError* GetCriWareError();

	void OnCriWareError__DelegateSignature(const struct FCriWareErrorInfo& ErrorInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriWareError">();
	}
	static class UCriWareError* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriWareError>();
	}
};
static_assert(alignof(UCriWareError) == 0x000010, "Wrong alignment on UCriWareError");
static_assert(sizeof(UCriWareError) == 0x000050, "Wrong size on UCriWareError");
static_assert(offsetof(UCriWareError, OnCriWareError) == 0x000030, "Member 'UCriWareError::OnCriWareError' has a wrong offset!");

// Class CriWareRuntime.CriWareFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UCriWareFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SetGameVariableByName(const class FString& GameVariableName, float Value);
	static void SetGlobalLabelToSelectorByName(const class FString& SelectorName, const class FString& LabelName);
	static void SetSpeakerAngleArray(ECriWareSpeakerSystem SpeakerSystem, const TArray<float>& Angles);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriWareFunctionLibrary">();
	}
	static class UCriWareFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriWareFunctionLibrary>();
	}
};
static_assert(alignof(UCriWareFunctionLibrary) == 0x000008, "Wrong alignment on UCriWareFunctionLibrary");
static_assert(sizeof(UCriWareFunctionLibrary) == 0x000028, "Wrong size on UCriWareFunctionLibrary");

// Class CriWareRuntime.CriWareInitializer
// 0x0000 (0x0028 - 0x0028)
class UCriWareInitializer final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriWareInitializer">();
	}
	static class UCriWareInitializer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriWareInitializer>();
	}
};
static_assert(alignof(UCriWareInitializer) == 0x000008, "Wrong alignment on UCriWareInitializer");
static_assert(sizeof(UCriWareInitializer) == 0x000028, "Wrong size on UCriWareInitializer");

// Class CriWareRuntime.CriWarePluginSettings
// 0x0338 (0x0360 - 0x0028)
class UCriWarePluginSettings final : public UObject
{
public:
	bool                                          bNoExistCriWareIni;                                // 0x0028(0x0001)(Edit, ZeroConstructor, Config, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEditableCriWareAdxLipSyncSetting;                 // 0x0029(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         NonAssetContentDir;                                // 0x0030(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FString                                 ContentDir;                                        // 0x0040(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumBinders;                                        // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxBinds;                                          // 0x0068(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLoaders;                                        // 0x0070(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPath;                                           // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          OutputsLogFileSystem;                              // 0x0080(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_FileAccessThreadAffinityMask;                  // 0x0084(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x4];                                       // 0x0088(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_DataDecompressionThreadAffinityMask;           // 0x008C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x4];                                       // 0x0090(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_MemoryFileSystemThreadAffinityMask;            // 0x0094(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x4];                                       // 0x0098(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_FileAccessThreadPriority;                      // 0x009C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x4];                                       // 0x00A0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_DataDecompressionThreadPriority;               // 0x00A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x4];                                       // 0x00A8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_MemoryFileSystemThreadPriority;                // 0x00AC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x4];                                       // 0x00B0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          AutomaticallyCreateCueAsset;                       // 0x00B4(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsesInGamePreview;                                 // 0x00B5(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x1];                                       // 0x00B6(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          OutputsLogAtom;                                    // 0x00B7(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         AwbRootDirectory;                                  // 0x00C0(0x0010)(Edit, NativeAccessSpecifierPublic)
	class FString                                 AwbRoot;                                           // 0x00D0(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E0[0x10];                                      // 0x00E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MonitorCommunicationBufferSize;                    // 0x00F0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPitch;                                          // 0x00F8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AsrOutputChannels;                                 // 0x0100(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxVirtualVoices;                                  // 0x0108(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumStandardMemoryVoices;                           // 0x0110(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StandardMemoryVoiceNumChannels;                    // 0x0118(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StandardMemoryVoiceSamplingRate;                   // 0x0120(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumStandardStreamingVoices;                        // 0x0128(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StandardStreamingVoiceNumChannels;                 // 0x0130(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StandardStreamingVoiceSamplingRate;                // 0x0138(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          PoolAtomComponent;                                 // 0x0140(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        AtomConfig;                                        // 0x0148(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x18];                                     // 0x0160(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AcfFileName;                                       // 0x0178(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        AtomConfigDataTable;                               // 0x0188(0x0018)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A0[0x18];                                     // 0x01A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceFactor;                                    // 0x01B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EAtomSoundRendererType                        SoundRendererTypeUI;                               // 0x01C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C1[0x3];                                      // 0x01C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SoundRendererType;                                 // 0x01C4(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAtomAsrRackConfigUI>           AsrRackConfigUI;                                   // 0x01D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAtomAsrRackConfig>             AsrRackConfig;                                     // 0x01E0(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0[0x10];                                     // 0x01F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Hardware1;                                         // 0x0200(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Hardware2;                                         // 0x0210(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Hardware3;                                         // 0x0220(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Hardware4;                                         // 0x0230(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EconomicTickMarginDistance;                        // 0x0240(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EconomicTickFrequency;                             // 0x0248(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CullingMarginDistance;                             // 0x0250(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HcaMxVoiceSamplingRate;                            // 0x0258(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumHcaMxMemoryVoices;                              // 0x0260(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HcaMxMemoryVoiceNumChannels;                       // 0x0268(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumHcaMxStreamingVoices;                           // 0x0270(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HcaMxStreamingVoiceNumChannels;                    // 0x0278(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          WASAPI_IsExclusive;                                // 0x0280(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_281[0x3];                                      // 0x0281(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WASAPI_BitsPerSample;                              // 0x0284(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_288[0x4];                                      // 0x0288(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WASAPI_SamplingRate;                               // 0x028C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_290[0x4];                                      // 0x0290(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WASAPI_NumChannels;                                // 0x0294(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_298[0x4];                                      // 0x0298(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseUnrealSoundRenderer;                            // 0x029C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29D[0x1];                                      // 0x029D(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          SmartPhone_UseSonicSYNC;                           // 0x029E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29F[0x1];                                      // 0x029F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_ServerThreadAffinityMask;                      // 0x02A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_OutputThreadAffinityMask;                      // 0x02A8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_ServerThreadPriority;                          // 0x02B0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B4[0x4];                                      // 0x02B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_OutputThreadPriority;                          // 0x02B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          PS4_UseAudio3d;                                    // 0x02C0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_NumberOfAudio3dMemoryVoices;                   // 0x02C4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x4];                                      // 0x02C8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_SamplingRateOfAudio3dMemoryVoices;             // 0x02CC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D0[0x4];                                      // 0x02D0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_NumberOfAudio3dStreamingVoices;                // 0x02D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x4];                                      // 0x02D8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PS4_SamplingRateOfAudio3dStreamingVoices;          // 0x02DC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E0[0x4];                                      // 0x02E0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Switch_NumOpusMemoryVoices;                        // 0x02E4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E8[0x4];                                      // 0x02E8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Switch_OpusMemoryVoiceNumChannels;                 // 0x02EC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F0[0x4];                                      // 0x02F0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Switch_OpusMemoryVoiceSamplingRate;                // 0x02F4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F8[0x4];                                      // 0x02F8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Switch_NumOpusStreamingVoices;                     // 0x02FC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_300[0x4];                                      // 0x0300(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Switch_OpusStreamingVoiceNumChannels;              // 0x0304(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_308[0x4];                                      // 0x0308(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Switch_OpusStreamingVoiceSamplingRate;             // 0x030C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_310[0x4];                                      // 0x0310(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          InitializeMana;                                    // 0x0314(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_315[0x1];                                      // 0x0315(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EnableDecodeSkip;                                  // 0x0316(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_317[0x1];                                      // 0x0317(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxDecoderHandles;                                 // 0x0318(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31C[0x4];                                      // 0x031C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxManaBPS;                                        // 0x0320(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxManaStreams;                                    // 0x0328(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseH264Decoder;                                    // 0x0330(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331[0x1];                                      // 0x0331(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          InitializeAdxLipSync;                              // 0x0332(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_333[0x1];                                      // 0x0333(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxNumAnalyzerHandles;                             // 0x0334(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_338[0x4];                                      // 0x0338(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseManaStartupMovies;                             // 0x033C(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitForMoviesToComplete;                          // 0x033D(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoviesAreSkippable;                               // 0x033E(0x0001)(Edit, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33F[0x1];                                      // 0x033F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         StartupMovies;                                     // 0x0340(0x0010)(Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_350[0x10];                                     // 0x0350(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CriWarePluginSettings">();
	}
	static class UCriWarePluginSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCriWarePluginSettings>();
	}
};
static_assert(alignof(UCriWarePluginSettings) == 0x000008, "Wrong alignment on UCriWarePluginSettings");
static_assert(sizeof(UCriWarePluginSettings) == 0x000360, "Wrong size on UCriWarePluginSettings");
static_assert(offsetof(UCriWarePluginSettings, bNoExistCriWareIni) == 0x000028, "Member 'UCriWarePluginSettings::bNoExistCriWareIni' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, bEditableCriWareAdxLipSyncSetting) == 0x000029, "Member 'UCriWarePluginSettings::bEditableCriWareAdxLipSyncSetting' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NonAssetContentDir) == 0x000030, "Member 'UCriWarePluginSettings::NonAssetContentDir' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, ContentDir) == 0x000040, "Member 'UCriWarePluginSettings::ContentDir' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NumBinders) == 0x000060, "Member 'UCriWarePluginSettings::NumBinders' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxBinds) == 0x000068, "Member 'UCriWarePluginSettings::MaxBinds' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NumLoaders) == 0x000070, "Member 'UCriWarePluginSettings::NumLoaders' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxPath) == 0x000078, "Member 'UCriWarePluginSettings::MaxPath' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, OutputsLogFileSystem) == 0x000080, "Member 'UCriWarePluginSettings::OutputsLogFileSystem' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_FileAccessThreadAffinityMask) == 0x000084, "Member 'UCriWarePluginSettings::PS4_FileAccessThreadAffinityMask' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_DataDecompressionThreadAffinityMask) == 0x00008C, "Member 'UCriWarePluginSettings::PS4_DataDecompressionThreadAffinityMask' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_MemoryFileSystemThreadAffinityMask) == 0x000094, "Member 'UCriWarePluginSettings::PS4_MemoryFileSystemThreadAffinityMask' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_FileAccessThreadPriority) == 0x00009C, "Member 'UCriWarePluginSettings::PS4_FileAccessThreadPriority' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_DataDecompressionThreadPriority) == 0x0000A4, "Member 'UCriWarePluginSettings::PS4_DataDecompressionThreadPriority' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_MemoryFileSystemThreadPriority) == 0x0000AC, "Member 'UCriWarePluginSettings::PS4_MemoryFileSystemThreadPriority' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AutomaticallyCreateCueAsset) == 0x0000B4, "Member 'UCriWarePluginSettings::AutomaticallyCreateCueAsset' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, UsesInGamePreview) == 0x0000B5, "Member 'UCriWarePluginSettings::UsesInGamePreview' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, OutputsLogAtom) == 0x0000B7, "Member 'UCriWarePluginSettings::OutputsLogAtom' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AwbRootDirectory) == 0x0000C0, "Member 'UCriWarePluginSettings::AwbRootDirectory' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AwbRoot) == 0x0000D0, "Member 'UCriWarePluginSettings::AwbRoot' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MonitorCommunicationBufferSize) == 0x0000F0, "Member 'UCriWarePluginSettings::MonitorCommunicationBufferSize' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxPitch) == 0x0000F8, "Member 'UCriWarePluginSettings::MaxPitch' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AsrOutputChannels) == 0x000100, "Member 'UCriWarePluginSettings::AsrOutputChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxVirtualVoices) == 0x000108, "Member 'UCriWarePluginSettings::MaxVirtualVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NumStandardMemoryVoices) == 0x000110, "Member 'UCriWarePluginSettings::NumStandardMemoryVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, StandardMemoryVoiceNumChannels) == 0x000118, "Member 'UCriWarePluginSettings::StandardMemoryVoiceNumChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, StandardMemoryVoiceSamplingRate) == 0x000120, "Member 'UCriWarePluginSettings::StandardMemoryVoiceSamplingRate' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NumStandardStreamingVoices) == 0x000128, "Member 'UCriWarePluginSettings::NumStandardStreamingVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, StandardStreamingVoiceNumChannels) == 0x000130, "Member 'UCriWarePluginSettings::StandardStreamingVoiceNumChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, StandardStreamingVoiceSamplingRate) == 0x000138, "Member 'UCriWarePluginSettings::StandardStreamingVoiceSamplingRate' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PoolAtomComponent) == 0x000140, "Member 'UCriWarePluginSettings::PoolAtomComponent' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AtomConfig) == 0x000148, "Member 'UCriWarePluginSettings::AtomConfig' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AcfFileName) == 0x000178, "Member 'UCriWarePluginSettings::AcfFileName' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AtomConfigDataTable) == 0x000188, "Member 'UCriWarePluginSettings::AtomConfigDataTable' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, DistanceFactor) == 0x0001B8, "Member 'UCriWarePluginSettings::DistanceFactor' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, SoundRendererTypeUI) == 0x0001C0, "Member 'UCriWarePluginSettings::SoundRendererTypeUI' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, SoundRendererType) == 0x0001C4, "Member 'UCriWarePluginSettings::SoundRendererType' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AsrRackConfigUI) == 0x0001D0, "Member 'UCriWarePluginSettings::AsrRackConfigUI' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, AsrRackConfig) == 0x0001E0, "Member 'UCriWarePluginSettings::AsrRackConfig' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, Hardware1) == 0x000200, "Member 'UCriWarePluginSettings::Hardware1' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, Hardware2) == 0x000210, "Member 'UCriWarePluginSettings::Hardware2' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, Hardware3) == 0x000220, "Member 'UCriWarePluginSettings::Hardware3' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, Hardware4) == 0x000230, "Member 'UCriWarePluginSettings::Hardware4' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, EconomicTickMarginDistance) == 0x000240, "Member 'UCriWarePluginSettings::EconomicTickMarginDistance' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, EconomicTickFrequency) == 0x000248, "Member 'UCriWarePluginSettings::EconomicTickFrequency' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, CullingMarginDistance) == 0x000250, "Member 'UCriWarePluginSettings::CullingMarginDistance' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, HcaMxVoiceSamplingRate) == 0x000258, "Member 'UCriWarePluginSettings::HcaMxVoiceSamplingRate' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NumHcaMxMemoryVoices) == 0x000260, "Member 'UCriWarePluginSettings::NumHcaMxMemoryVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, HcaMxMemoryVoiceNumChannels) == 0x000268, "Member 'UCriWarePluginSettings::HcaMxMemoryVoiceNumChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, NumHcaMxStreamingVoices) == 0x000270, "Member 'UCriWarePluginSettings::NumHcaMxStreamingVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, HcaMxStreamingVoiceNumChannels) == 0x000278, "Member 'UCriWarePluginSettings::HcaMxStreamingVoiceNumChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, WASAPI_IsExclusive) == 0x000280, "Member 'UCriWarePluginSettings::WASAPI_IsExclusive' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, WASAPI_BitsPerSample) == 0x000284, "Member 'UCriWarePluginSettings::WASAPI_BitsPerSample' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, WASAPI_SamplingRate) == 0x00028C, "Member 'UCriWarePluginSettings::WASAPI_SamplingRate' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, WASAPI_NumChannels) == 0x000294, "Member 'UCriWarePluginSettings::WASAPI_NumChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, UseUnrealSoundRenderer) == 0x00029C, "Member 'UCriWarePluginSettings::UseUnrealSoundRenderer' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, SmartPhone_UseSonicSYNC) == 0x00029E, "Member 'UCriWarePluginSettings::SmartPhone_UseSonicSYNC' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_ServerThreadAffinityMask) == 0x0002A0, "Member 'UCriWarePluginSettings::PS4_ServerThreadAffinityMask' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_OutputThreadAffinityMask) == 0x0002A8, "Member 'UCriWarePluginSettings::PS4_OutputThreadAffinityMask' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_ServerThreadPriority) == 0x0002B0, "Member 'UCriWarePluginSettings::PS4_ServerThreadPriority' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_OutputThreadPriority) == 0x0002B8, "Member 'UCriWarePluginSettings::PS4_OutputThreadPriority' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_UseAudio3d) == 0x0002C0, "Member 'UCriWarePluginSettings::PS4_UseAudio3d' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_NumberOfAudio3dMemoryVoices) == 0x0002C4, "Member 'UCriWarePluginSettings::PS4_NumberOfAudio3dMemoryVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_SamplingRateOfAudio3dMemoryVoices) == 0x0002CC, "Member 'UCriWarePluginSettings::PS4_SamplingRateOfAudio3dMemoryVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_NumberOfAudio3dStreamingVoices) == 0x0002D4, "Member 'UCriWarePluginSettings::PS4_NumberOfAudio3dStreamingVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, PS4_SamplingRateOfAudio3dStreamingVoices) == 0x0002DC, "Member 'UCriWarePluginSettings::PS4_SamplingRateOfAudio3dStreamingVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, Switch_NumOpusMemoryVoices) == 0x0002E4, "Member 'UCriWarePluginSettings::Switch_NumOpusMemoryVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, Switch_OpusMemoryVoiceNumChannels) == 0x0002EC, "Member 'UCriWarePluginSettings::Switch_OpusMemoryVoiceNumChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, Switch_OpusMemoryVoiceSamplingRate) == 0x0002F4, "Member 'UCriWarePluginSettings::Switch_OpusMemoryVoiceSamplingRate' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, Switch_NumOpusStreamingVoices) == 0x0002FC, "Member 'UCriWarePluginSettings::Switch_NumOpusStreamingVoices' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, Switch_OpusStreamingVoiceNumChannels) == 0x000304, "Member 'UCriWarePluginSettings::Switch_OpusStreamingVoiceNumChannels' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, Switch_OpusStreamingVoiceSamplingRate) == 0x00030C, "Member 'UCriWarePluginSettings::Switch_OpusStreamingVoiceSamplingRate' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, InitializeMana) == 0x000314, "Member 'UCriWarePluginSettings::InitializeMana' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, EnableDecodeSkip) == 0x000316, "Member 'UCriWarePluginSettings::EnableDecodeSkip' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxDecoderHandles) == 0x000318, "Member 'UCriWarePluginSettings::MaxDecoderHandles' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxManaBPS) == 0x000320, "Member 'UCriWarePluginSettings::MaxManaBPS' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxManaStreams) == 0x000328, "Member 'UCriWarePluginSettings::MaxManaStreams' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, UseH264Decoder) == 0x000330, "Member 'UCriWarePluginSettings::UseH264Decoder' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, InitializeAdxLipSync) == 0x000332, "Member 'UCriWarePluginSettings::InitializeAdxLipSync' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, MaxNumAnalyzerHandles) == 0x000334, "Member 'UCriWarePluginSettings::MaxNumAnalyzerHandles' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, bUseManaStartupMovies) == 0x00033C, "Member 'UCriWarePluginSettings::bUseManaStartupMovies' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, bWaitForMoviesToComplete) == 0x00033D, "Member 'UCriWarePluginSettings::bWaitForMoviesToComplete' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, bMoviesAreSkippable) == 0x00033E, "Member 'UCriWarePluginSettings::bMoviesAreSkippable' has a wrong offset!");
static_assert(offsetof(UCriWarePluginSettings, StartupMovies) == 0x000340, "Member 'UCriWarePluginSettings::StartupMovies' has a wrong offset!");

// Class CriWareRuntime.ManaComponent
// 0x01E0 (0x0290 - 0x00B0)
class UManaComponent final : public UActorComponent
{
public:
	class UManaTexture*                           Movie;                                             // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEventPoint;                                      // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSubtitleChanged;                                 // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStatusChanged;                                   // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMovieChanged;                                    // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSeekCompleted;                                   // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTrackChanged;                                    // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnFrameOnTime;                                     // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlayerDestroyed;                                 // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void(class UManaComponent* ManaComponent)> OnRequestData;                                     // 0x0138(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x40];                                     // 0x0148(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaPlaylist*                          Playlist;                                          // 0x0188(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PlaylistIndex;                                     // 0x0190(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bLoop;                                             // 0x0198(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AlphaTrack;                                        // 0x019C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AudioTrack;                                        // 0x01A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SubAudioTrack;                                     // 0x01A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ExtraAudioTrack;                                   // 0x01A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AudioCategoryName;                                 // 0x01B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 SubAudioCategoryName;                              // 0x01C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 ExtraAudioCategoryName;                            // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSubtitlesEnabled;                                 // 0x01E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E1[0x3];                                      // 0x01E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubtitlesChannel;                                  // 0x01E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EManaSubtitlesEncoding                        SubtitlesEncoding;                                 // 0x01E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EManaFrameAction                              EndFrameAction;                                    // 0x01E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EManaPlaybackTimer                            PlaybackTimer;                                     // 0x01EA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EManaMaxFrameDrop                             MaxFrameDrop;                                      // 0x01EB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1EC[0xA4];                                     // 0x01EC(0x00A4)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AdvanceTime(const struct FTimespan& DeltaTime);
	void ChangeSubtitlesChannel(int32 Channel);
	void ChangeSubtitlesEncoding(EManaSubtitlesEncoding Encoding);
	void EnableSeamless(bool bEnable);
	void EnableSubtitles(bool bEnable);
	void Loop(bool bInLoop);
	bool Next();
	void OnEventPoint__DelegateSignature(const struct FManaEventPointInfo& EventPointInfo);
	void OnFrameOnTime__DelegateSignature(int32 FrameNumber, class UManaComponent* ManaComponent);
	void OnMovieChanged__DelegateSignature(class UManaMovie* Movie_0, class UManaComponent* ManaComponent);
	void OnPlayerDestroyed__DelegateSignature(class UManaComponent* ManaComponent);
	void OnRequestData__DelegateSignature(class UManaComponent* ManaComponent);
	void OnSeekCompleted__DelegateSignature(int32 FrameNumber, class UManaComponent* ManaComponent);
	void OnStatusChanged__DelegateSignature(EManaComponentStatus Status, class UManaComponent* ManaComponent);
	void OnSubtitleChanged__DelegateSignature(const class FText& Subtitle);
	void OnTrackChanged__DelegateSignature(int32 TrackNumber, class UManaComponent* ManaComponent);
	void Pause(bool bPause);
	void Play();
	void Prepare();
	void PreparePlaylistIndex(int32 Index_0);
	bool Previous();
	void RemoveAudioCategory();
	void RemoveExtraAudioCategory();
	void RemoveSubAudioCategory();
	void Seek(const struct FTimespan& Time);
	void SeekToPosition(int32 FrameNumber);
	void SetAlphaTrack(int32 Track);
	void SetAudioCategory(const class FString& CategoryName);
	void SetAudioTrack(int32 Track);
	void SetEndFrameAction(EManaFrameAction InFrameAction);
	void SetExtraAudioCategory(const class FString& CategoryName);
	void SetExtraAudioTrack(int32 Track);
	void SetExtraVolume(float Volume);
	void SetFile(const class FString& MovieFilePath);
	void SetMaxDropFrames(EManaMaxFrameDrop InMaxDropFrames);
	void SetMovie(class UManaMovie* InMovie);
	void SetPlaybackTimer(EManaPlaybackTimer InPlaybackTimer);
	void SetSubAudioCategory(const class FString& CategoryName);
	void SetSubAudioSendLevel(int32 Channel, EAtomSpeakerID SpeakerId, float Volume);
	void SetSubAudioTrack(int32 Track);
	void SetSubVolume(float Volume);
	void SetTexture(class UManaTexture* Texture);
	void SetVolume(float Volume);
	void Stop();
	bool ToIndex(int32 Index_0);

	float GetExtraVolume() const;
	int32 GetFrameNumber() const;
	struct FTimespan GetMovieTime() const;
	int32 GetPosition() const;
	class UManaMovie* GetSource() const;
	EManaComponentStatus GetStatus() const;
	float GetSubVolume() const;
	class UManaTexture* GetTexture() const;
	struct FTimespan GetTime() const;
	float GetVolume() const;
	bool IsLooping() const;
	bool IsPaused() const;
	bool IsPlaying() const;
	bool IsPreparing() const;
	bool IsReady() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaComponent">();
	}
	static class UManaComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaComponent>();
	}
};
static_assert(alignof(UManaComponent) == 0x000008, "Wrong alignment on UManaComponent");
static_assert(sizeof(UManaComponent) == 0x000290, "Wrong size on UManaComponent");
static_assert(offsetof(UManaComponent, Movie) == 0x0000B0, "Member 'UManaComponent::Movie' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnEventPoint) == 0x0000B8, "Member 'UManaComponent::OnEventPoint' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnSubtitleChanged) == 0x0000C8, "Member 'UManaComponent::OnSubtitleChanged' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnStatusChanged) == 0x0000D8, "Member 'UManaComponent::OnStatusChanged' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnMovieChanged) == 0x0000E8, "Member 'UManaComponent::OnMovieChanged' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnSeekCompleted) == 0x0000F8, "Member 'UManaComponent::OnSeekCompleted' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnTrackChanged) == 0x000108, "Member 'UManaComponent::OnTrackChanged' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnFrameOnTime) == 0x000118, "Member 'UManaComponent::OnFrameOnTime' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnPlayerDestroyed) == 0x000128, "Member 'UManaComponent::OnPlayerDestroyed' has a wrong offset!");
static_assert(offsetof(UManaComponent, OnRequestData) == 0x000138, "Member 'UManaComponent::OnRequestData' has a wrong offset!");
static_assert(offsetof(UManaComponent, Playlist) == 0x000188, "Member 'UManaComponent::Playlist' has a wrong offset!");
static_assert(offsetof(UManaComponent, PlaylistIndex) == 0x000190, "Member 'UManaComponent::PlaylistIndex' has a wrong offset!");
static_assert(offsetof(UManaComponent, bLoop) == 0x000198, "Member 'UManaComponent::bLoop' has a wrong offset!");
static_assert(offsetof(UManaComponent, AlphaTrack) == 0x00019C, "Member 'UManaComponent::AlphaTrack' has a wrong offset!");
static_assert(offsetof(UManaComponent, AudioTrack) == 0x0001A0, "Member 'UManaComponent::AudioTrack' has a wrong offset!");
static_assert(offsetof(UManaComponent, SubAudioTrack) == 0x0001A4, "Member 'UManaComponent::SubAudioTrack' has a wrong offset!");
static_assert(offsetof(UManaComponent, ExtraAudioTrack) == 0x0001A8, "Member 'UManaComponent::ExtraAudioTrack' has a wrong offset!");
static_assert(offsetof(UManaComponent, AudioCategoryName) == 0x0001B0, "Member 'UManaComponent::AudioCategoryName' has a wrong offset!");
static_assert(offsetof(UManaComponent, SubAudioCategoryName) == 0x0001C0, "Member 'UManaComponent::SubAudioCategoryName' has a wrong offset!");
static_assert(offsetof(UManaComponent, ExtraAudioCategoryName) == 0x0001D0, "Member 'UManaComponent::ExtraAudioCategoryName' has a wrong offset!");
static_assert(offsetof(UManaComponent, bSubtitlesEnabled) == 0x0001E0, "Member 'UManaComponent::bSubtitlesEnabled' has a wrong offset!");
static_assert(offsetof(UManaComponent, SubtitlesChannel) == 0x0001E4, "Member 'UManaComponent::SubtitlesChannel' has a wrong offset!");
static_assert(offsetof(UManaComponent, SubtitlesEncoding) == 0x0001E8, "Member 'UManaComponent::SubtitlesEncoding' has a wrong offset!");
static_assert(offsetof(UManaComponent, EndFrameAction) == 0x0001E9, "Member 'UManaComponent::EndFrameAction' has a wrong offset!");
static_assert(offsetof(UManaComponent, PlaybackTimer) == 0x0001EA, "Member 'UManaComponent::PlaybackTimer' has a wrong offset!");
static_assert(offsetof(UManaComponent, MaxFrameDrop) == 0x0001EB, "Member 'UManaComponent::MaxFrameDrop' has a wrong offset!");

// Class CriWareRuntime.ManaComponentTexture
// 0x0050 (0x01D0 - 0x0180)
class UManaComponentTexture final : public UTexture
{
public:
	int32                                         SizeX;                                             // 0x0178(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SizeY;                                             // 0x017C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  Format;                                            // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaComponentTextureType                     ComponentType;                                     // 0x0181(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressX;                                          // 0x0182(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x0183(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4C];                                     // 0x0184(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaComponentTexture">();
	}
	static class UManaComponentTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaComponentTexture>();
	}
};
static_assert(alignof(UManaComponentTexture) == 0x000010, "Wrong alignment on UManaComponentTexture");
static_assert(sizeof(UManaComponentTexture) == 0x0001D0, "Wrong size on UManaComponentTexture");
static_assert(offsetof(UManaComponentTexture, SizeX) == 0x000178, "Member 'UManaComponentTexture::SizeX' has a wrong offset!");
static_assert(offsetof(UManaComponentTexture, SizeY) == 0x00017C, "Member 'UManaComponentTexture::SizeY' has a wrong offset!");
static_assert(offsetof(UManaComponentTexture, Format) == 0x000180, "Member 'UManaComponentTexture::Format' has a wrong offset!");
static_assert(offsetof(UManaComponentTexture, ComponentType) == 0x000181, "Member 'UManaComponentTexture::ComponentType' has a wrong offset!");
static_assert(offsetof(UManaComponentTexture, AddressX) == 0x000182, "Member 'UManaComponentTexture::AddressX' has a wrong offset!");
static_assert(offsetof(UManaComponentTexture, AddressY) == 0x000183, "Member 'UManaComponentTexture::AddressY' has a wrong offset!");

// Class CriWareRuntime.ManaSource
// 0x0000 (0x0028 - 0x0028)
class UManaSource : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaSource">();
	}
	static class UManaSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaSource>();
	}
};
static_assert(alignof(UManaSource) == 0x000008, "Wrong alignment on UManaSource");
static_assert(sizeof(UManaSource) == 0x000028, "Wrong size on UManaSource");

// Class CriWareRuntime.ManaMovie
// 0x0060 (0x0088 - 0x0028)
class UManaMovie : public UManaSource
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FManaVideoTrackInfo>            VideoTracks;                                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FManaVideoTrackInfo>            AlphaTracks;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FManaAudioTrackInfo>            AudioTracks;                                       // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FManaEventPointInfo>            EventPoints;                                       // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         NumSubtitleChannels;                               // 0x0070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxSubtitleSize;                                   // 0x0074(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bIsAlpha : 1;                                      // 0x0078(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_79[0xF];                                       // 0x0079(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetUrl() const;
	bool Validate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaMovie">();
	}
	static class UManaMovie* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaMovie>();
	}
};
static_assert(alignof(UManaMovie) == 0x000008, "Wrong alignment on UManaMovie");
static_assert(sizeof(UManaMovie) == 0x000088, "Wrong size on UManaMovie");
static_assert(offsetof(UManaMovie, VideoTracks) == 0x000030, "Member 'UManaMovie::VideoTracks' has a wrong offset!");
static_assert(offsetof(UManaMovie, AlphaTracks) == 0x000040, "Member 'UManaMovie::AlphaTracks' has a wrong offset!");
static_assert(offsetof(UManaMovie, AudioTracks) == 0x000050, "Member 'UManaMovie::AudioTracks' has a wrong offset!");
static_assert(offsetof(UManaMovie, EventPoints) == 0x000060, "Member 'UManaMovie::EventPoints' has a wrong offset!");
static_assert(offsetof(UManaMovie, NumSubtitleChannels) == 0x000070, "Member 'UManaMovie::NumSubtitleChannels' has a wrong offset!");
static_assert(offsetof(UManaMovie, MaxSubtitleSize) == 0x000074, "Member 'UManaMovie::MaxSubtitleSize' has a wrong offset!");

// Class CriWareRuntime.FileManaMovie
// 0x0018 (0x00A0 - 0x0088)
class UFileManaMovie final : public UManaMovie
{
public:
	bool                                          bPrecacheFile;                                     // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FilePath;                                          // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetFilePath(const class FString& Path);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FileManaMovie">();
	}
	static class UFileManaMovie* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFileManaMovie>();
	}
};
static_assert(alignof(UFileManaMovie) == 0x000008, "Wrong alignment on UFileManaMovie");
static_assert(sizeof(UFileManaMovie) == 0x0000A0, "Wrong size on UFileManaMovie");
static_assert(offsetof(UFileManaMovie, bPrecacheFile) == 0x000088, "Member 'UFileManaMovie::bPrecacheFile' has a wrong offset!");
static_assert(offsetof(UFileManaMovie, FilePath) == 0x000090, "Member 'UFileManaMovie::FilePath' has a wrong offset!");

// Class CriWareRuntime.DataManaMovie
// 0x0008 (0x0090 - 0x0088)
class UDataManaMovie final : public UManaMovie
{
public:
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<uint8> GetDataArray();
	void SetDataArray(TArray<uint8>& InDataArray);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataManaMovie">();
	}
	static class UDataManaMovie* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataManaMovie>();
	}
};
static_assert(alignof(UDataManaMovie) == 0x000008, "Wrong alignment on UDataManaMovie");
static_assert(sizeof(UDataManaMovie) == 0x000090, "Wrong size on UDataManaMovie");

// Class CriWareRuntime.StreamManaMovie
// 0x0010 (0x0098 - 0x0088)
class UStreamManaMovie final : public UManaMovie
{
public:
	class FString                                 StreamUrl;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StreamManaMovie">();
	}
	static class UStreamManaMovie* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStreamManaMovie>();
	}
};
static_assert(alignof(UStreamManaMovie) == 0x000008, "Wrong alignment on UStreamManaMovie");
static_assert(sizeof(UStreamManaMovie) == 0x000098, "Wrong size on UStreamManaMovie");
static_assert(offsetof(UStreamManaMovie, StreamUrl) == 0x000088, "Member 'UStreamManaMovie::StreamUrl' has a wrong offset!");

// Class CriWareRuntime.ManaPlayer
// 0x0178 (0x01A0 - 0x0028)
class alignas(0x10) UManaPlayer final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          PlayOnOpen;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         Loop : 1;                                          // 0x0034(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_35[0xB];                                       // 0x0035(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	EManaMaxFrameDrop                             MaxFrameDrop;                                      // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnEndReached;                                      // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMovieClosed;                                     // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMovieOpened;                                     // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnMovieOpenFailed;                                 // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlaybackResumed;                                 // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnPlaybackSuspended;                               // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnSeekCompleted;                                   // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnTracksChanged;                                   // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UManaTexture*                           ManaTexture;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UManaMovie*                             ManaMovie;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UManaPlaylist*                          Playlist;                                          // 0x00D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PlaylistIndex;                                     // 0x00E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaComponent*                         ManaComponent;                                     // 0x00E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F0[0xB0];                                      // 0x00F0(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindOnFrameUpdated(const TDelegate<void(int32 FrameNumber)>& Event);
	void OnFrameUpdatedDelegate__DelegateSignature(int32 FrameNumber);
	void Close();
	bool DisableTrack(EManaPlayerTrack TrackType);
	float GetVolume(EManaPlayerTrack TrackType);
	void HandleManaComponentFrameOnTime(int32 InFrameNumber, class UManaComponent* InManaComponent);
	void HandleManaComponentMovieChanged(class UManaMovie* InManaMovie, class UManaComponent* InManaComponent);
	void HandleManaComponentPlayerDestroyed(class UManaComponent* InManaComponent);
	void HandleManaComponentSeekCompleted(int32 InFrameNumber, class UManaComponent* InManaComponent);
	void HandleManaComponentStatusChanged(EManaComponentStatus Status, class UManaComponent* InManaComponent);
	bool Next();
	void OpenMovieSource(class UManaMovie* InManaMovie);
	bool OpenPlaylist(class UManaPlaylist* InPlaylist);
	bool OpenPlaylistIndex(class UManaPlaylist* InPlaylist, int32 Index_0);
	bool OpenSourceWithOptions(class UManaSource* ManaSource, const struct FManaPlayerOptions& PlayerOptions);
	bool Pause();
	bool Play();
	void PlayAndSeek();
	bool Previous();
	bool Reopen();
	bool Rewind();
	bool Seek(const struct FTimespan& Time);
	bool SelectTrack(EManaPlayerTrack TrackType, int32 TrackIndex);
	bool SetLooping(bool Looping);
	bool SetRate(float Rate);
	void SetTexture(class UManaTexture* InManaTexture);
	void SetTimeSyncedSource(class UAtomComponent* SyncedSource);
	bool SetVolume(float Volume, EManaPlayerTrack TrackType);

	struct FTimespan GetDuration() const;
	int32 GetFrames() const;
	int32 GetMovieFrames() const;
	class UManaMovie* GetMovieSource() const;
	struct FTimespan GetMovieTime() const;
	int32 GetPlaylistIndex() const;
	float GetRate() const;
	EManaComponentStatus GetStatus() const;
	class UManaTexture* GetTexture() const;
	struct FTimespan GetTime() const;
	bool HasError() const;
	bool IsClosed() const;
	bool IsLooping() const;
	bool IsPaused() const;
	bool IsPlaying() const;
	bool IsPreparing() const;
	bool IsReady() const;
	bool IsSeeking() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaPlayer">();
	}
	static class UManaPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaPlayer>();
	}
};
static_assert(alignof(UManaPlayer) == 0x000010, "Wrong alignment on UManaPlayer");
static_assert(sizeof(UManaPlayer) == 0x0001A0, "Wrong size on UManaPlayer");
static_assert(offsetof(UManaPlayer, PlayOnOpen) == 0x000030, "Member 'UManaPlayer::PlayOnOpen' has a wrong offset!");
static_assert(offsetof(UManaPlayer, MaxFrameDrop) == 0x000040, "Member 'UManaPlayer::MaxFrameDrop' has a wrong offset!");
static_assert(offsetof(UManaPlayer, OnEndReached) == 0x000048, "Member 'UManaPlayer::OnEndReached' has a wrong offset!");
static_assert(offsetof(UManaPlayer, OnMovieClosed) == 0x000058, "Member 'UManaPlayer::OnMovieClosed' has a wrong offset!");
static_assert(offsetof(UManaPlayer, OnMovieOpened) == 0x000068, "Member 'UManaPlayer::OnMovieOpened' has a wrong offset!");
static_assert(offsetof(UManaPlayer, OnMovieOpenFailed) == 0x000078, "Member 'UManaPlayer::OnMovieOpenFailed' has a wrong offset!");
static_assert(offsetof(UManaPlayer, OnPlaybackResumed) == 0x000088, "Member 'UManaPlayer::OnPlaybackResumed' has a wrong offset!");
static_assert(offsetof(UManaPlayer, OnPlaybackSuspended) == 0x000098, "Member 'UManaPlayer::OnPlaybackSuspended' has a wrong offset!");
static_assert(offsetof(UManaPlayer, OnSeekCompleted) == 0x0000A8, "Member 'UManaPlayer::OnSeekCompleted' has a wrong offset!");
static_assert(offsetof(UManaPlayer, OnTracksChanged) == 0x0000B8, "Member 'UManaPlayer::OnTracksChanged' has a wrong offset!");
static_assert(offsetof(UManaPlayer, ManaTexture) == 0x0000C8, "Member 'UManaPlayer::ManaTexture' has a wrong offset!");
static_assert(offsetof(UManaPlayer, ManaMovie) == 0x0000D0, "Member 'UManaPlayer::ManaMovie' has a wrong offset!");
static_assert(offsetof(UManaPlayer, Playlist) == 0x0000D8, "Member 'UManaPlayer::Playlist' has a wrong offset!");
static_assert(offsetof(UManaPlayer, PlaylistIndex) == 0x0000E0, "Member 'UManaPlayer::PlaylistIndex' has a wrong offset!");
static_assert(offsetof(UManaPlayer, ManaComponent) == 0x0000E8, "Member 'UManaPlayer::ManaComponent' has a wrong offset!");

// Class CriWareRuntime.ManaPlaylist
// 0x0018 (0x0040 - 0x0028)
class UManaPlaylist final : public UManaSource
{
public:
	TArray<class UManaMovie*>                     Movies;                                            // 0x0028(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsAlpha;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMixedTypes;                                     // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSeamless;                                       // 0x003A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Add(class UManaMovie* ManaMovie);
	class UManaMovie* Get(int32 Index_0);
	class UManaMovie* GetNext(int32* InOutIndex);
	class UManaMovie* GetPrevious(int32* InOutIndex);
	class UManaMovie* GetRandom(int32* InOutIndex);
	void Insert(class UManaMovie* ManaMovie, int32 Index_0);
	bool IsAlpha();
	bool IsMixedTypes();
	bool IsSeamless();
	int32 Num();
	void Remove(class UManaMovie* ManaMovie);
	void RemoveAt(int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaPlaylist">();
	}
	static class UManaPlaylist* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaPlaylist>();
	}
};
static_assert(alignof(UManaPlaylist) == 0x000008, "Wrong alignment on UManaPlaylist");
static_assert(sizeof(UManaPlaylist) == 0x000040, "Wrong size on UManaPlaylist");
static_assert(offsetof(UManaPlaylist, Movies) == 0x000028, "Member 'UManaPlaylist::Movies' has a wrong offset!");
static_assert(offsetof(UManaPlaylist, bIsAlpha) == 0x000038, "Member 'UManaPlaylist::bIsAlpha' has a wrong offset!");
static_assert(offsetof(UManaPlaylist, bIsMixedTypes) == 0x000039, "Member 'UManaPlaylist::bIsMixedTypes' has a wrong offset!");
static_assert(offsetof(UManaPlaylist, bIsSeamless) == 0x00003A, "Member 'UManaPlaylist::bIsSeamless' has a wrong offset!");

// Class CriWareRuntime.ManaTexture
// 0x00F0 (0x0270 - 0x0180)
class UManaTexture final : public UTexture
{
public:
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UManaSource*                            MovieSource;                                       // 0x0180(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 MovieFilePath;                                     // 0x0188(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         bRenderToTexture : 1;                              // 0x0198(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetGamma;                                       // 0x019C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bHDR : 1;                                          // 0x01A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ETextureAddress                               AddressX;                                          // 0x01A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextureAddress                               AddressY;                                          // 0x01A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A6[0x2];                                      // 0x01A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ClearColor;                                        // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bOverrideDimensions : 1;                           // 0x01B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1B9[0x3];                                      // 0x01B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FIntPoint                              TargetDimensions;                                  // 0x01BC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPixelFormat                                  OverrideFormat;                                    // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnTextureUpdated;                                  // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<class UManaComponentTexture*>          ComponentTextures;                                 // 0x01D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	TArray<class UManaComponentTexture*>          AlphaComponentTextures;                            // 0x01E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	class UManaComponent*                         ManaPlayer;                                        // 0x01F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_200[0x70];                                     // 0x0200(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTextureUpdated__DelegateSignature(class UManaTexture* ManaTexture);
	void SetMovieSource(class UManaSource* InSource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ManaTexture">();
	}
	static class UManaTexture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UManaTexture>();
	}
};
static_assert(alignof(UManaTexture) == 0x000010, "Wrong alignment on UManaTexture");
static_assert(sizeof(UManaTexture) == 0x000270, "Wrong size on UManaTexture");
static_assert(offsetof(UManaTexture, MovieSource) == 0x000180, "Member 'UManaTexture::MovieSource' has a wrong offset!");
static_assert(offsetof(UManaTexture, MovieFilePath) == 0x000188, "Member 'UManaTexture::MovieFilePath' has a wrong offset!");
static_assert(offsetof(UManaTexture, TargetGamma) == 0x00019C, "Member 'UManaTexture::TargetGamma' has a wrong offset!");
static_assert(offsetof(UManaTexture, AddressX) == 0x0001A4, "Member 'UManaTexture::AddressX' has a wrong offset!");
static_assert(offsetof(UManaTexture, AddressY) == 0x0001A5, "Member 'UManaTexture::AddressY' has a wrong offset!");
static_assert(offsetof(UManaTexture, ClearColor) == 0x0001A8, "Member 'UManaTexture::ClearColor' has a wrong offset!");
static_assert(offsetof(UManaTexture, TargetDimensions) == 0x0001BC, "Member 'UManaTexture::TargetDimensions' has a wrong offset!");
static_assert(offsetof(UManaTexture, OverrideFormat) == 0x0001C4, "Member 'UManaTexture::OverrideFormat' has a wrong offset!");
static_assert(offsetof(UManaTexture, OnTextureUpdated) == 0x0001C8, "Member 'UManaTexture::OnTextureUpdated' has a wrong offset!");
static_assert(offsetof(UManaTexture, ComponentTextures) == 0x0001D8, "Member 'UManaTexture::ComponentTextures' has a wrong offset!");
static_assert(offsetof(UManaTexture, AlphaComponentTextures) == 0x0001E8, "Member 'UManaTexture::AlphaComponentTextures' has a wrong offset!");
static_assert(offsetof(UManaTexture, ManaPlayer) == 0x0001F8, "Member 'UManaTexture::ManaPlayer' has a wrong offset!");

// Class CriWareRuntime.MaterialExpressionManaColorSpaceConverter
// 0x0070 (0x00B0 - 0x0040)
class UMaterialExpressionManaColorSpaceConverter final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Luma;                                              // 0x0040(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ChromaB;                                           // 0x0054(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       ChromaR;                                           // 0x0068(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Alpha;                                             // 0x007C(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	struct FExpressionInput                       Gamma;                                             // 0x0090(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bH264;                                             // 0x00A4(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaMovieType                                MovieType;                                         // 0x00A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EManaColorSpace                               ColorSpace;                                        // 0x00A6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseGammaExponent;                                 // 0x00A7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstGamma;                                        // 0x00A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionManaColorSpaceConverter">();
	}
	static class UMaterialExpressionManaColorSpaceConverter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionManaColorSpaceConverter>();
	}
};
static_assert(alignof(UMaterialExpressionManaColorSpaceConverter) == 0x000008, "Wrong alignment on UMaterialExpressionManaColorSpaceConverter");
static_assert(sizeof(UMaterialExpressionManaColorSpaceConverter) == 0x0000B0, "Wrong size on UMaterialExpressionManaColorSpaceConverter");
static_assert(offsetof(UMaterialExpressionManaColorSpaceConverter, Luma) == 0x000040, "Member 'UMaterialExpressionManaColorSpaceConverter::Luma' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionManaColorSpaceConverter, ChromaB) == 0x000054, "Member 'UMaterialExpressionManaColorSpaceConverter::ChromaB' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionManaColorSpaceConverter, ChromaR) == 0x000068, "Member 'UMaterialExpressionManaColorSpaceConverter::ChromaR' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionManaColorSpaceConverter, Alpha) == 0x00007C, "Member 'UMaterialExpressionManaColorSpaceConverter::Alpha' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionManaColorSpaceConverter, Gamma) == 0x000090, "Member 'UMaterialExpressionManaColorSpaceConverter::Gamma' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionManaColorSpaceConverter, bH264) == 0x0000A4, "Member 'UMaterialExpressionManaColorSpaceConverter::bH264' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionManaColorSpaceConverter, MovieType) == 0x0000A5, "Member 'UMaterialExpressionManaColorSpaceConverter::MovieType' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionManaColorSpaceConverter, ColorSpace) == 0x0000A6, "Member 'UMaterialExpressionManaColorSpaceConverter::ColorSpace' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionManaColorSpaceConverter, bUseGammaExponent) == 0x0000A7, "Member 'UMaterialExpressionManaColorSpaceConverter::bUseGammaExponent' has a wrong offset!");
static_assert(offsetof(UMaterialExpressionManaColorSpaceConverter, ConstGamma) == 0x0000A8, "Member 'UMaterialExpressionManaColorSpaceConverter::ConstGamma' has a wrong offset!");

// Class CriWareRuntime.MaterialExpressionManaMovieFormatSwitch
// 0x0068 (0x00A8 - 0x0040)
class UMaterialExpressionManaMovieFormatSwitch final : public UMaterialExpression
{
public:
	struct FExpressionInput                       Inputs[0x5];                                       // 0x0040(0x0014)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MaterialExpressionManaMovieFormatSwitch">();
	}
	static class UMaterialExpressionManaMovieFormatSwitch* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMaterialExpressionManaMovieFormatSwitch>();
	}
};
static_assert(alignof(UMaterialExpressionManaMovieFormatSwitch) == 0x000008, "Wrong alignment on UMaterialExpressionManaMovieFormatSwitch");
static_assert(sizeof(UMaterialExpressionManaMovieFormatSwitch) == 0x0000A8, "Wrong size on UMaterialExpressionManaMovieFormatSwitch");
static_assert(offsetof(UMaterialExpressionManaMovieFormatSwitch, Inputs) == 0x000040, "Member 'UMaterialExpressionManaMovieFormatSwitch::Inputs' has a wrong offset!");

// Class CriWareRuntime.PlatformManaMovie
// 0x0008 (0x0090 - 0x0088)
class UPlatformManaMovie final : public UManaMovie
{
public:
	class UManaMovie*                             ManaMovie;                                         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlatformManaMovie">();
	}
	static class UPlatformManaMovie* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlatformManaMovie>();
	}
};
static_assert(alignof(UPlatformManaMovie) == 0x000008, "Wrong alignment on UPlatformManaMovie");
static_assert(sizeof(UPlatformManaMovie) == 0x000090, "Wrong size on UPlatformManaMovie");
static_assert(offsetof(UPlatformManaMovie, ManaMovie) == 0x000088, "Member 'UPlatformManaMovie::ManaMovie' has a wrong offset!");

// Class CriWareRuntime.SoundAtomConfig
// 0x0038 (0x0060 - 0x0028)
class USoundAtomConfig final : public UObject
{
public:
	class FString                                 AcfFilePath;                                       // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x28];                                      // 0x0038(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<struct FAtomCategoryInfoParam> GetCategoryInfoArray();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundAtomConfig">();
	}
	static class USoundAtomConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundAtomConfig>();
	}
};
static_assert(alignof(USoundAtomConfig) == 0x000008, "Wrong alignment on USoundAtomConfig");
static_assert(sizeof(USoundAtomConfig) == 0x000060, "Wrong size on USoundAtomConfig");
static_assert(offsetof(USoundAtomConfig, AcfFilePath) == 0x000028, "Member 'USoundAtomConfig::AcfFilePath' has a wrong offset!");

// Class CriWareRuntime.SoundAtomCue
// 0x0098 (0x00C0 - 0x0028)
class USoundAtomCue final : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAtomCueSheet*                     CueSheet;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CueName;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAtomLoopSetting                              LoopSetting;                                       // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyAtomParameter;                               // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FirstWaveDuration;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAudioVolume;                                // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMovable;                                        // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStraddleAudioVolume;                           // 0x0062(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseDistanceToEnableAudioVolume;                   // 0x0063(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceToEnableAudioVolume;                    // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAreaSoundVolume;                               // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UpdateRateForFrame;                                // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAtom3dRegion*                          Region;                                            // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEconomicTick;                                     // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideEconomicTickSettings;                     // 0x0079(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EconomicTickDistanceMargin;                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EconomicTickFrequency;                             // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDistanceCulling;                            // 0x0084(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOverrideCullSettings;                             // 0x0085(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86[0x2];                                       // 0x0086(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CullDistanceMargin;                                // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EconomicTickMarginDistance;                        // 0x008C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopSettingByAtomCraft;                           // 0x0090(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCullingSoundPlayingProcessByDistance;             // 0x0091(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLegacyCullingSettings;                         // 0x0092(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x1];                                       // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxProcessDistance;                                // 0x0094(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCullingSettings;                          // 0x0098(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CullingMarginDistance;                             // 0x009C(0x0004)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x00A0(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      DefaultAttenuation;                                // 0x00A8(0x0008)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool BP_GetCueInfo(struct FAtomCueInfo& CueInfo) const;
	float GetCullDistance() const;
	float GetCullDistanceMarginToApply() const;
	float GetCullingBoundaryDistanceToUse() const;
	float GetCullingMarginDistanceToUse() const;
	float GetEconomicTickBoundaryDistanceToUse() const;
	float GetEconomicTickDistance() const;
	float GetEconomicTickDistanceMarginToApply() const;
	float GetEconomicTickFrequencyToApply() const;
	float GetEconomicTickFrequencyToUse() const;
	float GetEconomicTickMarginDistanceToUse() const;
	float GetMaxAttenuationDistanceToApply() const;
	float GetMaxAttenuationDistanceToUse() const;
	bool IsEconomicTickEnabled() const;
	bool IsLooping() const;
	bool Validate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundAtomCue">();
	}
	static class USoundAtomCue* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundAtomCue>();
	}
};
static_assert(alignof(USoundAtomCue) == 0x000008, "Wrong alignment on USoundAtomCue");
static_assert(sizeof(USoundAtomCue) == 0x0000C0, "Wrong size on USoundAtomCue");
static_assert(offsetof(USoundAtomCue, CueSheet) == 0x000030, "Member 'USoundAtomCue::CueSheet' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, CueName) == 0x000038, "Member 'USoundAtomCue::CueName' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, LoopSetting) == 0x000048, "Member 'USoundAtomCue::LoopSetting' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bApplyAtomParameter) == 0x000049, "Member 'USoundAtomCue::bApplyAtomParameter' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, Duration) == 0x00004C, "Member 'USoundAtomCue::Duration' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, FirstWaveDuration) == 0x000050, "Member 'USoundAtomCue::FirstWaveDuration' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, AttenuationSettings) == 0x000058, "Member 'USoundAtomCue::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bEnableAudioVolume) == 0x000060, "Member 'USoundAtomCue::bEnableAudioVolume' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bIsMovable) == 0x000061, "Member 'USoundAtomCue::bIsMovable' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bCanStraddleAudioVolume) == 0x000062, "Member 'USoundAtomCue::bCanStraddleAudioVolume' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bUseDistanceToEnableAudioVolume) == 0x000063, "Member 'USoundAtomCue::bUseDistanceToEnableAudioVolume' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, MinDistanceToEnableAudioVolume) == 0x000064, "Member 'USoundAtomCue::MinDistanceToEnableAudioVolume' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bUseAreaSoundVolume) == 0x000068, "Member 'USoundAtomCue::bUseAreaSoundVolume' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, UpdateRateForFrame) == 0x00006C, "Member 'USoundAtomCue::UpdateRateForFrame' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, Region) == 0x000070, "Member 'USoundAtomCue::Region' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bEconomicTick) == 0x000078, "Member 'USoundAtomCue::bEconomicTick' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bOverrideEconomicTickSettings) == 0x000079, "Member 'USoundAtomCue::bOverrideEconomicTickSettings' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, EconomicTickDistanceMargin) == 0x00007C, "Member 'USoundAtomCue::EconomicTickDistanceMargin' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, EconomicTickFrequency) == 0x000080, "Member 'USoundAtomCue::EconomicTickFrequency' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bEnableDistanceCulling) == 0x000084, "Member 'USoundAtomCue::bEnableDistanceCulling' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bOverrideCullSettings) == 0x000085, "Member 'USoundAtomCue::bOverrideCullSettings' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, CullDistanceMargin) == 0x000088, "Member 'USoundAtomCue::CullDistanceMargin' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, EconomicTickMarginDistance) == 0x00008C, "Member 'USoundAtomCue::EconomicTickMarginDistance' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bLoopSettingByAtomCraft) == 0x000090, "Member 'USoundAtomCue::bLoopSettingByAtomCraft' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bCullingSoundPlayingProcessByDistance) == 0x000091, "Member 'USoundAtomCue::bCullingSoundPlayingProcessByDistance' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bUseLegacyCullingSettings) == 0x000092, "Member 'USoundAtomCue::bUseLegacyCullingSettings' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, MaxProcessDistance) == 0x000094, "Member 'USoundAtomCue::MaxProcessDistance' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bOverrideCullingSettings) == 0x000098, "Member 'USoundAtomCue::bOverrideCullingSettings' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, CullingMarginDistance) == 0x00009C, "Member 'USoundAtomCue::CullingMarginDistance' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, bLoop) == 0x0000A0, "Member 'USoundAtomCue::bLoop' has a wrong offset!");
static_assert(offsetof(USoundAtomCue, DefaultAttenuation) == 0x0000A8, "Member 'USoundAtomCue::DefaultAttenuation' has a wrong offset!");

// Class CriWareRuntime.SoundAtomCueSheet
// 0x00F0 (0x0118 - 0x0028)
class USoundAtomCueSheet final : public UObject
{
public:
	bool                                          Contains;                                          // 0x0028(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AcbFilePath;                                       // 0x0030(0x0010)(ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CueSheetName;                                      // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumSlots;                                          // 0x0050(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideAwbDirectory;                             // 0x0054(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDirectoryPath                         AwbDirectory;                                      // 0x0058(0x0010)(Edit, NativeAccessSpecifierPublic)
	class UDataTable*                             AdditionalData;                                    // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAtomCueInfo>                   CueInfos;                                          // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_80[0x98];                                      // 0x0080(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void ApplyDspBusSnapshot(const class FString& SnapshotName, int32 Milliseconds);
	static void AttachDspBusSetting(const class FString& SettingName);
	static void DetachDspBusSetting();
	static class USoundAtomCueSheet* LoadAcb(class FName AcbName, bool bAddToLevel);
	static class USoundAtomCueSheet* LoadAtomCueSheet(class USoundAtomCueSheet* CueSheet, bool bAddToLevel);
	static void ReleaseAcb(class FName AcbName);

	class USoundAtomCue* GetAtomCueById(int32 CueId);
	class USoundAtomCue* GetAtomCueByIndex(int32 CueIndex);
	class USoundAtomCue* GetAtomCueByName(const class FString& CueName);
	bool IsLoaded();

	bool BP_GetCueInfoFromId(int32 ID, struct FAtomCueInfo& CueInfo) const;
	bool BP_GetCueInfoFromIndex(int32 Index_0, struct FAtomCueInfo& CueInfo) const;
	bool BP_GetCueInfoFromName(const class FString& Name_0, struct FAtomCueInfo& CueInfo) const;
	int32 GetNumCues() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SoundAtomCueSheet">();
	}
	static class USoundAtomCueSheet* GetDefaultObj()
	{
		return GetDefaultObjImpl<USoundAtomCueSheet>();
	}
};
static_assert(alignof(USoundAtomCueSheet) == 0x000008, "Wrong alignment on USoundAtomCueSheet");
static_assert(sizeof(USoundAtomCueSheet) == 0x000118, "Wrong size on USoundAtomCueSheet");
static_assert(offsetof(USoundAtomCueSheet, Contains) == 0x000028, "Member 'USoundAtomCueSheet::Contains' has a wrong offset!");
static_assert(offsetof(USoundAtomCueSheet, AcbFilePath) == 0x000030, "Member 'USoundAtomCueSheet::AcbFilePath' has a wrong offset!");
static_assert(offsetof(USoundAtomCueSheet, CueSheetName) == 0x000040, "Member 'USoundAtomCueSheet::CueSheetName' has a wrong offset!");
static_assert(offsetof(USoundAtomCueSheet, NumSlots) == 0x000050, "Member 'USoundAtomCueSheet::NumSlots' has a wrong offset!");
static_assert(offsetof(USoundAtomCueSheet, bOverrideAwbDirectory) == 0x000054, "Member 'USoundAtomCueSheet::bOverrideAwbDirectory' has a wrong offset!");
static_assert(offsetof(USoundAtomCueSheet, AwbDirectory) == 0x000058, "Member 'USoundAtomCueSheet::AwbDirectory' has a wrong offset!");
static_assert(offsetof(USoundAtomCueSheet, AdditionalData) == 0x000068, "Member 'USoundAtomCueSheet::AdditionalData' has a wrong offset!");
static_assert(offsetof(USoundAtomCueSheet, CueInfos) == 0x000070, "Member 'USoundAtomCueSheet::CueInfos' has a wrong offset!");

}

