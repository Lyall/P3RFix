#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ProceduralMeshComponent

#include "Basic.hpp"

#include "ProceduralMeshComponent_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ProceduralMeshComponent.KismetProceduralMeshLibrary.CalculateTangentsForMesh
// 0x0050 (0x0050 - 0x0000)
struct KismetProceduralMeshLibrary_CalculateTangentsForMesh final
{
public:
	TArray<struct FVector>                        Vertices;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 Triangles;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UVs;                                               // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Normals;                                           // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProcMeshTangent>               Tangents;                                          // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetProceduralMeshLibrary_CalculateTangentsForMesh) == 0x000008, "Wrong alignment on KismetProceduralMeshLibrary_CalculateTangentsForMesh");
static_assert(sizeof(KismetProceduralMeshLibrary_CalculateTangentsForMesh) == 0x000050, "Wrong size on KismetProceduralMeshLibrary_CalculateTangentsForMesh");
static_assert(offsetof(KismetProceduralMeshLibrary_CalculateTangentsForMesh, Vertices) == 0x000000, "Member 'KismetProceduralMeshLibrary_CalculateTangentsForMesh::Vertices' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CalculateTangentsForMesh, Triangles) == 0x000010, "Member 'KismetProceduralMeshLibrary_CalculateTangentsForMesh::Triangles' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CalculateTangentsForMesh, UVs) == 0x000020, "Member 'KismetProceduralMeshLibrary_CalculateTangentsForMesh::UVs' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CalculateTangentsForMesh, Normals) == 0x000030, "Member 'KismetProceduralMeshLibrary_CalculateTangentsForMesh::Normals' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CalculateTangentsForMesh, Tangents) == 0x000040, "Member 'KismetProceduralMeshLibrary_CalculateTangentsForMesh::Tangents' has a wrong offset!");

// Function ProceduralMeshComponent.KismetProceduralMeshLibrary.ConvertQuadToTriangles
// 0x0020 (0x0020 - 0x0000)
struct KismetProceduralMeshLibrary_ConvertQuadToTriangles final
{
public:
	TArray<int32>                                 Triangles;                                         // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Vert0;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vert1;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vert2;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Vert3;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetProceduralMeshLibrary_ConvertQuadToTriangles) == 0x000008, "Wrong alignment on KismetProceduralMeshLibrary_ConvertQuadToTriangles");
static_assert(sizeof(KismetProceduralMeshLibrary_ConvertQuadToTriangles) == 0x000020, "Wrong size on KismetProceduralMeshLibrary_ConvertQuadToTriangles");
static_assert(offsetof(KismetProceduralMeshLibrary_ConvertQuadToTriangles, Triangles) == 0x000000, "Member 'KismetProceduralMeshLibrary_ConvertQuadToTriangles::Triangles' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_ConvertQuadToTriangles, Vert0) == 0x000010, "Member 'KismetProceduralMeshLibrary_ConvertQuadToTriangles::Vert0' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_ConvertQuadToTriangles, Vert1) == 0x000014, "Member 'KismetProceduralMeshLibrary_ConvertQuadToTriangles::Vert1' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_ConvertQuadToTriangles, Vert2) == 0x000018, "Member 'KismetProceduralMeshLibrary_ConvertQuadToTriangles::Vert2' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_ConvertQuadToTriangles, Vert3) == 0x00001C, "Member 'KismetProceduralMeshLibrary_ConvertQuadToTriangles::Vert3' has a wrong offset!");

// Function ProceduralMeshComponent.KismetProceduralMeshLibrary.CopyProceduralMeshFromStaticMeshComponent
// 0x0020 (0x0020 - 0x0000)
struct KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent final
{
public:
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UProceduralMeshComponent*               ProcMeshComponent;                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateCollision;                                  // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent) == 0x000008, "Wrong alignment on KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent");
static_assert(sizeof(KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent) == 0x000020, "Wrong size on KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent");
static_assert(offsetof(KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent, StaticMeshComponent) == 0x000000, "Member 'KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent::StaticMeshComponent' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent, LODIndex) == 0x000008, "Member 'KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent::LODIndex' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent, ProcMeshComponent) == 0x000010, "Member 'KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent::ProcMeshComponent' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent, bCreateCollision) == 0x000018, "Member 'KismetProceduralMeshLibrary_CopyProceduralMeshFromStaticMeshComponent::bCreateCollision' has a wrong offset!");

// Function ProceduralMeshComponent.KismetProceduralMeshLibrary.CreateGridMeshSplit
// 0x0050 (0x0050 - 0x0000)
struct KismetProceduralMeshLibrary_CreateGridMeshSplit final
{
public:
	int32                                         NumX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Triangles;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Vertices;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UVs;                                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV1s;                                              // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         GridSpacing;                                       // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KismetProceduralMeshLibrary_CreateGridMeshSplit) == 0x000008, "Wrong alignment on KismetProceduralMeshLibrary_CreateGridMeshSplit");
static_assert(sizeof(KismetProceduralMeshLibrary_CreateGridMeshSplit) == 0x000050, "Wrong size on KismetProceduralMeshLibrary_CreateGridMeshSplit");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshSplit, NumX) == 0x000000, "Member 'KismetProceduralMeshLibrary_CreateGridMeshSplit::NumX' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshSplit, NumY) == 0x000004, "Member 'KismetProceduralMeshLibrary_CreateGridMeshSplit::NumY' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshSplit, Triangles) == 0x000008, "Member 'KismetProceduralMeshLibrary_CreateGridMeshSplit::Triangles' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshSplit, Vertices) == 0x000018, "Member 'KismetProceduralMeshLibrary_CreateGridMeshSplit::Vertices' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshSplit, UVs) == 0x000028, "Member 'KismetProceduralMeshLibrary_CreateGridMeshSplit::UVs' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshSplit, UV1s) == 0x000038, "Member 'KismetProceduralMeshLibrary_CreateGridMeshSplit::UV1s' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshSplit, GridSpacing) == 0x000048, "Member 'KismetProceduralMeshLibrary_CreateGridMeshSplit::GridSpacing' has a wrong offset!");

// Function ProceduralMeshComponent.KismetProceduralMeshLibrary.CreateGridMeshTriangles
// 0x0020 (0x0020 - 0x0000)
struct KismetProceduralMeshLibrary_CreateGridMeshTriangles final
{
public:
	int32                                         NumX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWinding;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Triangles;                                         // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetProceduralMeshLibrary_CreateGridMeshTriangles) == 0x000008, "Wrong alignment on KismetProceduralMeshLibrary_CreateGridMeshTriangles");
static_assert(sizeof(KismetProceduralMeshLibrary_CreateGridMeshTriangles) == 0x000020, "Wrong size on KismetProceduralMeshLibrary_CreateGridMeshTriangles");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshTriangles, NumX) == 0x000000, "Member 'KismetProceduralMeshLibrary_CreateGridMeshTriangles::NumX' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshTriangles, NumY) == 0x000004, "Member 'KismetProceduralMeshLibrary_CreateGridMeshTriangles::NumY' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshTriangles, bWinding) == 0x000008, "Member 'KismetProceduralMeshLibrary_CreateGridMeshTriangles::bWinding' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshTriangles, Triangles) == 0x000010, "Member 'KismetProceduralMeshLibrary_CreateGridMeshTriangles::Triangles' has a wrong offset!");

// Function ProceduralMeshComponent.KismetProceduralMeshLibrary.CreateGridMeshWelded
// 0x0040 (0x0040 - 0x0000)
struct KismetProceduralMeshLibrary_CreateGridMeshWelded final
{
public:
	int32                                         NumX;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumY;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 Triangles;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Vertices;                                          // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UVs;                                               // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         GridSpacing;                                       // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KismetProceduralMeshLibrary_CreateGridMeshWelded) == 0x000008, "Wrong alignment on KismetProceduralMeshLibrary_CreateGridMeshWelded");
static_assert(sizeof(KismetProceduralMeshLibrary_CreateGridMeshWelded) == 0x000040, "Wrong size on KismetProceduralMeshLibrary_CreateGridMeshWelded");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshWelded, NumX) == 0x000000, "Member 'KismetProceduralMeshLibrary_CreateGridMeshWelded::NumX' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshWelded, NumY) == 0x000004, "Member 'KismetProceduralMeshLibrary_CreateGridMeshWelded::NumY' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshWelded, Triangles) == 0x000008, "Member 'KismetProceduralMeshLibrary_CreateGridMeshWelded::Triangles' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshWelded, Vertices) == 0x000018, "Member 'KismetProceduralMeshLibrary_CreateGridMeshWelded::Vertices' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshWelded, UVs) == 0x000028, "Member 'KismetProceduralMeshLibrary_CreateGridMeshWelded::UVs' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_CreateGridMeshWelded, GridSpacing) == 0x000038, "Member 'KismetProceduralMeshLibrary_CreateGridMeshWelded::GridSpacing' has a wrong offset!");

// Function ProceduralMeshComponent.KismetProceduralMeshLibrary.GenerateBoxMesh
// 0x0060 (0x0060 - 0x0000)
struct KismetProceduralMeshLibrary_GenerateBoxMesh final
{
public:
	struct FVector                                BoxRadius;                                         // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Vertices;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Triangles;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Normals;                                           // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UVs;                                               // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProcMeshTangent>               Tangents;                                          // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetProceduralMeshLibrary_GenerateBoxMesh) == 0x000008, "Wrong alignment on KismetProceduralMeshLibrary_GenerateBoxMesh");
static_assert(sizeof(KismetProceduralMeshLibrary_GenerateBoxMesh) == 0x000060, "Wrong size on KismetProceduralMeshLibrary_GenerateBoxMesh");
static_assert(offsetof(KismetProceduralMeshLibrary_GenerateBoxMesh, BoxRadius) == 0x000000, "Member 'KismetProceduralMeshLibrary_GenerateBoxMesh::BoxRadius' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GenerateBoxMesh, Vertices) == 0x000010, "Member 'KismetProceduralMeshLibrary_GenerateBoxMesh::Vertices' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GenerateBoxMesh, Triangles) == 0x000020, "Member 'KismetProceduralMeshLibrary_GenerateBoxMesh::Triangles' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GenerateBoxMesh, Normals) == 0x000030, "Member 'KismetProceduralMeshLibrary_GenerateBoxMesh::Normals' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GenerateBoxMesh, UVs) == 0x000040, "Member 'KismetProceduralMeshLibrary_GenerateBoxMesh::UVs' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GenerateBoxMesh, Tangents) == 0x000050, "Member 'KismetProceduralMeshLibrary_GenerateBoxMesh::Tangents' has a wrong offset!");

// Function ProceduralMeshComponent.KismetProceduralMeshLibrary.GetSectionFromProceduralMesh
// 0x0060 (0x0060 - 0x0000)
struct KismetProceduralMeshLibrary_GetSectionFromProceduralMesh final
{
public:
	class UProceduralMeshComponent*               InProcMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Vertices;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Triangles;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Normals;                                           // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UVs;                                               // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProcMeshTangent>               Tangents;                                          // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetProceduralMeshLibrary_GetSectionFromProceduralMesh) == 0x000008, "Wrong alignment on KismetProceduralMeshLibrary_GetSectionFromProceduralMesh");
static_assert(sizeof(KismetProceduralMeshLibrary_GetSectionFromProceduralMesh) == 0x000060, "Wrong size on KismetProceduralMeshLibrary_GetSectionFromProceduralMesh");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromProceduralMesh, InProcMesh) == 0x000000, "Member 'KismetProceduralMeshLibrary_GetSectionFromProceduralMesh::InProcMesh' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromProceduralMesh, SectionIndex) == 0x000008, "Member 'KismetProceduralMeshLibrary_GetSectionFromProceduralMesh::SectionIndex' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromProceduralMesh, Vertices) == 0x000010, "Member 'KismetProceduralMeshLibrary_GetSectionFromProceduralMesh::Vertices' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromProceduralMesh, Triangles) == 0x000020, "Member 'KismetProceduralMeshLibrary_GetSectionFromProceduralMesh::Triangles' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromProceduralMesh, Normals) == 0x000030, "Member 'KismetProceduralMeshLibrary_GetSectionFromProceduralMesh::Normals' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromProceduralMesh, UVs) == 0x000040, "Member 'KismetProceduralMeshLibrary_GetSectionFromProceduralMesh::UVs' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromProceduralMesh, Tangents) == 0x000050, "Member 'KismetProceduralMeshLibrary_GetSectionFromProceduralMesh::Tangents' has a wrong offset!");

// Function ProceduralMeshComponent.KismetProceduralMeshLibrary.GetSectionFromStaticMesh
// 0x0060 (0x0060 - 0x0000)
struct KismetProceduralMeshLibrary_GetSectionFromStaticMesh final
{
public:
	class UStaticMesh*                            InMesh;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LODIndex;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SectionIndex;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Vertices;                                          // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 Triangles;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Normals;                                           // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UVs;                                               // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProcMeshTangent>               Tangents;                                          // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetProceduralMeshLibrary_GetSectionFromStaticMesh) == 0x000008, "Wrong alignment on KismetProceduralMeshLibrary_GetSectionFromStaticMesh");
static_assert(sizeof(KismetProceduralMeshLibrary_GetSectionFromStaticMesh) == 0x000060, "Wrong size on KismetProceduralMeshLibrary_GetSectionFromStaticMesh");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromStaticMesh, InMesh) == 0x000000, "Member 'KismetProceduralMeshLibrary_GetSectionFromStaticMesh::InMesh' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromStaticMesh, LODIndex) == 0x000008, "Member 'KismetProceduralMeshLibrary_GetSectionFromStaticMesh::LODIndex' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromStaticMesh, SectionIndex) == 0x00000C, "Member 'KismetProceduralMeshLibrary_GetSectionFromStaticMesh::SectionIndex' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromStaticMesh, Vertices) == 0x000010, "Member 'KismetProceduralMeshLibrary_GetSectionFromStaticMesh::Vertices' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromStaticMesh, Triangles) == 0x000020, "Member 'KismetProceduralMeshLibrary_GetSectionFromStaticMesh::Triangles' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromStaticMesh, Normals) == 0x000030, "Member 'KismetProceduralMeshLibrary_GetSectionFromStaticMesh::Normals' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromStaticMesh, UVs) == 0x000040, "Member 'KismetProceduralMeshLibrary_GetSectionFromStaticMesh::UVs' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_GetSectionFromStaticMesh, Tangents) == 0x000050, "Member 'KismetProceduralMeshLibrary_GetSectionFromStaticMesh::Tangents' has a wrong offset!");

// Function ProceduralMeshComponent.KismetProceduralMeshLibrary.SliceProceduralMesh
// 0x0040 (0x0040 - 0x0000)
struct KismetProceduralMeshLibrary_SliceProceduralMesh final
{
public:
	class UProceduralMeshComponent*               InProcMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlanePosition;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PlaneNormal;                                       // 0x0014(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateOtherHalf;                                  // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProceduralMeshComponent*               OutOtherHalfProcMesh;                              // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProcMeshSliceCapOption                       CapOption;                                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CapMaterial;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KismetProceduralMeshLibrary_SliceProceduralMesh) == 0x000008, "Wrong alignment on KismetProceduralMeshLibrary_SliceProceduralMesh");
static_assert(sizeof(KismetProceduralMeshLibrary_SliceProceduralMesh) == 0x000040, "Wrong size on KismetProceduralMeshLibrary_SliceProceduralMesh");
static_assert(offsetof(KismetProceduralMeshLibrary_SliceProceduralMesh, InProcMesh) == 0x000000, "Member 'KismetProceduralMeshLibrary_SliceProceduralMesh::InProcMesh' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_SliceProceduralMesh, PlanePosition) == 0x000008, "Member 'KismetProceduralMeshLibrary_SliceProceduralMesh::PlanePosition' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_SliceProceduralMesh, PlaneNormal) == 0x000014, "Member 'KismetProceduralMeshLibrary_SliceProceduralMesh::PlaneNormal' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_SliceProceduralMesh, bCreateOtherHalf) == 0x000020, "Member 'KismetProceduralMeshLibrary_SliceProceduralMesh::bCreateOtherHalf' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_SliceProceduralMesh, OutOtherHalfProcMesh) == 0x000028, "Member 'KismetProceduralMeshLibrary_SliceProceduralMesh::OutOtherHalfProcMesh' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_SliceProceduralMesh, CapOption) == 0x000030, "Member 'KismetProceduralMeshLibrary_SliceProceduralMesh::CapOption' has a wrong offset!");
static_assert(offsetof(KismetProceduralMeshLibrary_SliceProceduralMesh, CapMaterial) == 0x000038, "Member 'KismetProceduralMeshLibrary_SliceProceduralMesh::CapMaterial' has a wrong offset!");

// Function ProceduralMeshComponent.ProceduralMeshComponent.AddCollisionConvexMesh
// 0x0010 (0x0010 - 0x0000)
struct ProceduralMeshComponent_AddCollisionConvexMesh final
{
public:
	TArray<struct FVector>                        ConvexVerts;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralMeshComponent_AddCollisionConvexMesh) == 0x000008, "Wrong alignment on ProceduralMeshComponent_AddCollisionConvexMesh");
static_assert(sizeof(ProceduralMeshComponent_AddCollisionConvexMesh) == 0x000010, "Wrong size on ProceduralMeshComponent_AddCollisionConvexMesh");
static_assert(offsetof(ProceduralMeshComponent_AddCollisionConvexMesh, ConvexVerts) == 0x000000, "Member 'ProceduralMeshComponent_AddCollisionConvexMesh::ConvexVerts' has a wrong offset!");

// Function ProceduralMeshComponent.ProceduralMeshComponent.ClearMeshSection
// 0x0004 (0x0004 - 0x0000)
struct ProceduralMeshComponent_ClearMeshSection final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralMeshComponent_ClearMeshSection) == 0x000004, "Wrong alignment on ProceduralMeshComponent_ClearMeshSection");
static_assert(sizeof(ProceduralMeshComponent_ClearMeshSection) == 0x000004, "Wrong size on ProceduralMeshComponent_ClearMeshSection");
static_assert(offsetof(ProceduralMeshComponent_ClearMeshSection, SectionIndex) == 0x000000, "Member 'ProceduralMeshComponent_ClearMeshSection::SectionIndex' has a wrong offset!");

// Function ProceduralMeshComponent.ProceduralMeshComponent.CreateMeshSection
// 0x0070 (0x0070 - 0x0000)
struct ProceduralMeshComponent_CreateMeshSection final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Vertices;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 Triangles;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Normals;                                           // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV0;                                               // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         VertexColors;                                      // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FProcMeshTangent>               Tangents;                                          // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCreateCollision;                                  // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProceduralMeshComponent_CreateMeshSection) == 0x000008, "Wrong alignment on ProceduralMeshComponent_CreateMeshSection");
static_assert(sizeof(ProceduralMeshComponent_CreateMeshSection) == 0x000070, "Wrong size on ProceduralMeshComponent_CreateMeshSection");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection, SectionIndex) == 0x000000, "Member 'ProceduralMeshComponent_CreateMeshSection::SectionIndex' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection, Vertices) == 0x000008, "Member 'ProceduralMeshComponent_CreateMeshSection::Vertices' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection, Triangles) == 0x000018, "Member 'ProceduralMeshComponent_CreateMeshSection::Triangles' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection, Normals) == 0x000028, "Member 'ProceduralMeshComponent_CreateMeshSection::Normals' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection, UV0) == 0x000038, "Member 'ProceduralMeshComponent_CreateMeshSection::UV0' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection, VertexColors) == 0x000048, "Member 'ProceduralMeshComponent_CreateMeshSection::VertexColors' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection, Tangents) == 0x000058, "Member 'ProceduralMeshComponent_CreateMeshSection::Tangents' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection, bCreateCollision) == 0x000068, "Member 'ProceduralMeshComponent_CreateMeshSection::bCreateCollision' has a wrong offset!");

// Function ProceduralMeshComponent.ProceduralMeshComponent.CreateMeshSection_LinearColor
// 0x00A0 (0x00A0 - 0x0000)
struct ProceduralMeshComponent_CreateMeshSection_LinearColor final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Vertices;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 Triangles;                                         // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Normals;                                           // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV0;                                               // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV1;                                               // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV2;                                               // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV3;                                               // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   VertexColors;                                      // 0x0078(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FProcMeshTangent>               Tangents;                                          // 0x0088(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bCreateCollision;                                  // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProceduralMeshComponent_CreateMeshSection_LinearColor) == 0x000008, "Wrong alignment on ProceduralMeshComponent_CreateMeshSection_LinearColor");
static_assert(sizeof(ProceduralMeshComponent_CreateMeshSection_LinearColor) == 0x0000A0, "Wrong size on ProceduralMeshComponent_CreateMeshSection_LinearColor");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection_LinearColor, SectionIndex) == 0x000000, "Member 'ProceduralMeshComponent_CreateMeshSection_LinearColor::SectionIndex' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection_LinearColor, Vertices) == 0x000008, "Member 'ProceduralMeshComponent_CreateMeshSection_LinearColor::Vertices' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection_LinearColor, Triangles) == 0x000018, "Member 'ProceduralMeshComponent_CreateMeshSection_LinearColor::Triangles' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection_LinearColor, Normals) == 0x000028, "Member 'ProceduralMeshComponent_CreateMeshSection_LinearColor::Normals' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection_LinearColor, UV0) == 0x000038, "Member 'ProceduralMeshComponent_CreateMeshSection_LinearColor::UV0' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection_LinearColor, UV1) == 0x000048, "Member 'ProceduralMeshComponent_CreateMeshSection_LinearColor::UV1' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection_LinearColor, UV2) == 0x000058, "Member 'ProceduralMeshComponent_CreateMeshSection_LinearColor::UV2' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection_LinearColor, UV3) == 0x000068, "Member 'ProceduralMeshComponent_CreateMeshSection_LinearColor::UV3' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection_LinearColor, VertexColors) == 0x000078, "Member 'ProceduralMeshComponent_CreateMeshSection_LinearColor::VertexColors' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection_LinearColor, Tangents) == 0x000088, "Member 'ProceduralMeshComponent_CreateMeshSection_LinearColor::Tangents' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_CreateMeshSection_LinearColor, bCreateCollision) == 0x000098, "Member 'ProceduralMeshComponent_CreateMeshSection_LinearColor::bCreateCollision' has a wrong offset!");

// Function ProceduralMeshComponent.ProceduralMeshComponent.SetMeshSectionVisible
// 0x0008 (0x0008 - 0x0000)
struct ProceduralMeshComponent_SetMeshSectionVisible final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewVisibility;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProceduralMeshComponent_SetMeshSectionVisible) == 0x000004, "Wrong alignment on ProceduralMeshComponent_SetMeshSectionVisible");
static_assert(sizeof(ProceduralMeshComponent_SetMeshSectionVisible) == 0x000008, "Wrong size on ProceduralMeshComponent_SetMeshSectionVisible");
static_assert(offsetof(ProceduralMeshComponent_SetMeshSectionVisible, SectionIndex) == 0x000000, "Member 'ProceduralMeshComponent_SetMeshSectionVisible::SectionIndex' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_SetMeshSectionVisible, bNewVisibility) == 0x000004, "Member 'ProceduralMeshComponent_SetMeshSectionVisible::bNewVisibility' has a wrong offset!");

// Function ProceduralMeshComponent.ProceduralMeshComponent.UpdateMeshSection
// 0x0058 (0x0058 - 0x0000)
struct ProceduralMeshComponent_UpdateMeshSection final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Vertices;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Normals;                                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV0;                                               // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         VertexColors;                                      // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FProcMeshTangent>               Tangents;                                          // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralMeshComponent_UpdateMeshSection) == 0x000008, "Wrong alignment on ProceduralMeshComponent_UpdateMeshSection");
static_assert(sizeof(ProceduralMeshComponent_UpdateMeshSection) == 0x000058, "Wrong size on ProceduralMeshComponent_UpdateMeshSection");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection, SectionIndex) == 0x000000, "Member 'ProceduralMeshComponent_UpdateMeshSection::SectionIndex' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection, Vertices) == 0x000008, "Member 'ProceduralMeshComponent_UpdateMeshSection::Vertices' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection, Normals) == 0x000018, "Member 'ProceduralMeshComponent_UpdateMeshSection::Normals' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection, UV0) == 0x000028, "Member 'ProceduralMeshComponent_UpdateMeshSection::UV0' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection, VertexColors) == 0x000038, "Member 'ProceduralMeshComponent_UpdateMeshSection::VertexColors' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection, Tangents) == 0x000048, "Member 'ProceduralMeshComponent_UpdateMeshSection::Tangents' has a wrong offset!");

// Function ProceduralMeshComponent.ProceduralMeshComponent.UpdateMeshSection_LinearColor
// 0x0088 (0x0088 - 0x0000)
struct ProceduralMeshComponent_UpdateMeshSection_LinearColor final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Vertices;                                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        Normals;                                           // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV0;                                               // 0x0028(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV1;                                               // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV2;                                               // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      UV3;                                               // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, AdvancedDisplay, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   VertexColors;                                      // 0x0068(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FProcMeshTangent>               Tangents;                                          // 0x0078(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralMeshComponent_UpdateMeshSection_LinearColor) == 0x000008, "Wrong alignment on ProceduralMeshComponent_UpdateMeshSection_LinearColor");
static_assert(sizeof(ProceduralMeshComponent_UpdateMeshSection_LinearColor) == 0x000088, "Wrong size on ProceduralMeshComponent_UpdateMeshSection_LinearColor");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection_LinearColor, SectionIndex) == 0x000000, "Member 'ProceduralMeshComponent_UpdateMeshSection_LinearColor::SectionIndex' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection_LinearColor, Vertices) == 0x000008, "Member 'ProceduralMeshComponent_UpdateMeshSection_LinearColor::Vertices' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection_LinearColor, Normals) == 0x000018, "Member 'ProceduralMeshComponent_UpdateMeshSection_LinearColor::Normals' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection_LinearColor, UV0) == 0x000028, "Member 'ProceduralMeshComponent_UpdateMeshSection_LinearColor::UV0' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection_LinearColor, UV1) == 0x000038, "Member 'ProceduralMeshComponent_UpdateMeshSection_LinearColor::UV1' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection_LinearColor, UV2) == 0x000048, "Member 'ProceduralMeshComponent_UpdateMeshSection_LinearColor::UV2' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection_LinearColor, UV3) == 0x000058, "Member 'ProceduralMeshComponent_UpdateMeshSection_LinearColor::UV3' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection_LinearColor, VertexColors) == 0x000068, "Member 'ProceduralMeshComponent_UpdateMeshSection_LinearColor::VertexColors' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_UpdateMeshSection_LinearColor, Tangents) == 0x000078, "Member 'ProceduralMeshComponent_UpdateMeshSection_LinearColor::Tangents' has a wrong offset!");

// Function ProceduralMeshComponent.ProceduralMeshComponent.GetNumSections
// 0x0004 (0x0004 - 0x0000)
struct ProceduralMeshComponent_GetNumSections final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralMeshComponent_GetNumSections) == 0x000004, "Wrong alignment on ProceduralMeshComponent_GetNumSections");
static_assert(sizeof(ProceduralMeshComponent_GetNumSections) == 0x000004, "Wrong size on ProceduralMeshComponent_GetNumSections");
static_assert(offsetof(ProceduralMeshComponent_GetNumSections, ReturnValue) == 0x000000, "Member 'ProceduralMeshComponent_GetNumSections::ReturnValue' has a wrong offset!");

// Function ProceduralMeshComponent.ProceduralMeshComponent.IsMeshSectionVisible
// 0x0008 (0x0008 - 0x0000)
struct ProceduralMeshComponent_IsMeshSectionVisible final
{
public:
	int32                                         SectionIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProceduralMeshComponent_IsMeshSectionVisible) == 0x000004, "Wrong alignment on ProceduralMeshComponent_IsMeshSectionVisible");
static_assert(sizeof(ProceduralMeshComponent_IsMeshSectionVisible) == 0x000008, "Wrong size on ProceduralMeshComponent_IsMeshSectionVisible");
static_assert(offsetof(ProceduralMeshComponent_IsMeshSectionVisible, SectionIndex) == 0x000000, "Member 'ProceduralMeshComponent_IsMeshSectionVisible::SectionIndex' has a wrong offset!");
static_assert(offsetof(ProceduralMeshComponent_IsMeshSectionVisible, ReturnValue) == 0x000004, "Member 'ProceduralMeshComponent_IsMeshSectionVisible::ReturnValue' has a wrong offset!");

}

