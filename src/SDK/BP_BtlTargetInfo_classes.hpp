#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BtlTargetInfo

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Xrd777_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_BtlGuiBaseActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BtlTargetInfo.BP_BtlTargetInfo_C
// 0x0228 (0x0578 - 0x0350)
class ABP_BtlTargetInfo_C final : public ABP_BtlGuiBaseActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_BtlTargetInfo_C;                 // 0x0350(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBtlGuiResources*                       BtlGuiResources;                                   // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlDataBaseComponent*                  BtlDataBase;                                       // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawComponent*                   BtlGuiDraw;                                        // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleTimeline_SupportAlpha_55C54B1A4C16E891C17A8D87D103B9A4; // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ScaleTimeline_SupportScale_55C54B1A4C16E891C17A8D87D103B9A4; // 0x0374(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ScaleTimeline__Direction_55C54B1A4C16E891C17A8D87D103B9A4; // 0x0378(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ScaleTimeline;                                     // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LoopAnimation_Alpha_2235C0FD4DE8D8B60A110FA89BA86637; // 0x0388(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LoopAnimation__Direction_2235C0FD4DE8D8B60A110FA89BA86637; // 0x038C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38D[0x3];                                      // 0x038D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LoopAnimation;                                     // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         OutTimeline_Rate_FE6C90E64EEA68934A5CEB83A81EAC9D; // 0x0398(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            OutTimeline__Direction_FE6C90E64EEA68934A5CEB83A81EAC9D; // 0x039C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39D[0x3];                                      // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     OutTimeline;                                       // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InTimeline_SupportAlpha_A89C7E4444030D23563D6A8A48BEE41A; // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InTimeline_SupportRate_A89C7E4444030D23563D6A8A48BEE41A; // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InTimeline_BadStatusMovement_A89C7E4444030D23563D6A8A48BEE41A; // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         InTimeline_Rate_A89C7E4444030D23563D6A8A48BEE41A;  // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            InTimeline__Direction_A89C7E4444030D23563D6A8A48BEE41A; // 0x03B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B9[0x7];                                      // 0x03B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     InTimeline;                                        // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              RootPosition;                                      // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectPlg*                   BackPanel1;                                        // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBtlGuiDrawObjectPlg*                   BackPanel2;                                        // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              ShadowOffset;                                      // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBtlGuiDrawObjectSprite*>        IconShadow;                                        // 0x03E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBtlGuiDrawObjectSprite*>        IconIn;                                            // 0x03F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBtlGuiDrawObjectSprite*>        IconFrame;                                         // 0x0408(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBtlGuiDrawObjectSprite*>        IconTextShadow;                                    // 0x0418(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBtlGuiDrawObjectSprite*>        IconText;                                          // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBtlGuiDrawObjectSprite*>        AddIcon;                                           // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UBtlGuiDrawObjectSprite*>        IconBadStatus;                                     // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ObjectCraeted;                                     // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBtlGuiDrawObjectText*                  TargetName;                                        // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseSupport;                                        // 0x0468(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DoubleReflect;                                     // 0x0469(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_46A[0x6];                                      // 0x046A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  IsUp;                                              // 0x0470(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsBATKx2;                                          // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsMATKx2;                                          // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_482[0x2];                                      // 0x0482(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              AttackPosOffset;                                   // 0x0484(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  IsLastTurn;                                        // 0x0490(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<EBtlDataBadStatus>                     BadStatusOffset;                                   // 0x04A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector2D>                      AllIconOffset;                                     // 0x04B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 AllIconAlpha;                                      // 0x04C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         MovementPos;                                       // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Alpha;                                             // 0x04D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MovementOutPos;                                    // 0x04D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Scale;                                             // 0x04DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              BadStatusMovePos;                                  // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Support_Rate;                                      // 0x04E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              AttackPos1;                                        // 0x04EC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              AttackPos2;                                        // 0x04F4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UpAlpha;                                           // 0x04FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ColorFlag;                                         // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_501[0x7];                                      // 0x0501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FColor>                         MainColor;                                         // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FColor>                         SubColor;                                          // 0x0518(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 ParamScale;                                        // 0x0528(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<float>                                 ParamAlpha;                                        // 0x0538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsBadStatus;                                       // 0x0548(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABtlActor*                              Character;                                         // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SupportAlpha;                                      // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBtlGuiDrawObjectCore*>          BackPanelList;                                     // 0x0560(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          AnimationFlag;                                     // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void ExecuteUbergraph_BP_BtlTargetInfo(int32 EntryPoint);
	void GuiActorUpdate(float DeltaTime);
	void GuiActorBeginPlay();
	void MakeUObject();
	void EndAnimation(bool NoAnimation);
	void StartAnimation(bool NoAnimation, bool UpportAnime);
	void ScaleTimeline__UpdateFunc();
	void ScaleTimeline__FinishedFunc();
	void LoopAnimation__UpdateFunc();
	void LoopAnimation__FinishedFunc();
	void OutTimeline__UpdateFunc();
	void OutTimeline__FinishedFunc();
	void InTimeline__UpdateFunc();
	void InTimeline__FinishedFunc();
	void SetParam(class ABtlActor* Actor, bool NoDuplicationCheck);
	void ChangeColor(bool IsMATK);
	void GetNowSupport(int32 Index_0, bool* NewParam);
	void UpdateAnimation();
	void RefrectLocalizeLayout();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BtlTargetInfo_C">();
	}
	static class ABP_BtlTargetInfo_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BtlTargetInfo_C>();
	}
};
static_assert(alignof(ABP_BtlTargetInfo_C) == 0x000008, "Wrong alignment on ABP_BtlTargetInfo_C");
static_assert(sizeof(ABP_BtlTargetInfo_C) == 0x000578, "Wrong size on ABP_BtlTargetInfo_C");
static_assert(offsetof(ABP_BtlTargetInfo_C, UberGraphFrame_BP_BtlTargetInfo_C) == 0x000350, "Member 'ABP_BtlTargetInfo_C::UberGraphFrame_BP_BtlTargetInfo_C' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, BtlGuiResources) == 0x000358, "Member 'ABP_BtlTargetInfo_C::BtlGuiResources' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, BtlDataBase) == 0x000360, "Member 'ABP_BtlTargetInfo_C::BtlDataBase' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, BtlGuiDraw) == 0x000368, "Member 'ABP_BtlTargetInfo_C::BtlGuiDraw' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, ScaleTimeline_SupportAlpha_55C54B1A4C16E891C17A8D87D103B9A4) == 0x000370, "Member 'ABP_BtlTargetInfo_C::ScaleTimeline_SupportAlpha_55C54B1A4C16E891C17A8D87D103B9A4' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, ScaleTimeline_SupportScale_55C54B1A4C16E891C17A8D87D103B9A4) == 0x000374, "Member 'ABP_BtlTargetInfo_C::ScaleTimeline_SupportScale_55C54B1A4C16E891C17A8D87D103B9A4' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, ScaleTimeline__Direction_55C54B1A4C16E891C17A8D87D103B9A4) == 0x000378, "Member 'ABP_BtlTargetInfo_C::ScaleTimeline__Direction_55C54B1A4C16E891C17A8D87D103B9A4' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, ScaleTimeline) == 0x000380, "Member 'ABP_BtlTargetInfo_C::ScaleTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, LoopAnimation_Alpha_2235C0FD4DE8D8B60A110FA89BA86637) == 0x000388, "Member 'ABP_BtlTargetInfo_C::LoopAnimation_Alpha_2235C0FD4DE8D8B60A110FA89BA86637' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, LoopAnimation__Direction_2235C0FD4DE8D8B60A110FA89BA86637) == 0x00038C, "Member 'ABP_BtlTargetInfo_C::LoopAnimation__Direction_2235C0FD4DE8D8B60A110FA89BA86637' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, LoopAnimation) == 0x000390, "Member 'ABP_BtlTargetInfo_C::LoopAnimation' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, OutTimeline_Rate_FE6C90E64EEA68934A5CEB83A81EAC9D) == 0x000398, "Member 'ABP_BtlTargetInfo_C::OutTimeline_Rate_FE6C90E64EEA68934A5CEB83A81EAC9D' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, OutTimeline__Direction_FE6C90E64EEA68934A5CEB83A81EAC9D) == 0x00039C, "Member 'ABP_BtlTargetInfo_C::OutTimeline__Direction_FE6C90E64EEA68934A5CEB83A81EAC9D' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, OutTimeline) == 0x0003A0, "Member 'ABP_BtlTargetInfo_C::OutTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, InTimeline_SupportAlpha_A89C7E4444030D23563D6A8A48BEE41A) == 0x0003A8, "Member 'ABP_BtlTargetInfo_C::InTimeline_SupportAlpha_A89C7E4444030D23563D6A8A48BEE41A' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, InTimeline_SupportRate_A89C7E4444030D23563D6A8A48BEE41A) == 0x0003AC, "Member 'ABP_BtlTargetInfo_C::InTimeline_SupportRate_A89C7E4444030D23563D6A8A48BEE41A' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, InTimeline_BadStatusMovement_A89C7E4444030D23563D6A8A48BEE41A) == 0x0003B0, "Member 'ABP_BtlTargetInfo_C::InTimeline_BadStatusMovement_A89C7E4444030D23563D6A8A48BEE41A' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, InTimeline_Rate_A89C7E4444030D23563D6A8A48BEE41A) == 0x0003B4, "Member 'ABP_BtlTargetInfo_C::InTimeline_Rate_A89C7E4444030D23563D6A8A48BEE41A' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, InTimeline__Direction_A89C7E4444030D23563D6A8A48BEE41A) == 0x0003B8, "Member 'ABP_BtlTargetInfo_C::InTimeline__Direction_A89C7E4444030D23563D6A8A48BEE41A' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, InTimeline) == 0x0003C0, "Member 'ABP_BtlTargetInfo_C::InTimeline' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, RootPosition) == 0x0003C8, "Member 'ABP_BtlTargetInfo_C::RootPosition' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, BackPanel1) == 0x0003D0, "Member 'ABP_BtlTargetInfo_C::BackPanel1' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, BackPanel2) == 0x0003D8, "Member 'ABP_BtlTargetInfo_C::BackPanel2' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, ShadowOffset) == 0x0003E0, "Member 'ABP_BtlTargetInfo_C::ShadowOffset' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, IconShadow) == 0x0003E8, "Member 'ABP_BtlTargetInfo_C::IconShadow' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, IconIn) == 0x0003F8, "Member 'ABP_BtlTargetInfo_C::IconIn' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, IconFrame) == 0x000408, "Member 'ABP_BtlTargetInfo_C::IconFrame' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, IconTextShadow) == 0x000418, "Member 'ABP_BtlTargetInfo_C::IconTextShadow' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, IconText) == 0x000428, "Member 'ABP_BtlTargetInfo_C::IconText' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, AddIcon) == 0x000438, "Member 'ABP_BtlTargetInfo_C::AddIcon' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, IconBadStatus) == 0x000448, "Member 'ABP_BtlTargetInfo_C::IconBadStatus' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, ObjectCraeted) == 0x000458, "Member 'ABP_BtlTargetInfo_C::ObjectCraeted' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, TargetName) == 0x000460, "Member 'ABP_BtlTargetInfo_C::TargetName' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, UseSupport) == 0x000468, "Member 'ABP_BtlTargetInfo_C::UseSupport' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, DoubleReflect) == 0x000469, "Member 'ABP_BtlTargetInfo_C::DoubleReflect' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, IsUp) == 0x000470, "Member 'ABP_BtlTargetInfo_C::IsUp' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, IsBATKx2) == 0x000480, "Member 'ABP_BtlTargetInfo_C::IsBATKx2' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, IsMATKx2) == 0x000481, "Member 'ABP_BtlTargetInfo_C::IsMATKx2' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, AttackPosOffset) == 0x000484, "Member 'ABP_BtlTargetInfo_C::AttackPosOffset' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, IsLastTurn) == 0x000490, "Member 'ABP_BtlTargetInfo_C::IsLastTurn' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, BadStatusOffset) == 0x0004A0, "Member 'ABP_BtlTargetInfo_C::BadStatusOffset' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, AllIconOffset) == 0x0004B0, "Member 'ABP_BtlTargetInfo_C::AllIconOffset' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, AllIconAlpha) == 0x0004C0, "Member 'ABP_BtlTargetInfo_C::AllIconAlpha' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, MovementPos) == 0x0004D0, "Member 'ABP_BtlTargetInfo_C::MovementPos' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, Alpha) == 0x0004D4, "Member 'ABP_BtlTargetInfo_C::Alpha' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, MovementOutPos) == 0x0004D8, "Member 'ABP_BtlTargetInfo_C::MovementOutPos' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, Scale) == 0x0004DC, "Member 'ABP_BtlTargetInfo_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, BadStatusMovePos) == 0x0004E0, "Member 'ABP_BtlTargetInfo_C::BadStatusMovePos' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, Support_Rate) == 0x0004E8, "Member 'ABP_BtlTargetInfo_C::Support_Rate' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, AttackPos1) == 0x0004EC, "Member 'ABP_BtlTargetInfo_C::AttackPos1' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, AttackPos2) == 0x0004F4, "Member 'ABP_BtlTargetInfo_C::AttackPos2' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, UpAlpha) == 0x0004FC, "Member 'ABP_BtlTargetInfo_C::UpAlpha' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, ColorFlag) == 0x000500, "Member 'ABP_BtlTargetInfo_C::ColorFlag' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, MainColor) == 0x000508, "Member 'ABP_BtlTargetInfo_C::MainColor' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, SubColor) == 0x000518, "Member 'ABP_BtlTargetInfo_C::SubColor' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, ParamScale) == 0x000528, "Member 'ABP_BtlTargetInfo_C::ParamScale' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, ParamAlpha) == 0x000538, "Member 'ABP_BtlTargetInfo_C::ParamAlpha' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, IsBadStatus) == 0x000548, "Member 'ABP_BtlTargetInfo_C::IsBadStatus' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, Character) == 0x000550, "Member 'ABP_BtlTargetInfo_C::Character' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, SupportAlpha) == 0x000558, "Member 'ABP_BtlTargetInfo_C::SupportAlpha' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, BackPanelList) == 0x000560, "Member 'ABP_BtlTargetInfo_C::BackPanelList' has a wrong offset!");
static_assert(offsetof(ABP_BtlTargetInfo_C, AnimationFlag) == 0x000570, "Member 'ABP_BtlTargetInfo_C::AnimationFlag' has a wrong offset!");

}

